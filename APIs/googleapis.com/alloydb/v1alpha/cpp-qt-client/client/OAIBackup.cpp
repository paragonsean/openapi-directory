/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cluster_uid_isSet = false;
    m_cluster_uid_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expiry_quantity_isSet = false;
    m_expiry_quantity_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_satisfies_pzi_isSet = false;
    m_satisfies_pzi_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_cluster_uid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uid, json[QString("clusterUid")]);
    m_cluster_uid_isSet = !json[QString("clusterUid")].isNull() && m_cluster_uid_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expiry_quantity_isValid = ::OpenAPI::fromJsonValue(m_expiry_quantity, json[QString("expiryQuantity")]);
    m_expiry_quantity_isSet = !json[QString("expiryQuantity")].isNull() && m_expiry_quantity_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_satisfies_pzi_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzi, json[QString("satisfiesPzi")]);
    m_satisfies_pzi_isSet = !json[QString("satisfiesPzi")].isNull() && m_satisfies_pzi_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cluster_uid_isSet) {
        obj.insert(QString("clusterUid"), ::OpenAPI::toJsonValue(m_cluster_uid));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expiry_quantity.isSet()) {
        obj.insert(QString("expiryQuantity"), ::OpenAPI::toJsonValue(m_expiry_quantity));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_satisfies_pzi_isSet) {
        obj.insert(QString("satisfiesPzi"), ::OpenAPI::toJsonValue(m_satisfies_pzi));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIBackup::getAnnotations() const {
    return m_annotations;
}
void OAIBackup::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIBackup::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIBackup::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIBackup::getClusterName() const {
    return m_cluster_name;
}
void OAIBackup::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIBackup::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIBackup::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIBackup::getClusterUid() const {
    return m_cluster_uid;
}
void OAIBackup::setClusterUid(const QString &cluster_uid) {
    m_cluster_uid = cluster_uid;
    m_cluster_uid_isSet = true;
}

bool OAIBackup::is_cluster_uid_Set() const{
    return m_cluster_uid_isSet;
}

bool OAIBackup::is_cluster_uid_Valid() const{
    return m_cluster_uid_isValid;
}

QString OAIBackup::getCreateTime() const {
    return m_create_time;
}
void OAIBackup::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBackup::getDatabaseVersion() const {
    return m_database_version;
}
void OAIBackup::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAIBackup::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAIBackup::is_database_version_Valid() const{
    return m_database_version_isValid;
}

QString OAIBackup::getDeleteTime() const {
    return m_delete_time;
}
void OAIBackup::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIBackup::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIBackup::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIBackup::getDescription() const {
    return m_description;
}
void OAIBackup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBackup::getDisplayName() const {
    return m_display_name;
}
void OAIBackup::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIBackup::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIBackup::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEncryptionConfig OAIBackup::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIBackup::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIBackup::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIBackup::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIEncryptionInfo OAIBackup::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIBackup::setEncryptionInfo(const OAIEncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIBackup::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIBackup::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QString OAIBackup::getEtag() const {
    return m_etag;
}
void OAIBackup::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBackup::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBackup::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIQuantityBasedExpiry OAIBackup::getExpiryQuantity() const {
    return m_expiry_quantity;
}
void OAIBackup::setExpiryQuantity(const OAIQuantityBasedExpiry &expiry_quantity) {
    m_expiry_quantity = expiry_quantity;
    m_expiry_quantity_isSet = true;
}

bool OAIBackup::is_expiry_quantity_Set() const{
    return m_expiry_quantity_isSet;
}

bool OAIBackup::is_expiry_quantity_Valid() const{
    return m_expiry_quantity_isValid;
}

QString OAIBackup::getExpiryTime() const {
    return m_expiry_time;
}
void OAIBackup::setExpiryTime(const QString &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIBackup::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIBackup::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

QMap<QString, QString> OAIBackup::getLabels() const {
    return m_labels;
}
void OAIBackup::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBackup::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBackup::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIBackup::getName() const {
    return m_name;
}
void OAIBackup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBackup::isReconciling() const {
    return m_reconciling;
}
void OAIBackup::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIBackup::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIBackup::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

bool OAIBackup::isSatisfiesPzi() const {
    return m_satisfies_pzi;
}
void OAIBackup::setSatisfiesPzi(const bool &satisfies_pzi) {
    m_satisfies_pzi = satisfies_pzi;
    m_satisfies_pzi_isSet = true;
}

bool OAIBackup::is_satisfies_pzi_Set() const{
    return m_satisfies_pzi_isSet;
}

bool OAIBackup::is_satisfies_pzi_Valid() const{
    return m_satisfies_pzi_isValid;
}

bool OAIBackup::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIBackup::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIBackup::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIBackup::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIBackup::getSizeBytes() const {
    return m_size_bytes;
}
void OAIBackup::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIBackup::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIBackup::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIBackup::getState() const {
    return m_state;
}
void OAIBackup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackup::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBackup::getType() const {
    return m_type;
}
void OAIBackup::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBackup::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBackup::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBackup::getUid() const {
    return m_uid;
}
void OAIBackup::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIBackup::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIBackup::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIBackup::getUpdateTime() const {
    return m_update_time;
}
void OAIBackup::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIBackup::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIBackup::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
