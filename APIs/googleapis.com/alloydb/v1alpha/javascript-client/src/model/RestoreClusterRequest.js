/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackupSource from './BackupSource';
import Cluster from './Cluster';
import ContinuousBackupSource from './ContinuousBackupSource';

/**
 * The RestoreClusterRequest model module.
 * @module model/RestoreClusterRequest
 * @version v1alpha
 */
class RestoreClusterRequest {
    /**
     * Constructs a new <code>RestoreClusterRequest</code>.
     * Message for restoring a Cluster from a backup or another cluster at a given point in time.
     * @alias module:model/RestoreClusterRequest
     */
    constructor() { 
        
        RestoreClusterRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestoreClusterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestoreClusterRequest} obj Optional instance to populate.
     * @return {module:model/RestoreClusterRequest} The populated <code>RestoreClusterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestoreClusterRequest();

            if (data.hasOwnProperty('backupSource')) {
                obj['backupSource'] = BackupSource.constructFromObject(data['backupSource']);
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = Cluster.constructFromObject(data['cluster']);
            }
            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('continuousBackupSource')) {
                obj['continuousBackupSource'] = ContinuousBackupSource.constructFromObject(data['continuousBackupSource']);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('validateOnly')) {
                obj['validateOnly'] = ApiClient.convertToType(data['validateOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestoreClusterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestoreClusterRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backupSource`
        if (data['backupSource']) { // data not null
          BackupSource.validateJSON(data['backupSource']);
        }
        // validate the optional field `cluster`
        if (data['cluster']) { // data not null
          Cluster.validateJSON(data['cluster']);
        }
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // validate the optional field `continuousBackupSource`
        if (data['continuousBackupSource']) { // data not null
          ContinuousBackupSource.validateJSON(data['continuousBackupSource']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * @member {module:model/BackupSource} backupSource
 */
RestoreClusterRequest.prototype['backupSource'] = undefined;

/**
 * @member {module:model/Cluster} cluster
 */
RestoreClusterRequest.prototype['cluster'] = undefined;

/**
 * Required. ID of the requesting object.
 * @member {String} clusterId
 */
RestoreClusterRequest.prototype['clusterId'] = undefined;

/**
 * @member {module:model/ContinuousBackupSource} continuousBackupSource
 */
RestoreClusterRequest.prototype['continuousBackupSource'] = undefined;

/**
 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 * @member {String} requestId
 */
RestoreClusterRequest.prototype['requestId'] = undefined;

/**
 * Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.
 * @member {Boolean} validateOnly
 */
RestoreClusterRequest.prototype['validateOnly'] = undefined;






export default RestoreClusterRequest;

