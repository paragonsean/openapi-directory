/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfig from './EncryptionConfig';
import EncryptionInfo from './EncryptionInfo';
import QuantityBasedExpiry from './QuantityBasedExpiry';

/**
 * The Backup model module.
 * @module model/Backup
 * @version v1alpha
 */
class Backup {
    /**
     * Constructs a new <code>Backup</code>.
     * Message describing Backup object
     * @alias module:model/Backup
     */
    constructor() { 
        
        Backup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Backup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Backup} obj Optional instance to populate.
     * @return {module:model/Backup} The populated <code>Backup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Backup();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('clusterUid')) {
                obj['clusterUid'] = ApiClient.convertToType(data['clusterUid'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('databaseVersion')) {
                obj['databaseVersion'] = ApiClient.convertToType(data['databaseVersion'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('encryptionInfo')) {
                obj['encryptionInfo'] = EncryptionInfo.constructFromObject(data['encryptionInfo']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('expiryQuantity')) {
                obj['expiryQuantity'] = QuantityBasedExpiry.constructFromObject(data['expiryQuantity']);
            }
            if (data.hasOwnProperty('expiryTime')) {
                obj['expiryTime'] = ApiClient.convertToType(data['expiryTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzi')) {
                obj['satisfiesPzi'] = ApiClient.convertToType(data['satisfiesPzi'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('sizeBytes')) {
                obj['sizeBytes'] = ApiClient.convertToType(data['sizeBytes'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Backup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Backup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // ensure the json data is a string
        if (data['clusterUid'] && !(typeof data['clusterUid'] === 'string' || data['clusterUid'] instanceof String)) {
            throw new Error("Expected the field `clusterUid` to be a primitive type in the JSON string but got " + data['clusterUid']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['databaseVersion'] && !(typeof data['databaseVersion'] === 'string' || data['databaseVersion'] instanceof String)) {
            throw new Error("Expected the field `databaseVersion` to be a primitive type in the JSON string but got " + data['databaseVersion']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // validate the optional field `encryptionInfo`
        if (data['encryptionInfo']) { // data not null
          EncryptionInfo.validateJSON(data['encryptionInfo']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `expiryQuantity`
        if (data['expiryQuantity']) { // data not null
          QuantityBasedExpiry.validateJSON(data['expiryQuantity']);
        }
        // ensure the json data is a string
        if (data['expiryTime'] && !(typeof data['expiryTime'] === 'string' || data['expiryTime'] instanceof String)) {
            throw new Error("Expected the field `expiryTime` to be a primitive type in the JSON string but got " + data['expiryTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sizeBytes'] && !(typeof data['sizeBytes'] === 'string' || data['sizeBytes'] instanceof String)) {
            throw new Error("Expected the field `sizeBytes` to be a primitive type in the JSON string but got " + data['sizeBytes']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
 * @member {Object.<String, String>} annotations
 */
Backup.prototype['annotations'] = undefined;

/**
 * Required. The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).
 * @member {String} clusterName
 */
Backup.prototype['clusterName'] = undefined;

/**
 * Output only. The system-generated UID of the cluster which was used to create this resource.
 * @member {String} clusterUid
 */
Backup.prototype['clusterUid'] = undefined;

/**
 * Output only. Create time stamp
 * @member {String} createTime
 */
Backup.prototype['createTime'] = undefined;

/**
 * Output only. The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.
 * @member {module:model/Backup.DatabaseVersionEnum} databaseVersion
 */
Backup.prototype['databaseVersion'] = undefined;

/**
 * Output only. Delete time stamp
 * @member {String} deleteTime
 */
Backup.prototype['deleteTime'] = undefined;

/**
 * User-provided description of the backup.
 * @member {String} description
 */
Backup.prototype['description'] = undefined;

/**
 * User-settable and human-readable display name for the Backup.
 * @member {String} displayName
 */
Backup.prototype['displayName'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
Backup.prototype['encryptionConfig'] = undefined;

/**
 * @member {module:model/EncryptionInfo} encryptionInfo
 */
Backup.prototype['encryptionInfo'] = undefined;

/**
 * For Resource freshness validation (https://google.aip.dev/154)
 * @member {String} etag
 */
Backup.prototype['etag'] = undefined;

/**
 * @member {module:model/QuantityBasedExpiry} expiryQuantity
 */
Backup.prototype['expiryQuantity'] = undefined;

/**
 * Output only. The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.
 * @member {String} expiryTime
 */
Backup.prototype['expiryTime'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
Backup.prototype['labels'] = undefined;

/**
 * Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}
 * @member {String} name
 */
Backup.prototype['name'] = undefined;

/**
 * Output only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
 * @member {Boolean} reconciling
 */
Backup.prototype['reconciling'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzi
 */
Backup.prototype['satisfiesPzi'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzs
 */
Backup.prototype['satisfiesPzs'] = undefined;

/**
 * Output only. The size of the backup in bytes.
 * @member {String} sizeBytes
 */
Backup.prototype['sizeBytes'] = undefined;

/**
 * Output only. The current state of the backup.
 * @member {module:model/Backup.StateEnum} state
 */
Backup.prototype['state'] = undefined;

/**
 * The backup type, which suggests the trigger for the backup.
 * @member {module:model/Backup.TypeEnum} type
 */
Backup.prototype['type'] = undefined;

/**
 * Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
 * @member {String} uid
 */
Backup.prototype['uid'] = undefined;

/**
 * Output only. Update time stamp
 * @member {String} updateTime
 */
Backup.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>databaseVersion</code> property.
 * @enum {String}
 * @readonly
 */
Backup['DatabaseVersionEnum'] = {

    /**
     * value: "DATABASE_VERSION_UNSPECIFIED"
     * @const
     */
    "DATABASE_VERSION_UNSPECIFIED": "DATABASE_VERSION_UNSPECIFIED",

    /**
     * value: "POSTGRES_13"
     * @const
     */
    "POSTGRES_13": "POSTGRES_13",

    /**
     * value: "POSTGRES_14"
     * @const
     */
    "POSTGRES_14": "POSTGRES_14",

    /**
     * value: "POSTGRES_15"
     * @const
     */
    "POSTGRES_15": "POSTGRES_15"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Backup['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Backup['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND",

    /**
     * value: "AUTOMATED"
     * @const
     */
    "AUTOMATED": "AUTOMATED",

    /**
     * value: "CONTINUOUS"
     * @const
     */
    "CONTINUOUS": "CONTINUOUS"
};



export default Backup;

