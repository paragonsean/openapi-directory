/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientConnectionConfig from './ClientConnectionConfig';
import InstanceNetworkConfig from './InstanceNetworkConfig';
import MachineConfig from './MachineConfig';
import Node from './Node';
import PscInstanceConfig from './PscInstanceConfig';
import QueryInsightsInstanceConfig from './QueryInsightsInstanceConfig';
import ReadPoolConfig from './ReadPoolConfig';
import UpdatePolicy from './UpdatePolicy';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1alpha
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * An Instance is a computing unit that an end customer can connect to. It&#39;s the main unit of computing resources in AlloyDB.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('availabilityType')) {
                obj['availabilityType'] = ApiClient.convertToType(data['availabilityType'], 'String');
            }
            if (data.hasOwnProperty('clientConnectionConfig')) {
                obj['clientConnectionConfig'] = ClientConnectionConfig.constructFromObject(data['clientConnectionConfig']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('databaseFlags')) {
                obj['databaseFlags'] = ApiClient.convertToType(data['databaseFlags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('gceZone')) {
                obj['gceZone'] = ApiClient.convertToType(data['gceZone'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('machineConfig')) {
                obj['machineConfig'] = MachineConfig.constructFromObject(data['machineConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = InstanceNetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], [Node]);
            }
            if (data.hasOwnProperty('pscInstanceConfig')) {
                obj['pscInstanceConfig'] = PscInstanceConfig.constructFromObject(data['pscInstanceConfig']);
            }
            if (data.hasOwnProperty('publicIpAddress')) {
                obj['publicIpAddress'] = ApiClient.convertToType(data['publicIpAddress'], 'String');
            }
            if (data.hasOwnProperty('queryInsightsConfig')) {
                obj['queryInsightsConfig'] = QueryInsightsInstanceConfig.constructFromObject(data['queryInsightsConfig']);
            }
            if (data.hasOwnProperty('readPoolConfig')) {
                obj['readPoolConfig'] = ReadPoolConfig.constructFromObject(data['readPoolConfig']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzi')) {
                obj['satisfiesPzi'] = ApiClient.convertToType(data['satisfiesPzi'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updatePolicy')) {
                obj['updatePolicy'] = UpdatePolicy.constructFromObject(data['updatePolicy']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('writableNode')) {
                obj['writableNode'] = Node.constructFromObject(data['writableNode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availabilityType'] && !(typeof data['availabilityType'] === 'string' || data['availabilityType'] instanceof String)) {
            throw new Error("Expected the field `availabilityType` to be a primitive type in the JSON string but got " + data['availabilityType']);
        }
        // validate the optional field `clientConnectionConfig`
        if (data['clientConnectionConfig']) { // data not null
          ClientConnectionConfig.validateJSON(data['clientConnectionConfig']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['gceZone'] && !(typeof data['gceZone'] === 'string' || data['gceZone'] instanceof String)) {
            throw new Error("Expected the field `gceZone` to be a primitive type in the JSON string but got " + data['gceZone']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // validate the optional field `machineConfig`
        if (data['machineConfig']) { // data not null
          MachineConfig.validateJSON(data['machineConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          InstanceNetworkConfig.validateJSON(data['networkConfig']);
        }
        if (data['nodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodes'])) {
                throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
            }
            // validate the optional field `nodes` (array)
            for (const item of data['nodes']) {
                Node.validateJSON(item);
            };
        }
        // validate the optional field `pscInstanceConfig`
        if (data['pscInstanceConfig']) { // data not null
          PscInstanceConfig.validateJSON(data['pscInstanceConfig']);
        }
        // ensure the json data is a string
        if (data['publicIpAddress'] && !(typeof data['publicIpAddress'] === 'string' || data['publicIpAddress'] instanceof String)) {
            throw new Error("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got " + data['publicIpAddress']);
        }
        // validate the optional field `queryInsightsConfig`
        if (data['queryInsightsConfig']) { // data not null
          QueryInsightsInstanceConfig.validateJSON(data['queryInsightsConfig']);
        }
        // validate the optional field `readPoolConfig`
        if (data['readPoolConfig']) { // data not null
          ReadPoolConfig.validateJSON(data['readPoolConfig']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // validate the optional field `updatePolicy`
        if (data['updatePolicy']) { // data not null
          UpdatePolicy.validateJSON(data['updatePolicy']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `writableNode`
        if (data['writableNode']) { // data not null
          Node.validateJSON(data['writableNode']);
        }

        return true;
    }


}



/**
 * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
 * @member {Object.<String, String>} annotations
 */
Instance.prototype['annotations'] = undefined;

/**
 * Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
 * @member {module:model/Instance.AvailabilityTypeEnum} availabilityType
 */
Instance.prototype['availabilityType'] = undefined;

/**
 * @member {module:model/ClientConnectionConfig} clientConnectionConfig
 */
Instance.prototype['clientConnectionConfig'] = undefined;

/**
 * Output only. Create time stamp
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of \"key\": \"value\" pairs. \"key\": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. \"value\": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
 * @member {Object.<String, String>} databaseFlags
 */
Instance.prototype['databaseFlags'] = undefined;

/**
 * Output only. Delete time stamp
 * @member {String} deleteTime
 */
Instance.prototype['deleteTime'] = undefined;

/**
 * User-settable and human-readable display name for the Instance.
 * @member {String} displayName
 */
Instance.prototype['displayName'] = undefined;

/**
 * For Resource freshness validation (https://google.aip.dev/154)
 * @member {String} etag
 */
Instance.prototype['etag'] = undefined;

/**
 * The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
 * @member {String} gceZone
 */
Instance.prototype['gceZone'] = undefined;

/**
 * Required. The type of the instance. Specified at creation time.
 * @member {module:model/Instance.InstanceTypeEnum} instanceType
 */
Instance.prototype['instanceType'] = undefined;

/**
 * Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.
 * @member {String} ipAddress
 */
Instance.prototype['ipAddress'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * @member {module:model/MachineConfig} machineConfig
 */
Instance.prototype['machineConfig'] = undefined;

/**
 * Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {module:model/InstanceNetworkConfig} networkConfig
 */
Instance.prototype['networkConfig'] = undefined;

/**
 * Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.
 * @member {Array.<module:model/Node>} nodes
 */
Instance.prototype['nodes'] = undefined;

/**
 * @member {module:model/PscInstanceConfig} pscInstanceConfig
 */
Instance.prototype['pscInstanceConfig'] = undefined;

/**
 * Output only. The public IP addresses for the Instance. This is available ONLY when enable_public_ip is set. This is the connection endpoint for an end-user application.
 * @member {String} publicIpAddress
 */
Instance.prototype['publicIpAddress'] = undefined;

/**
 * @member {module:model/QueryInsightsInstanceConfig} queryInsightsConfig
 */
Instance.prototype['queryInsightsConfig'] = undefined;

/**
 * @member {module:model/ReadPoolConfig} readPoolConfig
 */
Instance.prototype['readPoolConfig'] = undefined;

/**
 * Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
 * @member {Boolean} reconciling
 */
Instance.prototype['reconciling'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzi
 */
Instance.prototype['satisfiesPzi'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzs
 */
Instance.prototype['satisfiesPzs'] = undefined;

/**
 * Output only. The current serving state of the instance.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
 * @member {String} uid
 */
Instance.prototype['uid'] = undefined;

/**
 * @member {module:model/UpdatePolicy} updatePolicy
 */
Instance.prototype['updatePolicy'] = undefined;

/**
 * Output only. Update time stamp
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;

/**
 * @member {module:model/Node} writableNode
 */
Instance.prototype['writableNode'] = undefined;





/**
 * Allowed values for the <code>availabilityType</code> property.
 * @enum {String}
 * @readonly
 */
Instance['AvailabilityTypeEnum'] = {

    /**
     * value: "AVAILABILITY_TYPE_UNSPECIFIED"
     * @const
     */
    "AVAILABILITY_TYPE_UNSPECIFIED": "AVAILABILITY_TYPE_UNSPECIFIED",

    /**
     * value: "ZONAL"
     * @const
     */
    "ZONAL": "ZONAL",

    /**
     * value: "REGIONAL"
     * @const
     */
    "REGIONAL": "REGIONAL"
};


/**
 * Allowed values for the <code>instanceType</code> property.
 * @enum {String}
 * @readonly
 */
Instance['InstanceTypeEnum'] = {

    /**
     * value: "INSTANCE_TYPE_UNSPECIFIED"
     * @const
     */
    "INSTANCE_TYPE_UNSPECIFIED": "INSTANCE_TYPE_UNSPECIFIED",

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY",

    /**
     * value: "READ_POOL"
     * @const
     */
    "READ_POOL": "READ_POOL",

    /**
     * value: "SECONDARY"
     * @const
     */
    "SECONDARY": "SECONDARY"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "MAINTENANCE"
     * @const
     */
    "MAINTENANCE": "MAINTENANCE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "BOOTSTRAPPING"
     * @const
     */
    "BOOTSTRAPPING": "BOOTSTRAPPING",

    /**
     * value: "PROMOTING"
     * @const
     */
    "PROMOTING": "PROMOTING"
};



export default Instance;

