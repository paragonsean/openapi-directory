/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Backup;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.ConnectionInfo;
import org.openapitools.client.model.FailoverInstanceRequest;
import org.openapitools.client.model.GenerateClientCertificateRequest;
import org.openapitools.client.model.GenerateClientCertificateResponse;
import org.openapitools.client.model.GoogleCloudLocationListLocationsResponse;
import org.openapitools.client.model.InjectFaultRequest;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.ListBackupsResponse;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListSupportedDatabaseFlagsResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PromoteClusterRequest;
import org.openapitools.client.model.RestartInstanceRequest;
import org.openapitools.client.model.RestoreClusterRequest;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new Backup in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsBackupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String backupId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Backup backup = null;
        Operation response = api.alloydbProjectsLocationsBackupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, backupId, requestId, validateOnly, backup);
        // TODO: test validations
    }

    /**
     * Lists Backups in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsBackupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBackupsResponse response = api.alloydbProjectsLocationsBackupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Cluster in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Cluster cluster = null;
        Operation response = api.alloydbProjectsLocationsClustersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterId, requestId, validateOnly, cluster);
        // TODO: test validations
    }

    /**
     * Creates a cluster of type SECONDARY in the given location using the primary cluster as the source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersCreatesecondaryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Cluster cluster = null;
        Operation response = api.alloydbProjectsLocationsClustersCreatesecondary(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterId, requestId, validateOnly, cluster);
        // TODO: test validations
    }

    /**
     * Generate a client certificate signed by a Cluster CA. The sole purpose of this endpoint is to support AlloyDB connectors and the Auth Proxy client. The endpoint&#39;s behavior is subject to change without notice, so do not rely on its behavior remaining constant. Future changes will not break AlloyDB connectors or the Auth Proxy client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersGenerateClientCertificateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateClientCertificateRequest generateClientCertificateRequest = null;
        GenerateClientCertificateResponse response = api.alloydbProjectsLocationsClustersGenerateClientCertificate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateClientCertificateRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Instance in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String instanceId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Instance instance = null;
        Operation response = api.alloydbProjectsLocationsClustersInstancesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instanceId, requestId, validateOnly, instance);
        // TODO: test validations
    }

    /**
     * Creates a new SECONDARY Instance in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesCreatesecondaryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String instanceId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Instance instance = null;
        Operation response = api.alloydbProjectsLocationsClustersInstancesCreatesecondary(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instanceId, requestId, validateOnly, instance);
        // TODO: test validations
    }

    /**
     * Forces a Failover for a highly available instance. Failover promotes the HA standby instance as the new primary. Imperative only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesFailoverTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FailoverInstanceRequest failoverInstanceRequest = null;
        Operation response = api.alloydbProjectsLocationsClustersInstancesFailover(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, failoverInstanceRequest);
        // TODO: test validations
    }

    /**
     * Get instance metadata used for a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesGetConnectionInfoTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        ConnectionInfo response = api.alloydbProjectsLocationsClustersInstancesGetConnectionInfo(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Injects fault in an instance. Imperative only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesInjectFaultTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InjectFaultRequest injectFaultRequest = null;
        Operation response = api.alloydbProjectsLocationsClustersInstancesInjectFault(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, injectFaultRequest);
        // TODO: test validations
    }

    /**
     * Lists Instances in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInstancesResponse response = api.alloydbProjectsLocationsClustersInstancesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Restart an Instance in a cluster. Imperative only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersInstancesRestartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RestartInstanceRequest restartInstanceRequest = null;
        Operation response = api.alloydbProjectsLocationsClustersInstancesRestart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, restartInstanceRequest);
        // TODO: test validations
    }

    /**
     * Lists Clusters in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClustersResponse response = api.alloydbProjectsLocationsClustersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Promotes a SECONDARY cluster. This turns down replication from the PRIMARY cluster and promotes a secondary cluster into its own standalone cluster. Imperative only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersPromoteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PromoteClusterRequest promoteClusterRequest = null;
        Operation response = api.alloydbProjectsLocationsClustersPromote(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, promoteClusterRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Cluster in a given project and location, with a volume restored from the provided source, either a backup ID or a point-in-time and a source cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersRestoreTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RestoreClusterRequest restoreClusterRequest = null;
        Operation response = api.alloydbProjectsLocationsClustersRestore(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, restoreClusterRequest);
        // TODO: test validations
    }

    /**
     * Creates a new User in a given project, location, and cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersUsersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String userId = null;
        Boolean validateOnly = null;
        User user = null;
        User response = api.alloydbProjectsLocationsClustersUsersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, userId, validateOnly, user);
        // TODO: test validations
    }

    /**
     * Lists Users in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersUsersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUsersResponse response = api.alloydbProjectsLocationsClustersUsersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsClustersUsersPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        User user = null;
        User response = api.alloydbProjectsLocationsClustersUsersPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, requestId, updateMask, validateOnly, user);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudLocationListLocationsResponse response = api.alloydbProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.alloydbProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsOperationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Boolean validateOnly = null;
        Object response = api.alloydbProjectsLocationsOperationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, validateOnly);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Operation response = api.alloydbProjectsLocationsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.alloydbProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists SupportedDatabaseFlags for a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alloydbProjectsLocationsSupportedDatabaseFlagsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSupportedDatabaseFlagsResponse response = api.alloydbProjectsLocationsSupportedDatabaseFlagsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
