/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ClientConnectionConfig;
import org.openapitools.client.model.InstanceNetworkConfig;
import org.openapitools.client.model.MachineConfig;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.PscInstanceConfig;
import org.openapitools.client.model.QueryInsightsInstanceConfig;
import org.openapitools.client.model.ReadPoolConfig;
import org.openapitools.client.model.UpdatePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Instance is a computing unit that an end customer can connect to. It&#39;s the main unit of computing resources in AlloyDB.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:08.594769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  /**
   * Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
   */
  @JsonAdapter(AvailabilityTypeEnum.Adapter.class)
  public enum AvailabilityTypeEnum {
    AVAILABILITY_TYPE_UNSPECIFIED("AVAILABILITY_TYPE_UNSPECIFIED"),
    
    ZONAL("ZONAL"),
    
    REGIONAL("REGIONAL");

    private String value;

    AvailabilityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityTypeEnum fromValue(String value) {
      for (AvailabilityTypeEnum b : AvailabilityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_TYPE = "availabilityType";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_TYPE)
  private AvailabilityTypeEnum availabilityType;

  public static final String SERIALIZED_NAME_CLIENT_CONNECTION_CONFIG = "clientConnectionConfig";
  @SerializedName(SERIALIZED_NAME_CLIENT_CONNECTION_CONFIG)
  private ClientConnectionConfig clientConnectionConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATABASE_FLAGS = "databaseFlags";
  @SerializedName(SERIALIZED_NAME_DATABASE_FLAGS)
  private Map<String, String> databaseFlags = new HashMap<>();

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_GCE_ZONE = "gceZone";
  @SerializedName(SERIALIZED_NAME_GCE_ZONE)
  private String gceZone;

  /**
   * Required. The type of the instance. Specified at creation time.
   */
  @JsonAdapter(InstanceTypeEnum.Adapter.class)
  public enum InstanceTypeEnum {
    INSTANCE_TYPE_UNSPECIFIED("INSTANCE_TYPE_UNSPECIFIED"),
    
    PRIMARY("PRIMARY"),
    
    READ_POOL("READ_POOL"),
    
    SECONDARY("SECONDARY");

    private String value;

    InstanceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceTypeEnum fromValue(String value) {
      for (InstanceTypeEnum b : InstanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstanceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceTypeEnum instanceType;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MACHINE_CONFIG = "machineConfig";
  @SerializedName(SERIALIZED_NAME_MACHINE_CONFIG)
  private MachineConfig machineConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private InstanceNetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<Node> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PSC_INSTANCE_CONFIG = "pscInstanceConfig";
  @SerializedName(SERIALIZED_NAME_PSC_INSTANCE_CONFIG)
  private PscInstanceConfig pscInstanceConfig;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS = "publicIpAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS)
  private String publicIpAddress;

  public static final String SERIALIZED_NAME_QUERY_INSIGHTS_CONFIG = "queryInsightsConfig";
  @SerializedName(SERIALIZED_NAME_QUERY_INSIGHTS_CONFIG)
  private QueryInsightsInstanceConfig queryInsightsConfig;

  public static final String SERIALIZED_NAME_READ_POOL_CONFIG = "readPoolConfig";
  @SerializedName(SERIALIZED_NAME_READ_POOL_CONFIG)
  private ReadPoolConfig readPoolConfig;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_SATISFIES_PZI = "satisfiesPzi";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZI)
  private Boolean satisfiesPzi;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  /**
   * Output only. The current serving state of the instance.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    READY("READY"),
    
    STOPPED("STOPPED"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING"),
    
    MAINTENANCE("MAINTENANCE"),
    
    FAILED("FAILED"),
    
    BOOTSTRAPPING("BOOTSTRAPPING"),
    
    PROMOTING("PROMOTING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_POLICY = "updatePolicy";
  @SerializedName(SERIALIZED_NAME_UPDATE_POLICY)
  private UpdatePolicy updatePolicy;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WRITABLE_NODE = "writableNode";
  @SerializedName(SERIALIZED_NAME_WRITABLE_NODE)
  private Node writableNode;

  public Instance() {
  }

  public Instance(
     String createTime, 
     String deleteTime, 
     String ipAddress, 
     String name, 
     List<Node> nodes, 
     String publicIpAddress, 
     Boolean reconciling, 
     Boolean satisfiesPzi, 
     Boolean satisfiesPzs, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.ipAddress = ipAddress;
    this.name = name;
    this.nodes = nodes;
    this.publicIpAddress = publicIpAddress;
    this.reconciling = reconciling;
    this.satisfiesPzi = satisfiesPzi;
    this.satisfiesPzs = satisfiesPzs;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public Instance annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Instance putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public Instance availabilityType(AvailabilityTypeEnum availabilityType) {
    this.availabilityType = availabilityType;
    return this;
  }

  /**
   * Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
   * @return availabilityType
   */
  @javax.annotation.Nullable
  public AvailabilityTypeEnum getAvailabilityType() {
    return availabilityType;
  }

  public void setAvailabilityType(AvailabilityTypeEnum availabilityType) {
    this.availabilityType = availabilityType;
  }


  public Instance clientConnectionConfig(ClientConnectionConfig clientConnectionConfig) {
    this.clientConnectionConfig = clientConnectionConfig;
    return this;
  }

  /**
   * Get clientConnectionConfig
   * @return clientConnectionConfig
   */
  @javax.annotation.Nullable
  public ClientConnectionConfig getClientConnectionConfig() {
    return clientConnectionConfig;
  }

  public void setClientConnectionConfig(ClientConnectionConfig clientConnectionConfig) {
    this.clientConnectionConfig = clientConnectionConfig;
  }


  /**
   * Output only. Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Instance databaseFlags(Map<String, String> databaseFlags) {
    this.databaseFlags = databaseFlags;
    return this;
  }

  public Instance putDatabaseFlagsItem(String key, String databaseFlagsItem) {
    if (this.databaseFlags == null) {
      this.databaseFlags = new HashMap<>();
    }
    this.databaseFlags.put(key, databaseFlagsItem);
    return this;
  }

  /**
   * Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of \&quot;key\&quot;: \&quot;value\&quot; pairs. \&quot;key\&quot;: The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. \&quot;value\&quot;: The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn&#39;t take a value.
   * @return databaseFlags
   */
  @javax.annotation.Nullable
  public Map<String, String> getDatabaseFlags() {
    return databaseFlags;
  }

  public void setDatabaseFlags(Map<String, String> databaseFlags) {
    this.databaseFlags = databaseFlags;
  }


  /**
   * Output only. Delete time stamp
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public Instance displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User-settable and human-readable display name for the Instance.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Instance etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * For Resource freshness validation (https://google.aip.dev/154)
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Instance gceZone(String gceZone) {
    this.gceZone = gceZone;
    return this;
  }

  /**
   * The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
   * @return gceZone
   */
  @javax.annotation.Nullable
  public String getGceZone() {
    return gceZone;
  }

  public void setGceZone(String gceZone) {
    this.gceZone = gceZone;
  }


  public Instance instanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Required. The type of the instance. Specified at creation time.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public InstanceTypeEnum getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
  }


  /**
   * Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }



  public Instance labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Instance putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Instance machineConfig(MachineConfig machineConfig) {
    this.machineConfig = machineConfig;
    return this;
  }

  /**
   * Get machineConfig
   * @return machineConfig
   */
  @javax.annotation.Nullable
  public MachineConfig getMachineConfig() {
    return machineConfig;
  }

  public void setMachineConfig(MachineConfig machineConfig) {
    this.machineConfig = machineConfig;
  }


  /**
   * Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression &#x60;[a-z]([a-z0-9-]{0,61}[a-z0-9])?&#x60;, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Instance networkConfig(InstanceNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public InstanceNetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(InstanceNetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  /**
   * Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<Node> getNodes() {
    return nodes;
  }



  public Instance pscInstanceConfig(PscInstanceConfig pscInstanceConfig) {
    this.pscInstanceConfig = pscInstanceConfig;
    return this;
  }

  /**
   * Get pscInstanceConfig
   * @return pscInstanceConfig
   */
  @javax.annotation.Nullable
  public PscInstanceConfig getPscInstanceConfig() {
    return pscInstanceConfig;
  }

  public void setPscInstanceConfig(PscInstanceConfig pscInstanceConfig) {
    this.pscInstanceConfig = pscInstanceConfig;
  }


  /**
   * Output only. The public IP addresses for the Instance. This is available ONLY when enable_public_ip is set. This is the connection endpoint for an end-user application.
   * @return publicIpAddress
   */
  @javax.annotation.Nullable
  public String getPublicIpAddress() {
    return publicIpAddress;
  }



  public Instance queryInsightsConfig(QueryInsightsInstanceConfig queryInsightsConfig) {
    this.queryInsightsConfig = queryInsightsConfig;
    return this;
  }

  /**
   * Get queryInsightsConfig
   * @return queryInsightsConfig
   */
  @javax.annotation.Nullable
  public QueryInsightsInstanceConfig getQueryInsightsConfig() {
    return queryInsightsConfig;
  }

  public void setQueryInsightsConfig(QueryInsightsInstanceConfig queryInsightsConfig) {
    this.queryInsightsConfig = queryInsightsConfig;
  }


  public Instance readPoolConfig(ReadPoolConfig readPoolConfig) {
    this.readPoolConfig = readPoolConfig;
    return this;
  }

  /**
   * Get readPoolConfig
   * @return readPoolConfig
   */
  @javax.annotation.Nullable
  public ReadPoolConfig getReadPoolConfig() {
    return readPoolConfig;
  }

  public void setReadPoolConfig(ReadPoolConfig readPoolConfig) {
    this.readPoolConfig = readPoolConfig;
  }


  /**
   * Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user&#39;s intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzi
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzi() {
    return satisfiesPzi;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  /**
   * Output only. The current serving state of the instance.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  public Instance updatePolicy(UpdatePolicy updatePolicy) {
    this.updatePolicy = updatePolicy;
    return this;
  }

  /**
   * Get updatePolicy
   * @return updatePolicy
   */
  @javax.annotation.Nullable
  public UpdatePolicy getUpdatePolicy() {
    return updatePolicy;
  }

  public void setUpdatePolicy(UpdatePolicy updatePolicy) {
    this.updatePolicy = updatePolicy;
  }


  /**
   * Output only. Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Instance writableNode(Node writableNode) {
    this.writableNode = writableNode;
    return this;
  }

  /**
   * Get writableNode
   * @return writableNode
   */
  @javax.annotation.Nullable
  public Node getWritableNode() {
    return writableNode;
  }

  public void setWritableNode(Node writableNode) {
    this.writableNode = writableNode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.annotations, instance.annotations) &&
        Objects.equals(this.availabilityType, instance.availabilityType) &&
        Objects.equals(this.clientConnectionConfig, instance.clientConnectionConfig) &&
        Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.databaseFlags, instance.databaseFlags) &&
        Objects.equals(this.deleteTime, instance.deleteTime) &&
        Objects.equals(this.displayName, instance.displayName) &&
        Objects.equals(this.etag, instance.etag) &&
        Objects.equals(this.gceZone, instance.gceZone) &&
        Objects.equals(this.instanceType, instance.instanceType) &&
        Objects.equals(this.ipAddress, instance.ipAddress) &&
        Objects.equals(this.labels, instance.labels) &&
        Objects.equals(this.machineConfig, instance.machineConfig) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.networkConfig, instance.networkConfig) &&
        Objects.equals(this.nodes, instance.nodes) &&
        Objects.equals(this.pscInstanceConfig, instance.pscInstanceConfig) &&
        Objects.equals(this.publicIpAddress, instance.publicIpAddress) &&
        Objects.equals(this.queryInsightsConfig, instance.queryInsightsConfig) &&
        Objects.equals(this.readPoolConfig, instance.readPoolConfig) &&
        Objects.equals(this.reconciling, instance.reconciling) &&
        Objects.equals(this.satisfiesPzi, instance.satisfiesPzi) &&
        Objects.equals(this.satisfiesPzs, instance.satisfiesPzs) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.uid, instance.uid) &&
        Objects.equals(this.updatePolicy, instance.updatePolicy) &&
        Objects.equals(this.updateTime, instance.updateTime) &&
        Objects.equals(this.writableNode, instance.writableNode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, availabilityType, clientConnectionConfig, createTime, databaseFlags, deleteTime, displayName, etag, gceZone, instanceType, ipAddress, labels, machineConfig, name, networkConfig, nodes, pscInstanceConfig, publicIpAddress, queryInsightsConfig, readPoolConfig, reconciling, satisfiesPzi, satisfiesPzs, state, uid, updatePolicy, updateTime, writableNode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    availabilityType: ").append(toIndentedString(availabilityType)).append("\n");
    sb.append("    clientConnectionConfig: ").append(toIndentedString(clientConnectionConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    databaseFlags: ").append(toIndentedString(databaseFlags)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    gceZone: ").append(toIndentedString(gceZone)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    machineConfig: ").append(toIndentedString(machineConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    pscInstanceConfig: ").append(toIndentedString(pscInstanceConfig)).append("\n");
    sb.append("    publicIpAddress: ").append(toIndentedString(publicIpAddress)).append("\n");
    sb.append("    queryInsightsConfig: ").append(toIndentedString(queryInsightsConfig)).append("\n");
    sb.append("    readPoolConfig: ").append(toIndentedString(readPoolConfig)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    satisfiesPzi: ").append(toIndentedString(satisfiesPzi)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updatePolicy: ").append(toIndentedString(updatePolicy)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    writableNode: ").append(toIndentedString(writableNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("availabilityType");
    openapiFields.add("clientConnectionConfig");
    openapiFields.add("createTime");
    openapiFields.add("databaseFlags");
    openapiFields.add("deleteTime");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("gceZone");
    openapiFields.add("instanceType");
    openapiFields.add("ipAddress");
    openapiFields.add("labels");
    openapiFields.add("machineConfig");
    openapiFields.add("name");
    openapiFields.add("networkConfig");
    openapiFields.add("nodes");
    openapiFields.add("pscInstanceConfig");
    openapiFields.add("publicIpAddress");
    openapiFields.add("queryInsightsConfig");
    openapiFields.add("readPoolConfig");
    openapiFields.add("reconciling");
    openapiFields.add("satisfiesPzi");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("state");
    openapiFields.add("uid");
    openapiFields.add("updatePolicy");
    openapiFields.add("updateTime");
    openapiFields.add("writableNode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityType") != null && !jsonObj.get("availabilityType").isJsonNull()) && !jsonObj.get("availabilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityType").toString()));
      }
      // validate the optional field `availabilityType`
      if (jsonObj.get("availabilityType") != null && !jsonObj.get("availabilityType").isJsonNull()) {
        AvailabilityTypeEnum.validateJsonElement(jsonObj.get("availabilityType"));
      }
      // validate the optional field `clientConnectionConfig`
      if (jsonObj.get("clientConnectionConfig") != null && !jsonObj.get("clientConnectionConfig").isJsonNull()) {
        ClientConnectionConfig.validateJsonElement(jsonObj.get("clientConnectionConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("gceZone") != null && !jsonObj.get("gceZone").isJsonNull()) && !jsonObj.get("gceZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gceZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gceZone").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      // validate the optional field `instanceType`
      if (jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) {
        InstanceTypeEnum.validateJsonElement(jsonObj.get("instanceType"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the optional field `machineConfig`
      if (jsonObj.get("machineConfig") != null && !jsonObj.get("machineConfig").isJsonNull()) {
        MachineConfig.validateJsonElement(jsonObj.get("machineConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        InstanceNetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            Node.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
      // validate the optional field `pscInstanceConfig`
      if (jsonObj.get("pscInstanceConfig") != null && !jsonObj.get("pscInstanceConfig").isJsonNull()) {
        PscInstanceConfig.validateJsonElement(jsonObj.get("pscInstanceConfig"));
      }
      if ((jsonObj.get("publicIpAddress") != null && !jsonObj.get("publicIpAddress").isJsonNull()) && !jsonObj.get("publicIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddress").toString()));
      }
      // validate the optional field `queryInsightsConfig`
      if (jsonObj.get("queryInsightsConfig") != null && !jsonObj.get("queryInsightsConfig").isJsonNull()) {
        QueryInsightsInstanceConfig.validateJsonElement(jsonObj.get("queryInsightsConfig"));
      }
      // validate the optional field `readPoolConfig`
      if (jsonObj.get("readPoolConfig") != null && !jsonObj.get("readPoolConfig").isJsonNull()) {
        ReadPoolConfig.validateJsonElement(jsonObj.get("readPoolConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `updatePolicy`
      if (jsonObj.get("updatePolicy") != null && !jsonObj.get("updatePolicy").isJsonNull()) {
        UpdatePolicy.validateJsonElement(jsonObj.get("updatePolicy"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `writableNode`
      if (jsonObj.get("writableNode") != null && !jsonObj.get("writableNode").isJsonNull()) {
        Node.validateJsonElement(jsonObj.get("writableNode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

