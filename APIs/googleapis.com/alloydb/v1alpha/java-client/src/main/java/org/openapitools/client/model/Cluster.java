/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AutomatedBackupPolicy;
import org.openapitools.client.model.BackupSource;
import org.openapitools.client.model.ContinuousBackupConfig;
import org.openapitools.client.model.ContinuousBackupInfo;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.EncryptionInfo;
import org.openapitools.client.model.MigrationSource;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.PrimaryConfig;
import org.openapitools.client.model.PscConfig;
import org.openapitools.client.model.SecondaryConfig;
import org.openapitools.client.model.SslConfig;
import org.openapitools.client.model.UserPassword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A cluster is a collection of regional AlloyDB resources. It can include a primary instance and one or more read pool instances. All cluster resources share a storage layer, which scales as needed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:08.594769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cluster {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTOMATED_BACKUP_POLICY = "automatedBackupPolicy";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_BACKUP_POLICY)
  private AutomatedBackupPolicy automatedBackupPolicy;

  public static final String SERIALIZED_NAME_BACKUP_SOURCE = "backupSource";
  @SerializedName(SERIALIZED_NAME_BACKUP_SOURCE)
  private BackupSource backupSource;

  /**
   * Output only. The type of the cluster. This is an output-only field and it&#39;s populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. &#x60;CreateCluster&#x60; vs. &#x60;CreateSecondaryCluster&#x60;
   */
  @JsonAdapter(ClusterTypeEnum.Adapter.class)
  public enum ClusterTypeEnum {
    CLUSTER_TYPE_UNSPECIFIED("CLUSTER_TYPE_UNSPECIFIED"),
    
    PRIMARY("PRIMARY"),
    
    SECONDARY("SECONDARY");

    private String value;

    ClusterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClusterTypeEnum fromValue(String value) {
      for (ClusterTypeEnum b : ClusterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClusterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClusterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClusterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClusterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "clusterType";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private ClusterTypeEnum clusterType;

  public static final String SERIALIZED_NAME_CONTINUOUS_BACKUP_CONFIG = "continuousBackupConfig";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_BACKUP_CONFIG)
  private ContinuousBackupConfig continuousBackupConfig;

  public static final String SERIALIZED_NAME_CONTINUOUS_BACKUP_INFO = "continuousBackupInfo";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_BACKUP_INFO)
  private ContinuousBackupInfo continuousBackupInfo;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
   */
  @JsonAdapter(DatabaseVersionEnum.Adapter.class)
  public enum DatabaseVersionEnum {
    DATABASE_VERSION_UNSPECIFIED("DATABASE_VERSION_UNSPECIFIED"),
    
    POSTGRES_13("POSTGRES_13"),
    
    POSTGRES_14("POSTGRES_14"),
    
    POSTGRES_15("POSTGRES_15");

    private String value;

    DatabaseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseVersionEnum fromValue(String value) {
      for (DatabaseVersionEnum b : DatabaseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "databaseVersion";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private DatabaseVersionEnum databaseVersion;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_ENCRYPTION_INFO = "encryptionInfo";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_INFO)
  private EncryptionInfo encryptionInfo;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_INITIAL_USER = "initialUser";
  @SerializedName(SERIALIZED_NAME_INITIAL_USER)
  private UserPassword initialUser;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MIGRATION_SOURCE = "migrationSource";
  @SerializedName(SERIALIZED_NAME_MIGRATION_SOURCE)
  private MigrationSource migrationSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_PRIMARY_CONFIG = "primaryConfig";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONFIG)
  private PrimaryConfig primaryConfig;

  public static final String SERIALIZED_NAME_PSC_CONFIG = "pscConfig";
  @SerializedName(SERIALIZED_NAME_PSC_CONFIG)
  private PscConfig pscConfig;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_SATISFIES_PZI = "satisfiesPzi";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZI)
  private Boolean satisfiesPzi;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SECONDARY_CONFIG = "secondaryConfig";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CONFIG)
  private SecondaryConfig secondaryConfig;

  public static final String SERIALIZED_NAME_SSL_CONFIG = "sslConfig";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIG)
  private SslConfig sslConfig;

  /**
   * Output only. The current serving state of the cluster.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    READY("READY"),
    
    STOPPED("STOPPED"),
    
    EMPTY("EMPTY"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING"),
    
    FAILED("FAILED"),
    
    BOOTSTRAPPING("BOOTSTRAPPING"),
    
    MAINTENANCE("MAINTENANCE"),
    
    PROMOTING("PROMOTING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Cluster() {
  }

  public Cluster(
     ClusterTypeEnum clusterType, 
     String createTime, 
     String deleteTime, 
     String name, 
     Boolean reconciling, 
     Boolean satisfiesPzi, 
     Boolean satisfiesPzs, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.clusterType = clusterType;
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.name = name;
    this.reconciling = reconciling;
    this.satisfiesPzi = satisfiesPzi;
    this.satisfiesPzs = satisfiesPzs;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public Cluster annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Cluster putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public Cluster automatedBackupPolicy(AutomatedBackupPolicy automatedBackupPolicy) {
    this.automatedBackupPolicy = automatedBackupPolicy;
    return this;
  }

  /**
   * Get automatedBackupPolicy
   * @return automatedBackupPolicy
   */
  @javax.annotation.Nullable
  public AutomatedBackupPolicy getAutomatedBackupPolicy() {
    return automatedBackupPolicy;
  }

  public void setAutomatedBackupPolicy(AutomatedBackupPolicy automatedBackupPolicy) {
    this.automatedBackupPolicy = automatedBackupPolicy;
  }


  public Cluster backupSource(BackupSource backupSource) {
    this.backupSource = backupSource;
    return this;
  }

  /**
   * Get backupSource
   * @return backupSource
   */
  @javax.annotation.Nullable
  public BackupSource getBackupSource() {
    return backupSource;
  }

  public void setBackupSource(BackupSource backupSource) {
    this.backupSource = backupSource;
  }


  /**
   * Output only. The type of the cluster. This is an output-only field and it&#39;s populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. &#x60;CreateCluster&#x60; vs. &#x60;CreateSecondaryCluster&#x60;
   * @return clusterType
   */
  @javax.annotation.Nullable
  public ClusterTypeEnum getClusterType() {
    return clusterType;
  }



  public Cluster continuousBackupConfig(ContinuousBackupConfig continuousBackupConfig) {
    this.continuousBackupConfig = continuousBackupConfig;
    return this;
  }

  /**
   * Get continuousBackupConfig
   * @return continuousBackupConfig
   */
  @javax.annotation.Nullable
  public ContinuousBackupConfig getContinuousBackupConfig() {
    return continuousBackupConfig;
  }

  public void setContinuousBackupConfig(ContinuousBackupConfig continuousBackupConfig) {
    this.continuousBackupConfig = continuousBackupConfig;
  }


  public Cluster continuousBackupInfo(ContinuousBackupInfo continuousBackupInfo) {
    this.continuousBackupInfo = continuousBackupInfo;
    return this;
  }

  /**
   * Get continuousBackupInfo
   * @return continuousBackupInfo
   */
  @javax.annotation.Nullable
  public ContinuousBackupInfo getContinuousBackupInfo() {
    return continuousBackupInfo;
  }

  public void setContinuousBackupInfo(ContinuousBackupInfo continuousBackupInfo) {
    this.continuousBackupInfo = continuousBackupInfo;
  }


  /**
   * Output only. Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Cluster databaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

  /**
   * Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
   * @return databaseVersion
   */
  @javax.annotation.Nullable
  public DatabaseVersionEnum getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  /**
   * Output only. Delete time stamp
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public Cluster displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User-settable and human-readable display name for the Cluster.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Cluster encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public Cluster encryptionInfo(EncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
    return this;
  }

  /**
   * Get encryptionInfo
   * @return encryptionInfo
   */
  @javax.annotation.Nullable
  public EncryptionInfo getEncryptionInfo() {
    return encryptionInfo;
  }

  public void setEncryptionInfo(EncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
  }


  public Cluster etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * For Resource freshness validation (https://google.aip.dev/154)
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Cluster initialUser(UserPassword initialUser) {
    this.initialUser = initialUser;
    return this;
  }

  /**
   * Get initialUser
   * @return initialUser
   */
  @javax.annotation.Nullable
  public UserPassword getInitialUser() {
    return initialUser;
  }

  public void setInitialUser(UserPassword initialUser) {
    this.initialUser = initialUser;
  }


  public Cluster labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Cluster putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Cluster migrationSource(MigrationSource migrationSource) {
    this.migrationSource = migrationSource;
    return this;
  }

  /**
   * Get migrationSource
   * @return migrationSource
   */
  @javax.annotation.Nullable
  public MigrationSource getMigrationSource() {
    return migrationSource;
  }

  public void setMigrationSource(MigrationSource migrationSource) {
    this.migrationSource = migrationSource;
  }


  /**
   * Output only. The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression &#x60;[a-z0-9-]+&#x60;. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  @Deprecated
  public Cluster network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: &#x60;projects/{project}/global/networks/{network_id}&#x60;. This is required to create a cluster. Deprecated, use network_config.network instead.
   * @return network
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  @Deprecated
  public void setNetwork(String network) {
    this.network = network;
  }


  public Cluster networkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public Cluster primaryConfig(PrimaryConfig primaryConfig) {
    this.primaryConfig = primaryConfig;
    return this;
  }

  /**
   * Get primaryConfig
   * @return primaryConfig
   */
  @javax.annotation.Nullable
  public PrimaryConfig getPrimaryConfig() {
    return primaryConfig;
  }

  public void setPrimaryConfig(PrimaryConfig primaryConfig) {
    this.primaryConfig = primaryConfig;
  }


  public Cluster pscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
    return this;
  }

  /**
   * Get pscConfig
   * @return pscConfig
   */
  @javax.annotation.Nullable
  public PscConfig getPscConfig() {
    return pscConfig;
  }

  public void setPscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
  }


  /**
   * Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user&#39;s intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzi
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzi() {
    return satisfiesPzi;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  public Cluster secondaryConfig(SecondaryConfig secondaryConfig) {
    this.secondaryConfig = secondaryConfig;
    return this;
  }

  /**
   * Get secondaryConfig
   * @return secondaryConfig
   */
  @javax.annotation.Nullable
  public SecondaryConfig getSecondaryConfig() {
    return secondaryConfig;
  }

  public void setSecondaryConfig(SecondaryConfig secondaryConfig) {
    this.secondaryConfig = secondaryConfig;
  }


  public Cluster sslConfig(SslConfig sslConfig) {
    this.sslConfig = sslConfig;
    return this;
  }

  /**
   * Get sslConfig
   * @return sslConfig
   */
  @javax.annotation.Nullable
  public SslConfig getSslConfig() {
    return sslConfig;
  }

  public void setSslConfig(SslConfig sslConfig) {
    this.sslConfig = sslConfig;
  }


  /**
   * Output only. The current serving state of the cluster.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cluster cluster = (Cluster) o;
    return Objects.equals(this.annotations, cluster.annotations) &&
        Objects.equals(this.automatedBackupPolicy, cluster.automatedBackupPolicy) &&
        Objects.equals(this.backupSource, cluster.backupSource) &&
        Objects.equals(this.clusterType, cluster.clusterType) &&
        Objects.equals(this.continuousBackupConfig, cluster.continuousBackupConfig) &&
        Objects.equals(this.continuousBackupInfo, cluster.continuousBackupInfo) &&
        Objects.equals(this.createTime, cluster.createTime) &&
        Objects.equals(this.databaseVersion, cluster.databaseVersion) &&
        Objects.equals(this.deleteTime, cluster.deleteTime) &&
        Objects.equals(this.displayName, cluster.displayName) &&
        Objects.equals(this.encryptionConfig, cluster.encryptionConfig) &&
        Objects.equals(this.encryptionInfo, cluster.encryptionInfo) &&
        Objects.equals(this.etag, cluster.etag) &&
        Objects.equals(this.initialUser, cluster.initialUser) &&
        Objects.equals(this.labels, cluster.labels) &&
        Objects.equals(this.migrationSource, cluster.migrationSource) &&
        Objects.equals(this.name, cluster.name) &&
        Objects.equals(this.network, cluster.network) &&
        Objects.equals(this.networkConfig, cluster.networkConfig) &&
        Objects.equals(this.primaryConfig, cluster.primaryConfig) &&
        Objects.equals(this.pscConfig, cluster.pscConfig) &&
        Objects.equals(this.reconciling, cluster.reconciling) &&
        Objects.equals(this.satisfiesPzi, cluster.satisfiesPzi) &&
        Objects.equals(this.satisfiesPzs, cluster.satisfiesPzs) &&
        Objects.equals(this.secondaryConfig, cluster.secondaryConfig) &&
        Objects.equals(this.sslConfig, cluster.sslConfig) &&
        Objects.equals(this.state, cluster.state) &&
        Objects.equals(this.uid, cluster.uid) &&
        Objects.equals(this.updateTime, cluster.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, automatedBackupPolicy, backupSource, clusterType, continuousBackupConfig, continuousBackupInfo, createTime, databaseVersion, deleteTime, displayName, encryptionConfig, encryptionInfo, etag, initialUser, labels, migrationSource, name, network, networkConfig, primaryConfig, pscConfig, reconciling, satisfiesPzi, satisfiesPzs, secondaryConfig, sslConfig, state, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cluster {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    automatedBackupPolicy: ").append(toIndentedString(automatedBackupPolicy)).append("\n");
    sb.append("    backupSource: ").append(toIndentedString(backupSource)).append("\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    continuousBackupConfig: ").append(toIndentedString(continuousBackupConfig)).append("\n");
    sb.append("    continuousBackupInfo: ").append(toIndentedString(continuousBackupInfo)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    encryptionInfo: ").append(toIndentedString(encryptionInfo)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    initialUser: ").append(toIndentedString(initialUser)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    migrationSource: ").append(toIndentedString(migrationSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    primaryConfig: ").append(toIndentedString(primaryConfig)).append("\n");
    sb.append("    pscConfig: ").append(toIndentedString(pscConfig)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    satisfiesPzi: ").append(toIndentedString(satisfiesPzi)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    secondaryConfig: ").append(toIndentedString(secondaryConfig)).append("\n");
    sb.append("    sslConfig: ").append(toIndentedString(sslConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("automatedBackupPolicy");
    openapiFields.add("backupSource");
    openapiFields.add("clusterType");
    openapiFields.add("continuousBackupConfig");
    openapiFields.add("continuousBackupInfo");
    openapiFields.add("createTime");
    openapiFields.add("databaseVersion");
    openapiFields.add("deleteTime");
    openapiFields.add("displayName");
    openapiFields.add("encryptionConfig");
    openapiFields.add("encryptionInfo");
    openapiFields.add("etag");
    openapiFields.add("initialUser");
    openapiFields.add("labels");
    openapiFields.add("migrationSource");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("networkConfig");
    openapiFields.add("primaryConfig");
    openapiFields.add("pscConfig");
    openapiFields.add("reconciling");
    openapiFields.add("satisfiesPzi");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("secondaryConfig");
    openapiFields.add("sslConfig");
    openapiFields.add("state");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cluster is not found in the empty JSON string", Cluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `automatedBackupPolicy`
      if (jsonObj.get("automatedBackupPolicy") != null && !jsonObj.get("automatedBackupPolicy").isJsonNull()) {
        AutomatedBackupPolicy.validateJsonElement(jsonObj.get("automatedBackupPolicy"));
      }
      // validate the optional field `backupSource`
      if (jsonObj.get("backupSource") != null && !jsonObj.get("backupSource").isJsonNull()) {
        BackupSource.validateJsonElement(jsonObj.get("backupSource"));
      }
      if ((jsonObj.get("clusterType") != null && !jsonObj.get("clusterType").isJsonNull()) && !jsonObj.get("clusterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterType").toString()));
      }
      // validate the optional field `clusterType`
      if (jsonObj.get("clusterType") != null && !jsonObj.get("clusterType").isJsonNull()) {
        ClusterTypeEnum.validateJsonElement(jsonObj.get("clusterType"));
      }
      // validate the optional field `continuousBackupConfig`
      if (jsonObj.get("continuousBackupConfig") != null && !jsonObj.get("continuousBackupConfig").isJsonNull()) {
        ContinuousBackupConfig.validateJsonElement(jsonObj.get("continuousBackupConfig"));
      }
      // validate the optional field `continuousBackupInfo`
      if (jsonObj.get("continuousBackupInfo") != null && !jsonObj.get("continuousBackupInfo").isJsonNull()) {
        ContinuousBackupInfo.validateJsonElement(jsonObj.get("continuousBackupInfo"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) && !jsonObj.get("databaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseVersion").toString()));
      }
      // validate the optional field `databaseVersion`
      if (jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) {
        DatabaseVersionEnum.validateJsonElement(jsonObj.get("databaseVersion"));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      // validate the optional field `encryptionInfo`
      if (jsonObj.get("encryptionInfo") != null && !jsonObj.get("encryptionInfo").isJsonNull()) {
        EncryptionInfo.validateJsonElement(jsonObj.get("encryptionInfo"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `initialUser`
      if (jsonObj.get("initialUser") != null && !jsonObj.get("initialUser").isJsonNull()) {
        UserPassword.validateJsonElement(jsonObj.get("initialUser"));
      }
      // validate the optional field `migrationSource`
      if (jsonObj.get("migrationSource") != null && !jsonObj.get("migrationSource").isJsonNull()) {
        MigrationSource.validateJsonElement(jsonObj.get("migrationSource"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        NetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      // validate the optional field `primaryConfig`
      if (jsonObj.get("primaryConfig") != null && !jsonObj.get("primaryConfig").isJsonNull()) {
        PrimaryConfig.validateJsonElement(jsonObj.get("primaryConfig"));
      }
      // validate the optional field `pscConfig`
      if (jsonObj.get("pscConfig") != null && !jsonObj.get("pscConfig").isJsonNull()) {
        PscConfig.validateJsonElement(jsonObj.get("pscConfig"));
      }
      // validate the optional field `secondaryConfig`
      if (jsonObj.get("secondaryConfig") != null && !jsonObj.get("secondaryConfig").isJsonNull()) {
        SecondaryConfig.validateJsonElement(jsonObj.get("secondaryConfig"));
      }
      // validate the optional field `sslConfig`
      if (jsonObj.get("sslConfig") != null && !jsonObj.get("sslConfig").isJsonNull()) {
        SslConfig.validateJsonElement(jsonObj.get("sslConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cluster.class));

       return (TypeAdapter<T>) new TypeAdapter<Cluster>() {
           @Override
           public void write(JsonWriter out, Cluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cluster
   * @throws IOException if the JSON string is invalid with respect to Cluster
   */
  public static Cluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cluster.class);
  }

  /**
   * Convert an instance of Cluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

