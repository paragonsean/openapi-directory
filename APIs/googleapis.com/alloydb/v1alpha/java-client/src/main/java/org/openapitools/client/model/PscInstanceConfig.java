/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PscInterfaceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PscInstanceConfig contains PSC related configuration at an instance level.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:08.594769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscInstanceConfig {
  public static final String SERIALIZED_NAME_ALLOWED_CONSUMER_NETWORKS = "allowedConsumerNetworks";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CONSUMER_NETWORKS)
  private List<String> allowedConsumerNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_CONSUMER_PROJECTS = "allowedConsumerProjects";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CONSUMER_PROJECTS)
  private List<String> allowedConsumerProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTGOING_SERVICE_ATTACHMENT_LINKS = "outgoingServiceAttachmentLinks";
  @SerializedName(SERIALIZED_NAME_OUTGOING_SERVICE_ATTACHMENT_LINKS)
  private List<String> outgoingServiceAttachmentLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PSC_ENABLED = "pscEnabled";
  @SerializedName(SERIALIZED_NAME_PSC_ENABLED)
  private Boolean pscEnabled;

  public static final String SERIALIZED_NAME_PSC_INTERFACE_CONFIGS = "pscInterfaceConfigs";
  @SerializedName(SERIALIZED_NAME_PSC_INTERFACE_CONFIGS)
  private List<PscInterfaceConfig> pscInterfaceConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ATTACHMENT_LINK = "serviceAttachmentLink";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTACHMENT_LINK)
  private String serviceAttachmentLink;

  public PscInstanceConfig() {
  }

  public PscInstanceConfig(
     String serviceAttachmentLink
  ) {
    this();
    this.serviceAttachmentLink = serviceAttachmentLink;
  }

  public PscInstanceConfig allowedConsumerNetworks(List<String> allowedConsumerNetworks) {
    this.allowedConsumerNetworks = allowedConsumerNetworks;
    return this;
  }

  public PscInstanceConfig addAllowedConsumerNetworksItem(String allowedConsumerNetworksItem) {
    if (this.allowedConsumerNetworks == null) {
      this.allowedConsumerNetworks = new ArrayList<>();
    }
    this.allowedConsumerNetworks.add(allowedConsumerNetworksItem);
    return this;
  }

  /**
   * Optional. List of consumer networks that are allowed to create PSC endpoints to service-attachments to this instance.
   * @return allowedConsumerNetworks
   */
  @javax.annotation.Nullable
  public List<String> getAllowedConsumerNetworks() {
    return allowedConsumerNetworks;
  }

  public void setAllowedConsumerNetworks(List<String> allowedConsumerNetworks) {
    this.allowedConsumerNetworks = allowedConsumerNetworks;
  }


  public PscInstanceConfig allowedConsumerProjects(List<String> allowedConsumerProjects) {
    this.allowedConsumerProjects = allowedConsumerProjects;
    return this;
  }

  public PscInstanceConfig addAllowedConsumerProjectsItem(String allowedConsumerProjectsItem) {
    if (this.allowedConsumerProjects == null) {
      this.allowedConsumerProjects = new ArrayList<>();
    }
    this.allowedConsumerProjects.add(allowedConsumerProjectsItem);
    return this;
  }

  /**
   * Optional. List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
   * @return allowedConsumerProjects
   */
  @javax.annotation.Nullable
  public List<String> getAllowedConsumerProjects() {
    return allowedConsumerProjects;
  }

  public void setAllowedConsumerProjects(List<String> allowedConsumerProjects) {
    this.allowedConsumerProjects = allowedConsumerProjects;
  }


  public PscInstanceConfig outgoingServiceAttachmentLinks(List<String> outgoingServiceAttachmentLinks) {
    this.outgoingServiceAttachmentLinks = outgoingServiceAttachmentLinks;
    return this;
  }

  public PscInstanceConfig addOutgoingServiceAttachmentLinksItem(String outgoingServiceAttachmentLinksItem) {
    if (this.outgoingServiceAttachmentLinks == null) {
      this.outgoingServiceAttachmentLinks = new ArrayList<>();
    }
    this.outgoingServiceAttachmentLinks.add(outgoingServiceAttachmentLinksItem);
    return this;
  }

  /**
   * Optional. List of service attachments that this instance has created endpoints to connect with. Currently, only a single outgoing service attachment is supported per instance.
   * @return outgoingServiceAttachmentLinks
   */
  @javax.annotation.Nullable
  public List<String> getOutgoingServiceAttachmentLinks() {
    return outgoingServiceAttachmentLinks;
  }

  public void setOutgoingServiceAttachmentLinks(List<String> outgoingServiceAttachmentLinks) {
    this.outgoingServiceAttachmentLinks = outgoingServiceAttachmentLinks;
  }


  public PscInstanceConfig pscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
    return this;
  }

  /**
   * Optional. Whether PSC connectivity is enabled for this instance. This is populated by referencing the value from the parent cluster.
   * @return pscEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPscEnabled() {
    return pscEnabled;
  }

  public void setPscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
  }


  public PscInstanceConfig pscInterfaceConfigs(List<PscInterfaceConfig> pscInterfaceConfigs) {
    this.pscInterfaceConfigs = pscInterfaceConfigs;
    return this;
  }

  public PscInstanceConfig addPscInterfaceConfigsItem(PscInterfaceConfig pscInterfaceConfigsItem) {
    if (this.pscInterfaceConfigs == null) {
      this.pscInterfaceConfigs = new ArrayList<>();
    }
    this.pscInterfaceConfigs.add(pscInterfaceConfigsItem);
    return this;
  }

  /**
   * Optional. Configurations for setting up PSC interfaces attached to the instance which are used for outbound connectivity. Only primary instances can have PSC interface attached. All the VMs created for the primary instance will share the same configurations. Currently we only support 0 or 1 PSC interface.
   * @return pscInterfaceConfigs
   */
  @javax.annotation.Nullable
  public List<PscInterfaceConfig> getPscInterfaceConfigs() {
    return pscInterfaceConfigs;
  }

  public void setPscInterfaceConfigs(List<PscInterfaceConfig> pscInterfaceConfigs) {
    this.pscInterfaceConfigs = pscInterfaceConfigs;
  }


  /**
   * Output only. The service attachment created when Private Service Connect (PSC) is enabled for the instance. The name of the resource will be in the format of &#x60;projects//regions//serviceAttachments/&#x60;
   * @return serviceAttachmentLink
   */
  @javax.annotation.Nullable
  public String getServiceAttachmentLink() {
    return serviceAttachmentLink;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscInstanceConfig pscInstanceConfig = (PscInstanceConfig) o;
    return Objects.equals(this.allowedConsumerNetworks, pscInstanceConfig.allowedConsumerNetworks) &&
        Objects.equals(this.allowedConsumerProjects, pscInstanceConfig.allowedConsumerProjects) &&
        Objects.equals(this.outgoingServiceAttachmentLinks, pscInstanceConfig.outgoingServiceAttachmentLinks) &&
        Objects.equals(this.pscEnabled, pscInstanceConfig.pscEnabled) &&
        Objects.equals(this.pscInterfaceConfigs, pscInstanceConfig.pscInterfaceConfigs) &&
        Objects.equals(this.serviceAttachmentLink, pscInstanceConfig.serviceAttachmentLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedConsumerNetworks, allowedConsumerProjects, outgoingServiceAttachmentLinks, pscEnabled, pscInterfaceConfigs, serviceAttachmentLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscInstanceConfig {\n");
    sb.append("    allowedConsumerNetworks: ").append(toIndentedString(allowedConsumerNetworks)).append("\n");
    sb.append("    allowedConsumerProjects: ").append(toIndentedString(allowedConsumerProjects)).append("\n");
    sb.append("    outgoingServiceAttachmentLinks: ").append(toIndentedString(outgoingServiceAttachmentLinks)).append("\n");
    sb.append("    pscEnabled: ").append(toIndentedString(pscEnabled)).append("\n");
    sb.append("    pscInterfaceConfigs: ").append(toIndentedString(pscInterfaceConfigs)).append("\n");
    sb.append("    serviceAttachmentLink: ").append(toIndentedString(serviceAttachmentLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedConsumerNetworks");
    openapiFields.add("allowedConsumerProjects");
    openapiFields.add("outgoingServiceAttachmentLinks");
    openapiFields.add("pscEnabled");
    openapiFields.add("pscInterfaceConfigs");
    openapiFields.add("serviceAttachmentLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscInstanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscInstanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscInstanceConfig is not found in the empty JSON string", PscInstanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscInstanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscInstanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedConsumerNetworks") != null && !jsonObj.get("allowedConsumerNetworks").isJsonNull() && !jsonObj.get("allowedConsumerNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedConsumerNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("allowedConsumerNetworks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedConsumerProjects") != null && !jsonObj.get("allowedConsumerProjects").isJsonNull() && !jsonObj.get("allowedConsumerProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedConsumerProjects` to be an array in the JSON string but got `%s`", jsonObj.get("allowedConsumerProjects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outgoingServiceAttachmentLinks") != null && !jsonObj.get("outgoingServiceAttachmentLinks").isJsonNull() && !jsonObj.get("outgoingServiceAttachmentLinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outgoingServiceAttachmentLinks` to be an array in the JSON string but got `%s`", jsonObj.get("outgoingServiceAttachmentLinks").toString()));
      }
      if (jsonObj.get("pscInterfaceConfigs") != null && !jsonObj.get("pscInterfaceConfigs").isJsonNull()) {
        JsonArray jsonArraypscInterfaceConfigs = jsonObj.getAsJsonArray("pscInterfaceConfigs");
        if (jsonArraypscInterfaceConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pscInterfaceConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pscInterfaceConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("pscInterfaceConfigs").toString()));
          }

          // validate the optional field `pscInterfaceConfigs` (array)
          for (int i = 0; i < jsonArraypscInterfaceConfigs.size(); i++) {
            PscInterfaceConfig.validateJsonElement(jsonArraypscInterfaceConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceAttachmentLink") != null && !jsonObj.get("serviceAttachmentLink").isJsonNull()) && !jsonObj.get("serviceAttachmentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAttachmentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAttachmentLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscInstanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscInstanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscInstanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscInstanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PscInstanceConfig>() {
           @Override
           public void write(JsonWriter out, PscInstanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscInstanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscInstanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscInstanceConfig
   * @throws IOException if the JSON string is invalid with respect to PscInstanceConfig
   */
  public static PscInstanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscInstanceConfig.class);
  }

  /**
   * Convert an instance of PscInstanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

