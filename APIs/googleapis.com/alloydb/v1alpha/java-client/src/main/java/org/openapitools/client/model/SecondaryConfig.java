/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:08.594769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecondaryConfig {
  public static final String SERIALIZED_NAME_PRIMARY_CLUSTER_NAME = "primaryClusterName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CLUSTER_NAME)
  private String primaryClusterName;

  public SecondaryConfig() {
  }

  public SecondaryConfig primaryClusterName(String primaryClusterName) {
    this.primaryClusterName = primaryClusterName;
    return this;
  }

  /**
   * The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
   * @return primaryClusterName
   */
  @javax.annotation.Nullable
  public String getPrimaryClusterName() {
    return primaryClusterName;
  }

  public void setPrimaryClusterName(String primaryClusterName) {
    this.primaryClusterName = primaryClusterName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecondaryConfig secondaryConfig = (SecondaryConfig) o;
    return Objects.equals(this.primaryClusterName, secondaryConfig.primaryClusterName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryClusterName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecondaryConfig {\n");
    sb.append("    primaryClusterName: ").append(toIndentedString(primaryClusterName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryClusterName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecondaryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecondaryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecondaryConfig is not found in the empty JSON string", SecondaryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecondaryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecondaryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("primaryClusterName") != null && !jsonObj.get("primaryClusterName").isJsonNull()) && !jsonObj.get("primaryClusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryClusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryClusterName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecondaryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecondaryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecondaryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecondaryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SecondaryConfig>() {
           @Override
           public void write(JsonWriter out, SecondaryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecondaryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecondaryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecondaryConfig
   * @throws IOException if the JSON string is invalid with respect to SecondaryConfig
   */
  public static SecondaryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecondaryConfig.class);
  }

  /**
   * Convert an instance of SecondaryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

