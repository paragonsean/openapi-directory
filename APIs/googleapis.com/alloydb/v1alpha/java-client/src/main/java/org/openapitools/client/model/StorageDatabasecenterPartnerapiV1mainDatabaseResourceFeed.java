/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseResourceId;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseResourceFeed is the top level proto to be used to ingest different database resource level events into Condor platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:08.594769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed {
  public static final String SERIALIZED_NAME_FEED_TIMESTAMP = "feedTimestamp";
  @SerializedName(SERIALIZED_NAME_FEED_TIMESTAMP)
  private String feedTimestamp;

  /**
   * Required. Type feed to be ingested into condor
   */
  @JsonAdapter(FeedTypeEnum.Adapter.class)
  public enum FeedTypeEnum {
    FEEDTYPE_UNSPECIFIED("FEEDTYPE_UNSPECIFIED"),
    
    RESOURCE_METADATA("RESOURCE_METADATA"),
    
    OBSERVABILITY_DATA("OBSERVABILITY_DATA"),
    
    SECURITY_FINDING_DATA("SECURITY_FINDING_DATA"),
    
    RECOMMENDATION_SIGNAL_DATA("RECOMMENDATION_SIGNAL_DATA");

    private String value;

    FeedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeedTypeEnum fromValue(String value) {
      for (FeedTypeEnum b : FeedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private FeedTypeEnum feedType;

  public static final String SERIALIZED_NAME_RECOMMENDATION_SIGNAL_DATA = "recommendationSignalData";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_SIGNAL_DATA)
  private StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommendationSignalData;

  public static final String SERIALIZED_NAME_RESOURCE_HEALTH_SIGNAL_DATA = "resourceHealthSignalData";
  @SerializedName(SERIALIZED_NAME_RESOURCE_HEALTH_SIGNAL_DATA)
  private StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData resourceHealthSignalData;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_METADATA = "resourceMetadata";
  @SerializedName(SERIALIZED_NAME_RESOURCE_METADATA)
  private StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata resourceMetadata;

  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed() {
  }

  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed feedTimestamp(String feedTimestamp) {
    this.feedTimestamp = feedTimestamp;
    return this;
  }

  /**
   * Required. Timestamp when feed is generated.
   * @return feedTimestamp
   */
  @javax.annotation.Nullable
  public String getFeedTimestamp() {
    return feedTimestamp;
  }

  public void setFeedTimestamp(String feedTimestamp) {
    this.feedTimestamp = feedTimestamp;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed feedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * Required. Type feed to be ingested into condor
   * @return feedType
   */
  @javax.annotation.Nullable
  public FeedTypeEnum getFeedType() {
    return feedType;
  }

  public void setFeedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed recommendationSignalData(StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommendationSignalData) {
    this.recommendationSignalData = recommendationSignalData;
    return this;
  }

  /**
   * Get recommendationSignalData
   * @return recommendationSignalData
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData getRecommendationSignalData() {
    return recommendationSignalData;
  }

  public void setRecommendationSignalData(StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommendationSignalData) {
    this.recommendationSignalData = recommendationSignalData;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed resourceHealthSignalData(StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData resourceHealthSignalData) {
    this.resourceHealthSignalData = resourceHealthSignalData;
    return this;
  }

  /**
   * Get resourceHealthSignalData
   * @return resourceHealthSignalData
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData getResourceHealthSignalData() {
    return resourceHealthSignalData;
  }

  public void setResourceHealthSignalData(StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData resourceHealthSignalData) {
    this.resourceHealthSignalData = resourceHealthSignalData;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed resourceId(StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed resourceMetadata(StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
    return this;
  }

  /**
   * Get resourceMetadata
   * @return resourceMetadata
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata getResourceMetadata() {
    return resourceMetadata;
  }

  public void setResourceMetadata(StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata resourceMetadata) {
    this.resourceMetadata = resourceMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed = (StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed) o;
    return Objects.equals(this.feedTimestamp, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.feedTimestamp) &&
        Objects.equals(this.feedType, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.feedType) &&
        Objects.equals(this.recommendationSignalData, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.recommendationSignalData) &&
        Objects.equals(this.resourceHealthSignalData, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.resourceHealthSignalData) &&
        Objects.equals(this.resourceId, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.resourceId) &&
        Objects.equals(this.resourceMetadata, storageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.resourceMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedTimestamp, feedType, recommendationSignalData, resourceHealthSignalData, resourceId, resourceMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed {\n");
    sb.append("    feedTimestamp: ").append(toIndentedString(feedTimestamp)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("    recommendationSignalData: ").append(toIndentedString(recommendationSignalData)).append("\n");
    sb.append("    resourceHealthSignalData: ").append(toIndentedString(resourceHealthSignalData)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceMetadata: ").append(toIndentedString(resourceMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feedTimestamp");
    openapiFields.add("feedType");
    openapiFields.add("recommendationSignalData");
    openapiFields.add("resourceHealthSignalData");
    openapiFields.add("resourceId");
    openapiFields.add("resourceMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("feedTimestamp") != null && !jsonObj.get("feedTimestamp").isJsonNull()) && !jsonObj.get("feedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedTimestamp").toString()));
      }
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      // validate the optional field `feedType`
      if (jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) {
        FeedTypeEnum.validateJsonElement(jsonObj.get("feedType"));
      }
      // validate the optional field `recommendationSignalData`
      if (jsonObj.get("recommendationSignalData") != null && !jsonObj.get("recommendationSignalData").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.validateJsonElement(jsonObj.get("recommendationSignalData"));
      }
      // validate the optional field `resourceHealthSignalData`
      if (jsonObj.get("resourceHealthSignalData") != null && !jsonObj.get("resourceHealthSignalData").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.validateJsonElement(jsonObj.get("resourceHealthSignalData"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.validateJsonElement(jsonObj.get("resourceId"));
      }
      // validate the optional field `resourceMetadata`
      if (jsonObj.get("resourceMetadata") != null && !jsonObj.get("resourceMetadata").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.validateJsonElement(jsonObj.get("resourceMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed
   */
  public static StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

