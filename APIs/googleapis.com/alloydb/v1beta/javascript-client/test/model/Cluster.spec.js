/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AlloyDbApi);
  }
}(this, function(expect, AlloyDbApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AlloyDbApi.Cluster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Cluster', function() {
    it('should create an instance of Cluster', function() {
      // uncomment below and update the code to test Cluster
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be.a(AlloyDbApi.Cluster);
    });

    it('should have the property annotations (base name: "annotations")', function() {
      // uncomment below and update the code to test the property annotations
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property automatedBackupPolicy (base name: "automatedBackupPolicy")', function() {
      // uncomment below and update the code to test the property automatedBackupPolicy
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property backupSource (base name: "backupSource")', function() {
      // uncomment below and update the code to test the property backupSource
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property clusterType (base name: "clusterType")', function() {
      // uncomment below and update the code to test the property clusterType
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property continuousBackupConfig (base name: "continuousBackupConfig")', function() {
      // uncomment below and update the code to test the property continuousBackupConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property continuousBackupInfo (base name: "continuousBackupInfo")', function() {
      // uncomment below and update the code to test the property continuousBackupInfo
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property databaseVersion (base name: "databaseVersion")', function() {
      // uncomment below and update the code to test the property databaseVersion
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property deleteTime (base name: "deleteTime")', function() {
      // uncomment below and update the code to test the property deleteTime
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property encryptionConfig (base name: "encryptionConfig")', function() {
      // uncomment below and update the code to test the property encryptionConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property encryptionInfo (base name: "encryptionInfo")', function() {
      // uncomment below and update the code to test the property encryptionInfo
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property initialUser (base name: "initialUser")', function() {
      // uncomment below and update the code to test the property initialUser
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property migrationSource (base name: "migrationSource")', function() {
      // uncomment below and update the code to test the property migrationSource
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property networkConfig (base name: "networkConfig")', function() {
      // uncomment below and update the code to test the property networkConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property primaryConfig (base name: "primaryConfig")', function() {
      // uncomment below and update the code to test the property primaryConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property pscConfig (base name: "pscConfig")', function() {
      // uncomment below and update the code to test the property pscConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property reconciling (base name: "reconciling")', function() {
      // uncomment below and update the code to test the property reconciling
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property satisfiesPzs (base name: "satisfiesPzs")', function() {
      // uncomment below and update the code to test the property satisfiesPzs
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property secondaryConfig (base name: "secondaryConfig")', function() {
      // uncomment below and update the code to test the property secondaryConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property sslConfig (base name: "sslConfig")', function() {
      // uncomment below and update the code to test the property sslConfig
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new AlloyDbApi.Cluster();
      //expect(instance).to.be();
    });

  });

}));
