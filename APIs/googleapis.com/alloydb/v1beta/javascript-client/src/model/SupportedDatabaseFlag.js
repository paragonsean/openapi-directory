/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegerRestrictions from './IntegerRestrictions';
import StringRestrictions from './StringRestrictions';

/**
 * The SupportedDatabaseFlag model module.
 * @module model/SupportedDatabaseFlag
 * @version v1beta
 */
class SupportedDatabaseFlag {
    /**
     * Constructs a new <code>SupportedDatabaseFlag</code>.
     * SupportedDatabaseFlag gives general information about a database flag, like type and allowed values. This is a static value that is defined on the server side, and it cannot be modified by callers. To set the Database flags on a particular Instance, a caller should modify the Instance.database_flags field.
     * @alias module:model/SupportedDatabaseFlag
     */
    constructor() { 
        
        SupportedDatabaseFlag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SupportedDatabaseFlag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupportedDatabaseFlag} obj Optional instance to populate.
     * @return {module:model/SupportedDatabaseFlag} The populated <code>SupportedDatabaseFlag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupportedDatabaseFlag();

            if (data.hasOwnProperty('acceptsMultipleValues')) {
                obj['acceptsMultipleValues'] = ApiClient.convertToType(data['acceptsMultipleValues'], 'Boolean');
            }
            if (data.hasOwnProperty('flagName')) {
                obj['flagName'] = ApiClient.convertToType(data['flagName'], 'String');
            }
            if (data.hasOwnProperty('integerRestrictions')) {
                obj['integerRestrictions'] = IntegerRestrictions.constructFromObject(data['integerRestrictions']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requiresDbRestart')) {
                obj['requiresDbRestart'] = ApiClient.convertToType(data['requiresDbRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('stringRestrictions')) {
                obj['stringRestrictions'] = StringRestrictions.constructFromObject(data['stringRestrictions']);
            }
            if (data.hasOwnProperty('supportedDbVersions')) {
                obj['supportedDbVersions'] = ApiClient.convertToType(data['supportedDbVersions'], ['String']);
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SupportedDatabaseFlag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SupportedDatabaseFlag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['flagName'] && !(typeof data['flagName'] === 'string' || data['flagName'] instanceof String)) {
            throw new Error("Expected the field `flagName` to be a primitive type in the JSON string but got " + data['flagName']);
        }
        // validate the optional field `integerRestrictions`
        if (data['integerRestrictions']) { // data not null
          IntegerRestrictions.validateJSON(data['integerRestrictions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `stringRestrictions`
        if (data['stringRestrictions']) { // data not null
          StringRestrictions.validateJSON(data['stringRestrictions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDbVersions'])) {
            throw new Error("Expected the field `supportedDbVersions` to be an array in the JSON data but got " + data['supportedDbVersions']);
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.
 * @member {Boolean} acceptsMultipleValues
 */
SupportedDatabaseFlag.prototype['acceptsMultipleValues'] = undefined;

/**
 * The name of the database flag, e.g. \"max_allowed_packets\". The is a possibly key for the Instance.database_flags map field.
 * @member {String} flagName
 */
SupportedDatabaseFlag.prototype['flagName'] = undefined;

/**
 * @member {module:model/IntegerRestrictions} integerRestrictions
 */
SupportedDatabaseFlag.prototype['integerRestrictions'] = undefined;

/**
 * The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.
 * @member {String} name
 */
SupportedDatabaseFlag.prototype['name'] = undefined;

/**
 * Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).
 * @member {Boolean} requiresDbRestart
 */
SupportedDatabaseFlag.prototype['requiresDbRestart'] = undefined;

/**
 * @member {module:model/StringRestrictions} stringRestrictions
 */
SupportedDatabaseFlag.prototype['stringRestrictions'] = undefined;

/**
 * Major database engine versions for which this flag is supported.
 * @member {Array.<module:model/SupportedDatabaseFlag.SupportedDbVersionsEnum>} supportedDbVersions
 */
SupportedDatabaseFlag.prototype['supportedDbVersions'] = undefined;

/**
 * @member {module:model/SupportedDatabaseFlag.ValueTypeEnum} valueType
 */
SupportedDatabaseFlag.prototype['valueType'] = undefined;





/**
 * Allowed values for the <code>supportedDbVersions</code> property.
 * @enum {String}
 * @readonly
 */
SupportedDatabaseFlag['SupportedDbVersionsEnum'] = {

    /**
     * value: "DATABASE_VERSION_UNSPECIFIED"
     * @const
     */
    "DATABASE_VERSION_UNSPECIFIED": "DATABASE_VERSION_UNSPECIFIED",

    /**
     * value: "POSTGRES_13"
     * @const
     */
    "POSTGRES_13": "POSTGRES_13",

    /**
     * value: "POSTGRES_14"
     * @const
     */
    "POSTGRES_14": "POSTGRES_14",

    /**
     * value: "POSTGRES_15"
     * @const
     */
    "POSTGRES_15": "POSTGRES_15"
};


/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
SupportedDatabaseFlag['ValueTypeEnum'] = {

    /**
     * value: "VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "VALUE_TYPE_UNSPECIFIED": "VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};



export default SupportedDatabaseFlag;

