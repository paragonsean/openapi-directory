/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomatedBackupPolicy from './AutomatedBackupPolicy';
import BackupSource from './BackupSource';
import ContinuousBackupConfig from './ContinuousBackupConfig';
import ContinuousBackupInfo from './ContinuousBackupInfo';
import EncryptionConfig from './EncryptionConfig';
import EncryptionInfo from './EncryptionInfo';
import MigrationSource from './MigrationSource';
import NetworkConfig from './NetworkConfig';
import PrimaryConfig from './PrimaryConfig';
import PscConfig from './PscConfig';
import SecondaryConfig from './SecondaryConfig';
import SslConfig from './SslConfig';
import UserPassword from './UserPassword';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version v1beta
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * A cluster is a collection of regional AlloyDB resources. It can include a primary instance and one or more read pool instances. All cluster resources share a storage layer, which scales as needed.
     * @alias module:model/Cluster
     */
    constructor() { 
        
        Cluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('automatedBackupPolicy')) {
                obj['automatedBackupPolicy'] = AutomatedBackupPolicy.constructFromObject(data['automatedBackupPolicy']);
            }
            if (data.hasOwnProperty('backupSource')) {
                obj['backupSource'] = BackupSource.constructFromObject(data['backupSource']);
            }
            if (data.hasOwnProperty('clusterType')) {
                obj['clusterType'] = ApiClient.convertToType(data['clusterType'], 'String');
            }
            if (data.hasOwnProperty('continuousBackupConfig')) {
                obj['continuousBackupConfig'] = ContinuousBackupConfig.constructFromObject(data['continuousBackupConfig']);
            }
            if (data.hasOwnProperty('continuousBackupInfo')) {
                obj['continuousBackupInfo'] = ContinuousBackupInfo.constructFromObject(data['continuousBackupInfo']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('databaseVersion')) {
                obj['databaseVersion'] = ApiClient.convertToType(data['databaseVersion'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('encryptionInfo')) {
                obj['encryptionInfo'] = EncryptionInfo.constructFromObject(data['encryptionInfo']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('initialUser')) {
                obj['initialUser'] = UserPassword.constructFromObject(data['initialUser']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('migrationSource')) {
                obj['migrationSource'] = MigrationSource.constructFromObject(data['migrationSource']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('primaryConfig')) {
                obj['primaryConfig'] = PrimaryConfig.constructFromObject(data['primaryConfig']);
            }
            if (data.hasOwnProperty('pscConfig')) {
                obj['pscConfig'] = PscConfig.constructFromObject(data['pscConfig']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('secondaryConfig')) {
                obj['secondaryConfig'] = SecondaryConfig.constructFromObject(data['secondaryConfig']);
            }
            if (data.hasOwnProperty('sslConfig')) {
                obj['sslConfig'] = SslConfig.constructFromObject(data['sslConfig']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // validate the optional field `automatedBackupPolicy`
        if (data['automatedBackupPolicy']) { // data not null
          AutomatedBackupPolicy.validateJSON(data['automatedBackupPolicy']);
        }
        // validate the optional field `backupSource`
        if (data['backupSource']) { // data not null
          BackupSource.validateJSON(data['backupSource']);
        }
        // ensure the json data is a string
        if (data['clusterType'] && !(typeof data['clusterType'] === 'string' || data['clusterType'] instanceof String)) {
            throw new Error("Expected the field `clusterType` to be a primitive type in the JSON string but got " + data['clusterType']);
        }
        // validate the optional field `continuousBackupConfig`
        if (data['continuousBackupConfig']) { // data not null
          ContinuousBackupConfig.validateJSON(data['continuousBackupConfig']);
        }
        // validate the optional field `continuousBackupInfo`
        if (data['continuousBackupInfo']) { // data not null
          ContinuousBackupInfo.validateJSON(data['continuousBackupInfo']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['databaseVersion'] && !(typeof data['databaseVersion'] === 'string' || data['databaseVersion'] instanceof String)) {
            throw new Error("Expected the field `databaseVersion` to be a primitive type in the JSON string but got " + data['databaseVersion']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // validate the optional field `encryptionInfo`
        if (data['encryptionInfo']) { // data not null
          EncryptionInfo.validateJSON(data['encryptionInfo']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `initialUser`
        if (data['initialUser']) { // data not null
          UserPassword.validateJSON(data['initialUser']);
        }
        // validate the optional field `migrationSource`
        if (data['migrationSource']) { // data not null
          MigrationSource.validateJSON(data['migrationSource']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NetworkConfig.validateJSON(data['networkConfig']);
        }
        // validate the optional field `primaryConfig`
        if (data['primaryConfig']) { // data not null
          PrimaryConfig.validateJSON(data['primaryConfig']);
        }
        // validate the optional field `pscConfig`
        if (data['pscConfig']) { // data not null
          PscConfig.validateJSON(data['pscConfig']);
        }
        // validate the optional field `secondaryConfig`
        if (data['secondaryConfig']) { // data not null
          SecondaryConfig.validateJSON(data['secondaryConfig']);
        }
        // validate the optional field `sslConfig`
        if (data['sslConfig']) { // data not null
          SslConfig.validateJSON(data['sslConfig']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
 * @member {Object.<String, String>} annotations
 */
Cluster.prototype['annotations'] = undefined;

/**
 * @member {module:model/AutomatedBackupPolicy} automatedBackupPolicy
 */
Cluster.prototype['automatedBackupPolicy'] = undefined;

/**
 * @member {module:model/BackupSource} backupSource
 */
Cluster.prototype['backupSource'] = undefined;

/**
 * Output only. The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`
 * @member {module:model/Cluster.ClusterTypeEnum} clusterType
 */
Cluster.prototype['clusterType'] = undefined;

/**
 * @member {module:model/ContinuousBackupConfig} continuousBackupConfig
 */
Cluster.prototype['continuousBackupConfig'] = undefined;

/**
 * @member {module:model/ContinuousBackupInfo} continuousBackupInfo
 */
Cluster.prototype['continuousBackupInfo'] = undefined;

/**
 * Output only. Create time stamp
 * @member {String} createTime
 */
Cluster.prototype['createTime'] = undefined;

/**
 * Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
 * @member {module:model/Cluster.DatabaseVersionEnum} databaseVersion
 */
Cluster.prototype['databaseVersion'] = undefined;

/**
 * Output only. Delete time stamp
 * @member {String} deleteTime
 */
Cluster.prototype['deleteTime'] = undefined;

/**
 * User-settable and human-readable display name for the Cluster.
 * @member {String} displayName
 */
Cluster.prototype['displayName'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
Cluster.prototype['encryptionConfig'] = undefined;

/**
 * @member {module:model/EncryptionInfo} encryptionInfo
 */
Cluster.prototype['encryptionInfo'] = undefined;

/**
 * For Resource freshness validation (https://google.aip.dev/154)
 * @member {String} etag
 */
Cluster.prototype['etag'] = undefined;

/**
 * @member {module:model/UserPassword} initialUser
 */
Cluster.prototype['initialUser'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
Cluster.prototype['labels'] = undefined;

/**
 * @member {module:model/MigrationSource} migrationSource
 */
Cluster.prototype['migrationSource'] = undefined;

/**
 * Output only. The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
 * @member {String} name
 */
Cluster.prototype['name'] = undefined;

/**
 * Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: `projects/{project}/global/networks/{network_id}`. This is required to create a cluster. Deprecated, use network_config.network instead.
 * @member {String} network
 */
Cluster.prototype['network'] = undefined;

/**
 * @member {module:model/NetworkConfig} networkConfig
 */
Cluster.prototype['networkConfig'] = undefined;

/**
 * @member {module:model/PrimaryConfig} primaryConfig
 */
Cluster.prototype['primaryConfig'] = undefined;

/**
 * @member {module:model/PscConfig} pscConfig
 */
Cluster.prototype['pscConfig'] = undefined;

/**
 * Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
 * @member {Boolean} reconciling
 */
Cluster.prototype['reconciling'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzs
 */
Cluster.prototype['satisfiesPzs'] = undefined;

/**
 * @member {module:model/SecondaryConfig} secondaryConfig
 */
Cluster.prototype['secondaryConfig'] = undefined;

/**
 * @member {module:model/SslConfig} sslConfig
 */
Cluster.prototype['sslConfig'] = undefined;

/**
 * Output only. The current serving state of the cluster.
 * @member {module:model/Cluster.StateEnum} state
 */
Cluster.prototype['state'] = undefined;

/**
 * Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
 * @member {String} uid
 */
Cluster.prototype['uid'] = undefined;

/**
 * Output only. Update time stamp
 * @member {String} updateTime
 */
Cluster.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>clusterType</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['ClusterTypeEnum'] = {

    /**
     * value: "CLUSTER_TYPE_UNSPECIFIED"
     * @const
     */
    "CLUSTER_TYPE_UNSPECIFIED": "CLUSTER_TYPE_UNSPECIFIED",

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY",

    /**
     * value: "SECONDARY"
     * @const
     */
    "SECONDARY": "SECONDARY"
};


/**
 * Allowed values for the <code>databaseVersion</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['DatabaseVersionEnum'] = {

    /**
     * value: "DATABASE_VERSION_UNSPECIFIED"
     * @const
     */
    "DATABASE_VERSION_UNSPECIFIED": "DATABASE_VERSION_UNSPECIFIED",

    /**
     * value: "POSTGRES_13"
     * @const
     */
    "POSTGRES_13": "POSTGRES_13",

    /**
     * value: "POSTGRES_14"
     * @const
     */
    "POSTGRES_14": "POSTGRES_14",

    /**
     * value: "POSTGRES_15"
     * @const
     */
    "POSTGRES_15": "POSTGRES_15"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Cluster['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED",

    /**
     * value: "EMPTY"
     * @const
     */
    "EMPTY": "EMPTY",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "BOOTSTRAPPING"
     * @const
     */
    "BOOTSTRAPPING": "BOOTSTRAPPING",

    /**
     * value: "MAINTENANCE"
     * @const
     */
    "MAINTENANCE": "MAINTENANCE",

    /**
     * value: "PROMOTING"
     * @const
     */
    "PROMOTING": "PROMOTING"
};



export default Cluster;

