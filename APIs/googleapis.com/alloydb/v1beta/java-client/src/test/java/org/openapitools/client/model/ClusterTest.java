/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AutomatedBackupPolicy;
import org.openapitools.client.model.BackupSource;
import org.openapitools.client.model.ContinuousBackupConfig;
import org.openapitools.client.model.ContinuousBackupInfo;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.EncryptionInfo;
import org.openapitools.client.model.MigrationSource;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.PrimaryConfig;
import org.openapitools.client.model.PscConfig;
import org.openapitools.client.model.SecondaryConfig;
import org.openapitools.client.model.SslConfig;
import org.openapitools.client.model.UserPassword;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Cluster
 */
public class ClusterTest {
    private final Cluster model = new Cluster();

    /**
     * Model tests for Cluster
     */
    @Test
    public void testCluster() {
        // TODO: test Cluster
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'automatedBackupPolicy'
     */
    @Test
    public void automatedBackupPolicyTest() {
        // TODO: test automatedBackupPolicy
    }

    /**
     * Test the property 'backupSource'
     */
    @Test
    public void backupSourceTest() {
        // TODO: test backupSource
    }

    /**
     * Test the property 'clusterType'
     */
    @Test
    public void clusterTypeTest() {
        // TODO: test clusterType
    }

    /**
     * Test the property 'continuousBackupConfig'
     */
    @Test
    public void continuousBackupConfigTest() {
        // TODO: test continuousBackupConfig
    }

    /**
     * Test the property 'continuousBackupInfo'
     */
    @Test
    public void continuousBackupInfoTest() {
        // TODO: test continuousBackupInfo
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'databaseVersion'
     */
    @Test
    public void databaseVersionTest() {
        // TODO: test databaseVersion
    }

    /**
     * Test the property 'deleteTime'
     */
    @Test
    public void deleteTimeTest() {
        // TODO: test deleteTime
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'encryptionConfig'
     */
    @Test
    public void encryptionConfigTest() {
        // TODO: test encryptionConfig
    }

    /**
     * Test the property 'encryptionInfo'
     */
    @Test
    public void encryptionInfoTest() {
        // TODO: test encryptionInfo
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'initialUser'
     */
    @Test
    public void initialUserTest() {
        // TODO: test initialUser
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'migrationSource'
     */
    @Test
    public void migrationSourceTest() {
        // TODO: test migrationSource
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'networkConfig'
     */
    @Test
    public void networkConfigTest() {
        // TODO: test networkConfig
    }

    /**
     * Test the property 'primaryConfig'
     */
    @Test
    public void primaryConfigTest() {
        // TODO: test primaryConfig
    }

    /**
     * Test the property 'pscConfig'
     */
    @Test
    public void pscConfigTest() {
        // TODO: test pscConfig
    }

    /**
     * Test the property 'reconciling'
     */
    @Test
    public void reconcilingTest() {
        // TODO: test reconciling
    }

    /**
     * Test the property 'satisfiesPzs'
     */
    @Test
    public void satisfiesPzsTest() {
        // TODO: test satisfiesPzs
    }

    /**
     * Test the property 'secondaryConfig'
     */
    @Test
    public void secondaryConfigTest() {
        // TODO: test secondaryConfig
    }

    /**
     * Test the property 'sslConfig'
     */
    @Test
    public void sslConfigTest() {
        // TODO: test sslConfig
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'uid'
     */
    @Test
    public void uidTest() {
        // TODO: test uid
    }

    /**
     * Test the property 'updateTime'
     */
    @Test
    public void updateTimeTest() {
        // TODO: test updateTime
    }

}
