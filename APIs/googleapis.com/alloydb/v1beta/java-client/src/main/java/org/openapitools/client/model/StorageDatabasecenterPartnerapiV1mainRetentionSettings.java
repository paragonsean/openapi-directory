/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StorageDatabasecenterPartnerapiV1mainRetentionSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainRetentionSettings {
  public static final String SERIALIZED_NAME_QUANTITY_BASED_RETENTION = "quantityBasedRetention";
  @SerializedName(SERIALIZED_NAME_QUANTITY_BASED_RETENTION)
  private Integer quantityBasedRetention;

  /**
   * The unit that &#39;retained_backups&#39; represents.
   */
  @JsonAdapter(RetentionUnitEnum.Adapter.class)
  public enum RetentionUnitEnum {
    RETENTION_UNIT_UNSPECIFIED("RETENTION_UNIT_UNSPECIFIED"),
    
    COUNT("COUNT"),
    
    TIME("TIME"),
    
    RETENTION_UNIT_OTHER("RETENTION_UNIT_OTHER");

    private String value;

    RetentionUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetentionUnitEnum fromValue(String value) {
      for (RetentionUnitEnum b : RetentionUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetentionUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetentionUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetentionUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetentionUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RetentionUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETENTION_UNIT = "retentionUnit";
  @SerializedName(SERIALIZED_NAME_RETENTION_UNIT)
  private RetentionUnitEnum retentionUnit;

  public static final String SERIALIZED_NAME_TIME_BASED_RETENTION = "timeBasedRetention";
  @SerializedName(SERIALIZED_NAME_TIME_BASED_RETENTION)
  private String timeBasedRetention;

  public StorageDatabasecenterPartnerapiV1mainRetentionSettings() {
  }

  public StorageDatabasecenterPartnerapiV1mainRetentionSettings quantityBasedRetention(Integer quantityBasedRetention) {
    this.quantityBasedRetention = quantityBasedRetention;
    return this;
  }

  /**
   * Get quantityBasedRetention
   * @return quantityBasedRetention
   */
  @javax.annotation.Nullable
  public Integer getQuantityBasedRetention() {
    return quantityBasedRetention;
  }

  public void setQuantityBasedRetention(Integer quantityBasedRetention) {
    this.quantityBasedRetention = quantityBasedRetention;
  }


  public StorageDatabasecenterPartnerapiV1mainRetentionSettings retentionUnit(RetentionUnitEnum retentionUnit) {
    this.retentionUnit = retentionUnit;
    return this;
  }

  /**
   * The unit that &#39;retained_backups&#39; represents.
   * @return retentionUnit
   */
  @javax.annotation.Nullable
  public RetentionUnitEnum getRetentionUnit() {
    return retentionUnit;
  }

  public void setRetentionUnit(RetentionUnitEnum retentionUnit) {
    this.retentionUnit = retentionUnit;
  }


  public StorageDatabasecenterPartnerapiV1mainRetentionSettings timeBasedRetention(String timeBasedRetention) {
    this.timeBasedRetention = timeBasedRetention;
    return this;
  }

  /**
   * Get timeBasedRetention
   * @return timeBasedRetention
   */
  @javax.annotation.Nullable
  public String getTimeBasedRetention() {
    return timeBasedRetention;
  }

  public void setTimeBasedRetention(String timeBasedRetention) {
    this.timeBasedRetention = timeBasedRetention;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainRetentionSettings storageDatabasecenterPartnerapiV1mainRetentionSettings = (StorageDatabasecenterPartnerapiV1mainRetentionSettings) o;
    return Objects.equals(this.quantityBasedRetention, storageDatabasecenterPartnerapiV1mainRetentionSettings.quantityBasedRetention) &&
        Objects.equals(this.retentionUnit, storageDatabasecenterPartnerapiV1mainRetentionSettings.retentionUnit) &&
        Objects.equals(this.timeBasedRetention, storageDatabasecenterPartnerapiV1mainRetentionSettings.timeBasedRetention);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantityBasedRetention, retentionUnit, timeBasedRetention);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainRetentionSettings {\n");
    sb.append("    quantityBasedRetention: ").append(toIndentedString(quantityBasedRetention)).append("\n");
    sb.append("    retentionUnit: ").append(toIndentedString(retentionUnit)).append("\n");
    sb.append("    timeBasedRetention: ").append(toIndentedString(timeBasedRetention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantityBasedRetention");
    openapiFields.add("retentionUnit");
    openapiFields.add("timeBasedRetention");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainRetentionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainRetentionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainRetentionSettings is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainRetentionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainRetentionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainRetentionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("retentionUnit") != null && !jsonObj.get("retentionUnit").isJsonNull()) && !jsonObj.get("retentionUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionUnit").toString()));
      }
      // validate the optional field `retentionUnit`
      if (jsonObj.get("retentionUnit") != null && !jsonObj.get("retentionUnit").isJsonNull()) {
        RetentionUnitEnum.validateJsonElement(jsonObj.get("retentionUnit"));
      }
      if ((jsonObj.get("timeBasedRetention") != null && !jsonObj.get("timeBasedRetention").isJsonNull()) && !jsonObj.get("timeBasedRetention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeBasedRetention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeBasedRetention").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainRetentionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainRetentionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainRetentionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainRetentionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainRetentionSettings>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainRetentionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainRetentionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainRetentionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainRetentionSettings
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainRetentionSettings
   */
  public static StorageDatabasecenterPartnerapiV1mainRetentionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainRetentionSettings.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainRetentionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

