/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common model for database resource recommendation signal data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData {
  public static final String SERIALIZED_NAME_ADDITIONAL_METADATA = "additionalMetadata";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METADATA)
  private Map<String, Object> additionalMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_REFRESH_TIME = "lastRefreshTime";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESH_TIME)
  private String lastRefreshTime;

  /**
   * Required. Recommendation state
   */
  @JsonAdapter(RecommendationStateEnum.Adapter.class)
  public enum RecommendationStateEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CLAIMED("CLAIMED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    DISMISSED("DISMISSED");

    private String value;

    RecommendationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendationStateEnum fromValue(String value) {
      for (RecommendationStateEnum b : RecommendationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDATION_STATE = "recommendationState";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_STATE)
  private RecommendationStateEnum recommendationState;

  public static final String SERIALIZED_NAME_RECOMMENDER = "recommender";
  @SerializedName(SERIALIZED_NAME_RECOMMENDER)
  private String recommender;

  public static final String SERIALIZED_NAME_RECOMMENDER_ID = "recommenderId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDER_ID)
  private String recommenderId;

  public static final String SERIALIZED_NAME_RECOMMENDER_SUBTYPE = "recommenderSubtype";
  @SerializedName(SERIALIZED_NAME_RECOMMENDER_SUBTYPE)
  private String recommenderSubtype;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  /**
   * Required. Type of signal, for example, &#x60;SIGNAL_TYPE_IDLE&#x60;, &#x60;SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES&#x60;, etc.
   */
  @JsonAdapter(SignalTypeEnum.Adapter.class)
  public enum SignalTypeEnum {
    UNSPECIFIED("SIGNAL_TYPE_UNSPECIFIED"),
    
    NOT_PROTECTED_BY_AUTOMATIC_FAILOVER("SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER"),
    
    GROUP_NOT_REPLICATING_ACROSS_REGIONS("SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS"),
    
    NOT_AVAILABLE_IN_MULTIPLE_ZONES("SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES"),
    
    NOT_AVAILABLE_IN_MULTIPLE_REGIONS("SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS"),
    
    NO_PROMOTABLE_REPLICA("SIGNAL_TYPE_NO_PROMOTABLE_REPLICA"),
    
    NO_AUTOMATED_BACKUP_POLICY("SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY"),
    
    SHORT_BACKUP_RETENTION("SIGNAL_TYPE_SHORT_BACKUP_RETENTION"),
    
    LAST_BACKUP_FAILED("SIGNAL_TYPE_LAST_BACKUP_FAILED"),
    
    LAST_BACKUP_OLD("SIGNAL_TYPE_LAST_BACKUP_OLD"),
    
    VIOLATES_CIS_GCP_FOUNDATION_2_0("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_3("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_2("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_1("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1"),
    
    VIOLATES_CIS_GCP_FOUNDATION_1_0("SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0"),
    
    VIOLATES_NIST_800_53("SIGNAL_TYPE_VIOLATES_NIST_800_53"),
    
    VIOLATES_ISO_27001("SIGNAL_TYPE_VIOLATES_ISO_27001"),
    
    VIOLATES_PCI_DSS_V3_2_1("SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1"),
    
    LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING("SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING"),
    
    QUERY_DURATIONS_NOT_LOGGED("SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED"),
    
    VERBOSE_ERROR_LOGGING("SIGNAL_TYPE_VERBOSE_ERROR_LOGGING"),
    
    QUERY_LOCK_WAITS_NOT_LOGGED("SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED"),
    
    LOGGING_MOST_ERRORS("SIGNAL_TYPE_LOGGING_MOST_ERRORS"),
    
    LOGGING_ONLY_CRITICAL_ERRORS("SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS"),
    
    MINIMAL_ERROR_LOGGING("SIGNAL_TYPE_MINIMAL_ERROR_LOGGING"),
    
    QUERY_STATISTICS_LOGGED("SIGNAL_TYPE_QUERY_STATISTICS_LOGGED"),
    
    EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME"),
    
    EXCESSIVE_LOGGING_OF_PARSER_STATISTICS("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS"),
    
    EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS("SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS"),
    
    NOT_LOGGING_ONLY_DDL_STATEMENTS("SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS"),
    
    LOGGING_QUERY_STATISTICS("SIGNAL_TYPE_LOGGING_QUERY_STATISTICS"),
    
    NOT_LOGGING_TEMPORARY_FILES("SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES"),
    
    CONNECTION_MAX_NOT_CONFIGURED("SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED"),
    
    USER_OPTIONS_CONFIGURED("SIGNAL_TYPE_USER_OPTIONS_CONFIGURED"),
    
    EXPOSED_TO_PUBLIC_ACCESS("SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS"),
    
    UNENCRYPTED_CONNECTIONS("SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS"),
    
    NO_ROOT_PASSWORD("SIGNAL_TYPE_NO_ROOT_PASSWORD"),
    
    WEAK_ROOT_PASSWORD("SIGNAL_TYPE_WEAK_ROOT_PASSWORD"),
    
    ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED("SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED"),
    
    SERVER_AUTHENTICATION_NOT_REQUIRED("SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED"),
    
    EXPOSED_BY_OWNERSHIP_CHAINING("SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING"),
    
    EXPOSED_TO_EXTERNAL_SCRIPTS("SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS"),
    
    EXPOSED_TO_LOCAL_DATA_LOADS("SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS"),
    
    CONNECTION_ATTEMPTS_NOT_LOGGED("SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED"),
    
    DISCONNECTIONS_NOT_LOGGED("SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED"),
    
    LOGGING_EXCESSIVE_STATEMENT_INFO("SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO"),
    
    EXPOSED_TO_REMOTE_ACCESS("SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS"),
    
    DATABASE_NAMES_EXPOSED("SIGNAL_TYPE_DATABASE_NAMES_EXPOSED"),
    
    SENSITIVE_TRACE_INFO_NOT_MASKED("SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED"),
    
    PUBLIC_IP_ENABLED("SIGNAL_TYPE_PUBLIC_IP_ENABLED"),
    
    IDLE("SIGNAL_TYPE_IDLE"),
    
    OVERPROVISIONED("SIGNAL_TYPE_OVERPROVISIONED"),
    
    HIGH_NUMBER_OF_OPEN_TABLES("SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES"),
    
    HIGH_NUMBER_OF_TABLES("SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES"),
    
    HIGH_TRANSACTION_ID_UTILIZATION("SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION"),
    
    UNDERPROVISIONED("SIGNAL_TYPE_UNDERPROVISIONED"),
    
    OUT_OF_DISK("SIGNAL_TYPE_OUT_OF_DISK"),
    
    SERVER_CERTIFICATE_NEAR_EXPIRY("SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY"),
    
    DATABASE_AUDITING_DISABLED("SIGNAL_TYPE_DATABASE_AUDITING_DISABLED"),
    
    RESTRICT_AUTHORIZED_NETWORKS("SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS"),
    
    VIOLATE_POLICY_RESTRICT_PUBLIC_IP("SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP");

    private String value;

    SignalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalTypeEnum fromValue(String value) {
      for (SignalTypeEnum b : SignalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNAL_TYPE = "signalType";
  @SerializedName(SERIALIZED_NAME_SIGNAL_TYPE)
  private SignalTypeEnum signalType;

  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData() {
  }

  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData additionalMetadata(Map<String, Object> additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
    return this;
  }

  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData putAdditionalMetadataItem(String key, Object additionalMetadataItem) {
    if (this.additionalMetadata == null) {
      this.additionalMetadata = new HashMap<>();
    }
    this.additionalMetadata.put(key, additionalMetadataItem);
    return this;
  }

  /**
   * Optional. Any other additional metadata specific to recommendation
   * @return additionalMetadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAdditionalMetadata() {
    return additionalMetadata;
  }

  public void setAdditionalMetadata(Map<String, Object> additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData lastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
    return this;
  }

  /**
   * Required. last time recommendationw as refreshed
   * @return lastRefreshTime
   */
  @javax.annotation.Nullable
  public String getLastRefreshTime() {
    return lastRefreshTime;
  }

  public void setLastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommendationState(RecommendationStateEnum recommendationState) {
    this.recommendationState = recommendationState;
    return this;
  }

  /**
   * Required. Recommendation state
   * @return recommendationState
   */
  @javax.annotation.Nullable
  public RecommendationStateEnum getRecommendationState() {
    return recommendationState;
  }

  public void setRecommendationState(RecommendationStateEnum recommendationState) {
    this.recommendationState = recommendationState;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommender(String recommender) {
    this.recommender = recommender;
    return this;
  }

  /**
   * Required. Name of recommendation. Examples: organizations/1234/locations/us-central1/recommenders/google.cloudsql.instance.PerformanceRecommender/recommendations/9876
   * @return recommender
   */
  @javax.annotation.Nullable
  public String getRecommender() {
    return recommender;
  }

  public void setRecommender(String recommender) {
    this.recommender = recommender;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommenderId(String recommenderId) {
    this.recommenderId = recommenderId;
    return this;
  }

  /**
   * Required. ID of recommender. Examples: \&quot;google.cloudsql.instance.PerformanceRecommender\&quot;
   * @return recommenderId
   */
  @javax.annotation.Nullable
  public String getRecommenderId() {
    return recommenderId;
  }

  public void setRecommenderId(String recommenderId) {
    this.recommenderId = recommenderId;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData recommenderSubtype(String recommenderSubtype) {
    this.recommenderSubtype = recommenderSubtype;
    return this;
  }

  /**
   * Required. Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to &#x60;content&#x60; or &#x60;primary_impact.category&#x60; are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender &#x3D; \&quot;google.cloudsql.instance.PerformanceRecommender\&quot;, recommender_subtype can be \&quot;MYSQL_HIGH_NUMBER_OF_OPEN_TABLES_BEST_PRACTICE\&quot;/\&quot;POSTGRES_HIGH_TRANSACTION_ID_UTILIZATION_BEST_PRACTICE\&quot;
   * @return recommenderSubtype
   */
  @javax.annotation.Nullable
  public String getRecommenderSubtype() {
    return recommenderSubtype;
  }

  public void setRecommenderSubtype(String recommenderSubtype) {
    this.recommenderSubtype = recommenderSubtype;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData signalType(SignalTypeEnum signalType) {
    this.signalType = signalType;
    return this;
  }

  /**
   * Required. Type of signal, for example, &#x60;SIGNAL_TYPE_IDLE&#x60;, &#x60;SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES&#x60;, etc.
   * @return signalType
   */
  @javax.annotation.Nullable
  public SignalTypeEnum getSignalType() {
    return signalType;
  }

  public void setSignalType(SignalTypeEnum signalType) {
    this.signalType = signalType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData = (StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData) o;
    return Objects.equals(this.additionalMetadata, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.additionalMetadata) &&
        Objects.equals(this.lastRefreshTime, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.lastRefreshTime) &&
        Objects.equals(this.recommendationState, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.recommendationState) &&
        Objects.equals(this.recommender, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.recommender) &&
        Objects.equals(this.recommenderId, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.recommenderId) &&
        Objects.equals(this.recommenderSubtype, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.recommenderSubtype) &&
        Objects.equals(this.resourceName, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.resourceName) &&
        Objects.equals(this.signalType, storageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.signalType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMetadata, lastRefreshTime, recommendationState, recommender, recommenderId, recommenderSubtype, resourceName, signalType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData {\n");
    sb.append("    additionalMetadata: ").append(toIndentedString(additionalMetadata)).append("\n");
    sb.append("    lastRefreshTime: ").append(toIndentedString(lastRefreshTime)).append("\n");
    sb.append("    recommendationState: ").append(toIndentedString(recommendationState)).append("\n");
    sb.append("    recommender: ").append(toIndentedString(recommender)).append("\n");
    sb.append("    recommenderId: ").append(toIndentedString(recommenderId)).append("\n");
    sb.append("    recommenderSubtype: ").append(toIndentedString(recommenderSubtype)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalMetadata");
    openapiFields.add("lastRefreshTime");
    openapiFields.add("recommendationState");
    openapiFields.add("recommender");
    openapiFields.add("recommenderId");
    openapiFields.add("recommenderSubtype");
    openapiFields.add("resourceName");
    openapiFields.add("signalType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastRefreshTime") != null && !jsonObj.get("lastRefreshTime").isJsonNull()) && !jsonObj.get("lastRefreshTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRefreshTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRefreshTime").toString()));
      }
      if ((jsonObj.get("recommendationState") != null && !jsonObj.get("recommendationState").isJsonNull()) && !jsonObj.get("recommendationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationState").toString()));
      }
      // validate the optional field `recommendationState`
      if (jsonObj.get("recommendationState") != null && !jsonObj.get("recommendationState").isJsonNull()) {
        RecommendationStateEnum.validateJsonElement(jsonObj.get("recommendationState"));
      }
      if ((jsonObj.get("recommender") != null && !jsonObj.get("recommender").isJsonNull()) && !jsonObj.get("recommender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommender").toString()));
      }
      if ((jsonObj.get("recommenderId") != null && !jsonObj.get("recommenderId").isJsonNull()) && !jsonObj.get("recommenderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommenderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommenderId").toString()));
      }
      if ((jsonObj.get("recommenderSubtype") != null && !jsonObj.get("recommenderSubtype").isJsonNull()) && !jsonObj.get("recommenderSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommenderSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommenderSubtype").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) && !jsonObj.get("signalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalType").toString()));
      }
      // validate the optional field `signalType`
      if (jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) {
        SignalTypeEnum.validateJsonElement(jsonObj.get("signalType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData
   */
  public static StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

