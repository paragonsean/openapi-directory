/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for availability of database instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration {
  /**
   * Availability type. Potential values: * &#x60;ZONAL&#x60;: The instance serves data from only one zone. Outages in that zone affect data accessibility. * &#x60;REGIONAL&#x60;: The instance can serve data from more than one zone in a region (it is highly available).
   */
  @JsonAdapter(AvailabilityTypeEnum.Adapter.class)
  public enum AvailabilityTypeEnum {
    AVAILABILITY_TYPE_UNSPECIFIED("AVAILABILITY_TYPE_UNSPECIFIED"),
    
    ZONAL("ZONAL"),
    
    REGIONAL("REGIONAL"),
    
    MULTI_REGIONAL("MULTI_REGIONAL"),
    
    AVAILABILITY_TYPE_OTHER("AVAILABILITY_TYPE_OTHER");

    private String value;

    AvailabilityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityTypeEnum fromValue(String value) {
      for (AvailabilityTypeEnum b : AvailabilityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_TYPE = "availabilityType";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_TYPE)
  private AvailabilityTypeEnum availabilityType;

  public static final String SERIALIZED_NAME_EXTERNAL_REPLICA_CONFIGURED = "externalReplicaConfigured";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REPLICA_CONFIGURED)
  private Boolean externalReplicaConfigured;

  public static final String SERIALIZED_NAME_PROMOTABLE_REPLICA_CONFIGURED = "promotableReplicaConfigured";
  @SerializedName(SERIALIZED_NAME_PROMOTABLE_REPLICA_CONFIGURED)
  private Boolean promotableReplicaConfigured;

  public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration() {
  }

  public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration availabilityType(AvailabilityTypeEnum availabilityType) {
    this.availabilityType = availabilityType;
    return this;
  }

  /**
   * Availability type. Potential values: * &#x60;ZONAL&#x60;: The instance serves data from only one zone. Outages in that zone affect data accessibility. * &#x60;REGIONAL&#x60;: The instance can serve data from more than one zone in a region (it is highly available).
   * @return availabilityType
   */
  @javax.annotation.Nullable
  public AvailabilityTypeEnum getAvailabilityType() {
    return availabilityType;
  }

  public void setAvailabilityType(AvailabilityTypeEnum availabilityType) {
    this.availabilityType = availabilityType;
  }


  public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration externalReplicaConfigured(Boolean externalReplicaConfigured) {
    this.externalReplicaConfigured = externalReplicaConfigured;
    return this;
  }

  /**
   * Get externalReplicaConfigured
   * @return externalReplicaConfigured
   */
  @javax.annotation.Nullable
  public Boolean getExternalReplicaConfigured() {
    return externalReplicaConfigured;
  }

  public void setExternalReplicaConfigured(Boolean externalReplicaConfigured) {
    this.externalReplicaConfigured = externalReplicaConfigured;
  }


  public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration promotableReplicaConfigured(Boolean promotableReplicaConfigured) {
    this.promotableReplicaConfigured = promotableReplicaConfigured;
    return this;
  }

  /**
   * Get promotableReplicaConfigured
   * @return promotableReplicaConfigured
   */
  @javax.annotation.Nullable
  public Boolean getPromotableReplicaConfigured() {
    return promotableReplicaConfigured;
  }

  public void setPromotableReplicaConfigured(Boolean promotableReplicaConfigured) {
    this.promotableReplicaConfigured = promotableReplicaConfigured;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration storageDatabasecenterPartnerapiV1mainAvailabilityConfiguration = (StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration) o;
    return Objects.equals(this.availabilityType, storageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.availabilityType) &&
        Objects.equals(this.externalReplicaConfigured, storageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.externalReplicaConfigured) &&
        Objects.equals(this.promotableReplicaConfigured, storageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.promotableReplicaConfigured);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityType, externalReplicaConfigured, promotableReplicaConfigured);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration {\n");
    sb.append("    availabilityType: ").append(toIndentedString(availabilityType)).append("\n");
    sb.append("    externalReplicaConfigured: ").append(toIndentedString(externalReplicaConfigured)).append("\n");
    sb.append("    promotableReplicaConfigured: ").append(toIndentedString(promotableReplicaConfigured)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityType");
    openapiFields.add("externalReplicaConfigured");
    openapiFields.add("promotableReplicaConfigured");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityType") != null && !jsonObj.get("availabilityType").isJsonNull()) && !jsonObj.get("availabilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityType").toString()));
      }
      // validate the optional field `availabilityType`
      if (jsonObj.get("availabilityType") != null && !jsonObj.get("availabilityType").isJsonNull()) {
        AvailabilityTypeEnum.validateJsonElement(jsonObj.get("availabilityType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
   */
  public static StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

