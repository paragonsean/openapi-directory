/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainBackupConfiguration;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainBackupRun;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseResourceId;
import org.openapitools.client.model.StorageDatabasecenterProtoCommonProduct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for individual databases created in an instance. i.e. spanner instance can have multiple databases with unique configuration settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainDatabaseMetadata {
  public static final String SERIALIZED_NAME_BACKUP_CONFIGURATION = "backupConfiguration";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONFIGURATION)
  private StorageDatabasecenterPartnerapiV1mainBackupConfiguration backupConfiguration;

  public static final String SERIALIZED_NAME_BACKUP_RUN = "backupRun";
  @SerializedName(SERIALIZED_NAME_BACKUP_RUN)
  private StorageDatabasecenterPartnerapiV1mainBackupRun backupRun;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private StorageDatabasecenterProtoCommonProduct product;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata() {
  }

  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata backupConfiguration(StorageDatabasecenterPartnerapiV1mainBackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
    return this;
  }

  /**
   * Get backupConfiguration
   * @return backupConfiguration
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainBackupConfiguration getBackupConfiguration() {
    return backupConfiguration;
  }

  public void setBackupConfiguration(StorageDatabasecenterPartnerapiV1mainBackupConfiguration backupConfiguration) {
    this.backupConfiguration = backupConfiguration;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata backupRun(StorageDatabasecenterPartnerapiV1mainBackupRun backupRun) {
    this.backupRun = backupRun;
    return this;
  }

  /**
   * Get backupRun
   * @return backupRun
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainBackupRun getBackupRun() {
    return backupRun;
  }

  public void setBackupRun(StorageDatabasecenterPartnerapiV1mainBackupRun backupRun) {
    this.backupRun = backupRun;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata product(StorageDatabasecenterProtoCommonProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterProtoCommonProduct getProduct() {
    return product;
  }

  public void setProduct(StorageDatabasecenterProtoCommonProduct product) {
    this.product = product;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata resourceId(StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public StorageDatabasecenterPartnerapiV1mainDatabaseResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(StorageDatabasecenterPartnerapiV1mainDatabaseResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Required. Database name. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainDatabaseMetadata storageDatabasecenterPartnerapiV1mainDatabaseMetadata = (StorageDatabasecenterPartnerapiV1mainDatabaseMetadata) o;
    return Objects.equals(this.backupConfiguration, storageDatabasecenterPartnerapiV1mainDatabaseMetadata.backupConfiguration) &&
        Objects.equals(this.backupRun, storageDatabasecenterPartnerapiV1mainDatabaseMetadata.backupRun) &&
        Objects.equals(this.product, storageDatabasecenterPartnerapiV1mainDatabaseMetadata.product) &&
        Objects.equals(this.resourceId, storageDatabasecenterPartnerapiV1mainDatabaseMetadata.resourceId) &&
        Objects.equals(this.resourceName, storageDatabasecenterPartnerapiV1mainDatabaseMetadata.resourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupConfiguration, backupRun, product, resourceId, resourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainDatabaseMetadata {\n");
    sb.append("    backupConfiguration: ").append(toIndentedString(backupConfiguration)).append("\n");
    sb.append("    backupRun: ").append(toIndentedString(backupRun)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupConfiguration");
    openapiFields.add("backupRun");
    openapiFields.add("product");
    openapiFields.add("resourceId");
    openapiFields.add("resourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainDatabaseMetadata is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainDatabaseMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backupConfiguration`
      if (jsonObj.get("backupConfiguration") != null && !jsonObj.get("backupConfiguration").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainBackupConfiguration.validateJsonElement(jsonObj.get("backupConfiguration"));
      }
      // validate the optional field `backupRun`
      if (jsonObj.get("backupRun") != null && !jsonObj.get("backupRun").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainBackupRun.validateJsonElement(jsonObj.get("backupRun"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        StorageDatabasecenterProtoCommonProduct.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.validateJsonElement(jsonObj.get("resourceId"));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainDatabaseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainDatabaseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainDatabaseMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainDatabaseMetadata
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainDatabaseMetadata
   */
  public static StorageDatabasecenterPartnerapiV1mainDatabaseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainDatabaseMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

