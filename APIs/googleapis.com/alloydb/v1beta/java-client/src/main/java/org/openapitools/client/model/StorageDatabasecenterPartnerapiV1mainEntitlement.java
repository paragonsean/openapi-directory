/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proto representing the access that a user has to a specific feature/service. NextId: 3.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainEntitlement {
  /**
   * The current state of user&#39;s accessibility to a feature/benefit.
   */
  @JsonAdapter(EntitlementStateEnum.Adapter.class)
  public enum EntitlementStateEnum {
    ENTITLEMENT_STATE_UNSPECIFIED("ENTITLEMENT_STATE_UNSPECIFIED"),
    
    ENTITLED("ENTITLED"),
    
    REVOKED("REVOKED");

    private String value;

    EntitlementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntitlementStateEnum fromValue(String value) {
      for (EntitlementStateEnum b : EntitlementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntitlementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntitlementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntitlementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntitlementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntitlementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITLEMENT_STATE = "entitlementState";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_STATE)
  private EntitlementStateEnum entitlementState;

  /**
   * An enum that represents the type of this entitlement.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ENTITLEMENT_TYPE_UNSPECIFIED("ENTITLEMENT_TYPE_UNSPECIFIED"),
    
    DUET_AI("DUET_AI");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public StorageDatabasecenterPartnerapiV1mainEntitlement() {
  }

  public StorageDatabasecenterPartnerapiV1mainEntitlement entitlementState(EntitlementStateEnum entitlementState) {
    this.entitlementState = entitlementState;
    return this;
  }

  /**
   * The current state of user&#39;s accessibility to a feature/benefit.
   * @return entitlementState
   */
  @javax.annotation.Nullable
  public EntitlementStateEnum getEntitlementState() {
    return entitlementState;
  }

  public void setEntitlementState(EntitlementStateEnum entitlementState) {
    this.entitlementState = entitlementState;
  }


  public StorageDatabasecenterPartnerapiV1mainEntitlement type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * An enum that represents the type of this entitlement.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainEntitlement storageDatabasecenterPartnerapiV1mainEntitlement = (StorageDatabasecenterPartnerapiV1mainEntitlement) o;
    return Objects.equals(this.entitlementState, storageDatabasecenterPartnerapiV1mainEntitlement.entitlementState) &&
        Objects.equals(this.type, storageDatabasecenterPartnerapiV1mainEntitlement.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entitlementState, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainEntitlement {\n");
    sb.append("    entitlementState: ").append(toIndentedString(entitlementState)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entitlementState");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainEntitlement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainEntitlement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainEntitlement is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainEntitlement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainEntitlement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainEntitlement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entitlementState") != null && !jsonObj.get("entitlementState").isJsonNull()) && !jsonObj.get("entitlementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitlementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitlementState").toString()));
      }
      // validate the optional field `entitlementState`
      if (jsonObj.get("entitlementState") != null && !jsonObj.get("entitlementState").isJsonNull()) {
        EntitlementStateEnum.validateJsonElement(jsonObj.get("entitlementState"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainEntitlement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainEntitlement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainEntitlement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainEntitlement.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainEntitlement>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainEntitlement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainEntitlement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainEntitlement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainEntitlement
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainEntitlement
   */
  public static StorageDatabasecenterPartnerapiV1mainEntitlement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainEntitlement.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainEntitlement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

