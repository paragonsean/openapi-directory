/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleTypeTimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the &#x60;start_times&#x60; field to have one element \&quot;22:00\&quot; and the &#x60;days_of_week&#x60; field to have all seven days of the week.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WeeklySchedule {
  /**
   * Gets or Sets daysOfWeek
   */
  @JsonAdapter(DaysOfWeekEnum.Adapter.class)
  public enum DaysOfWeekEnum {
    DAY_OF_WEEK_UNSPECIFIED("DAY_OF_WEEK_UNSPECIFIED"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DaysOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DaysOfWeekEnum fromValue(String value) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DaysOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DaysOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DaysOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DaysOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DaysOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "daysOfWeek";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private List<DaysOfWeekEnum> daysOfWeek = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIMES = "startTimes";
  @SerializedName(SERIALIZED_NAME_START_TIMES)
  private List<GoogleTypeTimeOfDay> startTimes = new ArrayList<>();

  public WeeklySchedule() {
  }

  public WeeklySchedule daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public WeeklySchedule addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

  /**
   * The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
   * @return daysOfWeek
   */
  @javax.annotation.Nullable
  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }

  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }


  public WeeklySchedule startTimes(List<GoogleTypeTimeOfDay> startTimes) {
    this.startTimes = startTimes;
    return this;
  }

  public WeeklySchedule addStartTimesItem(GoogleTypeTimeOfDay startTimesItem) {
    if (this.startTimes == null) {
      this.startTimes = new ArrayList<>();
    }
    this.startTimes.add(startTimesItem);
    return this;
  }

  /**
   * The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
   * @return startTimes
   */
  @javax.annotation.Nullable
  public List<GoogleTypeTimeOfDay> getStartTimes() {
    return startTimes;
  }

  public void setStartTimes(List<GoogleTypeTimeOfDay> startTimes) {
    this.startTimes = startTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeeklySchedule weeklySchedule = (WeeklySchedule) o;
    return Objects.equals(this.daysOfWeek, weeklySchedule.daysOfWeek) &&
        Objects.equals(this.startTimes, weeklySchedule.startTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysOfWeek, startTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeeklySchedule {\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    startTimes: ").append(toIndentedString(startTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysOfWeek");
    openapiFields.add("startTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WeeklySchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WeeklySchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WeeklySchedule is not found in the empty JSON string", WeeklySchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WeeklySchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WeeklySchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("daysOfWeek") != null && !jsonObj.get("daysOfWeek").isJsonNull() && !jsonObj.get("daysOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daysOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("daysOfWeek").toString()));
      }
      if (jsonObj.get("startTimes") != null && !jsonObj.get("startTimes").isJsonNull()) {
        JsonArray jsonArraystartTimes = jsonObj.getAsJsonArray("startTimes");
        if (jsonArraystartTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("startTimes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `startTimes` to be an array in the JSON string but got `%s`", jsonObj.get("startTimes").toString()));
          }

          // validate the optional field `startTimes` (array)
          for (int i = 0; i < jsonArraystartTimes.size(); i++) {
            GoogleTypeTimeOfDay.validateJsonElement(jsonArraystartTimes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WeeklySchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WeeklySchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WeeklySchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WeeklySchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<WeeklySchedule>() {
           @Override
           public void write(JsonWriter out, WeeklySchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WeeklySchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WeeklySchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WeeklySchedule
   * @throws IOException if the JSON string is invalid with respect to WeeklySchedule
   */
  public static WeeklySchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WeeklySchedule.class);
  }

  /**
   * Convert an instance of WeeklySchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

