/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackupSource;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.ContinuousBackupSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message for restoring a Cluster from a backup or another cluster at a given point in time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestoreClusterRequest {
  public static final String SERIALIZED_NAME_BACKUP_SOURCE = "backupSource";
  @SerializedName(SERIALIZED_NAME_BACKUP_SOURCE)
  private BackupSource backupSource;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private Cluster cluster;

  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_CONTINUOUS_BACKUP_SOURCE = "continuousBackupSource";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_BACKUP_SOURCE)
  private ContinuousBackupSource continuousBackupSource;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public RestoreClusterRequest() {
  }

  public RestoreClusterRequest backupSource(BackupSource backupSource) {
    this.backupSource = backupSource;
    return this;
  }

  /**
   * Get backupSource
   * @return backupSource
   */
  @javax.annotation.Nullable
  public BackupSource getBackupSource() {
    return backupSource;
  }

  public void setBackupSource(BackupSource backupSource) {
    this.backupSource = backupSource;
  }


  public RestoreClusterRequest cluster(Cluster cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public Cluster getCluster() {
    return cluster;
  }

  public void setCluster(Cluster cluster) {
    this.cluster = cluster;
  }


  public RestoreClusterRequest clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Required. ID of the requesting object.
   * @return clusterId
   */
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }

  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public RestoreClusterRequest continuousBackupSource(ContinuousBackupSource continuousBackupSource) {
    this.continuousBackupSource = continuousBackupSource;
    return this;
  }

  /**
   * Get continuousBackupSource
   * @return continuousBackupSource
   */
  @javax.annotation.Nullable
  public ContinuousBackupSource getContinuousBackupSource() {
    return continuousBackupSource;
  }

  public void setContinuousBackupSource(ContinuousBackupSource continuousBackupSource) {
    this.continuousBackupSource = continuousBackupSource;
  }


  public RestoreClusterRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public RestoreClusterRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreClusterRequest restoreClusterRequest = (RestoreClusterRequest) o;
    return Objects.equals(this.backupSource, restoreClusterRequest.backupSource) &&
        Objects.equals(this.cluster, restoreClusterRequest.cluster) &&
        Objects.equals(this.clusterId, restoreClusterRequest.clusterId) &&
        Objects.equals(this.continuousBackupSource, restoreClusterRequest.continuousBackupSource) &&
        Objects.equals(this.requestId, restoreClusterRequest.requestId) &&
        Objects.equals(this.validateOnly, restoreClusterRequest.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupSource, cluster, clusterId, continuousBackupSource, requestId, validateOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreClusterRequest {\n");
    sb.append("    backupSource: ").append(toIndentedString(backupSource)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    continuousBackupSource: ").append(toIndentedString(continuousBackupSource)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupSource");
    openapiFields.add("cluster");
    openapiFields.add("clusterId");
    openapiFields.add("continuousBackupSource");
    openapiFields.add("requestId");
    openapiFields.add("validateOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreClusterRequest is not found in the empty JSON string", RestoreClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backupSource`
      if (jsonObj.get("backupSource") != null && !jsonObj.get("backupSource").isJsonNull()) {
        BackupSource.validateJsonElement(jsonObj.get("backupSource"));
      }
      // validate the optional field `cluster`
      if (jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) {
        Cluster.validateJsonElement(jsonObj.get("cluster"));
      }
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      // validate the optional field `continuousBackupSource`
      if (jsonObj.get("continuousBackupSource") != null && !jsonObj.get("continuousBackupSource").isJsonNull()) {
        ContinuousBackupSource.validateJsonElement(jsonObj.get("continuousBackupSource"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreClusterRequest>() {
           @Override
           public void write(JsonWriter out, RestoreClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreClusterRequest
   * @throws IOException if the JSON string is invalid with respect to RestoreClusterRequest
   */
  public static RestoreClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreClusterRequest.class);
  }

  /**
   * Convert an instance of RestoreClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

