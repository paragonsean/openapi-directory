/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for setting up a PSC interface. This information needs to be provided by the customer. PSC interfaces will be created and added to VMs via SLM (adding a network interface will require recreating the VM). For HA instances this will be done via LDTM.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:06.887241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscInterfaceConfig {
  public static final String SERIALIZED_NAME_CONSUMER_ENDPOINT_IPS = "consumerEndpointIps";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ENDPOINT_IPS)
  private List<String> consumerEndpointIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_ATTACHMENT = "networkAttachment";
  @SerializedName(SERIALIZED_NAME_NETWORK_ATTACHMENT)
  private String networkAttachment;

  public PscInterfaceConfig() {
  }

  public PscInterfaceConfig consumerEndpointIps(List<String> consumerEndpointIps) {
    this.consumerEndpointIps = consumerEndpointIps;
    return this;
  }

  public PscInterfaceConfig addConsumerEndpointIpsItem(String consumerEndpointIpsItem) {
    if (this.consumerEndpointIps == null) {
      this.consumerEndpointIps = new ArrayList<>();
    }
    this.consumerEndpointIps.add(consumerEndpointIpsItem);
    return this;
  }

  /**
   * A list of endpoints in the consumer VPC the interface might initiate outbound connections to. This list has to be provided when the PSC interface is created.
   * @return consumerEndpointIps
   */
  @javax.annotation.Nullable
  public List<String> getConsumerEndpointIps() {
    return consumerEndpointIps;
  }

  public void setConsumerEndpointIps(List<String> consumerEndpointIps) {
    this.consumerEndpointIps = consumerEndpointIps;
  }


  public PscInterfaceConfig networkAttachment(String networkAttachment) {
    this.networkAttachment = networkAttachment;
    return this;
  }

  /**
   * The NetworkAttachment resource created in the consumer VPC to which the PSC interface will be linked, in the form of: &#x60;projects/${CONSUMER_PROJECT}/regions/${REGION}/networkAttachments/${NETWORK_ATTACHMENT_NAME}&#x60;. NetworkAttachment has to be provided when the PSC interface is created.
   * @return networkAttachment
   */
  @javax.annotation.Nullable
  public String getNetworkAttachment() {
    return networkAttachment;
  }

  public void setNetworkAttachment(String networkAttachment) {
    this.networkAttachment = networkAttachment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscInterfaceConfig pscInterfaceConfig = (PscInterfaceConfig) o;
    return Objects.equals(this.consumerEndpointIps, pscInterfaceConfig.consumerEndpointIps) &&
        Objects.equals(this.networkAttachment, pscInterfaceConfig.networkAttachment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerEndpointIps, networkAttachment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscInterfaceConfig {\n");
    sb.append("    consumerEndpointIps: ").append(toIndentedString(consumerEndpointIps)).append("\n");
    sb.append("    networkAttachment: ").append(toIndentedString(networkAttachment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerEndpointIps");
    openapiFields.add("networkAttachment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscInterfaceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscInterfaceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscInterfaceConfig is not found in the empty JSON string", PscInterfaceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscInterfaceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscInterfaceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("consumerEndpointIps") != null && !jsonObj.get("consumerEndpointIps").isJsonNull() && !jsonObj.get("consumerEndpointIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerEndpointIps` to be an array in the JSON string but got `%s`", jsonObj.get("consumerEndpointIps").toString()));
      }
      if ((jsonObj.get("networkAttachment") != null && !jsonObj.get("networkAttachment").isJsonNull()) && !jsonObj.get("networkAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAttachment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscInterfaceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscInterfaceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscInterfaceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscInterfaceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PscInterfaceConfig>() {
           @Override
           public void write(JsonWriter out, PscInterfaceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscInterfaceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscInterfaceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscInterfaceConfig
   * @throws IOException if the JSON string is invalid with respect to PscInterfaceConfig
   */
  public static PscInterfaceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscInterfaceConfig.class);
  }

  /**
   * Convert an instance of PscInterfaceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

