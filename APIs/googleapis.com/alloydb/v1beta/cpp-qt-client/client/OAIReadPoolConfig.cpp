/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadPoolConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadPoolConfig::OAIReadPoolConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadPoolConfig::OAIReadPoolConfig() {
    this->initializeModel();
}

OAIReadPoolConfig::~OAIReadPoolConfig() {}

void OAIReadPoolConfig::initializeModel() {

    m_node_count_isSet = false;
    m_node_count_isValid = false;
}

void OAIReadPoolConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadPoolConfig::fromJsonObject(QJsonObject json) {

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;
}

QString OAIReadPoolConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadPoolConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    return obj;
}

qint32 OAIReadPoolConfig::getNodeCount() const {
    return m_node_count;
}
void OAIReadPoolConfig::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIReadPoolConfig::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIReadPoolConfig::is_node_count_Valid() const{
    return m_node_count_isValid;
}

bool OAIReadPoolConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadPoolConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
