/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionInfo::OAIEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionInfo::OAIEncryptionInfo() {
    this->initializeModel();
}

OAIEncryptionInfo::~OAIEncryptionInfo() {}

void OAIEncryptionInfo::initializeModel() {

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;

    m_kms_key_versions_isSet = false;
    m_kms_key_versions_isValid = false;
}

void OAIEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("encryptionType")]);
    m_encryption_type_isSet = !json[QString("encryptionType")].isNull() && m_encryption_type_isValid;

    m_kms_key_versions_isValid = ::OpenAPI::fromJsonValue(m_kms_key_versions, json[QString("kmsKeyVersions")]);
    m_kms_key_versions_isSet = !json[QString("kmsKeyVersions")].isNull() && m_kms_key_versions_isValid;
}

QString OAIEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_type_isSet) {
        obj.insert(QString("encryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    if (m_kms_key_versions.size() > 0) {
        obj.insert(QString("kmsKeyVersions"), ::OpenAPI::toJsonValue(m_kms_key_versions));
    }
    return obj;
}

QString OAIEncryptionInfo::getEncryptionType() const {
    return m_encryption_type;
}
void OAIEncryptionInfo::setEncryptionType(const QString &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAIEncryptionInfo::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

QList<QString> OAIEncryptionInfo::getKmsKeyVersions() const {
    return m_kms_key_versions;
}
void OAIEncryptionInfo::setKmsKeyVersions(const QList<QString> &kms_key_versions) {
    m_kms_key_versions = kms_key_versions;
    m_kms_key_versions_isSet = true;
}

bool OAIEncryptionInfo::is_kms_key_versions_Set() const{
    return m_kms_key_versions_isSet;
}

bool OAIEncryptionInfo::is_kms_key_versions_Valid() const{
    return m_kms_key_versions_isValid;
}

bool OAIEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
