/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainOperationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainOperationError::OAIStorageDatabasecenterPartnerapiV1mainOperationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainOperationError::OAIStorageDatabasecenterPartnerapiV1mainOperationError() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainOperationError::~OAIStorageDatabasecenterPartnerapiV1mainOperationError() {}

void OAIStorageDatabasecenterPartnerapiV1mainOperationError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainOperationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainOperationError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainOperationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainOperationError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIStorageDatabasecenterPartnerapiV1mainOperationError::getCode() const {
    return m_code;
}
void OAIStorageDatabasecenterPartnerapiV1mainOperationError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainOperationError::getErrorType() const {
    return m_error_type;
}
void OAIStorageDatabasecenterPartnerapiV1mainOperationError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainOperationError::getMessage() const {
    return m_message;
}
void OAIStorageDatabasecenterPartnerapiV1mainOperationError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainOperationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
