/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zone_id_isSet = false;
    m_zone_id_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zone_id_isValid = ::OpenAPI::fromJsonValue(m_zone_id, json[QString("zoneId")]);
    m_zone_id_isSet = !json[QString("zoneId")].isNull() && m_zone_id_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zone_id_isSet) {
        obj.insert(QString("zoneId"), ::OpenAPI::toJsonValue(m_zone_id));
    }
    return obj;
}

QString OAINode::getId() const {
    return m_id;
}
void OAINode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINode::is_id_Set() const{
    return m_id_isSet;
}

bool OAINode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINode::getIp() const {
    return m_ip;
}
void OAINode::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAINode::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAINode::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAINode::getState() const {
    return m_state;
}
void OAINode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINode::is_state_Set() const{
    return m_state_isSet;
}

bool OAINode::is_state_Valid() const{
    return m_state_isValid;
}

QString OAINode::getZoneId() const {
    return m_zone_id;
}
void OAINode::setZoneId(const QString &zone_id) {
    m_zone_id = zone_id;
    m_zone_id_isSet = true;
}

bool OAINode::is_zone_id_Set() const{
    return m_zone_id_isSet;
}

bool OAINode::is_zone_id_Valid() const{
    return m_zone_id_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
