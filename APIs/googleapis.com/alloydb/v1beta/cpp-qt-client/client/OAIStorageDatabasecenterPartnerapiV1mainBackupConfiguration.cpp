/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::~OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration() {}

void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::initializeModel() {

    m_automated_backup_enabled_isSet = false;
    m_automated_backup_enabled_isValid = false;

    m_backup_retention_settings_isSet = false;
    m_backup_retention_settings_isValid = false;

    m_point_in_time_recovery_enabled_isSet = false;
    m_point_in_time_recovery_enabled_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::fromJsonObject(QJsonObject json) {

    m_automated_backup_enabled_isValid = ::OpenAPI::fromJsonValue(m_automated_backup_enabled, json[QString("automatedBackupEnabled")]);
    m_automated_backup_enabled_isSet = !json[QString("automatedBackupEnabled")].isNull() && m_automated_backup_enabled_isValid;

    m_backup_retention_settings_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_settings, json[QString("backupRetentionSettings")]);
    m_backup_retention_settings_isSet = !json[QString("backupRetentionSettings")].isNull() && m_backup_retention_settings_isValid;

    m_point_in_time_recovery_enabled_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery_enabled, json[QString("pointInTimeRecoveryEnabled")]);
    m_point_in_time_recovery_enabled_isSet = !json[QString("pointInTimeRecoveryEnabled")].isNull() && m_point_in_time_recovery_enabled_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_automated_backup_enabled_isSet) {
        obj.insert(QString("automatedBackupEnabled"), ::OpenAPI::toJsonValue(m_automated_backup_enabled));
    }
    if (m_backup_retention_settings.isSet()) {
        obj.insert(QString("backupRetentionSettings"), ::OpenAPI::toJsonValue(m_backup_retention_settings));
    }
    if (m_point_in_time_recovery_enabled_isSet) {
        obj.insert(QString("pointInTimeRecoveryEnabled"), ::OpenAPI::toJsonValue(m_point_in_time_recovery_enabled));
    }
    return obj;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::isAutomatedBackupEnabled() const {
    return m_automated_backup_enabled;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::setAutomatedBackupEnabled(const bool &automated_backup_enabled) {
    m_automated_backup_enabled = automated_backup_enabled;
    m_automated_backup_enabled_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_automated_backup_enabled_Set() const{
    return m_automated_backup_enabled_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_automated_backup_enabled_Valid() const{
    return m_automated_backup_enabled_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::getBackupRetentionSettings() const {
    return m_backup_retention_settings;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::setBackupRetentionSettings(const OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings &backup_retention_settings) {
    m_backup_retention_settings = backup_retention_settings;
    m_backup_retention_settings_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_backup_retention_settings_Set() const{
    return m_backup_retention_settings_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_backup_retention_settings_Valid() const{
    return m_backup_retention_settings_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::isPointInTimeRecoveryEnabled() const {
    return m_point_in_time_recovery_enabled;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::setPointInTimeRecoveryEnabled(const bool &point_in_time_recovery_enabled) {
    m_point_in_time_recovery_enabled = point_in_time_recovery_enabled;
    m_point_in_time_recovery_enabled_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_point_in_time_recovery_enabled_Set() const{
    return m_point_in_time_recovery_enabled_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::is_point_in_time_recovery_enabled_Valid() const{
    return m_point_in_time_recovery_enabled_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automated_backup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
