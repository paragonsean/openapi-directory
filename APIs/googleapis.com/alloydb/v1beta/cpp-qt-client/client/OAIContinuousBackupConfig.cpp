/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousBackupConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousBackupConfig::OAIContinuousBackupConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousBackupConfig::OAIContinuousBackupConfig() {
    this->initializeModel();
}

OAIContinuousBackupConfig::~OAIContinuousBackupConfig() {}

void OAIContinuousBackupConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_recovery_window_days_isSet = false;
    m_recovery_window_days_isValid = false;
}

void OAIContinuousBackupConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousBackupConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_recovery_window_days_isValid = ::OpenAPI::fromJsonValue(m_recovery_window_days, json[QString("recoveryWindowDays")]);
    m_recovery_window_days_isSet = !json[QString("recoveryWindowDays")].isNull() && m_recovery_window_days_isValid;
}

QString OAIContinuousBackupConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousBackupConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_recovery_window_days_isSet) {
        obj.insert(QString("recoveryWindowDays"), ::OpenAPI::toJsonValue(m_recovery_window_days));
    }
    return obj;
}

bool OAIContinuousBackupConfig::isEnabled() const {
    return m_enabled;
}
void OAIContinuousBackupConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIContinuousBackupConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIContinuousBackupConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIEncryptionConfig OAIContinuousBackupConfig::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIContinuousBackupConfig::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIContinuousBackupConfig::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIContinuousBackupConfig::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

qint32 OAIContinuousBackupConfig::getRecoveryWindowDays() const {
    return m_recovery_window_days;
}
void OAIContinuousBackupConfig::setRecoveryWindowDays(const qint32 &recovery_window_days) {
    m_recovery_window_days = recovery_window_days;
    m_recovery_window_days_isSet = true;
}

bool OAIContinuousBackupConfig::is_recovery_window_days_Set() const{
    return m_recovery_window_days_isSet;
}

bool OAIContinuousBackupConfig::is_recovery_window_days_Valid() const{
    return m_recovery_window_days_isValid;
}

bool OAIContinuousBackupConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousBackupConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
