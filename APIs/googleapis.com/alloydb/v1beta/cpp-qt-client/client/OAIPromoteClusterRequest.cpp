/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoteClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoteClusterRequest::OAIPromoteClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoteClusterRequest::OAIPromoteClusterRequest() {
    this->initializeModel();
}

OAIPromoteClusterRequest::~OAIPromoteClusterRequest() {}

void OAIPromoteClusterRequest::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIPromoteClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromoteClusterRequest::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIPromoteClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromoteClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIPromoteClusterRequest::getEtag() const {
    return m_etag;
}
void OAIPromoteClusterRequest::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPromoteClusterRequest::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPromoteClusterRequest::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPromoteClusterRequest::getRequestId() const {
    return m_request_id;
}
void OAIPromoteClusterRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPromoteClusterRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPromoteClusterRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIPromoteClusterRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIPromoteClusterRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIPromoteClusterRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIPromoteClusterRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIPromoteClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromoteClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
