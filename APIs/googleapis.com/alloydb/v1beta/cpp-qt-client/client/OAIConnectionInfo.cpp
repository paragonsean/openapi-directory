/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionInfo::OAIConnectionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionInfo::OAIConnectionInfo() {
    this->initializeModel();
}

OAIConnectionInfo::~OAIConnectionInfo() {}

void OAIConnectionInfo::initializeModel() {

    m_instance_uid_isSet = false;
    m_instance_uid_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pem_certificate_chain_isSet = false;
    m_pem_certificate_chain_isValid = false;

    m_psc_dns_name_isSet = false;
    m_psc_dns_name_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;
}

void OAIConnectionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionInfo::fromJsonObject(QJsonObject json) {

    m_instance_uid_isValid = ::OpenAPI::fromJsonValue(m_instance_uid, json[QString("instanceUid")]);
    m_instance_uid_isSet = !json[QString("instanceUid")].isNull() && m_instance_uid_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pem_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_pem_certificate_chain, json[QString("pemCertificateChain")]);
    m_pem_certificate_chain_isSet = !json[QString("pemCertificateChain")].isNull() && m_pem_certificate_chain_isValid;

    m_psc_dns_name_isValid = ::OpenAPI::fromJsonValue(m_psc_dns_name, json[QString("pscDnsName")]);
    m_psc_dns_name_isSet = !json[QString("pscDnsName")].isNull() && m_psc_dns_name_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;
}

QString OAIConnectionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_uid_isSet) {
        obj.insert(QString("instanceUid"), ::OpenAPI::toJsonValue(m_instance_uid));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pem_certificate_chain.size() > 0) {
        obj.insert(QString("pemCertificateChain"), ::OpenAPI::toJsonValue(m_pem_certificate_chain));
    }
    if (m_psc_dns_name_isSet) {
        obj.insert(QString("pscDnsName"), ::OpenAPI::toJsonValue(m_psc_dns_name));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    return obj;
}

QString OAIConnectionInfo::getInstanceUid() const {
    return m_instance_uid;
}
void OAIConnectionInfo::setInstanceUid(const QString &instance_uid) {
    m_instance_uid = instance_uid;
    m_instance_uid_isSet = true;
}

bool OAIConnectionInfo::is_instance_uid_Set() const{
    return m_instance_uid_isSet;
}

bool OAIConnectionInfo::is_instance_uid_Valid() const{
    return m_instance_uid_isValid;
}

QString OAIConnectionInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIConnectionInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIConnectionInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIConnectionInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIConnectionInfo::getName() const {
    return m_name;
}
void OAIConnectionInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionInfo::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConnectionInfo::getPemCertificateChain() const {
    return m_pem_certificate_chain;
}
void OAIConnectionInfo::setPemCertificateChain(const QList<QString> &pem_certificate_chain) {
    m_pem_certificate_chain = pem_certificate_chain;
    m_pem_certificate_chain_isSet = true;
}

bool OAIConnectionInfo::is_pem_certificate_chain_Set() const{
    return m_pem_certificate_chain_isSet;
}

bool OAIConnectionInfo::is_pem_certificate_chain_Valid() const{
    return m_pem_certificate_chain_isValid;
}

QString OAIConnectionInfo::getPscDnsName() const {
    return m_psc_dns_name;
}
void OAIConnectionInfo::setPscDnsName(const QString &psc_dns_name) {
    m_psc_dns_name = psc_dns_name;
    m_psc_dns_name_isSet = true;
}

bool OAIConnectionInfo::is_psc_dns_name_Set() const{
    return m_psc_dns_name_isSet;
}

bool OAIConnectionInfo::is_psc_dns_name_Valid() const{
    return m_psc_dns_name_isValid;
}

QString OAIConnectionInfo::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIConnectionInfo::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIConnectionInfo::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIConnectionInfo::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

bool OAIConnectionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_certificate_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
