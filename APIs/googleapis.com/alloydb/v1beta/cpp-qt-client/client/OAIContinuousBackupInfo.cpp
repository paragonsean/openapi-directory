/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousBackupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousBackupInfo::OAIContinuousBackupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousBackupInfo::OAIContinuousBackupInfo() {
    this->initializeModel();
}

OAIContinuousBackupInfo::~OAIContinuousBackupInfo() {}

void OAIContinuousBackupInfo::initializeModel() {

    m_earliest_restorable_time_isSet = false;
    m_earliest_restorable_time_isValid = false;

    m_enabled_time_isSet = false;
    m_enabled_time_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIContinuousBackupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousBackupInfo::fromJsonObject(QJsonObject json) {

    m_earliest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_restorable_time, json[QString("earliestRestorableTime")]);
    m_earliest_restorable_time_isSet = !json[QString("earliestRestorableTime")].isNull() && m_earliest_restorable_time_isValid;

    m_enabled_time_isValid = ::OpenAPI::fromJsonValue(m_enabled_time, json[QString("enabledTime")]);
    m_enabled_time_isSet = !json[QString("enabledTime")].isNull() && m_enabled_time_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIContinuousBackupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousBackupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_earliest_restorable_time_isSet) {
        obj.insert(QString("earliestRestorableTime"), ::OpenAPI::toJsonValue(m_earliest_restorable_time));
    }
    if (m_enabled_time_isSet) {
        obj.insert(QString("enabledTime"), ::OpenAPI::toJsonValue(m_enabled_time));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_schedule.size() > 0) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

QString OAIContinuousBackupInfo::getEarliestRestorableTime() const {
    return m_earliest_restorable_time;
}
void OAIContinuousBackupInfo::setEarliestRestorableTime(const QString &earliest_restorable_time) {
    m_earliest_restorable_time = earliest_restorable_time;
    m_earliest_restorable_time_isSet = true;
}

bool OAIContinuousBackupInfo::is_earliest_restorable_time_Set() const{
    return m_earliest_restorable_time_isSet;
}

bool OAIContinuousBackupInfo::is_earliest_restorable_time_Valid() const{
    return m_earliest_restorable_time_isValid;
}

QString OAIContinuousBackupInfo::getEnabledTime() const {
    return m_enabled_time;
}
void OAIContinuousBackupInfo::setEnabledTime(const QString &enabled_time) {
    m_enabled_time = enabled_time;
    m_enabled_time_isSet = true;
}

bool OAIContinuousBackupInfo::is_enabled_time_Set() const{
    return m_enabled_time_isSet;
}

bool OAIContinuousBackupInfo::is_enabled_time_Valid() const{
    return m_enabled_time_isValid;
}

OAIEncryptionInfo OAIContinuousBackupInfo::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIContinuousBackupInfo::setEncryptionInfo(const OAIEncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIContinuousBackupInfo::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIContinuousBackupInfo::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QList<QString> OAIContinuousBackupInfo::getSchedule() const {
    return m_schedule;
}
void OAIContinuousBackupInfo::setSchedule(const QList<QString> &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIContinuousBackupInfo::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIContinuousBackupInfo::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIContinuousBackupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earliest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousBackupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
