/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICluster.h
 *
 * A cluster is a collection of regional AlloyDB resources. It can include a primary instance and one or more read pool instances. All cluster resources share a storage layer, which scales as needed.
 */

#ifndef OAICluster_H
#define OAICluster_H

#include <QJsonObject>

#include "OAIAutomatedBackupPolicy.h"
#include "OAIBackupSource.h"
#include "OAIContinuousBackupConfig.h"
#include "OAIContinuousBackupInfo.h"
#include "OAIEncryptionConfig.h"
#include "OAIEncryptionInfo.h"
#include "OAIMigrationSource.h"
#include "OAINetworkConfig.h"
#include "OAIPrimaryConfig.h"
#include "OAIPscConfig.h"
#include "OAISecondaryConfig.h"
#include "OAISslConfig.h"
#include "OAIUserPassword.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutomatedBackupPolicy;
class OAIBackupSource;
class OAIContinuousBackupConfig;
class OAIContinuousBackupInfo;
class OAIEncryptionConfig;
class OAIEncryptionInfo;
class OAIUserPassword;
class OAIMigrationSource;
class OAINetworkConfig;
class OAIPrimaryConfig;
class OAIPscConfig;
class OAISecondaryConfig;
class OAISslConfig;

class OAICluster : public OAIObject {
public:
    OAICluster();
    OAICluster(QString json);
    ~OAICluster() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    OAIAutomatedBackupPolicy getAutomatedBackupPolicy() const;
    void setAutomatedBackupPolicy(const OAIAutomatedBackupPolicy &automated_backup_policy);
    bool is_automated_backup_policy_Set() const;
    bool is_automated_backup_policy_Valid() const;

    OAIBackupSource getBackupSource() const;
    void setBackupSource(const OAIBackupSource &backup_source);
    bool is_backup_source_Set() const;
    bool is_backup_source_Valid() const;

    QString getClusterType() const;
    void setClusterType(const QString &cluster_type);
    bool is_cluster_type_Set() const;
    bool is_cluster_type_Valid() const;

    OAIContinuousBackupConfig getContinuousBackupConfig() const;
    void setContinuousBackupConfig(const OAIContinuousBackupConfig &continuous_backup_config);
    bool is_continuous_backup_config_Set() const;
    bool is_continuous_backup_config_Valid() const;

    OAIContinuousBackupInfo getContinuousBackupInfo() const;
    void setContinuousBackupInfo(const OAIContinuousBackupInfo &continuous_backup_info);
    bool is_continuous_backup_info_Set() const;
    bool is_continuous_backup_info_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDatabaseVersion() const;
    void setDatabaseVersion(const QString &database_version);
    bool is_database_version_Set() const;
    bool is_database_version_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    OAIEncryptionInfo getEncryptionInfo() const;
    void setEncryptionInfo(const OAIEncryptionInfo &encryption_info);
    bool is_encryption_info_Set() const;
    bool is_encryption_info_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    OAIUserPassword getInitialUser() const;
    void setInitialUser(const OAIUserPassword &initial_user);
    bool is_initial_user_Set() const;
    bool is_initial_user_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIMigrationSource getMigrationSource() const;
    void setMigrationSource(const OAIMigrationSource &migration_source);
    bool is_migration_source_Set() const;
    bool is_migration_source_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    Q_DECL_DEPRECATED QString getNetwork() const;
    Q_DECL_DEPRECATED void setNetwork(const QString &network);
    Q_DECL_DEPRECATED bool is_network_Set() const;
    Q_DECL_DEPRECATED bool is_network_Valid() const;

    OAINetworkConfig getNetworkConfig() const;
    void setNetworkConfig(const OAINetworkConfig &network_config);
    bool is_network_config_Set() const;
    bool is_network_config_Valid() const;

    OAIPrimaryConfig getPrimaryConfig() const;
    void setPrimaryConfig(const OAIPrimaryConfig &primary_config);
    bool is_primary_config_Set() const;
    bool is_primary_config_Valid() const;

    OAIPscConfig getPscConfig() const;
    void setPscConfig(const OAIPscConfig &psc_config);
    bool is_psc_config_Set() const;
    bool is_psc_config_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    OAISecondaryConfig getSecondaryConfig() const;
    void setSecondaryConfig(const OAISecondaryConfig &secondary_config);
    bool is_secondary_config_Set() const;
    bool is_secondary_config_Valid() const;

    OAISslConfig getSslConfig() const;
    void setSslConfig(const OAISslConfig &ssl_config);
    bool is_ssl_config_Set() const;
    bool is_ssl_config_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    OAIAutomatedBackupPolicy m_automated_backup_policy;
    bool m_automated_backup_policy_isSet;
    bool m_automated_backup_policy_isValid;

    OAIBackupSource m_backup_source;
    bool m_backup_source_isSet;
    bool m_backup_source_isValid;

    QString m_cluster_type;
    bool m_cluster_type_isSet;
    bool m_cluster_type_isValid;

    OAIContinuousBackupConfig m_continuous_backup_config;
    bool m_continuous_backup_config_isSet;
    bool m_continuous_backup_config_isValid;

    OAIContinuousBackupInfo m_continuous_backup_info;
    bool m_continuous_backup_info_isSet;
    bool m_continuous_backup_info_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_database_version;
    bool m_database_version_isSet;
    bool m_database_version_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    OAIEncryptionInfo m_encryption_info;
    bool m_encryption_info_isSet;
    bool m_encryption_info_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    OAIUserPassword m_initial_user;
    bool m_initial_user_isSet;
    bool m_initial_user_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIMigrationSource m_migration_source;
    bool m_migration_source_isSet;
    bool m_migration_source_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    OAINetworkConfig m_network_config;
    bool m_network_config_isSet;
    bool m_network_config_isValid;

    OAIPrimaryConfig m_primary_config;
    bool m_primary_config_isSet;
    bool m_primary_config_isValid;

    OAIPscConfig m_psc_config;
    bool m_psc_config_isSet;
    bool m_psc_config_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    OAISecondaryConfig m_secondary_config;
    bool m_secondary_config_isSet;
    bool m_secondary_config_isValid;

    OAISslConfig m_ssl_config;
    bool m_ssl_config_isSet;
    bool m_ssl_config_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICluster)

#endif // OAICluster_H
