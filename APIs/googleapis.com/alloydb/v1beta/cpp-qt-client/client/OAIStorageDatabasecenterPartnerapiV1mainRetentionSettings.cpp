/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::~OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings() {}

void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::initializeModel() {

    m_quantity_based_retention_isSet = false;
    m_quantity_based_retention_isValid = false;

    m_retention_unit_isSet = false;
    m_retention_unit_isValid = false;

    m_time_based_retention_isSet = false;
    m_time_based_retention_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::fromJsonObject(QJsonObject json) {

    m_quantity_based_retention_isValid = ::OpenAPI::fromJsonValue(m_quantity_based_retention, json[QString("quantityBasedRetention")]);
    m_quantity_based_retention_isSet = !json[QString("quantityBasedRetention")].isNull() && m_quantity_based_retention_isValid;

    m_retention_unit_isValid = ::OpenAPI::fromJsonValue(m_retention_unit, json[QString("retentionUnit")]);
    m_retention_unit_isSet = !json[QString("retentionUnit")].isNull() && m_retention_unit_isValid;

    m_time_based_retention_isValid = ::OpenAPI::fromJsonValue(m_time_based_retention, json[QString("timeBasedRetention")]);
    m_time_based_retention_isSet = !json[QString("timeBasedRetention")].isNull() && m_time_based_retention_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_based_retention_isSet) {
        obj.insert(QString("quantityBasedRetention"), ::OpenAPI::toJsonValue(m_quantity_based_retention));
    }
    if (m_retention_unit_isSet) {
        obj.insert(QString("retentionUnit"), ::OpenAPI::toJsonValue(m_retention_unit));
    }
    if (m_time_based_retention_isSet) {
        obj.insert(QString("timeBasedRetention"), ::OpenAPI::toJsonValue(m_time_based_retention));
    }
    return obj;
}

qint32 OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::getQuantityBasedRetention() const {
    return m_quantity_based_retention;
}
void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::setQuantityBasedRetention(const qint32 &quantity_based_retention) {
    m_quantity_based_retention = quantity_based_retention;
    m_quantity_based_retention_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_quantity_based_retention_Set() const{
    return m_quantity_based_retention_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_quantity_based_retention_Valid() const{
    return m_quantity_based_retention_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::getRetentionUnit() const {
    return m_retention_unit;
}
void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::setRetentionUnit(const QString &retention_unit) {
    m_retention_unit = retention_unit;
    m_retention_unit_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_retention_unit_Set() const{
    return m_retention_unit_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_retention_unit_Valid() const{
    return m_retention_unit_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::getTimeBasedRetention() const {
    return m_time_based_retention;
}
void OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::setTimeBasedRetention(const QString &time_based_retention) {
    m_time_based_retention = time_based_retention;
    m_time_based_retention_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_time_based_retention_Set() const{
    return m_time_based_retention_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::is_time_based_retention_Valid() const{
    return m_time_based_retention_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_based_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_based_retention_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
