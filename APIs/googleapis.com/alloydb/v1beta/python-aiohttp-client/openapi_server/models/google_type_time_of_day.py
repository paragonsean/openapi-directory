# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleTypeTimeOfDay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours: int=None, minutes: int=None, nanos: int=None, seconds: int=None):
        """GoogleTypeTimeOfDay - a model defined in OpenAPI

        :param hours: The hours of this GoogleTypeTimeOfDay.
        :param minutes: The minutes of this GoogleTypeTimeOfDay.
        :param nanos: The nanos of this GoogleTypeTimeOfDay.
        :param seconds: The seconds of this GoogleTypeTimeOfDay.
        """
        self.openapi_types = {
            'hours': int,
            'minutes': int,
            'nanos': int,
            'seconds': int
        }

        self.attribute_map = {
            'hours': 'hours',
            'minutes': 'minutes',
            'nanos': 'nanos',
            'seconds': 'seconds'
        }

        self._hours = hours
        self._minutes = minutes
        self._nanos = nanos
        self._seconds = seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleTypeTimeOfDay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleTypeTimeOfDay of this GoogleTypeTimeOfDay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self):
        """Gets the hours of this GoogleTypeTimeOfDay.

        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.

        :return: The hours of this GoogleTypeTimeOfDay.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this GoogleTypeTimeOfDay.

        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.

        :param hours: The hours of this GoogleTypeTimeOfDay.
        :type hours: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this GoogleTypeTimeOfDay.

        Minutes of hour of day. Must be from 0 to 59.

        :return: The minutes of this GoogleTypeTimeOfDay.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this GoogleTypeTimeOfDay.

        Minutes of hour of day. Must be from 0 to 59.

        :param minutes: The minutes of this GoogleTypeTimeOfDay.
        :type minutes: int
        """

        self._minutes = minutes

    @property
    def nanos(self):
        """Gets the nanos of this GoogleTypeTimeOfDay.

        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.

        :return: The nanos of this GoogleTypeTimeOfDay.
        :rtype: int
        """
        return self._nanos

    @nanos.setter
    def nanos(self, nanos):
        """Sets the nanos of this GoogleTypeTimeOfDay.

        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.

        :param nanos: The nanos of this GoogleTypeTimeOfDay.
        :type nanos: int
        """

        self._nanos = nanos

    @property
    def seconds(self):
        """Gets the seconds of this GoogleTypeTimeOfDay.

        Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.

        :return: The seconds of this GoogleTypeTimeOfDay.
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this GoogleTypeTimeOfDay.

        Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.

        :param seconds: The seconds of this GoogleTypeTimeOfDay.
        :type seconds: int
        """

        self._seconds = seconds
