# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_roles: List[str]=None, name: str=None, password: str=None, user_type: str=None):
        """User - a model defined in OpenAPI

        :param database_roles: The database_roles of this User.
        :param name: The name of this User.
        :param password: The password of this User.
        :param user_type: The user_type of this User.
        """
        self.openapi_types = {
            'database_roles': List[str],
            'name': str,
            'password': str,
            'user_type': str
        }

        self.attribute_map = {
            'database_roles': 'databaseRoles',
            'name': 'name',
            'password': 'password',
            'user_type': 'userType'
        }

        self._database_roles = database_roles
        self._name = name
        self._password = password
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_roles(self):
        """Gets the database_roles of this User.

        Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.

        :return: The database_roles of this User.
        :rtype: List[str]
        """
        return self._database_roles

    @database_roles.setter
    def database_roles(self, database_roles):
        """Sets the database_roles of this User.

        Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.

        :param database_roles: The database_roles of this User.
        :type database_roles: List[str]
        """

        self._database_roles = database_roles

    @property
    def name(self):
        """Gets the name of this User.

        Output only. Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Output only. Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this User.

        Input only. Password for the user.

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        Input only. Password for the user.

        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def user_type(self):
        """Gets the user_type of this User.

        Optional. Type of this user.

        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this User.

        Optional. Type of this user.

        :param user_type: The user_type of this User.
        :type user_type: str
        """
        allowed_values = ["USER_TYPE_UNSPECIFIED", "ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type
