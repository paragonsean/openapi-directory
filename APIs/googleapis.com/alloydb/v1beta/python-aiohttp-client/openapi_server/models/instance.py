# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_connection_config import ClientConnectionConfig
from openapi_server.models.instance_network_config import InstanceNetworkConfig
from openapi_server.models.machine_config import MachineConfig
from openapi_server.models.node import Node
from openapi_server.models.psc_instance_config import PscInstanceConfig
from openapi_server.models.query_insights_instance_config import QueryInsightsInstanceConfig
from openapi_server.models.read_pool_config import ReadPoolConfig
from openapi_server.models.update_policy import UpdatePolicy
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, availability_type: str=None, client_connection_config: ClientConnectionConfig=None, create_time: str=None, database_flags: Dict[str, str]=None, delete_time: str=None, display_name: str=None, etag: str=None, gce_zone: str=None, instance_type: str=None, ip_address: str=None, labels: Dict[str, str]=None, machine_config: MachineConfig=None, name: str=None, network_config: InstanceNetworkConfig=None, nodes: List[Node]=None, psc_instance_config: PscInstanceConfig=None, public_ip_address: str=None, query_insights_config: QueryInsightsInstanceConfig=None, read_pool_config: ReadPoolConfig=None, reconciling: bool=None, satisfies_pzs: bool=None, state: str=None, uid: str=None, update_policy: UpdatePolicy=None, update_time: str=None, writable_node: Node=None):
        """Instance - a model defined in OpenAPI

        :param annotations: The annotations of this Instance.
        :param availability_type: The availability_type of this Instance.
        :param client_connection_config: The client_connection_config of this Instance.
        :param create_time: The create_time of this Instance.
        :param database_flags: The database_flags of this Instance.
        :param delete_time: The delete_time of this Instance.
        :param display_name: The display_name of this Instance.
        :param etag: The etag of this Instance.
        :param gce_zone: The gce_zone of this Instance.
        :param instance_type: The instance_type of this Instance.
        :param ip_address: The ip_address of this Instance.
        :param labels: The labels of this Instance.
        :param machine_config: The machine_config of this Instance.
        :param name: The name of this Instance.
        :param network_config: The network_config of this Instance.
        :param nodes: The nodes of this Instance.
        :param psc_instance_config: The psc_instance_config of this Instance.
        :param public_ip_address: The public_ip_address of this Instance.
        :param query_insights_config: The query_insights_config of this Instance.
        :param read_pool_config: The read_pool_config of this Instance.
        :param reconciling: The reconciling of this Instance.
        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :param state: The state of this Instance.
        :param uid: The uid of this Instance.
        :param update_policy: The update_policy of this Instance.
        :param update_time: The update_time of this Instance.
        :param writable_node: The writable_node of this Instance.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'availability_type': str,
            'client_connection_config': ClientConnectionConfig,
            'create_time': str,
            'database_flags': Dict[str, str],
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'gce_zone': str,
            'instance_type': str,
            'ip_address': str,
            'labels': Dict[str, str],
            'machine_config': MachineConfig,
            'name': str,
            'network_config': InstanceNetworkConfig,
            'nodes': List[Node],
            'psc_instance_config': PscInstanceConfig,
            'public_ip_address': str,
            'query_insights_config': QueryInsightsInstanceConfig,
            'read_pool_config': ReadPoolConfig,
            'reconciling': bool,
            'satisfies_pzs': bool,
            'state': str,
            'uid': str,
            'update_policy': UpdatePolicy,
            'update_time': str,
            'writable_node': Node
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'availability_type': 'availabilityType',
            'client_connection_config': 'clientConnectionConfig',
            'create_time': 'createTime',
            'database_flags': 'databaseFlags',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'gce_zone': 'gceZone',
            'instance_type': 'instanceType',
            'ip_address': 'ipAddress',
            'labels': 'labels',
            'machine_config': 'machineConfig',
            'name': 'name',
            'network_config': 'networkConfig',
            'nodes': 'nodes',
            'psc_instance_config': 'pscInstanceConfig',
            'public_ip_address': 'publicIpAddress',
            'query_insights_config': 'queryInsightsConfig',
            'read_pool_config': 'readPoolConfig',
            'reconciling': 'reconciling',
            'satisfies_pzs': 'satisfiesPzs',
            'state': 'state',
            'uid': 'uid',
            'update_policy': 'updatePolicy',
            'update_time': 'updateTime',
            'writable_node': 'writableNode'
        }

        self._annotations = annotations
        self._availability_type = availability_type
        self._client_connection_config = client_connection_config
        self._create_time = create_time
        self._database_flags = database_flags
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._gce_zone = gce_zone
        self._instance_type = instance_type
        self._ip_address = ip_address
        self._labels = labels
        self._machine_config = machine_config
        self._name = name
        self._network_config = network_config
        self._nodes = nodes
        self._psc_instance_config = psc_instance_config
        self._public_ip_address = public_ip_address
        self._query_insights_config = query_insights_config
        self._read_pool_config = read_pool_config
        self._reconciling = reconciling
        self._satisfies_pzs = satisfies_pzs
        self._state = state
        self._uid = uid
        self._update_policy = update_policy
        self._update_time = update_time
        self._writable_node = writable_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Instance.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :return: The annotations of this Instance.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Instance.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :param annotations: The annotations of this Instance.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def availability_type(self):
        """Gets the availability_type of this Instance.

        Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).

        :return: The availability_type of this Instance.
        :rtype: str
        """
        return self._availability_type

    @availability_type.setter
    def availability_type(self, availability_type):
        """Sets the availability_type of this Instance.

        Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).

        :param availability_type: The availability_type of this Instance.
        :type availability_type: str
        """
        allowed_values = ["AVAILABILITY_TYPE_UNSPECIFIED", "ZONAL", "REGIONAL"]  # noqa: E501
        if availability_type not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_type` ({0}), must be one of {1}"
                .format(availability_type, allowed_values)
            )

        self._availability_type = availability_type

    @property
    def client_connection_config(self):
        """Gets the client_connection_config of this Instance.


        :return: The client_connection_config of this Instance.
        :rtype: ClientConnectionConfig
        """
        return self._client_connection_config

    @client_connection_config.setter
    def client_connection_config(self, client_connection_config):
        """Sets the client_connection_config of this Instance.


        :param client_connection_config: The client_connection_config of this Instance.
        :type client_connection_config: ClientConnectionConfig
        """

        self._client_connection_config = client_connection_config

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. Create time stamp

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. Create time stamp

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_flags(self):
        """Gets the database_flags of this Instance.

        Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of \"key\": \"value\" pairs. \"key\": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. \"value\": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.

        :return: The database_flags of this Instance.
        :rtype: Dict[str, str]
        """
        return self._database_flags

    @database_flags.setter
    def database_flags(self, database_flags):
        """Sets the database_flags of this Instance.

        Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of \"key\": \"value\" pairs. \"key\": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. \"value\": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.

        :param database_flags: The database_flags of this Instance.
        :type database_flags: Dict[str, str]
        """

        self._database_flags = database_flags

    @property
    def delete_time(self):
        """Gets the delete_time of this Instance.

        Output only. Delete time stamp

        :return: The delete_time of this Instance.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Instance.

        Output only. Delete time stamp

        :param delete_time: The delete_time of this Instance.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Instance.

        User-settable and human-readable display name for the Instance.

        :return: The display_name of this Instance.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Instance.

        User-settable and human-readable display name for the Instance.

        :param display_name: The display_name of this Instance.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Instance.

        For Resource freshness validation (https://google.aip.dev/154)

        :return: The etag of this Instance.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Instance.

        For Resource freshness validation (https://google.aip.dev/154)

        :param etag: The etag of this Instance.
        :type etag: str
        """

        self._etag = etag

    @property
    def gce_zone(self):
        """Gets the gce_zone of this Instance.

        The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.

        :return: The gce_zone of this Instance.
        :rtype: str
        """
        return self._gce_zone

    @gce_zone.setter
    def gce_zone(self, gce_zone):
        """Sets the gce_zone of this Instance.

        The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.

        :param gce_zone: The gce_zone of this Instance.
        :type gce_zone: str
        """

        self._gce_zone = gce_zone

    @property
    def instance_type(self):
        """Gets the instance_type of this Instance.

        Required. The type of the instance. Specified at creation time.

        :return: The instance_type of this Instance.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this Instance.

        Required. The type of the instance. Specified at creation time.

        :param instance_type: The instance_type of this Instance.
        :type instance_type: str
        """
        allowed_values = ["INSTANCE_TYPE_UNSPECIFIED", "PRIMARY", "READ_POOL", "SECONDARY"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def ip_address(self):
        """Gets the ip_address of this Instance.

        Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.

        :return: The ip_address of this Instance.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Instance.

        Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.

        :param ip_address: The ip_address of this Instance.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def labels(self):
        """Gets the labels of this Instance.

        Labels as key value pairs

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        Labels as key value pairs

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def machine_config(self):
        """Gets the machine_config of this Instance.


        :return: The machine_config of this Instance.
        :rtype: MachineConfig
        """
        return self._machine_config

    @machine_config.setter
    def machine_config(self, machine_config):
        """Sets the machine_config of this Instance.


        :param machine_config: The machine_config of this Instance.
        :type machine_config: MachineConfig
        """

        self._machine_config = machine_config

    @property
    def name(self):
        """Gets the name of this Instance.

        Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this Instance.


        :return: The network_config of this Instance.
        :rtype: InstanceNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Instance.


        :param network_config: The network_config of this Instance.
        :type network_config: InstanceNetworkConfig
        """

        self._network_config = network_config

    @property
    def nodes(self):
        """Gets the nodes of this Instance.

        Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.

        :return: The nodes of this Instance.
        :rtype: List[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Instance.

        Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.

        :param nodes: The nodes of this Instance.
        :type nodes: List[Node]
        """

        self._nodes = nodes

    @property
    def psc_instance_config(self):
        """Gets the psc_instance_config of this Instance.


        :return: The psc_instance_config of this Instance.
        :rtype: PscInstanceConfig
        """
        return self._psc_instance_config

    @psc_instance_config.setter
    def psc_instance_config(self, psc_instance_config):
        """Sets the psc_instance_config of this Instance.


        :param psc_instance_config: The psc_instance_config of this Instance.
        :type psc_instance_config: PscInstanceConfig
        """

        self._psc_instance_config = psc_instance_config

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this Instance.

        Output only. The public IP addresses for the Instance. This is available ONLY when enable_public_ip is set. This is the connection endpoint for an end-user application.

        :return: The public_ip_address of this Instance.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this Instance.

        Output only. The public IP addresses for the Instance. This is available ONLY when enable_public_ip is set. This is the connection endpoint for an end-user application.

        :param public_ip_address: The public_ip_address of this Instance.
        :type public_ip_address: str
        """

        self._public_ip_address = public_ip_address

    @property
    def query_insights_config(self):
        """Gets the query_insights_config of this Instance.


        :return: The query_insights_config of this Instance.
        :rtype: QueryInsightsInstanceConfig
        """
        return self._query_insights_config

    @query_insights_config.setter
    def query_insights_config(self, query_insights_config):
        """Sets the query_insights_config of this Instance.


        :param query_insights_config: The query_insights_config of this Instance.
        :type query_insights_config: QueryInsightsInstanceConfig
        """

        self._query_insights_config = query_insights_config

    @property
    def read_pool_config(self):
        """Gets the read_pool_config of this Instance.


        :return: The read_pool_config of this Instance.
        :rtype: ReadPoolConfig
        """
        return self._read_pool_config

    @read_pool_config.setter
    def read_pool_config(self, read_pool_config):
        """Sets the read_pool_config of this Instance.


        :param read_pool_config: The read_pool_config of this Instance.
        :type read_pool_config: ReadPoolConfig
        """

        self._read_pool_config = read_pool_config

    @property
    def reconciling(self):
        """Gets the reconciling of this Instance.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :return: The reconciling of this Instance.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Instance.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :param reconciling: The reconciling of this Instance.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Instance.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The current serving state of the instance.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The current serving state of the instance.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "STOPPED", "CREATING", "DELETING", "MAINTENANCE", "FAILED", "BOOTSTRAPPING", "PROMOTING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Instance.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :return: The uid of this Instance.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Instance.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :param uid: The uid of this Instance.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_policy(self):
        """Gets the update_policy of this Instance.


        :return: The update_policy of this Instance.
        :rtype: UpdatePolicy
        """
        return self._update_policy

    @update_policy.setter
    def update_policy(self, update_policy):
        """Sets the update_policy of this Instance.


        :param update_policy: The update_policy of this Instance.
        :type update_policy: UpdatePolicy
        """

        self._update_policy = update_policy

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. Update time stamp

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. Update time stamp

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def writable_node(self):
        """Gets the writable_node of this Instance.


        :return: The writable_node of this Instance.
        :rtype: Node
        """
        return self._writable_node

    @writable_node.setter
    def writable_node(self, writable_node):
        """Sets the writable_node of this Instance.


        :param writable_node: The writable_node of this Instance.
        :type writable_node: Node
        """

        self._writable_node = writable_node
