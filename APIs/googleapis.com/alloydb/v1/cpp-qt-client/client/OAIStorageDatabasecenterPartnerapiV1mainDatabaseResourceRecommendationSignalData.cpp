/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::~OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData() {}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::initializeModel() {

    m_additional_metadata_isSet = false;
    m_additional_metadata_isValid = false;

    m_last_refresh_time_isSet = false;
    m_last_refresh_time_isValid = false;

    m_recommendation_state_isSet = false;
    m_recommendation_state_isValid = false;

    m_recommender_isSet = false;
    m_recommender_isValid = false;

    m_recommender_id_isSet = false;
    m_recommender_id_isValid = false;

    m_recommender_subtype_isSet = false;
    m_recommender_subtype_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_signal_type_isSet = false;
    m_signal_type_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::fromJsonObject(QJsonObject json) {

    m_additional_metadata_isValid = ::OpenAPI::fromJsonValue(m_additional_metadata, json[QString("additionalMetadata")]);
    m_additional_metadata_isSet = !json[QString("additionalMetadata")].isNull() && m_additional_metadata_isValid;

    m_last_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_last_refresh_time, json[QString("lastRefreshTime")]);
    m_last_refresh_time_isSet = !json[QString("lastRefreshTime")].isNull() && m_last_refresh_time_isValid;

    m_recommendation_state_isValid = ::OpenAPI::fromJsonValue(m_recommendation_state, json[QString("recommendationState")]);
    m_recommendation_state_isSet = !json[QString("recommendationState")].isNull() && m_recommendation_state_isValid;

    m_recommender_isValid = ::OpenAPI::fromJsonValue(m_recommender, json[QString("recommender")]);
    m_recommender_isSet = !json[QString("recommender")].isNull() && m_recommender_isValid;

    m_recommender_id_isValid = ::OpenAPI::fromJsonValue(m_recommender_id, json[QString("recommenderId")]);
    m_recommender_id_isSet = !json[QString("recommenderId")].isNull() && m_recommender_id_isValid;

    m_recommender_subtype_isValid = ::OpenAPI::fromJsonValue(m_recommender_subtype, json[QString("recommenderSubtype")]);
    m_recommender_subtype_isSet = !json[QString("recommenderSubtype")].isNull() && m_recommender_subtype_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_signal_type_isValid = ::OpenAPI::fromJsonValue(m_signal_type, json[QString("signalType")]);
    m_signal_type_isSet = !json[QString("signalType")].isNull() && m_signal_type_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_metadata.size() > 0) {
        obj.insert(QString("additionalMetadata"), ::OpenAPI::toJsonValue(m_additional_metadata));
    }
    if (m_last_refresh_time_isSet) {
        obj.insert(QString("lastRefreshTime"), ::OpenAPI::toJsonValue(m_last_refresh_time));
    }
    if (m_recommendation_state_isSet) {
        obj.insert(QString("recommendationState"), ::OpenAPI::toJsonValue(m_recommendation_state));
    }
    if (m_recommender_isSet) {
        obj.insert(QString("recommender"), ::OpenAPI::toJsonValue(m_recommender));
    }
    if (m_recommender_id_isSet) {
        obj.insert(QString("recommenderId"), ::OpenAPI::toJsonValue(m_recommender_id));
    }
    if (m_recommender_subtype_isSet) {
        obj.insert(QString("recommenderSubtype"), ::OpenAPI::toJsonValue(m_recommender_subtype));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_signal_type_isSet) {
        obj.insert(QString("signalType"), ::OpenAPI::toJsonValue(m_signal_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getAdditionalMetadata() const {
    return m_additional_metadata;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setAdditionalMetadata(const QMap<QString, QJsonValue> &additional_metadata) {
    m_additional_metadata = additional_metadata;
    m_additional_metadata_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_additional_metadata_Set() const{
    return m_additional_metadata_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_additional_metadata_Valid() const{
    return m_additional_metadata_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getLastRefreshTime() const {
    return m_last_refresh_time;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setLastRefreshTime(const QString &last_refresh_time) {
    m_last_refresh_time = last_refresh_time;
    m_last_refresh_time_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_last_refresh_time_Set() const{
    return m_last_refresh_time_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_last_refresh_time_Valid() const{
    return m_last_refresh_time_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getRecommendationState() const {
    return m_recommendation_state;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setRecommendationState(const QString &recommendation_state) {
    m_recommendation_state = recommendation_state;
    m_recommendation_state_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommendation_state_Set() const{
    return m_recommendation_state_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommendation_state_Valid() const{
    return m_recommendation_state_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getRecommender() const {
    return m_recommender;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setRecommender(const QString &recommender) {
    m_recommender = recommender;
    m_recommender_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_Set() const{
    return m_recommender_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_Valid() const{
    return m_recommender_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getRecommenderId() const {
    return m_recommender_id;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setRecommenderId(const QString &recommender_id) {
    m_recommender_id = recommender_id;
    m_recommender_id_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_id_Set() const{
    return m_recommender_id_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_id_Valid() const{
    return m_recommender_id_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getRecommenderSubtype() const {
    return m_recommender_subtype;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setRecommenderSubtype(const QString &recommender_subtype) {
    m_recommender_subtype = recommender_subtype;
    m_recommender_subtype_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_subtype_Set() const{
    return m_recommender_subtype_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_recommender_subtype_Valid() const{
    return m_recommender_subtype_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getResourceName() const {
    return m_resource_name;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::getSignalType() const {
    return m_signal_type;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::setSignalType(const QString &signal_type) {
    m_signal_type = signal_type;
    m_signal_type_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_signal_type_Set() const{
    return m_signal_type_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::is_signal_type_Valid() const{
    return m_signal_type_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommender_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
