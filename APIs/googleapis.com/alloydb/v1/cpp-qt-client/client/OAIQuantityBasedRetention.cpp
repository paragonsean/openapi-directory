/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuantityBasedRetention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuantityBasedRetention::OAIQuantityBasedRetention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuantityBasedRetention::OAIQuantityBasedRetention() {
    this->initializeModel();
}

OAIQuantityBasedRetention::~OAIQuantityBasedRetention() {}

void OAIQuantityBasedRetention::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;
}

void OAIQuantityBasedRetention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuantityBasedRetention::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;
}

QString OAIQuantityBasedRetention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuantityBasedRetention::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    return obj;
}

qint32 OAIQuantityBasedRetention::getCount() const {
    return m_count;
}
void OAIQuantityBasedRetention::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIQuantityBasedRetention::is_count_Set() const{
    return m_count_isSet;
}

bool OAIQuantityBasedRetention::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIQuantityBasedRetention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuantityBasedRetention::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
