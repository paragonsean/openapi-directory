/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedDatabaseFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedDatabaseFlag::OAISupportedDatabaseFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedDatabaseFlag::OAISupportedDatabaseFlag() {
    this->initializeModel();
}

OAISupportedDatabaseFlag::~OAISupportedDatabaseFlag() {}

void OAISupportedDatabaseFlag::initializeModel() {

    m_accepts_multiple_values_isSet = false;
    m_accepts_multiple_values_isValid = false;

    m_flag_name_isSet = false;
    m_flag_name_isValid = false;

    m_integer_restrictions_isSet = false;
    m_integer_restrictions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_db_restart_isSet = false;
    m_requires_db_restart_isValid = false;

    m_string_restrictions_isSet = false;
    m_string_restrictions_isValid = false;

    m_supported_db_versions_isSet = false;
    m_supported_db_versions_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAISupportedDatabaseFlag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedDatabaseFlag::fromJsonObject(QJsonObject json) {

    m_accepts_multiple_values_isValid = ::OpenAPI::fromJsonValue(m_accepts_multiple_values, json[QString("acceptsMultipleValues")]);
    m_accepts_multiple_values_isSet = !json[QString("acceptsMultipleValues")].isNull() && m_accepts_multiple_values_isValid;

    m_flag_name_isValid = ::OpenAPI::fromJsonValue(m_flag_name, json[QString("flagName")]);
    m_flag_name_isSet = !json[QString("flagName")].isNull() && m_flag_name_isValid;

    m_integer_restrictions_isValid = ::OpenAPI::fromJsonValue(m_integer_restrictions, json[QString("integerRestrictions")]);
    m_integer_restrictions_isSet = !json[QString("integerRestrictions")].isNull() && m_integer_restrictions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requires_db_restart_isValid = ::OpenAPI::fromJsonValue(m_requires_db_restart, json[QString("requiresDbRestart")]);
    m_requires_db_restart_isSet = !json[QString("requiresDbRestart")].isNull() && m_requires_db_restart_isValid;

    m_string_restrictions_isValid = ::OpenAPI::fromJsonValue(m_string_restrictions, json[QString("stringRestrictions")]);
    m_string_restrictions_isSet = !json[QString("stringRestrictions")].isNull() && m_string_restrictions_isValid;

    m_supported_db_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_db_versions, json[QString("supportedDbVersions")]);
    m_supported_db_versions_isSet = !json[QString("supportedDbVersions")].isNull() && m_supported_db_versions_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAISupportedDatabaseFlag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedDatabaseFlag::asJsonObject() const {
    QJsonObject obj;
    if (m_accepts_multiple_values_isSet) {
        obj.insert(QString("acceptsMultipleValues"), ::OpenAPI::toJsonValue(m_accepts_multiple_values));
    }
    if (m_flag_name_isSet) {
        obj.insert(QString("flagName"), ::OpenAPI::toJsonValue(m_flag_name));
    }
    if (m_integer_restrictions.isSet()) {
        obj.insert(QString("integerRestrictions"), ::OpenAPI::toJsonValue(m_integer_restrictions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_db_restart_isSet) {
        obj.insert(QString("requiresDbRestart"), ::OpenAPI::toJsonValue(m_requires_db_restart));
    }
    if (m_string_restrictions.isSet()) {
        obj.insert(QString("stringRestrictions"), ::OpenAPI::toJsonValue(m_string_restrictions));
    }
    if (m_supported_db_versions.size() > 0) {
        obj.insert(QString("supportedDbVersions"), ::OpenAPI::toJsonValue(m_supported_db_versions));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

bool OAISupportedDatabaseFlag::isAcceptsMultipleValues() const {
    return m_accepts_multiple_values;
}
void OAISupportedDatabaseFlag::setAcceptsMultipleValues(const bool &accepts_multiple_values) {
    m_accepts_multiple_values = accepts_multiple_values;
    m_accepts_multiple_values_isSet = true;
}

bool OAISupportedDatabaseFlag::is_accepts_multiple_values_Set() const{
    return m_accepts_multiple_values_isSet;
}

bool OAISupportedDatabaseFlag::is_accepts_multiple_values_Valid() const{
    return m_accepts_multiple_values_isValid;
}

QString OAISupportedDatabaseFlag::getFlagName() const {
    return m_flag_name;
}
void OAISupportedDatabaseFlag::setFlagName(const QString &flag_name) {
    m_flag_name = flag_name;
    m_flag_name_isSet = true;
}

bool OAISupportedDatabaseFlag::is_flag_name_Set() const{
    return m_flag_name_isSet;
}

bool OAISupportedDatabaseFlag::is_flag_name_Valid() const{
    return m_flag_name_isValid;
}

OAIIntegerRestrictions OAISupportedDatabaseFlag::getIntegerRestrictions() const {
    return m_integer_restrictions;
}
void OAISupportedDatabaseFlag::setIntegerRestrictions(const OAIIntegerRestrictions &integer_restrictions) {
    m_integer_restrictions = integer_restrictions;
    m_integer_restrictions_isSet = true;
}

bool OAISupportedDatabaseFlag::is_integer_restrictions_Set() const{
    return m_integer_restrictions_isSet;
}

bool OAISupportedDatabaseFlag::is_integer_restrictions_Valid() const{
    return m_integer_restrictions_isValid;
}

QString OAISupportedDatabaseFlag::getName() const {
    return m_name;
}
void OAISupportedDatabaseFlag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupportedDatabaseFlag::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupportedDatabaseFlag::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISupportedDatabaseFlag::isRequiresDbRestart() const {
    return m_requires_db_restart;
}
void OAISupportedDatabaseFlag::setRequiresDbRestart(const bool &requires_db_restart) {
    m_requires_db_restart = requires_db_restart;
    m_requires_db_restart_isSet = true;
}

bool OAISupportedDatabaseFlag::is_requires_db_restart_Set() const{
    return m_requires_db_restart_isSet;
}

bool OAISupportedDatabaseFlag::is_requires_db_restart_Valid() const{
    return m_requires_db_restart_isValid;
}

OAIStringRestrictions OAISupportedDatabaseFlag::getStringRestrictions() const {
    return m_string_restrictions;
}
void OAISupportedDatabaseFlag::setStringRestrictions(const OAIStringRestrictions &string_restrictions) {
    m_string_restrictions = string_restrictions;
    m_string_restrictions_isSet = true;
}

bool OAISupportedDatabaseFlag::is_string_restrictions_Set() const{
    return m_string_restrictions_isSet;
}

bool OAISupportedDatabaseFlag::is_string_restrictions_Valid() const{
    return m_string_restrictions_isValid;
}

QList<QString> OAISupportedDatabaseFlag::getSupportedDbVersions() const {
    return m_supported_db_versions;
}
void OAISupportedDatabaseFlag::setSupportedDbVersions(const QList<QString> &supported_db_versions) {
    m_supported_db_versions = supported_db_versions;
    m_supported_db_versions_isSet = true;
}

bool OAISupportedDatabaseFlag::is_supported_db_versions_Set() const{
    return m_supported_db_versions_isSet;
}

bool OAISupportedDatabaseFlag::is_supported_db_versions_Valid() const{
    return m_supported_db_versions_isValid;
}

QString OAISupportedDatabaseFlag::getValueType() const {
    return m_value_type;
}
void OAISupportedDatabaseFlag::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAISupportedDatabaseFlag::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAISupportedDatabaseFlag::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAISupportedDatabaseFlag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepts_multiple_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_db_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_db_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedDatabaseFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
