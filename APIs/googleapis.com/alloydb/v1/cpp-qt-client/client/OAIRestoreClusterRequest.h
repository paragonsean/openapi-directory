/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreClusterRequest.h
 *
 * Message for restoring a Cluster from a backup or another cluster at a given point in time.
 */

#ifndef OAIRestoreClusterRequest_H
#define OAIRestoreClusterRequest_H

#include <QJsonObject>

#include "OAIBackupSource.h"
#include "OAICluster.h"
#include "OAIContinuousBackupSource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBackupSource;
class OAICluster;
class OAIContinuousBackupSource;

class OAIRestoreClusterRequest : public OAIObject {
public:
    OAIRestoreClusterRequest();
    OAIRestoreClusterRequest(QString json);
    ~OAIRestoreClusterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBackupSource getBackupSource() const;
    void setBackupSource(const OAIBackupSource &backup_source);
    bool is_backup_source_Set() const;
    bool is_backup_source_Valid() const;

    OAICluster getCluster() const;
    void setCluster(const OAICluster &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getClusterId() const;
    void setClusterId(const QString &cluster_id);
    bool is_cluster_id_Set() const;
    bool is_cluster_id_Valid() const;

    OAIContinuousBackupSource getContinuousBackupSource() const;
    void setContinuousBackupSource(const OAIContinuousBackupSource &continuous_backup_source);
    bool is_continuous_backup_source_Set() const;
    bool is_continuous_backup_source_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    bool isValidateOnly() const;
    void setValidateOnly(const bool &validate_only);
    bool is_validate_only_Set() const;
    bool is_validate_only_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBackupSource m_backup_source;
    bool m_backup_source_isSet;
    bool m_backup_source_isValid;

    OAICluster m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_cluster_id;
    bool m_cluster_id_isSet;
    bool m_cluster_id_isValid;

    OAIContinuousBackupSource m_continuous_backup_source;
    bool m_continuous_backup_source_isSet;
    bool m_continuous_backup_source_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    bool m_validate_only;
    bool m_validate_only_isSet;
    bool m_validate_only_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreClusterRequest)

#endif // OAIRestoreClusterRequest_H
