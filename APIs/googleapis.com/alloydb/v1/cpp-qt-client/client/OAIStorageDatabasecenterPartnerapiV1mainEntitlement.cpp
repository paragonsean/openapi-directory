/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainEntitlement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainEntitlement::OAIStorageDatabasecenterPartnerapiV1mainEntitlement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainEntitlement::OAIStorageDatabasecenterPartnerapiV1mainEntitlement() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainEntitlement::~OAIStorageDatabasecenterPartnerapiV1mainEntitlement() {}

void OAIStorageDatabasecenterPartnerapiV1mainEntitlement::initializeModel() {

    m_entitlement_state_isSet = false;
    m_entitlement_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainEntitlement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainEntitlement::fromJsonObject(QJsonObject json) {

    m_entitlement_state_isValid = ::OpenAPI::fromJsonValue(m_entitlement_state, json[QString("entitlementState")]);
    m_entitlement_state_isSet = !json[QString("entitlementState")].isNull() && m_entitlement_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainEntitlement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainEntitlement::asJsonObject() const {
    QJsonObject obj;
    if (m_entitlement_state_isSet) {
        obj.insert(QString("entitlementState"), ::OpenAPI::toJsonValue(m_entitlement_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStorageDatabasecenterPartnerapiV1mainEntitlement::getEntitlementState() const {
    return m_entitlement_state;
}
void OAIStorageDatabasecenterPartnerapiV1mainEntitlement::setEntitlementState(const QString &entitlement_state) {
    m_entitlement_state = entitlement_state;
    m_entitlement_state_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::is_entitlement_state_Set() const{
    return m_entitlement_state_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::is_entitlement_state_Valid() const{
    return m_entitlement_state_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainEntitlement::getType() const {
    return m_type;
}
void OAIStorageDatabasecenterPartnerapiV1mainEntitlement::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entitlement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainEntitlement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
