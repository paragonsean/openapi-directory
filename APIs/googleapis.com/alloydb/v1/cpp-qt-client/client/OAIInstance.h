/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * An Instance is a computing unit that an end customer can connect to. It&#39;s the main unit of computing resources in AlloyDB.
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIClientConnectionConfig.h"
#include "OAIMachineConfig.h"
#include "OAINode.h"
#include "OAIQueryInsightsInstanceConfig.h"
#include "OAIReadPoolConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClientConnectionConfig;
class OAIMachineConfig;
class OAINode;
class OAIQueryInsightsInstanceConfig;
class OAIReadPoolConfig;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QString getAvailabilityType() const;
    void setAvailabilityType(const QString &availability_type);
    bool is_availability_type_Set() const;
    bool is_availability_type_Valid() const;

    OAIClientConnectionConfig getClientConnectionConfig() const;
    void setClientConnectionConfig(const OAIClientConnectionConfig &client_connection_config);
    bool is_client_connection_config_Set() const;
    bool is_client_connection_config_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QMap<QString, QString> getDatabaseFlags() const;
    void setDatabaseFlags(const QMap<QString, QString> &database_flags);
    bool is_database_flags_Set() const;
    bool is_database_flags_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getGceZone() const;
    void setGceZone(const QString &gce_zone);
    bool is_gce_zone_Set() const;
    bool is_gce_zone_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIMachineConfig getMachineConfig() const;
    void setMachineConfig(const OAIMachineConfig &machine_config);
    bool is_machine_config_Set() const;
    bool is_machine_config_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAINode> getNodes() const;
    void setNodes(const QList<OAINode> &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    OAIQueryInsightsInstanceConfig getQueryInsightsConfig() const;
    void setQueryInsightsConfig(const OAIQueryInsightsInstanceConfig &query_insights_config);
    bool is_query_insights_config_Set() const;
    bool is_query_insights_config_Valid() const;

    OAIReadPoolConfig getReadPoolConfig() const;
    void setReadPoolConfig(const OAIReadPoolConfig &read_pool_config);
    bool is_read_pool_config_Set() const;
    bool is_read_pool_config_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    OAINode getWritableNode() const;
    void setWritableNode(const OAINode &writable_node);
    bool is_writable_node_Set() const;
    bool is_writable_node_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QString m_availability_type;
    bool m_availability_type_isSet;
    bool m_availability_type_isValid;

    OAIClientConnectionConfig m_client_connection_config;
    bool m_client_connection_config_isSet;
    bool m_client_connection_config_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QMap<QString, QString> m_database_flags;
    bool m_database_flags_isSet;
    bool m_database_flags_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_gce_zone;
    bool m_gce_zone_isSet;
    bool m_gce_zone_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIMachineConfig m_machine_config;
    bool m_machine_config_isSet;
    bool m_machine_config_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAINode> m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    OAIQueryInsightsInstanceConfig m_query_insights_config;
    bool m_query_insights_config_isSet;
    bool m_query_insights_config_isValid;

    OAIReadPoolConfig m_read_pool_config;
    bool m_read_pool_config_isSet;
    bool m_read_pool_config_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    OAINode m_writable_node;
    bool m_writable_node_isSet;
    bool m_writable_node_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
