/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainBackupRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainBackupRun::OAIStorageDatabasecenterPartnerapiV1mainBackupRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainBackupRun::OAIStorageDatabasecenterPartnerapiV1mainBackupRun() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainBackupRun::~OAIStorageDatabasecenterPartnerapiV1mainBackupRun() {}

void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainBackupRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainBackupRun::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIStorageDatabasecenterPartnerapiV1mainBackupRun::getEndTime() const {
    return m_end_time;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainOperationError OAIStorageDatabasecenterPartnerapiV1mainBackupRun::getError() const {
    return m_error;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::setError(const OAIStorageDatabasecenterPartnerapiV1mainOperationError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_error_Set() const{
    return m_error_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainBackupRun::getStartTime() const {
    return m_start_time;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainBackupRun::getStatus() const {
    return m_status;
}
void OAIStorageDatabasecenterPartnerapiV1mainBackupRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainBackupRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
