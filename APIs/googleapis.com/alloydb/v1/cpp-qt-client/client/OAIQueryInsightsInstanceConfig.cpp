/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInsightsInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInsightsInstanceConfig::OAIQueryInsightsInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInsightsInstanceConfig::OAIQueryInsightsInstanceConfig() {
    this->initializeModel();
}

OAIQueryInsightsInstanceConfig::~OAIQueryInsightsInstanceConfig() {}

void OAIQueryInsightsInstanceConfig::initializeModel() {

    m_query_plans_per_minute_isSet = false;
    m_query_plans_per_minute_isValid = false;

    m_query_string_length_isSet = false;
    m_query_string_length_isValid = false;

    m_record_application_tags_isSet = false;
    m_record_application_tags_isValid = false;

    m_record_client_address_isSet = false;
    m_record_client_address_isValid = false;
}

void OAIQueryInsightsInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInsightsInstanceConfig::fromJsonObject(QJsonObject json) {

    m_query_plans_per_minute_isValid = ::OpenAPI::fromJsonValue(m_query_plans_per_minute, json[QString("queryPlansPerMinute")]);
    m_query_plans_per_minute_isSet = !json[QString("queryPlansPerMinute")].isNull() && m_query_plans_per_minute_isValid;

    m_query_string_length_isValid = ::OpenAPI::fromJsonValue(m_query_string_length, json[QString("queryStringLength")]);
    m_query_string_length_isSet = !json[QString("queryStringLength")].isNull() && m_query_string_length_isValid;

    m_record_application_tags_isValid = ::OpenAPI::fromJsonValue(m_record_application_tags, json[QString("recordApplicationTags")]);
    m_record_application_tags_isSet = !json[QString("recordApplicationTags")].isNull() && m_record_application_tags_isValid;

    m_record_client_address_isValid = ::OpenAPI::fromJsonValue(m_record_client_address, json[QString("recordClientAddress")]);
    m_record_client_address_isSet = !json[QString("recordClientAddress")].isNull() && m_record_client_address_isValid;
}

QString OAIQueryInsightsInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInsightsInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_query_plans_per_minute_isSet) {
        obj.insert(QString("queryPlansPerMinute"), ::OpenAPI::toJsonValue(m_query_plans_per_minute));
    }
    if (m_query_string_length_isSet) {
        obj.insert(QString("queryStringLength"), ::OpenAPI::toJsonValue(m_query_string_length));
    }
    if (m_record_application_tags_isSet) {
        obj.insert(QString("recordApplicationTags"), ::OpenAPI::toJsonValue(m_record_application_tags));
    }
    if (m_record_client_address_isSet) {
        obj.insert(QString("recordClientAddress"), ::OpenAPI::toJsonValue(m_record_client_address));
    }
    return obj;
}

qint32 OAIQueryInsightsInstanceConfig::getQueryPlansPerMinute() const {
    return m_query_plans_per_minute;
}
void OAIQueryInsightsInstanceConfig::setQueryPlansPerMinute(const qint32 &query_plans_per_minute) {
    m_query_plans_per_minute = query_plans_per_minute;
    m_query_plans_per_minute_isSet = true;
}

bool OAIQueryInsightsInstanceConfig::is_query_plans_per_minute_Set() const{
    return m_query_plans_per_minute_isSet;
}

bool OAIQueryInsightsInstanceConfig::is_query_plans_per_minute_Valid() const{
    return m_query_plans_per_minute_isValid;
}

qint32 OAIQueryInsightsInstanceConfig::getQueryStringLength() const {
    return m_query_string_length;
}
void OAIQueryInsightsInstanceConfig::setQueryStringLength(const qint32 &query_string_length) {
    m_query_string_length = query_string_length;
    m_query_string_length_isSet = true;
}

bool OAIQueryInsightsInstanceConfig::is_query_string_length_Set() const{
    return m_query_string_length_isSet;
}

bool OAIQueryInsightsInstanceConfig::is_query_string_length_Valid() const{
    return m_query_string_length_isValid;
}

bool OAIQueryInsightsInstanceConfig::isRecordApplicationTags() const {
    return m_record_application_tags;
}
void OAIQueryInsightsInstanceConfig::setRecordApplicationTags(const bool &record_application_tags) {
    m_record_application_tags = record_application_tags;
    m_record_application_tags_isSet = true;
}

bool OAIQueryInsightsInstanceConfig::is_record_application_tags_Set() const{
    return m_record_application_tags_isSet;
}

bool OAIQueryInsightsInstanceConfig::is_record_application_tags_Valid() const{
    return m_record_application_tags_isValid;
}

bool OAIQueryInsightsInstanceConfig::isRecordClientAddress() const {
    return m_record_client_address;
}
void OAIQueryInsightsInstanceConfig::setRecordClientAddress(const bool &record_client_address) {
    m_record_client_address = record_client_address;
    m_record_client_address_isSet = true;
}

bool OAIQueryInsightsInstanceConfig::is_record_client_address_Set() const{
    return m_record_client_address_isSet;
}

bool OAIQueryInsightsInstanceConfig::is_record_client_address_Valid() const{
    return m_record_client_address_isValid;
}

bool OAIQueryInsightsInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_plans_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_application_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_client_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInsightsInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
