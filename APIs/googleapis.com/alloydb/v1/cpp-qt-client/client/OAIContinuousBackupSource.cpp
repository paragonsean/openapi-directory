/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousBackupSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousBackupSource::OAIContinuousBackupSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousBackupSource::OAIContinuousBackupSource() {
    this->initializeModel();
}

OAIContinuousBackupSource::~OAIContinuousBackupSource() {}

void OAIContinuousBackupSource::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_point_in_time_isSet = false;
    m_point_in_time_isValid = false;
}

void OAIContinuousBackupSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousBackupSource::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_point_in_time, json[QString("pointInTime")]);
    m_point_in_time_isSet = !json[QString("pointInTime")].isNull() && m_point_in_time_isValid;
}

QString OAIContinuousBackupSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousBackupSource::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_point_in_time_isSet) {
        obj.insert(QString("pointInTime"), ::OpenAPI::toJsonValue(m_point_in_time));
    }
    return obj;
}

QString OAIContinuousBackupSource::getCluster() const {
    return m_cluster;
}
void OAIContinuousBackupSource::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIContinuousBackupSource::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIContinuousBackupSource::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIContinuousBackupSource::getPointInTime() const {
    return m_point_in_time;
}
void OAIContinuousBackupSource::setPointInTime(const QString &point_in_time) {
    m_point_in_time = point_in_time;
    m_point_in_time_isSet = true;
}

bool OAIContinuousBackupSource::is_point_in_time_Set() const{
    return m_point_in_time_isSet;
}

bool OAIContinuousBackupSource::is_point_in_time_Valid() const{
    return m_point_in_time_isValid;
}

bool OAIContinuousBackupSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousBackupSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
