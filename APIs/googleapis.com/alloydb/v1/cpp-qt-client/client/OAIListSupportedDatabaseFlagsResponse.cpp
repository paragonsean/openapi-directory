/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSupportedDatabaseFlagsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSupportedDatabaseFlagsResponse::OAIListSupportedDatabaseFlagsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSupportedDatabaseFlagsResponse::OAIListSupportedDatabaseFlagsResponse() {
    this->initializeModel();
}

OAIListSupportedDatabaseFlagsResponse::~OAIListSupportedDatabaseFlagsResponse() {}

void OAIListSupportedDatabaseFlagsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_supported_database_flags_isSet = false;
    m_supported_database_flags_isValid = false;
}

void OAIListSupportedDatabaseFlagsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSupportedDatabaseFlagsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_supported_database_flags_isValid = ::OpenAPI::fromJsonValue(m_supported_database_flags, json[QString("supportedDatabaseFlags")]);
    m_supported_database_flags_isSet = !json[QString("supportedDatabaseFlags")].isNull() && m_supported_database_flags_isValid;
}

QString OAIListSupportedDatabaseFlagsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSupportedDatabaseFlagsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_supported_database_flags.size() > 0) {
        obj.insert(QString("supportedDatabaseFlags"), ::OpenAPI::toJsonValue(m_supported_database_flags));
    }
    return obj;
}

QString OAIListSupportedDatabaseFlagsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListSupportedDatabaseFlagsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListSupportedDatabaseFlagsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListSupportedDatabaseFlagsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAISupportedDatabaseFlag> OAIListSupportedDatabaseFlagsResponse::getSupportedDatabaseFlags() const {
    return m_supported_database_flags;
}
void OAIListSupportedDatabaseFlagsResponse::setSupportedDatabaseFlags(const QList<OAISupportedDatabaseFlag> &supported_database_flags) {
    m_supported_database_flags = supported_database_flags;
    m_supported_database_flags_isSet = true;
}

bool OAIListSupportedDatabaseFlagsResponse::is_supported_database_flags_Set() const{
    return m_supported_database_flags_isSet;
}

bool OAIListSupportedDatabaseFlagsResponse::is_supported_database_flags_Valid() const{
    return m_supported_database_flags_isValid;
}

bool OAIListSupportedDatabaseFlagsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_database_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSupportedDatabaseFlagsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
