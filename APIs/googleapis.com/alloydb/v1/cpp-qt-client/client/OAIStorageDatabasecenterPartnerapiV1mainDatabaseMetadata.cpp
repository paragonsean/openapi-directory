/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::~OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata() {}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::initializeModel() {

    m_backup_configuration_isSet = false;
    m_backup_configuration_isValid = false;

    m_backup_run_isSet = false;
    m_backup_run_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::fromJsonObject(QJsonObject json) {

    m_backup_configuration_isValid = ::OpenAPI::fromJsonValue(m_backup_configuration, json[QString("backupConfiguration")]);
    m_backup_configuration_isSet = !json[QString("backupConfiguration")].isNull() && m_backup_configuration_isValid;

    m_backup_run_isValid = ::OpenAPI::fromJsonValue(m_backup_run, json[QString("backupRun")]);
    m_backup_run_isSet = !json[QString("backupRun")].isNull() && m_backup_run_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_configuration.isSet()) {
        obj.insert(QString("backupConfiguration"), ::OpenAPI::toJsonValue(m_backup_configuration));
    }
    if (m_backup_run.isSet()) {
        obj.insert(QString("backupRun"), ::OpenAPI::toJsonValue(m_backup_run));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::getBackupConfiguration() const {
    return m_backup_configuration;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::setBackupConfiguration(const OAIStorageDatabasecenterPartnerapiV1mainBackupConfiguration &backup_configuration) {
    m_backup_configuration = backup_configuration;
    m_backup_configuration_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_backup_configuration_Set() const{
    return m_backup_configuration_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_backup_configuration_Valid() const{
    return m_backup_configuration_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainBackupRun OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::getBackupRun() const {
    return m_backup_run;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::setBackupRun(const OAIStorageDatabasecenterPartnerapiV1mainBackupRun &backup_run) {
    m_backup_run = backup_run;
    m_backup_run_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_backup_run_Set() const{
    return m_backup_run_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_backup_run_Valid() const{
    return m_backup_run_isValid;
}

OAIStorageDatabasecenterProtoCommonProduct OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::getProduct() const {
    return m_product;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::setProduct(const OAIStorageDatabasecenterProtoCommonProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_product_Set() const{
    return m_product_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_product_Valid() const{
    return m_product_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceId OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::getResourceId() const {
    return m_resource_id;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::setResourceId(const OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::getResourceName() const {
    return m_resource_name;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
