/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateClientCertificateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateClientCertificateRequest::OAIGenerateClientCertificateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateClientCertificateRequest::OAIGenerateClientCertificateRequest() {
    this->initializeModel();
}

OAIGenerateClientCertificateRequest::~OAIGenerateClientCertificateRequest() {}

void OAIGenerateClientCertificateRequest::initializeModel() {

    m_cert_duration_isSet = false;
    m_cert_duration_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_use_metadata_exchange_isSet = false;
    m_use_metadata_exchange_isValid = false;
}

void OAIGenerateClientCertificateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateClientCertificateRequest::fromJsonObject(QJsonObject json) {

    m_cert_duration_isValid = ::OpenAPI::fromJsonValue(m_cert_duration, json[QString("certDuration")]);
    m_cert_duration_isSet = !json[QString("certDuration")].isNull() && m_cert_duration_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_use_metadata_exchange_isValid = ::OpenAPI::fromJsonValue(m_use_metadata_exchange, json[QString("useMetadataExchange")]);
    m_use_metadata_exchange_isSet = !json[QString("useMetadataExchange")].isNull() && m_use_metadata_exchange_isValid;
}

QString OAIGenerateClientCertificateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateClientCertificateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_duration_isSet) {
        obj.insert(QString("certDuration"), ::OpenAPI::toJsonValue(m_cert_duration));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_use_metadata_exchange_isSet) {
        obj.insert(QString("useMetadataExchange"), ::OpenAPI::toJsonValue(m_use_metadata_exchange));
    }
    return obj;
}

QString OAIGenerateClientCertificateRequest::getCertDuration() const {
    return m_cert_duration;
}
void OAIGenerateClientCertificateRequest::setCertDuration(const QString &cert_duration) {
    m_cert_duration = cert_duration;
    m_cert_duration_isSet = true;
}

bool OAIGenerateClientCertificateRequest::is_cert_duration_Set() const{
    return m_cert_duration_isSet;
}

bool OAIGenerateClientCertificateRequest::is_cert_duration_Valid() const{
    return m_cert_duration_isValid;
}

QString OAIGenerateClientCertificateRequest::getPublicKey() const {
    return m_public_key;
}
void OAIGenerateClientCertificateRequest::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIGenerateClientCertificateRequest::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIGenerateClientCertificateRequest::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIGenerateClientCertificateRequest::getRequestId() const {
    return m_request_id;
}
void OAIGenerateClientCertificateRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGenerateClientCertificateRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGenerateClientCertificateRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGenerateClientCertificateRequest::isUseMetadataExchange() const {
    return m_use_metadata_exchange;
}
void OAIGenerateClientCertificateRequest::setUseMetadataExchange(const bool &use_metadata_exchange) {
    m_use_metadata_exchange = use_metadata_exchange;
    m_use_metadata_exchange_isSet = true;
}

bool OAIGenerateClientCertificateRequest::is_use_metadata_exchange_Set() const{
    return m_use_metadata_exchange_isSet;
}

bool OAIGenerateClientCertificateRequest::is_use_metadata_exchange_Valid() const{
    return m_use_metadata_exchange_isValid;
}

bool OAIGenerateClientCertificateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_metadata_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateClientCertificateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
