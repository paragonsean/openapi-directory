/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryInsights Instance specific configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:04.527212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryInsightsInstanceConfig {
  public static final String SERIALIZED_NAME_QUERY_PLANS_PER_MINUTE = "queryPlansPerMinute";
  @SerializedName(SERIALIZED_NAME_QUERY_PLANS_PER_MINUTE)
  private Integer queryPlansPerMinute;

  public static final String SERIALIZED_NAME_QUERY_STRING_LENGTH = "queryStringLength";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_LENGTH)
  private Integer queryStringLength;

  public static final String SERIALIZED_NAME_RECORD_APPLICATION_TAGS = "recordApplicationTags";
  @SerializedName(SERIALIZED_NAME_RECORD_APPLICATION_TAGS)
  private Boolean recordApplicationTags;

  public static final String SERIALIZED_NAME_RECORD_CLIENT_ADDRESS = "recordClientAddress";
  @SerializedName(SERIALIZED_NAME_RECORD_CLIENT_ADDRESS)
  private Boolean recordClientAddress;

  public QueryInsightsInstanceConfig() {
  }

  public QueryInsightsInstanceConfig queryPlansPerMinute(Integer queryPlansPerMinute) {
    this.queryPlansPerMinute = queryPlansPerMinute;
    return this;
  }

  /**
   * Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
   * @return queryPlansPerMinute
   */
  @javax.annotation.Nullable
  public Integer getQueryPlansPerMinute() {
    return queryPlansPerMinute;
  }

  public void setQueryPlansPerMinute(Integer queryPlansPerMinute) {
    this.queryPlansPerMinute = queryPlansPerMinute;
  }


  public QueryInsightsInstanceConfig queryStringLength(Integer queryStringLength) {
    this.queryStringLength = queryStringLength;
    return this;
  }

  /**
   * Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
   * @return queryStringLength
   */
  @javax.annotation.Nullable
  public Integer getQueryStringLength() {
    return queryStringLength;
  }

  public void setQueryStringLength(Integer queryStringLength) {
    this.queryStringLength = queryStringLength;
  }


  public QueryInsightsInstanceConfig recordApplicationTags(Boolean recordApplicationTags) {
    this.recordApplicationTags = recordApplicationTags;
    return this;
  }

  /**
   * Record application tags for an instance. This flag is turned \&quot;on\&quot; by default.
   * @return recordApplicationTags
   */
  @javax.annotation.Nullable
  public Boolean getRecordApplicationTags() {
    return recordApplicationTags;
  }

  public void setRecordApplicationTags(Boolean recordApplicationTags) {
    this.recordApplicationTags = recordApplicationTags;
  }


  public QueryInsightsInstanceConfig recordClientAddress(Boolean recordClientAddress) {
    this.recordClientAddress = recordClientAddress;
    return this;
  }

  /**
   * Record client address for an instance. Client address is PII information. This flag is turned \&quot;on\&quot; by default.
   * @return recordClientAddress
   */
  @javax.annotation.Nullable
  public Boolean getRecordClientAddress() {
    return recordClientAddress;
  }

  public void setRecordClientAddress(Boolean recordClientAddress) {
    this.recordClientAddress = recordClientAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryInsightsInstanceConfig queryInsightsInstanceConfig = (QueryInsightsInstanceConfig) o;
    return Objects.equals(this.queryPlansPerMinute, queryInsightsInstanceConfig.queryPlansPerMinute) &&
        Objects.equals(this.queryStringLength, queryInsightsInstanceConfig.queryStringLength) &&
        Objects.equals(this.recordApplicationTags, queryInsightsInstanceConfig.recordApplicationTags) &&
        Objects.equals(this.recordClientAddress, queryInsightsInstanceConfig.recordClientAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryPlansPerMinute, queryStringLength, recordApplicationTags, recordClientAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryInsightsInstanceConfig {\n");
    sb.append("    queryPlansPerMinute: ").append(toIndentedString(queryPlansPerMinute)).append("\n");
    sb.append("    queryStringLength: ").append(toIndentedString(queryStringLength)).append("\n");
    sb.append("    recordApplicationTags: ").append(toIndentedString(recordApplicationTags)).append("\n");
    sb.append("    recordClientAddress: ").append(toIndentedString(recordClientAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryPlansPerMinute");
    openapiFields.add("queryStringLength");
    openapiFields.add("recordApplicationTags");
    openapiFields.add("recordClientAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryInsightsInstanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryInsightsInstanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryInsightsInstanceConfig is not found in the empty JSON string", QueryInsightsInstanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryInsightsInstanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryInsightsInstanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryInsightsInstanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryInsightsInstanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryInsightsInstanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryInsightsInstanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryInsightsInstanceConfig>() {
           @Override
           public void write(JsonWriter out, QueryInsightsInstanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryInsightsInstanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryInsightsInstanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryInsightsInstanceConfig
   * @throws IOException if the JSON string is invalid with respect to QueryInsightsInstanceConfig
   */
  public static QueryInsightsInstanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryInsightsInstanceConfig.class);
  }

  /**
   * Convert an instance of QueryInsightsInstanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

