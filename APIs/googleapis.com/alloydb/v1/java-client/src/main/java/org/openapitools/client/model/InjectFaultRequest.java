/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message for triggering fault injection on an instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:04.527212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InjectFaultRequest {
  /**
   * Required. The type of fault to be injected in an instance.
   */
  @JsonAdapter(FaultTypeEnum.Adapter.class)
  public enum FaultTypeEnum {
    FAULT_TYPE_UNSPECIFIED("FAULT_TYPE_UNSPECIFIED"),
    
    STOP_VM("STOP_VM");

    private String value;

    FaultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaultTypeEnum fromValue(String value) {
      for (FaultTypeEnum b : FaultTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FaultTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FaultTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAULT_TYPE = "faultType";
  @SerializedName(SERIALIZED_NAME_FAULT_TYPE)
  private FaultTypeEnum faultType;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public InjectFaultRequest() {
  }

  public InjectFaultRequest faultType(FaultTypeEnum faultType) {
    this.faultType = faultType;
    return this;
  }

  /**
   * Required. The type of fault to be injected in an instance.
   * @return faultType
   */
  @javax.annotation.Nullable
  public FaultTypeEnum getFaultType() {
    return faultType;
  }

  public void setFaultType(FaultTypeEnum faultType) {
    this.faultType = faultType;
  }


  public InjectFaultRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public InjectFaultRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the fault injection.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InjectFaultRequest injectFaultRequest = (InjectFaultRequest) o;
    return Objects.equals(this.faultType, injectFaultRequest.faultType) &&
        Objects.equals(this.requestId, injectFaultRequest.requestId) &&
        Objects.equals(this.validateOnly, injectFaultRequest.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faultType, requestId, validateOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InjectFaultRequest {\n");
    sb.append("    faultType: ").append(toIndentedString(faultType)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("faultType");
    openapiFields.add("requestId");
    openapiFields.add("validateOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InjectFaultRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InjectFaultRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InjectFaultRequest is not found in the empty JSON string", InjectFaultRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InjectFaultRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InjectFaultRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("faultType") != null && !jsonObj.get("faultType").isJsonNull()) && !jsonObj.get("faultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faultType").toString()));
      }
      // validate the optional field `faultType`
      if (jsonObj.get("faultType") != null && !jsonObj.get("faultType").isJsonNull()) {
        FaultTypeEnum.validateJsonElement(jsonObj.get("faultType"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InjectFaultRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InjectFaultRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InjectFaultRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InjectFaultRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InjectFaultRequest>() {
           @Override
           public void write(JsonWriter out, InjectFaultRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InjectFaultRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InjectFaultRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InjectFaultRequest
   * @throws IOException if the JSON string is invalid with respect to InjectFaultRequest
   */
  public static InjectFaultRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InjectFaultRequest.class);
  }

  /**
   * Convert an instance of InjectFaultRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

