/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContinuousBackupInfo describes the continuous backup properties of a cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:04.527212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContinuousBackupInfo {
  public static final String SERIALIZED_NAME_EARLIEST_RESTORABLE_TIME = "earliestRestorableTime";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORABLE_TIME)
  private String earliestRestorableTime;

  public static final String SERIALIZED_NAME_ENABLED_TIME = "enabledTime";
  @SerializedName(SERIALIZED_NAME_ENABLED_TIME)
  private String enabledTime;

  public static final String SERIALIZED_NAME_ENCRYPTION_INFO = "encryptionInfo";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_INFO)
  private EncryptionInfo encryptionInfo;

  /**
   * Gets or Sets schedule
   */
  @JsonAdapter(ScheduleEnum.Adapter.class)
  public enum ScheduleEnum {
    DAY_OF_WEEK_UNSPECIFIED("DAY_OF_WEEK_UNSPECIFIED"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    ScheduleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleEnum fromValue(String value) {
      for (ScheduleEnum b : ScheduleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private List<ScheduleEnum> schedule = new ArrayList<>();

  public ContinuousBackupInfo() {
  }

  public ContinuousBackupInfo(
     String earliestRestorableTime, 
     String enabledTime, 
     List<ScheduleEnum> schedule
  ) {
    this();
    this.earliestRestorableTime = earliestRestorableTime;
    this.enabledTime = enabledTime;
    this.schedule = schedule;
  }

  /**
   * Output only. The earliest restorable time that can be restored to. Output only field.
   * @return earliestRestorableTime
   */
  @javax.annotation.Nullable
  public String getEarliestRestorableTime() {
    return earliestRestorableTime;
  }



  /**
   * Output only. When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.
   * @return enabledTime
   */
  @javax.annotation.Nullable
  public String getEnabledTime() {
    return enabledTime;
  }



  public ContinuousBackupInfo encryptionInfo(EncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
    return this;
  }

  /**
   * Get encryptionInfo
   * @return encryptionInfo
   */
  @javax.annotation.Nullable
  public EncryptionInfo getEncryptionInfo() {
    return encryptionInfo;
  }

  public void setEncryptionInfo(EncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
  }


  /**
   * Output only. Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.
   * @return schedule
   */
  @javax.annotation.Nullable
  public List<ScheduleEnum> getSchedule() {
    return schedule;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinuousBackupInfo continuousBackupInfo = (ContinuousBackupInfo) o;
    return Objects.equals(this.earliestRestorableTime, continuousBackupInfo.earliestRestorableTime) &&
        Objects.equals(this.enabledTime, continuousBackupInfo.enabledTime) &&
        Objects.equals(this.encryptionInfo, continuousBackupInfo.encryptionInfo) &&
        Objects.equals(this.schedule, continuousBackupInfo.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earliestRestorableTime, enabledTime, encryptionInfo, schedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinuousBackupInfo {\n");
    sb.append("    earliestRestorableTime: ").append(toIndentedString(earliestRestorableTime)).append("\n");
    sb.append("    enabledTime: ").append(toIndentedString(enabledTime)).append("\n");
    sb.append("    encryptionInfo: ").append(toIndentedString(encryptionInfo)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("earliestRestorableTime");
    openapiFields.add("enabledTime");
    openapiFields.add("encryptionInfo");
    openapiFields.add("schedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinuousBackupInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinuousBackupInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinuousBackupInfo is not found in the empty JSON string", ContinuousBackupInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinuousBackupInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinuousBackupInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("earliestRestorableTime") != null && !jsonObj.get("earliestRestorableTime").isJsonNull()) && !jsonObj.get("earliestRestorableTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earliestRestorableTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earliestRestorableTime").toString()));
      }
      if ((jsonObj.get("enabledTime") != null && !jsonObj.get("enabledTime").isJsonNull()) && !jsonObj.get("enabledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enabledTime").toString()));
      }
      // validate the optional field `encryptionInfo`
      if (jsonObj.get("encryptionInfo") != null && !jsonObj.get("encryptionInfo").isJsonNull()) {
        EncryptionInfo.validateJsonElement(jsonObj.get("encryptionInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull() && !jsonObj.get("schedule").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be an array in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinuousBackupInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinuousBackupInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinuousBackupInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinuousBackupInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinuousBackupInfo>() {
           @Override
           public void write(JsonWriter out, ContinuousBackupInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinuousBackupInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinuousBackupInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinuousBackupInfo
   * @throws IOException if the JSON string is invalid with respect to ContinuousBackupInfo
   */
  public static ContinuousBackupInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinuousBackupInfo.class);
  }

  /**
   * Convert an instance of ContinuousBackupInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

