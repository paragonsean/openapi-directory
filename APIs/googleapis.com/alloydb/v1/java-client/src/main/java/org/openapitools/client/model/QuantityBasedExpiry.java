/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A backup&#39;s position in a quantity-based retention queue, of backups with the same source cluster and type, with length, retention, specified by the backup&#39;s retention policy. Once the position is greater than the retention, the backup is eligible to be garbage collected. Example: 5 backups from the same source cluster and type with a quantity-based retention of 3 and denoted by backup_id (position, retention). Safe: backup_5 (1, 3), backup_4, (2, 3), backup_3 (3, 3). Awaiting garbage collection: backup_2 (4, 3), backup_1 (5, 3)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:04.527212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuantityBasedExpiry {
  public static final String SERIALIZED_NAME_RETENTION_COUNT = "retentionCount";
  @SerializedName(SERIALIZED_NAME_RETENTION_COUNT)
  private Integer retentionCount;

  public static final String SERIALIZED_NAME_TOTAL_RETENTION_COUNT = "totalRetentionCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RETENTION_COUNT)
  private Integer totalRetentionCount;

  public QuantityBasedExpiry() {
  }

  public QuantityBasedExpiry(
     Integer retentionCount, 
     Integer totalRetentionCount
  ) {
    this();
    this.retentionCount = retentionCount;
    this.totalRetentionCount = totalRetentionCount;
  }

  /**
   * Output only. The backup&#39;s position among its backups with the same source cluster and type, by descending chronological order create time(i.e. newest first).
   * @return retentionCount
   */
  @javax.annotation.Nullable
  public Integer getRetentionCount() {
    return retentionCount;
  }



  /**
   * Output only. The length of the quantity-based queue, specified by the backup&#39;s retention policy.
   * @return totalRetentionCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRetentionCount() {
    return totalRetentionCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantityBasedExpiry quantityBasedExpiry = (QuantityBasedExpiry) o;
    return Objects.equals(this.retentionCount, quantityBasedExpiry.retentionCount) &&
        Objects.equals(this.totalRetentionCount, quantityBasedExpiry.totalRetentionCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retentionCount, totalRetentionCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantityBasedExpiry {\n");
    sb.append("    retentionCount: ").append(toIndentedString(retentionCount)).append("\n");
    sb.append("    totalRetentionCount: ").append(toIndentedString(totalRetentionCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("retentionCount");
    openapiFields.add("totalRetentionCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuantityBasedExpiry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuantityBasedExpiry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuantityBasedExpiry is not found in the empty JSON string", QuantityBasedExpiry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuantityBasedExpiry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuantityBasedExpiry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuantityBasedExpiry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuantityBasedExpiry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuantityBasedExpiry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuantityBasedExpiry.class));

       return (TypeAdapter<T>) new TypeAdapter<QuantityBasedExpiry>() {
           @Override
           public void write(JsonWriter out, QuantityBasedExpiry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuantityBasedExpiry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuantityBasedExpiry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuantityBasedExpiry
   * @throws IOException if the JSON string is invalid with respect to QuantityBasedExpiry
   */
  public static QuantityBasedExpiry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuantityBasedExpiry.class);
  }

  /**
   * Convert an instance of QuantityBasedExpiry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

