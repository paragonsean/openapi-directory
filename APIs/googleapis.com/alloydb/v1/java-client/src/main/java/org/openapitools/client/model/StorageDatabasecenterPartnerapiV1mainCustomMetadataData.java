/*
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StorageDatabasecenterPartnerapiV1mainDatabaseMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any custom metadata associated with the resource. i.e. A spanner instance can have multiple databases with its own unique metadata. Information for these individual databases can be captured in custom metadata data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:04.527212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageDatabasecenterPartnerapiV1mainCustomMetadataData {
  public static final String SERIALIZED_NAME_DATABASE_METADATA = "databaseMetadata";
  @SerializedName(SERIALIZED_NAME_DATABASE_METADATA)
  private List<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata> databaseMetadata = new ArrayList<>();

  public StorageDatabasecenterPartnerapiV1mainCustomMetadataData() {
  }

  public StorageDatabasecenterPartnerapiV1mainCustomMetadataData databaseMetadata(List<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata> databaseMetadata) {
    this.databaseMetadata = databaseMetadata;
    return this;
  }

  public StorageDatabasecenterPartnerapiV1mainCustomMetadataData addDatabaseMetadataItem(StorageDatabasecenterPartnerapiV1mainDatabaseMetadata databaseMetadataItem) {
    if (this.databaseMetadata == null) {
      this.databaseMetadata = new ArrayList<>();
    }
    this.databaseMetadata.add(databaseMetadataItem);
    return this;
  }

  /**
   * Get databaseMetadata
   * @return databaseMetadata
   */
  @javax.annotation.Nullable
  public List<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata> getDatabaseMetadata() {
    return databaseMetadata;
  }

  public void setDatabaseMetadata(List<StorageDatabasecenterPartnerapiV1mainDatabaseMetadata> databaseMetadata) {
    this.databaseMetadata = databaseMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDatabasecenterPartnerapiV1mainCustomMetadataData storageDatabasecenterPartnerapiV1mainCustomMetadataData = (StorageDatabasecenterPartnerapiV1mainCustomMetadataData) o;
    return Objects.equals(this.databaseMetadata, storageDatabasecenterPartnerapiV1mainCustomMetadataData.databaseMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDatabasecenterPartnerapiV1mainCustomMetadataData {\n");
    sb.append("    databaseMetadata: ").append(toIndentedString(databaseMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageDatabasecenterPartnerapiV1mainCustomMetadataData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageDatabasecenterPartnerapiV1mainCustomMetadataData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageDatabasecenterPartnerapiV1mainCustomMetadataData is not found in the empty JSON string", StorageDatabasecenterPartnerapiV1mainCustomMetadataData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageDatabasecenterPartnerapiV1mainCustomMetadataData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageDatabasecenterPartnerapiV1mainCustomMetadataData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("databaseMetadata") != null && !jsonObj.get("databaseMetadata").isJsonNull()) {
        JsonArray jsonArraydatabaseMetadata = jsonObj.getAsJsonArray("databaseMetadata");
        if (jsonArraydatabaseMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("databaseMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `databaseMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("databaseMetadata").toString()));
          }

          // validate the optional field `databaseMetadata` (array)
          for (int i = 0; i < jsonArraydatabaseMetadata.size(); i++) {
            StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.validateJsonElement(jsonArraydatabaseMetadata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageDatabasecenterPartnerapiV1mainCustomMetadataData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageDatabasecenterPartnerapiV1mainCustomMetadataData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageDatabasecenterPartnerapiV1mainCustomMetadataData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageDatabasecenterPartnerapiV1mainCustomMetadataData.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageDatabasecenterPartnerapiV1mainCustomMetadataData>() {
           @Override
           public void write(JsonWriter out, StorageDatabasecenterPartnerapiV1mainCustomMetadataData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageDatabasecenterPartnerapiV1mainCustomMetadataData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageDatabasecenterPartnerapiV1mainCustomMetadataData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageDatabasecenterPartnerapiV1mainCustomMetadataData
   * @throws IOException if the JSON string is invalid with respect to StorageDatabasecenterPartnerapiV1mainCustomMetadataData
   */
  public static StorageDatabasecenterPartnerapiV1mainCustomMetadataData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageDatabasecenterPartnerapiV1mainCustomMetadataData.class);
  }

  /**
   * Convert an instance of StorageDatabasecenterPartnerapiV1mainCustomMetadataData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

