# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automated_backup_policy import AutomatedBackupPolicy
from openapi_server.models.backup_source import BackupSource
from openapi_server.models.continuous_backup_config import ContinuousBackupConfig
from openapi_server.models.continuous_backup_info import ContinuousBackupInfo
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.encryption_info import EncryptionInfo
from openapi_server.models.migration_source import MigrationSource
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.primary_config import PrimaryConfig
from openapi_server.models.secondary_config import SecondaryConfig
from openapi_server.models.ssl_config import SslConfig
from openapi_server.models.user_password import UserPassword
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, automated_backup_policy: AutomatedBackupPolicy=None, backup_source: BackupSource=None, cluster_type: str=None, continuous_backup_config: ContinuousBackupConfig=None, continuous_backup_info: ContinuousBackupInfo=None, create_time: str=None, database_version: str=None, delete_time: str=None, display_name: str=None, encryption_config: EncryptionConfig=None, encryption_info: EncryptionInfo=None, etag: str=None, initial_user: UserPassword=None, labels: Dict[str, str]=None, migration_source: MigrationSource=None, name: str=None, network: str=None, network_config: NetworkConfig=None, primary_config: PrimaryConfig=None, reconciling: bool=None, satisfies_pzs: bool=None, secondary_config: SecondaryConfig=None, ssl_config: SslConfig=None, state: str=None, uid: str=None, update_time: str=None):
        """Cluster - a model defined in OpenAPI

        :param annotations: The annotations of this Cluster.
        :param automated_backup_policy: The automated_backup_policy of this Cluster.
        :param backup_source: The backup_source of this Cluster.
        :param cluster_type: The cluster_type of this Cluster.
        :param continuous_backup_config: The continuous_backup_config of this Cluster.
        :param continuous_backup_info: The continuous_backup_info of this Cluster.
        :param create_time: The create_time of this Cluster.
        :param database_version: The database_version of this Cluster.
        :param delete_time: The delete_time of this Cluster.
        :param display_name: The display_name of this Cluster.
        :param encryption_config: The encryption_config of this Cluster.
        :param encryption_info: The encryption_info of this Cluster.
        :param etag: The etag of this Cluster.
        :param initial_user: The initial_user of this Cluster.
        :param labels: The labels of this Cluster.
        :param migration_source: The migration_source of this Cluster.
        :param name: The name of this Cluster.
        :param network: The network of this Cluster.
        :param network_config: The network_config of this Cluster.
        :param primary_config: The primary_config of this Cluster.
        :param reconciling: The reconciling of this Cluster.
        :param satisfies_pzs: The satisfies_pzs of this Cluster.
        :param secondary_config: The secondary_config of this Cluster.
        :param ssl_config: The ssl_config of this Cluster.
        :param state: The state of this Cluster.
        :param uid: The uid of this Cluster.
        :param update_time: The update_time of this Cluster.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'automated_backup_policy': AutomatedBackupPolicy,
            'backup_source': BackupSource,
            'cluster_type': str,
            'continuous_backup_config': ContinuousBackupConfig,
            'continuous_backup_info': ContinuousBackupInfo,
            'create_time': str,
            'database_version': str,
            'delete_time': str,
            'display_name': str,
            'encryption_config': EncryptionConfig,
            'encryption_info': EncryptionInfo,
            'etag': str,
            'initial_user': UserPassword,
            'labels': Dict[str, str],
            'migration_source': MigrationSource,
            'name': str,
            'network': str,
            'network_config': NetworkConfig,
            'primary_config': PrimaryConfig,
            'reconciling': bool,
            'satisfies_pzs': bool,
            'secondary_config': SecondaryConfig,
            'ssl_config': SslConfig,
            'state': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'automated_backup_policy': 'automatedBackupPolicy',
            'backup_source': 'backupSource',
            'cluster_type': 'clusterType',
            'continuous_backup_config': 'continuousBackupConfig',
            'continuous_backup_info': 'continuousBackupInfo',
            'create_time': 'createTime',
            'database_version': 'databaseVersion',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'encryption_config': 'encryptionConfig',
            'encryption_info': 'encryptionInfo',
            'etag': 'etag',
            'initial_user': 'initialUser',
            'labels': 'labels',
            'migration_source': 'migrationSource',
            'name': 'name',
            'network': 'network',
            'network_config': 'networkConfig',
            'primary_config': 'primaryConfig',
            'reconciling': 'reconciling',
            'satisfies_pzs': 'satisfiesPzs',
            'secondary_config': 'secondaryConfig',
            'ssl_config': 'sslConfig',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._automated_backup_policy = automated_backup_policy
        self._backup_source = backup_source
        self._cluster_type = cluster_type
        self._continuous_backup_config = continuous_backup_config
        self._continuous_backup_info = continuous_backup_info
        self._create_time = create_time
        self._database_version = database_version
        self._delete_time = delete_time
        self._display_name = display_name
        self._encryption_config = encryption_config
        self._encryption_info = encryption_info
        self._etag = etag
        self._initial_user = initial_user
        self._labels = labels
        self._migration_source = migration_source
        self._name = name
        self._network = network
        self._network_config = network_config
        self._primary_config = primary_config
        self._reconciling = reconciling
        self._satisfies_pzs = satisfies_pzs
        self._secondary_config = secondary_config
        self._ssl_config = ssl_config
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Cluster.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :return: The annotations of this Cluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Cluster.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :param annotations: The annotations of this Cluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def automated_backup_policy(self):
        """Gets the automated_backup_policy of this Cluster.


        :return: The automated_backup_policy of this Cluster.
        :rtype: AutomatedBackupPolicy
        """
        return self._automated_backup_policy

    @automated_backup_policy.setter
    def automated_backup_policy(self, automated_backup_policy):
        """Sets the automated_backup_policy of this Cluster.


        :param automated_backup_policy: The automated_backup_policy of this Cluster.
        :type automated_backup_policy: AutomatedBackupPolicy
        """

        self._automated_backup_policy = automated_backup_policy

    @property
    def backup_source(self):
        """Gets the backup_source of this Cluster.


        :return: The backup_source of this Cluster.
        :rtype: BackupSource
        """
        return self._backup_source

    @backup_source.setter
    def backup_source(self, backup_source):
        """Sets the backup_source of this Cluster.


        :param backup_source: The backup_source of this Cluster.
        :type backup_source: BackupSource
        """

        self._backup_source = backup_source

    @property
    def cluster_type(self):
        """Gets the cluster_type of this Cluster.

        Output only. The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`

        :return: The cluster_type of this Cluster.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this Cluster.

        Output only. The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`

        :param cluster_type: The cluster_type of this Cluster.
        :type cluster_type: str
        """
        allowed_values = ["CLUSTER_TYPE_UNSPECIFIED", "PRIMARY", "SECONDARY"]  # noqa: E501
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def continuous_backup_config(self):
        """Gets the continuous_backup_config of this Cluster.


        :return: The continuous_backup_config of this Cluster.
        :rtype: ContinuousBackupConfig
        """
        return self._continuous_backup_config

    @continuous_backup_config.setter
    def continuous_backup_config(self, continuous_backup_config):
        """Sets the continuous_backup_config of this Cluster.


        :param continuous_backup_config: The continuous_backup_config of this Cluster.
        :type continuous_backup_config: ContinuousBackupConfig
        """

        self._continuous_backup_config = continuous_backup_config

    @property
    def continuous_backup_info(self):
        """Gets the continuous_backup_info of this Cluster.


        :return: The continuous_backup_info of this Cluster.
        :rtype: ContinuousBackupInfo
        """
        return self._continuous_backup_info

    @continuous_backup_info.setter
    def continuous_backup_info(self, continuous_backup_info):
        """Sets the continuous_backup_info of this Cluster.


        :param continuous_backup_info: The continuous_backup_info of this Cluster.
        :type continuous_backup_info: ContinuousBackupInfo
        """

        self._continuous_backup_info = continuous_backup_info

    @property
    def create_time(self):
        """Gets the create_time of this Cluster.

        Output only. Create time stamp

        :return: The create_time of this Cluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Cluster.

        Output only. Create time stamp

        :param create_time: The create_time of this Cluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_version(self):
        """Gets the database_version of this Cluster.

        Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.

        :return: The database_version of this Cluster.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this Cluster.

        Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.

        :param database_version: The database_version of this Cluster.
        :type database_version: str
        """
        allowed_values = ["DATABASE_VERSION_UNSPECIFIED", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def delete_time(self):
        """Gets the delete_time of this Cluster.

        Output only. Delete time stamp

        :return: The delete_time of this Cluster.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Cluster.

        Output only. Delete time stamp

        :param delete_time: The delete_time of this Cluster.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Cluster.

        User-settable and human-readable display name for the Cluster.

        :return: The display_name of this Cluster.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Cluster.

        User-settable and human-readable display name for the Cluster.

        :param display_name: The display_name of this Cluster.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def encryption_config(self):
        """Gets the encryption_config of this Cluster.


        :return: The encryption_config of this Cluster.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this Cluster.


        :param encryption_config: The encryption_config of this Cluster.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def encryption_info(self):
        """Gets the encryption_info of this Cluster.


        :return: The encryption_info of this Cluster.
        :rtype: EncryptionInfo
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this Cluster.


        :param encryption_info: The encryption_info of this Cluster.
        :type encryption_info: EncryptionInfo
        """

        self._encryption_info = encryption_info

    @property
    def etag(self):
        """Gets the etag of this Cluster.

        For Resource freshness validation (https://google.aip.dev/154)

        :return: The etag of this Cluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Cluster.

        For Resource freshness validation (https://google.aip.dev/154)

        :param etag: The etag of this Cluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def initial_user(self):
        """Gets the initial_user of this Cluster.


        :return: The initial_user of this Cluster.
        :rtype: UserPassword
        """
        return self._initial_user

    @initial_user.setter
    def initial_user(self, initial_user):
        """Sets the initial_user of this Cluster.


        :param initial_user: The initial_user of this Cluster.
        :type initial_user: UserPassword
        """

        self._initial_user = initial_user

    @property
    def labels(self):
        """Gets the labels of this Cluster.

        Labels as key value pairs

        :return: The labels of this Cluster.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Cluster.

        Labels as key value pairs

        :param labels: The labels of this Cluster.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def migration_source(self):
        """Gets the migration_source of this Cluster.


        :return: The migration_source of this Cluster.
        :rtype: MigrationSource
        """
        return self._migration_source

    @migration_source.setter
    def migration_source(self, migration_source):
        """Sets the migration_source of this Cluster.


        :param migration_source: The migration_source of this Cluster.
        :type migration_source: MigrationSource
        """

        self._migration_source = migration_source

    @property
    def name(self):
        """Gets the name of this Cluster.

        Output only. The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        Output only. The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}

        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Cluster.

        Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: `projects/{project}/global/networks/{network_id}`. This is required to create a cluster. Deprecated, use network_config.network instead.

        :return: The network of this Cluster.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Cluster.

        Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: `projects/{project}/global/networks/{network_id}`. This is required to create a cluster. Deprecated, use network_config.network instead.

        :param network: The network of this Cluster.
        :type network: str
        """

        self._network = network

    @property
    def network_config(self):
        """Gets the network_config of this Cluster.


        :return: The network_config of this Cluster.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Cluster.


        :param network_config: The network_config of this Cluster.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def primary_config(self):
        """Gets the primary_config of this Cluster.


        :return: The primary_config of this Cluster.
        :rtype: PrimaryConfig
        """
        return self._primary_config

    @primary_config.setter
    def primary_config(self, primary_config):
        """Sets the primary_config of this Cluster.


        :param primary_config: The primary_config of this Cluster.
        :type primary_config: PrimaryConfig
        """

        self._primary_config = primary_config

    @property
    def reconciling(self):
        """Gets the reconciling of this Cluster.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :return: The reconciling of this Cluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Cluster.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :param reconciling: The reconciling of this Cluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Cluster.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Cluster.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Cluster.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Cluster.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def secondary_config(self):
        """Gets the secondary_config of this Cluster.


        :return: The secondary_config of this Cluster.
        :rtype: SecondaryConfig
        """
        return self._secondary_config

    @secondary_config.setter
    def secondary_config(self, secondary_config):
        """Sets the secondary_config of this Cluster.


        :param secondary_config: The secondary_config of this Cluster.
        :type secondary_config: SecondaryConfig
        """

        self._secondary_config = secondary_config

    @property
    def ssl_config(self):
        """Gets the ssl_config of this Cluster.


        :return: The ssl_config of this Cluster.
        :rtype: SslConfig
        """
        return self._ssl_config

    @ssl_config.setter
    def ssl_config(self, ssl_config):
        """Sets the ssl_config of this Cluster.


        :param ssl_config: The ssl_config of this Cluster.
        :type ssl_config: SslConfig
        """

        self._ssl_config = ssl_config

    @property
    def state(self):
        """Gets the state of this Cluster.

        Output only. The current serving state of the cluster.

        :return: The state of this Cluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.

        Output only. The current serving state of the cluster.

        :param state: The state of this Cluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "STOPPED", "EMPTY", "CREATING", "DELETING", "FAILED", "BOOTSTRAPPING", "MAINTENANCE", "PROMOTING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Cluster.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :return: The uid of this Cluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Cluster.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :param uid: The uid of this Cluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Cluster.

        Output only. Update time stamp

        :return: The update_time of this Cluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Cluster.

        Output only. Update time stamp

        :param update_time: The update_time of this Cluster.
        :type update_time: str
        """

        self._update_time = update_time
