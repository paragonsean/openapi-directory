# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateClientCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_duration: str=None, public_key: str=None, request_id: str=None, use_metadata_exchange: bool=None):
        """GenerateClientCertificateRequest - a model defined in OpenAPI

        :param cert_duration: The cert_duration of this GenerateClientCertificateRequest.
        :param public_key: The public_key of this GenerateClientCertificateRequest.
        :param request_id: The request_id of this GenerateClientCertificateRequest.
        :param use_metadata_exchange: The use_metadata_exchange of this GenerateClientCertificateRequest.
        """
        self.openapi_types = {
            'cert_duration': str,
            'public_key': str,
            'request_id': str,
            'use_metadata_exchange': bool
        }

        self.attribute_map = {
            'cert_duration': 'certDuration',
            'public_key': 'publicKey',
            'request_id': 'requestId',
            'use_metadata_exchange': 'useMetadataExchange'
        }

        self._cert_duration = cert_duration
        self._public_key = public_key
        self._request_id = request_id
        self._use_metadata_exchange = use_metadata_exchange

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateClientCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateClientCertificateRequest of this GenerateClientCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_duration(self):
        """Gets the cert_duration of this GenerateClientCertificateRequest.

        Optional. An optional hint to the endpoint to generate the client certificate with the requested duration. The duration can be from 1 hour to 24 hours. The endpoint may or may not honor the hint. If the hint is left unspecified or is not honored, then the endpoint will pick an appropriate default duration.

        :return: The cert_duration of this GenerateClientCertificateRequest.
        :rtype: str
        """
        return self._cert_duration

    @cert_duration.setter
    def cert_duration(self, cert_duration):
        """Sets the cert_duration of this GenerateClientCertificateRequest.

        Optional. An optional hint to the endpoint to generate the client certificate with the requested duration. The duration can be from 1 hour to 24 hours. The endpoint may or may not honor the hint. If the hint is left unspecified or is not honored, then the endpoint will pick an appropriate default duration.

        :param cert_duration: The cert_duration of this GenerateClientCertificateRequest.
        :type cert_duration: str
        """

        self._cert_duration = cert_duration

    @property
    def public_key(self):
        """Gets the public_key of this GenerateClientCertificateRequest.

        Optional. The public key from the client.

        :return: The public_key of this GenerateClientCertificateRequest.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this GenerateClientCertificateRequest.

        Optional. The public key from the client.

        :param public_key: The public_key of this GenerateClientCertificateRequest.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def request_id(self):
        """Gets the request_id of this GenerateClientCertificateRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this GenerateClientCertificateRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GenerateClientCertificateRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this GenerateClientCertificateRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def use_metadata_exchange(self):
        """Gets the use_metadata_exchange of this GenerateClientCertificateRequest.

        Optional. An optional hint to the endpoint to generate a client ceritificate that can be used by AlloyDB connectors to exchange additional metadata with the server after TLS handshake.

        :return: The use_metadata_exchange of this GenerateClientCertificateRequest.
        :rtype: bool
        """
        return self._use_metadata_exchange

    @use_metadata_exchange.setter
    def use_metadata_exchange(self, use_metadata_exchange):
        """Sets the use_metadata_exchange of this GenerateClientCertificateRequest.

        Optional. An optional hint to the endpoint to generate a client ceritificate that can be used by AlloyDB connectors to exchange additional metadata with the server after TLS handshake.

        :param use_metadata_exchange: The use_metadata_exchange of this GenerateClientCertificateRequest.
        :type use_metadata_exchange: bool
        """

        self._use_metadata_exchange = use_metadata_exchange
