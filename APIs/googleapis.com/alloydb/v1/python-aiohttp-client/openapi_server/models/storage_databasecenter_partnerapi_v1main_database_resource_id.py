# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainDatabaseResourceId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provider: str=None, provider_description: str=None, resource_type: str=None, unique_id: str=None):
        """StorageDatabasecenterPartnerapiV1mainDatabaseResourceId - a model defined in OpenAPI

        :param provider: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :param provider_description: The provider_description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :param resource_type: The resource_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :param unique_id: The unique_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        """
        self.openapi_types = {
            'provider': str,
            'provider_description': str,
            'resource_type': str,
            'unique_id': str
        }

        self.attribute_map = {
            'provider': 'provider',
            'provider_description': 'providerDescription',
            'resource_type': 'resourceType',
            'unique_id': 'uniqueId'
        }

        self._provider = provider
        self._provider_description = provider_description
        self._resource_type = resource_type
        self._unique_id = unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainDatabaseResourceId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainDatabaseResourceId of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider(self):
        """Gets the provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged

        :return: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged

        :param provider: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :type provider: str
        """
        allowed_values = ["PROVIDER_UNSPECIFIED", "GCP", "AWS", "AZURE", "ONPREM", "SELFMANAGED", "PROVIDER_OTHER"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def provider_description(self):
        """Gets the provider_description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Optional. Needs to be used only when the provider is PROVIDER_OTHER.

        :return: The provider_description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :rtype: str
        """
        return self._provider_description

    @provider_description.setter
    def provider_description(self, provider_description):
        """Sets the provider_description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Optional. Needs to be used only when the provider is PROVIDER_OTHER.

        :param provider_description: The provider_description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :type provider_description: str
        """

        self._provider_description = provider_description

    @property
    def resource_type(self):
        """Gets the resource_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. The type of resource this ID is identifying. Ex redis.googleapis.com/Instance, redis.googleapis.com/Cluster, alloydb.googleapis.com/Cluster, alloydb.googleapis.com/Instance, spanner.googleapis.com/Instance REQUIRED Please refer go/condor-common-datamodel

        :return: The resource_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. The type of resource this ID is identifying. Ex redis.googleapis.com/Instance, redis.googleapis.com/Cluster, alloydb.googleapis.com/Cluster, alloydb.googleapis.com/Instance, spanner.googleapis.com/Instance REQUIRED Please refer go/condor-common-datamodel

        :param resource_type: The resource_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def unique_id(self):
        """Gets the unique_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. A service-local token that distinguishes this resource from other resources within the same service.

        :return: The unique_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.

        Required. A service-local token that distinguishes this resource from other resources within the same service.

        :param unique_id: The unique_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.
        :type unique_id: str
        """

        self._unique_id = unique_id
