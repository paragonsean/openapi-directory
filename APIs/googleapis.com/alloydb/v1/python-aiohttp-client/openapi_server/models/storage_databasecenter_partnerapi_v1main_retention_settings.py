# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainRetentionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity_based_retention: int=None, retention_unit: str=None, time_based_retention: str=None):
        """StorageDatabasecenterPartnerapiV1mainRetentionSettings - a model defined in OpenAPI

        :param quantity_based_retention: The quantity_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :param retention_unit: The retention_unit of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :param time_based_retention: The time_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        """
        self.openapi_types = {
            'quantity_based_retention': int,
            'retention_unit': str,
            'time_based_retention': str
        }

        self.attribute_map = {
            'quantity_based_retention': 'quantityBasedRetention',
            'retention_unit': 'retentionUnit',
            'time_based_retention': 'timeBasedRetention'
        }

        self._quantity_based_retention = quantity_based_retention
        self._retention_unit = retention_unit
        self._time_based_retention = time_based_retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainRetentionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainRetentionSettings of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity_based_retention(self):
        """Gets the quantity_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.


        :return: The quantity_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :rtype: int
        """
        return self._quantity_based_retention

    @quantity_based_retention.setter
    def quantity_based_retention(self, quantity_based_retention):
        """Sets the quantity_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.


        :param quantity_based_retention: The quantity_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :type quantity_based_retention: int
        """

        self._quantity_based_retention = quantity_based_retention

    @property
    def retention_unit(self):
        """Gets the retention_unit of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.

        The unit that 'retained_backups' represents.

        :return: The retention_unit of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :rtype: str
        """
        return self._retention_unit

    @retention_unit.setter
    def retention_unit(self, retention_unit):
        """Sets the retention_unit of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.

        The unit that 'retained_backups' represents.

        :param retention_unit: The retention_unit of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :type retention_unit: str
        """
        allowed_values = ["RETENTION_UNIT_UNSPECIFIED", "COUNT", "TIME", "RETENTION_UNIT_OTHER"]  # noqa: E501
        if retention_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `retention_unit` ({0}), must be one of {1}"
                .format(retention_unit, allowed_values)
            )

        self._retention_unit = retention_unit

    @property
    def time_based_retention(self):
        """Gets the time_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.


        :return: The time_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :rtype: str
        """
        return self._time_based_retention

    @time_based_retention.setter
    def time_based_retention(self, time_based_retention):
        """Sets the time_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.


        :param time_based_retention: The time_based_retention of this StorageDatabasecenterPartnerapiV1mainRetentionSettings.
        :type time_based_retention: str
        """

        self._time_based_retention = time_based_retention
