# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_uid: str=None, ip_address: str=None, name: str=None):
        """ConnectionInfo - a model defined in OpenAPI

        :param instance_uid: The instance_uid of this ConnectionInfo.
        :param ip_address: The ip_address of this ConnectionInfo.
        :param name: The name of this ConnectionInfo.
        """
        self.openapi_types = {
            'instance_uid': str,
            'ip_address': str,
            'name': str
        }

        self.attribute_map = {
            'instance_uid': 'instanceUid',
            'ip_address': 'ipAddress',
            'name': 'name'
        }

        self._instance_uid = instance_uid
        self._ip_address = ip_address
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionInfo of this ConnectionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_uid(self):
        """Gets the instance_uid of this ConnectionInfo.

        Output only. The unique ID of the Instance.

        :return: The instance_uid of this ConnectionInfo.
        :rtype: str
        """
        return self._instance_uid

    @instance_uid.setter
    def instance_uid(self, instance_uid):
        """Sets the instance_uid of this ConnectionInfo.

        Output only. The unique ID of the Instance.

        :param instance_uid: The instance_uid of this ConnectionInfo.
        :type instance_uid: str
        """

        self._instance_uid = instance_uid

    @property
    def ip_address(self):
        """Gets the ip_address of this ConnectionInfo.

        Output only. The private network IP address for the Instance. This is the default IP for the instance and is always created (even if enable_public_ip is set). This is the connection endpoint for an end-user application.

        :return: The ip_address of this ConnectionInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ConnectionInfo.

        Output only. The private network IP address for the Instance. This is the default IP for the instance and is always created (even if enable_public_ip is set). This is the connection endpoint for an end-user application.

        :param ip_address: The ip_address of this ConnectionInfo.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this ConnectionInfo.

        The name of the ConnectionInfo singleton resource, e.g.: projects/{project}/locations/{location}/clusters/*/instances/*/connectionInfo This field currently has no semantic meaning.

        :return: The name of this ConnectionInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionInfo.

        The name of the ConnectionInfo singleton resource, e.g.: projects/{project}/locations/{location}/clusters/*/instances/*/connectionInfo This field currently has no semantic meaning.

        :param name: The name of this ConnectionInfo.
        :type name: str
        """

        self._name = name
