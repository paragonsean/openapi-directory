# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.quantity_based_retention import QuantityBasedRetention
from openapi_server.models.time_based_retention import TimeBasedRetention
from openapi_server.models.weekly_schedule import WeeklySchedule
from openapi_server import util


class AutomatedBackupPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_window: str=None, enabled: bool=None, encryption_config: EncryptionConfig=None, labels: Dict[str, str]=None, location: str=None, quantity_based_retention: QuantityBasedRetention=None, time_based_retention: TimeBasedRetention=None, weekly_schedule: WeeklySchedule=None):
        """AutomatedBackupPolicy - a model defined in OpenAPI

        :param backup_window: The backup_window of this AutomatedBackupPolicy.
        :param enabled: The enabled of this AutomatedBackupPolicy.
        :param encryption_config: The encryption_config of this AutomatedBackupPolicy.
        :param labels: The labels of this AutomatedBackupPolicy.
        :param location: The location of this AutomatedBackupPolicy.
        :param quantity_based_retention: The quantity_based_retention of this AutomatedBackupPolicy.
        :param time_based_retention: The time_based_retention of this AutomatedBackupPolicy.
        :param weekly_schedule: The weekly_schedule of this AutomatedBackupPolicy.
        """
        self.openapi_types = {
            'backup_window': str,
            'enabled': bool,
            'encryption_config': EncryptionConfig,
            'labels': Dict[str, str],
            'location': str,
            'quantity_based_retention': QuantityBasedRetention,
            'time_based_retention': TimeBasedRetention,
            'weekly_schedule': WeeklySchedule
        }

        self.attribute_map = {
            'backup_window': 'backupWindow',
            'enabled': 'enabled',
            'encryption_config': 'encryptionConfig',
            'labels': 'labels',
            'location': 'location',
            'quantity_based_retention': 'quantityBasedRetention',
            'time_based_retention': 'timeBasedRetention',
            'weekly_schedule': 'weeklySchedule'
        }

        self._backup_window = backup_window
        self._enabled = enabled
        self._encryption_config = encryption_config
        self._labels = labels
        self._location = location
        self._quantity_based_retention = quantity_based_retention
        self._time_based_retention = time_based_retention
        self._weekly_schedule = weekly_schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomatedBackupPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomatedBackupPolicy of this AutomatedBackupPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_window(self):
        """Gets the backup_window of this AutomatedBackupPolicy.

        The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.

        :return: The backup_window of this AutomatedBackupPolicy.
        :rtype: str
        """
        return self._backup_window

    @backup_window.setter
    def backup_window(self, backup_window):
        """Sets the backup_window of this AutomatedBackupPolicy.

        The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.

        :param backup_window: The backup_window of this AutomatedBackupPolicy.
        :type backup_window: str
        """

        self._backup_window = backup_window

    @property
    def enabled(self):
        """Gets the enabled of this AutomatedBackupPolicy.

        Whether automated automated backups are enabled. If not set, defaults to true.

        :return: The enabled of this AutomatedBackupPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutomatedBackupPolicy.

        Whether automated automated backups are enabled. If not set, defaults to true.

        :param enabled: The enabled of this AutomatedBackupPolicy.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption_config(self):
        """Gets the encryption_config of this AutomatedBackupPolicy.


        :return: The encryption_config of this AutomatedBackupPolicy.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this AutomatedBackupPolicy.


        :param encryption_config: The encryption_config of this AutomatedBackupPolicy.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def labels(self):
        """Gets the labels of this AutomatedBackupPolicy.

        Labels to apply to backups created using this configuration.

        :return: The labels of this AutomatedBackupPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AutomatedBackupPolicy.

        Labels to apply to backups created using this configuration.

        :param labels: The labels of this AutomatedBackupPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this AutomatedBackupPolicy.

        The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.

        :return: The location of this AutomatedBackupPolicy.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AutomatedBackupPolicy.

        The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.

        :param location: The location of this AutomatedBackupPolicy.
        :type location: str
        """

        self._location = location

    @property
    def quantity_based_retention(self):
        """Gets the quantity_based_retention of this AutomatedBackupPolicy.


        :return: The quantity_based_retention of this AutomatedBackupPolicy.
        :rtype: QuantityBasedRetention
        """
        return self._quantity_based_retention

    @quantity_based_retention.setter
    def quantity_based_retention(self, quantity_based_retention):
        """Sets the quantity_based_retention of this AutomatedBackupPolicy.


        :param quantity_based_retention: The quantity_based_retention of this AutomatedBackupPolicy.
        :type quantity_based_retention: QuantityBasedRetention
        """

        self._quantity_based_retention = quantity_based_retention

    @property
    def time_based_retention(self):
        """Gets the time_based_retention of this AutomatedBackupPolicy.


        :return: The time_based_retention of this AutomatedBackupPolicy.
        :rtype: TimeBasedRetention
        """
        return self._time_based_retention

    @time_based_retention.setter
    def time_based_retention(self, time_based_retention):
        """Sets the time_based_retention of this AutomatedBackupPolicy.


        :param time_based_retention: The time_based_retention of this AutomatedBackupPolicy.
        :type time_based_retention: TimeBasedRetention
        """

        self._time_based_retention = time_based_retention

    @property
    def weekly_schedule(self):
        """Gets the weekly_schedule of this AutomatedBackupPolicy.


        :return: The weekly_schedule of this AutomatedBackupPolicy.
        :rtype: WeeklySchedule
        """
        return self._weekly_schedule

    @weekly_schedule.setter
    def weekly_schedule(self, weekly_schedule):
        """Sets the weekly_schedule of this AutomatedBackupPolicy.


        :param weekly_schedule: The weekly_schedule of this AutomatedBackupPolicy.
        :type weekly_schedule: WeeklySchedule
        """

        self._weekly_schedule = weekly_schedule
