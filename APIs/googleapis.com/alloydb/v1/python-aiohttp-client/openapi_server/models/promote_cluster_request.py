# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PromoteClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, request_id: str=None, validate_only: bool=None):
        """PromoteClusterRequest - a model defined in OpenAPI

        :param etag: The etag of this PromoteClusterRequest.
        :param request_id: The request_id of this PromoteClusterRequest.
        :param validate_only: The validate_only of this PromoteClusterRequest.
        """
        self.openapi_types = {
            'etag': str,
            'request_id': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'etag': 'etag',
            'request_id': 'requestId',
            'validate_only': 'validateOnly'
        }

        self._etag = etag
        self._request_id = request_id
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromoteClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromoteClusterRequest of this PromoteClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this PromoteClusterRequest.

        Optional. The current etag of the Cluster. If an etag is provided and does not match the current etag of the Cluster, deletion will be blocked and an ABORTED error will be returned.

        :return: The etag of this PromoteClusterRequest.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PromoteClusterRequest.

        Optional. The current etag of the Cluster. If an etag is provided and does not match the current etag of the Cluster, deletion will be blocked and an ABORTED error will be returned.

        :param etag: The etag of this PromoteClusterRequest.
        :type etag: str
        """

        self._etag = etag

    @property
    def request_id(self):
        """Gets the request_id of this PromoteClusterRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this PromoteClusterRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PromoteClusterRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this PromoteClusterRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def validate_only(self):
        """Gets the validate_only of this PromoteClusterRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the delete.

        :return: The validate_only of this PromoteClusterRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this PromoteClusterRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the delete.

        :param validate_only: The validate_only of this PromoteClusterRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
