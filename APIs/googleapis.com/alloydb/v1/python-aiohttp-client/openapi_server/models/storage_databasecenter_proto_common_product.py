# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageDatabasecenterProtoCommonProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, type: str=None, version: str=None):
        """StorageDatabasecenterProtoCommonProduct - a model defined in OpenAPI

        :param engine: The engine of this StorageDatabasecenterProtoCommonProduct.
        :param type: The type of this StorageDatabasecenterProtoCommonProduct.
        :param version: The version of this StorageDatabasecenterProtoCommonProduct.
        """
        self.openapi_types = {
            'engine': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'engine': 'engine',
            'type': 'type',
            'version': 'version'
        }

        self._engine = engine
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterProtoCommonProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterProtoCommonProduct of this StorageDatabasecenterProtoCommonProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this StorageDatabasecenterProtoCommonProduct.

        The specific engine that the underlying database is running.

        :return: The engine of this StorageDatabasecenterProtoCommonProduct.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this StorageDatabasecenterProtoCommonProduct.

        The specific engine that the underlying database is running.

        :param engine: The engine of this StorageDatabasecenterProtoCommonProduct.
        :type engine: str
        """
        allowed_values = ["ENGINE_UNSPECIFIED", "ENGINE_MYSQL", "MYSQL", "ENGINE_POSTGRES", "POSTGRES", "ENGINE_SQL_SERVER", "SQL_SERVER", "ENGINE_NATIVE", "NATIVE", "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT", "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT", "ENGINE_MEMORYSTORE_FOR_REDIS", "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER", "ENGINE_OTHER"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine

    @property
    def type(self):
        """Gets the type of this StorageDatabasecenterProtoCommonProduct.

        Type of specific database product. It could be CloudSQL, AlloyDB etc..

        :return: The type of this StorageDatabasecenterProtoCommonProduct.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageDatabasecenterProtoCommonProduct.

        Type of specific database product. It could be CloudSQL, AlloyDB etc..

        :param type: The type of this StorageDatabasecenterProtoCommonProduct.
        :type type: str
        """
        allowed_values = ["PRODUCT_TYPE_UNSPECIFIED", "PRODUCT_TYPE_CLOUD_SQL", "CLOUD_SQL", "PRODUCT_TYPE_ALLOYDB", "ALLOYDB", "PRODUCT_TYPE_SPANNER", "PRODUCT_TYPE_ON_PREM", "ON_PREM", "PRODUCT_TYPE_MEMORYSTORE", "PRODUCT_TYPE_OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this StorageDatabasecenterProtoCommonProduct.

        Version of the underlying database engine. Example values: For MySQL, it could be \"8.0\", \"5.7\" etc.. For Postgres, it could be \"14\", \"15\" etc..

        :return: The version of this StorageDatabasecenterProtoCommonProduct.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StorageDatabasecenterProtoCommonProduct.

        Version of the underlying database engine. Example values: For MySQL, it could be \"8.0\", \"5.7\" etc.. For Postgres, it could be \"14\", \"15\" etc..

        :param version: The version of this StorageDatabasecenterProtoCommonProduct.
        :type version: str
        """

        self._version = version
