# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_type_time_of_day import GoogleTypeTimeOfDay
from openapi_server import util


class WeeklySchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_of_week: List[str]=None, start_times: List[GoogleTypeTimeOfDay]=None):
        """WeeklySchedule - a model defined in OpenAPI

        :param days_of_week: The days_of_week of this WeeklySchedule.
        :param start_times: The start_times of this WeeklySchedule.
        """
        self.openapi_types = {
            'days_of_week': List[str],
            'start_times': List[GoogleTypeTimeOfDay]
        }

        self.attribute_map = {
            'days_of_week': 'daysOfWeek',
            'start_times': 'startTimes'
        }

        self._days_of_week = days_of_week
        self._start_times = start_times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeeklySchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeeklySchedule of this WeeklySchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_of_week(self):
        """Gets the days_of_week of this WeeklySchedule.

        The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.

        :return: The days_of_week of this WeeklySchedule.
        :rtype: List[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this WeeklySchedule.

        The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.

        :param days_of_week: The days_of_week of this WeeklySchedule.
        :type days_of_week: List[str]
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if not set(days_of_week).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days_of_week` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(days_of_week) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._days_of_week = days_of_week

    @property
    def start_times(self):
        """Gets the start_times of this WeeklySchedule.

        The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.

        :return: The start_times of this WeeklySchedule.
        :rtype: List[GoogleTypeTimeOfDay]
        """
        return self._start_times

    @start_times.setter
    def start_times(self, start_times):
        """Sets the start_times of this WeeklySchedule.

        The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.

        :param start_times: The start_times of this WeeklySchedule.
        :type start_times: List[GoogleTypeTimeOfDay]
        """

        self._start_times = start_times
