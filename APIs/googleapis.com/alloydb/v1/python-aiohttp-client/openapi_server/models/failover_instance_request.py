# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, validate_only: bool=None):
        """FailoverInstanceRequest - a model defined in OpenAPI

        :param request_id: The request_id of this FailoverInstanceRequest.
        :param validate_only: The validate_only of this FailoverInstanceRequest.
        """
        self.openapi_types = {
            'request_id': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'validate_only': 'validateOnly'
        }

        self._request_id = request_id
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverInstanceRequest of this FailoverInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this FailoverInstanceRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this FailoverInstanceRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this FailoverInstanceRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this FailoverInstanceRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def validate_only(self):
        """Gets the validate_only of this FailoverInstanceRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the failover.

        :return: The validate_only of this FailoverInstanceRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this FailoverInstanceRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the failover.

        :param validate_only: The validate_only of this FailoverInstanceRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
