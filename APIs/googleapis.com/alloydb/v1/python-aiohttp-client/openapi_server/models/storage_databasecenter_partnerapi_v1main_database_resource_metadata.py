# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_databasecenter_partnerapi_v1main_availability_configuration import StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
from openapi_server.models.storage_databasecenter_partnerapi_v1main_backup_configuration import StorageDatabasecenterPartnerapiV1mainBackupConfiguration
from openapi_server.models.storage_databasecenter_partnerapi_v1main_backup_run import StorageDatabasecenterPartnerapiV1mainBackupRun
from openapi_server.models.storage_databasecenter_partnerapi_v1main_custom_metadata_data import StorageDatabasecenterPartnerapiV1mainCustomMetadataData
from openapi_server.models.storage_databasecenter_partnerapi_v1main_database_resource_id import StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
from openapi_server.models.storage_databasecenter_partnerapi_v1main_entitlement import StorageDatabasecenterPartnerapiV1mainEntitlement
from openapi_server.models.storage_databasecenter_proto_common_product import StorageDatabasecenterProtoCommonProduct
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_configuration: StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration=None, backup_configuration: StorageDatabasecenterPartnerapiV1mainBackupConfiguration=None, backup_run: StorageDatabasecenterPartnerapiV1mainBackupRun=None, creation_time: str=None, current_state: str=None, custom_metadata: StorageDatabasecenterPartnerapiV1mainCustomMetadataData=None, entitlements: List[StorageDatabasecenterPartnerapiV1mainEntitlement]=None, expected_state: str=None, id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId=None, instance_type: str=None, location: str=None, primary_resource_id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId=None, product: StorageDatabasecenterProtoCommonProduct=None, resource_container: str=None, resource_name: str=None, updation_time: str=None, user_labels: Dict[str, str]=None):
        """StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata - a model defined in OpenAPI

        :param availability_configuration: The availability_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param backup_configuration: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param backup_run: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param creation_time: The creation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param current_state: The current_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param custom_metadata: The custom_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param entitlements: The entitlements of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param expected_state: The expected_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param id: The id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param instance_type: The instance_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param location: The location of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param primary_resource_id: The primary_resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param product: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param resource_container: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param updation_time: The updation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :param user_labels: The user_labels of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        """
        self.openapi_types = {
            'availability_configuration': StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration,
            'backup_configuration': StorageDatabasecenterPartnerapiV1mainBackupConfiguration,
            'backup_run': StorageDatabasecenterPartnerapiV1mainBackupRun,
            'creation_time': str,
            'current_state': str,
            'custom_metadata': StorageDatabasecenterPartnerapiV1mainCustomMetadataData,
            'entitlements': List[StorageDatabasecenterPartnerapiV1mainEntitlement],
            'expected_state': str,
            'id': StorageDatabasecenterPartnerapiV1mainDatabaseResourceId,
            'instance_type': str,
            'location': str,
            'primary_resource_id': StorageDatabasecenterPartnerapiV1mainDatabaseResourceId,
            'product': StorageDatabasecenterProtoCommonProduct,
            'resource_container': str,
            'resource_name': str,
            'updation_time': str,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'availability_configuration': 'availabilityConfiguration',
            'backup_configuration': 'backupConfiguration',
            'backup_run': 'backupRun',
            'creation_time': 'creationTime',
            'current_state': 'currentState',
            'custom_metadata': 'customMetadata',
            'entitlements': 'entitlements',
            'expected_state': 'expectedState',
            'id': 'id',
            'instance_type': 'instanceType',
            'location': 'location',
            'primary_resource_id': 'primaryResourceId',
            'product': 'product',
            'resource_container': 'resourceContainer',
            'resource_name': 'resourceName',
            'updation_time': 'updationTime',
            'user_labels': 'userLabels'
        }

        self._availability_configuration = availability_configuration
        self._backup_configuration = backup_configuration
        self._backup_run = backup_run
        self._creation_time = creation_time
        self._current_state = current_state
        self._custom_metadata = custom_metadata
        self._entitlements = entitlements
        self._expected_state = expected_state
        self._id = id
        self._instance_type = instance_type
        self._location = location
        self._primary_resource_id = primary_resource_id
        self._product = product
        self._resource_container = resource_container
        self._resource_name = resource_name
        self._updation_time = updation_time
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_configuration(self):
        """Gets the availability_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The availability_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
        """
        return self._availability_configuration

    @availability_configuration.setter
    def availability_configuration(self, availability_configuration):
        """Sets the availability_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param availability_configuration: The availability_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type availability_configuration: StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
        """

        self._availability_configuration = availability_configuration

    @property
    def backup_configuration(self):
        """Gets the backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainBackupConfiguration
        """
        return self._backup_configuration

    @backup_configuration.setter
    def backup_configuration(self, backup_configuration):
        """Sets the backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param backup_configuration: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type backup_configuration: StorageDatabasecenterPartnerapiV1mainBackupConfiguration
        """

        self._backup_configuration = backup_configuration

    @property
    def backup_run(self):
        """Gets the backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainBackupRun
        """
        return self._backup_run

    @backup_run.setter
    def backup_run(self, backup_run):
        """Sets the backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param backup_run: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type backup_run: StorageDatabasecenterPartnerapiV1mainBackupRun
        """

        self._backup_run = backup_run

    @property
    def creation_time(self):
        """Gets the creation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The creation time of the resource, i.e. the time when resource is created and recorded in partner service.

        :return: The creation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The creation time of the resource, i.e. the time when resource is created and recorded in partner service.

        :param creation_time: The creation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def current_state(self):
        """Gets the current_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Current state of the instance.

        :return: The current_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Current state of the instance.

        :param current_state: The current_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type current_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "HEALTHY", "UNHEALTHY", "SUSPENDED", "DELETED", "STATE_OTHER"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The custom_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainCustomMetadataData
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param custom_metadata: The custom_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type custom_metadata: StorageDatabasecenterPartnerapiV1mainCustomMetadataData
        """

        self._custom_metadata = custom_metadata

    @property
    def entitlements(self):
        """Gets the entitlements of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Entitlements associated with the resource

        :return: The entitlements of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: List[StorageDatabasecenterPartnerapiV1mainEntitlement]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Entitlements associated with the resource

        :param entitlements: The entitlements of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type entitlements: List[StorageDatabasecenterPartnerapiV1mainEntitlement]
        """

        self._entitlements = entitlements

    @property
    def expected_state(self):
        """Gets the expected_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.

        :return: The expected_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._expected_state

    @expected_state.setter
    def expected_state(self, expected_state):
        """Sets the expected_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.

        :param expected_state: The expected_state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type expected_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "HEALTHY", "UNHEALTHY", "SUSPENDED", "DELETED", "STATE_OTHER"]  # noqa: E501
        if expected_state not in allowed_values:
            raise ValueError(
                "Invalid value for `expected_state` ({0}), must be one of {1}"
                .format(expected_state, allowed_values)
            )

        self._expected_state = expected_state

    @property
    def id(self):
        """Gets the id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param id: The id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """

        self._id = id

    @property
    def instance_type(self):
        """Gets the instance_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The type of the instance. Specified at creation time.

        :return: The instance_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The type of the instance. Specified at creation time.

        :param instance_type: The instance_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type instance_type: str
        """
        allowed_values = ["INSTANCE_TYPE_UNSPECIFIED", "SUB_RESOURCE_TYPE_UNSPECIFIED", "PRIMARY", "SECONDARY", "READ_REPLICA", "OTHER", "SUB_RESOURCE_TYPE_PRIMARY", "SUB_RESOURCE_TYPE_SECONDARY", "SUB_RESOURCE_TYPE_READ_REPLICA", "SUB_RESOURCE_TYPE_OTHER"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def location(self):
        """Gets the location of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The resource location. REQUIRED

        :return: The location of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The resource location. REQUIRED

        :param location: The location of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type location: str
        """

        self._location = location

    @property
    def primary_resource_id(self):
        """Gets the primary_resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The primary_resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """
        return self._primary_resource_id

    @primary_resource_id.setter
    def primary_resource_id(self, primary_resource_id):
        """Sets the primary_resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param primary_resource_id: The primary_resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type primary_resource_id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """

        self._primary_resource_id = primary_resource_id

    @property
    def product(self):
        """Gets the product of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :return: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: StorageDatabasecenterProtoCommonProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.


        :param product: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type product: StorageDatabasecenterProtoCommonProduct
        """

        self._product = product

    @property
    def resource_container(self):
        """Gets the resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of \"/\", such as \"projects/123\". For GCP provided resources, number should be project number.

        :return: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._resource_container

    @resource_container.setter
    def resource_container(self, resource_container):
        """Sets the resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of \"/\", such as \"projects/123\". For GCP provided resources, number should be project number.

        :param resource_container: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type resource_container: str
        """

        self._resource_container = resource_container

    @property
    def resource_name(self):
        """Gets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named \"ABC\" is deleted, the name \"ABC\" can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :return: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named \"ABC\" is deleted, the name \"ABC\" can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def updation_time(self):
        """Gets the updation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The time at which the resource was updated and recorded at partner service.

        :return: The updation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: str
        """
        return self._updation_time

    @updation_time.setter
    def updation_time(self, updation_time):
        """Sets the updation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        The time at which the resource was updated and recorded at partner service.

        :param updation_time: The updation_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type updation_time: str
        """

        self._updation_time = updation_time

    @property
    def user_labels(self):
        """Gets the user_labels of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        User-provided labels, represented as a dictionary where each label is a single key value pair.

        :return: The user_labels of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.

        User-provided labels, represented as a dictionary where each label is a single key value pair.

        :param user_labels: The user_labels of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
