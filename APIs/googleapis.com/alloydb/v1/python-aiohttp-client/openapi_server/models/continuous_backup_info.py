# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_info import EncryptionInfo
from openapi_server import util


class ContinuousBackupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, earliest_restorable_time: str=None, enabled_time: str=None, encryption_info: EncryptionInfo=None, schedule: List[str]=None):
        """ContinuousBackupInfo - a model defined in OpenAPI

        :param earliest_restorable_time: The earliest_restorable_time of this ContinuousBackupInfo.
        :param enabled_time: The enabled_time of this ContinuousBackupInfo.
        :param encryption_info: The encryption_info of this ContinuousBackupInfo.
        :param schedule: The schedule of this ContinuousBackupInfo.
        """
        self.openapi_types = {
            'earliest_restorable_time': str,
            'enabled_time': str,
            'encryption_info': EncryptionInfo,
            'schedule': List[str]
        }

        self.attribute_map = {
            'earliest_restorable_time': 'earliestRestorableTime',
            'enabled_time': 'enabledTime',
            'encryption_info': 'encryptionInfo',
            'schedule': 'schedule'
        }

        self._earliest_restorable_time = earliest_restorable_time
        self._enabled_time = enabled_time
        self._encryption_info = encryption_info
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousBackupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousBackupInfo of this ContinuousBackupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def earliest_restorable_time(self):
        """Gets the earliest_restorable_time of this ContinuousBackupInfo.

        Output only. The earliest restorable time that can be restored to. Output only field.

        :return: The earliest_restorable_time of this ContinuousBackupInfo.
        :rtype: str
        """
        return self._earliest_restorable_time

    @earliest_restorable_time.setter
    def earliest_restorable_time(self, earliest_restorable_time):
        """Sets the earliest_restorable_time of this ContinuousBackupInfo.

        Output only. The earliest restorable time that can be restored to. Output only field.

        :param earliest_restorable_time: The earliest_restorable_time of this ContinuousBackupInfo.
        :type earliest_restorable_time: str
        """

        self._earliest_restorable_time = earliest_restorable_time

    @property
    def enabled_time(self):
        """Gets the enabled_time of this ContinuousBackupInfo.

        Output only. When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.

        :return: The enabled_time of this ContinuousBackupInfo.
        :rtype: str
        """
        return self._enabled_time

    @enabled_time.setter
    def enabled_time(self, enabled_time):
        """Sets the enabled_time of this ContinuousBackupInfo.

        Output only. When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.

        :param enabled_time: The enabled_time of this ContinuousBackupInfo.
        :type enabled_time: str
        """

        self._enabled_time = enabled_time

    @property
    def encryption_info(self):
        """Gets the encryption_info of this ContinuousBackupInfo.


        :return: The encryption_info of this ContinuousBackupInfo.
        :rtype: EncryptionInfo
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this ContinuousBackupInfo.


        :param encryption_info: The encryption_info of this ContinuousBackupInfo.
        :type encryption_info: EncryptionInfo
        """

        self._encryption_info = encryption_info

    @property
    def schedule(self):
        """Gets the schedule of this ContinuousBackupInfo.

        Output only. Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.

        :return: The schedule of this ContinuousBackupInfo.
        :rtype: List[str]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ContinuousBackupInfo.

        Output only. Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.

        :param schedule: The schedule of this ContinuousBackupInfo.
        :type schedule: List[str]
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if not set(schedule).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `schedule` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(schedule) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._schedule = schedule
