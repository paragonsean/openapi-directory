# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, standard: str=None, version: str=None):
        """StorageDatabasecenterPartnerapiV1mainCompliance - a model defined in OpenAPI

        :param standard: The standard of this StorageDatabasecenterPartnerapiV1mainCompliance.
        :param version: The version of this StorageDatabasecenterPartnerapiV1mainCompliance.
        """
        self.openapi_types = {
            'standard': str,
            'version': str
        }

        self.attribute_map = {
            'standard': 'standard',
            'version': 'version'
        }

        self._standard = standard
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainCompliance of this StorageDatabasecenterPartnerapiV1mainCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard(self):
        """Gets the standard of this StorageDatabasecenterPartnerapiV1mainCompliance.

        Industry-wide compliance standards or benchmarks, such as CIS, PCI, and OWASP.

        :return: The standard of this StorageDatabasecenterPartnerapiV1mainCompliance.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this StorageDatabasecenterPartnerapiV1mainCompliance.

        Industry-wide compliance standards or benchmarks, such as CIS, PCI, and OWASP.

        :param standard: The standard of this StorageDatabasecenterPartnerapiV1mainCompliance.
        :type standard: str
        """

        self._standard = standard

    @property
    def version(self):
        """Gets the version of this StorageDatabasecenterPartnerapiV1mainCompliance.

        Version of the standard or benchmark, for example, 1.1

        :return: The version of this StorageDatabasecenterPartnerapiV1mainCompliance.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StorageDatabasecenterPartnerapiV1mainCompliance.

        Version of the standard or benchmark, for example, 1.1

        :param version: The version of this StorageDatabasecenterPartnerapiV1mainCompliance.
        :type version: str
        """

        self._version = version
