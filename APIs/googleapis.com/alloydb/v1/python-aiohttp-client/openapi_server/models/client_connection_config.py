# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssl_config import SslConfig
from openapi_server import util


class ClientConnectionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, require_connectors: bool=None, ssl_config: SslConfig=None):
        """ClientConnectionConfig - a model defined in OpenAPI

        :param require_connectors: The require_connectors of this ClientConnectionConfig.
        :param ssl_config: The ssl_config of this ClientConnectionConfig.
        """
        self.openapi_types = {
            'require_connectors': bool,
            'ssl_config': SslConfig
        }

        self.attribute_map = {
            'require_connectors': 'requireConnectors',
            'ssl_config': 'sslConfig'
        }

        self._require_connectors = require_connectors
        self._ssl_config = ssl_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientConnectionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientConnectionConfig of this ClientConnectionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def require_connectors(self):
        """Gets the require_connectors of this ClientConnectionConfig.

        Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.

        :return: The require_connectors of this ClientConnectionConfig.
        :rtype: bool
        """
        return self._require_connectors

    @require_connectors.setter
    def require_connectors(self, require_connectors):
        """Sets the require_connectors of this ClientConnectionConfig.

        Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.

        :param require_connectors: The require_connectors of this ClientConnectionConfig.
        :type require_connectors: bool
        """

        self._require_connectors = require_connectors

    @property
    def ssl_config(self):
        """Gets the ssl_config of this ClientConnectionConfig.


        :return: The ssl_config of this ClientConnectionConfig.
        :rtype: SslConfig
        """
        return self._ssl_config

    @ssl_config.setter
    def ssl_config(self, ssl_config):
        """Sets the ssl_config of this ClientConnectionConfig.


        :param ssl_config: The ssl_config of this ClientConnectionConfig.
        :type ssl_config: SslConfig
        """

        self._ssl_config = ssl_config
