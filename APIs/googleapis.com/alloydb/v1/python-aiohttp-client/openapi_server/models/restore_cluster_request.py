# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_source import BackupSource
from openapi_server.models.cluster import Cluster
from openapi_server.models.continuous_backup_source import ContinuousBackupSource
from openapi_server import util


class RestoreClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_source: BackupSource=None, cluster: Cluster=None, cluster_id: str=None, continuous_backup_source: ContinuousBackupSource=None, request_id: str=None, validate_only: bool=None):
        """RestoreClusterRequest - a model defined in OpenAPI

        :param backup_source: The backup_source of this RestoreClusterRequest.
        :param cluster: The cluster of this RestoreClusterRequest.
        :param cluster_id: The cluster_id of this RestoreClusterRequest.
        :param continuous_backup_source: The continuous_backup_source of this RestoreClusterRequest.
        :param request_id: The request_id of this RestoreClusterRequest.
        :param validate_only: The validate_only of this RestoreClusterRequest.
        """
        self.openapi_types = {
            'backup_source': BackupSource,
            'cluster': Cluster,
            'cluster_id': str,
            'continuous_backup_source': ContinuousBackupSource,
            'request_id': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'backup_source': 'backupSource',
            'cluster': 'cluster',
            'cluster_id': 'clusterId',
            'continuous_backup_source': 'continuousBackupSource',
            'request_id': 'requestId',
            'validate_only': 'validateOnly'
        }

        self._backup_source = backup_source
        self._cluster = cluster
        self._cluster_id = cluster_id
        self._continuous_backup_source = continuous_backup_source
        self._request_id = request_id
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreClusterRequest of this RestoreClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_source(self):
        """Gets the backup_source of this RestoreClusterRequest.


        :return: The backup_source of this RestoreClusterRequest.
        :rtype: BackupSource
        """
        return self._backup_source

    @backup_source.setter
    def backup_source(self, backup_source):
        """Sets the backup_source of this RestoreClusterRequest.


        :param backup_source: The backup_source of this RestoreClusterRequest.
        :type backup_source: BackupSource
        """

        self._backup_source = backup_source

    @property
    def cluster(self):
        """Gets the cluster of this RestoreClusterRequest.


        :return: The cluster of this RestoreClusterRequest.
        :rtype: Cluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RestoreClusterRequest.


        :param cluster: The cluster of this RestoreClusterRequest.
        :type cluster: Cluster
        """

        self._cluster = cluster

    @property
    def cluster_id(self):
        """Gets the cluster_id of this RestoreClusterRequest.

        Required. ID of the requesting object.

        :return: The cluster_id of this RestoreClusterRequest.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this RestoreClusterRequest.

        Required. ID of the requesting object.

        :param cluster_id: The cluster_id of this RestoreClusterRequest.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def continuous_backup_source(self):
        """Gets the continuous_backup_source of this RestoreClusterRequest.


        :return: The continuous_backup_source of this RestoreClusterRequest.
        :rtype: ContinuousBackupSource
        """
        return self._continuous_backup_source

    @continuous_backup_source.setter
    def continuous_backup_source(self, continuous_backup_source):
        """Sets the continuous_backup_source of this RestoreClusterRequest.


        :param continuous_backup_source: The continuous_backup_source of this RestoreClusterRequest.
        :type continuous_backup_source: ContinuousBackupSource
        """

        self._continuous_backup_source = continuous_backup_source

    @property
    def request_id(self):
        """Gets the request_id of this RestoreClusterRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this RestoreClusterRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RestoreClusterRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this RestoreClusterRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def validate_only(self):
        """Gets the validate_only of this RestoreClusterRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.

        :return: The validate_only of this RestoreClusterRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this RestoreClusterRequest.

        Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.

        :param validate_only: The validate_only of this RestoreClusterRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
