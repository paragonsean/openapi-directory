/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AlloyDbApi);
  }
}(this, function(expect, AlloyDbApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata', function() {
    it('should create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata', function() {
      // uncomment below and update the code to test StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be.a(AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata);
    });

    it('should have the property availabilityConfiguration (base name: "availabilityConfiguration")', function() {
      // uncomment below and update the code to test the property availabilityConfiguration
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property backupConfiguration (base name: "backupConfiguration")', function() {
      // uncomment below and update the code to test the property backupConfiguration
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property backupRun (base name: "backupRun")', function() {
      // uncomment below and update the code to test the property backupRun
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property currentState (base name: "currentState")', function() {
      // uncomment below and update the code to test the property currentState
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property customMetadata (base name: "customMetadata")', function() {
      // uncomment below and update the code to test the property customMetadata
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property entitlements (base name: "entitlements")', function() {
      // uncomment below and update the code to test the property entitlements
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property expectedState (base name: "expectedState")', function() {
      // uncomment below and update the code to test the property expectedState
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "instanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property primaryResourceId (base name: "primaryResourceId")', function() {
      // uncomment below and update the code to test the property primaryResourceId
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property product (base name: "product")', function() {
      // uncomment below and update the code to test the property product
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property resourceContainer (base name: "resourceContainer")', function() {
      // uncomment below and update the code to test the property resourceContainer
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property updationTime (base name: "updationTime")', function() {
      // uncomment below and update the code to test the property updationTime
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

    it('should have the property userLabels (base name: "userLabels")', function() {
      // uncomment below and update the code to test the property userLabels
      //var instance = new AlloyDbApi.StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata();
      //expect(instance).to.be();
    });

  });

}));
