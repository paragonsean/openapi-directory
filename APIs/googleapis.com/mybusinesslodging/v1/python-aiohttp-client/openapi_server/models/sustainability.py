# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.energy_efficiency import EnergyEfficiency
from openapi_server.models.sustainability_certifications import SustainabilityCertifications
from openapi_server.models.sustainable_sourcing import SustainableSourcing
from openapi_server.models.waste_reduction import WasteReduction
from openapi_server.models.water_conservation import WaterConservation
from openapi_server import util


class Sustainability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, energy_efficiency: EnergyEfficiency=None, sustainability_certifications: SustainabilityCertifications=None, sustainable_sourcing: SustainableSourcing=None, waste_reduction: WasteReduction=None, water_conservation: WaterConservation=None):
        """Sustainability - a model defined in OpenAPI

        :param energy_efficiency: The energy_efficiency of this Sustainability.
        :param sustainability_certifications: The sustainability_certifications of this Sustainability.
        :param sustainable_sourcing: The sustainable_sourcing of this Sustainability.
        :param waste_reduction: The waste_reduction of this Sustainability.
        :param water_conservation: The water_conservation of this Sustainability.
        """
        self.openapi_types = {
            'energy_efficiency': EnergyEfficiency,
            'sustainability_certifications': SustainabilityCertifications,
            'sustainable_sourcing': SustainableSourcing,
            'waste_reduction': WasteReduction,
            'water_conservation': WaterConservation
        }

        self.attribute_map = {
            'energy_efficiency': 'energyEfficiency',
            'sustainability_certifications': 'sustainabilityCertifications',
            'sustainable_sourcing': 'sustainableSourcing',
            'waste_reduction': 'wasteReduction',
            'water_conservation': 'waterConservation'
        }

        self._energy_efficiency = energy_efficiency
        self._sustainability_certifications = sustainability_certifications
        self._sustainable_sourcing = sustainable_sourcing
        self._waste_reduction = waste_reduction
        self._water_conservation = water_conservation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sustainability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sustainability of this Sustainability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def energy_efficiency(self):
        """Gets the energy_efficiency of this Sustainability.


        :return: The energy_efficiency of this Sustainability.
        :rtype: EnergyEfficiency
        """
        return self._energy_efficiency

    @energy_efficiency.setter
    def energy_efficiency(self, energy_efficiency):
        """Sets the energy_efficiency of this Sustainability.


        :param energy_efficiency: The energy_efficiency of this Sustainability.
        :type energy_efficiency: EnergyEfficiency
        """

        self._energy_efficiency = energy_efficiency

    @property
    def sustainability_certifications(self):
        """Gets the sustainability_certifications of this Sustainability.


        :return: The sustainability_certifications of this Sustainability.
        :rtype: SustainabilityCertifications
        """
        return self._sustainability_certifications

    @sustainability_certifications.setter
    def sustainability_certifications(self, sustainability_certifications):
        """Sets the sustainability_certifications of this Sustainability.


        :param sustainability_certifications: The sustainability_certifications of this Sustainability.
        :type sustainability_certifications: SustainabilityCertifications
        """

        self._sustainability_certifications = sustainability_certifications

    @property
    def sustainable_sourcing(self):
        """Gets the sustainable_sourcing of this Sustainability.


        :return: The sustainable_sourcing of this Sustainability.
        :rtype: SustainableSourcing
        """
        return self._sustainable_sourcing

    @sustainable_sourcing.setter
    def sustainable_sourcing(self, sustainable_sourcing):
        """Sets the sustainable_sourcing of this Sustainability.


        :param sustainable_sourcing: The sustainable_sourcing of this Sustainability.
        :type sustainable_sourcing: SustainableSourcing
        """

        self._sustainable_sourcing = sustainable_sourcing

    @property
    def waste_reduction(self):
        """Gets the waste_reduction of this Sustainability.


        :return: The waste_reduction of this Sustainability.
        :rtype: WasteReduction
        """
        return self._waste_reduction

    @waste_reduction.setter
    def waste_reduction(self, waste_reduction):
        """Sets the waste_reduction of this Sustainability.


        :param waste_reduction: The waste_reduction of this Sustainability.
        :type waste_reduction: WasteReduction
        """

        self._waste_reduction = waste_reduction

    @property
    def water_conservation(self):
        """Gets the water_conservation of this Sustainability.


        :return: The water_conservation of this Sustainability.
        :rtype: WaterConservation
        """
        return self._water_conservation

    @water_conservation.setter
    def water_conservation(self, water_conservation):
        """Sets the water_conservation of this Sustainability.


        :param water_conservation: The water_conservation of this Sustainability.
        :type water_conservation: WaterConservation
        """

        self._water_conservation = water_conservation
