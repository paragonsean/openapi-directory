# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalProtection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_areas_offer_sanitizing_items: bool=None, common_areas_offer_sanitizing_items_exception: str=None, face_mask_required: bool=None, face_mask_required_exception: str=None, guest_room_hygiene_kits_available: bool=None, guest_room_hygiene_kits_available_exception: str=None, protective_equipment_available: bool=None, protective_equipment_available_exception: str=None):
        """PersonalProtection - a model defined in OpenAPI

        :param common_areas_offer_sanitizing_items: The common_areas_offer_sanitizing_items of this PersonalProtection.
        :param common_areas_offer_sanitizing_items_exception: The common_areas_offer_sanitizing_items_exception of this PersonalProtection.
        :param face_mask_required: The face_mask_required of this PersonalProtection.
        :param face_mask_required_exception: The face_mask_required_exception of this PersonalProtection.
        :param guest_room_hygiene_kits_available: The guest_room_hygiene_kits_available of this PersonalProtection.
        :param guest_room_hygiene_kits_available_exception: The guest_room_hygiene_kits_available_exception of this PersonalProtection.
        :param protective_equipment_available: The protective_equipment_available of this PersonalProtection.
        :param protective_equipment_available_exception: The protective_equipment_available_exception of this PersonalProtection.
        """
        self.openapi_types = {
            'common_areas_offer_sanitizing_items': bool,
            'common_areas_offer_sanitizing_items_exception': str,
            'face_mask_required': bool,
            'face_mask_required_exception': str,
            'guest_room_hygiene_kits_available': bool,
            'guest_room_hygiene_kits_available_exception': str,
            'protective_equipment_available': bool,
            'protective_equipment_available_exception': str
        }

        self.attribute_map = {
            'common_areas_offer_sanitizing_items': 'commonAreasOfferSanitizingItems',
            'common_areas_offer_sanitizing_items_exception': 'commonAreasOfferSanitizingItemsException',
            'face_mask_required': 'faceMaskRequired',
            'face_mask_required_exception': 'faceMaskRequiredException',
            'guest_room_hygiene_kits_available': 'guestRoomHygieneKitsAvailable',
            'guest_room_hygiene_kits_available_exception': 'guestRoomHygieneKitsAvailableException',
            'protective_equipment_available': 'protectiveEquipmentAvailable',
            'protective_equipment_available_exception': 'protectiveEquipmentAvailableException'
        }

        self._common_areas_offer_sanitizing_items = common_areas_offer_sanitizing_items
        self._common_areas_offer_sanitizing_items_exception = common_areas_offer_sanitizing_items_exception
        self._face_mask_required = face_mask_required
        self._face_mask_required_exception = face_mask_required_exception
        self._guest_room_hygiene_kits_available = guest_room_hygiene_kits_available
        self._guest_room_hygiene_kits_available_exception = guest_room_hygiene_kits_available_exception
        self._protective_equipment_available = protective_equipment_available
        self._protective_equipment_available_exception = protective_equipment_available_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalProtection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalProtection of this PersonalProtection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_areas_offer_sanitizing_items(self):
        """Gets the common_areas_offer_sanitizing_items of this PersonalProtection.

        Hand-sanitizer and/or sanitizing wipes are offered in common areas.

        :return: The common_areas_offer_sanitizing_items of this PersonalProtection.
        :rtype: bool
        """
        return self._common_areas_offer_sanitizing_items

    @common_areas_offer_sanitizing_items.setter
    def common_areas_offer_sanitizing_items(self, common_areas_offer_sanitizing_items):
        """Sets the common_areas_offer_sanitizing_items of this PersonalProtection.

        Hand-sanitizer and/or sanitizing wipes are offered in common areas.

        :param common_areas_offer_sanitizing_items: The common_areas_offer_sanitizing_items of this PersonalProtection.
        :type common_areas_offer_sanitizing_items: bool
        """

        self._common_areas_offer_sanitizing_items = common_areas_offer_sanitizing_items

    @property
    def common_areas_offer_sanitizing_items_exception(self):
        """Gets the common_areas_offer_sanitizing_items_exception of this PersonalProtection.

        Common areas offer sanitizing items exception.

        :return: The common_areas_offer_sanitizing_items_exception of this PersonalProtection.
        :rtype: str
        """
        return self._common_areas_offer_sanitizing_items_exception

    @common_areas_offer_sanitizing_items_exception.setter
    def common_areas_offer_sanitizing_items_exception(self, common_areas_offer_sanitizing_items_exception):
        """Sets the common_areas_offer_sanitizing_items_exception of this PersonalProtection.

        Common areas offer sanitizing items exception.

        :param common_areas_offer_sanitizing_items_exception: The common_areas_offer_sanitizing_items_exception of this PersonalProtection.
        :type common_areas_offer_sanitizing_items_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if common_areas_offer_sanitizing_items_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `common_areas_offer_sanitizing_items_exception` ({0}), must be one of {1}"
                .format(common_areas_offer_sanitizing_items_exception, allowed_values)
            )

        self._common_areas_offer_sanitizing_items_exception = common_areas_offer_sanitizing_items_exception

    @property
    def face_mask_required(self):
        """Gets the face_mask_required of this PersonalProtection.

        Masks required on the property.

        :return: The face_mask_required of this PersonalProtection.
        :rtype: bool
        """
        return self._face_mask_required

    @face_mask_required.setter
    def face_mask_required(self, face_mask_required):
        """Sets the face_mask_required of this PersonalProtection.

        Masks required on the property.

        :param face_mask_required: The face_mask_required of this PersonalProtection.
        :type face_mask_required: bool
        """

        self._face_mask_required = face_mask_required

    @property
    def face_mask_required_exception(self):
        """Gets the face_mask_required_exception of this PersonalProtection.

        Face mask required exception.

        :return: The face_mask_required_exception of this PersonalProtection.
        :rtype: str
        """
        return self._face_mask_required_exception

    @face_mask_required_exception.setter
    def face_mask_required_exception(self, face_mask_required_exception):
        """Sets the face_mask_required_exception of this PersonalProtection.

        Face mask required exception.

        :param face_mask_required_exception: The face_mask_required_exception of this PersonalProtection.
        :type face_mask_required_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if face_mask_required_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `face_mask_required_exception` ({0}), must be one of {1}"
                .format(face_mask_required_exception, allowed_values)
            )

        self._face_mask_required_exception = face_mask_required_exception

    @property
    def guest_room_hygiene_kits_available(self):
        """Gets the guest_room_hygiene_kits_available of this PersonalProtection.

        In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.

        :return: The guest_room_hygiene_kits_available of this PersonalProtection.
        :rtype: bool
        """
        return self._guest_room_hygiene_kits_available

    @guest_room_hygiene_kits_available.setter
    def guest_room_hygiene_kits_available(self, guest_room_hygiene_kits_available):
        """Sets the guest_room_hygiene_kits_available of this PersonalProtection.

        In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.

        :param guest_room_hygiene_kits_available: The guest_room_hygiene_kits_available of this PersonalProtection.
        :type guest_room_hygiene_kits_available: bool
        """

        self._guest_room_hygiene_kits_available = guest_room_hygiene_kits_available

    @property
    def guest_room_hygiene_kits_available_exception(self):
        """Gets the guest_room_hygiene_kits_available_exception of this PersonalProtection.

        Guest room hygiene kits available exception.

        :return: The guest_room_hygiene_kits_available_exception of this PersonalProtection.
        :rtype: str
        """
        return self._guest_room_hygiene_kits_available_exception

    @guest_room_hygiene_kits_available_exception.setter
    def guest_room_hygiene_kits_available_exception(self, guest_room_hygiene_kits_available_exception):
        """Sets the guest_room_hygiene_kits_available_exception of this PersonalProtection.

        Guest room hygiene kits available exception.

        :param guest_room_hygiene_kits_available_exception: The guest_room_hygiene_kits_available_exception of this PersonalProtection.
        :type guest_room_hygiene_kits_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if guest_room_hygiene_kits_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `guest_room_hygiene_kits_available_exception` ({0}), must be one of {1}"
                .format(guest_room_hygiene_kits_available_exception, allowed_values)
            )

        self._guest_room_hygiene_kits_available_exception = guest_room_hygiene_kits_available_exception

    @property
    def protective_equipment_available(self):
        """Gets the protective_equipment_available of this PersonalProtection.

        Masks and/or gloves available for guests.

        :return: The protective_equipment_available of this PersonalProtection.
        :rtype: bool
        """
        return self._protective_equipment_available

    @protective_equipment_available.setter
    def protective_equipment_available(self, protective_equipment_available):
        """Sets the protective_equipment_available of this PersonalProtection.

        Masks and/or gloves available for guests.

        :param protective_equipment_available: The protective_equipment_available of this PersonalProtection.
        :type protective_equipment_available: bool
        """

        self._protective_equipment_available = protective_equipment_available

    @property
    def protective_equipment_available_exception(self):
        """Gets the protective_equipment_available_exception of this PersonalProtection.

        Protective equipment available exception.

        :return: The protective_equipment_available_exception of this PersonalProtection.
        :rtype: str
        """
        return self._protective_equipment_available_exception

    @protective_equipment_available_exception.setter
    def protective_equipment_available_exception(self, protective_equipment_available_exception):
        """Sets the protective_equipment_available_exception of this PersonalProtection.

        Protective equipment available exception.

        :param protective_equipment_available_exception: The protective_equipment_available_exception of this PersonalProtection.
        :type protective_equipment_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if protective_equipment_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `protective_equipment_available_exception` ({0}), must be one of {1}"
                .format(protective_equipment_available_exception, allowed_values)
            )

        self._protective_equipment_available_exception = protective_equipment_available_exception
