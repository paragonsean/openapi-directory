# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_options import PaymentOptions
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server import util


class Policies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_inclusive_available: bool=None, all_inclusive_available_exception: str=None, all_inclusive_only: bool=None, all_inclusive_only_exception: str=None, checkin_time: TimeOfDay=None, checkin_time_exception: str=None, checkout_time: TimeOfDay=None, checkout_time_exception: str=None, kids_stay_free: bool=None, kids_stay_free_exception: str=None, max_child_age: int=None, max_child_age_exception: str=None, max_kids_stay_free_count: int=None, max_kids_stay_free_count_exception: str=None, payment_options: PaymentOptions=None, smoke_free_property: bool=None, smoke_free_property_exception: str=None):
        """Policies - a model defined in OpenAPI

        :param all_inclusive_available: The all_inclusive_available of this Policies.
        :param all_inclusive_available_exception: The all_inclusive_available_exception of this Policies.
        :param all_inclusive_only: The all_inclusive_only of this Policies.
        :param all_inclusive_only_exception: The all_inclusive_only_exception of this Policies.
        :param checkin_time: The checkin_time of this Policies.
        :param checkin_time_exception: The checkin_time_exception of this Policies.
        :param checkout_time: The checkout_time of this Policies.
        :param checkout_time_exception: The checkout_time_exception of this Policies.
        :param kids_stay_free: The kids_stay_free of this Policies.
        :param kids_stay_free_exception: The kids_stay_free_exception of this Policies.
        :param max_child_age: The max_child_age of this Policies.
        :param max_child_age_exception: The max_child_age_exception of this Policies.
        :param max_kids_stay_free_count: The max_kids_stay_free_count of this Policies.
        :param max_kids_stay_free_count_exception: The max_kids_stay_free_count_exception of this Policies.
        :param payment_options: The payment_options of this Policies.
        :param smoke_free_property: The smoke_free_property of this Policies.
        :param smoke_free_property_exception: The smoke_free_property_exception of this Policies.
        """
        self.openapi_types = {
            'all_inclusive_available': bool,
            'all_inclusive_available_exception': str,
            'all_inclusive_only': bool,
            'all_inclusive_only_exception': str,
            'checkin_time': TimeOfDay,
            'checkin_time_exception': str,
            'checkout_time': TimeOfDay,
            'checkout_time_exception': str,
            'kids_stay_free': bool,
            'kids_stay_free_exception': str,
            'max_child_age': int,
            'max_child_age_exception': str,
            'max_kids_stay_free_count': int,
            'max_kids_stay_free_count_exception': str,
            'payment_options': PaymentOptions,
            'smoke_free_property': bool,
            'smoke_free_property_exception': str
        }

        self.attribute_map = {
            'all_inclusive_available': 'allInclusiveAvailable',
            'all_inclusive_available_exception': 'allInclusiveAvailableException',
            'all_inclusive_only': 'allInclusiveOnly',
            'all_inclusive_only_exception': 'allInclusiveOnlyException',
            'checkin_time': 'checkinTime',
            'checkin_time_exception': 'checkinTimeException',
            'checkout_time': 'checkoutTime',
            'checkout_time_exception': 'checkoutTimeException',
            'kids_stay_free': 'kidsStayFree',
            'kids_stay_free_exception': 'kidsStayFreeException',
            'max_child_age': 'maxChildAge',
            'max_child_age_exception': 'maxChildAgeException',
            'max_kids_stay_free_count': 'maxKidsStayFreeCount',
            'max_kids_stay_free_count_exception': 'maxKidsStayFreeCountException',
            'payment_options': 'paymentOptions',
            'smoke_free_property': 'smokeFreeProperty',
            'smoke_free_property_exception': 'smokeFreePropertyException'
        }

        self._all_inclusive_available = all_inclusive_available
        self._all_inclusive_available_exception = all_inclusive_available_exception
        self._all_inclusive_only = all_inclusive_only
        self._all_inclusive_only_exception = all_inclusive_only_exception
        self._checkin_time = checkin_time
        self._checkin_time_exception = checkin_time_exception
        self._checkout_time = checkout_time
        self._checkout_time_exception = checkout_time_exception
        self._kids_stay_free = kids_stay_free
        self._kids_stay_free_exception = kids_stay_free_exception
        self._max_child_age = max_child_age
        self._max_child_age_exception = max_child_age_exception
        self._max_kids_stay_free_count = max_kids_stay_free_count
        self._max_kids_stay_free_count_exception = max_kids_stay_free_count_exception
        self._payment_options = payment_options
        self._smoke_free_property = smoke_free_property
        self._smoke_free_property_exception = smoke_free_property_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policies of this Policies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_inclusive_available(self):
        """Gets the all_inclusive_available of this Policies.

        All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.

        :return: The all_inclusive_available of this Policies.
        :rtype: bool
        """
        return self._all_inclusive_available

    @all_inclusive_available.setter
    def all_inclusive_available(self, all_inclusive_available):
        """Sets the all_inclusive_available of this Policies.

        All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.

        :param all_inclusive_available: The all_inclusive_available of this Policies.
        :type all_inclusive_available: bool
        """

        self._all_inclusive_available = all_inclusive_available

    @property
    def all_inclusive_available_exception(self):
        """Gets the all_inclusive_available_exception of this Policies.

        All inclusive available exception.

        :return: The all_inclusive_available_exception of this Policies.
        :rtype: str
        """
        return self._all_inclusive_available_exception

    @all_inclusive_available_exception.setter
    def all_inclusive_available_exception(self, all_inclusive_available_exception):
        """Sets the all_inclusive_available_exception of this Policies.

        All inclusive available exception.

        :param all_inclusive_available_exception: The all_inclusive_available_exception of this Policies.
        :type all_inclusive_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if all_inclusive_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `all_inclusive_available_exception` ({0}), must be one of {1}"
                .format(all_inclusive_available_exception, allowed_values)
            )

        self._all_inclusive_available_exception = all_inclusive_available_exception

    @property
    def all_inclusive_only(self):
        """Gets the all_inclusive_only of this Policies.

        All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.

        :return: The all_inclusive_only of this Policies.
        :rtype: bool
        """
        return self._all_inclusive_only

    @all_inclusive_only.setter
    def all_inclusive_only(self, all_inclusive_only):
        """Sets the all_inclusive_only of this Policies.

        All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.

        :param all_inclusive_only: The all_inclusive_only of this Policies.
        :type all_inclusive_only: bool
        """

        self._all_inclusive_only = all_inclusive_only

    @property
    def all_inclusive_only_exception(self):
        """Gets the all_inclusive_only_exception of this Policies.

        All inclusive only exception.

        :return: The all_inclusive_only_exception of this Policies.
        :rtype: str
        """
        return self._all_inclusive_only_exception

    @all_inclusive_only_exception.setter
    def all_inclusive_only_exception(self, all_inclusive_only_exception):
        """Sets the all_inclusive_only_exception of this Policies.

        All inclusive only exception.

        :param all_inclusive_only_exception: The all_inclusive_only_exception of this Policies.
        :type all_inclusive_only_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if all_inclusive_only_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `all_inclusive_only_exception` ({0}), must be one of {1}"
                .format(all_inclusive_only_exception, allowed_values)
            )

        self._all_inclusive_only_exception = all_inclusive_only_exception

    @property
    def checkin_time(self):
        """Gets the checkin_time of this Policies.


        :return: The checkin_time of this Policies.
        :rtype: TimeOfDay
        """
        return self._checkin_time

    @checkin_time.setter
    def checkin_time(self, checkin_time):
        """Sets the checkin_time of this Policies.


        :param checkin_time: The checkin_time of this Policies.
        :type checkin_time: TimeOfDay
        """

        self._checkin_time = checkin_time

    @property
    def checkin_time_exception(self):
        """Gets the checkin_time_exception of this Policies.

        Check-in time exception.

        :return: The checkin_time_exception of this Policies.
        :rtype: str
        """
        return self._checkin_time_exception

    @checkin_time_exception.setter
    def checkin_time_exception(self, checkin_time_exception):
        """Sets the checkin_time_exception of this Policies.

        Check-in time exception.

        :param checkin_time_exception: The checkin_time_exception of this Policies.
        :type checkin_time_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if checkin_time_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `checkin_time_exception` ({0}), must be one of {1}"
                .format(checkin_time_exception, allowed_values)
            )

        self._checkin_time_exception = checkin_time_exception

    @property
    def checkout_time(self):
        """Gets the checkout_time of this Policies.


        :return: The checkout_time of this Policies.
        :rtype: TimeOfDay
        """
        return self._checkout_time

    @checkout_time.setter
    def checkout_time(self, checkout_time):
        """Sets the checkout_time of this Policies.


        :param checkout_time: The checkout_time of this Policies.
        :type checkout_time: TimeOfDay
        """

        self._checkout_time = checkout_time

    @property
    def checkout_time_exception(self):
        """Gets the checkout_time_exception of this Policies.

        Check-out time exception.

        :return: The checkout_time_exception of this Policies.
        :rtype: str
        """
        return self._checkout_time_exception

    @checkout_time_exception.setter
    def checkout_time_exception(self, checkout_time_exception):
        """Sets the checkout_time_exception of this Policies.

        Check-out time exception.

        :param checkout_time_exception: The checkout_time_exception of this Policies.
        :type checkout_time_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if checkout_time_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `checkout_time_exception` ({0}), must be one of {1}"
                .format(checkout_time_exception, allowed_values)
            )

        self._checkout_time_exception = checkout_time_exception

    @property
    def kids_stay_free(self):
        """Gets the kids_stay_free of this Policies.

        Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.

        :return: The kids_stay_free of this Policies.
        :rtype: bool
        """
        return self._kids_stay_free

    @kids_stay_free.setter
    def kids_stay_free(self, kids_stay_free):
        """Sets the kids_stay_free of this Policies.

        Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.

        :param kids_stay_free: The kids_stay_free of this Policies.
        :type kids_stay_free: bool
        """

        self._kids_stay_free = kids_stay_free

    @property
    def kids_stay_free_exception(self):
        """Gets the kids_stay_free_exception of this Policies.

        Kids stay free exception.

        :return: The kids_stay_free_exception of this Policies.
        :rtype: str
        """
        return self._kids_stay_free_exception

    @kids_stay_free_exception.setter
    def kids_stay_free_exception(self, kids_stay_free_exception):
        """Sets the kids_stay_free_exception of this Policies.

        Kids stay free exception.

        :param kids_stay_free_exception: The kids_stay_free_exception of this Policies.
        :type kids_stay_free_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kids_stay_free_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kids_stay_free_exception` ({0}), must be one of {1}"
                .format(kids_stay_free_exception, allowed_values)
            )

        self._kids_stay_free_exception = kids_stay_free_exception

    @property
    def max_child_age(self):
        """Gets the max_child_age of this Policies.

        Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.

        :return: The max_child_age of this Policies.
        :rtype: int
        """
        return self._max_child_age

    @max_child_age.setter
    def max_child_age(self, max_child_age):
        """Sets the max_child_age of this Policies.

        Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.

        :param max_child_age: The max_child_age of this Policies.
        :type max_child_age: int
        """

        self._max_child_age = max_child_age

    @property
    def max_child_age_exception(self):
        """Gets the max_child_age_exception of this Policies.

        Max child age exception.

        :return: The max_child_age_exception of this Policies.
        :rtype: str
        """
        return self._max_child_age_exception

    @max_child_age_exception.setter
    def max_child_age_exception(self, max_child_age_exception):
        """Sets the max_child_age_exception of this Policies.

        Max child age exception.

        :param max_child_age_exception: The max_child_age_exception of this Policies.
        :type max_child_age_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if max_child_age_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `max_child_age_exception` ({0}), must be one of {1}"
                .format(max_child_age_exception, allowed_values)
            )

        self._max_child_age_exception = max_child_age_exception

    @property
    def max_kids_stay_free_count(self):
        """Gets the max_kids_stay_free_count of this Policies.

        Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.

        :return: The max_kids_stay_free_count of this Policies.
        :rtype: int
        """
        return self._max_kids_stay_free_count

    @max_kids_stay_free_count.setter
    def max_kids_stay_free_count(self, max_kids_stay_free_count):
        """Sets the max_kids_stay_free_count of this Policies.

        Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.

        :param max_kids_stay_free_count: The max_kids_stay_free_count of this Policies.
        :type max_kids_stay_free_count: int
        """

        self._max_kids_stay_free_count = max_kids_stay_free_count

    @property
    def max_kids_stay_free_count_exception(self):
        """Gets the max_kids_stay_free_count_exception of this Policies.

        Max kids stay free count exception.

        :return: The max_kids_stay_free_count_exception of this Policies.
        :rtype: str
        """
        return self._max_kids_stay_free_count_exception

    @max_kids_stay_free_count_exception.setter
    def max_kids_stay_free_count_exception(self, max_kids_stay_free_count_exception):
        """Sets the max_kids_stay_free_count_exception of this Policies.

        Max kids stay free count exception.

        :param max_kids_stay_free_count_exception: The max_kids_stay_free_count_exception of this Policies.
        :type max_kids_stay_free_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if max_kids_stay_free_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `max_kids_stay_free_count_exception` ({0}), must be one of {1}"
                .format(max_kids_stay_free_count_exception, allowed_values)
            )

        self._max_kids_stay_free_count_exception = max_kids_stay_free_count_exception

    @property
    def payment_options(self):
        """Gets the payment_options of this Policies.


        :return: The payment_options of this Policies.
        :rtype: PaymentOptions
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this Policies.


        :param payment_options: The payment_options of this Policies.
        :type payment_options: PaymentOptions
        """

        self._payment_options = payment_options

    @property
    def smoke_free_property(self):
        """Gets the smoke_free_property of this Policies.

        Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.

        :return: The smoke_free_property of this Policies.
        :rtype: bool
        """
        return self._smoke_free_property

    @smoke_free_property.setter
    def smoke_free_property(self, smoke_free_property):
        """Sets the smoke_free_property of this Policies.

        Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.

        :param smoke_free_property: The smoke_free_property of this Policies.
        :type smoke_free_property: bool
        """

        self._smoke_free_property = smoke_free_property

    @property
    def smoke_free_property_exception(self):
        """Gets the smoke_free_property_exception of this Policies.

        Smoke free property exception.

        :return: The smoke_free_property_exception of this Policies.
        :rtype: str
        """
        return self._smoke_free_property_exception

    @smoke_free_property_exception.setter
    def smoke_free_property_exception(self, smoke_free_property_exception):
        """Sets the smoke_free_property_exception of this Policies.

        Smoke free property exception.

        :param smoke_free_property_exception: The smoke_free_property_exception of this Policies.
        :type smoke_free_property_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if smoke_free_property_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `smoke_free_property_exception` ({0}), must be one of {1}"
                .format(smoke_free_property_exception, allowed_values)
            )

        self._smoke_free_property_exception = smoke_free_property_exception
