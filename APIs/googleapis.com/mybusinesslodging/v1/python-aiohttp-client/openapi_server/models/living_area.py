# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.living_area_accessibility import LivingAreaAccessibility
from openapi_server.models.living_area_eating import LivingAreaEating
from openapi_server.models.living_area_features import LivingAreaFeatures
from openapi_server.models.living_area_layout import LivingAreaLayout
from openapi_server.models.living_area_sleeping import LivingAreaSleeping
from openapi_server import util


class LivingArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessibility: LivingAreaAccessibility=None, eating: LivingAreaEating=None, features: LivingAreaFeatures=None, layout: LivingAreaLayout=None, sleeping: LivingAreaSleeping=None):
        """LivingArea - a model defined in OpenAPI

        :param accessibility: The accessibility of this LivingArea.
        :param eating: The eating of this LivingArea.
        :param features: The features of this LivingArea.
        :param layout: The layout of this LivingArea.
        :param sleeping: The sleeping of this LivingArea.
        """
        self.openapi_types = {
            'accessibility': LivingAreaAccessibility,
            'eating': LivingAreaEating,
            'features': LivingAreaFeatures,
            'layout': LivingAreaLayout,
            'sleeping': LivingAreaSleeping
        }

        self.attribute_map = {
            'accessibility': 'accessibility',
            'eating': 'eating',
            'features': 'features',
            'layout': 'layout',
            'sleeping': 'sleeping'
        }

        self._accessibility = accessibility
        self._eating = eating
        self._features = features
        self._layout = layout
        self._sleeping = sleeping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingArea of this LivingArea.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessibility(self):
        """Gets the accessibility of this LivingArea.


        :return: The accessibility of this LivingArea.
        :rtype: LivingAreaAccessibility
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this LivingArea.


        :param accessibility: The accessibility of this LivingArea.
        :type accessibility: LivingAreaAccessibility
        """

        self._accessibility = accessibility

    @property
    def eating(self):
        """Gets the eating of this LivingArea.


        :return: The eating of this LivingArea.
        :rtype: LivingAreaEating
        """
        return self._eating

    @eating.setter
    def eating(self, eating):
        """Sets the eating of this LivingArea.


        :param eating: The eating of this LivingArea.
        :type eating: LivingAreaEating
        """

        self._eating = eating

    @property
    def features(self):
        """Gets the features of this LivingArea.


        :return: The features of this LivingArea.
        :rtype: LivingAreaFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this LivingArea.


        :param features: The features of this LivingArea.
        :type features: LivingAreaFeatures
        """

        self._features = features

    @property
    def layout(self):
        """Gets the layout of this LivingArea.


        :return: The layout of this LivingArea.
        :rtype: LivingAreaLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this LivingArea.


        :param layout: The layout of this LivingArea.
        :type layout: LivingAreaLayout
        """

        self._layout = layout

    @property
    def sleeping(self):
        """Gets the sleeping of this LivingArea.


        :return: The sleeping of this LivingArea.
        :rtype: LivingAreaSleeping
        """
        return self._sleeping

    @sleeping.setter
    def sleeping(self, sleeping):
        """Sets the sleeping of this LivingArea.


        :param sleeping: The sleeping of this LivingArea.
        :type sleeping: LivingAreaSleeping
        """

        self._sleeping = sleeping
