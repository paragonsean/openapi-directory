# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eco_certification import EcoCertification
from openapi_server import util


class SustainabilityCertifications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breeam_certification: str=None, breeam_certification_exception: str=None, eco_certifications: List[EcoCertification]=None, leed_certification: str=None, leed_certification_exception: str=None):
        """SustainabilityCertifications - a model defined in OpenAPI

        :param breeam_certification: The breeam_certification of this SustainabilityCertifications.
        :param breeam_certification_exception: The breeam_certification_exception of this SustainabilityCertifications.
        :param eco_certifications: The eco_certifications of this SustainabilityCertifications.
        :param leed_certification: The leed_certification of this SustainabilityCertifications.
        :param leed_certification_exception: The leed_certification_exception of this SustainabilityCertifications.
        """
        self.openapi_types = {
            'breeam_certification': str,
            'breeam_certification_exception': str,
            'eco_certifications': List[EcoCertification],
            'leed_certification': str,
            'leed_certification_exception': str
        }

        self.attribute_map = {
            'breeam_certification': 'breeamCertification',
            'breeam_certification_exception': 'breeamCertificationException',
            'eco_certifications': 'ecoCertifications',
            'leed_certification': 'leedCertification',
            'leed_certification_exception': 'leedCertificationException'
        }

        self._breeam_certification = breeam_certification
        self._breeam_certification_exception = breeam_certification_exception
        self._eco_certifications = eco_certifications
        self._leed_certification = leed_certification
        self._leed_certification_exception = leed_certification_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SustainabilityCertifications':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SustainabilityCertifications of this SustainabilityCertifications.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breeam_certification(self):
        """Gets the breeam_certification of this SustainabilityCertifications.

        BREEAM certification.

        :return: The breeam_certification of this SustainabilityCertifications.
        :rtype: str
        """
        return self._breeam_certification

    @breeam_certification.setter
    def breeam_certification(self, breeam_certification):
        """Sets the breeam_certification of this SustainabilityCertifications.

        BREEAM certification.

        :param breeam_certification: The breeam_certification of this SustainabilityCertifications.
        :type breeam_certification: str
        """
        allowed_values = ["BREEAM_CERTIFICATION_UNSPECIFIED", "NO_BREEAM_CERTIFICATION", "BREEAM_PASS", "BREEAM_GOOD", "BREEAM_VERY_GOOD", "BREEAM_EXCELLENT", "BREEAM_OUTSTANDING"]  # noqa: E501
        if breeam_certification not in allowed_values:
            raise ValueError(
                "Invalid value for `breeam_certification` ({0}), must be one of {1}"
                .format(breeam_certification, allowed_values)
            )

        self._breeam_certification = breeam_certification

    @property
    def breeam_certification_exception(self):
        """Gets the breeam_certification_exception of this SustainabilityCertifications.

        BREEAM certification exception.

        :return: The breeam_certification_exception of this SustainabilityCertifications.
        :rtype: str
        """
        return self._breeam_certification_exception

    @breeam_certification_exception.setter
    def breeam_certification_exception(self, breeam_certification_exception):
        """Sets the breeam_certification_exception of this SustainabilityCertifications.

        BREEAM certification exception.

        :param breeam_certification_exception: The breeam_certification_exception of this SustainabilityCertifications.
        :type breeam_certification_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if breeam_certification_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `breeam_certification_exception` ({0}), must be one of {1}"
                .format(breeam_certification_exception, allowed_values)
            )

        self._breeam_certification_exception = breeam_certification_exception

    @property
    def eco_certifications(self):
        """Gets the eco_certifications of this SustainabilityCertifications.

        The eco certificates awarded to the hotel.

        :return: The eco_certifications of this SustainabilityCertifications.
        :rtype: List[EcoCertification]
        """
        return self._eco_certifications

    @eco_certifications.setter
    def eco_certifications(self, eco_certifications):
        """Sets the eco_certifications of this SustainabilityCertifications.

        The eco certificates awarded to the hotel.

        :param eco_certifications: The eco_certifications of this SustainabilityCertifications.
        :type eco_certifications: List[EcoCertification]
        """

        self._eco_certifications = eco_certifications

    @property
    def leed_certification(self):
        """Gets the leed_certification of this SustainabilityCertifications.

        LEED certification.

        :return: The leed_certification of this SustainabilityCertifications.
        :rtype: str
        """
        return self._leed_certification

    @leed_certification.setter
    def leed_certification(self, leed_certification):
        """Sets the leed_certification of this SustainabilityCertifications.

        LEED certification.

        :param leed_certification: The leed_certification of this SustainabilityCertifications.
        :type leed_certification: str
        """
        allowed_values = ["LEED_CERTIFICATION_UNSPECIFIED", "NO_LEED_CERTIFICATION", "LEED_CERTIFIED", "LEED_SILVER", "LEED_GOLD", "LEED_PLATINUM"]  # noqa: E501
        if leed_certification not in allowed_values:
            raise ValueError(
                "Invalid value for `leed_certification` ({0}), must be one of {1}"
                .format(leed_certification, allowed_values)
            )

        self._leed_certification = leed_certification

    @property
    def leed_certification_exception(self):
        """Gets the leed_certification_exception of this SustainabilityCertifications.

        LEED certification exception.

        :return: The leed_certification_exception of this SustainabilityCertifications.
        :rtype: str
        """
        return self._leed_certification_exception

    @leed_certification_exception.setter
    def leed_certification_exception(self, leed_certification_exception):
        """Sets the leed_certification_exception of this SustainabilityCertifications.

        LEED certification exception.

        :param leed_certification_exception: The leed_certification_exception of this SustainabilityCertifications.
        :type leed_certification_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if leed_certification_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `leed_certification_exception` ({0}), must be one of {1}"
                .format(leed_certification_exception, allowed_values)
            )

        self._leed_certification_exception = leed_certification_exception
