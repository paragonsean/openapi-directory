# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EcoCertification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, awarded: bool=None, awarded_exception: str=None, eco_certificate: str=None):
        """EcoCertification - a model defined in OpenAPI

        :param awarded: The awarded of this EcoCertification.
        :param awarded_exception: The awarded_exception of this EcoCertification.
        :param eco_certificate: The eco_certificate of this EcoCertification.
        """
        self.openapi_types = {
            'awarded': bool,
            'awarded_exception': str,
            'eco_certificate': str
        }

        self.attribute_map = {
            'awarded': 'awarded',
            'awarded_exception': 'awardedException',
            'eco_certificate': 'ecoCertificate'
        }

        self._awarded = awarded
        self._awarded_exception = awarded_exception
        self._eco_certificate = eco_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcoCertification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcoCertification of this EcoCertification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def awarded(self):
        """Gets the awarded of this EcoCertification.

        Whether the eco certificate was awarded or not.

        :return: The awarded of this EcoCertification.
        :rtype: bool
        """
        return self._awarded

    @awarded.setter
    def awarded(self, awarded):
        """Sets the awarded of this EcoCertification.

        Whether the eco certificate was awarded or not.

        :param awarded: The awarded of this EcoCertification.
        :type awarded: bool
        """

        self._awarded = awarded

    @property
    def awarded_exception(self):
        """Gets the awarded_exception of this EcoCertification.

        Awarded exception.

        :return: The awarded_exception of this EcoCertification.
        :rtype: str
        """
        return self._awarded_exception

    @awarded_exception.setter
    def awarded_exception(self, awarded_exception):
        """Sets the awarded_exception of this EcoCertification.

        Awarded exception.

        :param awarded_exception: The awarded_exception of this EcoCertification.
        :type awarded_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if awarded_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `awarded_exception` ({0}), must be one of {1}"
                .format(awarded_exception, allowed_values)
            )

        self._awarded_exception = awarded_exception

    @property
    def eco_certificate(self):
        """Gets the eco_certificate of this EcoCertification.

        Required. The eco certificate.

        :return: The eco_certificate of this EcoCertification.
        :rtype: str
        """
        return self._eco_certificate

    @eco_certificate.setter
    def eco_certificate(self, eco_certificate):
        """Sets the eco_certificate of this EcoCertification.

        Required. The eco certificate.

        :param eco_certificate: The eco_certificate of this EcoCertification.
        :type eco_certificate: str
        """
        allowed_values = ["ECO_CERTIFICATE_UNSPECIFIED", "ISO14001", "ISO50001", "ASIAN_ECOTOURISM", "BIOSPHERE_RESPOSNIBLE_TOURISM", "BUREAU_VERITAS", "CONTROL_UNION", "EARTHCHECK", "ECO_CERTIFICATION_MALTA", "ECOTOURISM_AUSTRALIAS_ECO", "GREAT_GREEN_DEAL", "GREEN_GLOBE", "GREEN_GROWTH2050", "GREEN_KEY", "GREEN_KEY_ECO_RATING", "GREEN_SEAL", "GREEN_STAR", "GREEN_TOURISM_ACTIVE", "HILTON_LIGHTSTAY", "HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY", "HOTELES_MAS_VERDES", "NORDIC_SWAN_ECOLABEL", "PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM", "SUSTAINABLE_TRAVEL_IRELAND", "TOF_TIGERS_INITITIVES_PUG", "TRAVELIFE", "UNITED_CERTIFICATION_SYSTEMS_LIMITED", "VIREO_SRL"]  # noqa: E501
        if eco_certificate not in allowed_values:
            raise ValueError(
                "Invalid value for `eco_certificate` ({0}), must be one of {1}"
                .format(eco_certificate, allowed_values)
            )

        self._eco_certificate = eco_certificate
