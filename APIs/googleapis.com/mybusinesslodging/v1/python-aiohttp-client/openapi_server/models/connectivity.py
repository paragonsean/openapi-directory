# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Connectivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, free_wifi: bool=None, free_wifi_exception: str=None, public_area_wifi_available: bool=None, public_area_wifi_available_exception: str=None, public_internet_terminal: bool=None, public_internet_terminal_exception: str=None, wifi_available: bool=None, wifi_available_exception: str=None):
        """Connectivity - a model defined in OpenAPI

        :param free_wifi: The free_wifi of this Connectivity.
        :param free_wifi_exception: The free_wifi_exception of this Connectivity.
        :param public_area_wifi_available: The public_area_wifi_available of this Connectivity.
        :param public_area_wifi_available_exception: The public_area_wifi_available_exception of this Connectivity.
        :param public_internet_terminal: The public_internet_terminal of this Connectivity.
        :param public_internet_terminal_exception: The public_internet_terminal_exception of this Connectivity.
        :param wifi_available: The wifi_available of this Connectivity.
        :param wifi_available_exception: The wifi_available_exception of this Connectivity.
        """
        self.openapi_types = {
            'free_wifi': bool,
            'free_wifi_exception': str,
            'public_area_wifi_available': bool,
            'public_area_wifi_available_exception': str,
            'public_internet_terminal': bool,
            'public_internet_terminal_exception': str,
            'wifi_available': bool,
            'wifi_available_exception': str
        }

        self.attribute_map = {
            'free_wifi': 'freeWifi',
            'free_wifi_exception': 'freeWifiException',
            'public_area_wifi_available': 'publicAreaWifiAvailable',
            'public_area_wifi_available_exception': 'publicAreaWifiAvailableException',
            'public_internet_terminal': 'publicInternetTerminal',
            'public_internet_terminal_exception': 'publicInternetTerminalException',
            'wifi_available': 'wifiAvailable',
            'wifi_available_exception': 'wifiAvailableException'
        }

        self._free_wifi = free_wifi
        self._free_wifi_exception = free_wifi_exception
        self._public_area_wifi_available = public_area_wifi_available
        self._public_area_wifi_available_exception = public_area_wifi_available_exception
        self._public_internet_terminal = public_internet_terminal
        self._public_internet_terminal_exception = public_internet_terminal_exception
        self._wifi_available = wifi_available
        self._wifi_available_exception = wifi_available_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connectivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connectivity of this Connectivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def free_wifi(self):
        """Gets the free_wifi of this Connectivity.

        Free wifi. The hotel offers guests wifi for free.

        :return: The free_wifi of this Connectivity.
        :rtype: bool
        """
        return self._free_wifi

    @free_wifi.setter
    def free_wifi(self, free_wifi):
        """Sets the free_wifi of this Connectivity.

        Free wifi. The hotel offers guests wifi for free.

        :param free_wifi: The free_wifi of this Connectivity.
        :type free_wifi: bool
        """

        self._free_wifi = free_wifi

    @property
    def free_wifi_exception(self):
        """Gets the free_wifi_exception of this Connectivity.

        Free wifi exception.

        :return: The free_wifi_exception of this Connectivity.
        :rtype: str
        """
        return self._free_wifi_exception

    @free_wifi_exception.setter
    def free_wifi_exception(self, free_wifi_exception):
        """Sets the free_wifi_exception of this Connectivity.

        Free wifi exception.

        :param free_wifi_exception: The free_wifi_exception of this Connectivity.
        :type free_wifi_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_wifi_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_wifi_exception` ({0}), must be one of {1}"
                .format(free_wifi_exception, allowed_values)
            )

        self._free_wifi_exception = free_wifi_exception

    @property
    def public_area_wifi_available(self):
        """Gets the public_area_wifi_available of this Connectivity.

        Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.

        :return: The public_area_wifi_available of this Connectivity.
        :rtype: bool
        """
        return self._public_area_wifi_available

    @public_area_wifi_available.setter
    def public_area_wifi_available(self, public_area_wifi_available):
        """Sets the public_area_wifi_available of this Connectivity.

        Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.

        :param public_area_wifi_available: The public_area_wifi_available of this Connectivity.
        :type public_area_wifi_available: bool
        """

        self._public_area_wifi_available = public_area_wifi_available

    @property
    def public_area_wifi_available_exception(self):
        """Gets the public_area_wifi_available_exception of this Connectivity.

        Public area wifi available exception.

        :return: The public_area_wifi_available_exception of this Connectivity.
        :rtype: str
        """
        return self._public_area_wifi_available_exception

    @public_area_wifi_available_exception.setter
    def public_area_wifi_available_exception(self, public_area_wifi_available_exception):
        """Sets the public_area_wifi_available_exception of this Connectivity.

        Public area wifi available exception.

        :param public_area_wifi_available_exception: The public_area_wifi_available_exception of this Connectivity.
        :type public_area_wifi_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if public_area_wifi_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `public_area_wifi_available_exception` ({0}), must be one of {1}"
                .format(public_area_wifi_available_exception, allowed_values)
            )

        self._public_area_wifi_available_exception = public_area_wifi_available_exception

    @property
    def public_internet_terminal(self):
        """Gets the public_internet_terminal of this Connectivity.

        Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.

        :return: The public_internet_terminal of this Connectivity.
        :rtype: bool
        """
        return self._public_internet_terminal

    @public_internet_terminal.setter
    def public_internet_terminal(self, public_internet_terminal):
        """Sets the public_internet_terminal of this Connectivity.

        Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.

        :param public_internet_terminal: The public_internet_terminal of this Connectivity.
        :type public_internet_terminal: bool
        """

        self._public_internet_terminal = public_internet_terminal

    @property
    def public_internet_terminal_exception(self):
        """Gets the public_internet_terminal_exception of this Connectivity.

        Public internet terminal exception.

        :return: The public_internet_terminal_exception of this Connectivity.
        :rtype: str
        """
        return self._public_internet_terminal_exception

    @public_internet_terminal_exception.setter
    def public_internet_terminal_exception(self, public_internet_terminal_exception):
        """Sets the public_internet_terminal_exception of this Connectivity.

        Public internet terminal exception.

        :param public_internet_terminal_exception: The public_internet_terminal_exception of this Connectivity.
        :type public_internet_terminal_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if public_internet_terminal_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `public_internet_terminal_exception` ({0}), must be one of {1}"
                .format(public_internet_terminal_exception, allowed_values)
            )

        self._public_internet_terminal_exception = public_internet_terminal_exception

    @property
    def wifi_available(self):
        """Gets the wifi_available of this Connectivity.

        Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.

        :return: The wifi_available of this Connectivity.
        :rtype: bool
        """
        return self._wifi_available

    @wifi_available.setter
    def wifi_available(self, wifi_available):
        """Sets the wifi_available of this Connectivity.

        Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.

        :param wifi_available: The wifi_available of this Connectivity.
        :type wifi_available: bool
        """

        self._wifi_available = wifi_available

    @property
    def wifi_available_exception(self):
        """Gets the wifi_available_exception of this Connectivity.

        Wifi available exception.

        :return: The wifi_available_exception of this Connectivity.
        :rtype: str
        """
        return self._wifi_available_exception

    @wifi_available_exception.setter
    def wifi_available_exception(self, wifi_available_exception):
        """Sets the wifi_available_exception of this Connectivity.

        Wifi available exception.

        :param wifi_available_exception: The wifi_available_exception of this Connectivity.
        :type wifi_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if wifi_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `wifi_available_exception` ({0}), must be one of {1}"
                .format(wifi_available_exception, allowed_values)
            )

        self._wifi_available_exception = wifi_available_exception
