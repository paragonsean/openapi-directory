# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SustainableSourcing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eco_friendly_toiletries: bool=None, eco_friendly_toiletries_exception: str=None, locally_sourced_food_and_beverages: bool=None, locally_sourced_food_and_beverages_exception: str=None, organic_cage_free_eggs: bool=None, organic_cage_free_eggs_exception: str=None, organic_food_and_beverages: bool=None, organic_food_and_beverages_exception: str=None, responsible_purchasing_policy: bool=None, responsible_purchasing_policy_exception: str=None, responsibly_sources_seafood: bool=None, responsibly_sources_seafood_exception: str=None, vegan_meals: bool=None, vegan_meals_exception: str=None, vegetarian_meals: bool=None, vegetarian_meals_exception: str=None):
        """SustainableSourcing - a model defined in OpenAPI

        :param eco_friendly_toiletries: The eco_friendly_toiletries of this SustainableSourcing.
        :param eco_friendly_toiletries_exception: The eco_friendly_toiletries_exception of this SustainableSourcing.
        :param locally_sourced_food_and_beverages: The locally_sourced_food_and_beverages of this SustainableSourcing.
        :param locally_sourced_food_and_beverages_exception: The locally_sourced_food_and_beverages_exception of this SustainableSourcing.
        :param organic_cage_free_eggs: The organic_cage_free_eggs of this SustainableSourcing.
        :param organic_cage_free_eggs_exception: The organic_cage_free_eggs_exception of this SustainableSourcing.
        :param organic_food_and_beverages: The organic_food_and_beverages of this SustainableSourcing.
        :param organic_food_and_beverages_exception: The organic_food_and_beverages_exception of this SustainableSourcing.
        :param responsible_purchasing_policy: The responsible_purchasing_policy of this SustainableSourcing.
        :param responsible_purchasing_policy_exception: The responsible_purchasing_policy_exception of this SustainableSourcing.
        :param responsibly_sources_seafood: The responsibly_sources_seafood of this SustainableSourcing.
        :param responsibly_sources_seafood_exception: The responsibly_sources_seafood_exception of this SustainableSourcing.
        :param vegan_meals: The vegan_meals of this SustainableSourcing.
        :param vegan_meals_exception: The vegan_meals_exception of this SustainableSourcing.
        :param vegetarian_meals: The vegetarian_meals of this SustainableSourcing.
        :param vegetarian_meals_exception: The vegetarian_meals_exception of this SustainableSourcing.
        """
        self.openapi_types = {
            'eco_friendly_toiletries': bool,
            'eco_friendly_toiletries_exception': str,
            'locally_sourced_food_and_beverages': bool,
            'locally_sourced_food_and_beverages_exception': str,
            'organic_cage_free_eggs': bool,
            'organic_cage_free_eggs_exception': str,
            'organic_food_and_beverages': bool,
            'organic_food_and_beverages_exception': str,
            'responsible_purchasing_policy': bool,
            'responsible_purchasing_policy_exception': str,
            'responsibly_sources_seafood': bool,
            'responsibly_sources_seafood_exception': str,
            'vegan_meals': bool,
            'vegan_meals_exception': str,
            'vegetarian_meals': bool,
            'vegetarian_meals_exception': str
        }

        self.attribute_map = {
            'eco_friendly_toiletries': 'ecoFriendlyToiletries',
            'eco_friendly_toiletries_exception': 'ecoFriendlyToiletriesException',
            'locally_sourced_food_and_beverages': 'locallySourcedFoodAndBeverages',
            'locally_sourced_food_and_beverages_exception': 'locallySourcedFoodAndBeveragesException',
            'organic_cage_free_eggs': 'organicCageFreeEggs',
            'organic_cage_free_eggs_exception': 'organicCageFreeEggsException',
            'organic_food_and_beverages': 'organicFoodAndBeverages',
            'organic_food_and_beverages_exception': 'organicFoodAndBeveragesException',
            'responsible_purchasing_policy': 'responsiblePurchasingPolicy',
            'responsible_purchasing_policy_exception': 'responsiblePurchasingPolicyException',
            'responsibly_sources_seafood': 'responsiblySourcesSeafood',
            'responsibly_sources_seafood_exception': 'responsiblySourcesSeafoodException',
            'vegan_meals': 'veganMeals',
            'vegan_meals_exception': 'veganMealsException',
            'vegetarian_meals': 'vegetarianMeals',
            'vegetarian_meals_exception': 'vegetarianMealsException'
        }

        self._eco_friendly_toiletries = eco_friendly_toiletries
        self._eco_friendly_toiletries_exception = eco_friendly_toiletries_exception
        self._locally_sourced_food_and_beverages = locally_sourced_food_and_beverages
        self._locally_sourced_food_and_beverages_exception = locally_sourced_food_and_beverages_exception
        self._organic_cage_free_eggs = organic_cage_free_eggs
        self._organic_cage_free_eggs_exception = organic_cage_free_eggs_exception
        self._organic_food_and_beverages = organic_food_and_beverages
        self._organic_food_and_beverages_exception = organic_food_and_beverages_exception
        self._responsible_purchasing_policy = responsible_purchasing_policy
        self._responsible_purchasing_policy_exception = responsible_purchasing_policy_exception
        self._responsibly_sources_seafood = responsibly_sources_seafood
        self._responsibly_sources_seafood_exception = responsibly_sources_seafood_exception
        self._vegan_meals = vegan_meals
        self._vegan_meals_exception = vegan_meals_exception
        self._vegetarian_meals = vegetarian_meals
        self._vegetarian_meals_exception = vegetarian_meals_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SustainableSourcing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SustainableSourcing of this SustainableSourcing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eco_friendly_toiletries(self):
        """Gets the eco_friendly_toiletries of this SustainableSourcing.

        Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.

        :return: The eco_friendly_toiletries of this SustainableSourcing.
        :rtype: bool
        """
        return self._eco_friendly_toiletries

    @eco_friendly_toiletries.setter
    def eco_friendly_toiletries(self, eco_friendly_toiletries):
        """Sets the eco_friendly_toiletries of this SustainableSourcing.

        Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.

        :param eco_friendly_toiletries: The eco_friendly_toiletries of this SustainableSourcing.
        :type eco_friendly_toiletries: bool
        """

        self._eco_friendly_toiletries = eco_friendly_toiletries

    @property
    def eco_friendly_toiletries_exception(self):
        """Gets the eco_friendly_toiletries_exception of this SustainableSourcing.

        Eco friendly toiletries exception.

        :return: The eco_friendly_toiletries_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._eco_friendly_toiletries_exception

    @eco_friendly_toiletries_exception.setter
    def eco_friendly_toiletries_exception(self, eco_friendly_toiletries_exception):
        """Sets the eco_friendly_toiletries_exception of this SustainableSourcing.

        Eco friendly toiletries exception.

        :param eco_friendly_toiletries_exception: The eco_friendly_toiletries_exception of this SustainableSourcing.
        :type eco_friendly_toiletries_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if eco_friendly_toiletries_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `eco_friendly_toiletries_exception` ({0}), must be one of {1}"
                .format(eco_friendly_toiletries_exception, allowed_values)
            )

        self._eco_friendly_toiletries_exception = eco_friendly_toiletries_exception

    @property
    def locally_sourced_food_and_beverages(self):
        """Gets the locally_sourced_food_and_beverages of this SustainableSourcing.

        Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.

        :return: The locally_sourced_food_and_beverages of this SustainableSourcing.
        :rtype: bool
        """
        return self._locally_sourced_food_and_beverages

    @locally_sourced_food_and_beverages.setter
    def locally_sourced_food_and_beverages(self, locally_sourced_food_and_beverages):
        """Sets the locally_sourced_food_and_beverages of this SustainableSourcing.

        Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.

        :param locally_sourced_food_and_beverages: The locally_sourced_food_and_beverages of this SustainableSourcing.
        :type locally_sourced_food_and_beverages: bool
        """

        self._locally_sourced_food_and_beverages = locally_sourced_food_and_beverages

    @property
    def locally_sourced_food_and_beverages_exception(self):
        """Gets the locally_sourced_food_and_beverages_exception of this SustainableSourcing.

        Locally sourced food and beverages exception.

        :return: The locally_sourced_food_and_beverages_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._locally_sourced_food_and_beverages_exception

    @locally_sourced_food_and_beverages_exception.setter
    def locally_sourced_food_and_beverages_exception(self, locally_sourced_food_and_beverages_exception):
        """Sets the locally_sourced_food_and_beverages_exception of this SustainableSourcing.

        Locally sourced food and beverages exception.

        :param locally_sourced_food_and_beverages_exception: The locally_sourced_food_and_beverages_exception of this SustainableSourcing.
        :type locally_sourced_food_and_beverages_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if locally_sourced_food_and_beverages_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `locally_sourced_food_and_beverages_exception` ({0}), must be one of {1}"
                .format(locally_sourced_food_and_beverages_exception, allowed_values)
            )

        self._locally_sourced_food_and_beverages_exception = locally_sourced_food_and_beverages_exception

    @property
    def organic_cage_free_eggs(self):
        """Gets the organic_cage_free_eggs of this SustainableSourcing.

        Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).

        :return: The organic_cage_free_eggs of this SustainableSourcing.
        :rtype: bool
        """
        return self._organic_cage_free_eggs

    @organic_cage_free_eggs.setter
    def organic_cage_free_eggs(self, organic_cage_free_eggs):
        """Sets the organic_cage_free_eggs of this SustainableSourcing.

        Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).

        :param organic_cage_free_eggs: The organic_cage_free_eggs of this SustainableSourcing.
        :type organic_cage_free_eggs: bool
        """

        self._organic_cage_free_eggs = organic_cage_free_eggs

    @property
    def organic_cage_free_eggs_exception(self):
        """Gets the organic_cage_free_eggs_exception of this SustainableSourcing.

        Organic cage free eggs exception.

        :return: The organic_cage_free_eggs_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._organic_cage_free_eggs_exception

    @organic_cage_free_eggs_exception.setter
    def organic_cage_free_eggs_exception(self, organic_cage_free_eggs_exception):
        """Sets the organic_cage_free_eggs_exception of this SustainableSourcing.

        Organic cage free eggs exception.

        :param organic_cage_free_eggs_exception: The organic_cage_free_eggs_exception of this SustainableSourcing.
        :type organic_cage_free_eggs_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if organic_cage_free_eggs_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `organic_cage_free_eggs_exception` ({0}), must be one of {1}"
                .format(organic_cage_free_eggs_exception, allowed_values)
            )

        self._organic_cage_free_eggs_exception = organic_cage_free_eggs_exception

    @property
    def organic_food_and_beverages(self):
        """Gets the organic_food_and_beverages of this SustainableSourcing.

        Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.

        :return: The organic_food_and_beverages of this SustainableSourcing.
        :rtype: bool
        """
        return self._organic_food_and_beverages

    @organic_food_and_beverages.setter
    def organic_food_and_beverages(self, organic_food_and_beverages):
        """Sets the organic_food_and_beverages of this SustainableSourcing.

        Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.

        :param organic_food_and_beverages: The organic_food_and_beverages of this SustainableSourcing.
        :type organic_food_and_beverages: bool
        """

        self._organic_food_and_beverages = organic_food_and_beverages

    @property
    def organic_food_and_beverages_exception(self):
        """Gets the organic_food_and_beverages_exception of this SustainableSourcing.

        Organic food and beverages exception.

        :return: The organic_food_and_beverages_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._organic_food_and_beverages_exception

    @organic_food_and_beverages_exception.setter
    def organic_food_and_beverages_exception(self, organic_food_and_beverages_exception):
        """Sets the organic_food_and_beverages_exception of this SustainableSourcing.

        Organic food and beverages exception.

        :param organic_food_and_beverages_exception: The organic_food_and_beverages_exception of this SustainableSourcing.
        :type organic_food_and_beverages_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if organic_food_and_beverages_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `organic_food_and_beverages_exception` ({0}), must be one of {1}"
                .format(organic_food_and_beverages_exception, allowed_values)
            )

        self._organic_food_and_beverages_exception = organic_food_and_beverages_exception

    @property
    def responsible_purchasing_policy(self):
        """Gets the responsible_purchasing_policy of this SustainableSourcing.

        Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.

        :return: The responsible_purchasing_policy of this SustainableSourcing.
        :rtype: bool
        """
        return self._responsible_purchasing_policy

    @responsible_purchasing_policy.setter
    def responsible_purchasing_policy(self, responsible_purchasing_policy):
        """Sets the responsible_purchasing_policy of this SustainableSourcing.

        Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.

        :param responsible_purchasing_policy: The responsible_purchasing_policy of this SustainableSourcing.
        :type responsible_purchasing_policy: bool
        """

        self._responsible_purchasing_policy = responsible_purchasing_policy

    @property
    def responsible_purchasing_policy_exception(self):
        """Gets the responsible_purchasing_policy_exception of this SustainableSourcing.

        Responsible purchasing policy exception.

        :return: The responsible_purchasing_policy_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._responsible_purchasing_policy_exception

    @responsible_purchasing_policy_exception.setter
    def responsible_purchasing_policy_exception(self, responsible_purchasing_policy_exception):
        """Sets the responsible_purchasing_policy_exception of this SustainableSourcing.

        Responsible purchasing policy exception.

        :param responsible_purchasing_policy_exception: The responsible_purchasing_policy_exception of this SustainableSourcing.
        :type responsible_purchasing_policy_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if responsible_purchasing_policy_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `responsible_purchasing_policy_exception` ({0}), must be one of {1}"
                .format(responsible_purchasing_policy_exception, allowed_values)
            )

        self._responsible_purchasing_policy_exception = responsible_purchasing_policy_exception

    @property
    def responsibly_sources_seafood(self):
        """Gets the responsibly_sources_seafood of this SustainableSourcing.

        Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch \"avoid\" list, and must sustainably source seafood listed as \"good alternative,\" \"eco-certified,\" and \"best choice\". The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.

        :return: The responsibly_sources_seafood of this SustainableSourcing.
        :rtype: bool
        """
        return self._responsibly_sources_seafood

    @responsibly_sources_seafood.setter
    def responsibly_sources_seafood(self, responsibly_sources_seafood):
        """Sets the responsibly_sources_seafood of this SustainableSourcing.

        Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch \"avoid\" list, and must sustainably source seafood listed as \"good alternative,\" \"eco-certified,\" and \"best choice\". The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.

        :param responsibly_sources_seafood: The responsibly_sources_seafood of this SustainableSourcing.
        :type responsibly_sources_seafood: bool
        """

        self._responsibly_sources_seafood = responsibly_sources_seafood

    @property
    def responsibly_sources_seafood_exception(self):
        """Gets the responsibly_sources_seafood_exception of this SustainableSourcing.

        Responsibly sources seafood exception.

        :return: The responsibly_sources_seafood_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._responsibly_sources_seafood_exception

    @responsibly_sources_seafood_exception.setter
    def responsibly_sources_seafood_exception(self, responsibly_sources_seafood_exception):
        """Sets the responsibly_sources_seafood_exception of this SustainableSourcing.

        Responsibly sources seafood exception.

        :param responsibly_sources_seafood_exception: The responsibly_sources_seafood_exception of this SustainableSourcing.
        :type responsibly_sources_seafood_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if responsibly_sources_seafood_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `responsibly_sources_seafood_exception` ({0}), must be one of {1}"
                .format(responsibly_sources_seafood_exception, allowed_values)
            )

        self._responsibly_sources_seafood_exception = responsibly_sources_seafood_exception

    @property
    def vegan_meals(self):
        """Gets the vegan_meals of this SustainableSourcing.

        Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.

        :return: The vegan_meals of this SustainableSourcing.
        :rtype: bool
        """
        return self._vegan_meals

    @vegan_meals.setter
    def vegan_meals(self, vegan_meals):
        """Sets the vegan_meals of this SustainableSourcing.

        Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.

        :param vegan_meals: The vegan_meals of this SustainableSourcing.
        :type vegan_meals: bool
        """

        self._vegan_meals = vegan_meals

    @property
    def vegan_meals_exception(self):
        """Gets the vegan_meals_exception of this SustainableSourcing.

        Vegan meals exception.

        :return: The vegan_meals_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._vegan_meals_exception

    @vegan_meals_exception.setter
    def vegan_meals_exception(self, vegan_meals_exception):
        """Sets the vegan_meals_exception of this SustainableSourcing.

        Vegan meals exception.

        :param vegan_meals_exception: The vegan_meals_exception of this SustainableSourcing.
        :type vegan_meals_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if vegan_meals_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `vegan_meals_exception` ({0}), must be one of {1}"
                .format(vegan_meals_exception, allowed_values)
            )

        self._vegan_meals_exception = vegan_meals_exception

    @property
    def vegetarian_meals(self):
        """Gets the vegetarian_meals of this SustainableSourcing.

        Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.

        :return: The vegetarian_meals of this SustainableSourcing.
        :rtype: bool
        """
        return self._vegetarian_meals

    @vegetarian_meals.setter
    def vegetarian_meals(self, vegetarian_meals):
        """Sets the vegetarian_meals of this SustainableSourcing.

        Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.

        :param vegetarian_meals: The vegetarian_meals of this SustainableSourcing.
        :type vegetarian_meals: bool
        """

        self._vegetarian_meals = vegetarian_meals

    @property
    def vegetarian_meals_exception(self):
        """Gets the vegetarian_meals_exception of this SustainableSourcing.

        Vegetarian meals exception.

        :return: The vegetarian_meals_exception of this SustainableSourcing.
        :rtype: str
        """
        return self._vegetarian_meals_exception

    @vegetarian_meals_exception.setter
    def vegetarian_meals_exception(self, vegetarian_meals_exception):
        """Sets the vegetarian_meals_exception of this SustainableSourcing.

        Vegetarian meals exception.

        :param vegetarian_meals_exception: The vegetarian_meals_exception of this SustainableSourcing.
        :type vegetarian_meals_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if vegetarian_meals_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `vegetarian_meals_exception` ({0}), must be one of {1}"
                .format(vegetarian_meals_exception, allowed_values)
            )

        self._vegetarian_meals_exception = vegetarian_meals_exception
