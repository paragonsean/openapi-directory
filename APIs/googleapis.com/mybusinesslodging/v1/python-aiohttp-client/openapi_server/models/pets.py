# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cats_allowed: bool=None, cats_allowed_exception: str=None, dogs_allowed: bool=None, dogs_allowed_exception: str=None, pets_allowed: bool=None, pets_allowed_exception: str=None, pets_allowed_free: bool=None, pets_allowed_free_exception: str=None):
        """Pets - a model defined in OpenAPI

        :param cats_allowed: The cats_allowed of this Pets.
        :param cats_allowed_exception: The cats_allowed_exception of this Pets.
        :param dogs_allowed: The dogs_allowed of this Pets.
        :param dogs_allowed_exception: The dogs_allowed_exception of this Pets.
        :param pets_allowed: The pets_allowed of this Pets.
        :param pets_allowed_exception: The pets_allowed_exception of this Pets.
        :param pets_allowed_free: The pets_allowed_free of this Pets.
        :param pets_allowed_free_exception: The pets_allowed_free_exception of this Pets.
        """
        self.openapi_types = {
            'cats_allowed': bool,
            'cats_allowed_exception': str,
            'dogs_allowed': bool,
            'dogs_allowed_exception': str,
            'pets_allowed': bool,
            'pets_allowed_exception': str,
            'pets_allowed_free': bool,
            'pets_allowed_free_exception': str
        }

        self.attribute_map = {
            'cats_allowed': 'catsAllowed',
            'cats_allowed_exception': 'catsAllowedException',
            'dogs_allowed': 'dogsAllowed',
            'dogs_allowed_exception': 'dogsAllowedException',
            'pets_allowed': 'petsAllowed',
            'pets_allowed_exception': 'petsAllowedException',
            'pets_allowed_free': 'petsAllowedFree',
            'pets_allowed_free_exception': 'petsAllowedFreeException'
        }

        self._cats_allowed = cats_allowed
        self._cats_allowed_exception = cats_allowed_exception
        self._dogs_allowed = dogs_allowed
        self._dogs_allowed_exception = dogs_allowed_exception
        self._pets_allowed = pets_allowed
        self._pets_allowed_exception = pets_allowed_exception
        self._pets_allowed_free = pets_allowed_free
        self._pets_allowed_free_exception = pets_allowed_free_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pets of this Pets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cats_allowed(self):
        """Gets the cats_allowed of this Pets.

        Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.

        :return: The cats_allowed of this Pets.
        :rtype: bool
        """
        return self._cats_allowed

    @cats_allowed.setter
    def cats_allowed(self, cats_allowed):
        """Sets the cats_allowed of this Pets.

        Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.

        :param cats_allowed: The cats_allowed of this Pets.
        :type cats_allowed: bool
        """

        self._cats_allowed = cats_allowed

    @property
    def cats_allowed_exception(self):
        """Gets the cats_allowed_exception of this Pets.

        Cats allowed exception.

        :return: The cats_allowed_exception of this Pets.
        :rtype: str
        """
        return self._cats_allowed_exception

    @cats_allowed_exception.setter
    def cats_allowed_exception(self, cats_allowed_exception):
        """Sets the cats_allowed_exception of this Pets.

        Cats allowed exception.

        :param cats_allowed_exception: The cats_allowed_exception of this Pets.
        :type cats_allowed_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cats_allowed_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cats_allowed_exception` ({0}), must be one of {1}"
                .format(cats_allowed_exception, allowed_values)
            )

        self._cats_allowed_exception = cats_allowed_exception

    @property
    def dogs_allowed(self):
        """Gets the dogs_allowed of this Pets.

        Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.

        :return: The dogs_allowed of this Pets.
        :rtype: bool
        """
        return self._dogs_allowed

    @dogs_allowed.setter
    def dogs_allowed(self, dogs_allowed):
        """Sets the dogs_allowed of this Pets.

        Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.

        :param dogs_allowed: The dogs_allowed of this Pets.
        :type dogs_allowed: bool
        """

        self._dogs_allowed = dogs_allowed

    @property
    def dogs_allowed_exception(self):
        """Gets the dogs_allowed_exception of this Pets.

        Dogs allowed exception.

        :return: The dogs_allowed_exception of this Pets.
        :rtype: str
        """
        return self._dogs_allowed_exception

    @dogs_allowed_exception.setter
    def dogs_allowed_exception(self, dogs_allowed_exception):
        """Sets the dogs_allowed_exception of this Pets.

        Dogs allowed exception.

        :param dogs_allowed_exception: The dogs_allowed_exception of this Pets.
        :type dogs_allowed_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dogs_allowed_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dogs_allowed_exception` ({0}), must be one of {1}"
                .format(dogs_allowed_exception, allowed_values)
            )

        self._dogs_allowed_exception = dogs_allowed_exception

    @property
    def pets_allowed(self):
        """Gets the pets_allowed of this Pets.

        Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.

        :return: The pets_allowed of this Pets.
        :rtype: bool
        """
        return self._pets_allowed

    @pets_allowed.setter
    def pets_allowed(self, pets_allowed):
        """Sets the pets_allowed of this Pets.

        Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.

        :param pets_allowed: The pets_allowed of this Pets.
        :type pets_allowed: bool
        """

        self._pets_allowed = pets_allowed

    @property
    def pets_allowed_exception(self):
        """Gets the pets_allowed_exception of this Pets.

        Pets allowed exception.

        :return: The pets_allowed_exception of this Pets.
        :rtype: str
        """
        return self._pets_allowed_exception

    @pets_allowed_exception.setter
    def pets_allowed_exception(self, pets_allowed_exception):
        """Sets the pets_allowed_exception of this Pets.

        Pets allowed exception.

        :param pets_allowed_exception: The pets_allowed_exception of this Pets.
        :type pets_allowed_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pets_allowed_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pets_allowed_exception` ({0}), must be one of {1}"
                .format(pets_allowed_exception, allowed_values)
            )

        self._pets_allowed_exception = pets_allowed_exception

    @property
    def pets_allowed_free(self):
        """Gets the pets_allowed_free of this Pets.

        Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.

        :return: The pets_allowed_free of this Pets.
        :rtype: bool
        """
        return self._pets_allowed_free

    @pets_allowed_free.setter
    def pets_allowed_free(self, pets_allowed_free):
        """Sets the pets_allowed_free of this Pets.

        Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.

        :param pets_allowed_free: The pets_allowed_free of this Pets.
        :type pets_allowed_free: bool
        """

        self._pets_allowed_free = pets_allowed_free

    @property
    def pets_allowed_free_exception(self):
        """Gets the pets_allowed_free_exception of this Pets.

        Pets allowed free exception.

        :return: The pets_allowed_free_exception of this Pets.
        :rtype: str
        """
        return self._pets_allowed_free_exception

    @pets_allowed_free_exception.setter
    def pets_allowed_free_exception(self, pets_allowed_free_exception):
        """Sets the pets_allowed_free_exception of this Pets.

        Pets allowed free exception.

        :param pets_allowed_free_exception: The pets_allowed_free_exception of this Pets.
        :type pets_allowed_free_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pets_allowed_free_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pets_allowed_free_exception` ({0}), must be one of {1}"
                .format(pets_allowed_free_exception, allowed_values)
            )

        self._pets_allowed_free_exception = pets_allowed_free_exception
