# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pools(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult_pool: bool=None, adult_pool_exception: str=None, hot_tub: bool=None, hot_tub_exception: str=None, indoor_pool: bool=None, indoor_pool_exception: str=None, indoor_pools_count: int=None, indoor_pools_count_exception: str=None, lazy_river: bool=None, lazy_river_exception: str=None, lifeguard: bool=None, lifeguard_exception: str=None, outdoor_pool: bool=None, outdoor_pool_exception: str=None, outdoor_pools_count: int=None, outdoor_pools_count_exception: str=None, pool: bool=None, pool_exception: str=None, pools_count: int=None, pools_count_exception: str=None, wading_pool: bool=None, wading_pool_exception: str=None, water_park: bool=None, water_park_exception: str=None, waterslide: bool=None, waterslide_exception: str=None, wave_pool: bool=None, wave_pool_exception: str=None):
        """Pools - a model defined in OpenAPI

        :param adult_pool: The adult_pool of this Pools.
        :param adult_pool_exception: The adult_pool_exception of this Pools.
        :param hot_tub: The hot_tub of this Pools.
        :param hot_tub_exception: The hot_tub_exception of this Pools.
        :param indoor_pool: The indoor_pool of this Pools.
        :param indoor_pool_exception: The indoor_pool_exception of this Pools.
        :param indoor_pools_count: The indoor_pools_count of this Pools.
        :param indoor_pools_count_exception: The indoor_pools_count_exception of this Pools.
        :param lazy_river: The lazy_river of this Pools.
        :param lazy_river_exception: The lazy_river_exception of this Pools.
        :param lifeguard: The lifeguard of this Pools.
        :param lifeguard_exception: The lifeguard_exception of this Pools.
        :param outdoor_pool: The outdoor_pool of this Pools.
        :param outdoor_pool_exception: The outdoor_pool_exception of this Pools.
        :param outdoor_pools_count: The outdoor_pools_count of this Pools.
        :param outdoor_pools_count_exception: The outdoor_pools_count_exception of this Pools.
        :param pool: The pool of this Pools.
        :param pool_exception: The pool_exception of this Pools.
        :param pools_count: The pools_count of this Pools.
        :param pools_count_exception: The pools_count_exception of this Pools.
        :param wading_pool: The wading_pool of this Pools.
        :param wading_pool_exception: The wading_pool_exception of this Pools.
        :param water_park: The water_park of this Pools.
        :param water_park_exception: The water_park_exception of this Pools.
        :param waterslide: The waterslide of this Pools.
        :param waterslide_exception: The waterslide_exception of this Pools.
        :param wave_pool: The wave_pool of this Pools.
        :param wave_pool_exception: The wave_pool_exception of this Pools.
        """
        self.openapi_types = {
            'adult_pool': bool,
            'adult_pool_exception': str,
            'hot_tub': bool,
            'hot_tub_exception': str,
            'indoor_pool': bool,
            'indoor_pool_exception': str,
            'indoor_pools_count': int,
            'indoor_pools_count_exception': str,
            'lazy_river': bool,
            'lazy_river_exception': str,
            'lifeguard': bool,
            'lifeguard_exception': str,
            'outdoor_pool': bool,
            'outdoor_pool_exception': str,
            'outdoor_pools_count': int,
            'outdoor_pools_count_exception': str,
            'pool': bool,
            'pool_exception': str,
            'pools_count': int,
            'pools_count_exception': str,
            'wading_pool': bool,
            'wading_pool_exception': str,
            'water_park': bool,
            'water_park_exception': str,
            'waterslide': bool,
            'waterslide_exception': str,
            'wave_pool': bool,
            'wave_pool_exception': str
        }

        self.attribute_map = {
            'adult_pool': 'adultPool',
            'adult_pool_exception': 'adultPoolException',
            'hot_tub': 'hotTub',
            'hot_tub_exception': 'hotTubException',
            'indoor_pool': 'indoorPool',
            'indoor_pool_exception': 'indoorPoolException',
            'indoor_pools_count': 'indoorPoolsCount',
            'indoor_pools_count_exception': 'indoorPoolsCountException',
            'lazy_river': 'lazyRiver',
            'lazy_river_exception': 'lazyRiverException',
            'lifeguard': 'lifeguard',
            'lifeguard_exception': 'lifeguardException',
            'outdoor_pool': 'outdoorPool',
            'outdoor_pool_exception': 'outdoorPoolException',
            'outdoor_pools_count': 'outdoorPoolsCount',
            'outdoor_pools_count_exception': 'outdoorPoolsCountException',
            'pool': 'pool',
            'pool_exception': 'poolException',
            'pools_count': 'poolsCount',
            'pools_count_exception': 'poolsCountException',
            'wading_pool': 'wadingPool',
            'wading_pool_exception': 'wadingPoolException',
            'water_park': 'waterPark',
            'water_park_exception': 'waterParkException',
            'waterslide': 'waterslide',
            'waterslide_exception': 'waterslideException',
            'wave_pool': 'wavePool',
            'wave_pool_exception': 'wavePoolException'
        }

        self._adult_pool = adult_pool
        self._adult_pool_exception = adult_pool_exception
        self._hot_tub = hot_tub
        self._hot_tub_exception = hot_tub_exception
        self._indoor_pool = indoor_pool
        self._indoor_pool_exception = indoor_pool_exception
        self._indoor_pools_count = indoor_pools_count
        self._indoor_pools_count_exception = indoor_pools_count_exception
        self._lazy_river = lazy_river
        self._lazy_river_exception = lazy_river_exception
        self._lifeguard = lifeguard
        self._lifeguard_exception = lifeguard_exception
        self._outdoor_pool = outdoor_pool
        self._outdoor_pool_exception = outdoor_pool_exception
        self._outdoor_pools_count = outdoor_pools_count
        self._outdoor_pools_count_exception = outdoor_pools_count_exception
        self._pool = pool
        self._pool_exception = pool_exception
        self._pools_count = pools_count
        self._pools_count_exception = pools_count_exception
        self._wading_pool = wading_pool
        self._wading_pool_exception = wading_pool_exception
        self._water_park = water_park
        self._water_park_exception = water_park_exception
        self._waterslide = waterslide
        self._waterslide_exception = waterslide_exception
        self._wave_pool = wave_pool
        self._wave_pool_exception = wave_pool_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pools':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pools of this Pools.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult_pool(self):
        """Gets the adult_pool of this Pools.

        Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.

        :return: The adult_pool of this Pools.
        :rtype: bool
        """
        return self._adult_pool

    @adult_pool.setter
    def adult_pool(self, adult_pool):
        """Sets the adult_pool of this Pools.

        Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.

        :param adult_pool: The adult_pool of this Pools.
        :type adult_pool: bool
        """

        self._adult_pool = adult_pool

    @property
    def adult_pool_exception(self):
        """Gets the adult_pool_exception of this Pools.

        Adult pool exception.

        :return: The adult_pool_exception of this Pools.
        :rtype: str
        """
        return self._adult_pool_exception

    @adult_pool_exception.setter
    def adult_pool_exception(self, adult_pool_exception):
        """Sets the adult_pool_exception of this Pools.

        Adult pool exception.

        :param adult_pool_exception: The adult_pool_exception of this Pools.
        :type adult_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if adult_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `adult_pool_exception` ({0}), must be one of {1}"
                .format(adult_pool_exception, allowed_values)
            )

        self._adult_pool_exception = adult_pool_exception

    @property
    def hot_tub(self):
        """Gets the hot_tub of this Pools.

        Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.

        :return: The hot_tub of this Pools.
        :rtype: bool
        """
        return self._hot_tub

    @hot_tub.setter
    def hot_tub(self, hot_tub):
        """Sets the hot_tub of this Pools.

        Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.

        :param hot_tub: The hot_tub of this Pools.
        :type hot_tub: bool
        """

        self._hot_tub = hot_tub

    @property
    def hot_tub_exception(self):
        """Gets the hot_tub_exception of this Pools.

        Hot tub exception.

        :return: The hot_tub_exception of this Pools.
        :rtype: str
        """
        return self._hot_tub_exception

    @hot_tub_exception.setter
    def hot_tub_exception(self, hot_tub_exception):
        """Sets the hot_tub_exception of this Pools.

        Hot tub exception.

        :param hot_tub_exception: The hot_tub_exception of this Pools.
        :type hot_tub_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hot_tub_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hot_tub_exception` ({0}), must be one of {1}"
                .format(hot_tub_exception, allowed_values)
            )

        self._hot_tub_exception = hot_tub_exception

    @property
    def indoor_pool(self):
        """Gets the indoor_pool of this Pools.

        Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.

        :return: The indoor_pool of this Pools.
        :rtype: bool
        """
        return self._indoor_pool

    @indoor_pool.setter
    def indoor_pool(self, indoor_pool):
        """Sets the indoor_pool of this Pools.

        Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.

        :param indoor_pool: The indoor_pool of this Pools.
        :type indoor_pool: bool
        """

        self._indoor_pool = indoor_pool

    @property
    def indoor_pool_exception(self):
        """Gets the indoor_pool_exception of this Pools.

        Indoor pool exception.

        :return: The indoor_pool_exception of this Pools.
        :rtype: str
        """
        return self._indoor_pool_exception

    @indoor_pool_exception.setter
    def indoor_pool_exception(self, indoor_pool_exception):
        """Sets the indoor_pool_exception of this Pools.

        Indoor pool exception.

        :param indoor_pool_exception: The indoor_pool_exception of this Pools.
        :type indoor_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if indoor_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `indoor_pool_exception` ({0}), must be one of {1}"
                .format(indoor_pool_exception, allowed_values)
            )

        self._indoor_pool_exception = indoor_pool_exception

    @property
    def indoor_pools_count(self):
        """Gets the indoor_pools_count of this Pools.

        Indoor pools count. The sum of all indoor pools at the hotel.

        :return: The indoor_pools_count of this Pools.
        :rtype: int
        """
        return self._indoor_pools_count

    @indoor_pools_count.setter
    def indoor_pools_count(self, indoor_pools_count):
        """Sets the indoor_pools_count of this Pools.

        Indoor pools count. The sum of all indoor pools at the hotel.

        :param indoor_pools_count: The indoor_pools_count of this Pools.
        :type indoor_pools_count: int
        """

        self._indoor_pools_count = indoor_pools_count

    @property
    def indoor_pools_count_exception(self):
        """Gets the indoor_pools_count_exception of this Pools.

        Indoor pools count exception.

        :return: The indoor_pools_count_exception of this Pools.
        :rtype: str
        """
        return self._indoor_pools_count_exception

    @indoor_pools_count_exception.setter
    def indoor_pools_count_exception(self, indoor_pools_count_exception):
        """Sets the indoor_pools_count_exception of this Pools.

        Indoor pools count exception.

        :param indoor_pools_count_exception: The indoor_pools_count_exception of this Pools.
        :type indoor_pools_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if indoor_pools_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `indoor_pools_count_exception` ({0}), must be one of {1}"
                .format(indoor_pools_count_exception, allowed_values)
            )

        self._indoor_pools_count_exception = indoor_pools_count_exception

    @property
    def lazy_river(self):
        """Gets the lazy_river of this Pools.

        Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.

        :return: The lazy_river of this Pools.
        :rtype: bool
        """
        return self._lazy_river

    @lazy_river.setter
    def lazy_river(self, lazy_river):
        """Sets the lazy_river of this Pools.

        Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.

        :param lazy_river: The lazy_river of this Pools.
        :type lazy_river: bool
        """

        self._lazy_river = lazy_river

    @property
    def lazy_river_exception(self):
        """Gets the lazy_river_exception of this Pools.

        Lazy river exception.

        :return: The lazy_river_exception of this Pools.
        :rtype: str
        """
        return self._lazy_river_exception

    @lazy_river_exception.setter
    def lazy_river_exception(self, lazy_river_exception):
        """Sets the lazy_river_exception of this Pools.

        Lazy river exception.

        :param lazy_river_exception: The lazy_river_exception of this Pools.
        :type lazy_river_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if lazy_river_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `lazy_river_exception` ({0}), must be one of {1}"
                .format(lazy_river_exception, allowed_values)
            )

        self._lazy_river_exception = lazy_river_exception

    @property
    def lifeguard(self):
        """Gets the lifeguard of this Pools.

        Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.

        :return: The lifeguard of this Pools.
        :rtype: bool
        """
        return self._lifeguard

    @lifeguard.setter
    def lifeguard(self, lifeguard):
        """Sets the lifeguard of this Pools.

        Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.

        :param lifeguard: The lifeguard of this Pools.
        :type lifeguard: bool
        """

        self._lifeguard = lifeguard

    @property
    def lifeguard_exception(self):
        """Gets the lifeguard_exception of this Pools.

        Lifeguard exception.

        :return: The lifeguard_exception of this Pools.
        :rtype: str
        """
        return self._lifeguard_exception

    @lifeguard_exception.setter
    def lifeguard_exception(self, lifeguard_exception):
        """Sets the lifeguard_exception of this Pools.

        Lifeguard exception.

        :param lifeguard_exception: The lifeguard_exception of this Pools.
        :type lifeguard_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if lifeguard_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `lifeguard_exception` ({0}), must be one of {1}"
                .format(lifeguard_exception, allowed_values)
            )

        self._lifeguard_exception = lifeguard_exception

    @property
    def outdoor_pool(self):
        """Gets the outdoor_pool of this Pools.

        Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.

        :return: The outdoor_pool of this Pools.
        :rtype: bool
        """
        return self._outdoor_pool

    @outdoor_pool.setter
    def outdoor_pool(self, outdoor_pool):
        """Sets the outdoor_pool of this Pools.

        Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.

        :param outdoor_pool: The outdoor_pool of this Pools.
        :type outdoor_pool: bool
        """

        self._outdoor_pool = outdoor_pool

    @property
    def outdoor_pool_exception(self):
        """Gets the outdoor_pool_exception of this Pools.

        Outdoor pool exception.

        :return: The outdoor_pool_exception of this Pools.
        :rtype: str
        """
        return self._outdoor_pool_exception

    @outdoor_pool_exception.setter
    def outdoor_pool_exception(self, outdoor_pool_exception):
        """Sets the outdoor_pool_exception of this Pools.

        Outdoor pool exception.

        :param outdoor_pool_exception: The outdoor_pool_exception of this Pools.
        :type outdoor_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if outdoor_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `outdoor_pool_exception` ({0}), must be one of {1}"
                .format(outdoor_pool_exception, allowed_values)
            )

        self._outdoor_pool_exception = outdoor_pool_exception

    @property
    def outdoor_pools_count(self):
        """Gets the outdoor_pools_count of this Pools.

        Outdoor pools count. The sum of all outdoor pools at the hotel.

        :return: The outdoor_pools_count of this Pools.
        :rtype: int
        """
        return self._outdoor_pools_count

    @outdoor_pools_count.setter
    def outdoor_pools_count(self, outdoor_pools_count):
        """Sets the outdoor_pools_count of this Pools.

        Outdoor pools count. The sum of all outdoor pools at the hotel.

        :param outdoor_pools_count: The outdoor_pools_count of this Pools.
        :type outdoor_pools_count: int
        """

        self._outdoor_pools_count = outdoor_pools_count

    @property
    def outdoor_pools_count_exception(self):
        """Gets the outdoor_pools_count_exception of this Pools.

        Outdoor pools count exception.

        :return: The outdoor_pools_count_exception of this Pools.
        :rtype: str
        """
        return self._outdoor_pools_count_exception

    @outdoor_pools_count_exception.setter
    def outdoor_pools_count_exception(self, outdoor_pools_count_exception):
        """Sets the outdoor_pools_count_exception of this Pools.

        Outdoor pools count exception.

        :param outdoor_pools_count_exception: The outdoor_pools_count_exception of this Pools.
        :type outdoor_pools_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if outdoor_pools_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `outdoor_pools_count_exception` ({0}), must be one of {1}"
                .format(outdoor_pools_count_exception, allowed_values)
            )

        self._outdoor_pools_count_exception = outdoor_pools_count_exception

    @property
    def pool(self):
        """Gets the pool of this Pools.

        Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.

        :return: The pool of this Pools.
        :rtype: bool
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this Pools.

        Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.

        :param pool: The pool of this Pools.
        :type pool: bool
        """

        self._pool = pool

    @property
    def pool_exception(self):
        """Gets the pool_exception of this Pools.

        Pool exception.

        :return: The pool_exception of this Pools.
        :rtype: str
        """
        return self._pool_exception

    @pool_exception.setter
    def pool_exception(self, pool_exception):
        """Sets the pool_exception of this Pools.

        Pool exception.

        :param pool_exception: The pool_exception of this Pools.
        :type pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pool_exception` ({0}), must be one of {1}"
                .format(pool_exception, allowed_values)
            )

        self._pool_exception = pool_exception

    @property
    def pools_count(self):
        """Gets the pools_count of this Pools.

        Pools count. The sum of all pools at the hotel.

        :return: The pools_count of this Pools.
        :rtype: int
        """
        return self._pools_count

    @pools_count.setter
    def pools_count(self, pools_count):
        """Sets the pools_count of this Pools.

        Pools count. The sum of all pools at the hotel.

        :param pools_count: The pools_count of this Pools.
        :type pools_count: int
        """

        self._pools_count = pools_count

    @property
    def pools_count_exception(self):
        """Gets the pools_count_exception of this Pools.

        Pools count exception.

        :return: The pools_count_exception of this Pools.
        :rtype: str
        """
        return self._pools_count_exception

    @pools_count_exception.setter
    def pools_count_exception(self, pools_count_exception):
        """Sets the pools_count_exception of this Pools.

        Pools count exception.

        :param pools_count_exception: The pools_count_exception of this Pools.
        :type pools_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pools_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pools_count_exception` ({0}), must be one of {1}"
                .format(pools_count_exception, allowed_values)
            )

        self._pools_count_exception = pools_count_exception

    @property
    def wading_pool(self):
        """Gets the wading_pool of this Pools.

        Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.

        :return: The wading_pool of this Pools.
        :rtype: bool
        """
        return self._wading_pool

    @wading_pool.setter
    def wading_pool(self, wading_pool):
        """Sets the wading_pool of this Pools.

        Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.

        :param wading_pool: The wading_pool of this Pools.
        :type wading_pool: bool
        """

        self._wading_pool = wading_pool

    @property
    def wading_pool_exception(self):
        """Gets the wading_pool_exception of this Pools.

        Wading pool exception.

        :return: The wading_pool_exception of this Pools.
        :rtype: str
        """
        return self._wading_pool_exception

    @wading_pool_exception.setter
    def wading_pool_exception(self, wading_pool_exception):
        """Sets the wading_pool_exception of this Pools.

        Wading pool exception.

        :param wading_pool_exception: The wading_pool_exception of this Pools.
        :type wading_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if wading_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `wading_pool_exception` ({0}), must be one of {1}"
                .format(wading_pool_exception, allowed_values)
            )

        self._wading_pool_exception = wading_pool_exception

    @property
    def water_park(self):
        """Gets the water_park of this Pools.

        Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.

        :return: The water_park of this Pools.
        :rtype: bool
        """
        return self._water_park

    @water_park.setter
    def water_park(self, water_park):
        """Sets the water_park of this Pools.

        Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.

        :param water_park: The water_park of this Pools.
        :type water_park: bool
        """

        self._water_park = water_park

    @property
    def water_park_exception(self):
        """Gets the water_park_exception of this Pools.

        Water park exception.

        :return: The water_park_exception of this Pools.
        :rtype: str
        """
        return self._water_park_exception

    @water_park_exception.setter
    def water_park_exception(self, water_park_exception):
        """Sets the water_park_exception of this Pools.

        Water park exception.

        :param water_park_exception: The water_park_exception of this Pools.
        :type water_park_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_park_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_park_exception` ({0}), must be one of {1}"
                .format(water_park_exception, allowed_values)
            )

        self._water_park_exception = water_park_exception

    @property
    def waterslide(self):
        """Gets the waterslide of this Pools.

        Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.

        :return: The waterslide of this Pools.
        :rtype: bool
        """
        return self._waterslide

    @waterslide.setter
    def waterslide(self, waterslide):
        """Sets the waterslide of this Pools.

        Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.

        :param waterslide: The waterslide of this Pools.
        :type waterslide: bool
        """

        self._waterslide = waterslide

    @property
    def waterslide_exception(self):
        """Gets the waterslide_exception of this Pools.

        Waterslide exception.

        :return: The waterslide_exception of this Pools.
        :rtype: str
        """
        return self._waterslide_exception

    @waterslide_exception.setter
    def waterslide_exception(self, waterslide_exception):
        """Sets the waterslide_exception of this Pools.

        Waterslide exception.

        :param waterslide_exception: The waterslide_exception of this Pools.
        :type waterslide_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if waterslide_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `waterslide_exception` ({0}), must be one of {1}"
                .format(waterslide_exception, allowed_values)
            )

        self._waterslide_exception = waterslide_exception

    @property
    def wave_pool(self):
        """Gets the wave_pool of this Pools.

        Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.

        :return: The wave_pool of this Pools.
        :rtype: bool
        """
        return self._wave_pool

    @wave_pool.setter
    def wave_pool(self, wave_pool):
        """Sets the wave_pool of this Pools.

        Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.

        :param wave_pool: The wave_pool of this Pools.
        :type wave_pool: bool
        """

        self._wave_pool = wave_pool

    @property
    def wave_pool_exception(self):
        """Gets the wave_pool_exception of this Pools.

        Wave pool exception.

        :return: The wave_pool_exception of this Pools.
        :rtype: str
        """
        return self._wave_pool_exception

    @wave_pool_exception.setter
    def wave_pool_exception(self, wave_pool_exception):
        """Sets the wave_pool_exception of this Pools.

        Wave pool exception.

        :param wave_pool_exception: The wave_pool_exception of this Pools.
        :type wave_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if wave_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `wave_pool_exception` ({0}), must be one of {1}"
                .format(wave_pool_exception, allowed_values)
            )

        self._wave_pool_exception = wave_pool_exception
