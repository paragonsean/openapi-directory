# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaterConservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, independent_organization_audits_water_use: bool=None, independent_organization_audits_water_use_exception: str=None, linen_reuse_program: bool=None, linen_reuse_program_exception: str=None, towel_reuse_program: bool=None, towel_reuse_program_exception: str=None, water_saving_showers: bool=None, water_saving_showers_exception: str=None, water_saving_sinks: bool=None, water_saving_sinks_exception: str=None, water_saving_toilets: bool=None, water_saving_toilets_exception: str=None):
        """WaterConservation - a model defined in OpenAPI

        :param independent_organization_audits_water_use: The independent_organization_audits_water_use of this WaterConservation.
        :param independent_organization_audits_water_use_exception: The independent_organization_audits_water_use_exception of this WaterConservation.
        :param linen_reuse_program: The linen_reuse_program of this WaterConservation.
        :param linen_reuse_program_exception: The linen_reuse_program_exception of this WaterConservation.
        :param towel_reuse_program: The towel_reuse_program of this WaterConservation.
        :param towel_reuse_program_exception: The towel_reuse_program_exception of this WaterConservation.
        :param water_saving_showers: The water_saving_showers of this WaterConservation.
        :param water_saving_showers_exception: The water_saving_showers_exception of this WaterConservation.
        :param water_saving_sinks: The water_saving_sinks of this WaterConservation.
        :param water_saving_sinks_exception: The water_saving_sinks_exception of this WaterConservation.
        :param water_saving_toilets: The water_saving_toilets of this WaterConservation.
        :param water_saving_toilets_exception: The water_saving_toilets_exception of this WaterConservation.
        """
        self.openapi_types = {
            'independent_organization_audits_water_use': bool,
            'independent_organization_audits_water_use_exception': str,
            'linen_reuse_program': bool,
            'linen_reuse_program_exception': str,
            'towel_reuse_program': bool,
            'towel_reuse_program_exception': str,
            'water_saving_showers': bool,
            'water_saving_showers_exception': str,
            'water_saving_sinks': bool,
            'water_saving_sinks_exception': str,
            'water_saving_toilets': bool,
            'water_saving_toilets_exception': str
        }

        self.attribute_map = {
            'independent_organization_audits_water_use': 'independentOrganizationAuditsWaterUse',
            'independent_organization_audits_water_use_exception': 'independentOrganizationAuditsWaterUseException',
            'linen_reuse_program': 'linenReuseProgram',
            'linen_reuse_program_exception': 'linenReuseProgramException',
            'towel_reuse_program': 'towelReuseProgram',
            'towel_reuse_program_exception': 'towelReuseProgramException',
            'water_saving_showers': 'waterSavingShowers',
            'water_saving_showers_exception': 'waterSavingShowersException',
            'water_saving_sinks': 'waterSavingSinks',
            'water_saving_sinks_exception': 'waterSavingSinksException',
            'water_saving_toilets': 'waterSavingToilets',
            'water_saving_toilets_exception': 'waterSavingToiletsException'
        }

        self._independent_organization_audits_water_use = independent_organization_audits_water_use
        self._independent_organization_audits_water_use_exception = independent_organization_audits_water_use_exception
        self._linen_reuse_program = linen_reuse_program
        self._linen_reuse_program_exception = linen_reuse_program_exception
        self._towel_reuse_program = towel_reuse_program
        self._towel_reuse_program_exception = towel_reuse_program_exception
        self._water_saving_showers = water_saving_showers
        self._water_saving_showers_exception = water_saving_showers_exception
        self._water_saving_sinks = water_saving_sinks
        self._water_saving_sinks_exception = water_saving_sinks_exception
        self._water_saving_toilets = water_saving_toilets
        self._water_saving_toilets_exception = water_saving_toilets_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaterConservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaterConservation of this WaterConservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def independent_organization_audits_water_use(self):
        """Gets the independent_organization_audits_water_use of this WaterConservation.

        Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits).

        :return: The independent_organization_audits_water_use of this WaterConservation.
        :rtype: bool
        """
        return self._independent_organization_audits_water_use

    @independent_organization_audits_water_use.setter
    def independent_organization_audits_water_use(self, independent_organization_audits_water_use):
        """Sets the independent_organization_audits_water_use of this WaterConservation.

        Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits).

        :param independent_organization_audits_water_use: The independent_organization_audits_water_use of this WaterConservation.
        :type independent_organization_audits_water_use: bool
        """

        self._independent_organization_audits_water_use = independent_organization_audits_water_use

    @property
    def independent_organization_audits_water_use_exception(self):
        """Gets the independent_organization_audits_water_use_exception of this WaterConservation.

        Independent organization audits water use exception.

        :return: The independent_organization_audits_water_use_exception of this WaterConservation.
        :rtype: str
        """
        return self._independent_organization_audits_water_use_exception

    @independent_organization_audits_water_use_exception.setter
    def independent_organization_audits_water_use_exception(self, independent_organization_audits_water_use_exception):
        """Sets the independent_organization_audits_water_use_exception of this WaterConservation.

        Independent organization audits water use exception.

        :param independent_organization_audits_water_use_exception: The independent_organization_audits_water_use_exception of this WaterConservation.
        :type independent_organization_audits_water_use_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if independent_organization_audits_water_use_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `independent_organization_audits_water_use_exception` ({0}), must be one of {1}"
                .format(independent_organization_audits_water_use_exception, allowed_values)
            )

        self._independent_organization_audits_water_use_exception = independent_organization_audits_water_use_exception

    @property
    def linen_reuse_program(self):
        """Gets the linen_reuse_program of this WaterConservation.

        Linen reuse program. The property offers a linen reuse program.

        :return: The linen_reuse_program of this WaterConservation.
        :rtype: bool
        """
        return self._linen_reuse_program

    @linen_reuse_program.setter
    def linen_reuse_program(self, linen_reuse_program):
        """Sets the linen_reuse_program of this WaterConservation.

        Linen reuse program. The property offers a linen reuse program.

        :param linen_reuse_program: The linen_reuse_program of this WaterConservation.
        :type linen_reuse_program: bool
        """

        self._linen_reuse_program = linen_reuse_program

    @property
    def linen_reuse_program_exception(self):
        """Gets the linen_reuse_program_exception of this WaterConservation.

        Linen reuse program exception.

        :return: The linen_reuse_program_exception of this WaterConservation.
        :rtype: str
        """
        return self._linen_reuse_program_exception

    @linen_reuse_program_exception.setter
    def linen_reuse_program_exception(self, linen_reuse_program_exception):
        """Sets the linen_reuse_program_exception of this WaterConservation.

        Linen reuse program exception.

        :param linen_reuse_program_exception: The linen_reuse_program_exception of this WaterConservation.
        :type linen_reuse_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if linen_reuse_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `linen_reuse_program_exception` ({0}), must be one of {1}"
                .format(linen_reuse_program_exception, allowed_values)
            )

        self._linen_reuse_program_exception = linen_reuse_program_exception

    @property
    def towel_reuse_program(self):
        """Gets the towel_reuse_program of this WaterConservation.

        Towel reuse program. The property offers a towel reuse program.

        :return: The towel_reuse_program of this WaterConservation.
        :rtype: bool
        """
        return self._towel_reuse_program

    @towel_reuse_program.setter
    def towel_reuse_program(self, towel_reuse_program):
        """Sets the towel_reuse_program of this WaterConservation.

        Towel reuse program. The property offers a towel reuse program.

        :param towel_reuse_program: The towel_reuse_program of this WaterConservation.
        :type towel_reuse_program: bool
        """

        self._towel_reuse_program = towel_reuse_program

    @property
    def towel_reuse_program_exception(self):
        """Gets the towel_reuse_program_exception of this WaterConservation.

        Towel reuse program exception.

        :return: The towel_reuse_program_exception of this WaterConservation.
        :rtype: str
        """
        return self._towel_reuse_program_exception

    @towel_reuse_program_exception.setter
    def towel_reuse_program_exception(self, towel_reuse_program_exception):
        """Sets the towel_reuse_program_exception of this WaterConservation.

        Towel reuse program exception.

        :param towel_reuse_program_exception: The towel_reuse_program_exception of this WaterConservation.
        :type towel_reuse_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if towel_reuse_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `towel_reuse_program_exception` ({0}), must be one of {1}"
                .format(towel_reuse_program_exception, allowed_values)
            )

        self._towel_reuse_program_exception = towel_reuse_program_exception

    @property
    def water_saving_showers(self):
        """Gets the water_saving_showers of this WaterConservation.

        Water saving showers. All of the property's guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm).

        :return: The water_saving_showers of this WaterConservation.
        :rtype: bool
        """
        return self._water_saving_showers

    @water_saving_showers.setter
    def water_saving_showers(self, water_saving_showers):
        """Sets the water_saving_showers of this WaterConservation.

        Water saving showers. All of the property's guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm).

        :param water_saving_showers: The water_saving_showers of this WaterConservation.
        :type water_saving_showers: bool
        """

        self._water_saving_showers = water_saving_showers

    @property
    def water_saving_showers_exception(self):
        """Gets the water_saving_showers_exception of this WaterConservation.

        Water saving showers exception.

        :return: The water_saving_showers_exception of this WaterConservation.
        :rtype: str
        """
        return self._water_saving_showers_exception

    @water_saving_showers_exception.setter
    def water_saving_showers_exception(self, water_saving_showers_exception):
        """Sets the water_saving_showers_exception of this WaterConservation.

        Water saving showers exception.

        :param water_saving_showers_exception: The water_saving_showers_exception of this WaterConservation.
        :type water_saving_showers_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_saving_showers_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_saving_showers_exception` ({0}), must be one of {1}"
                .format(water_saving_showers_exception, allowed_values)
            )

        self._water_saving_showers_exception = water_saving_showers_exception

    @property
    def water_saving_sinks(self):
        """Gets the water_saving_sinks of this WaterConservation.

        Water saving sinks. All of the property's guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm.

        :return: The water_saving_sinks of this WaterConservation.
        :rtype: bool
        """
        return self._water_saving_sinks

    @water_saving_sinks.setter
    def water_saving_sinks(self, water_saving_sinks):
        """Sets the water_saving_sinks of this WaterConservation.

        Water saving sinks. All of the property's guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm.

        :param water_saving_sinks: The water_saving_sinks of this WaterConservation.
        :type water_saving_sinks: bool
        """

        self._water_saving_sinks = water_saving_sinks

    @property
    def water_saving_sinks_exception(self):
        """Gets the water_saving_sinks_exception of this WaterConservation.

        Water saving sinks exception.

        :return: The water_saving_sinks_exception of this WaterConservation.
        :rtype: str
        """
        return self._water_saving_sinks_exception

    @water_saving_sinks_exception.setter
    def water_saving_sinks_exception(self, water_saving_sinks_exception):
        """Sets the water_saving_sinks_exception of this WaterConservation.

        Water saving sinks exception.

        :param water_saving_sinks_exception: The water_saving_sinks_exception of this WaterConservation.
        :type water_saving_sinks_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_saving_sinks_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_saving_sinks_exception` ({0}), must be one of {1}"
                .format(water_saving_sinks_exception, allowed_values)
            )

        self._water_saving_sinks_exception = water_saving_sinks_exception

    @property
    def water_saving_toilets(self):
        """Gets the water_saving_toilets of this WaterConservation.

        Water saving toilets. All of the property's toilets use 1.6 gallons per flush, or less.

        :return: The water_saving_toilets of this WaterConservation.
        :rtype: bool
        """
        return self._water_saving_toilets

    @water_saving_toilets.setter
    def water_saving_toilets(self, water_saving_toilets):
        """Sets the water_saving_toilets of this WaterConservation.

        Water saving toilets. All of the property's toilets use 1.6 gallons per flush, or less.

        :param water_saving_toilets: The water_saving_toilets of this WaterConservation.
        :type water_saving_toilets: bool
        """

        self._water_saving_toilets = water_saving_toilets

    @property
    def water_saving_toilets_exception(self):
        """Gets the water_saving_toilets_exception of this WaterConservation.

        Water saving toilets exception.

        :return: The water_saving_toilets_exception of this WaterConservation.
        :rtype: str
        """
        return self._water_saving_toilets_exception

    @water_saving_toilets_exception.setter
    def water_saving_toilets_exception(self, water_saving_toilets_exception):
        """Sets the water_saving_toilets_exception of this WaterConservation.

        Water saving toilets exception.

        :param water_saving_toilets_exception: The water_saving_toilets_exception of this WaterConservation.
        :type water_saving_toilets_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_saving_toilets_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_saving_toilets_exception` ({0}), must be one of {1}"
                .format(water_saving_toilets_exception, allowed_values)
            )

        self._water_saving_toilets_exception = water_saving_toilets_exception
