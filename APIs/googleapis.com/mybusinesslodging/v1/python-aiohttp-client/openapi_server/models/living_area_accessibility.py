# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivingAreaAccessibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ada_compliant_unit: bool=None, ada_compliant_unit_exception: str=None, hearing_accessible_doorbell: bool=None, hearing_accessible_doorbell_exception: str=None, hearing_accessible_fire_alarm: bool=None, hearing_accessible_fire_alarm_exception: str=None, hearing_accessible_unit: bool=None, hearing_accessible_unit_exception: str=None, mobility_accessible_bathtub: bool=None, mobility_accessible_bathtub_exception: str=None, mobility_accessible_shower: bool=None, mobility_accessible_shower_exception: str=None, mobility_accessible_toilet: bool=None, mobility_accessible_toilet_exception: str=None, mobility_accessible_unit: bool=None, mobility_accessible_unit_exception: str=None):
        """LivingAreaAccessibility - a model defined in OpenAPI

        :param ada_compliant_unit: The ada_compliant_unit of this LivingAreaAccessibility.
        :param ada_compliant_unit_exception: The ada_compliant_unit_exception of this LivingAreaAccessibility.
        :param hearing_accessible_doorbell: The hearing_accessible_doorbell of this LivingAreaAccessibility.
        :param hearing_accessible_doorbell_exception: The hearing_accessible_doorbell_exception of this LivingAreaAccessibility.
        :param hearing_accessible_fire_alarm: The hearing_accessible_fire_alarm of this LivingAreaAccessibility.
        :param hearing_accessible_fire_alarm_exception: The hearing_accessible_fire_alarm_exception of this LivingAreaAccessibility.
        :param hearing_accessible_unit: The hearing_accessible_unit of this LivingAreaAccessibility.
        :param hearing_accessible_unit_exception: The hearing_accessible_unit_exception of this LivingAreaAccessibility.
        :param mobility_accessible_bathtub: The mobility_accessible_bathtub of this LivingAreaAccessibility.
        :param mobility_accessible_bathtub_exception: The mobility_accessible_bathtub_exception of this LivingAreaAccessibility.
        :param mobility_accessible_shower: The mobility_accessible_shower of this LivingAreaAccessibility.
        :param mobility_accessible_shower_exception: The mobility_accessible_shower_exception of this LivingAreaAccessibility.
        :param mobility_accessible_toilet: The mobility_accessible_toilet of this LivingAreaAccessibility.
        :param mobility_accessible_toilet_exception: The mobility_accessible_toilet_exception of this LivingAreaAccessibility.
        :param mobility_accessible_unit: The mobility_accessible_unit of this LivingAreaAccessibility.
        :param mobility_accessible_unit_exception: The mobility_accessible_unit_exception of this LivingAreaAccessibility.
        """
        self.openapi_types = {
            'ada_compliant_unit': bool,
            'ada_compliant_unit_exception': str,
            'hearing_accessible_doorbell': bool,
            'hearing_accessible_doorbell_exception': str,
            'hearing_accessible_fire_alarm': bool,
            'hearing_accessible_fire_alarm_exception': str,
            'hearing_accessible_unit': bool,
            'hearing_accessible_unit_exception': str,
            'mobility_accessible_bathtub': bool,
            'mobility_accessible_bathtub_exception': str,
            'mobility_accessible_shower': bool,
            'mobility_accessible_shower_exception': str,
            'mobility_accessible_toilet': bool,
            'mobility_accessible_toilet_exception': str,
            'mobility_accessible_unit': bool,
            'mobility_accessible_unit_exception': str
        }

        self.attribute_map = {
            'ada_compliant_unit': 'adaCompliantUnit',
            'ada_compliant_unit_exception': 'adaCompliantUnitException',
            'hearing_accessible_doorbell': 'hearingAccessibleDoorbell',
            'hearing_accessible_doorbell_exception': 'hearingAccessibleDoorbellException',
            'hearing_accessible_fire_alarm': 'hearingAccessibleFireAlarm',
            'hearing_accessible_fire_alarm_exception': 'hearingAccessibleFireAlarmException',
            'hearing_accessible_unit': 'hearingAccessibleUnit',
            'hearing_accessible_unit_exception': 'hearingAccessibleUnitException',
            'mobility_accessible_bathtub': 'mobilityAccessibleBathtub',
            'mobility_accessible_bathtub_exception': 'mobilityAccessibleBathtubException',
            'mobility_accessible_shower': 'mobilityAccessibleShower',
            'mobility_accessible_shower_exception': 'mobilityAccessibleShowerException',
            'mobility_accessible_toilet': 'mobilityAccessibleToilet',
            'mobility_accessible_toilet_exception': 'mobilityAccessibleToiletException',
            'mobility_accessible_unit': 'mobilityAccessibleUnit',
            'mobility_accessible_unit_exception': 'mobilityAccessibleUnitException'
        }

        self._ada_compliant_unit = ada_compliant_unit
        self._ada_compliant_unit_exception = ada_compliant_unit_exception
        self._hearing_accessible_doorbell = hearing_accessible_doorbell
        self._hearing_accessible_doorbell_exception = hearing_accessible_doorbell_exception
        self._hearing_accessible_fire_alarm = hearing_accessible_fire_alarm
        self._hearing_accessible_fire_alarm_exception = hearing_accessible_fire_alarm_exception
        self._hearing_accessible_unit = hearing_accessible_unit
        self._hearing_accessible_unit_exception = hearing_accessible_unit_exception
        self._mobility_accessible_bathtub = mobility_accessible_bathtub
        self._mobility_accessible_bathtub_exception = mobility_accessible_bathtub_exception
        self._mobility_accessible_shower = mobility_accessible_shower
        self._mobility_accessible_shower_exception = mobility_accessible_shower_exception
        self._mobility_accessible_toilet = mobility_accessible_toilet
        self._mobility_accessible_toilet_exception = mobility_accessible_toilet_exception
        self._mobility_accessible_unit = mobility_accessible_unit
        self._mobility_accessible_unit_exception = mobility_accessible_unit_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingAreaAccessibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingAreaAccessibility of this LivingAreaAccessibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ada_compliant_unit(self):
        """Gets the ada_compliant_unit of this LivingAreaAccessibility.

        ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.

        :return: The ada_compliant_unit of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._ada_compliant_unit

    @ada_compliant_unit.setter
    def ada_compliant_unit(self, ada_compliant_unit):
        """Sets the ada_compliant_unit of this LivingAreaAccessibility.

        ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.

        :param ada_compliant_unit: The ada_compliant_unit of this LivingAreaAccessibility.
        :type ada_compliant_unit: bool
        """

        self._ada_compliant_unit = ada_compliant_unit

    @property
    def ada_compliant_unit_exception(self):
        """Gets the ada_compliant_unit_exception of this LivingAreaAccessibility.

        ADA compliant unit exception.

        :return: The ada_compliant_unit_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._ada_compliant_unit_exception

    @ada_compliant_unit_exception.setter
    def ada_compliant_unit_exception(self, ada_compliant_unit_exception):
        """Sets the ada_compliant_unit_exception of this LivingAreaAccessibility.

        ADA compliant unit exception.

        :param ada_compliant_unit_exception: The ada_compliant_unit_exception of this LivingAreaAccessibility.
        :type ada_compliant_unit_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if ada_compliant_unit_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `ada_compliant_unit_exception` ({0}), must be one of {1}"
                .format(ada_compliant_unit_exception, allowed_values)
            )

        self._ada_compliant_unit_exception = ada_compliant_unit_exception

    @property
    def hearing_accessible_doorbell(self):
        """Gets the hearing_accessible_doorbell of this LivingAreaAccessibility.

        Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.

        :return: The hearing_accessible_doorbell of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._hearing_accessible_doorbell

    @hearing_accessible_doorbell.setter
    def hearing_accessible_doorbell(self, hearing_accessible_doorbell):
        """Sets the hearing_accessible_doorbell of this LivingAreaAccessibility.

        Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.

        :param hearing_accessible_doorbell: The hearing_accessible_doorbell of this LivingAreaAccessibility.
        :type hearing_accessible_doorbell: bool
        """

        self._hearing_accessible_doorbell = hearing_accessible_doorbell

    @property
    def hearing_accessible_doorbell_exception(self):
        """Gets the hearing_accessible_doorbell_exception of this LivingAreaAccessibility.

        Hearing-accessible doorbell exception.

        :return: The hearing_accessible_doorbell_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._hearing_accessible_doorbell_exception

    @hearing_accessible_doorbell_exception.setter
    def hearing_accessible_doorbell_exception(self, hearing_accessible_doorbell_exception):
        """Sets the hearing_accessible_doorbell_exception of this LivingAreaAccessibility.

        Hearing-accessible doorbell exception.

        :param hearing_accessible_doorbell_exception: The hearing_accessible_doorbell_exception of this LivingAreaAccessibility.
        :type hearing_accessible_doorbell_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hearing_accessible_doorbell_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hearing_accessible_doorbell_exception` ({0}), must be one of {1}"
                .format(hearing_accessible_doorbell_exception, allowed_values)
            )

        self._hearing_accessible_doorbell_exception = hearing_accessible_doorbell_exception

    @property
    def hearing_accessible_fire_alarm(self):
        """Gets the hearing_accessible_fire_alarm of this LivingAreaAccessibility.

        Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.

        :return: The hearing_accessible_fire_alarm of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._hearing_accessible_fire_alarm

    @hearing_accessible_fire_alarm.setter
    def hearing_accessible_fire_alarm(self, hearing_accessible_fire_alarm):
        """Sets the hearing_accessible_fire_alarm of this LivingAreaAccessibility.

        Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.

        :param hearing_accessible_fire_alarm: The hearing_accessible_fire_alarm of this LivingAreaAccessibility.
        :type hearing_accessible_fire_alarm: bool
        """

        self._hearing_accessible_fire_alarm = hearing_accessible_fire_alarm

    @property
    def hearing_accessible_fire_alarm_exception(self):
        """Gets the hearing_accessible_fire_alarm_exception of this LivingAreaAccessibility.

        Hearing-accessible fire alarm exception.

        :return: The hearing_accessible_fire_alarm_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._hearing_accessible_fire_alarm_exception

    @hearing_accessible_fire_alarm_exception.setter
    def hearing_accessible_fire_alarm_exception(self, hearing_accessible_fire_alarm_exception):
        """Sets the hearing_accessible_fire_alarm_exception of this LivingAreaAccessibility.

        Hearing-accessible fire alarm exception.

        :param hearing_accessible_fire_alarm_exception: The hearing_accessible_fire_alarm_exception of this LivingAreaAccessibility.
        :type hearing_accessible_fire_alarm_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hearing_accessible_fire_alarm_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hearing_accessible_fire_alarm_exception` ({0}), must be one of {1}"
                .format(hearing_accessible_fire_alarm_exception, allowed_values)
            )

        self._hearing_accessible_fire_alarm_exception = hearing_accessible_fire_alarm_exception

    @property
    def hearing_accessible_unit(self):
        """Gets the hearing_accessible_unit of this LivingAreaAccessibility.

        Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.

        :return: The hearing_accessible_unit of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._hearing_accessible_unit

    @hearing_accessible_unit.setter
    def hearing_accessible_unit(self, hearing_accessible_unit):
        """Sets the hearing_accessible_unit of this LivingAreaAccessibility.

        Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.

        :param hearing_accessible_unit: The hearing_accessible_unit of this LivingAreaAccessibility.
        :type hearing_accessible_unit: bool
        """

        self._hearing_accessible_unit = hearing_accessible_unit

    @property
    def hearing_accessible_unit_exception(self):
        """Gets the hearing_accessible_unit_exception of this LivingAreaAccessibility.

        Hearing-accessible unit exception.

        :return: The hearing_accessible_unit_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._hearing_accessible_unit_exception

    @hearing_accessible_unit_exception.setter
    def hearing_accessible_unit_exception(self, hearing_accessible_unit_exception):
        """Sets the hearing_accessible_unit_exception of this LivingAreaAccessibility.

        Hearing-accessible unit exception.

        :param hearing_accessible_unit_exception: The hearing_accessible_unit_exception of this LivingAreaAccessibility.
        :type hearing_accessible_unit_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hearing_accessible_unit_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hearing_accessible_unit_exception` ({0}), must be one of {1}"
                .format(hearing_accessible_unit_exception, allowed_values)
            )

        self._hearing_accessible_unit_exception = hearing_accessible_unit_exception

    @property
    def mobility_accessible_bathtub(self):
        """Gets the mobility_accessible_bathtub of this LivingAreaAccessibility.

        Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.

        :return: The mobility_accessible_bathtub of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._mobility_accessible_bathtub

    @mobility_accessible_bathtub.setter
    def mobility_accessible_bathtub(self, mobility_accessible_bathtub):
        """Sets the mobility_accessible_bathtub of this LivingAreaAccessibility.

        Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.

        :param mobility_accessible_bathtub: The mobility_accessible_bathtub of this LivingAreaAccessibility.
        :type mobility_accessible_bathtub: bool
        """

        self._mobility_accessible_bathtub = mobility_accessible_bathtub

    @property
    def mobility_accessible_bathtub_exception(self):
        """Gets the mobility_accessible_bathtub_exception of this LivingAreaAccessibility.

        Mobility-accessible bathtub exception.

        :return: The mobility_accessible_bathtub_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._mobility_accessible_bathtub_exception

    @mobility_accessible_bathtub_exception.setter
    def mobility_accessible_bathtub_exception(self, mobility_accessible_bathtub_exception):
        """Sets the mobility_accessible_bathtub_exception of this LivingAreaAccessibility.

        Mobility-accessible bathtub exception.

        :param mobility_accessible_bathtub_exception: The mobility_accessible_bathtub_exception of this LivingAreaAccessibility.
        :type mobility_accessible_bathtub_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_bathtub_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_bathtub_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_bathtub_exception, allowed_values)
            )

        self._mobility_accessible_bathtub_exception = mobility_accessible_bathtub_exception

    @property
    def mobility_accessible_shower(self):
        """Gets the mobility_accessible_shower of this LivingAreaAccessibility.

        Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.

        :return: The mobility_accessible_shower of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._mobility_accessible_shower

    @mobility_accessible_shower.setter
    def mobility_accessible_shower(self, mobility_accessible_shower):
        """Sets the mobility_accessible_shower of this LivingAreaAccessibility.

        Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.

        :param mobility_accessible_shower: The mobility_accessible_shower of this LivingAreaAccessibility.
        :type mobility_accessible_shower: bool
        """

        self._mobility_accessible_shower = mobility_accessible_shower

    @property
    def mobility_accessible_shower_exception(self):
        """Gets the mobility_accessible_shower_exception of this LivingAreaAccessibility.

        Mobility-accessible shower exception.

        :return: The mobility_accessible_shower_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._mobility_accessible_shower_exception

    @mobility_accessible_shower_exception.setter
    def mobility_accessible_shower_exception(self, mobility_accessible_shower_exception):
        """Sets the mobility_accessible_shower_exception of this LivingAreaAccessibility.

        Mobility-accessible shower exception.

        :param mobility_accessible_shower_exception: The mobility_accessible_shower_exception of this LivingAreaAccessibility.
        :type mobility_accessible_shower_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_shower_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_shower_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_shower_exception, allowed_values)
            )

        self._mobility_accessible_shower_exception = mobility_accessible_shower_exception

    @property
    def mobility_accessible_toilet(self):
        """Gets the mobility_accessible_toilet of this LivingAreaAccessibility.

        Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.

        :return: The mobility_accessible_toilet of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._mobility_accessible_toilet

    @mobility_accessible_toilet.setter
    def mobility_accessible_toilet(self, mobility_accessible_toilet):
        """Sets the mobility_accessible_toilet of this LivingAreaAccessibility.

        Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.

        :param mobility_accessible_toilet: The mobility_accessible_toilet of this LivingAreaAccessibility.
        :type mobility_accessible_toilet: bool
        """

        self._mobility_accessible_toilet = mobility_accessible_toilet

    @property
    def mobility_accessible_toilet_exception(self):
        """Gets the mobility_accessible_toilet_exception of this LivingAreaAccessibility.

        Mobility-accessible toilet exception.

        :return: The mobility_accessible_toilet_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._mobility_accessible_toilet_exception

    @mobility_accessible_toilet_exception.setter
    def mobility_accessible_toilet_exception(self, mobility_accessible_toilet_exception):
        """Sets the mobility_accessible_toilet_exception of this LivingAreaAccessibility.

        Mobility-accessible toilet exception.

        :param mobility_accessible_toilet_exception: The mobility_accessible_toilet_exception of this LivingAreaAccessibility.
        :type mobility_accessible_toilet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_toilet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_toilet_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_toilet_exception, allowed_values)
            )

        self._mobility_accessible_toilet_exception = mobility_accessible_toilet_exception

    @property
    def mobility_accessible_unit(self):
        """Gets the mobility_accessible_unit of this LivingAreaAccessibility.

        Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.

        :return: The mobility_accessible_unit of this LivingAreaAccessibility.
        :rtype: bool
        """
        return self._mobility_accessible_unit

    @mobility_accessible_unit.setter
    def mobility_accessible_unit(self, mobility_accessible_unit):
        """Sets the mobility_accessible_unit of this LivingAreaAccessibility.

        Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.

        :param mobility_accessible_unit: The mobility_accessible_unit of this LivingAreaAccessibility.
        :type mobility_accessible_unit: bool
        """

        self._mobility_accessible_unit = mobility_accessible_unit

    @property
    def mobility_accessible_unit_exception(self):
        """Gets the mobility_accessible_unit_exception of this LivingAreaAccessibility.

        Mobility-accessible unit exception.

        :return: The mobility_accessible_unit_exception of this LivingAreaAccessibility.
        :rtype: str
        """
        return self._mobility_accessible_unit_exception

    @mobility_accessible_unit_exception.setter
    def mobility_accessible_unit_exception(self, mobility_accessible_unit_exception):
        """Sets the mobility_accessible_unit_exception of this LivingAreaAccessibility.

        Mobility-accessible unit exception.

        :param mobility_accessible_unit_exception: The mobility_accessible_unit_exception of this LivingAreaAccessibility.
        :type mobility_accessible_unit_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_unit_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_unit_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_unit_exception, allowed_values)
            )

        self._mobility_accessible_unit_exception = mobility_accessible_unit_exception
