# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LanguageSpoken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, spoken: bool=None, spoken_exception: str=None):
        """LanguageSpoken - a model defined in OpenAPI

        :param language_code: The language_code of this LanguageSpoken.
        :param spoken: The spoken of this LanguageSpoken.
        :param spoken_exception: The spoken_exception of this LanguageSpoken.
        """
        self.openapi_types = {
            'language_code': str,
            'spoken': bool,
            'spoken_exception': str
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'spoken': 'spoken',
            'spoken_exception': 'spokenException'
        }

        self._language_code = language_code
        self._spoken = spoken
        self._spoken_exception = spoken_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageSpoken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguageSpoken of this LanguageSpoken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this LanguageSpoken.

        Required. The BCP-47 language code for the spoken language. Currently accepted codes: ar, de, en, es, fil, fr, hi, id, it, ja, ko, nl, pt, ru, vi, yue, zh.

        :return: The language_code of this LanguageSpoken.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this LanguageSpoken.

        Required. The BCP-47 language code for the spoken language. Currently accepted codes: ar, de, en, es, fil, fr, hi, id, it, ja, ko, nl, pt, ru, vi, yue, zh.

        :param language_code: The language_code of this LanguageSpoken.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def spoken(self):
        """Gets the spoken of this LanguageSpoken.

        At least one member of the staff can speak the language.

        :return: The spoken of this LanguageSpoken.
        :rtype: bool
        """
        return self._spoken

    @spoken.setter
    def spoken(self, spoken):
        """Sets the spoken of this LanguageSpoken.

        At least one member of the staff can speak the language.

        :param spoken: The spoken of this LanguageSpoken.
        :type spoken: bool
        """

        self._spoken = spoken

    @property
    def spoken_exception(self):
        """Gets the spoken_exception of this LanguageSpoken.

        Spoken exception.

        :return: The spoken_exception of this LanguageSpoken.
        :rtype: str
        """
        return self._spoken_exception

    @spoken_exception.setter
    def spoken_exception(self, spoken_exception):
        """Sets the spoken_exception of this LanguageSpoken.

        Spoken exception.

        :param spoken_exception: The spoken_exception of this LanguageSpoken.
        :type spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `spoken_exception` ({0}), must be one of {1}"
                .format(spoken_exception, allowed_values)
            )

        self._spoken_exception = spoken_exception
