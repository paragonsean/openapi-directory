# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivingAreaLayout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balcony: bool=None, balcony_exception: str=None, living_area_sq_meters: float=None, living_area_sq_meters_exception: str=None, loft: bool=None, loft_exception: str=None, non_smoking: bool=None, non_smoking_exception: str=None, patio: bool=None, patio_exception: str=None, stairs: bool=None, stairs_exception: str=None):
        """LivingAreaLayout - a model defined in OpenAPI

        :param balcony: The balcony of this LivingAreaLayout.
        :param balcony_exception: The balcony_exception of this LivingAreaLayout.
        :param living_area_sq_meters: The living_area_sq_meters of this LivingAreaLayout.
        :param living_area_sq_meters_exception: The living_area_sq_meters_exception of this LivingAreaLayout.
        :param loft: The loft of this LivingAreaLayout.
        :param loft_exception: The loft_exception of this LivingAreaLayout.
        :param non_smoking: The non_smoking of this LivingAreaLayout.
        :param non_smoking_exception: The non_smoking_exception of this LivingAreaLayout.
        :param patio: The patio of this LivingAreaLayout.
        :param patio_exception: The patio_exception of this LivingAreaLayout.
        :param stairs: The stairs of this LivingAreaLayout.
        :param stairs_exception: The stairs_exception of this LivingAreaLayout.
        """
        self.openapi_types = {
            'balcony': bool,
            'balcony_exception': str,
            'living_area_sq_meters': float,
            'living_area_sq_meters_exception': str,
            'loft': bool,
            'loft_exception': str,
            'non_smoking': bool,
            'non_smoking_exception': str,
            'patio': bool,
            'patio_exception': str,
            'stairs': bool,
            'stairs_exception': str
        }

        self.attribute_map = {
            'balcony': 'balcony',
            'balcony_exception': 'balconyException',
            'living_area_sq_meters': 'livingAreaSqMeters',
            'living_area_sq_meters_exception': 'livingAreaSqMetersException',
            'loft': 'loft',
            'loft_exception': 'loftException',
            'non_smoking': 'nonSmoking',
            'non_smoking_exception': 'nonSmokingException',
            'patio': 'patio',
            'patio_exception': 'patioException',
            'stairs': 'stairs',
            'stairs_exception': 'stairsException'
        }

        self._balcony = balcony
        self._balcony_exception = balcony_exception
        self._living_area_sq_meters = living_area_sq_meters
        self._living_area_sq_meters_exception = living_area_sq_meters_exception
        self._loft = loft
        self._loft_exception = loft_exception
        self._non_smoking = non_smoking
        self._non_smoking_exception = non_smoking_exception
        self._patio = patio
        self._patio_exception = patio_exception
        self._stairs = stairs
        self._stairs_exception = stairs_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingAreaLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingAreaLayout of this LivingAreaLayout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balcony(self):
        """Gets the balcony of this LivingAreaLayout.

        Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.

        :return: The balcony of this LivingAreaLayout.
        :rtype: bool
        """
        return self._balcony

    @balcony.setter
    def balcony(self, balcony):
        """Sets the balcony of this LivingAreaLayout.

        Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.

        :param balcony: The balcony of this LivingAreaLayout.
        :type balcony: bool
        """

        self._balcony = balcony

    @property
    def balcony_exception(self):
        """Gets the balcony_exception of this LivingAreaLayout.

        Balcony exception.

        :return: The balcony_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._balcony_exception

    @balcony_exception.setter
    def balcony_exception(self, balcony_exception):
        """Sets the balcony_exception of this LivingAreaLayout.

        Balcony exception.

        :param balcony_exception: The balcony_exception of this LivingAreaLayout.
        :type balcony_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if balcony_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `balcony_exception` ({0}), must be one of {1}"
                .format(balcony_exception, allowed_values)
            )

        self._balcony_exception = balcony_exception

    @property
    def living_area_sq_meters(self):
        """Gets the living_area_sq_meters of this LivingAreaLayout.

        Living area sq meters. The measurement in meters of the area of a guestroom's living space.

        :return: The living_area_sq_meters of this LivingAreaLayout.
        :rtype: float
        """
        return self._living_area_sq_meters

    @living_area_sq_meters.setter
    def living_area_sq_meters(self, living_area_sq_meters):
        """Sets the living_area_sq_meters of this LivingAreaLayout.

        Living area sq meters. The measurement in meters of the area of a guestroom's living space.

        :param living_area_sq_meters: The living_area_sq_meters of this LivingAreaLayout.
        :type living_area_sq_meters: float
        """

        self._living_area_sq_meters = living_area_sq_meters

    @property
    def living_area_sq_meters_exception(self):
        """Gets the living_area_sq_meters_exception of this LivingAreaLayout.

        Living area sq meters exception.

        :return: The living_area_sq_meters_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._living_area_sq_meters_exception

    @living_area_sq_meters_exception.setter
    def living_area_sq_meters_exception(self, living_area_sq_meters_exception):
        """Sets the living_area_sq_meters_exception of this LivingAreaLayout.

        Living area sq meters exception.

        :param living_area_sq_meters_exception: The living_area_sq_meters_exception of this LivingAreaLayout.
        :type living_area_sq_meters_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if living_area_sq_meters_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `living_area_sq_meters_exception` ({0}), must be one of {1}"
                .format(living_area_sq_meters_exception, allowed_values)
            )

        self._living_area_sq_meters_exception = living_area_sq_meters_exception

    @property
    def loft(self):
        """Gets the loft of this LivingAreaLayout.

        Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.

        :return: The loft of this LivingAreaLayout.
        :rtype: bool
        """
        return self._loft

    @loft.setter
    def loft(self, loft):
        """Sets the loft of this LivingAreaLayout.

        Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.

        :param loft: The loft of this LivingAreaLayout.
        :type loft: bool
        """

        self._loft = loft

    @property
    def loft_exception(self):
        """Gets the loft_exception of this LivingAreaLayout.

        Loft exception.

        :return: The loft_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._loft_exception

    @loft_exception.setter
    def loft_exception(self, loft_exception):
        """Sets the loft_exception of this LivingAreaLayout.

        Loft exception.

        :param loft_exception: The loft_exception of this LivingAreaLayout.
        :type loft_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if loft_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `loft_exception` ({0}), must be one of {1}"
                .format(loft_exception, allowed_values)
            )

        self._loft_exception = loft_exception

    @property
    def non_smoking(self):
        """Gets the non_smoking of this LivingAreaLayout.

        Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.

        :return: The non_smoking of this LivingAreaLayout.
        :rtype: bool
        """
        return self._non_smoking

    @non_smoking.setter
    def non_smoking(self, non_smoking):
        """Sets the non_smoking of this LivingAreaLayout.

        Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.

        :param non_smoking: The non_smoking of this LivingAreaLayout.
        :type non_smoking: bool
        """

        self._non_smoking = non_smoking

    @property
    def non_smoking_exception(self):
        """Gets the non_smoking_exception of this LivingAreaLayout.

        Non smoking exception.

        :return: The non_smoking_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._non_smoking_exception

    @non_smoking_exception.setter
    def non_smoking_exception(self, non_smoking_exception):
        """Sets the non_smoking_exception of this LivingAreaLayout.

        Non smoking exception.

        :param non_smoking_exception: The non_smoking_exception of this LivingAreaLayout.
        :type non_smoking_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if non_smoking_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `non_smoking_exception` ({0}), must be one of {1}"
                .format(non_smoking_exception, allowed_values)
            )

        self._non_smoking_exception = non_smoking_exception

    @property
    def patio(self):
        """Gets the patio of this LivingAreaLayout.

        Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.

        :return: The patio of this LivingAreaLayout.
        :rtype: bool
        """
        return self._patio

    @patio.setter
    def patio(self, patio):
        """Sets the patio of this LivingAreaLayout.

        Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.

        :param patio: The patio of this LivingAreaLayout.
        :type patio: bool
        """

        self._patio = patio

    @property
    def patio_exception(self):
        """Gets the patio_exception of this LivingAreaLayout.

        Patio exception.

        :return: The patio_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._patio_exception

    @patio_exception.setter
    def patio_exception(self, patio_exception):
        """Sets the patio_exception of this LivingAreaLayout.

        Patio exception.

        :param patio_exception: The patio_exception of this LivingAreaLayout.
        :type patio_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if patio_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `patio_exception` ({0}), must be one of {1}"
                .format(patio_exception, allowed_values)
            )

        self._patio_exception = patio_exception

    @property
    def stairs(self):
        """Gets the stairs of this LivingAreaLayout.

        Stairs. There are steps leading from one level or story to another in the unit.

        :return: The stairs of this LivingAreaLayout.
        :rtype: bool
        """
        return self._stairs

    @stairs.setter
    def stairs(self, stairs):
        """Sets the stairs of this LivingAreaLayout.

        Stairs. There are steps leading from one level or story to another in the unit.

        :param stairs: The stairs of this LivingAreaLayout.
        :type stairs: bool
        """

        self._stairs = stairs

    @property
    def stairs_exception(self):
        """Gets the stairs_exception of this LivingAreaLayout.

        Stairs exception.

        :return: The stairs_exception of this LivingAreaLayout.
        :rtype: str
        """
        return self._stairs_exception

    @stairs_exception.setter
    def stairs_exception(self, stairs_exception):
        """Sets the stairs_exception of this LivingAreaLayout.

        Stairs exception.

        :param stairs_exception: The stairs_exception of this LivingAreaLayout.
        :type stairs_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if stairs_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `stairs_exception` ({0}), must be one of {1}"
                .format(stairs_exception, allowed_values)
            )

        self._stairs_exception = stairs_exception
