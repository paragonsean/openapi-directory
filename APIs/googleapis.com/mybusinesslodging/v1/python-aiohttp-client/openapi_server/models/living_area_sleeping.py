# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivingAreaSleeping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beds_count: int=None, beds_count_exception: str=None, bunk_beds_count: int=None, bunk_beds_count_exception: str=None, cribs_count: int=None, cribs_count_exception: str=None, double_beds_count: int=None, double_beds_count_exception: str=None, feather_pillows: bool=None, feather_pillows_exception: str=None, hypoallergenic_bedding: bool=None, hypoallergenic_bedding_exception: str=None, king_beds_count: int=None, king_beds_count_exception: str=None, memory_foam_pillows: bool=None, memory_foam_pillows_exception: str=None, other_beds_count: int=None, other_beds_count_exception: str=None, queen_beds_count: int=None, queen_beds_count_exception: str=None, roll_away_beds_count: int=None, roll_away_beds_count_exception: str=None, single_or_twin_beds_count: int=None, single_or_twin_beds_count_exception: str=None, sofa_beds_count: int=None, sofa_beds_count_exception: str=None, synthetic_pillows: bool=None, synthetic_pillows_exception: str=None):
        """LivingAreaSleeping - a model defined in OpenAPI

        :param beds_count: The beds_count of this LivingAreaSleeping.
        :param beds_count_exception: The beds_count_exception of this LivingAreaSleeping.
        :param bunk_beds_count: The bunk_beds_count of this LivingAreaSleeping.
        :param bunk_beds_count_exception: The bunk_beds_count_exception of this LivingAreaSleeping.
        :param cribs_count: The cribs_count of this LivingAreaSleeping.
        :param cribs_count_exception: The cribs_count_exception of this LivingAreaSleeping.
        :param double_beds_count: The double_beds_count of this LivingAreaSleeping.
        :param double_beds_count_exception: The double_beds_count_exception of this LivingAreaSleeping.
        :param feather_pillows: The feather_pillows of this LivingAreaSleeping.
        :param feather_pillows_exception: The feather_pillows_exception of this LivingAreaSleeping.
        :param hypoallergenic_bedding: The hypoallergenic_bedding of this LivingAreaSleeping.
        :param hypoallergenic_bedding_exception: The hypoallergenic_bedding_exception of this LivingAreaSleeping.
        :param king_beds_count: The king_beds_count of this LivingAreaSleeping.
        :param king_beds_count_exception: The king_beds_count_exception of this LivingAreaSleeping.
        :param memory_foam_pillows: The memory_foam_pillows of this LivingAreaSleeping.
        :param memory_foam_pillows_exception: The memory_foam_pillows_exception of this LivingAreaSleeping.
        :param other_beds_count: The other_beds_count of this LivingAreaSleeping.
        :param other_beds_count_exception: The other_beds_count_exception of this LivingAreaSleeping.
        :param queen_beds_count: The queen_beds_count of this LivingAreaSleeping.
        :param queen_beds_count_exception: The queen_beds_count_exception of this LivingAreaSleeping.
        :param roll_away_beds_count: The roll_away_beds_count of this LivingAreaSleeping.
        :param roll_away_beds_count_exception: The roll_away_beds_count_exception of this LivingAreaSleeping.
        :param single_or_twin_beds_count: The single_or_twin_beds_count of this LivingAreaSleeping.
        :param single_or_twin_beds_count_exception: The single_or_twin_beds_count_exception of this LivingAreaSleeping.
        :param sofa_beds_count: The sofa_beds_count of this LivingAreaSleeping.
        :param sofa_beds_count_exception: The sofa_beds_count_exception of this LivingAreaSleeping.
        :param synthetic_pillows: The synthetic_pillows of this LivingAreaSleeping.
        :param synthetic_pillows_exception: The synthetic_pillows_exception of this LivingAreaSleeping.
        """
        self.openapi_types = {
            'beds_count': int,
            'beds_count_exception': str,
            'bunk_beds_count': int,
            'bunk_beds_count_exception': str,
            'cribs_count': int,
            'cribs_count_exception': str,
            'double_beds_count': int,
            'double_beds_count_exception': str,
            'feather_pillows': bool,
            'feather_pillows_exception': str,
            'hypoallergenic_bedding': bool,
            'hypoallergenic_bedding_exception': str,
            'king_beds_count': int,
            'king_beds_count_exception': str,
            'memory_foam_pillows': bool,
            'memory_foam_pillows_exception': str,
            'other_beds_count': int,
            'other_beds_count_exception': str,
            'queen_beds_count': int,
            'queen_beds_count_exception': str,
            'roll_away_beds_count': int,
            'roll_away_beds_count_exception': str,
            'single_or_twin_beds_count': int,
            'single_or_twin_beds_count_exception': str,
            'sofa_beds_count': int,
            'sofa_beds_count_exception': str,
            'synthetic_pillows': bool,
            'synthetic_pillows_exception': str
        }

        self.attribute_map = {
            'beds_count': 'bedsCount',
            'beds_count_exception': 'bedsCountException',
            'bunk_beds_count': 'bunkBedsCount',
            'bunk_beds_count_exception': 'bunkBedsCountException',
            'cribs_count': 'cribsCount',
            'cribs_count_exception': 'cribsCountException',
            'double_beds_count': 'doubleBedsCount',
            'double_beds_count_exception': 'doubleBedsCountException',
            'feather_pillows': 'featherPillows',
            'feather_pillows_exception': 'featherPillowsException',
            'hypoallergenic_bedding': 'hypoallergenicBedding',
            'hypoallergenic_bedding_exception': 'hypoallergenicBeddingException',
            'king_beds_count': 'kingBedsCount',
            'king_beds_count_exception': 'kingBedsCountException',
            'memory_foam_pillows': 'memoryFoamPillows',
            'memory_foam_pillows_exception': 'memoryFoamPillowsException',
            'other_beds_count': 'otherBedsCount',
            'other_beds_count_exception': 'otherBedsCountException',
            'queen_beds_count': 'queenBedsCount',
            'queen_beds_count_exception': 'queenBedsCountException',
            'roll_away_beds_count': 'rollAwayBedsCount',
            'roll_away_beds_count_exception': 'rollAwayBedsCountException',
            'single_or_twin_beds_count': 'singleOrTwinBedsCount',
            'single_or_twin_beds_count_exception': 'singleOrTwinBedsCountException',
            'sofa_beds_count': 'sofaBedsCount',
            'sofa_beds_count_exception': 'sofaBedsCountException',
            'synthetic_pillows': 'syntheticPillows',
            'synthetic_pillows_exception': 'syntheticPillowsException'
        }

        self._beds_count = beds_count
        self._beds_count_exception = beds_count_exception
        self._bunk_beds_count = bunk_beds_count
        self._bunk_beds_count_exception = bunk_beds_count_exception
        self._cribs_count = cribs_count
        self._cribs_count_exception = cribs_count_exception
        self._double_beds_count = double_beds_count
        self._double_beds_count_exception = double_beds_count_exception
        self._feather_pillows = feather_pillows
        self._feather_pillows_exception = feather_pillows_exception
        self._hypoallergenic_bedding = hypoallergenic_bedding
        self._hypoallergenic_bedding_exception = hypoallergenic_bedding_exception
        self._king_beds_count = king_beds_count
        self._king_beds_count_exception = king_beds_count_exception
        self._memory_foam_pillows = memory_foam_pillows
        self._memory_foam_pillows_exception = memory_foam_pillows_exception
        self._other_beds_count = other_beds_count
        self._other_beds_count_exception = other_beds_count_exception
        self._queen_beds_count = queen_beds_count
        self._queen_beds_count_exception = queen_beds_count_exception
        self._roll_away_beds_count = roll_away_beds_count
        self._roll_away_beds_count_exception = roll_away_beds_count_exception
        self._single_or_twin_beds_count = single_or_twin_beds_count
        self._single_or_twin_beds_count_exception = single_or_twin_beds_count_exception
        self._sofa_beds_count = sofa_beds_count
        self._sofa_beds_count_exception = sofa_beds_count_exception
        self._synthetic_pillows = synthetic_pillows
        self._synthetic_pillows_exception = synthetic_pillows_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingAreaSleeping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingAreaSleeping of this LivingAreaSleeping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beds_count(self):
        """Gets the beds_count of this LivingAreaSleeping.

        Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.

        :return: The beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._beds_count

    @beds_count.setter
    def beds_count(self, beds_count):
        """Sets the beds_count of this LivingAreaSleeping.

        Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.

        :param beds_count: The beds_count of this LivingAreaSleeping.
        :type beds_count: int
        """

        self._beds_count = beds_count

    @property
    def beds_count_exception(self):
        """Gets the beds_count_exception of this LivingAreaSleeping.

        Beds count exception.

        :return: The beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._beds_count_exception

    @beds_count_exception.setter
    def beds_count_exception(self, beds_count_exception):
        """Sets the beds_count_exception of this LivingAreaSleeping.

        Beds count exception.

        :param beds_count_exception: The beds_count_exception of this LivingAreaSleeping.
        :type beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `beds_count_exception` ({0}), must be one of {1}"
                .format(beds_count_exception, allowed_values)
            )

        self._beds_count_exception = beds_count_exception

    @property
    def bunk_beds_count(self):
        """Gets the bunk_beds_count of this LivingAreaSleeping.

        Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.

        :return: The bunk_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._bunk_beds_count

    @bunk_beds_count.setter
    def bunk_beds_count(self, bunk_beds_count):
        """Sets the bunk_beds_count of this LivingAreaSleeping.

        Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.

        :param bunk_beds_count: The bunk_beds_count of this LivingAreaSleeping.
        :type bunk_beds_count: int
        """

        self._bunk_beds_count = bunk_beds_count

    @property
    def bunk_beds_count_exception(self):
        """Gets the bunk_beds_count_exception of this LivingAreaSleeping.

        Bunk beds count exception.

        :return: The bunk_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._bunk_beds_count_exception

    @bunk_beds_count_exception.setter
    def bunk_beds_count_exception(self, bunk_beds_count_exception):
        """Sets the bunk_beds_count_exception of this LivingAreaSleeping.

        Bunk beds count exception.

        :param bunk_beds_count_exception: The bunk_beds_count_exception of this LivingAreaSleeping.
        :type bunk_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bunk_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bunk_beds_count_exception` ({0}), must be one of {1}"
                .format(bunk_beds_count_exception, allowed_values)
            )

        self._bunk_beds_count_exception = bunk_beds_count_exception

    @property
    def cribs_count(self):
        """Gets the cribs_count of this LivingAreaSleeping.

        Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed

        :return: The cribs_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._cribs_count

    @cribs_count.setter
    def cribs_count(self, cribs_count):
        """Sets the cribs_count of this LivingAreaSleeping.

        Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed

        :param cribs_count: The cribs_count of this LivingAreaSleeping.
        :type cribs_count: int
        """

        self._cribs_count = cribs_count

    @property
    def cribs_count_exception(self):
        """Gets the cribs_count_exception of this LivingAreaSleeping.

        Cribs count exception.

        :return: The cribs_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._cribs_count_exception

    @cribs_count_exception.setter
    def cribs_count_exception(self, cribs_count_exception):
        """Sets the cribs_count_exception of this LivingAreaSleeping.

        Cribs count exception.

        :param cribs_count_exception: The cribs_count_exception of this LivingAreaSleeping.
        :type cribs_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cribs_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cribs_count_exception` ({0}), must be one of {1}"
                .format(cribs_count_exception, allowed_values)
            )

        self._cribs_count_exception = cribs_count_exception

    @property
    def double_beds_count(self):
        """Gets the double_beds_count of this LivingAreaSleeping.

        Double beds count. The number of medium beds measuring 53\"W x 75\"L (135cm x 191cm). Also known as full size bed.

        :return: The double_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._double_beds_count

    @double_beds_count.setter
    def double_beds_count(self, double_beds_count):
        """Sets the double_beds_count of this LivingAreaSleeping.

        Double beds count. The number of medium beds measuring 53\"W x 75\"L (135cm x 191cm). Also known as full size bed.

        :param double_beds_count: The double_beds_count of this LivingAreaSleeping.
        :type double_beds_count: int
        """

        self._double_beds_count = double_beds_count

    @property
    def double_beds_count_exception(self):
        """Gets the double_beds_count_exception of this LivingAreaSleeping.

        Double beds count exception.

        :return: The double_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._double_beds_count_exception

    @double_beds_count_exception.setter
    def double_beds_count_exception(self, double_beds_count_exception):
        """Sets the double_beds_count_exception of this LivingAreaSleeping.

        Double beds count exception.

        :param double_beds_count_exception: The double_beds_count_exception of this LivingAreaSleeping.
        :type double_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if double_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `double_beds_count_exception` ({0}), must be one of {1}"
                .format(double_beds_count_exception, allowed_values)
            )

        self._double_beds_count_exception = double_beds_count_exception

    @property
    def feather_pillows(self):
        """Gets the feather_pillows of this LivingAreaSleeping.

        Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.

        :return: The feather_pillows of this LivingAreaSleeping.
        :rtype: bool
        """
        return self._feather_pillows

    @feather_pillows.setter
    def feather_pillows(self, feather_pillows):
        """Sets the feather_pillows of this LivingAreaSleeping.

        Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.

        :param feather_pillows: The feather_pillows of this LivingAreaSleeping.
        :type feather_pillows: bool
        """

        self._feather_pillows = feather_pillows

    @property
    def feather_pillows_exception(self):
        """Gets the feather_pillows_exception of this LivingAreaSleeping.

        Feather pillows exception.

        :return: The feather_pillows_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._feather_pillows_exception

    @feather_pillows_exception.setter
    def feather_pillows_exception(self, feather_pillows_exception):
        """Sets the feather_pillows_exception of this LivingAreaSleeping.

        Feather pillows exception.

        :param feather_pillows_exception: The feather_pillows_exception of this LivingAreaSleeping.
        :type feather_pillows_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if feather_pillows_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `feather_pillows_exception` ({0}), must be one of {1}"
                .format(feather_pillows_exception, allowed_values)
            )

        self._feather_pillows_exception = feather_pillows_exception

    @property
    def hypoallergenic_bedding(self):
        """Gets the hypoallergenic_bedding of this LivingAreaSleeping.

        Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.

        :return: The hypoallergenic_bedding of this LivingAreaSleeping.
        :rtype: bool
        """
        return self._hypoallergenic_bedding

    @hypoallergenic_bedding.setter
    def hypoallergenic_bedding(self, hypoallergenic_bedding):
        """Sets the hypoallergenic_bedding of this LivingAreaSleeping.

        Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.

        :param hypoallergenic_bedding: The hypoallergenic_bedding of this LivingAreaSleeping.
        :type hypoallergenic_bedding: bool
        """

        self._hypoallergenic_bedding = hypoallergenic_bedding

    @property
    def hypoallergenic_bedding_exception(self):
        """Gets the hypoallergenic_bedding_exception of this LivingAreaSleeping.

        Hypoallergenic bedding exception.

        :return: The hypoallergenic_bedding_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._hypoallergenic_bedding_exception

    @hypoallergenic_bedding_exception.setter
    def hypoallergenic_bedding_exception(self, hypoallergenic_bedding_exception):
        """Sets the hypoallergenic_bedding_exception of this LivingAreaSleeping.

        Hypoallergenic bedding exception.

        :param hypoallergenic_bedding_exception: The hypoallergenic_bedding_exception of this LivingAreaSleeping.
        :type hypoallergenic_bedding_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hypoallergenic_bedding_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hypoallergenic_bedding_exception` ({0}), must be one of {1}"
                .format(hypoallergenic_bedding_exception, allowed_values)
            )

        self._hypoallergenic_bedding_exception = hypoallergenic_bedding_exception

    @property
    def king_beds_count(self):
        """Gets the king_beds_count of this LivingAreaSleeping.

        King beds count. The number of large beds measuring 76\"W x 80\"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.

        :return: The king_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._king_beds_count

    @king_beds_count.setter
    def king_beds_count(self, king_beds_count):
        """Sets the king_beds_count of this LivingAreaSleeping.

        King beds count. The number of large beds measuring 76\"W x 80\"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.

        :param king_beds_count: The king_beds_count of this LivingAreaSleeping.
        :type king_beds_count: int
        """

        self._king_beds_count = king_beds_count

    @property
    def king_beds_count_exception(self):
        """Gets the king_beds_count_exception of this LivingAreaSleeping.

        King beds count exception.

        :return: The king_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._king_beds_count_exception

    @king_beds_count_exception.setter
    def king_beds_count_exception(self, king_beds_count_exception):
        """Sets the king_beds_count_exception of this LivingAreaSleeping.

        King beds count exception.

        :param king_beds_count_exception: The king_beds_count_exception of this LivingAreaSleeping.
        :type king_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if king_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `king_beds_count_exception` ({0}), must be one of {1}"
                .format(king_beds_count_exception, allowed_values)
            )

        self._king_beds_count_exception = king_beds_count_exception

    @property
    def memory_foam_pillows(self):
        """Gets the memory_foam_pillows of this LivingAreaSleeping.

        Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.

        :return: The memory_foam_pillows of this LivingAreaSleeping.
        :rtype: bool
        """
        return self._memory_foam_pillows

    @memory_foam_pillows.setter
    def memory_foam_pillows(self, memory_foam_pillows):
        """Sets the memory_foam_pillows of this LivingAreaSleeping.

        Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.

        :param memory_foam_pillows: The memory_foam_pillows of this LivingAreaSleeping.
        :type memory_foam_pillows: bool
        """

        self._memory_foam_pillows = memory_foam_pillows

    @property
    def memory_foam_pillows_exception(self):
        """Gets the memory_foam_pillows_exception of this LivingAreaSleeping.

        Memory foam pillows exception.

        :return: The memory_foam_pillows_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._memory_foam_pillows_exception

    @memory_foam_pillows_exception.setter
    def memory_foam_pillows_exception(self, memory_foam_pillows_exception):
        """Sets the memory_foam_pillows_exception of this LivingAreaSleeping.

        Memory foam pillows exception.

        :param memory_foam_pillows_exception: The memory_foam_pillows_exception of this LivingAreaSleeping.
        :type memory_foam_pillows_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if memory_foam_pillows_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `memory_foam_pillows_exception` ({0}), must be one of {1}"
                .format(memory_foam_pillows_exception, allowed_values)
            )

        self._memory_foam_pillows_exception = memory_foam_pillows_exception

    @property
    def other_beds_count(self):
        """Gets the other_beds_count of this LivingAreaSleeping.

        Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.

        :return: The other_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._other_beds_count

    @other_beds_count.setter
    def other_beds_count(self, other_beds_count):
        """Sets the other_beds_count of this LivingAreaSleeping.

        Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.

        :param other_beds_count: The other_beds_count of this LivingAreaSleeping.
        :type other_beds_count: int
        """

        self._other_beds_count = other_beds_count

    @property
    def other_beds_count_exception(self):
        """Gets the other_beds_count_exception of this LivingAreaSleeping.

        Other beds count exception.

        :return: The other_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._other_beds_count_exception

    @other_beds_count_exception.setter
    def other_beds_count_exception(self, other_beds_count_exception):
        """Sets the other_beds_count_exception of this LivingAreaSleeping.

        Other beds count exception.

        :param other_beds_count_exception: The other_beds_count_exception of this LivingAreaSleeping.
        :type other_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if other_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `other_beds_count_exception` ({0}), must be one of {1}"
                .format(other_beds_count_exception, allowed_values)
            )

        self._other_beds_count_exception = other_beds_count_exception

    @property
    def queen_beds_count(self):
        """Gets the queen_beds_count of this LivingAreaSleeping.

        Queen beds count. The number of medium-large beds measuring 60\"W x 80\"L (152cm x 102cm).

        :return: The queen_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._queen_beds_count

    @queen_beds_count.setter
    def queen_beds_count(self, queen_beds_count):
        """Sets the queen_beds_count of this LivingAreaSleeping.

        Queen beds count. The number of medium-large beds measuring 60\"W x 80\"L (152cm x 102cm).

        :param queen_beds_count: The queen_beds_count of this LivingAreaSleeping.
        :type queen_beds_count: int
        """

        self._queen_beds_count = queen_beds_count

    @property
    def queen_beds_count_exception(self):
        """Gets the queen_beds_count_exception of this LivingAreaSleeping.

        Queen beds count exception.

        :return: The queen_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._queen_beds_count_exception

    @queen_beds_count_exception.setter
    def queen_beds_count_exception(self, queen_beds_count_exception):
        """Sets the queen_beds_count_exception of this LivingAreaSleeping.

        Queen beds count exception.

        :param queen_beds_count_exception: The queen_beds_count_exception of this LivingAreaSleeping.
        :type queen_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if queen_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `queen_beds_count_exception` ({0}), must be one of {1}"
                .format(queen_beds_count_exception, allowed_values)
            )

        self._queen_beds_count_exception = queen_beds_count_exception

    @property
    def roll_away_beds_count(self):
        """Gets the roll_away_beds_count of this LivingAreaSleeping.

        Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.

        :return: The roll_away_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._roll_away_beds_count

    @roll_away_beds_count.setter
    def roll_away_beds_count(self, roll_away_beds_count):
        """Sets the roll_away_beds_count of this LivingAreaSleeping.

        Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.

        :param roll_away_beds_count: The roll_away_beds_count of this LivingAreaSleeping.
        :type roll_away_beds_count: int
        """

        self._roll_away_beds_count = roll_away_beds_count

    @property
    def roll_away_beds_count_exception(self):
        """Gets the roll_away_beds_count_exception of this LivingAreaSleeping.

        Roll away beds count exception.

        :return: The roll_away_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._roll_away_beds_count_exception

    @roll_away_beds_count_exception.setter
    def roll_away_beds_count_exception(self, roll_away_beds_count_exception):
        """Sets the roll_away_beds_count_exception of this LivingAreaSleeping.

        Roll away beds count exception.

        :param roll_away_beds_count_exception: The roll_away_beds_count_exception of this LivingAreaSleeping.
        :type roll_away_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if roll_away_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `roll_away_beds_count_exception` ({0}), must be one of {1}"
                .format(roll_away_beds_count_exception, allowed_values)
            )

        self._roll_away_beds_count_exception = roll_away_beds_count_exception

    @property
    def single_or_twin_beds_count(self):
        """Gets the single_or_twin_beds_count of this LivingAreaSleeping.

        Single or twin count beds. The number of smaller beds measuring 38\"W x 75\"L (97cm x 191cm) that can accommodate one adult.

        :return: The single_or_twin_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._single_or_twin_beds_count

    @single_or_twin_beds_count.setter
    def single_or_twin_beds_count(self, single_or_twin_beds_count):
        """Sets the single_or_twin_beds_count of this LivingAreaSleeping.

        Single or twin count beds. The number of smaller beds measuring 38\"W x 75\"L (97cm x 191cm) that can accommodate one adult.

        :param single_or_twin_beds_count: The single_or_twin_beds_count of this LivingAreaSleeping.
        :type single_or_twin_beds_count: int
        """

        self._single_or_twin_beds_count = single_or_twin_beds_count

    @property
    def single_or_twin_beds_count_exception(self):
        """Gets the single_or_twin_beds_count_exception of this LivingAreaSleeping.

        Single or twin beds count exception.

        :return: The single_or_twin_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._single_or_twin_beds_count_exception

    @single_or_twin_beds_count_exception.setter
    def single_or_twin_beds_count_exception(self, single_or_twin_beds_count_exception):
        """Sets the single_or_twin_beds_count_exception of this LivingAreaSleeping.

        Single or twin beds count exception.

        :param single_or_twin_beds_count_exception: The single_or_twin_beds_count_exception of this LivingAreaSleeping.
        :type single_or_twin_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if single_or_twin_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `single_or_twin_beds_count_exception` ({0}), must be one of {1}"
                .format(single_or_twin_beds_count_exception, allowed_values)
            )

        self._single_or_twin_beds_count_exception = single_or_twin_beds_count_exception

    @property
    def sofa_beds_count(self):
        """Gets the sofa_beds_count of this LivingAreaSleeping.

        Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.

        :return: The sofa_beds_count of this LivingAreaSleeping.
        :rtype: int
        """
        return self._sofa_beds_count

    @sofa_beds_count.setter
    def sofa_beds_count(self, sofa_beds_count):
        """Sets the sofa_beds_count of this LivingAreaSleeping.

        Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.

        :param sofa_beds_count: The sofa_beds_count of this LivingAreaSleeping.
        :type sofa_beds_count: int
        """

        self._sofa_beds_count = sofa_beds_count

    @property
    def sofa_beds_count_exception(self):
        """Gets the sofa_beds_count_exception of this LivingAreaSleeping.

        Sofa beds count exception.

        :return: The sofa_beds_count_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._sofa_beds_count_exception

    @sofa_beds_count_exception.setter
    def sofa_beds_count_exception(self, sofa_beds_count_exception):
        """Sets the sofa_beds_count_exception of this LivingAreaSleeping.

        Sofa beds count exception.

        :param sofa_beds_count_exception: The sofa_beds_count_exception of this LivingAreaSleeping.
        :type sofa_beds_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if sofa_beds_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `sofa_beds_count_exception` ({0}), must be one of {1}"
                .format(sofa_beds_count_exception, allowed_values)
            )

        self._sofa_beds_count_exception = sofa_beds_count_exception

    @property
    def synthetic_pillows(self):
        """Gets the synthetic_pillows of this LivingAreaSleeping.

        Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.

        :return: The synthetic_pillows of this LivingAreaSleeping.
        :rtype: bool
        """
        return self._synthetic_pillows

    @synthetic_pillows.setter
    def synthetic_pillows(self, synthetic_pillows):
        """Sets the synthetic_pillows of this LivingAreaSleeping.

        Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.

        :param synthetic_pillows: The synthetic_pillows of this LivingAreaSleeping.
        :type synthetic_pillows: bool
        """

        self._synthetic_pillows = synthetic_pillows

    @property
    def synthetic_pillows_exception(self):
        """Gets the synthetic_pillows_exception of this LivingAreaSleeping.

        Synthetic pillows exception.

        :return: The synthetic_pillows_exception of this LivingAreaSleeping.
        :rtype: str
        """
        return self._synthetic_pillows_exception

    @synthetic_pillows_exception.setter
    def synthetic_pillows_exception(self, synthetic_pillows_exception):
        """Sets the synthetic_pillows_exception of this LivingAreaSleeping.

        Synthetic pillows exception.

        :param synthetic_pillows_exception: The synthetic_pillows_exception of this LivingAreaSleeping.
        :type synthetic_pillows_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if synthetic_pillows_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `synthetic_pillows_exception` ({0}), must be one of {1}"
                .format(synthetic_pillows_exception, allowed_values)
            )

        self._synthetic_pillows_exception = synthetic_pillows_exception
