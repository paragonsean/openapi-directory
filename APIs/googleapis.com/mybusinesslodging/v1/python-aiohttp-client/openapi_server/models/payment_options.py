# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash: bool=None, cash_exception: str=None, cheque: bool=None, cheque_exception: str=None, credit_card: bool=None, credit_card_exception: str=None, debit_card: bool=None, debit_card_exception: str=None, mobile_nfc: bool=None, mobile_nfc_exception: str=None):
        """PaymentOptions - a model defined in OpenAPI

        :param cash: The cash of this PaymentOptions.
        :param cash_exception: The cash_exception of this PaymentOptions.
        :param cheque: The cheque of this PaymentOptions.
        :param cheque_exception: The cheque_exception of this PaymentOptions.
        :param credit_card: The credit_card of this PaymentOptions.
        :param credit_card_exception: The credit_card_exception of this PaymentOptions.
        :param debit_card: The debit_card of this PaymentOptions.
        :param debit_card_exception: The debit_card_exception of this PaymentOptions.
        :param mobile_nfc: The mobile_nfc of this PaymentOptions.
        :param mobile_nfc_exception: The mobile_nfc_exception of this PaymentOptions.
        """
        self.openapi_types = {
            'cash': bool,
            'cash_exception': str,
            'cheque': bool,
            'cheque_exception': str,
            'credit_card': bool,
            'credit_card_exception': str,
            'debit_card': bool,
            'debit_card_exception': str,
            'mobile_nfc': bool,
            'mobile_nfc_exception': str
        }

        self.attribute_map = {
            'cash': 'cash',
            'cash_exception': 'cashException',
            'cheque': 'cheque',
            'cheque_exception': 'chequeException',
            'credit_card': 'creditCard',
            'credit_card_exception': 'creditCardException',
            'debit_card': 'debitCard',
            'debit_card_exception': 'debitCardException',
            'mobile_nfc': 'mobileNfc',
            'mobile_nfc_exception': 'mobileNfcException'
        }

        self._cash = cash
        self._cash_exception = cash_exception
        self._cheque = cheque
        self._cheque_exception = cheque_exception
        self._credit_card = credit_card
        self._credit_card_exception = credit_card_exception
        self._debit_card = debit_card
        self._debit_card_exception = debit_card_exception
        self._mobile_nfc = mobile_nfc
        self._mobile_nfc_exception = mobile_nfc_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentOptions of this PaymentOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash(self):
        """Gets the cash of this PaymentOptions.

        Cash. The hotel accepts payment by paper/coin currency.

        :return: The cash of this PaymentOptions.
        :rtype: bool
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this PaymentOptions.

        Cash. The hotel accepts payment by paper/coin currency.

        :param cash: The cash of this PaymentOptions.
        :type cash: bool
        """

        self._cash = cash

    @property
    def cash_exception(self):
        """Gets the cash_exception of this PaymentOptions.

        Cash exception.

        :return: The cash_exception of this PaymentOptions.
        :rtype: str
        """
        return self._cash_exception

    @cash_exception.setter
    def cash_exception(self, cash_exception):
        """Sets the cash_exception of this PaymentOptions.

        Cash exception.

        :param cash_exception: The cash_exception of this PaymentOptions.
        :type cash_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cash_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cash_exception` ({0}), must be one of {1}"
                .format(cash_exception, allowed_values)
            )

        self._cash_exception = cash_exception

    @property
    def cheque(self):
        """Gets the cheque of this PaymentOptions.

        Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.

        :return: The cheque of this PaymentOptions.
        :rtype: bool
        """
        return self._cheque

    @cheque.setter
    def cheque(self, cheque):
        """Sets the cheque of this PaymentOptions.

        Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.

        :param cheque: The cheque of this PaymentOptions.
        :type cheque: bool
        """

        self._cheque = cheque

    @property
    def cheque_exception(self):
        """Gets the cheque_exception of this PaymentOptions.

        Cheque exception.

        :return: The cheque_exception of this PaymentOptions.
        :rtype: str
        """
        return self._cheque_exception

    @cheque_exception.setter
    def cheque_exception(self, cheque_exception):
        """Sets the cheque_exception of this PaymentOptions.

        Cheque exception.

        :param cheque_exception: The cheque_exception of this PaymentOptions.
        :type cheque_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cheque_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cheque_exception` ({0}), must be one of {1}"
                .format(cheque_exception, allowed_values)
            )

        self._cheque_exception = cheque_exception

    @property
    def credit_card(self):
        """Gets the credit_card of this PaymentOptions.

        Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.

        :return: The credit_card of this PaymentOptions.
        :rtype: bool
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this PaymentOptions.

        Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.

        :param credit_card: The credit_card of this PaymentOptions.
        :type credit_card: bool
        """

        self._credit_card = credit_card

    @property
    def credit_card_exception(self):
        """Gets the credit_card_exception of this PaymentOptions.

        Credit card exception.

        :return: The credit_card_exception of this PaymentOptions.
        :rtype: str
        """
        return self._credit_card_exception

    @credit_card_exception.setter
    def credit_card_exception(self, credit_card_exception):
        """Sets the credit_card_exception of this PaymentOptions.

        Credit card exception.

        :param credit_card_exception: The credit_card_exception of this PaymentOptions.
        :type credit_card_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if credit_card_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_card_exception` ({0}), must be one of {1}"
                .format(credit_card_exception, allowed_values)
            )

        self._credit_card_exception = credit_card_exception

    @property
    def debit_card(self):
        """Gets the debit_card of this PaymentOptions.

        Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.

        :return: The debit_card of this PaymentOptions.
        :rtype: bool
        """
        return self._debit_card

    @debit_card.setter
    def debit_card(self, debit_card):
        """Sets the debit_card of this PaymentOptions.

        Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.

        :param debit_card: The debit_card of this PaymentOptions.
        :type debit_card: bool
        """

        self._debit_card = debit_card

    @property
    def debit_card_exception(self):
        """Gets the debit_card_exception of this PaymentOptions.

        Debit card exception.

        :return: The debit_card_exception of this PaymentOptions.
        :rtype: str
        """
        return self._debit_card_exception

    @debit_card_exception.setter
    def debit_card_exception(self, debit_card_exception):
        """Sets the debit_card_exception of this PaymentOptions.

        Debit card exception.

        :param debit_card_exception: The debit_card_exception of this PaymentOptions.
        :type debit_card_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if debit_card_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `debit_card_exception` ({0}), must be one of {1}"
                .format(debit_card_exception, allowed_values)
            )

        self._debit_card_exception = debit_card_exception

    @property
    def mobile_nfc(self):
        """Gets the mobile_nfc of this PaymentOptions.

        Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.

        :return: The mobile_nfc of this PaymentOptions.
        :rtype: bool
        """
        return self._mobile_nfc

    @mobile_nfc.setter
    def mobile_nfc(self, mobile_nfc):
        """Sets the mobile_nfc of this PaymentOptions.

        Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.

        :param mobile_nfc: The mobile_nfc of this PaymentOptions.
        :type mobile_nfc: bool
        """

        self._mobile_nfc = mobile_nfc

    @property
    def mobile_nfc_exception(self):
        """Gets the mobile_nfc_exception of this PaymentOptions.

        Mobile nfc exception.

        :return: The mobile_nfc_exception of this PaymentOptions.
        :rtype: str
        """
        return self._mobile_nfc_exception

    @mobile_nfc_exception.setter
    def mobile_nfc_exception(self, mobile_nfc_exception):
        """Sets the mobile_nfc_exception of this PaymentOptions.

        Mobile nfc exception.

        :param mobile_nfc_exception: The mobile_nfc_exception of this PaymentOptions.
        :type mobile_nfc_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobile_nfc_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobile_nfc_exception` ({0}), must be one of {1}"
                .format(mobile_nfc_exception, allowed_values)
            )

        self._mobile_nfc_exception = mobile_nfc_exception
