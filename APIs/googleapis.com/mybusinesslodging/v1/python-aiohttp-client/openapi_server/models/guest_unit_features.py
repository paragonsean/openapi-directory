# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.living_area import LivingArea
from openapi_server.models.views_from_unit import ViewsFromUnit
from openapi_server import util


class GuestUnitFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bungalow_or_villa: bool=None, bungalow_or_villa_exception: str=None, connecting_unit_available: bool=None, connecting_unit_available_exception: str=None, executive_floor: bool=None, executive_floor_exception: str=None, max_adult_occupants_count: int=None, max_adult_occupants_count_exception: str=None, max_child_occupants_count: int=None, max_child_occupants_count_exception: str=None, max_occupants_count: int=None, max_occupants_count_exception: str=None, private_home: bool=None, private_home_exception: str=None, suite: bool=None, suite_exception: str=None, tier: str=None, tier_exception: str=None, total_living_areas: LivingArea=None, views: ViewsFromUnit=None):
        """GuestUnitFeatures - a model defined in OpenAPI

        :param bungalow_or_villa: The bungalow_or_villa of this GuestUnitFeatures.
        :param bungalow_or_villa_exception: The bungalow_or_villa_exception of this GuestUnitFeatures.
        :param connecting_unit_available: The connecting_unit_available of this GuestUnitFeatures.
        :param connecting_unit_available_exception: The connecting_unit_available_exception of this GuestUnitFeatures.
        :param executive_floor: The executive_floor of this GuestUnitFeatures.
        :param executive_floor_exception: The executive_floor_exception of this GuestUnitFeatures.
        :param max_adult_occupants_count: The max_adult_occupants_count of this GuestUnitFeatures.
        :param max_adult_occupants_count_exception: The max_adult_occupants_count_exception of this GuestUnitFeatures.
        :param max_child_occupants_count: The max_child_occupants_count of this GuestUnitFeatures.
        :param max_child_occupants_count_exception: The max_child_occupants_count_exception of this GuestUnitFeatures.
        :param max_occupants_count: The max_occupants_count of this GuestUnitFeatures.
        :param max_occupants_count_exception: The max_occupants_count_exception of this GuestUnitFeatures.
        :param private_home: The private_home of this GuestUnitFeatures.
        :param private_home_exception: The private_home_exception of this GuestUnitFeatures.
        :param suite: The suite of this GuestUnitFeatures.
        :param suite_exception: The suite_exception of this GuestUnitFeatures.
        :param tier: The tier of this GuestUnitFeatures.
        :param tier_exception: The tier_exception of this GuestUnitFeatures.
        :param total_living_areas: The total_living_areas of this GuestUnitFeatures.
        :param views: The views of this GuestUnitFeatures.
        """
        self.openapi_types = {
            'bungalow_or_villa': bool,
            'bungalow_or_villa_exception': str,
            'connecting_unit_available': bool,
            'connecting_unit_available_exception': str,
            'executive_floor': bool,
            'executive_floor_exception': str,
            'max_adult_occupants_count': int,
            'max_adult_occupants_count_exception': str,
            'max_child_occupants_count': int,
            'max_child_occupants_count_exception': str,
            'max_occupants_count': int,
            'max_occupants_count_exception': str,
            'private_home': bool,
            'private_home_exception': str,
            'suite': bool,
            'suite_exception': str,
            'tier': str,
            'tier_exception': str,
            'total_living_areas': LivingArea,
            'views': ViewsFromUnit
        }

        self.attribute_map = {
            'bungalow_or_villa': 'bungalowOrVilla',
            'bungalow_or_villa_exception': 'bungalowOrVillaException',
            'connecting_unit_available': 'connectingUnitAvailable',
            'connecting_unit_available_exception': 'connectingUnitAvailableException',
            'executive_floor': 'executiveFloor',
            'executive_floor_exception': 'executiveFloorException',
            'max_adult_occupants_count': 'maxAdultOccupantsCount',
            'max_adult_occupants_count_exception': 'maxAdultOccupantsCountException',
            'max_child_occupants_count': 'maxChildOccupantsCount',
            'max_child_occupants_count_exception': 'maxChildOccupantsCountException',
            'max_occupants_count': 'maxOccupantsCount',
            'max_occupants_count_exception': 'maxOccupantsCountException',
            'private_home': 'privateHome',
            'private_home_exception': 'privateHomeException',
            'suite': 'suite',
            'suite_exception': 'suiteException',
            'tier': 'tier',
            'tier_exception': 'tierException',
            'total_living_areas': 'totalLivingAreas',
            'views': 'views'
        }

        self._bungalow_or_villa = bungalow_or_villa
        self._bungalow_or_villa_exception = bungalow_or_villa_exception
        self._connecting_unit_available = connecting_unit_available
        self._connecting_unit_available_exception = connecting_unit_available_exception
        self._executive_floor = executive_floor
        self._executive_floor_exception = executive_floor_exception
        self._max_adult_occupants_count = max_adult_occupants_count
        self._max_adult_occupants_count_exception = max_adult_occupants_count_exception
        self._max_child_occupants_count = max_child_occupants_count
        self._max_child_occupants_count_exception = max_child_occupants_count_exception
        self._max_occupants_count = max_occupants_count
        self._max_occupants_count_exception = max_occupants_count_exception
        self._private_home = private_home
        self._private_home_exception = private_home_exception
        self._suite = suite
        self._suite_exception = suite_exception
        self._tier = tier
        self._tier_exception = tier_exception
        self._total_living_areas = total_living_areas
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestUnitFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestUnitFeatures of this GuestUnitFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bungalow_or_villa(self):
        """Gets the bungalow_or_villa of this GuestUnitFeatures.

        Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.

        :return: The bungalow_or_villa of this GuestUnitFeatures.
        :rtype: bool
        """
        return self._bungalow_or_villa

    @bungalow_or_villa.setter
    def bungalow_or_villa(self, bungalow_or_villa):
        """Sets the bungalow_or_villa of this GuestUnitFeatures.

        Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.

        :param bungalow_or_villa: The bungalow_or_villa of this GuestUnitFeatures.
        :type bungalow_or_villa: bool
        """

        self._bungalow_or_villa = bungalow_or_villa

    @property
    def bungalow_or_villa_exception(self):
        """Gets the bungalow_or_villa_exception of this GuestUnitFeatures.

        Bungalow or villa exception.

        :return: The bungalow_or_villa_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._bungalow_or_villa_exception

    @bungalow_or_villa_exception.setter
    def bungalow_or_villa_exception(self, bungalow_or_villa_exception):
        """Sets the bungalow_or_villa_exception of this GuestUnitFeatures.

        Bungalow or villa exception.

        :param bungalow_or_villa_exception: The bungalow_or_villa_exception of this GuestUnitFeatures.
        :type bungalow_or_villa_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bungalow_or_villa_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bungalow_or_villa_exception` ({0}), must be one of {1}"
                .format(bungalow_or_villa_exception, allowed_values)
            )

        self._bungalow_or_villa_exception = bungalow_or_villa_exception

    @property
    def connecting_unit_available(self):
        """Gets the connecting_unit_available of this GuestUnitFeatures.

        Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.

        :return: The connecting_unit_available of this GuestUnitFeatures.
        :rtype: bool
        """
        return self._connecting_unit_available

    @connecting_unit_available.setter
    def connecting_unit_available(self, connecting_unit_available):
        """Sets the connecting_unit_available of this GuestUnitFeatures.

        Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.

        :param connecting_unit_available: The connecting_unit_available of this GuestUnitFeatures.
        :type connecting_unit_available: bool
        """

        self._connecting_unit_available = connecting_unit_available

    @property
    def connecting_unit_available_exception(self):
        """Gets the connecting_unit_available_exception of this GuestUnitFeatures.

        Connecting unit available exception.

        :return: The connecting_unit_available_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._connecting_unit_available_exception

    @connecting_unit_available_exception.setter
    def connecting_unit_available_exception(self, connecting_unit_available_exception):
        """Sets the connecting_unit_available_exception of this GuestUnitFeatures.

        Connecting unit available exception.

        :param connecting_unit_available_exception: The connecting_unit_available_exception of this GuestUnitFeatures.
        :type connecting_unit_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if connecting_unit_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `connecting_unit_available_exception` ({0}), must be one of {1}"
                .format(connecting_unit_available_exception, allowed_values)
            )

        self._connecting_unit_available_exception = connecting_unit_available_exception

    @property
    def executive_floor(self):
        """Gets the executive_floor of this GuestUnitFeatures.

        Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.

        :return: The executive_floor of this GuestUnitFeatures.
        :rtype: bool
        """
        return self._executive_floor

    @executive_floor.setter
    def executive_floor(self, executive_floor):
        """Sets the executive_floor of this GuestUnitFeatures.

        Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.

        :param executive_floor: The executive_floor of this GuestUnitFeatures.
        :type executive_floor: bool
        """

        self._executive_floor = executive_floor

    @property
    def executive_floor_exception(self):
        """Gets the executive_floor_exception of this GuestUnitFeatures.

        Executive floor exception.

        :return: The executive_floor_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._executive_floor_exception

    @executive_floor_exception.setter
    def executive_floor_exception(self, executive_floor_exception):
        """Sets the executive_floor_exception of this GuestUnitFeatures.

        Executive floor exception.

        :param executive_floor_exception: The executive_floor_exception of this GuestUnitFeatures.
        :type executive_floor_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if executive_floor_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `executive_floor_exception` ({0}), must be one of {1}"
                .format(executive_floor_exception, allowed_values)
            )

        self._executive_floor_exception = executive_floor_exception

    @property
    def max_adult_occupants_count(self):
        """Gets the max_adult_occupants_count of this GuestUnitFeatures.

        Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.

        :return: The max_adult_occupants_count of this GuestUnitFeatures.
        :rtype: int
        """
        return self._max_adult_occupants_count

    @max_adult_occupants_count.setter
    def max_adult_occupants_count(self, max_adult_occupants_count):
        """Sets the max_adult_occupants_count of this GuestUnitFeatures.

        Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.

        :param max_adult_occupants_count: The max_adult_occupants_count of this GuestUnitFeatures.
        :type max_adult_occupants_count: int
        """

        self._max_adult_occupants_count = max_adult_occupants_count

    @property
    def max_adult_occupants_count_exception(self):
        """Gets the max_adult_occupants_count_exception of this GuestUnitFeatures.

        Max adult occupants count exception.

        :return: The max_adult_occupants_count_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._max_adult_occupants_count_exception

    @max_adult_occupants_count_exception.setter
    def max_adult_occupants_count_exception(self, max_adult_occupants_count_exception):
        """Sets the max_adult_occupants_count_exception of this GuestUnitFeatures.

        Max adult occupants count exception.

        :param max_adult_occupants_count_exception: The max_adult_occupants_count_exception of this GuestUnitFeatures.
        :type max_adult_occupants_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if max_adult_occupants_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `max_adult_occupants_count_exception` ({0}), must be one of {1}"
                .format(max_adult_occupants_count_exception, allowed_values)
            )

        self._max_adult_occupants_count_exception = max_adult_occupants_count_exception

    @property
    def max_child_occupants_count(self):
        """Gets the max_child_occupants_count of this GuestUnitFeatures.

        Max child occupants count. The total number of children allowed to stay overnight in the room.

        :return: The max_child_occupants_count of this GuestUnitFeatures.
        :rtype: int
        """
        return self._max_child_occupants_count

    @max_child_occupants_count.setter
    def max_child_occupants_count(self, max_child_occupants_count):
        """Sets the max_child_occupants_count of this GuestUnitFeatures.

        Max child occupants count. The total number of children allowed to stay overnight in the room.

        :param max_child_occupants_count: The max_child_occupants_count of this GuestUnitFeatures.
        :type max_child_occupants_count: int
        """

        self._max_child_occupants_count = max_child_occupants_count

    @property
    def max_child_occupants_count_exception(self):
        """Gets the max_child_occupants_count_exception of this GuestUnitFeatures.

        Max child occupants count exception.

        :return: The max_child_occupants_count_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._max_child_occupants_count_exception

    @max_child_occupants_count_exception.setter
    def max_child_occupants_count_exception(self, max_child_occupants_count_exception):
        """Sets the max_child_occupants_count_exception of this GuestUnitFeatures.

        Max child occupants count exception.

        :param max_child_occupants_count_exception: The max_child_occupants_count_exception of this GuestUnitFeatures.
        :type max_child_occupants_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if max_child_occupants_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `max_child_occupants_count_exception` ({0}), must be one of {1}"
                .format(max_child_occupants_count_exception, allowed_values)
            )

        self._max_child_occupants_count_exception = max_child_occupants_count_exception

    @property
    def max_occupants_count(self):
        """Gets the max_occupants_count of this GuestUnitFeatures.

        Max occupants count. The total number of guests allowed to stay overnight in the guestroom.

        :return: The max_occupants_count of this GuestUnitFeatures.
        :rtype: int
        """
        return self._max_occupants_count

    @max_occupants_count.setter
    def max_occupants_count(self, max_occupants_count):
        """Sets the max_occupants_count of this GuestUnitFeatures.

        Max occupants count. The total number of guests allowed to stay overnight in the guestroom.

        :param max_occupants_count: The max_occupants_count of this GuestUnitFeatures.
        :type max_occupants_count: int
        """

        self._max_occupants_count = max_occupants_count

    @property
    def max_occupants_count_exception(self):
        """Gets the max_occupants_count_exception of this GuestUnitFeatures.

        Max occupants count exception.

        :return: The max_occupants_count_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._max_occupants_count_exception

    @max_occupants_count_exception.setter
    def max_occupants_count_exception(self, max_occupants_count_exception):
        """Sets the max_occupants_count_exception of this GuestUnitFeatures.

        Max occupants count exception.

        :param max_occupants_count_exception: The max_occupants_count_exception of this GuestUnitFeatures.
        :type max_occupants_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if max_occupants_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `max_occupants_count_exception` ({0}), must be one of {1}"
                .format(max_occupants_count_exception, allowed_values)
            )

        self._max_occupants_count_exception = max_occupants_count_exception

    @property
    def private_home(self):
        """Gets the private_home of this GuestUnitFeatures.

        Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.

        :return: The private_home of this GuestUnitFeatures.
        :rtype: bool
        """
        return self._private_home

    @private_home.setter
    def private_home(self, private_home):
        """Sets the private_home of this GuestUnitFeatures.

        Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.

        :param private_home: The private_home of this GuestUnitFeatures.
        :type private_home: bool
        """

        self._private_home = private_home

    @property
    def private_home_exception(self):
        """Gets the private_home_exception of this GuestUnitFeatures.

        Private home exception.

        :return: The private_home_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._private_home_exception

    @private_home_exception.setter
    def private_home_exception(self, private_home_exception):
        """Sets the private_home_exception of this GuestUnitFeatures.

        Private home exception.

        :param private_home_exception: The private_home_exception of this GuestUnitFeatures.
        :type private_home_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if private_home_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `private_home_exception` ({0}), must be one of {1}"
                .format(private_home_exception, allowed_values)
            )

        self._private_home_exception = private_home_exception

    @property
    def suite(self):
        """Gets the suite of this GuestUnitFeatures.

        Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.

        :return: The suite of this GuestUnitFeatures.
        :rtype: bool
        """
        return self._suite

    @suite.setter
    def suite(self, suite):
        """Sets the suite of this GuestUnitFeatures.

        Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.

        :param suite: The suite of this GuestUnitFeatures.
        :type suite: bool
        """

        self._suite = suite

    @property
    def suite_exception(self):
        """Gets the suite_exception of this GuestUnitFeatures.

        Suite exception.

        :return: The suite_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._suite_exception

    @suite_exception.setter
    def suite_exception(self, suite_exception):
        """Sets the suite_exception of this GuestUnitFeatures.

        Suite exception.

        :param suite_exception: The suite_exception of this GuestUnitFeatures.
        :type suite_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if suite_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `suite_exception` ({0}), must be one of {1}"
                .format(suite_exception, allowed_values)
            )

        self._suite_exception = suite_exception

    @property
    def tier(self):
        """Gets the tier of this GuestUnitFeatures.

        Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.

        :return: The tier of this GuestUnitFeatures.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this GuestUnitFeatures.

        Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.

        :param tier: The tier of this GuestUnitFeatures.
        :type tier: str
        """
        allowed_values = ["UNIT_TIER_UNSPECIFIED", "STANDARD_UNIT", "DELUXE_UNIT"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier

    @property
    def tier_exception(self):
        """Gets the tier_exception of this GuestUnitFeatures.

        Tier exception.

        :return: The tier_exception of this GuestUnitFeatures.
        :rtype: str
        """
        return self._tier_exception

    @tier_exception.setter
    def tier_exception(self, tier_exception):
        """Sets the tier_exception of this GuestUnitFeatures.

        Tier exception.

        :param tier_exception: The tier_exception of this GuestUnitFeatures.
        :type tier_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tier_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tier_exception` ({0}), must be one of {1}"
                .format(tier_exception, allowed_values)
            )

        self._tier_exception = tier_exception

    @property
    def total_living_areas(self):
        """Gets the total_living_areas of this GuestUnitFeatures.


        :return: The total_living_areas of this GuestUnitFeatures.
        :rtype: LivingArea
        """
        return self._total_living_areas

    @total_living_areas.setter
    def total_living_areas(self, total_living_areas):
        """Sets the total_living_areas of this GuestUnitFeatures.


        :param total_living_areas: The total_living_areas of this GuestUnitFeatures.
        :type total_living_areas: LivingArea
        """

        self._total_living_areas = total_living_areas

    @property
    def views(self):
        """Gets the views of this GuestUnitFeatures.


        :return: The views of this GuestUnitFeatures.
        :rtype: ViewsFromUnit
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this GuestUnitFeatures.


        :param views: The views of this GuestUnitFeatures.
        :type views: ViewsFromUnit
        """

        self._views = views
