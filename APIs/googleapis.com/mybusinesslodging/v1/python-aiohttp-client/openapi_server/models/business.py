# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Business(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_center: bool=None, business_center_exception: str=None, meeting_rooms: bool=None, meeting_rooms_count: int=None, meeting_rooms_count_exception: str=None, meeting_rooms_exception: str=None):
        """Business - a model defined in OpenAPI

        :param business_center: The business_center of this Business.
        :param business_center_exception: The business_center_exception of this Business.
        :param meeting_rooms: The meeting_rooms of this Business.
        :param meeting_rooms_count: The meeting_rooms_count of this Business.
        :param meeting_rooms_count_exception: The meeting_rooms_count_exception of this Business.
        :param meeting_rooms_exception: The meeting_rooms_exception of this Business.
        """
        self.openapi_types = {
            'business_center': bool,
            'business_center_exception': str,
            'meeting_rooms': bool,
            'meeting_rooms_count': int,
            'meeting_rooms_count_exception': str,
            'meeting_rooms_exception': str
        }

        self.attribute_map = {
            'business_center': 'businessCenter',
            'business_center_exception': 'businessCenterException',
            'meeting_rooms': 'meetingRooms',
            'meeting_rooms_count': 'meetingRoomsCount',
            'meeting_rooms_count_exception': 'meetingRoomsCountException',
            'meeting_rooms_exception': 'meetingRoomsException'
        }

        self._business_center = business_center
        self._business_center_exception = business_center_exception
        self._meeting_rooms = meeting_rooms
        self._meeting_rooms_count = meeting_rooms_count
        self._meeting_rooms_count_exception = meeting_rooms_count_exception
        self._meeting_rooms_exception = meeting_rooms_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Business':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Business of this Business.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_center(self):
        """Gets the business_center of this Business.

        Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.

        :return: The business_center of this Business.
        :rtype: bool
        """
        return self._business_center

    @business_center.setter
    def business_center(self, business_center):
        """Sets the business_center of this Business.

        Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.

        :param business_center: The business_center of this Business.
        :type business_center: bool
        """

        self._business_center = business_center

    @property
    def business_center_exception(self):
        """Gets the business_center_exception of this Business.

        Business center exception.

        :return: The business_center_exception of this Business.
        :rtype: str
        """
        return self._business_center_exception

    @business_center_exception.setter
    def business_center_exception(self, business_center_exception):
        """Sets the business_center_exception of this Business.

        Business center exception.

        :param business_center_exception: The business_center_exception of this Business.
        :type business_center_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if business_center_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `business_center_exception` ({0}), must be one of {1}"
                .format(business_center_exception, allowed_values)
            )

        self._business_center_exception = business_center_exception

    @property
    def meeting_rooms(self):
        """Gets the meeting_rooms of this Business.

        Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.

        :return: The meeting_rooms of this Business.
        :rtype: bool
        """
        return self._meeting_rooms

    @meeting_rooms.setter
    def meeting_rooms(self, meeting_rooms):
        """Sets the meeting_rooms of this Business.

        Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.

        :param meeting_rooms: The meeting_rooms of this Business.
        :type meeting_rooms: bool
        """

        self._meeting_rooms = meeting_rooms

    @property
    def meeting_rooms_count(self):
        """Gets the meeting_rooms_count of this Business.

        Meeting rooms count. The number of meeting rooms at the property.

        :return: The meeting_rooms_count of this Business.
        :rtype: int
        """
        return self._meeting_rooms_count

    @meeting_rooms_count.setter
    def meeting_rooms_count(self, meeting_rooms_count):
        """Sets the meeting_rooms_count of this Business.

        Meeting rooms count. The number of meeting rooms at the property.

        :param meeting_rooms_count: The meeting_rooms_count of this Business.
        :type meeting_rooms_count: int
        """

        self._meeting_rooms_count = meeting_rooms_count

    @property
    def meeting_rooms_count_exception(self):
        """Gets the meeting_rooms_count_exception of this Business.

        Meeting rooms count exception.

        :return: The meeting_rooms_count_exception of this Business.
        :rtype: str
        """
        return self._meeting_rooms_count_exception

    @meeting_rooms_count_exception.setter
    def meeting_rooms_count_exception(self, meeting_rooms_count_exception):
        """Sets the meeting_rooms_count_exception of this Business.

        Meeting rooms count exception.

        :param meeting_rooms_count_exception: The meeting_rooms_count_exception of this Business.
        :type meeting_rooms_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if meeting_rooms_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_rooms_count_exception` ({0}), must be one of {1}"
                .format(meeting_rooms_count_exception, allowed_values)
            )

        self._meeting_rooms_count_exception = meeting_rooms_count_exception

    @property
    def meeting_rooms_exception(self):
        """Gets the meeting_rooms_exception of this Business.

        Meeting rooms exception.

        :return: The meeting_rooms_exception of this Business.
        :rtype: str
        """
        return self._meeting_rooms_exception

    @meeting_rooms_exception.setter
    def meeting_rooms_exception(self, meeting_rooms_exception):
        """Sets the meeting_rooms_exception of this Business.

        Meeting rooms exception.

        :param meeting_rooms_exception: The meeting_rooms_exception of this Business.
        :type meeting_rooms_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if meeting_rooms_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `meeting_rooms_exception` ({0}), must be one of {1}"
                .format(meeting_rooms_exception, allowed_values)
            )

        self._meeting_rooms_exception = meeting_rooms_exception
