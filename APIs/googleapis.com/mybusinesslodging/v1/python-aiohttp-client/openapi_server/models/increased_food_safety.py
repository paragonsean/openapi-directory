# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IncreasedFoodSafety(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dining_areas_additional_sanitation: bool=None, dining_areas_additional_sanitation_exception: str=None, disposable_flatware: bool=None, disposable_flatware_exception: str=None, food_preparation_and_serving_additional_safety: bool=None, food_preparation_and_serving_additional_safety_exception: str=None, individual_packaged_meals: bool=None, individual_packaged_meals_exception: str=None, single_use_food_menus: bool=None, single_use_food_menus_exception: str=None):
        """IncreasedFoodSafety - a model defined in OpenAPI

        :param dining_areas_additional_sanitation: The dining_areas_additional_sanitation of this IncreasedFoodSafety.
        :param dining_areas_additional_sanitation_exception: The dining_areas_additional_sanitation_exception of this IncreasedFoodSafety.
        :param disposable_flatware: The disposable_flatware of this IncreasedFoodSafety.
        :param disposable_flatware_exception: The disposable_flatware_exception of this IncreasedFoodSafety.
        :param food_preparation_and_serving_additional_safety: The food_preparation_and_serving_additional_safety of this IncreasedFoodSafety.
        :param food_preparation_and_serving_additional_safety_exception: The food_preparation_and_serving_additional_safety_exception of this IncreasedFoodSafety.
        :param individual_packaged_meals: The individual_packaged_meals of this IncreasedFoodSafety.
        :param individual_packaged_meals_exception: The individual_packaged_meals_exception of this IncreasedFoodSafety.
        :param single_use_food_menus: The single_use_food_menus of this IncreasedFoodSafety.
        :param single_use_food_menus_exception: The single_use_food_menus_exception of this IncreasedFoodSafety.
        """
        self.openapi_types = {
            'dining_areas_additional_sanitation': bool,
            'dining_areas_additional_sanitation_exception': str,
            'disposable_flatware': bool,
            'disposable_flatware_exception': str,
            'food_preparation_and_serving_additional_safety': bool,
            'food_preparation_and_serving_additional_safety_exception': str,
            'individual_packaged_meals': bool,
            'individual_packaged_meals_exception': str,
            'single_use_food_menus': bool,
            'single_use_food_menus_exception': str
        }

        self.attribute_map = {
            'dining_areas_additional_sanitation': 'diningAreasAdditionalSanitation',
            'dining_areas_additional_sanitation_exception': 'diningAreasAdditionalSanitationException',
            'disposable_flatware': 'disposableFlatware',
            'disposable_flatware_exception': 'disposableFlatwareException',
            'food_preparation_and_serving_additional_safety': 'foodPreparationAndServingAdditionalSafety',
            'food_preparation_and_serving_additional_safety_exception': 'foodPreparationAndServingAdditionalSafetyException',
            'individual_packaged_meals': 'individualPackagedMeals',
            'individual_packaged_meals_exception': 'individualPackagedMealsException',
            'single_use_food_menus': 'singleUseFoodMenus',
            'single_use_food_menus_exception': 'singleUseFoodMenusException'
        }

        self._dining_areas_additional_sanitation = dining_areas_additional_sanitation
        self._dining_areas_additional_sanitation_exception = dining_areas_additional_sanitation_exception
        self._disposable_flatware = disposable_flatware
        self._disposable_flatware_exception = disposable_flatware_exception
        self._food_preparation_and_serving_additional_safety = food_preparation_and_serving_additional_safety
        self._food_preparation_and_serving_additional_safety_exception = food_preparation_and_serving_additional_safety_exception
        self._individual_packaged_meals = individual_packaged_meals
        self._individual_packaged_meals_exception = individual_packaged_meals_exception
        self._single_use_food_menus = single_use_food_menus
        self._single_use_food_menus_exception = single_use_food_menus_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncreasedFoodSafety':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncreasedFoodSafety of this IncreasedFoodSafety.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dining_areas_additional_sanitation(self):
        """Gets the dining_areas_additional_sanitation of this IncreasedFoodSafety.

        Additional sanitation in dining areas.

        :return: The dining_areas_additional_sanitation of this IncreasedFoodSafety.
        :rtype: bool
        """
        return self._dining_areas_additional_sanitation

    @dining_areas_additional_sanitation.setter
    def dining_areas_additional_sanitation(self, dining_areas_additional_sanitation):
        """Sets the dining_areas_additional_sanitation of this IncreasedFoodSafety.

        Additional sanitation in dining areas.

        :param dining_areas_additional_sanitation: The dining_areas_additional_sanitation of this IncreasedFoodSafety.
        :type dining_areas_additional_sanitation: bool
        """

        self._dining_areas_additional_sanitation = dining_areas_additional_sanitation

    @property
    def dining_areas_additional_sanitation_exception(self):
        """Gets the dining_areas_additional_sanitation_exception of this IncreasedFoodSafety.

        Dining areas additional sanitation exception.

        :return: The dining_areas_additional_sanitation_exception of this IncreasedFoodSafety.
        :rtype: str
        """
        return self._dining_areas_additional_sanitation_exception

    @dining_areas_additional_sanitation_exception.setter
    def dining_areas_additional_sanitation_exception(self, dining_areas_additional_sanitation_exception):
        """Sets the dining_areas_additional_sanitation_exception of this IncreasedFoodSafety.

        Dining areas additional sanitation exception.

        :param dining_areas_additional_sanitation_exception: The dining_areas_additional_sanitation_exception of this IncreasedFoodSafety.
        :type dining_areas_additional_sanitation_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dining_areas_additional_sanitation_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dining_areas_additional_sanitation_exception` ({0}), must be one of {1}"
                .format(dining_areas_additional_sanitation_exception, allowed_values)
            )

        self._dining_areas_additional_sanitation_exception = dining_areas_additional_sanitation_exception

    @property
    def disposable_flatware(self):
        """Gets the disposable_flatware of this IncreasedFoodSafety.

        Disposable flatware.

        :return: The disposable_flatware of this IncreasedFoodSafety.
        :rtype: bool
        """
        return self._disposable_flatware

    @disposable_flatware.setter
    def disposable_flatware(self, disposable_flatware):
        """Sets the disposable_flatware of this IncreasedFoodSafety.

        Disposable flatware.

        :param disposable_flatware: The disposable_flatware of this IncreasedFoodSafety.
        :type disposable_flatware: bool
        """

        self._disposable_flatware = disposable_flatware

    @property
    def disposable_flatware_exception(self):
        """Gets the disposable_flatware_exception of this IncreasedFoodSafety.

        Disposable flatware exception.

        :return: The disposable_flatware_exception of this IncreasedFoodSafety.
        :rtype: str
        """
        return self._disposable_flatware_exception

    @disposable_flatware_exception.setter
    def disposable_flatware_exception(self, disposable_flatware_exception):
        """Sets the disposable_flatware_exception of this IncreasedFoodSafety.

        Disposable flatware exception.

        :param disposable_flatware_exception: The disposable_flatware_exception of this IncreasedFoodSafety.
        :type disposable_flatware_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if disposable_flatware_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `disposable_flatware_exception` ({0}), must be one of {1}"
                .format(disposable_flatware_exception, allowed_values)
            )

        self._disposable_flatware_exception = disposable_flatware_exception

    @property
    def food_preparation_and_serving_additional_safety(self):
        """Gets the food_preparation_and_serving_additional_safety of this IncreasedFoodSafety.

        Additional safety measures during food prep and serving.

        :return: The food_preparation_and_serving_additional_safety of this IncreasedFoodSafety.
        :rtype: bool
        """
        return self._food_preparation_and_serving_additional_safety

    @food_preparation_and_serving_additional_safety.setter
    def food_preparation_and_serving_additional_safety(self, food_preparation_and_serving_additional_safety):
        """Sets the food_preparation_and_serving_additional_safety of this IncreasedFoodSafety.

        Additional safety measures during food prep and serving.

        :param food_preparation_and_serving_additional_safety: The food_preparation_and_serving_additional_safety of this IncreasedFoodSafety.
        :type food_preparation_and_serving_additional_safety: bool
        """

        self._food_preparation_and_serving_additional_safety = food_preparation_and_serving_additional_safety

    @property
    def food_preparation_and_serving_additional_safety_exception(self):
        """Gets the food_preparation_and_serving_additional_safety_exception of this IncreasedFoodSafety.

        Food preparation and serving additional safety exception.

        :return: The food_preparation_and_serving_additional_safety_exception of this IncreasedFoodSafety.
        :rtype: str
        """
        return self._food_preparation_and_serving_additional_safety_exception

    @food_preparation_and_serving_additional_safety_exception.setter
    def food_preparation_and_serving_additional_safety_exception(self, food_preparation_and_serving_additional_safety_exception):
        """Sets the food_preparation_and_serving_additional_safety_exception of this IncreasedFoodSafety.

        Food preparation and serving additional safety exception.

        :param food_preparation_and_serving_additional_safety_exception: The food_preparation_and_serving_additional_safety_exception of this IncreasedFoodSafety.
        :type food_preparation_and_serving_additional_safety_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if food_preparation_and_serving_additional_safety_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `food_preparation_and_serving_additional_safety_exception` ({0}), must be one of {1}"
                .format(food_preparation_and_serving_additional_safety_exception, allowed_values)
            )

        self._food_preparation_and_serving_additional_safety_exception = food_preparation_and_serving_additional_safety_exception

    @property
    def individual_packaged_meals(self):
        """Gets the individual_packaged_meals of this IncreasedFoodSafety.

        Individually-packaged meals.

        :return: The individual_packaged_meals of this IncreasedFoodSafety.
        :rtype: bool
        """
        return self._individual_packaged_meals

    @individual_packaged_meals.setter
    def individual_packaged_meals(self, individual_packaged_meals):
        """Sets the individual_packaged_meals of this IncreasedFoodSafety.

        Individually-packaged meals.

        :param individual_packaged_meals: The individual_packaged_meals of this IncreasedFoodSafety.
        :type individual_packaged_meals: bool
        """

        self._individual_packaged_meals = individual_packaged_meals

    @property
    def individual_packaged_meals_exception(self):
        """Gets the individual_packaged_meals_exception of this IncreasedFoodSafety.

        Individual packaged meals exception.

        :return: The individual_packaged_meals_exception of this IncreasedFoodSafety.
        :rtype: str
        """
        return self._individual_packaged_meals_exception

    @individual_packaged_meals_exception.setter
    def individual_packaged_meals_exception(self, individual_packaged_meals_exception):
        """Sets the individual_packaged_meals_exception of this IncreasedFoodSafety.

        Individual packaged meals exception.

        :param individual_packaged_meals_exception: The individual_packaged_meals_exception of this IncreasedFoodSafety.
        :type individual_packaged_meals_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if individual_packaged_meals_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `individual_packaged_meals_exception` ({0}), must be one of {1}"
                .format(individual_packaged_meals_exception, allowed_values)
            )

        self._individual_packaged_meals_exception = individual_packaged_meals_exception

    @property
    def single_use_food_menus(self):
        """Gets the single_use_food_menus of this IncreasedFoodSafety.

        Single-use menus.

        :return: The single_use_food_menus of this IncreasedFoodSafety.
        :rtype: bool
        """
        return self._single_use_food_menus

    @single_use_food_menus.setter
    def single_use_food_menus(self, single_use_food_menus):
        """Sets the single_use_food_menus of this IncreasedFoodSafety.

        Single-use menus.

        :param single_use_food_menus: The single_use_food_menus of this IncreasedFoodSafety.
        :type single_use_food_menus: bool
        """

        self._single_use_food_menus = single_use_food_menus

    @property
    def single_use_food_menus_exception(self):
        """Gets the single_use_food_menus_exception of this IncreasedFoodSafety.

        Single use food menus exception.

        :return: The single_use_food_menus_exception of this IncreasedFoodSafety.
        :rtype: str
        """
        return self._single_use_food_menus_exception

    @single_use_food_menus_exception.setter
    def single_use_food_menus_exception(self, single_use_food_menus_exception):
        """Sets the single_use_food_menus_exception of this IncreasedFoodSafety.

        Single use food menus exception.

        :param single_use_food_menus_exception: The single_use_food_menus_exception of this IncreasedFoodSafety.
        :type single_use_food_menus_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if single_use_food_menus_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `single_use_food_menus_exception` ({0}), must be one of {1}"
                .format(single_use_food_menus_exception, allowed_values)
            )

        self._single_use_food_menus_exception = single_use_food_menus_exception
