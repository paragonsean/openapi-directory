# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FoodAndDrink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bar: bool=None, bar_exception: str=None, breakfast_available: bool=None, breakfast_available_exception: str=None, breakfast_buffet: bool=None, breakfast_buffet_exception: str=None, buffet: bool=None, buffet_exception: str=None, dinner_buffet: bool=None, dinner_buffet_exception: str=None, free_breakfast: bool=None, free_breakfast_exception: str=None, restaurant: bool=None, restaurant_exception: str=None, restaurants_count: int=None, restaurants_count_exception: str=None, room_service: bool=None, room_service_exception: str=None, table_service: bool=None, table_service_exception: str=None, twenty_four_hour_room_service: bool=None, twenty_four_hour_room_service_exception: str=None, vending_machine: bool=None, vending_machine_exception: str=None):
        """FoodAndDrink - a model defined in OpenAPI

        :param bar: The bar of this FoodAndDrink.
        :param bar_exception: The bar_exception of this FoodAndDrink.
        :param breakfast_available: The breakfast_available of this FoodAndDrink.
        :param breakfast_available_exception: The breakfast_available_exception of this FoodAndDrink.
        :param breakfast_buffet: The breakfast_buffet of this FoodAndDrink.
        :param breakfast_buffet_exception: The breakfast_buffet_exception of this FoodAndDrink.
        :param buffet: The buffet of this FoodAndDrink.
        :param buffet_exception: The buffet_exception of this FoodAndDrink.
        :param dinner_buffet: The dinner_buffet of this FoodAndDrink.
        :param dinner_buffet_exception: The dinner_buffet_exception of this FoodAndDrink.
        :param free_breakfast: The free_breakfast of this FoodAndDrink.
        :param free_breakfast_exception: The free_breakfast_exception of this FoodAndDrink.
        :param restaurant: The restaurant of this FoodAndDrink.
        :param restaurant_exception: The restaurant_exception of this FoodAndDrink.
        :param restaurants_count: The restaurants_count of this FoodAndDrink.
        :param restaurants_count_exception: The restaurants_count_exception of this FoodAndDrink.
        :param room_service: The room_service of this FoodAndDrink.
        :param room_service_exception: The room_service_exception of this FoodAndDrink.
        :param table_service: The table_service of this FoodAndDrink.
        :param table_service_exception: The table_service_exception of this FoodAndDrink.
        :param twenty_four_hour_room_service: The twenty_four_hour_room_service of this FoodAndDrink.
        :param twenty_four_hour_room_service_exception: The twenty_four_hour_room_service_exception of this FoodAndDrink.
        :param vending_machine: The vending_machine of this FoodAndDrink.
        :param vending_machine_exception: The vending_machine_exception of this FoodAndDrink.
        """
        self.openapi_types = {
            'bar': bool,
            'bar_exception': str,
            'breakfast_available': bool,
            'breakfast_available_exception': str,
            'breakfast_buffet': bool,
            'breakfast_buffet_exception': str,
            'buffet': bool,
            'buffet_exception': str,
            'dinner_buffet': bool,
            'dinner_buffet_exception': str,
            'free_breakfast': bool,
            'free_breakfast_exception': str,
            'restaurant': bool,
            'restaurant_exception': str,
            'restaurants_count': int,
            'restaurants_count_exception': str,
            'room_service': bool,
            'room_service_exception': str,
            'table_service': bool,
            'table_service_exception': str,
            'twenty_four_hour_room_service': bool,
            'twenty_four_hour_room_service_exception': str,
            'vending_machine': bool,
            'vending_machine_exception': str
        }

        self.attribute_map = {
            'bar': 'bar',
            'bar_exception': 'barException',
            'breakfast_available': 'breakfastAvailable',
            'breakfast_available_exception': 'breakfastAvailableException',
            'breakfast_buffet': 'breakfastBuffet',
            'breakfast_buffet_exception': 'breakfastBuffetException',
            'buffet': 'buffet',
            'buffet_exception': 'buffetException',
            'dinner_buffet': 'dinnerBuffet',
            'dinner_buffet_exception': 'dinnerBuffetException',
            'free_breakfast': 'freeBreakfast',
            'free_breakfast_exception': 'freeBreakfastException',
            'restaurant': 'restaurant',
            'restaurant_exception': 'restaurantException',
            'restaurants_count': 'restaurantsCount',
            'restaurants_count_exception': 'restaurantsCountException',
            'room_service': 'roomService',
            'room_service_exception': 'roomServiceException',
            'table_service': 'tableService',
            'table_service_exception': 'tableServiceException',
            'twenty_four_hour_room_service': 'twentyFourHourRoomService',
            'twenty_four_hour_room_service_exception': 'twentyFourHourRoomServiceException',
            'vending_machine': 'vendingMachine',
            'vending_machine_exception': 'vendingMachineException'
        }

        self._bar = bar
        self._bar_exception = bar_exception
        self._breakfast_available = breakfast_available
        self._breakfast_available_exception = breakfast_available_exception
        self._breakfast_buffet = breakfast_buffet
        self._breakfast_buffet_exception = breakfast_buffet_exception
        self._buffet = buffet
        self._buffet_exception = buffet_exception
        self._dinner_buffet = dinner_buffet
        self._dinner_buffet_exception = dinner_buffet_exception
        self._free_breakfast = free_breakfast
        self._free_breakfast_exception = free_breakfast_exception
        self._restaurant = restaurant
        self._restaurant_exception = restaurant_exception
        self._restaurants_count = restaurants_count
        self._restaurants_count_exception = restaurants_count_exception
        self._room_service = room_service
        self._room_service_exception = room_service_exception
        self._table_service = table_service
        self._table_service_exception = table_service_exception
        self._twenty_four_hour_room_service = twenty_four_hour_room_service
        self._twenty_four_hour_room_service_exception = twenty_four_hour_room_service_exception
        self._vending_machine = vending_machine
        self._vending_machine_exception = vending_machine_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoodAndDrink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoodAndDrink of this FoodAndDrink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bar(self):
        """Gets the bar of this FoodAndDrink.

        Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.

        :return: The bar of this FoodAndDrink.
        :rtype: bool
        """
        return self._bar

    @bar.setter
    def bar(self, bar):
        """Sets the bar of this FoodAndDrink.

        Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.

        :param bar: The bar of this FoodAndDrink.
        :type bar: bool
        """

        self._bar = bar

    @property
    def bar_exception(self):
        """Gets the bar_exception of this FoodAndDrink.

        Bar exception.

        :return: The bar_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._bar_exception

    @bar_exception.setter
    def bar_exception(self, bar_exception):
        """Sets the bar_exception of this FoodAndDrink.

        Bar exception.

        :param bar_exception: The bar_exception of this FoodAndDrink.
        :type bar_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bar_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bar_exception` ({0}), must be one of {1}"
                .format(bar_exception, allowed_values)
            )

        self._bar_exception = bar_exception

    @property
    def breakfast_available(self):
        """Gets the breakfast_available of this FoodAndDrink.

        Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.

        :return: The breakfast_available of this FoodAndDrink.
        :rtype: bool
        """
        return self._breakfast_available

    @breakfast_available.setter
    def breakfast_available(self, breakfast_available):
        """Sets the breakfast_available of this FoodAndDrink.

        Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.

        :param breakfast_available: The breakfast_available of this FoodAndDrink.
        :type breakfast_available: bool
        """

        self._breakfast_available = breakfast_available

    @property
    def breakfast_available_exception(self):
        """Gets the breakfast_available_exception of this FoodAndDrink.

        Breakfast available exception.

        :return: The breakfast_available_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._breakfast_available_exception

    @breakfast_available_exception.setter
    def breakfast_available_exception(self, breakfast_available_exception):
        """Sets the breakfast_available_exception of this FoodAndDrink.

        Breakfast available exception.

        :param breakfast_available_exception: The breakfast_available_exception of this FoodAndDrink.
        :type breakfast_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if breakfast_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `breakfast_available_exception` ({0}), must be one of {1}"
                .format(breakfast_available_exception, allowed_values)
            )

        self._breakfast_available_exception = breakfast_available_exception

    @property
    def breakfast_buffet(self):
        """Gets the breakfast_buffet of this FoodAndDrink.

        Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.

        :return: The breakfast_buffet of this FoodAndDrink.
        :rtype: bool
        """
        return self._breakfast_buffet

    @breakfast_buffet.setter
    def breakfast_buffet(self, breakfast_buffet):
        """Sets the breakfast_buffet of this FoodAndDrink.

        Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.

        :param breakfast_buffet: The breakfast_buffet of this FoodAndDrink.
        :type breakfast_buffet: bool
        """

        self._breakfast_buffet = breakfast_buffet

    @property
    def breakfast_buffet_exception(self):
        """Gets the breakfast_buffet_exception of this FoodAndDrink.

        Breakfast buffet exception.

        :return: The breakfast_buffet_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._breakfast_buffet_exception

    @breakfast_buffet_exception.setter
    def breakfast_buffet_exception(self, breakfast_buffet_exception):
        """Sets the breakfast_buffet_exception of this FoodAndDrink.

        Breakfast buffet exception.

        :param breakfast_buffet_exception: The breakfast_buffet_exception of this FoodAndDrink.
        :type breakfast_buffet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if breakfast_buffet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `breakfast_buffet_exception` ({0}), must be one of {1}"
                .format(breakfast_buffet_exception, allowed_values)
            )

        self._breakfast_buffet_exception = breakfast_buffet_exception

    @property
    def buffet(self):
        """Gets the buffet of this FoodAndDrink.

        Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.

        :return: The buffet of this FoodAndDrink.
        :rtype: bool
        """
        return self._buffet

    @buffet.setter
    def buffet(self, buffet):
        """Sets the buffet of this FoodAndDrink.

        Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.

        :param buffet: The buffet of this FoodAndDrink.
        :type buffet: bool
        """

        self._buffet = buffet

    @property
    def buffet_exception(self):
        """Gets the buffet_exception of this FoodAndDrink.

        Buffet exception.

        :return: The buffet_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._buffet_exception

    @buffet_exception.setter
    def buffet_exception(self, buffet_exception):
        """Sets the buffet_exception of this FoodAndDrink.

        Buffet exception.

        :param buffet_exception: The buffet_exception of this FoodAndDrink.
        :type buffet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if buffet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `buffet_exception` ({0}), must be one of {1}"
                .format(buffet_exception, allowed_values)
            )

        self._buffet_exception = buffet_exception

    @property
    def dinner_buffet(self):
        """Gets the dinner_buffet of this FoodAndDrink.

        Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.

        :return: The dinner_buffet of this FoodAndDrink.
        :rtype: bool
        """
        return self._dinner_buffet

    @dinner_buffet.setter
    def dinner_buffet(self, dinner_buffet):
        """Sets the dinner_buffet of this FoodAndDrink.

        Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.

        :param dinner_buffet: The dinner_buffet of this FoodAndDrink.
        :type dinner_buffet: bool
        """

        self._dinner_buffet = dinner_buffet

    @property
    def dinner_buffet_exception(self):
        """Gets the dinner_buffet_exception of this FoodAndDrink.

        Dinner buffet exception.

        :return: The dinner_buffet_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._dinner_buffet_exception

    @dinner_buffet_exception.setter
    def dinner_buffet_exception(self, dinner_buffet_exception):
        """Sets the dinner_buffet_exception of this FoodAndDrink.

        Dinner buffet exception.

        :param dinner_buffet_exception: The dinner_buffet_exception of this FoodAndDrink.
        :type dinner_buffet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dinner_buffet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dinner_buffet_exception` ({0}), must be one of {1}"
                .format(dinner_buffet_exception, allowed_values)
            )

        self._dinner_buffet_exception = dinner_buffet_exception

    @property
    def free_breakfast(self):
        """Gets the free_breakfast of this FoodAndDrink.

        Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.

        :return: The free_breakfast of this FoodAndDrink.
        :rtype: bool
        """
        return self._free_breakfast

    @free_breakfast.setter
    def free_breakfast(self, free_breakfast):
        """Sets the free_breakfast of this FoodAndDrink.

        Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.

        :param free_breakfast: The free_breakfast of this FoodAndDrink.
        :type free_breakfast: bool
        """

        self._free_breakfast = free_breakfast

    @property
    def free_breakfast_exception(self):
        """Gets the free_breakfast_exception of this FoodAndDrink.

        Free breakfast exception.

        :return: The free_breakfast_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._free_breakfast_exception

    @free_breakfast_exception.setter
    def free_breakfast_exception(self, free_breakfast_exception):
        """Sets the free_breakfast_exception of this FoodAndDrink.

        Free breakfast exception.

        :param free_breakfast_exception: The free_breakfast_exception of this FoodAndDrink.
        :type free_breakfast_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_breakfast_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_breakfast_exception` ({0}), must be one of {1}"
                .format(free_breakfast_exception, allowed_values)
            )

        self._free_breakfast_exception = free_breakfast_exception

    @property
    def restaurant(self):
        """Gets the restaurant of this FoodAndDrink.

        Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A \"breakfast room\" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.

        :return: The restaurant of this FoodAndDrink.
        :rtype: bool
        """
        return self._restaurant

    @restaurant.setter
    def restaurant(self, restaurant):
        """Sets the restaurant of this FoodAndDrink.

        Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A \"breakfast room\" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.

        :param restaurant: The restaurant of this FoodAndDrink.
        :type restaurant: bool
        """

        self._restaurant = restaurant

    @property
    def restaurant_exception(self):
        """Gets the restaurant_exception of this FoodAndDrink.

        Restaurant exception.

        :return: The restaurant_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._restaurant_exception

    @restaurant_exception.setter
    def restaurant_exception(self, restaurant_exception):
        """Sets the restaurant_exception of this FoodAndDrink.

        Restaurant exception.

        :param restaurant_exception: The restaurant_exception of this FoodAndDrink.
        :type restaurant_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if restaurant_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `restaurant_exception` ({0}), must be one of {1}"
                .format(restaurant_exception, allowed_values)
            )

        self._restaurant_exception = restaurant_exception

    @property
    def restaurants_count(self):
        """Gets the restaurants_count of this FoodAndDrink.

        Restaurants count. The number of restaurants at the hotel.

        :return: The restaurants_count of this FoodAndDrink.
        :rtype: int
        """
        return self._restaurants_count

    @restaurants_count.setter
    def restaurants_count(self, restaurants_count):
        """Sets the restaurants_count of this FoodAndDrink.

        Restaurants count. The number of restaurants at the hotel.

        :param restaurants_count: The restaurants_count of this FoodAndDrink.
        :type restaurants_count: int
        """

        self._restaurants_count = restaurants_count

    @property
    def restaurants_count_exception(self):
        """Gets the restaurants_count_exception of this FoodAndDrink.

        Restaurants count exception.

        :return: The restaurants_count_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._restaurants_count_exception

    @restaurants_count_exception.setter
    def restaurants_count_exception(self, restaurants_count_exception):
        """Sets the restaurants_count_exception of this FoodAndDrink.

        Restaurants count exception.

        :param restaurants_count_exception: The restaurants_count_exception of this FoodAndDrink.
        :type restaurants_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if restaurants_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `restaurants_count_exception` ({0}), must be one of {1}"
                .format(restaurants_count_exception, allowed_values)
            )

        self._restaurants_count_exception = restaurants_count_exception

    @property
    def room_service(self):
        """Gets the room_service of this FoodAndDrink.

        Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).

        :return: The room_service of this FoodAndDrink.
        :rtype: bool
        """
        return self._room_service

    @room_service.setter
    def room_service(self, room_service):
        """Sets the room_service of this FoodAndDrink.

        Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).

        :param room_service: The room_service of this FoodAndDrink.
        :type room_service: bool
        """

        self._room_service = room_service

    @property
    def room_service_exception(self):
        """Gets the room_service_exception of this FoodAndDrink.

        Room service exception.

        :return: The room_service_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._room_service_exception

    @room_service_exception.setter
    def room_service_exception(self, room_service_exception):
        """Sets the room_service_exception of this FoodAndDrink.

        Room service exception.

        :param room_service_exception: The room_service_exception of this FoodAndDrink.
        :type room_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if room_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `room_service_exception` ({0}), must be one of {1}"
                .format(room_service_exception, allowed_values)
            )

        self._room_service_exception = room_service_exception

    @property
    def table_service(self):
        """Gets the table_service of this FoodAndDrink.

        Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.

        :return: The table_service of this FoodAndDrink.
        :rtype: bool
        """
        return self._table_service

    @table_service.setter
    def table_service(self, table_service):
        """Sets the table_service of this FoodAndDrink.

        Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.

        :param table_service: The table_service of this FoodAndDrink.
        :type table_service: bool
        """

        self._table_service = table_service

    @property
    def table_service_exception(self):
        """Gets the table_service_exception of this FoodAndDrink.

        Table service exception.

        :return: The table_service_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._table_service_exception

    @table_service_exception.setter
    def table_service_exception(self, table_service_exception):
        """Sets the table_service_exception of this FoodAndDrink.

        Table service exception.

        :param table_service_exception: The table_service_exception of this FoodAndDrink.
        :type table_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if table_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `table_service_exception` ({0}), must be one of {1}"
                .format(table_service_exception, allowed_values)
            )

        self._table_service_exception = table_service_exception

    @property
    def twenty_four_hour_room_service(self):
        """Gets the twenty_four_hour_room_service of this FoodAndDrink.

        24hr room service. Room service is available 24 hours a day.

        :return: The twenty_four_hour_room_service of this FoodAndDrink.
        :rtype: bool
        """
        return self._twenty_four_hour_room_service

    @twenty_four_hour_room_service.setter
    def twenty_four_hour_room_service(self, twenty_four_hour_room_service):
        """Sets the twenty_four_hour_room_service of this FoodAndDrink.

        24hr room service. Room service is available 24 hours a day.

        :param twenty_four_hour_room_service: The twenty_four_hour_room_service of this FoodAndDrink.
        :type twenty_four_hour_room_service: bool
        """

        self._twenty_four_hour_room_service = twenty_four_hour_room_service

    @property
    def twenty_four_hour_room_service_exception(self):
        """Gets the twenty_four_hour_room_service_exception of this FoodAndDrink.

        24hr room service exception.

        :return: The twenty_four_hour_room_service_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._twenty_four_hour_room_service_exception

    @twenty_four_hour_room_service_exception.setter
    def twenty_four_hour_room_service_exception(self, twenty_four_hour_room_service_exception):
        """Sets the twenty_four_hour_room_service_exception of this FoodAndDrink.

        24hr room service exception.

        :param twenty_four_hour_room_service_exception: The twenty_four_hour_room_service_exception of this FoodAndDrink.
        :type twenty_four_hour_room_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if twenty_four_hour_room_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `twenty_four_hour_room_service_exception` ({0}), must be one of {1}"
                .format(twenty_four_hour_room_service_exception, allowed_values)
            )

        self._twenty_four_hour_room_service_exception = twenty_four_hour_room_service_exception

    @property
    def vending_machine(self):
        """Gets the vending_machine of this FoodAndDrink.

        Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.

        :return: The vending_machine of this FoodAndDrink.
        :rtype: bool
        """
        return self._vending_machine

    @vending_machine.setter
    def vending_machine(self, vending_machine):
        """Sets the vending_machine of this FoodAndDrink.

        Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.

        :param vending_machine: The vending_machine of this FoodAndDrink.
        :type vending_machine: bool
        """

        self._vending_machine = vending_machine

    @property
    def vending_machine_exception(self):
        """Gets the vending_machine_exception of this FoodAndDrink.

        Vending machine exception.

        :return: The vending_machine_exception of this FoodAndDrink.
        :rtype: str
        """
        return self._vending_machine_exception

    @vending_machine_exception.setter
    def vending_machine_exception(self, vending_machine_exception):
        """Sets the vending_machine_exception of this FoodAndDrink.

        Vending machine exception.

        :param vending_machine_exception: The vending_machine_exception of this FoodAndDrink.
        :type vending_machine_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if vending_machine_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `vending_machine_exception` ({0}), must be one of {1}"
                .format(vending_machine_exception, allowed_values)
            )

        self._vending_machine_exception = vending_machine_exception
