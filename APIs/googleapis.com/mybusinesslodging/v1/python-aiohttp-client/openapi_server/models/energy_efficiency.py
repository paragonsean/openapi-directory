# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnergyEfficiency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carbon_free_energy_sources: bool=None, carbon_free_energy_sources_exception: str=None, energy_conservation_program: bool=None, energy_conservation_program_exception: str=None, energy_efficient_heating_and_cooling_systems: bool=None, energy_efficient_heating_and_cooling_systems_exception: str=None, energy_efficient_lighting: bool=None, energy_efficient_lighting_exception: str=None, energy_saving_thermostats: bool=None, energy_saving_thermostats_exception: str=None, green_building_design: bool=None, green_building_design_exception: str=None, independent_organization_audits_energy_use: bool=None, independent_organization_audits_energy_use_exception: str=None):
        """EnergyEfficiency - a model defined in OpenAPI

        :param carbon_free_energy_sources: The carbon_free_energy_sources of this EnergyEfficiency.
        :param carbon_free_energy_sources_exception: The carbon_free_energy_sources_exception of this EnergyEfficiency.
        :param energy_conservation_program: The energy_conservation_program of this EnergyEfficiency.
        :param energy_conservation_program_exception: The energy_conservation_program_exception of this EnergyEfficiency.
        :param energy_efficient_heating_and_cooling_systems: The energy_efficient_heating_and_cooling_systems of this EnergyEfficiency.
        :param energy_efficient_heating_and_cooling_systems_exception: The energy_efficient_heating_and_cooling_systems_exception of this EnergyEfficiency.
        :param energy_efficient_lighting: The energy_efficient_lighting of this EnergyEfficiency.
        :param energy_efficient_lighting_exception: The energy_efficient_lighting_exception of this EnergyEfficiency.
        :param energy_saving_thermostats: The energy_saving_thermostats of this EnergyEfficiency.
        :param energy_saving_thermostats_exception: The energy_saving_thermostats_exception of this EnergyEfficiency.
        :param green_building_design: The green_building_design of this EnergyEfficiency.
        :param green_building_design_exception: The green_building_design_exception of this EnergyEfficiency.
        :param independent_organization_audits_energy_use: The independent_organization_audits_energy_use of this EnergyEfficiency.
        :param independent_organization_audits_energy_use_exception: The independent_organization_audits_energy_use_exception of this EnergyEfficiency.
        """
        self.openapi_types = {
            'carbon_free_energy_sources': bool,
            'carbon_free_energy_sources_exception': str,
            'energy_conservation_program': bool,
            'energy_conservation_program_exception': str,
            'energy_efficient_heating_and_cooling_systems': bool,
            'energy_efficient_heating_and_cooling_systems_exception': str,
            'energy_efficient_lighting': bool,
            'energy_efficient_lighting_exception': str,
            'energy_saving_thermostats': bool,
            'energy_saving_thermostats_exception': str,
            'green_building_design': bool,
            'green_building_design_exception': str,
            'independent_organization_audits_energy_use': bool,
            'independent_organization_audits_energy_use_exception': str
        }

        self.attribute_map = {
            'carbon_free_energy_sources': 'carbonFreeEnergySources',
            'carbon_free_energy_sources_exception': 'carbonFreeEnergySourcesException',
            'energy_conservation_program': 'energyConservationProgram',
            'energy_conservation_program_exception': 'energyConservationProgramException',
            'energy_efficient_heating_and_cooling_systems': 'energyEfficientHeatingAndCoolingSystems',
            'energy_efficient_heating_and_cooling_systems_exception': 'energyEfficientHeatingAndCoolingSystemsException',
            'energy_efficient_lighting': 'energyEfficientLighting',
            'energy_efficient_lighting_exception': 'energyEfficientLightingException',
            'energy_saving_thermostats': 'energySavingThermostats',
            'energy_saving_thermostats_exception': 'energySavingThermostatsException',
            'green_building_design': 'greenBuildingDesign',
            'green_building_design_exception': 'greenBuildingDesignException',
            'independent_organization_audits_energy_use': 'independentOrganizationAuditsEnergyUse',
            'independent_organization_audits_energy_use_exception': 'independentOrganizationAuditsEnergyUseException'
        }

        self._carbon_free_energy_sources = carbon_free_energy_sources
        self._carbon_free_energy_sources_exception = carbon_free_energy_sources_exception
        self._energy_conservation_program = energy_conservation_program
        self._energy_conservation_program_exception = energy_conservation_program_exception
        self._energy_efficient_heating_and_cooling_systems = energy_efficient_heating_and_cooling_systems
        self._energy_efficient_heating_and_cooling_systems_exception = energy_efficient_heating_and_cooling_systems_exception
        self._energy_efficient_lighting = energy_efficient_lighting
        self._energy_efficient_lighting_exception = energy_efficient_lighting_exception
        self._energy_saving_thermostats = energy_saving_thermostats
        self._energy_saving_thermostats_exception = energy_saving_thermostats_exception
        self._green_building_design = green_building_design
        self._green_building_design_exception = green_building_design_exception
        self._independent_organization_audits_energy_use = independent_organization_audits_energy_use
        self._independent_organization_audits_energy_use_exception = independent_organization_audits_energy_use_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnergyEfficiency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnergyEfficiency of this EnergyEfficiency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carbon_free_energy_sources(self):
        """Gets the carbon_free_energy_sources of this EnergyEfficiency.

        Carbon free energy sources. Property sources carbon-free electricity via at least one of the following methods: on-site clean energy generation, power purchase agreement(s) with clean energy generators, green power provided by electricity supplier, or purchases of Energy Attribute Certificates (such as Renewable Energy Certificates or Guarantees of Origin).

        :return: The carbon_free_energy_sources of this EnergyEfficiency.
        :rtype: bool
        """
        return self._carbon_free_energy_sources

    @carbon_free_energy_sources.setter
    def carbon_free_energy_sources(self, carbon_free_energy_sources):
        """Sets the carbon_free_energy_sources of this EnergyEfficiency.

        Carbon free energy sources. Property sources carbon-free electricity via at least one of the following methods: on-site clean energy generation, power purchase agreement(s) with clean energy generators, green power provided by electricity supplier, or purchases of Energy Attribute Certificates (such as Renewable Energy Certificates or Guarantees of Origin).

        :param carbon_free_energy_sources: The carbon_free_energy_sources of this EnergyEfficiency.
        :type carbon_free_energy_sources: bool
        """

        self._carbon_free_energy_sources = carbon_free_energy_sources

    @property
    def carbon_free_energy_sources_exception(self):
        """Gets the carbon_free_energy_sources_exception of this EnergyEfficiency.

        Carbon free energy sources exception.

        :return: The carbon_free_energy_sources_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._carbon_free_energy_sources_exception

    @carbon_free_energy_sources_exception.setter
    def carbon_free_energy_sources_exception(self, carbon_free_energy_sources_exception):
        """Sets the carbon_free_energy_sources_exception of this EnergyEfficiency.

        Carbon free energy sources exception.

        :param carbon_free_energy_sources_exception: The carbon_free_energy_sources_exception of this EnergyEfficiency.
        :type carbon_free_energy_sources_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if carbon_free_energy_sources_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `carbon_free_energy_sources_exception` ({0}), must be one of {1}"
                .format(carbon_free_energy_sources_exception, allowed_values)
            )

        self._carbon_free_energy_sources_exception = carbon_free_energy_sources_exception

    @property
    def energy_conservation_program(self):
        """Gets the energy_conservation_program of this EnergyEfficiency.

        Energy conservation program. The property tracks corporate-level Scope 1 and 2 GHG emissions, and Scope 3 emissions if available. The property has a commitment to implement initiatives that reduce GHG emissions year over year. The property has shown an absolute reduction in emissions for at least 2 years. Emissions are either verfied by a third-party and/or published in external communications.

        :return: The energy_conservation_program of this EnergyEfficiency.
        :rtype: bool
        """
        return self._energy_conservation_program

    @energy_conservation_program.setter
    def energy_conservation_program(self, energy_conservation_program):
        """Sets the energy_conservation_program of this EnergyEfficiency.

        Energy conservation program. The property tracks corporate-level Scope 1 and 2 GHG emissions, and Scope 3 emissions if available. The property has a commitment to implement initiatives that reduce GHG emissions year over year. The property has shown an absolute reduction in emissions for at least 2 years. Emissions are either verfied by a third-party and/or published in external communications.

        :param energy_conservation_program: The energy_conservation_program of this EnergyEfficiency.
        :type energy_conservation_program: bool
        """

        self._energy_conservation_program = energy_conservation_program

    @property
    def energy_conservation_program_exception(self):
        """Gets the energy_conservation_program_exception of this EnergyEfficiency.

        Energy conservation program exception.

        :return: The energy_conservation_program_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._energy_conservation_program_exception

    @energy_conservation_program_exception.setter
    def energy_conservation_program_exception(self, energy_conservation_program_exception):
        """Sets the energy_conservation_program_exception of this EnergyEfficiency.

        Energy conservation program exception.

        :param energy_conservation_program_exception: The energy_conservation_program_exception of this EnergyEfficiency.
        :type energy_conservation_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if energy_conservation_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `energy_conservation_program_exception` ({0}), must be one of {1}"
                .format(energy_conservation_program_exception, allowed_values)
            )

        self._energy_conservation_program_exception = energy_conservation_program_exception

    @property
    def energy_efficient_heating_and_cooling_systems(self):
        """Gets the energy_efficient_heating_and_cooling_systems of this EnergyEfficiency.

        Energy efficient heating and cooling systems. The property doesn't use chlorofluorocarbon (CFC)-based refrigerants in heating, ventilating, and air-conditioning systems unless a third-party audit shows it's not economically feasible. The CFC-based refrigerants which are used should have a Global Warming Potential (GWP) ≤ 10. The property uses occupancy sensors on HVAC systems in back-of-house spaces, meeting rooms, and other low-traffic areas.

        :return: The energy_efficient_heating_and_cooling_systems of this EnergyEfficiency.
        :rtype: bool
        """
        return self._energy_efficient_heating_and_cooling_systems

    @energy_efficient_heating_and_cooling_systems.setter
    def energy_efficient_heating_and_cooling_systems(self, energy_efficient_heating_and_cooling_systems):
        """Sets the energy_efficient_heating_and_cooling_systems of this EnergyEfficiency.

        Energy efficient heating and cooling systems. The property doesn't use chlorofluorocarbon (CFC)-based refrigerants in heating, ventilating, and air-conditioning systems unless a third-party audit shows it's not economically feasible. The CFC-based refrigerants which are used should have a Global Warming Potential (GWP) ≤ 10. The property uses occupancy sensors on HVAC systems in back-of-house spaces, meeting rooms, and other low-traffic areas.

        :param energy_efficient_heating_and_cooling_systems: The energy_efficient_heating_and_cooling_systems of this EnergyEfficiency.
        :type energy_efficient_heating_and_cooling_systems: bool
        """

        self._energy_efficient_heating_and_cooling_systems = energy_efficient_heating_and_cooling_systems

    @property
    def energy_efficient_heating_and_cooling_systems_exception(self):
        """Gets the energy_efficient_heating_and_cooling_systems_exception of this EnergyEfficiency.

        Energy efficient heating and cooling systems exception.

        :return: The energy_efficient_heating_and_cooling_systems_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._energy_efficient_heating_and_cooling_systems_exception

    @energy_efficient_heating_and_cooling_systems_exception.setter
    def energy_efficient_heating_and_cooling_systems_exception(self, energy_efficient_heating_and_cooling_systems_exception):
        """Sets the energy_efficient_heating_and_cooling_systems_exception of this EnergyEfficiency.

        Energy efficient heating and cooling systems exception.

        :param energy_efficient_heating_and_cooling_systems_exception: The energy_efficient_heating_and_cooling_systems_exception of this EnergyEfficiency.
        :type energy_efficient_heating_and_cooling_systems_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if energy_efficient_heating_and_cooling_systems_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `energy_efficient_heating_and_cooling_systems_exception` ({0}), must be one of {1}"
                .format(energy_efficient_heating_and_cooling_systems_exception, allowed_values)
            )

        self._energy_efficient_heating_and_cooling_systems_exception = energy_efficient_heating_and_cooling_systems_exception

    @property
    def energy_efficient_lighting(self):
        """Gets the energy_efficient_lighting of this EnergyEfficiency.

        Energy efficient lighting. At least 75% of the property's lighting is energy efficient, using lighting that is more than 45 lumens per watt – typically LED or CFL lightbulbs.

        :return: The energy_efficient_lighting of this EnergyEfficiency.
        :rtype: bool
        """
        return self._energy_efficient_lighting

    @energy_efficient_lighting.setter
    def energy_efficient_lighting(self, energy_efficient_lighting):
        """Sets the energy_efficient_lighting of this EnergyEfficiency.

        Energy efficient lighting. At least 75% of the property's lighting is energy efficient, using lighting that is more than 45 lumens per watt – typically LED or CFL lightbulbs.

        :param energy_efficient_lighting: The energy_efficient_lighting of this EnergyEfficiency.
        :type energy_efficient_lighting: bool
        """

        self._energy_efficient_lighting = energy_efficient_lighting

    @property
    def energy_efficient_lighting_exception(self):
        """Gets the energy_efficient_lighting_exception of this EnergyEfficiency.

        Energy efficient lighting exception.

        :return: The energy_efficient_lighting_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._energy_efficient_lighting_exception

    @energy_efficient_lighting_exception.setter
    def energy_efficient_lighting_exception(self, energy_efficient_lighting_exception):
        """Sets the energy_efficient_lighting_exception of this EnergyEfficiency.

        Energy efficient lighting exception.

        :param energy_efficient_lighting_exception: The energy_efficient_lighting_exception of this EnergyEfficiency.
        :type energy_efficient_lighting_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if energy_efficient_lighting_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `energy_efficient_lighting_exception` ({0}), must be one of {1}"
                .format(energy_efficient_lighting_exception, allowed_values)
            )

        self._energy_efficient_lighting_exception = energy_efficient_lighting_exception

    @property
    def energy_saving_thermostats(self):
        """Gets the energy_saving_thermostats of this EnergyEfficiency.

        Energy saving thermostats. The property installed energy-saving thermostats throughout the building to conserve energy when rooms or areas are not in use. Energy-saving thermostats are devices that control heating/cooling in the building by learning temperature preferences and automatically adjusting to energy-saving temperatures as the default. The thermostats are automatically set to a temperature between 68-78 degrees F (20-26 °C), depending on seasonality. In the winter, set the thermostat to 68°F (20°C) when the room is occupied, lowering room temperature when unoccupied. In the summer, set the thermostat to 78°F (26°C) when the room is occupied.

        :return: The energy_saving_thermostats of this EnergyEfficiency.
        :rtype: bool
        """
        return self._energy_saving_thermostats

    @energy_saving_thermostats.setter
    def energy_saving_thermostats(self, energy_saving_thermostats):
        """Sets the energy_saving_thermostats of this EnergyEfficiency.

        Energy saving thermostats. The property installed energy-saving thermostats throughout the building to conserve energy when rooms or areas are not in use. Energy-saving thermostats are devices that control heating/cooling in the building by learning temperature preferences and automatically adjusting to energy-saving temperatures as the default. The thermostats are automatically set to a temperature between 68-78 degrees F (20-26 °C), depending on seasonality. In the winter, set the thermostat to 68°F (20°C) when the room is occupied, lowering room temperature when unoccupied. In the summer, set the thermostat to 78°F (26°C) when the room is occupied.

        :param energy_saving_thermostats: The energy_saving_thermostats of this EnergyEfficiency.
        :type energy_saving_thermostats: bool
        """

        self._energy_saving_thermostats = energy_saving_thermostats

    @property
    def energy_saving_thermostats_exception(self):
        """Gets the energy_saving_thermostats_exception of this EnergyEfficiency.

        Energy saving thermostats exception.

        :return: The energy_saving_thermostats_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._energy_saving_thermostats_exception

    @energy_saving_thermostats_exception.setter
    def energy_saving_thermostats_exception(self, energy_saving_thermostats_exception):
        """Sets the energy_saving_thermostats_exception of this EnergyEfficiency.

        Energy saving thermostats exception.

        :param energy_saving_thermostats_exception: The energy_saving_thermostats_exception of this EnergyEfficiency.
        :type energy_saving_thermostats_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if energy_saving_thermostats_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `energy_saving_thermostats_exception` ({0}), must be one of {1}"
                .format(energy_saving_thermostats_exception, allowed_values)
            )

        self._energy_saving_thermostats_exception = energy_saving_thermostats_exception

    @property
    def green_building_design(self):
        """Gets the green_building_design of this EnergyEfficiency.

        Output only. Green building design. True if the property has been awarded a relevant certification.

        :return: The green_building_design of this EnergyEfficiency.
        :rtype: bool
        """
        return self._green_building_design

    @green_building_design.setter
    def green_building_design(self, green_building_design):
        """Sets the green_building_design of this EnergyEfficiency.

        Output only. Green building design. True if the property has been awarded a relevant certification.

        :param green_building_design: The green_building_design of this EnergyEfficiency.
        :type green_building_design: bool
        """

        self._green_building_design = green_building_design

    @property
    def green_building_design_exception(self):
        """Gets the green_building_design_exception of this EnergyEfficiency.

        Output only. Green building design exception.

        :return: The green_building_design_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._green_building_design_exception

    @green_building_design_exception.setter
    def green_building_design_exception(self, green_building_design_exception):
        """Sets the green_building_design_exception of this EnergyEfficiency.

        Output only. Green building design exception.

        :param green_building_design_exception: The green_building_design_exception of this EnergyEfficiency.
        :type green_building_design_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if green_building_design_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `green_building_design_exception` ({0}), must be one of {1}"
                .format(green_building_design_exception, allowed_values)
            )

        self._green_building_design_exception = green_building_design_exception

    @property
    def independent_organization_audits_energy_use(self):
        """Gets the independent_organization_audits_energy_use of this EnergyEfficiency.

        Independent organization audits energy use. The property conducts an energy audit at least every 5 years, the results of which are either verified by a third-party and/or published in external communications. An energy audit is a detailed assessment of the facility which provides recommendations to existing operations and procedures to improve energy efficiency, available incentives or rebates,and opportunities for improvements through renovations or upgrades. Examples of organizations that conduct credible third party audits include: Engie Impact, DNV GL (EU), Dexma, and local utility providers (they often provide energy and water audits).

        :return: The independent_organization_audits_energy_use of this EnergyEfficiency.
        :rtype: bool
        """
        return self._independent_organization_audits_energy_use

    @independent_organization_audits_energy_use.setter
    def independent_organization_audits_energy_use(self, independent_organization_audits_energy_use):
        """Sets the independent_organization_audits_energy_use of this EnergyEfficiency.

        Independent organization audits energy use. The property conducts an energy audit at least every 5 years, the results of which are either verified by a third-party and/or published in external communications. An energy audit is a detailed assessment of the facility which provides recommendations to existing operations and procedures to improve energy efficiency, available incentives or rebates,and opportunities for improvements through renovations or upgrades. Examples of organizations that conduct credible third party audits include: Engie Impact, DNV GL (EU), Dexma, and local utility providers (they often provide energy and water audits).

        :param independent_organization_audits_energy_use: The independent_organization_audits_energy_use of this EnergyEfficiency.
        :type independent_organization_audits_energy_use: bool
        """

        self._independent_organization_audits_energy_use = independent_organization_audits_energy_use

    @property
    def independent_organization_audits_energy_use_exception(self):
        """Gets the independent_organization_audits_energy_use_exception of this EnergyEfficiency.

        Independent organization audits energy use exception.

        :return: The independent_organization_audits_energy_use_exception of this EnergyEfficiency.
        :rtype: str
        """
        return self._independent_organization_audits_energy_use_exception

    @independent_organization_audits_energy_use_exception.setter
    def independent_organization_audits_energy_use_exception(self, independent_organization_audits_energy_use_exception):
        """Sets the independent_organization_audits_energy_use_exception of this EnergyEfficiency.

        Independent organization audits energy use exception.

        :param independent_organization_audits_energy_use_exception: The independent_organization_audits_energy_use_exception of this EnergyEfficiency.
        :type independent_organization_audits_energy_use_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if independent_organization_audits_energy_use_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `independent_organization_audits_energy_use_exception` ({0}), must be one of {1}"
                .format(independent_organization_audits_energy_use_exception, allowed_values)
            )

        self._independent_organization_audits_energy_use_exception = independent_organization_audits_energy_use_exception
