# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WasteReduction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compostable_food_containers_and_cutlery: bool=None, compostable_food_containers_and_cutlery_exception: str=None, composts_excess_food: bool=None, composts_excess_food_exception: str=None, donates_excess_food: bool=None, donates_excess_food_exception: str=None, food_waste_reduction_program: bool=None, food_waste_reduction_program_exception: str=None, no_single_use_plastic_straws: bool=None, no_single_use_plastic_straws_exception: str=None, no_single_use_plastic_water_bottles: bool=None, no_single_use_plastic_water_bottles_exception: str=None, no_styrofoam_food_containers: bool=None, no_styrofoam_food_containers_exception: str=None, recycling_program: bool=None, recycling_program_exception: str=None, refillable_toiletry_containers: bool=None, refillable_toiletry_containers_exception: str=None, safely_disposes_batteries: bool=None, safely_disposes_batteries_exception: str=None, safely_disposes_electronics: bool=None, safely_disposes_electronics_exception: str=None, safely_disposes_lightbulbs: bool=None, safely_disposes_lightbulbs_exception: str=None, safely_handles_hazardous_substances: bool=None, safely_handles_hazardous_substances_exception: str=None, soap_donation_program: bool=None, soap_donation_program_exception: str=None, toiletry_donation_program: bool=None, toiletry_donation_program_exception: str=None, water_bottle_filling_stations: bool=None, water_bottle_filling_stations_exception: str=None):
        """WasteReduction - a model defined in OpenAPI

        :param compostable_food_containers_and_cutlery: The compostable_food_containers_and_cutlery of this WasteReduction.
        :param compostable_food_containers_and_cutlery_exception: The compostable_food_containers_and_cutlery_exception of this WasteReduction.
        :param composts_excess_food: The composts_excess_food of this WasteReduction.
        :param composts_excess_food_exception: The composts_excess_food_exception of this WasteReduction.
        :param donates_excess_food: The donates_excess_food of this WasteReduction.
        :param donates_excess_food_exception: The donates_excess_food_exception of this WasteReduction.
        :param food_waste_reduction_program: The food_waste_reduction_program of this WasteReduction.
        :param food_waste_reduction_program_exception: The food_waste_reduction_program_exception of this WasteReduction.
        :param no_single_use_plastic_straws: The no_single_use_plastic_straws of this WasteReduction.
        :param no_single_use_plastic_straws_exception: The no_single_use_plastic_straws_exception of this WasteReduction.
        :param no_single_use_plastic_water_bottles: The no_single_use_plastic_water_bottles of this WasteReduction.
        :param no_single_use_plastic_water_bottles_exception: The no_single_use_plastic_water_bottles_exception of this WasteReduction.
        :param no_styrofoam_food_containers: The no_styrofoam_food_containers of this WasteReduction.
        :param no_styrofoam_food_containers_exception: The no_styrofoam_food_containers_exception of this WasteReduction.
        :param recycling_program: The recycling_program of this WasteReduction.
        :param recycling_program_exception: The recycling_program_exception of this WasteReduction.
        :param refillable_toiletry_containers: The refillable_toiletry_containers of this WasteReduction.
        :param refillable_toiletry_containers_exception: The refillable_toiletry_containers_exception of this WasteReduction.
        :param safely_disposes_batteries: The safely_disposes_batteries of this WasteReduction.
        :param safely_disposes_batteries_exception: The safely_disposes_batteries_exception of this WasteReduction.
        :param safely_disposes_electronics: The safely_disposes_electronics of this WasteReduction.
        :param safely_disposes_electronics_exception: The safely_disposes_electronics_exception of this WasteReduction.
        :param safely_disposes_lightbulbs: The safely_disposes_lightbulbs of this WasteReduction.
        :param safely_disposes_lightbulbs_exception: The safely_disposes_lightbulbs_exception of this WasteReduction.
        :param safely_handles_hazardous_substances: The safely_handles_hazardous_substances of this WasteReduction.
        :param safely_handles_hazardous_substances_exception: The safely_handles_hazardous_substances_exception of this WasteReduction.
        :param soap_donation_program: The soap_donation_program of this WasteReduction.
        :param soap_donation_program_exception: The soap_donation_program_exception of this WasteReduction.
        :param toiletry_donation_program: The toiletry_donation_program of this WasteReduction.
        :param toiletry_donation_program_exception: The toiletry_donation_program_exception of this WasteReduction.
        :param water_bottle_filling_stations: The water_bottle_filling_stations of this WasteReduction.
        :param water_bottle_filling_stations_exception: The water_bottle_filling_stations_exception of this WasteReduction.
        """
        self.openapi_types = {
            'compostable_food_containers_and_cutlery': bool,
            'compostable_food_containers_and_cutlery_exception': str,
            'composts_excess_food': bool,
            'composts_excess_food_exception': str,
            'donates_excess_food': bool,
            'donates_excess_food_exception': str,
            'food_waste_reduction_program': bool,
            'food_waste_reduction_program_exception': str,
            'no_single_use_plastic_straws': bool,
            'no_single_use_plastic_straws_exception': str,
            'no_single_use_plastic_water_bottles': bool,
            'no_single_use_plastic_water_bottles_exception': str,
            'no_styrofoam_food_containers': bool,
            'no_styrofoam_food_containers_exception': str,
            'recycling_program': bool,
            'recycling_program_exception': str,
            'refillable_toiletry_containers': bool,
            'refillable_toiletry_containers_exception': str,
            'safely_disposes_batteries': bool,
            'safely_disposes_batteries_exception': str,
            'safely_disposes_electronics': bool,
            'safely_disposes_electronics_exception': str,
            'safely_disposes_lightbulbs': bool,
            'safely_disposes_lightbulbs_exception': str,
            'safely_handles_hazardous_substances': bool,
            'safely_handles_hazardous_substances_exception': str,
            'soap_donation_program': bool,
            'soap_donation_program_exception': str,
            'toiletry_donation_program': bool,
            'toiletry_donation_program_exception': str,
            'water_bottle_filling_stations': bool,
            'water_bottle_filling_stations_exception': str
        }

        self.attribute_map = {
            'compostable_food_containers_and_cutlery': 'compostableFoodContainersAndCutlery',
            'compostable_food_containers_and_cutlery_exception': 'compostableFoodContainersAndCutleryException',
            'composts_excess_food': 'compostsExcessFood',
            'composts_excess_food_exception': 'compostsExcessFoodException',
            'donates_excess_food': 'donatesExcessFood',
            'donates_excess_food_exception': 'donatesExcessFoodException',
            'food_waste_reduction_program': 'foodWasteReductionProgram',
            'food_waste_reduction_program_exception': 'foodWasteReductionProgramException',
            'no_single_use_plastic_straws': 'noSingleUsePlasticStraws',
            'no_single_use_plastic_straws_exception': 'noSingleUsePlasticStrawsException',
            'no_single_use_plastic_water_bottles': 'noSingleUsePlasticWaterBottles',
            'no_single_use_plastic_water_bottles_exception': 'noSingleUsePlasticWaterBottlesException',
            'no_styrofoam_food_containers': 'noStyrofoamFoodContainers',
            'no_styrofoam_food_containers_exception': 'noStyrofoamFoodContainersException',
            'recycling_program': 'recyclingProgram',
            'recycling_program_exception': 'recyclingProgramException',
            'refillable_toiletry_containers': 'refillableToiletryContainers',
            'refillable_toiletry_containers_exception': 'refillableToiletryContainersException',
            'safely_disposes_batteries': 'safelyDisposesBatteries',
            'safely_disposes_batteries_exception': 'safelyDisposesBatteriesException',
            'safely_disposes_electronics': 'safelyDisposesElectronics',
            'safely_disposes_electronics_exception': 'safelyDisposesElectronicsException',
            'safely_disposes_lightbulbs': 'safelyDisposesLightbulbs',
            'safely_disposes_lightbulbs_exception': 'safelyDisposesLightbulbsException',
            'safely_handles_hazardous_substances': 'safelyHandlesHazardousSubstances',
            'safely_handles_hazardous_substances_exception': 'safelyHandlesHazardousSubstancesException',
            'soap_donation_program': 'soapDonationProgram',
            'soap_donation_program_exception': 'soapDonationProgramException',
            'toiletry_donation_program': 'toiletryDonationProgram',
            'toiletry_donation_program_exception': 'toiletryDonationProgramException',
            'water_bottle_filling_stations': 'waterBottleFillingStations',
            'water_bottle_filling_stations_exception': 'waterBottleFillingStationsException'
        }

        self._compostable_food_containers_and_cutlery = compostable_food_containers_and_cutlery
        self._compostable_food_containers_and_cutlery_exception = compostable_food_containers_and_cutlery_exception
        self._composts_excess_food = composts_excess_food
        self._composts_excess_food_exception = composts_excess_food_exception
        self._donates_excess_food = donates_excess_food
        self._donates_excess_food_exception = donates_excess_food_exception
        self._food_waste_reduction_program = food_waste_reduction_program
        self._food_waste_reduction_program_exception = food_waste_reduction_program_exception
        self._no_single_use_plastic_straws = no_single_use_plastic_straws
        self._no_single_use_plastic_straws_exception = no_single_use_plastic_straws_exception
        self._no_single_use_plastic_water_bottles = no_single_use_plastic_water_bottles
        self._no_single_use_plastic_water_bottles_exception = no_single_use_plastic_water_bottles_exception
        self._no_styrofoam_food_containers = no_styrofoam_food_containers
        self._no_styrofoam_food_containers_exception = no_styrofoam_food_containers_exception
        self._recycling_program = recycling_program
        self._recycling_program_exception = recycling_program_exception
        self._refillable_toiletry_containers = refillable_toiletry_containers
        self._refillable_toiletry_containers_exception = refillable_toiletry_containers_exception
        self._safely_disposes_batteries = safely_disposes_batteries
        self._safely_disposes_batteries_exception = safely_disposes_batteries_exception
        self._safely_disposes_electronics = safely_disposes_electronics
        self._safely_disposes_electronics_exception = safely_disposes_electronics_exception
        self._safely_disposes_lightbulbs = safely_disposes_lightbulbs
        self._safely_disposes_lightbulbs_exception = safely_disposes_lightbulbs_exception
        self._safely_handles_hazardous_substances = safely_handles_hazardous_substances
        self._safely_handles_hazardous_substances_exception = safely_handles_hazardous_substances_exception
        self._soap_donation_program = soap_donation_program
        self._soap_donation_program_exception = soap_donation_program_exception
        self._toiletry_donation_program = toiletry_donation_program
        self._toiletry_donation_program_exception = toiletry_donation_program_exception
        self._water_bottle_filling_stations = water_bottle_filling_stations
        self._water_bottle_filling_stations_exception = water_bottle_filling_stations_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WasteReduction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WasteReduction of this WasteReduction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compostable_food_containers_and_cutlery(self):
        """Gets the compostable_food_containers_and_cutlery of this WasteReduction.

        Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.

        :return: The compostable_food_containers_and_cutlery of this WasteReduction.
        :rtype: bool
        """
        return self._compostable_food_containers_and_cutlery

    @compostable_food_containers_and_cutlery.setter
    def compostable_food_containers_and_cutlery(self, compostable_food_containers_and_cutlery):
        """Sets the compostable_food_containers_and_cutlery of this WasteReduction.

        Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.

        :param compostable_food_containers_and_cutlery: The compostable_food_containers_and_cutlery of this WasteReduction.
        :type compostable_food_containers_and_cutlery: bool
        """

        self._compostable_food_containers_and_cutlery = compostable_food_containers_and_cutlery

    @property
    def compostable_food_containers_and_cutlery_exception(self):
        """Gets the compostable_food_containers_and_cutlery_exception of this WasteReduction.

        Compostable food containers and cutlery exception.

        :return: The compostable_food_containers_and_cutlery_exception of this WasteReduction.
        :rtype: str
        """
        return self._compostable_food_containers_and_cutlery_exception

    @compostable_food_containers_and_cutlery_exception.setter
    def compostable_food_containers_and_cutlery_exception(self, compostable_food_containers_and_cutlery_exception):
        """Sets the compostable_food_containers_and_cutlery_exception of this WasteReduction.

        Compostable food containers and cutlery exception.

        :param compostable_food_containers_and_cutlery_exception: The compostable_food_containers_and_cutlery_exception of this WasteReduction.
        :type compostable_food_containers_and_cutlery_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if compostable_food_containers_and_cutlery_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `compostable_food_containers_and_cutlery_exception` ({0}), must be one of {1}"
                .format(compostable_food_containers_and_cutlery_exception, allowed_values)
            )

        self._compostable_food_containers_and_cutlery_exception = compostable_food_containers_and_cutlery_exception

    @property
    def composts_excess_food(self):
        """Gets the composts_excess_food of this WasteReduction.

        Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.

        :return: The composts_excess_food of this WasteReduction.
        :rtype: bool
        """
        return self._composts_excess_food

    @composts_excess_food.setter
    def composts_excess_food(self, composts_excess_food):
        """Sets the composts_excess_food of this WasteReduction.

        Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.

        :param composts_excess_food: The composts_excess_food of this WasteReduction.
        :type composts_excess_food: bool
        """

        self._composts_excess_food = composts_excess_food

    @property
    def composts_excess_food_exception(self):
        """Gets the composts_excess_food_exception of this WasteReduction.

        Composts excess food exception.

        :return: The composts_excess_food_exception of this WasteReduction.
        :rtype: str
        """
        return self._composts_excess_food_exception

    @composts_excess_food_exception.setter
    def composts_excess_food_exception(self, composts_excess_food_exception):
        """Sets the composts_excess_food_exception of this WasteReduction.

        Composts excess food exception.

        :param composts_excess_food_exception: The composts_excess_food_exception of this WasteReduction.
        :type composts_excess_food_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if composts_excess_food_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `composts_excess_food_exception` ({0}), must be one of {1}"
                .format(composts_excess_food_exception, allowed_values)
            )

        self._composts_excess_food_exception = composts_excess_food_exception

    @property
    def donates_excess_food(self):
        """Gets the donates_excess_food of this WasteReduction.

        Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.

        :return: The donates_excess_food of this WasteReduction.
        :rtype: bool
        """
        return self._donates_excess_food

    @donates_excess_food.setter
    def donates_excess_food(self, donates_excess_food):
        """Sets the donates_excess_food of this WasteReduction.

        Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.

        :param donates_excess_food: The donates_excess_food of this WasteReduction.
        :type donates_excess_food: bool
        """

        self._donates_excess_food = donates_excess_food

    @property
    def donates_excess_food_exception(self):
        """Gets the donates_excess_food_exception of this WasteReduction.

        Donates excess food exception.

        :return: The donates_excess_food_exception of this WasteReduction.
        :rtype: str
        """
        return self._donates_excess_food_exception

    @donates_excess_food_exception.setter
    def donates_excess_food_exception(self, donates_excess_food_exception):
        """Sets the donates_excess_food_exception of this WasteReduction.

        Donates excess food exception.

        :param donates_excess_food_exception: The donates_excess_food_exception of this WasteReduction.
        :type donates_excess_food_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if donates_excess_food_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `donates_excess_food_exception` ({0}), must be one of {1}"
                .format(donates_excess_food_exception, allowed_values)
            )

        self._donates_excess_food_exception = donates_excess_food_exception

    @property
    def food_waste_reduction_program(self):
        """Gets the food_waste_reduction_program of this WasteReduction.

        Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.

        :return: The food_waste_reduction_program of this WasteReduction.
        :rtype: bool
        """
        return self._food_waste_reduction_program

    @food_waste_reduction_program.setter
    def food_waste_reduction_program(self, food_waste_reduction_program):
        """Sets the food_waste_reduction_program of this WasteReduction.

        Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.

        :param food_waste_reduction_program: The food_waste_reduction_program of this WasteReduction.
        :type food_waste_reduction_program: bool
        """

        self._food_waste_reduction_program = food_waste_reduction_program

    @property
    def food_waste_reduction_program_exception(self):
        """Gets the food_waste_reduction_program_exception of this WasteReduction.

        Food waste reduction program exception.

        :return: The food_waste_reduction_program_exception of this WasteReduction.
        :rtype: str
        """
        return self._food_waste_reduction_program_exception

    @food_waste_reduction_program_exception.setter
    def food_waste_reduction_program_exception(self, food_waste_reduction_program_exception):
        """Sets the food_waste_reduction_program_exception of this WasteReduction.

        Food waste reduction program exception.

        :param food_waste_reduction_program_exception: The food_waste_reduction_program_exception of this WasteReduction.
        :type food_waste_reduction_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if food_waste_reduction_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `food_waste_reduction_program_exception` ({0}), must be one of {1}"
                .format(food_waste_reduction_program_exception, allowed_values)
            )

        self._food_waste_reduction_program_exception = food_waste_reduction_program_exception

    @property
    def no_single_use_plastic_straws(self):
        """Gets the no_single_use_plastic_straws of this WasteReduction.

        No single use plastic straws. The property bans single-use plastic straws.

        :return: The no_single_use_plastic_straws of this WasteReduction.
        :rtype: bool
        """
        return self._no_single_use_plastic_straws

    @no_single_use_plastic_straws.setter
    def no_single_use_plastic_straws(self, no_single_use_plastic_straws):
        """Sets the no_single_use_plastic_straws of this WasteReduction.

        No single use plastic straws. The property bans single-use plastic straws.

        :param no_single_use_plastic_straws: The no_single_use_plastic_straws of this WasteReduction.
        :type no_single_use_plastic_straws: bool
        """

        self._no_single_use_plastic_straws = no_single_use_plastic_straws

    @property
    def no_single_use_plastic_straws_exception(self):
        """Gets the no_single_use_plastic_straws_exception of this WasteReduction.

        No single use plastic straws exception.

        :return: The no_single_use_plastic_straws_exception of this WasteReduction.
        :rtype: str
        """
        return self._no_single_use_plastic_straws_exception

    @no_single_use_plastic_straws_exception.setter
    def no_single_use_plastic_straws_exception(self, no_single_use_plastic_straws_exception):
        """Sets the no_single_use_plastic_straws_exception of this WasteReduction.

        No single use plastic straws exception.

        :param no_single_use_plastic_straws_exception: The no_single_use_plastic_straws_exception of this WasteReduction.
        :type no_single_use_plastic_straws_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if no_single_use_plastic_straws_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `no_single_use_plastic_straws_exception` ({0}), must be one of {1}"
                .format(no_single_use_plastic_straws_exception, allowed_values)
            )

        self._no_single_use_plastic_straws_exception = no_single_use_plastic_straws_exception

    @property
    def no_single_use_plastic_water_bottles(self):
        """Gets the no_single_use_plastic_water_bottles of this WasteReduction.

        No single use plastic water bottles. The property bans single-use plastic water bottles.

        :return: The no_single_use_plastic_water_bottles of this WasteReduction.
        :rtype: bool
        """
        return self._no_single_use_plastic_water_bottles

    @no_single_use_plastic_water_bottles.setter
    def no_single_use_plastic_water_bottles(self, no_single_use_plastic_water_bottles):
        """Sets the no_single_use_plastic_water_bottles of this WasteReduction.

        No single use plastic water bottles. The property bans single-use plastic water bottles.

        :param no_single_use_plastic_water_bottles: The no_single_use_plastic_water_bottles of this WasteReduction.
        :type no_single_use_plastic_water_bottles: bool
        """

        self._no_single_use_plastic_water_bottles = no_single_use_plastic_water_bottles

    @property
    def no_single_use_plastic_water_bottles_exception(self):
        """Gets the no_single_use_plastic_water_bottles_exception of this WasteReduction.

        No single use plastic water bottles exception.

        :return: The no_single_use_plastic_water_bottles_exception of this WasteReduction.
        :rtype: str
        """
        return self._no_single_use_plastic_water_bottles_exception

    @no_single_use_plastic_water_bottles_exception.setter
    def no_single_use_plastic_water_bottles_exception(self, no_single_use_plastic_water_bottles_exception):
        """Sets the no_single_use_plastic_water_bottles_exception of this WasteReduction.

        No single use plastic water bottles exception.

        :param no_single_use_plastic_water_bottles_exception: The no_single_use_plastic_water_bottles_exception of this WasteReduction.
        :type no_single_use_plastic_water_bottles_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if no_single_use_plastic_water_bottles_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `no_single_use_plastic_water_bottles_exception` ({0}), must be one of {1}"
                .format(no_single_use_plastic_water_bottles_exception, allowed_values)
            )

        self._no_single_use_plastic_water_bottles_exception = no_single_use_plastic_water_bottles_exception

    @property
    def no_styrofoam_food_containers(self):
        """Gets the no_styrofoam_food_containers of this WasteReduction.

        No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.

        :return: The no_styrofoam_food_containers of this WasteReduction.
        :rtype: bool
        """
        return self._no_styrofoam_food_containers

    @no_styrofoam_food_containers.setter
    def no_styrofoam_food_containers(self, no_styrofoam_food_containers):
        """Sets the no_styrofoam_food_containers of this WasteReduction.

        No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.

        :param no_styrofoam_food_containers: The no_styrofoam_food_containers of this WasteReduction.
        :type no_styrofoam_food_containers: bool
        """

        self._no_styrofoam_food_containers = no_styrofoam_food_containers

    @property
    def no_styrofoam_food_containers_exception(self):
        """Gets the no_styrofoam_food_containers_exception of this WasteReduction.

        No styrofoam food containers exception.

        :return: The no_styrofoam_food_containers_exception of this WasteReduction.
        :rtype: str
        """
        return self._no_styrofoam_food_containers_exception

    @no_styrofoam_food_containers_exception.setter
    def no_styrofoam_food_containers_exception(self, no_styrofoam_food_containers_exception):
        """Sets the no_styrofoam_food_containers_exception of this WasteReduction.

        No styrofoam food containers exception.

        :param no_styrofoam_food_containers_exception: The no_styrofoam_food_containers_exception of this WasteReduction.
        :type no_styrofoam_food_containers_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if no_styrofoam_food_containers_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `no_styrofoam_food_containers_exception` ({0}), must be one of {1}"
                .format(no_styrofoam_food_containers_exception, allowed_values)
            )

        self._no_styrofoam_food_containers_exception = no_styrofoam_food_containers_exception

    @property
    def recycling_program(self):
        """Gets the recycling_program of this WasteReduction.

        Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.

        :return: The recycling_program of this WasteReduction.
        :rtype: bool
        """
        return self._recycling_program

    @recycling_program.setter
    def recycling_program(self, recycling_program):
        """Sets the recycling_program of this WasteReduction.

        Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.

        :param recycling_program: The recycling_program of this WasteReduction.
        :type recycling_program: bool
        """

        self._recycling_program = recycling_program

    @property
    def recycling_program_exception(self):
        """Gets the recycling_program_exception of this WasteReduction.

        Recycling program exception.

        :return: The recycling_program_exception of this WasteReduction.
        :rtype: str
        """
        return self._recycling_program_exception

    @recycling_program_exception.setter
    def recycling_program_exception(self, recycling_program_exception):
        """Sets the recycling_program_exception of this WasteReduction.

        Recycling program exception.

        :param recycling_program_exception: The recycling_program_exception of this WasteReduction.
        :type recycling_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if recycling_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `recycling_program_exception` ({0}), must be one of {1}"
                .format(recycling_program_exception, allowed_values)
            )

        self._recycling_program_exception = recycling_program_exception

    @property
    def refillable_toiletry_containers(self):
        """Gets the refillable_toiletry_containers of this WasteReduction.

        Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.

        :return: The refillable_toiletry_containers of this WasteReduction.
        :rtype: bool
        """
        return self._refillable_toiletry_containers

    @refillable_toiletry_containers.setter
    def refillable_toiletry_containers(self, refillable_toiletry_containers):
        """Sets the refillable_toiletry_containers of this WasteReduction.

        Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.

        :param refillable_toiletry_containers: The refillable_toiletry_containers of this WasteReduction.
        :type refillable_toiletry_containers: bool
        """

        self._refillable_toiletry_containers = refillable_toiletry_containers

    @property
    def refillable_toiletry_containers_exception(self):
        """Gets the refillable_toiletry_containers_exception of this WasteReduction.

        Refillable toiletry containers exception.

        :return: The refillable_toiletry_containers_exception of this WasteReduction.
        :rtype: str
        """
        return self._refillable_toiletry_containers_exception

    @refillable_toiletry_containers_exception.setter
    def refillable_toiletry_containers_exception(self, refillable_toiletry_containers_exception):
        """Sets the refillable_toiletry_containers_exception of this WasteReduction.

        Refillable toiletry containers exception.

        :param refillable_toiletry_containers_exception: The refillable_toiletry_containers_exception of this WasteReduction.
        :type refillable_toiletry_containers_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if refillable_toiletry_containers_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `refillable_toiletry_containers_exception` ({0}), must be one of {1}"
                .format(refillable_toiletry_containers_exception, allowed_values)
            )

        self._refillable_toiletry_containers_exception = refillable_toiletry_containers_exception

    @property
    def safely_disposes_batteries(self):
        """Gets the safely_disposes_batteries of this WasteReduction.

        Safely disposes batteries. The property safely stores and disposes batteries.

        :return: The safely_disposes_batteries of this WasteReduction.
        :rtype: bool
        """
        return self._safely_disposes_batteries

    @safely_disposes_batteries.setter
    def safely_disposes_batteries(self, safely_disposes_batteries):
        """Sets the safely_disposes_batteries of this WasteReduction.

        Safely disposes batteries. The property safely stores and disposes batteries.

        :param safely_disposes_batteries: The safely_disposes_batteries of this WasteReduction.
        :type safely_disposes_batteries: bool
        """

        self._safely_disposes_batteries = safely_disposes_batteries

    @property
    def safely_disposes_batteries_exception(self):
        """Gets the safely_disposes_batteries_exception of this WasteReduction.

        Safely disposes batteries exception.

        :return: The safely_disposes_batteries_exception of this WasteReduction.
        :rtype: str
        """
        return self._safely_disposes_batteries_exception

    @safely_disposes_batteries_exception.setter
    def safely_disposes_batteries_exception(self, safely_disposes_batteries_exception):
        """Sets the safely_disposes_batteries_exception of this WasteReduction.

        Safely disposes batteries exception.

        :param safely_disposes_batteries_exception: The safely_disposes_batteries_exception of this WasteReduction.
        :type safely_disposes_batteries_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if safely_disposes_batteries_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `safely_disposes_batteries_exception` ({0}), must be one of {1}"
                .format(safely_disposes_batteries_exception, allowed_values)
            )

        self._safely_disposes_batteries_exception = safely_disposes_batteries_exception

    @property
    def safely_disposes_electronics(self):
        """Gets the safely_disposes_electronics of this WasteReduction.

        Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).

        :return: The safely_disposes_electronics of this WasteReduction.
        :rtype: bool
        """
        return self._safely_disposes_electronics

    @safely_disposes_electronics.setter
    def safely_disposes_electronics(self, safely_disposes_electronics):
        """Sets the safely_disposes_electronics of this WasteReduction.

        Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).

        :param safely_disposes_electronics: The safely_disposes_electronics of this WasteReduction.
        :type safely_disposes_electronics: bool
        """

        self._safely_disposes_electronics = safely_disposes_electronics

    @property
    def safely_disposes_electronics_exception(self):
        """Gets the safely_disposes_electronics_exception of this WasteReduction.

        Safely disposes electronics exception.

        :return: The safely_disposes_electronics_exception of this WasteReduction.
        :rtype: str
        """
        return self._safely_disposes_electronics_exception

    @safely_disposes_electronics_exception.setter
    def safely_disposes_electronics_exception(self, safely_disposes_electronics_exception):
        """Sets the safely_disposes_electronics_exception of this WasteReduction.

        Safely disposes electronics exception.

        :param safely_disposes_electronics_exception: The safely_disposes_electronics_exception of this WasteReduction.
        :type safely_disposes_electronics_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if safely_disposes_electronics_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `safely_disposes_electronics_exception` ({0}), must be one of {1}"
                .format(safely_disposes_electronics_exception, allowed_values)
            )

        self._safely_disposes_electronics_exception = safely_disposes_electronics_exception

    @property
    def safely_disposes_lightbulbs(self):
        """Gets the safely_disposes_lightbulbs of this WasteReduction.

        Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.

        :return: The safely_disposes_lightbulbs of this WasteReduction.
        :rtype: bool
        """
        return self._safely_disposes_lightbulbs

    @safely_disposes_lightbulbs.setter
    def safely_disposes_lightbulbs(self, safely_disposes_lightbulbs):
        """Sets the safely_disposes_lightbulbs of this WasteReduction.

        Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.

        :param safely_disposes_lightbulbs: The safely_disposes_lightbulbs of this WasteReduction.
        :type safely_disposes_lightbulbs: bool
        """

        self._safely_disposes_lightbulbs = safely_disposes_lightbulbs

    @property
    def safely_disposes_lightbulbs_exception(self):
        """Gets the safely_disposes_lightbulbs_exception of this WasteReduction.

        Safely disposes lightbulbs exception.

        :return: The safely_disposes_lightbulbs_exception of this WasteReduction.
        :rtype: str
        """
        return self._safely_disposes_lightbulbs_exception

    @safely_disposes_lightbulbs_exception.setter
    def safely_disposes_lightbulbs_exception(self, safely_disposes_lightbulbs_exception):
        """Sets the safely_disposes_lightbulbs_exception of this WasteReduction.

        Safely disposes lightbulbs exception.

        :param safely_disposes_lightbulbs_exception: The safely_disposes_lightbulbs_exception of this WasteReduction.
        :type safely_disposes_lightbulbs_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if safely_disposes_lightbulbs_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `safely_disposes_lightbulbs_exception` ({0}), must be one of {1}"
                .format(safely_disposes_lightbulbs_exception, allowed_values)
            )

        self._safely_disposes_lightbulbs_exception = safely_disposes_lightbulbs_exception

    @property
    def safely_handles_hazardous_substances(self):
        """Gets the safely_handles_hazardous_substances of this WasteReduction.

        Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as \"hazardous\" by an authoritative body (such as OSHA or DOT), are labeled with signal words such as \"Danger,\" \"Caution,\" \"Warning,\" or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.

        :return: The safely_handles_hazardous_substances of this WasteReduction.
        :rtype: bool
        """
        return self._safely_handles_hazardous_substances

    @safely_handles_hazardous_substances.setter
    def safely_handles_hazardous_substances(self, safely_handles_hazardous_substances):
        """Sets the safely_handles_hazardous_substances of this WasteReduction.

        Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as \"hazardous\" by an authoritative body (such as OSHA or DOT), are labeled with signal words such as \"Danger,\" \"Caution,\" \"Warning,\" or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.

        :param safely_handles_hazardous_substances: The safely_handles_hazardous_substances of this WasteReduction.
        :type safely_handles_hazardous_substances: bool
        """

        self._safely_handles_hazardous_substances = safely_handles_hazardous_substances

    @property
    def safely_handles_hazardous_substances_exception(self):
        """Gets the safely_handles_hazardous_substances_exception of this WasteReduction.

        Safely handles hazardous substances exception.

        :return: The safely_handles_hazardous_substances_exception of this WasteReduction.
        :rtype: str
        """
        return self._safely_handles_hazardous_substances_exception

    @safely_handles_hazardous_substances_exception.setter
    def safely_handles_hazardous_substances_exception(self, safely_handles_hazardous_substances_exception):
        """Sets the safely_handles_hazardous_substances_exception of this WasteReduction.

        Safely handles hazardous substances exception.

        :param safely_handles_hazardous_substances_exception: The safely_handles_hazardous_substances_exception of this WasteReduction.
        :type safely_handles_hazardous_substances_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if safely_handles_hazardous_substances_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `safely_handles_hazardous_substances_exception` ({0}), must be one of {1}"
                .format(safely_handles_hazardous_substances_exception, allowed_values)
            )

        self._safely_handles_hazardous_substances_exception = safely_handles_hazardous_substances_exception

    @property
    def soap_donation_program(self):
        """Gets the soap_donation_program of this WasteReduction.

        Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.

        :return: The soap_donation_program of this WasteReduction.
        :rtype: bool
        """
        return self._soap_donation_program

    @soap_donation_program.setter
    def soap_donation_program(self, soap_donation_program):
        """Sets the soap_donation_program of this WasteReduction.

        Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.

        :param soap_donation_program: The soap_donation_program of this WasteReduction.
        :type soap_donation_program: bool
        """

        self._soap_donation_program = soap_donation_program

    @property
    def soap_donation_program_exception(self):
        """Gets the soap_donation_program_exception of this WasteReduction.

        Soap donation program exception.

        :return: The soap_donation_program_exception of this WasteReduction.
        :rtype: str
        """
        return self._soap_donation_program_exception

    @soap_donation_program_exception.setter
    def soap_donation_program_exception(self, soap_donation_program_exception):
        """Sets the soap_donation_program_exception of this WasteReduction.

        Soap donation program exception.

        :param soap_donation_program_exception: The soap_donation_program_exception of this WasteReduction.
        :type soap_donation_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if soap_donation_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `soap_donation_program_exception` ({0}), must be one of {1}"
                .format(soap_donation_program_exception, allowed_values)
            )

        self._soap_donation_program_exception = soap_donation_program_exception

    @property
    def toiletry_donation_program(self):
        """Gets the toiletry_donation_program of this WasteReduction.

        Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.

        :return: The toiletry_donation_program of this WasteReduction.
        :rtype: bool
        """
        return self._toiletry_donation_program

    @toiletry_donation_program.setter
    def toiletry_donation_program(self, toiletry_donation_program):
        """Sets the toiletry_donation_program of this WasteReduction.

        Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.

        :param toiletry_donation_program: The toiletry_donation_program of this WasteReduction.
        :type toiletry_donation_program: bool
        """

        self._toiletry_donation_program = toiletry_donation_program

    @property
    def toiletry_donation_program_exception(self):
        """Gets the toiletry_donation_program_exception of this WasteReduction.

        Toiletry donation program exception.

        :return: The toiletry_donation_program_exception of this WasteReduction.
        :rtype: str
        """
        return self._toiletry_donation_program_exception

    @toiletry_donation_program_exception.setter
    def toiletry_donation_program_exception(self, toiletry_donation_program_exception):
        """Sets the toiletry_donation_program_exception of this WasteReduction.

        Toiletry donation program exception.

        :param toiletry_donation_program_exception: The toiletry_donation_program_exception of this WasteReduction.
        :type toiletry_donation_program_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if toiletry_donation_program_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `toiletry_donation_program_exception` ({0}), must be one of {1}"
                .format(toiletry_donation_program_exception, allowed_values)
            )

        self._toiletry_donation_program_exception = toiletry_donation_program_exception

    @property
    def water_bottle_filling_stations(self):
        """Gets the water_bottle_filling_stations of this WasteReduction.

        Water bottle filling stations. The property offers water stations throughout the building for guest use.

        :return: The water_bottle_filling_stations of this WasteReduction.
        :rtype: bool
        """
        return self._water_bottle_filling_stations

    @water_bottle_filling_stations.setter
    def water_bottle_filling_stations(self, water_bottle_filling_stations):
        """Sets the water_bottle_filling_stations of this WasteReduction.

        Water bottle filling stations. The property offers water stations throughout the building for guest use.

        :param water_bottle_filling_stations: The water_bottle_filling_stations of this WasteReduction.
        :type water_bottle_filling_stations: bool
        """

        self._water_bottle_filling_stations = water_bottle_filling_stations

    @property
    def water_bottle_filling_stations_exception(self):
        """Gets the water_bottle_filling_stations_exception of this WasteReduction.

        Water bottle filling stations exception.

        :return: The water_bottle_filling_stations_exception of this WasteReduction.
        :rtype: str
        """
        return self._water_bottle_filling_stations_exception

    @water_bottle_filling_stations_exception.setter
    def water_bottle_filling_stations_exception(self, water_bottle_filling_stations_exception):
        """Sets the water_bottle_filling_stations_exception of this WasteReduction.

        Water bottle filling stations exception.

        :param water_bottle_filling_stations_exception: The water_bottle_filling_stations_exception of this WasteReduction.
        :type water_bottle_filling_stations_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_bottle_filling_stations_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_bottle_filling_stations_exception` ({0}), must be one of {1}"
                .format(water_bottle_filling_stations_exception, allowed_values)
            )

        self._water_bottle_filling_stations_exception = water_bottle_filling_stations_exception
