# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Families(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, babysitting: bool=None, babysitting_exception: str=None, kids_activities: bool=None, kids_activities_exception: str=None, kids_club: bool=None, kids_club_exception: str=None, kids_friendly: bool=None, kids_friendly_exception: str=None):
        """Families - a model defined in OpenAPI

        :param babysitting: The babysitting of this Families.
        :param babysitting_exception: The babysitting_exception of this Families.
        :param kids_activities: The kids_activities of this Families.
        :param kids_activities_exception: The kids_activities_exception of this Families.
        :param kids_club: The kids_club of this Families.
        :param kids_club_exception: The kids_club_exception of this Families.
        :param kids_friendly: The kids_friendly of this Families.
        :param kids_friendly_exception: The kids_friendly_exception of this Families.
        """
        self.openapi_types = {
            'babysitting': bool,
            'babysitting_exception': str,
            'kids_activities': bool,
            'kids_activities_exception': str,
            'kids_club': bool,
            'kids_club_exception': str,
            'kids_friendly': bool,
            'kids_friendly_exception': str
        }

        self.attribute_map = {
            'babysitting': 'babysitting',
            'babysitting_exception': 'babysittingException',
            'kids_activities': 'kidsActivities',
            'kids_activities_exception': 'kidsActivitiesException',
            'kids_club': 'kidsClub',
            'kids_club_exception': 'kidsClubException',
            'kids_friendly': 'kidsFriendly',
            'kids_friendly_exception': 'kidsFriendlyException'
        }

        self._babysitting = babysitting
        self._babysitting_exception = babysitting_exception
        self._kids_activities = kids_activities
        self._kids_activities_exception = kids_activities_exception
        self._kids_club = kids_club
        self._kids_club_exception = kids_club_exception
        self._kids_friendly = kids_friendly
        self._kids_friendly_exception = kids_friendly_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Families':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Families of this Families.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def babysitting(self):
        """Gets the babysitting of this Families.

        Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.

        :return: The babysitting of this Families.
        :rtype: bool
        """
        return self._babysitting

    @babysitting.setter
    def babysitting(self, babysitting):
        """Sets the babysitting of this Families.

        Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.

        :param babysitting: The babysitting of this Families.
        :type babysitting: bool
        """

        self._babysitting = babysitting

    @property
    def babysitting_exception(self):
        """Gets the babysitting_exception of this Families.

        Babysitting exception.

        :return: The babysitting_exception of this Families.
        :rtype: str
        """
        return self._babysitting_exception

    @babysitting_exception.setter
    def babysitting_exception(self, babysitting_exception):
        """Sets the babysitting_exception of this Families.

        Babysitting exception.

        :param babysitting_exception: The babysitting_exception of this Families.
        :type babysitting_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if babysitting_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `babysitting_exception` ({0}), must be one of {1}"
                .format(babysitting_exception, allowed_values)
            )

        self._babysitting_exception = babysitting_exception

    @property
    def kids_activities(self):
        """Gets the kids_activities of this Families.

        Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.

        :return: The kids_activities of this Families.
        :rtype: bool
        """
        return self._kids_activities

    @kids_activities.setter
    def kids_activities(self, kids_activities):
        """Sets the kids_activities of this Families.

        Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.

        :param kids_activities: The kids_activities of this Families.
        :type kids_activities: bool
        """

        self._kids_activities = kids_activities

    @property
    def kids_activities_exception(self):
        """Gets the kids_activities_exception of this Families.

        Kids activities exception.

        :return: The kids_activities_exception of this Families.
        :rtype: str
        """
        return self._kids_activities_exception

    @kids_activities_exception.setter
    def kids_activities_exception(self, kids_activities_exception):
        """Sets the kids_activities_exception of this Families.

        Kids activities exception.

        :param kids_activities_exception: The kids_activities_exception of this Families.
        :type kids_activities_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kids_activities_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kids_activities_exception` ({0}), must be one of {1}"
                .format(kids_activities_exception, allowed_values)
            )

        self._kids_activities_exception = kids_activities_exception

    @property
    def kids_club(self):
        """Gets the kids_club of this Families.

        Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.

        :return: The kids_club of this Families.
        :rtype: bool
        """
        return self._kids_club

    @kids_club.setter
    def kids_club(self, kids_club):
        """Sets the kids_club of this Families.

        Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.

        :param kids_club: The kids_club of this Families.
        :type kids_club: bool
        """

        self._kids_club = kids_club

    @property
    def kids_club_exception(self):
        """Gets the kids_club_exception of this Families.

        Kids club exception.

        :return: The kids_club_exception of this Families.
        :rtype: str
        """
        return self._kids_club_exception

    @kids_club_exception.setter
    def kids_club_exception(self, kids_club_exception):
        """Sets the kids_club_exception of this Families.

        Kids club exception.

        :param kids_club_exception: The kids_club_exception of this Families.
        :type kids_club_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kids_club_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kids_club_exception` ({0}), must be one of {1}"
                .format(kids_club_exception, allowed_values)
            )

        self._kids_club_exception = kids_club_exception

    @property
    def kids_friendly(self):
        """Gets the kids_friendly of this Families.

        Kids friendly. The hotel has one or more special features for families with children, such as reduced rates, child-sized beds, kids' club, babysitting service, or suitable place to play on premises.

        :return: The kids_friendly of this Families.
        :rtype: bool
        """
        return self._kids_friendly

    @kids_friendly.setter
    def kids_friendly(self, kids_friendly):
        """Sets the kids_friendly of this Families.

        Kids friendly. The hotel has one or more special features for families with children, such as reduced rates, child-sized beds, kids' club, babysitting service, or suitable place to play on premises.

        :param kids_friendly: The kids_friendly of this Families.
        :type kids_friendly: bool
        """

        self._kids_friendly = kids_friendly

    @property
    def kids_friendly_exception(self):
        """Gets the kids_friendly_exception of this Families.

        Kids friendly exception.

        :return: The kids_friendly_exception of this Families.
        :rtype: str
        """
        return self._kids_friendly_exception

    @kids_friendly_exception.setter
    def kids_friendly_exception(self, kids_friendly_exception):
        """Sets the kids_friendly_exception of this Families.

        Kids friendly exception.

        :param kids_friendly_exception: The kids_friendly_exception of this Families.
        :type kids_friendly_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kids_friendly_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kids_friendly_exception` ({0}), must be one of {1}"
                .format(kids_friendly_exception, allowed_values)
            )

        self._kids_friendly_exception = kids_friendly_exception
