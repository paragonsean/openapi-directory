# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Accessibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mobility_accessible: bool=None, mobility_accessible_elevator: bool=None, mobility_accessible_elevator_exception: str=None, mobility_accessible_exception: str=None, mobility_accessible_parking: bool=None, mobility_accessible_parking_exception: str=None, mobility_accessible_pool: bool=None, mobility_accessible_pool_exception: str=None):
        """Accessibility - a model defined in OpenAPI

        :param mobility_accessible: The mobility_accessible of this Accessibility.
        :param mobility_accessible_elevator: The mobility_accessible_elevator of this Accessibility.
        :param mobility_accessible_elevator_exception: The mobility_accessible_elevator_exception of this Accessibility.
        :param mobility_accessible_exception: The mobility_accessible_exception of this Accessibility.
        :param mobility_accessible_parking: The mobility_accessible_parking of this Accessibility.
        :param mobility_accessible_parking_exception: The mobility_accessible_parking_exception of this Accessibility.
        :param mobility_accessible_pool: The mobility_accessible_pool of this Accessibility.
        :param mobility_accessible_pool_exception: The mobility_accessible_pool_exception of this Accessibility.
        """
        self.openapi_types = {
            'mobility_accessible': bool,
            'mobility_accessible_elevator': bool,
            'mobility_accessible_elevator_exception': str,
            'mobility_accessible_exception': str,
            'mobility_accessible_parking': bool,
            'mobility_accessible_parking_exception': str,
            'mobility_accessible_pool': bool,
            'mobility_accessible_pool_exception': str
        }

        self.attribute_map = {
            'mobility_accessible': 'mobilityAccessible',
            'mobility_accessible_elevator': 'mobilityAccessibleElevator',
            'mobility_accessible_elevator_exception': 'mobilityAccessibleElevatorException',
            'mobility_accessible_exception': 'mobilityAccessibleException',
            'mobility_accessible_parking': 'mobilityAccessibleParking',
            'mobility_accessible_parking_exception': 'mobilityAccessibleParkingException',
            'mobility_accessible_pool': 'mobilityAccessiblePool',
            'mobility_accessible_pool_exception': 'mobilityAccessiblePoolException'
        }

        self._mobility_accessible = mobility_accessible
        self._mobility_accessible_elevator = mobility_accessible_elevator
        self._mobility_accessible_elevator_exception = mobility_accessible_elevator_exception
        self._mobility_accessible_exception = mobility_accessible_exception
        self._mobility_accessible_parking = mobility_accessible_parking
        self._mobility_accessible_parking_exception = mobility_accessible_parking_exception
        self._mobility_accessible_pool = mobility_accessible_pool
        self._mobility_accessible_pool_exception = mobility_accessible_pool_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Accessibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Accessibility of this Accessibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mobility_accessible(self):
        """Gets the mobility_accessible of this Accessibility.

        Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.

        :return: The mobility_accessible of this Accessibility.
        :rtype: bool
        """
        return self._mobility_accessible

    @mobility_accessible.setter
    def mobility_accessible(self, mobility_accessible):
        """Sets the mobility_accessible of this Accessibility.

        Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.

        :param mobility_accessible: The mobility_accessible of this Accessibility.
        :type mobility_accessible: bool
        """

        self._mobility_accessible = mobility_accessible

    @property
    def mobility_accessible_elevator(self):
        """Gets the mobility_accessible_elevator of this Accessibility.

        Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.

        :return: The mobility_accessible_elevator of this Accessibility.
        :rtype: bool
        """
        return self._mobility_accessible_elevator

    @mobility_accessible_elevator.setter
    def mobility_accessible_elevator(self, mobility_accessible_elevator):
        """Sets the mobility_accessible_elevator of this Accessibility.

        Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.

        :param mobility_accessible_elevator: The mobility_accessible_elevator of this Accessibility.
        :type mobility_accessible_elevator: bool
        """

        self._mobility_accessible_elevator = mobility_accessible_elevator

    @property
    def mobility_accessible_elevator_exception(self):
        """Gets the mobility_accessible_elevator_exception of this Accessibility.

        Mobility accessible elevator exception.

        :return: The mobility_accessible_elevator_exception of this Accessibility.
        :rtype: str
        """
        return self._mobility_accessible_elevator_exception

    @mobility_accessible_elevator_exception.setter
    def mobility_accessible_elevator_exception(self, mobility_accessible_elevator_exception):
        """Sets the mobility_accessible_elevator_exception of this Accessibility.

        Mobility accessible elevator exception.

        :param mobility_accessible_elevator_exception: The mobility_accessible_elevator_exception of this Accessibility.
        :type mobility_accessible_elevator_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_elevator_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_elevator_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_elevator_exception, allowed_values)
            )

        self._mobility_accessible_elevator_exception = mobility_accessible_elevator_exception

    @property
    def mobility_accessible_exception(self):
        """Gets the mobility_accessible_exception of this Accessibility.

        Mobility accessible exception.

        :return: The mobility_accessible_exception of this Accessibility.
        :rtype: str
        """
        return self._mobility_accessible_exception

    @mobility_accessible_exception.setter
    def mobility_accessible_exception(self, mobility_accessible_exception):
        """Sets the mobility_accessible_exception of this Accessibility.

        Mobility accessible exception.

        :param mobility_accessible_exception: The mobility_accessible_exception of this Accessibility.
        :type mobility_accessible_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_exception, allowed_values)
            )

        self._mobility_accessible_exception = mobility_accessible_exception

    @property
    def mobility_accessible_parking(self):
        """Gets the mobility_accessible_parking of this Accessibility.

        Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.

        :return: The mobility_accessible_parking of this Accessibility.
        :rtype: bool
        """
        return self._mobility_accessible_parking

    @mobility_accessible_parking.setter
    def mobility_accessible_parking(self, mobility_accessible_parking):
        """Sets the mobility_accessible_parking of this Accessibility.

        Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.

        :param mobility_accessible_parking: The mobility_accessible_parking of this Accessibility.
        :type mobility_accessible_parking: bool
        """

        self._mobility_accessible_parking = mobility_accessible_parking

    @property
    def mobility_accessible_parking_exception(self):
        """Gets the mobility_accessible_parking_exception of this Accessibility.

        Mobility accessible parking exception.

        :return: The mobility_accessible_parking_exception of this Accessibility.
        :rtype: str
        """
        return self._mobility_accessible_parking_exception

    @mobility_accessible_parking_exception.setter
    def mobility_accessible_parking_exception(self, mobility_accessible_parking_exception):
        """Sets the mobility_accessible_parking_exception of this Accessibility.

        Mobility accessible parking exception.

        :param mobility_accessible_parking_exception: The mobility_accessible_parking_exception of this Accessibility.
        :type mobility_accessible_parking_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_parking_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_parking_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_parking_exception, allowed_values)
            )

        self._mobility_accessible_parking_exception = mobility_accessible_parking_exception

    @property
    def mobility_accessible_pool(self):
        """Gets the mobility_accessible_pool of this Accessibility.

        Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.

        :return: The mobility_accessible_pool of this Accessibility.
        :rtype: bool
        """
        return self._mobility_accessible_pool

    @mobility_accessible_pool.setter
    def mobility_accessible_pool(self, mobility_accessible_pool):
        """Sets the mobility_accessible_pool of this Accessibility.

        Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.

        :param mobility_accessible_pool: The mobility_accessible_pool of this Accessibility.
        :type mobility_accessible_pool: bool
        """

        self._mobility_accessible_pool = mobility_accessible_pool

    @property
    def mobility_accessible_pool_exception(self):
        """Gets the mobility_accessible_pool_exception of this Accessibility.

        Mobility accessible pool exception.

        :return: The mobility_accessible_pool_exception of this Accessibility.
        :rtype: str
        """
        return self._mobility_accessible_pool_exception

    @mobility_accessible_pool_exception.setter
    def mobility_accessible_pool_exception(self, mobility_accessible_pool_exception):
        """Sets the mobility_accessible_pool_exception of this Accessibility.

        Mobility accessible pool exception.

        :param mobility_accessible_pool_exception: The mobility_accessible_pool_exception of this Accessibility.
        :type mobility_accessible_pool_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mobility_accessible_pool_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mobility_accessible_pool_exception` ({0}), must be one of {1}"
                .format(mobility_accessible_pool_exception, allowed_values)
            )

        self._mobility_accessible_pool_exception = mobility_accessible_pool_exception
