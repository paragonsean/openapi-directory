# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MinimizedContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contactless_checkin_checkout: bool=None, contactless_checkin_checkout_exception: str=None, digital_guest_room_keys: bool=None, digital_guest_room_keys_exception: str=None, housekeeping_scheduled_request_only: bool=None, housekeeping_scheduled_request_only_exception: str=None, no_high_touch_items_common_areas: bool=None, no_high_touch_items_common_areas_exception: str=None, no_high_touch_items_guest_rooms: bool=None, no_high_touch_items_guest_rooms_exception: str=None, plastic_keycards_disinfected: bool=None, plastic_keycards_disinfected_exception: str=None, room_bookings_buffer: bool=None, room_bookings_buffer_exception: str=None):
        """MinimizedContact - a model defined in OpenAPI

        :param contactless_checkin_checkout: The contactless_checkin_checkout of this MinimizedContact.
        :param contactless_checkin_checkout_exception: The contactless_checkin_checkout_exception of this MinimizedContact.
        :param digital_guest_room_keys: The digital_guest_room_keys of this MinimizedContact.
        :param digital_guest_room_keys_exception: The digital_guest_room_keys_exception of this MinimizedContact.
        :param housekeeping_scheduled_request_only: The housekeeping_scheduled_request_only of this MinimizedContact.
        :param housekeeping_scheduled_request_only_exception: The housekeeping_scheduled_request_only_exception of this MinimizedContact.
        :param no_high_touch_items_common_areas: The no_high_touch_items_common_areas of this MinimizedContact.
        :param no_high_touch_items_common_areas_exception: The no_high_touch_items_common_areas_exception of this MinimizedContact.
        :param no_high_touch_items_guest_rooms: The no_high_touch_items_guest_rooms of this MinimizedContact.
        :param no_high_touch_items_guest_rooms_exception: The no_high_touch_items_guest_rooms_exception of this MinimizedContact.
        :param plastic_keycards_disinfected: The plastic_keycards_disinfected of this MinimizedContact.
        :param plastic_keycards_disinfected_exception: The plastic_keycards_disinfected_exception of this MinimizedContact.
        :param room_bookings_buffer: The room_bookings_buffer of this MinimizedContact.
        :param room_bookings_buffer_exception: The room_bookings_buffer_exception of this MinimizedContact.
        """
        self.openapi_types = {
            'contactless_checkin_checkout': bool,
            'contactless_checkin_checkout_exception': str,
            'digital_guest_room_keys': bool,
            'digital_guest_room_keys_exception': str,
            'housekeeping_scheduled_request_only': bool,
            'housekeeping_scheduled_request_only_exception': str,
            'no_high_touch_items_common_areas': bool,
            'no_high_touch_items_common_areas_exception': str,
            'no_high_touch_items_guest_rooms': bool,
            'no_high_touch_items_guest_rooms_exception': str,
            'plastic_keycards_disinfected': bool,
            'plastic_keycards_disinfected_exception': str,
            'room_bookings_buffer': bool,
            'room_bookings_buffer_exception': str
        }

        self.attribute_map = {
            'contactless_checkin_checkout': 'contactlessCheckinCheckout',
            'contactless_checkin_checkout_exception': 'contactlessCheckinCheckoutException',
            'digital_guest_room_keys': 'digitalGuestRoomKeys',
            'digital_guest_room_keys_exception': 'digitalGuestRoomKeysException',
            'housekeeping_scheduled_request_only': 'housekeepingScheduledRequestOnly',
            'housekeeping_scheduled_request_only_exception': 'housekeepingScheduledRequestOnlyException',
            'no_high_touch_items_common_areas': 'noHighTouchItemsCommonAreas',
            'no_high_touch_items_common_areas_exception': 'noHighTouchItemsCommonAreasException',
            'no_high_touch_items_guest_rooms': 'noHighTouchItemsGuestRooms',
            'no_high_touch_items_guest_rooms_exception': 'noHighTouchItemsGuestRoomsException',
            'plastic_keycards_disinfected': 'plasticKeycardsDisinfected',
            'plastic_keycards_disinfected_exception': 'plasticKeycardsDisinfectedException',
            'room_bookings_buffer': 'roomBookingsBuffer',
            'room_bookings_buffer_exception': 'roomBookingsBufferException'
        }

        self._contactless_checkin_checkout = contactless_checkin_checkout
        self._contactless_checkin_checkout_exception = contactless_checkin_checkout_exception
        self._digital_guest_room_keys = digital_guest_room_keys
        self._digital_guest_room_keys_exception = digital_guest_room_keys_exception
        self._housekeeping_scheduled_request_only = housekeeping_scheduled_request_only
        self._housekeeping_scheduled_request_only_exception = housekeeping_scheduled_request_only_exception
        self._no_high_touch_items_common_areas = no_high_touch_items_common_areas
        self._no_high_touch_items_common_areas_exception = no_high_touch_items_common_areas_exception
        self._no_high_touch_items_guest_rooms = no_high_touch_items_guest_rooms
        self._no_high_touch_items_guest_rooms_exception = no_high_touch_items_guest_rooms_exception
        self._plastic_keycards_disinfected = plastic_keycards_disinfected
        self._plastic_keycards_disinfected_exception = plastic_keycards_disinfected_exception
        self._room_bookings_buffer = room_bookings_buffer
        self._room_bookings_buffer_exception = room_bookings_buffer_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MinimizedContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MinimizedContact of this MinimizedContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contactless_checkin_checkout(self):
        """Gets the contactless_checkin_checkout of this MinimizedContact.

        No-contact check-in and check-out.

        :return: The contactless_checkin_checkout of this MinimizedContact.
        :rtype: bool
        """
        return self._contactless_checkin_checkout

    @contactless_checkin_checkout.setter
    def contactless_checkin_checkout(self, contactless_checkin_checkout):
        """Sets the contactless_checkin_checkout of this MinimizedContact.

        No-contact check-in and check-out.

        :param contactless_checkin_checkout: The contactless_checkin_checkout of this MinimizedContact.
        :type contactless_checkin_checkout: bool
        """

        self._contactless_checkin_checkout = contactless_checkin_checkout

    @property
    def contactless_checkin_checkout_exception(self):
        """Gets the contactless_checkin_checkout_exception of this MinimizedContact.

        Contactless check-in check-out exception.

        :return: The contactless_checkin_checkout_exception of this MinimizedContact.
        :rtype: str
        """
        return self._contactless_checkin_checkout_exception

    @contactless_checkin_checkout_exception.setter
    def contactless_checkin_checkout_exception(self, contactless_checkin_checkout_exception):
        """Sets the contactless_checkin_checkout_exception of this MinimizedContact.

        Contactless check-in check-out exception.

        :param contactless_checkin_checkout_exception: The contactless_checkin_checkout_exception of this MinimizedContact.
        :type contactless_checkin_checkout_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if contactless_checkin_checkout_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `contactless_checkin_checkout_exception` ({0}), must be one of {1}"
                .format(contactless_checkin_checkout_exception, allowed_values)
            )

        self._contactless_checkin_checkout_exception = contactless_checkin_checkout_exception

    @property
    def digital_guest_room_keys(self):
        """Gets the digital_guest_room_keys of this MinimizedContact.

        Keyless mobile entry to guest rooms.

        :return: The digital_guest_room_keys of this MinimizedContact.
        :rtype: bool
        """
        return self._digital_guest_room_keys

    @digital_guest_room_keys.setter
    def digital_guest_room_keys(self, digital_guest_room_keys):
        """Sets the digital_guest_room_keys of this MinimizedContact.

        Keyless mobile entry to guest rooms.

        :param digital_guest_room_keys: The digital_guest_room_keys of this MinimizedContact.
        :type digital_guest_room_keys: bool
        """

        self._digital_guest_room_keys = digital_guest_room_keys

    @property
    def digital_guest_room_keys_exception(self):
        """Gets the digital_guest_room_keys_exception of this MinimizedContact.

        Digital guest room keys exception.

        :return: The digital_guest_room_keys_exception of this MinimizedContact.
        :rtype: str
        """
        return self._digital_guest_room_keys_exception

    @digital_guest_room_keys_exception.setter
    def digital_guest_room_keys_exception(self, digital_guest_room_keys_exception):
        """Sets the digital_guest_room_keys_exception of this MinimizedContact.

        Digital guest room keys exception.

        :param digital_guest_room_keys_exception: The digital_guest_room_keys_exception of this MinimizedContact.
        :type digital_guest_room_keys_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if digital_guest_room_keys_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `digital_guest_room_keys_exception` ({0}), must be one of {1}"
                .format(digital_guest_room_keys_exception, allowed_values)
            )

        self._digital_guest_room_keys_exception = digital_guest_room_keys_exception

    @property
    def housekeeping_scheduled_request_only(self):
        """Gets the housekeeping_scheduled_request_only of this MinimizedContact.

        Housekeeping scheduled by request only.

        :return: The housekeeping_scheduled_request_only of this MinimizedContact.
        :rtype: bool
        """
        return self._housekeeping_scheduled_request_only

    @housekeeping_scheduled_request_only.setter
    def housekeeping_scheduled_request_only(self, housekeeping_scheduled_request_only):
        """Sets the housekeeping_scheduled_request_only of this MinimizedContact.

        Housekeeping scheduled by request only.

        :param housekeeping_scheduled_request_only: The housekeeping_scheduled_request_only of this MinimizedContact.
        :type housekeeping_scheduled_request_only: bool
        """

        self._housekeeping_scheduled_request_only = housekeeping_scheduled_request_only

    @property
    def housekeeping_scheduled_request_only_exception(self):
        """Gets the housekeeping_scheduled_request_only_exception of this MinimizedContact.

        Housekeeping scheduled request only exception.

        :return: The housekeeping_scheduled_request_only_exception of this MinimizedContact.
        :rtype: str
        """
        return self._housekeeping_scheduled_request_only_exception

    @housekeeping_scheduled_request_only_exception.setter
    def housekeeping_scheduled_request_only_exception(self, housekeeping_scheduled_request_only_exception):
        """Sets the housekeeping_scheduled_request_only_exception of this MinimizedContact.

        Housekeeping scheduled request only exception.

        :param housekeeping_scheduled_request_only_exception: The housekeeping_scheduled_request_only_exception of this MinimizedContact.
        :type housekeeping_scheduled_request_only_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if housekeeping_scheduled_request_only_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `housekeeping_scheduled_request_only_exception` ({0}), must be one of {1}"
                .format(housekeeping_scheduled_request_only_exception, allowed_values)
            )

        self._housekeeping_scheduled_request_only_exception = housekeeping_scheduled_request_only_exception

    @property
    def no_high_touch_items_common_areas(self):
        """Gets the no_high_touch_items_common_areas of this MinimizedContact.

        High-touch items, such as magazines, removed from common areas.

        :return: The no_high_touch_items_common_areas of this MinimizedContact.
        :rtype: bool
        """
        return self._no_high_touch_items_common_areas

    @no_high_touch_items_common_areas.setter
    def no_high_touch_items_common_areas(self, no_high_touch_items_common_areas):
        """Sets the no_high_touch_items_common_areas of this MinimizedContact.

        High-touch items, such as magazines, removed from common areas.

        :param no_high_touch_items_common_areas: The no_high_touch_items_common_areas of this MinimizedContact.
        :type no_high_touch_items_common_areas: bool
        """

        self._no_high_touch_items_common_areas = no_high_touch_items_common_areas

    @property
    def no_high_touch_items_common_areas_exception(self):
        """Gets the no_high_touch_items_common_areas_exception of this MinimizedContact.

        No high touch items common areas exception.

        :return: The no_high_touch_items_common_areas_exception of this MinimizedContact.
        :rtype: str
        """
        return self._no_high_touch_items_common_areas_exception

    @no_high_touch_items_common_areas_exception.setter
    def no_high_touch_items_common_areas_exception(self, no_high_touch_items_common_areas_exception):
        """Sets the no_high_touch_items_common_areas_exception of this MinimizedContact.

        No high touch items common areas exception.

        :param no_high_touch_items_common_areas_exception: The no_high_touch_items_common_areas_exception of this MinimizedContact.
        :type no_high_touch_items_common_areas_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if no_high_touch_items_common_areas_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `no_high_touch_items_common_areas_exception` ({0}), must be one of {1}"
                .format(no_high_touch_items_common_areas_exception, allowed_values)
            )

        self._no_high_touch_items_common_areas_exception = no_high_touch_items_common_areas_exception

    @property
    def no_high_touch_items_guest_rooms(self):
        """Gets the no_high_touch_items_guest_rooms of this MinimizedContact.

        High-touch items, such as decorative pillows, removed from guest rooms.

        :return: The no_high_touch_items_guest_rooms of this MinimizedContact.
        :rtype: bool
        """
        return self._no_high_touch_items_guest_rooms

    @no_high_touch_items_guest_rooms.setter
    def no_high_touch_items_guest_rooms(self, no_high_touch_items_guest_rooms):
        """Sets the no_high_touch_items_guest_rooms of this MinimizedContact.

        High-touch items, such as decorative pillows, removed from guest rooms.

        :param no_high_touch_items_guest_rooms: The no_high_touch_items_guest_rooms of this MinimizedContact.
        :type no_high_touch_items_guest_rooms: bool
        """

        self._no_high_touch_items_guest_rooms = no_high_touch_items_guest_rooms

    @property
    def no_high_touch_items_guest_rooms_exception(self):
        """Gets the no_high_touch_items_guest_rooms_exception of this MinimizedContact.

        No high touch items guest rooms exception.

        :return: The no_high_touch_items_guest_rooms_exception of this MinimizedContact.
        :rtype: str
        """
        return self._no_high_touch_items_guest_rooms_exception

    @no_high_touch_items_guest_rooms_exception.setter
    def no_high_touch_items_guest_rooms_exception(self, no_high_touch_items_guest_rooms_exception):
        """Sets the no_high_touch_items_guest_rooms_exception of this MinimizedContact.

        No high touch items guest rooms exception.

        :param no_high_touch_items_guest_rooms_exception: The no_high_touch_items_guest_rooms_exception of this MinimizedContact.
        :type no_high_touch_items_guest_rooms_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if no_high_touch_items_guest_rooms_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `no_high_touch_items_guest_rooms_exception` ({0}), must be one of {1}"
                .format(no_high_touch_items_guest_rooms_exception, allowed_values)
            )

        self._no_high_touch_items_guest_rooms_exception = no_high_touch_items_guest_rooms_exception

    @property
    def plastic_keycards_disinfected(self):
        """Gets the plastic_keycards_disinfected of this MinimizedContact.

        Plastic key cards are disinfected or discarded.

        :return: The plastic_keycards_disinfected of this MinimizedContact.
        :rtype: bool
        """
        return self._plastic_keycards_disinfected

    @plastic_keycards_disinfected.setter
    def plastic_keycards_disinfected(self, plastic_keycards_disinfected):
        """Sets the plastic_keycards_disinfected of this MinimizedContact.

        Plastic key cards are disinfected or discarded.

        :param plastic_keycards_disinfected: The plastic_keycards_disinfected of this MinimizedContact.
        :type plastic_keycards_disinfected: bool
        """

        self._plastic_keycards_disinfected = plastic_keycards_disinfected

    @property
    def plastic_keycards_disinfected_exception(self):
        """Gets the plastic_keycards_disinfected_exception of this MinimizedContact.

        Plastic keycards disinfected exception.

        :return: The plastic_keycards_disinfected_exception of this MinimizedContact.
        :rtype: str
        """
        return self._plastic_keycards_disinfected_exception

    @plastic_keycards_disinfected_exception.setter
    def plastic_keycards_disinfected_exception(self, plastic_keycards_disinfected_exception):
        """Sets the plastic_keycards_disinfected_exception of this MinimizedContact.

        Plastic keycards disinfected exception.

        :param plastic_keycards_disinfected_exception: The plastic_keycards_disinfected_exception of this MinimizedContact.
        :type plastic_keycards_disinfected_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if plastic_keycards_disinfected_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `plastic_keycards_disinfected_exception` ({0}), must be one of {1}"
                .format(plastic_keycards_disinfected_exception, allowed_values)
            )

        self._plastic_keycards_disinfected_exception = plastic_keycards_disinfected_exception

    @property
    def room_bookings_buffer(self):
        """Gets the room_bookings_buffer of this MinimizedContact.

        Buffer maintained between room bookings.

        :return: The room_bookings_buffer of this MinimizedContact.
        :rtype: bool
        """
        return self._room_bookings_buffer

    @room_bookings_buffer.setter
    def room_bookings_buffer(self, room_bookings_buffer):
        """Sets the room_bookings_buffer of this MinimizedContact.

        Buffer maintained between room bookings.

        :param room_bookings_buffer: The room_bookings_buffer of this MinimizedContact.
        :type room_bookings_buffer: bool
        """

        self._room_bookings_buffer = room_bookings_buffer

    @property
    def room_bookings_buffer_exception(self):
        """Gets the room_bookings_buffer_exception of this MinimizedContact.

        Room bookings buffer exception.

        :return: The room_bookings_buffer_exception of this MinimizedContact.
        :rtype: str
        """
        return self._room_bookings_buffer_exception

    @room_bookings_buffer_exception.setter
    def room_bookings_buffer_exception(self, room_bookings_buffer_exception):
        """Sets the room_bookings_buffer_exception of this MinimizedContact.

        Room bookings buffer exception.

        :param room_bookings_buffer_exception: The room_bookings_buffer_exception of this MinimizedContact.
        :type room_bookings_buffer_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if room_bookings_buffer_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `room_bookings_buffer_exception` ({0}), must be one of {1}"
                .format(room_bookings_buffer_exception, allowed_values)
            )

        self._room_bookings_buffer_exception = room_bookings_buffer_exception
