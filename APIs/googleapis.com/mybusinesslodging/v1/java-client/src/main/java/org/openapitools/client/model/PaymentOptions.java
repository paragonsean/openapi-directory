/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Forms of payment accepted at the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentOptions {
  public static final String SERIALIZED_NAME_CASH = "cash";
  @SerializedName(SERIALIZED_NAME_CASH)
  private Boolean cash;

  /**
   * Cash exception.
   */
  @JsonAdapter(CashExceptionEnum.Adapter.class)
  public enum CashExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CashExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CashExceptionEnum fromValue(String value) {
      for (CashExceptionEnum b : CashExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CashExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CashExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CashExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CashExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CashExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CASH_EXCEPTION = "cashException";
  @SerializedName(SERIALIZED_NAME_CASH_EXCEPTION)
  private CashExceptionEnum cashException;

  public static final String SERIALIZED_NAME_CHEQUE = "cheque";
  @SerializedName(SERIALIZED_NAME_CHEQUE)
  private Boolean cheque;

  /**
   * Cheque exception.
   */
  @JsonAdapter(ChequeExceptionEnum.Adapter.class)
  public enum ChequeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ChequeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChequeExceptionEnum fromValue(String value) {
      for (ChequeExceptionEnum b : ChequeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChequeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChequeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChequeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChequeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChequeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHEQUE_EXCEPTION = "chequeException";
  @SerializedName(SERIALIZED_NAME_CHEQUE_EXCEPTION)
  private ChequeExceptionEnum chequeException;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "creditCard";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private Boolean creditCard;

  /**
   * Credit card exception.
   */
  @JsonAdapter(CreditCardExceptionEnum.Adapter.class)
  public enum CreditCardExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CreditCardExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditCardExceptionEnum fromValue(String value) {
      for (CreditCardExceptionEnum b : CreditCardExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreditCardExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditCardExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditCardExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreditCardExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreditCardExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREDIT_CARD_EXCEPTION = "creditCardException";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_EXCEPTION)
  private CreditCardExceptionEnum creditCardException;

  public static final String SERIALIZED_NAME_DEBIT_CARD = "debitCard";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD)
  private Boolean debitCard;

  /**
   * Debit card exception.
   */
  @JsonAdapter(DebitCardExceptionEnum.Adapter.class)
  public enum DebitCardExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DebitCardExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DebitCardExceptionEnum fromValue(String value) {
      for (DebitCardExceptionEnum b : DebitCardExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DebitCardExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DebitCardExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DebitCardExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DebitCardExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DebitCardExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEBIT_CARD_EXCEPTION = "debitCardException";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD_EXCEPTION)
  private DebitCardExceptionEnum debitCardException;

  public static final String SERIALIZED_NAME_MOBILE_NFC = "mobileNfc";
  @SerializedName(SERIALIZED_NAME_MOBILE_NFC)
  private Boolean mobileNfc;

  /**
   * Mobile nfc exception.
   */
  @JsonAdapter(MobileNfcExceptionEnum.Adapter.class)
  public enum MobileNfcExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MobileNfcExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobileNfcExceptionEnum fromValue(String value) {
      for (MobileNfcExceptionEnum b : MobileNfcExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobileNfcExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobileNfcExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobileNfcExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobileNfcExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MobileNfcExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOBILE_NFC_EXCEPTION = "mobileNfcException";
  @SerializedName(SERIALIZED_NAME_MOBILE_NFC_EXCEPTION)
  private MobileNfcExceptionEnum mobileNfcException;

  public PaymentOptions() {
  }

  public PaymentOptions cash(Boolean cash) {
    this.cash = cash;
    return this;
  }

  /**
   * Cash. The hotel accepts payment by paper/coin currency.
   * @return cash
   */
  @javax.annotation.Nullable
  public Boolean getCash() {
    return cash;
  }

  public void setCash(Boolean cash) {
    this.cash = cash;
  }


  public PaymentOptions cashException(CashExceptionEnum cashException) {
    this.cashException = cashException;
    return this;
  }

  /**
   * Cash exception.
   * @return cashException
   */
  @javax.annotation.Nullable
  public CashExceptionEnum getCashException() {
    return cashException;
  }

  public void setCashException(CashExceptionEnum cashException) {
    this.cashException = cashException;
  }


  public PaymentOptions cheque(Boolean cheque) {
    this.cheque = cheque;
    return this;
  }

  /**
   * Cheque. The hotel accepts a printed document issued by the guest&#39;s bank in the guest&#39;s name as a form of payment.
   * @return cheque
   */
  @javax.annotation.Nullable
  public Boolean getCheque() {
    return cheque;
  }

  public void setCheque(Boolean cheque) {
    this.cheque = cheque;
  }


  public PaymentOptions chequeException(ChequeExceptionEnum chequeException) {
    this.chequeException = chequeException;
    return this;
  }

  /**
   * Cheque exception.
   * @return chequeException
   */
  @javax.annotation.Nullable
  public ChequeExceptionEnum getChequeException() {
    return chequeException;
  }

  public void setChequeException(ChequeExceptionEnum chequeException) {
    this.chequeException = chequeException;
  }


  public PaymentOptions creditCard(Boolean creditCard) {
    this.creditCard = creditCard;
    return this;
  }

  /**
   * Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.
   * @return creditCard
   */
  @javax.annotation.Nullable
  public Boolean getCreditCard() {
    return creditCard;
  }

  public void setCreditCard(Boolean creditCard) {
    this.creditCard = creditCard;
  }


  public PaymentOptions creditCardException(CreditCardExceptionEnum creditCardException) {
    this.creditCardException = creditCardException;
    return this;
  }

  /**
   * Credit card exception.
   * @return creditCardException
   */
  @javax.annotation.Nullable
  public CreditCardExceptionEnum getCreditCardException() {
    return creditCardException;
  }

  public void setCreditCardException(CreditCardExceptionEnum creditCardException) {
    this.creditCardException = creditCardException;
  }


  public PaymentOptions debitCard(Boolean debitCard) {
    this.debitCard = debitCard;
    return this;
  }

  /**
   * Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest&#39;s bank account upon processing.
   * @return debitCard
   */
  @javax.annotation.Nullable
  public Boolean getDebitCard() {
    return debitCard;
  }

  public void setDebitCard(Boolean debitCard) {
    this.debitCard = debitCard;
  }


  public PaymentOptions debitCardException(DebitCardExceptionEnum debitCardException) {
    this.debitCardException = debitCardException;
    return this;
  }

  /**
   * Debit card exception.
   * @return debitCardException
   */
  @javax.annotation.Nullable
  public DebitCardExceptionEnum getDebitCardException() {
    return debitCardException;
  }

  public void setDebitCardException(DebitCardExceptionEnum debitCardException) {
    this.debitCardException = debitCardException;
  }


  public PaymentOptions mobileNfc(Boolean mobileNfc) {
    this.mobileNfc = mobileNfc;
    return this;
  }

  /**
   * Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest&#39;s smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.
   * @return mobileNfc
   */
  @javax.annotation.Nullable
  public Boolean getMobileNfc() {
    return mobileNfc;
  }

  public void setMobileNfc(Boolean mobileNfc) {
    this.mobileNfc = mobileNfc;
  }


  public PaymentOptions mobileNfcException(MobileNfcExceptionEnum mobileNfcException) {
    this.mobileNfcException = mobileNfcException;
    return this;
  }

  /**
   * Mobile nfc exception.
   * @return mobileNfcException
   */
  @javax.annotation.Nullable
  public MobileNfcExceptionEnum getMobileNfcException() {
    return mobileNfcException;
  }

  public void setMobileNfcException(MobileNfcExceptionEnum mobileNfcException) {
    this.mobileNfcException = mobileNfcException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentOptions paymentOptions = (PaymentOptions) o;
    return Objects.equals(this.cash, paymentOptions.cash) &&
        Objects.equals(this.cashException, paymentOptions.cashException) &&
        Objects.equals(this.cheque, paymentOptions.cheque) &&
        Objects.equals(this.chequeException, paymentOptions.chequeException) &&
        Objects.equals(this.creditCard, paymentOptions.creditCard) &&
        Objects.equals(this.creditCardException, paymentOptions.creditCardException) &&
        Objects.equals(this.debitCard, paymentOptions.debitCard) &&
        Objects.equals(this.debitCardException, paymentOptions.debitCardException) &&
        Objects.equals(this.mobileNfc, paymentOptions.mobileNfc) &&
        Objects.equals(this.mobileNfcException, paymentOptions.mobileNfcException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cash, cashException, cheque, chequeException, creditCard, creditCardException, debitCard, debitCardException, mobileNfc, mobileNfcException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentOptions {\n");
    sb.append("    cash: ").append(toIndentedString(cash)).append("\n");
    sb.append("    cashException: ").append(toIndentedString(cashException)).append("\n");
    sb.append("    cheque: ").append(toIndentedString(cheque)).append("\n");
    sb.append("    chequeException: ").append(toIndentedString(chequeException)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    creditCardException: ").append(toIndentedString(creditCardException)).append("\n");
    sb.append("    debitCard: ").append(toIndentedString(debitCard)).append("\n");
    sb.append("    debitCardException: ").append(toIndentedString(debitCardException)).append("\n");
    sb.append("    mobileNfc: ").append(toIndentedString(mobileNfc)).append("\n");
    sb.append("    mobileNfcException: ").append(toIndentedString(mobileNfcException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cash");
    openapiFields.add("cashException");
    openapiFields.add("cheque");
    openapiFields.add("chequeException");
    openapiFields.add("creditCard");
    openapiFields.add("creditCardException");
    openapiFields.add("debitCard");
    openapiFields.add("debitCardException");
    openapiFields.add("mobileNfc");
    openapiFields.add("mobileNfcException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentOptions is not found in the empty JSON string", PaymentOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cashException") != null && !jsonObj.get("cashException").isJsonNull()) && !jsonObj.get("cashException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashException").toString()));
      }
      // validate the optional field `cashException`
      if (jsonObj.get("cashException") != null && !jsonObj.get("cashException").isJsonNull()) {
        CashExceptionEnum.validateJsonElement(jsonObj.get("cashException"));
      }
      if ((jsonObj.get("chequeException") != null && !jsonObj.get("chequeException").isJsonNull()) && !jsonObj.get("chequeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chequeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chequeException").toString()));
      }
      // validate the optional field `chequeException`
      if (jsonObj.get("chequeException") != null && !jsonObj.get("chequeException").isJsonNull()) {
        ChequeExceptionEnum.validateJsonElement(jsonObj.get("chequeException"));
      }
      if ((jsonObj.get("creditCardException") != null && !jsonObj.get("creditCardException").isJsonNull()) && !jsonObj.get("creditCardException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditCardException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditCardException").toString()));
      }
      // validate the optional field `creditCardException`
      if (jsonObj.get("creditCardException") != null && !jsonObj.get("creditCardException").isJsonNull()) {
        CreditCardExceptionEnum.validateJsonElement(jsonObj.get("creditCardException"));
      }
      if ((jsonObj.get("debitCardException") != null && !jsonObj.get("debitCardException").isJsonNull()) && !jsonObj.get("debitCardException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitCardException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitCardException").toString()));
      }
      // validate the optional field `debitCardException`
      if (jsonObj.get("debitCardException") != null && !jsonObj.get("debitCardException").isJsonNull()) {
        DebitCardExceptionEnum.validateJsonElement(jsonObj.get("debitCardException"));
      }
      if ((jsonObj.get("mobileNfcException") != null && !jsonObj.get("mobileNfcException").isJsonNull()) && !jsonObj.get("mobileNfcException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileNfcException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileNfcException").toString()));
      }
      // validate the optional field `mobileNfcException`
      if (jsonObj.get("mobileNfcException") != null && !jsonObj.get("mobileNfcException").isJsonNull()) {
        MobileNfcExceptionEnum.validateJsonElement(jsonObj.get("mobileNfcException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentOptions>() {
           @Override
           public void write(JsonWriter out, PaymentOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentOptions
   * @throws IOException if the JSON string is invalid with respect to PaymentOptions
   */
  public static PaymentOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentOptions.class);
  }

  /**
   * Convert an instance of PaymentOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

