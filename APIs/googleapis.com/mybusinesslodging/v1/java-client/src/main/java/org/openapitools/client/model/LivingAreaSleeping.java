/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about sleeping features in the living area.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingAreaSleeping {
  public static final String SERIALIZED_NAME_BEDS_COUNT = "bedsCount";
  @SerializedName(SERIALIZED_NAME_BEDS_COUNT)
  private Integer bedsCount;

  /**
   * Beds count exception.
   */
  @JsonAdapter(BedsCountExceptionEnum.Adapter.class)
  public enum BedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BedsCountExceptionEnum fromValue(String value) {
      for (BedsCountExceptionEnum b : BedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEDS_COUNT_EXCEPTION = "bedsCountException";
  @SerializedName(SERIALIZED_NAME_BEDS_COUNT_EXCEPTION)
  private BedsCountExceptionEnum bedsCountException;

  public static final String SERIALIZED_NAME_BUNK_BEDS_COUNT = "bunkBedsCount";
  @SerializedName(SERIALIZED_NAME_BUNK_BEDS_COUNT)
  private Integer bunkBedsCount;

  /**
   * Bunk beds count exception.
   */
  @JsonAdapter(BunkBedsCountExceptionEnum.Adapter.class)
  public enum BunkBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BunkBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BunkBedsCountExceptionEnum fromValue(String value) {
      for (BunkBedsCountExceptionEnum b : BunkBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BunkBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BunkBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BunkBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BunkBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BunkBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNK_BEDS_COUNT_EXCEPTION = "bunkBedsCountException";
  @SerializedName(SERIALIZED_NAME_BUNK_BEDS_COUNT_EXCEPTION)
  private BunkBedsCountExceptionEnum bunkBedsCountException;

  public static final String SERIALIZED_NAME_CRIBS_COUNT = "cribsCount";
  @SerializedName(SERIALIZED_NAME_CRIBS_COUNT)
  private Integer cribsCount;

  /**
   * Cribs count exception.
   */
  @JsonAdapter(CribsCountExceptionEnum.Adapter.class)
  public enum CribsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CribsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CribsCountExceptionEnum fromValue(String value) {
      for (CribsCountExceptionEnum b : CribsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CribsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CribsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CribsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CribsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CribsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRIBS_COUNT_EXCEPTION = "cribsCountException";
  @SerializedName(SERIALIZED_NAME_CRIBS_COUNT_EXCEPTION)
  private CribsCountExceptionEnum cribsCountException;

  public static final String SERIALIZED_NAME_DOUBLE_BEDS_COUNT = "doubleBedsCount";
  @SerializedName(SERIALIZED_NAME_DOUBLE_BEDS_COUNT)
  private Integer doubleBedsCount;

  /**
   * Double beds count exception.
   */
  @JsonAdapter(DoubleBedsCountExceptionEnum.Adapter.class)
  public enum DoubleBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DoubleBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DoubleBedsCountExceptionEnum fromValue(String value) {
      for (DoubleBedsCountExceptionEnum b : DoubleBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DoubleBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DoubleBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DoubleBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DoubleBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DoubleBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOUBLE_BEDS_COUNT_EXCEPTION = "doubleBedsCountException";
  @SerializedName(SERIALIZED_NAME_DOUBLE_BEDS_COUNT_EXCEPTION)
  private DoubleBedsCountExceptionEnum doubleBedsCountException;

  public static final String SERIALIZED_NAME_FEATHER_PILLOWS = "featherPillows";
  @SerializedName(SERIALIZED_NAME_FEATHER_PILLOWS)
  private Boolean featherPillows;

  /**
   * Feather pillows exception.
   */
  @JsonAdapter(FeatherPillowsExceptionEnum.Adapter.class)
  public enum FeatherPillowsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FeatherPillowsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatherPillowsExceptionEnum fromValue(String value) {
      for (FeatherPillowsExceptionEnum b : FeatherPillowsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeatherPillowsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatherPillowsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatherPillowsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeatherPillowsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeatherPillowsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATHER_PILLOWS_EXCEPTION = "featherPillowsException";
  @SerializedName(SERIALIZED_NAME_FEATHER_PILLOWS_EXCEPTION)
  private FeatherPillowsExceptionEnum featherPillowsException;

  public static final String SERIALIZED_NAME_HYPOALLERGENIC_BEDDING = "hypoallergenicBedding";
  @SerializedName(SERIALIZED_NAME_HYPOALLERGENIC_BEDDING)
  private Boolean hypoallergenicBedding;

  /**
   * Hypoallergenic bedding exception.
   */
  @JsonAdapter(HypoallergenicBeddingExceptionEnum.Adapter.class)
  public enum HypoallergenicBeddingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HypoallergenicBeddingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HypoallergenicBeddingExceptionEnum fromValue(String value) {
      for (HypoallergenicBeddingExceptionEnum b : HypoallergenicBeddingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HypoallergenicBeddingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HypoallergenicBeddingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HypoallergenicBeddingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HypoallergenicBeddingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HypoallergenicBeddingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HYPOALLERGENIC_BEDDING_EXCEPTION = "hypoallergenicBeddingException";
  @SerializedName(SERIALIZED_NAME_HYPOALLERGENIC_BEDDING_EXCEPTION)
  private HypoallergenicBeddingExceptionEnum hypoallergenicBeddingException;

  public static final String SERIALIZED_NAME_KING_BEDS_COUNT = "kingBedsCount";
  @SerializedName(SERIALIZED_NAME_KING_BEDS_COUNT)
  private Integer kingBedsCount;

  /**
   * King beds count exception.
   */
  @JsonAdapter(KingBedsCountExceptionEnum.Adapter.class)
  public enum KingBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KingBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KingBedsCountExceptionEnum fromValue(String value) {
      for (KingBedsCountExceptionEnum b : KingBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KingBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KingBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KingBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KingBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KingBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KING_BEDS_COUNT_EXCEPTION = "kingBedsCountException";
  @SerializedName(SERIALIZED_NAME_KING_BEDS_COUNT_EXCEPTION)
  private KingBedsCountExceptionEnum kingBedsCountException;

  public static final String SERIALIZED_NAME_MEMORY_FOAM_PILLOWS = "memoryFoamPillows";
  @SerializedName(SERIALIZED_NAME_MEMORY_FOAM_PILLOWS)
  private Boolean memoryFoamPillows;

  /**
   * Memory foam pillows exception.
   */
  @JsonAdapter(MemoryFoamPillowsExceptionEnum.Adapter.class)
  public enum MemoryFoamPillowsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MemoryFoamPillowsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemoryFoamPillowsExceptionEnum fromValue(String value) {
      for (MemoryFoamPillowsExceptionEnum b : MemoryFoamPillowsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemoryFoamPillowsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemoryFoamPillowsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemoryFoamPillowsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemoryFoamPillowsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MemoryFoamPillowsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMORY_FOAM_PILLOWS_EXCEPTION = "memoryFoamPillowsException";
  @SerializedName(SERIALIZED_NAME_MEMORY_FOAM_PILLOWS_EXCEPTION)
  private MemoryFoamPillowsExceptionEnum memoryFoamPillowsException;

  public static final String SERIALIZED_NAME_OTHER_BEDS_COUNT = "otherBedsCount";
  @SerializedName(SERIALIZED_NAME_OTHER_BEDS_COUNT)
  private Integer otherBedsCount;

  /**
   * Other beds count exception.
   */
  @JsonAdapter(OtherBedsCountExceptionEnum.Adapter.class)
  public enum OtherBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OtherBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherBedsCountExceptionEnum fromValue(String value) {
      for (OtherBedsCountExceptionEnum b : OtherBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtherBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtherBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OtherBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OTHER_BEDS_COUNT_EXCEPTION = "otherBedsCountException";
  @SerializedName(SERIALIZED_NAME_OTHER_BEDS_COUNT_EXCEPTION)
  private OtherBedsCountExceptionEnum otherBedsCountException;

  public static final String SERIALIZED_NAME_QUEEN_BEDS_COUNT = "queenBedsCount";
  @SerializedName(SERIALIZED_NAME_QUEEN_BEDS_COUNT)
  private Integer queenBedsCount;

  /**
   * Queen beds count exception.
   */
  @JsonAdapter(QueenBedsCountExceptionEnum.Adapter.class)
  public enum QueenBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    QueenBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueenBedsCountExceptionEnum fromValue(String value) {
      for (QueenBedsCountExceptionEnum b : QueenBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueenBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueenBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueenBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueenBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueenBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUEEN_BEDS_COUNT_EXCEPTION = "queenBedsCountException";
  @SerializedName(SERIALIZED_NAME_QUEEN_BEDS_COUNT_EXCEPTION)
  private QueenBedsCountExceptionEnum queenBedsCountException;

  public static final String SERIALIZED_NAME_ROLL_AWAY_BEDS_COUNT = "rollAwayBedsCount";
  @SerializedName(SERIALIZED_NAME_ROLL_AWAY_BEDS_COUNT)
  private Integer rollAwayBedsCount;

  /**
   * Roll away beds count exception.
   */
  @JsonAdapter(RollAwayBedsCountExceptionEnum.Adapter.class)
  public enum RollAwayBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RollAwayBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RollAwayBedsCountExceptionEnum fromValue(String value) {
      for (RollAwayBedsCountExceptionEnum b : RollAwayBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RollAwayBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RollAwayBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RollAwayBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RollAwayBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RollAwayBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLL_AWAY_BEDS_COUNT_EXCEPTION = "rollAwayBedsCountException";
  @SerializedName(SERIALIZED_NAME_ROLL_AWAY_BEDS_COUNT_EXCEPTION)
  private RollAwayBedsCountExceptionEnum rollAwayBedsCountException;

  public static final String SERIALIZED_NAME_SINGLE_OR_TWIN_BEDS_COUNT = "singleOrTwinBedsCount";
  @SerializedName(SERIALIZED_NAME_SINGLE_OR_TWIN_BEDS_COUNT)
  private Integer singleOrTwinBedsCount;

  /**
   * Single or twin beds count exception.
   */
  @JsonAdapter(SingleOrTwinBedsCountExceptionEnum.Adapter.class)
  public enum SingleOrTwinBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SingleOrTwinBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SingleOrTwinBedsCountExceptionEnum fromValue(String value) {
      for (SingleOrTwinBedsCountExceptionEnum b : SingleOrTwinBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SingleOrTwinBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SingleOrTwinBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SingleOrTwinBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SingleOrTwinBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SingleOrTwinBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SINGLE_OR_TWIN_BEDS_COUNT_EXCEPTION = "singleOrTwinBedsCountException";
  @SerializedName(SERIALIZED_NAME_SINGLE_OR_TWIN_BEDS_COUNT_EXCEPTION)
  private SingleOrTwinBedsCountExceptionEnum singleOrTwinBedsCountException;

  public static final String SERIALIZED_NAME_SOFA_BEDS_COUNT = "sofaBedsCount";
  @SerializedName(SERIALIZED_NAME_SOFA_BEDS_COUNT)
  private Integer sofaBedsCount;

  /**
   * Sofa beds count exception.
   */
  @JsonAdapter(SofaBedsCountExceptionEnum.Adapter.class)
  public enum SofaBedsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SofaBedsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SofaBedsCountExceptionEnum fromValue(String value) {
      for (SofaBedsCountExceptionEnum b : SofaBedsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SofaBedsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SofaBedsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SofaBedsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SofaBedsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SofaBedsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOFA_BEDS_COUNT_EXCEPTION = "sofaBedsCountException";
  @SerializedName(SERIALIZED_NAME_SOFA_BEDS_COUNT_EXCEPTION)
  private SofaBedsCountExceptionEnum sofaBedsCountException;

  public static final String SERIALIZED_NAME_SYNTHETIC_PILLOWS = "syntheticPillows";
  @SerializedName(SERIALIZED_NAME_SYNTHETIC_PILLOWS)
  private Boolean syntheticPillows;

  /**
   * Synthetic pillows exception.
   */
  @JsonAdapter(SyntheticPillowsExceptionEnum.Adapter.class)
  public enum SyntheticPillowsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SyntheticPillowsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyntheticPillowsExceptionEnum fromValue(String value) {
      for (SyntheticPillowsExceptionEnum b : SyntheticPillowsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyntheticPillowsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyntheticPillowsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyntheticPillowsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyntheticPillowsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyntheticPillowsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNTHETIC_PILLOWS_EXCEPTION = "syntheticPillowsException";
  @SerializedName(SERIALIZED_NAME_SYNTHETIC_PILLOWS_EXCEPTION)
  private SyntheticPillowsExceptionEnum syntheticPillowsException;

  public LivingAreaSleeping() {
  }

  public LivingAreaSleeping bedsCount(Integer bedsCount) {
    this.bedsCount = bedsCount;
    return this;
  }

  /**
   * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
   * @return bedsCount
   */
  @javax.annotation.Nullable
  public Integer getBedsCount() {
    return bedsCount;
  }

  public void setBedsCount(Integer bedsCount) {
    this.bedsCount = bedsCount;
  }


  public LivingAreaSleeping bedsCountException(BedsCountExceptionEnum bedsCountException) {
    this.bedsCountException = bedsCountException;
    return this;
  }

  /**
   * Beds count exception.
   * @return bedsCountException
   */
  @javax.annotation.Nullable
  public BedsCountExceptionEnum getBedsCountException() {
    return bedsCountException;
  }

  public void setBedsCountException(BedsCountExceptionEnum bedsCountException) {
    this.bedsCountException = bedsCountException;
  }


  public LivingAreaSleeping bunkBedsCount(Integer bunkBedsCount) {
    this.bunkBedsCount = bunkBedsCount;
    return this;
  }

  /**
   * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
   * @return bunkBedsCount
   */
  @javax.annotation.Nullable
  public Integer getBunkBedsCount() {
    return bunkBedsCount;
  }

  public void setBunkBedsCount(Integer bunkBedsCount) {
    this.bunkBedsCount = bunkBedsCount;
  }


  public LivingAreaSleeping bunkBedsCountException(BunkBedsCountExceptionEnum bunkBedsCountException) {
    this.bunkBedsCountException = bunkBedsCountException;
    return this;
  }

  /**
   * Bunk beds count exception.
   * @return bunkBedsCountException
   */
  @javax.annotation.Nullable
  public BunkBedsCountExceptionEnum getBunkBedsCountException() {
    return bunkBedsCountException;
  }

  public void setBunkBedsCountException(BunkBedsCountExceptionEnum bunkBedsCountException) {
    this.bunkBedsCountException = bunkBedsCountException;
  }


  public LivingAreaSleeping cribsCount(Integer cribsCount) {
    this.cribsCount = cribsCount;
    return this;
  }

  /**
   * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
   * @return cribsCount
   */
  @javax.annotation.Nullable
  public Integer getCribsCount() {
    return cribsCount;
  }

  public void setCribsCount(Integer cribsCount) {
    this.cribsCount = cribsCount;
  }


  public LivingAreaSleeping cribsCountException(CribsCountExceptionEnum cribsCountException) {
    this.cribsCountException = cribsCountException;
    return this;
  }

  /**
   * Cribs count exception.
   * @return cribsCountException
   */
  @javax.annotation.Nullable
  public CribsCountExceptionEnum getCribsCountException() {
    return cribsCountException;
  }

  public void setCribsCountException(CribsCountExceptionEnum cribsCountException) {
    this.cribsCountException = cribsCountException;
  }


  public LivingAreaSleeping doubleBedsCount(Integer doubleBedsCount) {
    this.doubleBedsCount = doubleBedsCount;
    return this;
  }

  /**
   * Double beds count. The number of medium beds measuring 53\&quot;W x 75\&quot;L (135cm x 191cm). Also known as full size bed.
   * @return doubleBedsCount
   */
  @javax.annotation.Nullable
  public Integer getDoubleBedsCount() {
    return doubleBedsCount;
  }

  public void setDoubleBedsCount(Integer doubleBedsCount) {
    this.doubleBedsCount = doubleBedsCount;
  }


  public LivingAreaSleeping doubleBedsCountException(DoubleBedsCountExceptionEnum doubleBedsCountException) {
    this.doubleBedsCountException = doubleBedsCountException;
    return this;
  }

  /**
   * Double beds count exception.
   * @return doubleBedsCountException
   */
  @javax.annotation.Nullable
  public DoubleBedsCountExceptionEnum getDoubleBedsCountException() {
    return doubleBedsCountException;
  }

  public void setDoubleBedsCountException(DoubleBedsCountExceptionEnum doubleBedsCountException) {
    this.doubleBedsCountException = doubleBedsCountException;
  }


  public LivingAreaSleeping featherPillows(Boolean featherPillows) {
    this.featherPillows = featherPillows;
    return this;
  }

  /**
   * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
   * @return featherPillows
   */
  @javax.annotation.Nullable
  public Boolean getFeatherPillows() {
    return featherPillows;
  }

  public void setFeatherPillows(Boolean featherPillows) {
    this.featherPillows = featherPillows;
  }


  public LivingAreaSleeping featherPillowsException(FeatherPillowsExceptionEnum featherPillowsException) {
    this.featherPillowsException = featherPillowsException;
    return this;
  }

  /**
   * Feather pillows exception.
   * @return featherPillowsException
   */
  @javax.annotation.Nullable
  public FeatherPillowsExceptionEnum getFeatherPillowsException() {
    return featherPillowsException;
  }

  public void setFeatherPillowsException(FeatherPillowsExceptionEnum featherPillowsException) {
    this.featherPillowsException = featherPillowsException;
  }


  public LivingAreaSleeping hypoallergenicBedding(Boolean hypoallergenicBedding) {
    this.hypoallergenicBedding = hypoallergenicBedding;
    return this;
  }

  /**
   * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
   * @return hypoallergenicBedding
   */
  @javax.annotation.Nullable
  public Boolean getHypoallergenicBedding() {
    return hypoallergenicBedding;
  }

  public void setHypoallergenicBedding(Boolean hypoallergenicBedding) {
    this.hypoallergenicBedding = hypoallergenicBedding;
  }


  public LivingAreaSleeping hypoallergenicBeddingException(HypoallergenicBeddingExceptionEnum hypoallergenicBeddingException) {
    this.hypoallergenicBeddingException = hypoallergenicBeddingException;
    return this;
  }

  /**
   * Hypoallergenic bedding exception.
   * @return hypoallergenicBeddingException
   */
  @javax.annotation.Nullable
  public HypoallergenicBeddingExceptionEnum getHypoallergenicBeddingException() {
    return hypoallergenicBeddingException;
  }

  public void setHypoallergenicBeddingException(HypoallergenicBeddingExceptionEnum hypoallergenicBeddingException) {
    this.hypoallergenicBeddingException = hypoallergenicBeddingException;
  }


  public LivingAreaSleeping kingBedsCount(Integer kingBedsCount) {
    this.kingBedsCount = kingBedsCount;
    return this;
  }

  /**
   * King beds count. The number of large beds measuring 76\&quot;W x 80\&quot;L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
   * @return kingBedsCount
   */
  @javax.annotation.Nullable
  public Integer getKingBedsCount() {
    return kingBedsCount;
  }

  public void setKingBedsCount(Integer kingBedsCount) {
    this.kingBedsCount = kingBedsCount;
  }


  public LivingAreaSleeping kingBedsCountException(KingBedsCountExceptionEnum kingBedsCountException) {
    this.kingBedsCountException = kingBedsCountException;
    return this;
  }

  /**
   * King beds count exception.
   * @return kingBedsCountException
   */
  @javax.annotation.Nullable
  public KingBedsCountExceptionEnum getKingBedsCountException() {
    return kingBedsCountException;
  }

  public void setKingBedsCountException(KingBedsCountExceptionEnum kingBedsCountException) {
    this.kingBedsCountException = kingBedsCountException;
  }


  public LivingAreaSleeping memoryFoamPillows(Boolean memoryFoamPillows) {
    this.memoryFoamPillows = memoryFoamPillows;
    return this;
  }

  /**
   * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
   * @return memoryFoamPillows
   */
  @javax.annotation.Nullable
  public Boolean getMemoryFoamPillows() {
    return memoryFoamPillows;
  }

  public void setMemoryFoamPillows(Boolean memoryFoamPillows) {
    this.memoryFoamPillows = memoryFoamPillows;
  }


  public LivingAreaSleeping memoryFoamPillowsException(MemoryFoamPillowsExceptionEnum memoryFoamPillowsException) {
    this.memoryFoamPillowsException = memoryFoamPillowsException;
    return this;
  }

  /**
   * Memory foam pillows exception.
   * @return memoryFoamPillowsException
   */
  @javax.annotation.Nullable
  public MemoryFoamPillowsExceptionEnum getMemoryFoamPillowsException() {
    return memoryFoamPillowsException;
  }

  public void setMemoryFoamPillowsException(MemoryFoamPillowsExceptionEnum memoryFoamPillowsException) {
    this.memoryFoamPillowsException = memoryFoamPillowsException;
  }


  public LivingAreaSleeping otherBedsCount(Integer otherBedsCount) {
    this.otherBedsCount = otherBedsCount;
    return this;
  }

  /**
   * Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
   * @return otherBedsCount
   */
  @javax.annotation.Nullable
  public Integer getOtherBedsCount() {
    return otherBedsCount;
  }

  public void setOtherBedsCount(Integer otherBedsCount) {
    this.otherBedsCount = otherBedsCount;
  }


  public LivingAreaSleeping otherBedsCountException(OtherBedsCountExceptionEnum otherBedsCountException) {
    this.otherBedsCountException = otherBedsCountException;
    return this;
  }

  /**
   * Other beds count exception.
   * @return otherBedsCountException
   */
  @javax.annotation.Nullable
  public OtherBedsCountExceptionEnum getOtherBedsCountException() {
    return otherBedsCountException;
  }

  public void setOtherBedsCountException(OtherBedsCountExceptionEnum otherBedsCountException) {
    this.otherBedsCountException = otherBedsCountException;
  }


  public LivingAreaSleeping queenBedsCount(Integer queenBedsCount) {
    this.queenBedsCount = queenBedsCount;
    return this;
  }

  /**
   * Queen beds count. The number of medium-large beds measuring 60\&quot;W x 80\&quot;L (152cm x 102cm).
   * @return queenBedsCount
   */
  @javax.annotation.Nullable
  public Integer getQueenBedsCount() {
    return queenBedsCount;
  }

  public void setQueenBedsCount(Integer queenBedsCount) {
    this.queenBedsCount = queenBedsCount;
  }


  public LivingAreaSleeping queenBedsCountException(QueenBedsCountExceptionEnum queenBedsCountException) {
    this.queenBedsCountException = queenBedsCountException;
    return this;
  }

  /**
   * Queen beds count exception.
   * @return queenBedsCountException
   */
  @javax.annotation.Nullable
  public QueenBedsCountExceptionEnum getQueenBedsCountException() {
    return queenBedsCountException;
  }

  public void setQueenBedsCountException(QueenBedsCountExceptionEnum queenBedsCountException) {
    this.queenBedsCountException = queenBedsCountException;
  }


  public LivingAreaSleeping rollAwayBedsCount(Integer rollAwayBedsCount) {
    this.rollAwayBedsCount = rollAwayBedsCount;
    return this;
  }

  /**
   * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
   * @return rollAwayBedsCount
   */
  @javax.annotation.Nullable
  public Integer getRollAwayBedsCount() {
    return rollAwayBedsCount;
  }

  public void setRollAwayBedsCount(Integer rollAwayBedsCount) {
    this.rollAwayBedsCount = rollAwayBedsCount;
  }


  public LivingAreaSleeping rollAwayBedsCountException(RollAwayBedsCountExceptionEnum rollAwayBedsCountException) {
    this.rollAwayBedsCountException = rollAwayBedsCountException;
    return this;
  }

  /**
   * Roll away beds count exception.
   * @return rollAwayBedsCountException
   */
  @javax.annotation.Nullable
  public RollAwayBedsCountExceptionEnum getRollAwayBedsCountException() {
    return rollAwayBedsCountException;
  }

  public void setRollAwayBedsCountException(RollAwayBedsCountExceptionEnum rollAwayBedsCountException) {
    this.rollAwayBedsCountException = rollAwayBedsCountException;
  }


  public LivingAreaSleeping singleOrTwinBedsCount(Integer singleOrTwinBedsCount) {
    this.singleOrTwinBedsCount = singleOrTwinBedsCount;
    return this;
  }

  /**
   * Single or twin count beds. The number of smaller beds measuring 38\&quot;W x 75\&quot;L (97cm x 191cm) that can accommodate one adult.
   * @return singleOrTwinBedsCount
   */
  @javax.annotation.Nullable
  public Integer getSingleOrTwinBedsCount() {
    return singleOrTwinBedsCount;
  }

  public void setSingleOrTwinBedsCount(Integer singleOrTwinBedsCount) {
    this.singleOrTwinBedsCount = singleOrTwinBedsCount;
  }


  public LivingAreaSleeping singleOrTwinBedsCountException(SingleOrTwinBedsCountExceptionEnum singleOrTwinBedsCountException) {
    this.singleOrTwinBedsCountException = singleOrTwinBedsCountException;
    return this;
  }

  /**
   * Single or twin beds count exception.
   * @return singleOrTwinBedsCountException
   */
  @javax.annotation.Nullable
  public SingleOrTwinBedsCountExceptionEnum getSingleOrTwinBedsCountException() {
    return singleOrTwinBedsCountException;
  }

  public void setSingleOrTwinBedsCountException(SingleOrTwinBedsCountExceptionEnum singleOrTwinBedsCountException) {
    this.singleOrTwinBedsCountException = singleOrTwinBedsCountException;
  }


  public LivingAreaSleeping sofaBedsCount(Integer sofaBedsCount) {
    this.sofaBedsCount = sofaBedsCount;
    return this;
  }

  /**
   * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
   * @return sofaBedsCount
   */
  @javax.annotation.Nullable
  public Integer getSofaBedsCount() {
    return sofaBedsCount;
  }

  public void setSofaBedsCount(Integer sofaBedsCount) {
    this.sofaBedsCount = sofaBedsCount;
  }


  public LivingAreaSleeping sofaBedsCountException(SofaBedsCountExceptionEnum sofaBedsCountException) {
    this.sofaBedsCountException = sofaBedsCountException;
    return this;
  }

  /**
   * Sofa beds count exception.
   * @return sofaBedsCountException
   */
  @javax.annotation.Nullable
  public SofaBedsCountExceptionEnum getSofaBedsCountException() {
    return sofaBedsCountException;
  }

  public void setSofaBedsCountException(SofaBedsCountExceptionEnum sofaBedsCountException) {
    this.sofaBedsCountException = sofaBedsCountException;
  }


  public LivingAreaSleeping syntheticPillows(Boolean syntheticPillows) {
    this.syntheticPillows = syntheticPillows;
    return this;
  }

  /**
   * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
   * @return syntheticPillows
   */
  @javax.annotation.Nullable
  public Boolean getSyntheticPillows() {
    return syntheticPillows;
  }

  public void setSyntheticPillows(Boolean syntheticPillows) {
    this.syntheticPillows = syntheticPillows;
  }


  public LivingAreaSleeping syntheticPillowsException(SyntheticPillowsExceptionEnum syntheticPillowsException) {
    this.syntheticPillowsException = syntheticPillowsException;
    return this;
  }

  /**
   * Synthetic pillows exception.
   * @return syntheticPillowsException
   */
  @javax.annotation.Nullable
  public SyntheticPillowsExceptionEnum getSyntheticPillowsException() {
    return syntheticPillowsException;
  }

  public void setSyntheticPillowsException(SyntheticPillowsExceptionEnum syntheticPillowsException) {
    this.syntheticPillowsException = syntheticPillowsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingAreaSleeping livingAreaSleeping = (LivingAreaSleeping) o;
    return Objects.equals(this.bedsCount, livingAreaSleeping.bedsCount) &&
        Objects.equals(this.bedsCountException, livingAreaSleeping.bedsCountException) &&
        Objects.equals(this.bunkBedsCount, livingAreaSleeping.bunkBedsCount) &&
        Objects.equals(this.bunkBedsCountException, livingAreaSleeping.bunkBedsCountException) &&
        Objects.equals(this.cribsCount, livingAreaSleeping.cribsCount) &&
        Objects.equals(this.cribsCountException, livingAreaSleeping.cribsCountException) &&
        Objects.equals(this.doubleBedsCount, livingAreaSleeping.doubleBedsCount) &&
        Objects.equals(this.doubleBedsCountException, livingAreaSleeping.doubleBedsCountException) &&
        Objects.equals(this.featherPillows, livingAreaSleeping.featherPillows) &&
        Objects.equals(this.featherPillowsException, livingAreaSleeping.featherPillowsException) &&
        Objects.equals(this.hypoallergenicBedding, livingAreaSleeping.hypoallergenicBedding) &&
        Objects.equals(this.hypoallergenicBeddingException, livingAreaSleeping.hypoallergenicBeddingException) &&
        Objects.equals(this.kingBedsCount, livingAreaSleeping.kingBedsCount) &&
        Objects.equals(this.kingBedsCountException, livingAreaSleeping.kingBedsCountException) &&
        Objects.equals(this.memoryFoamPillows, livingAreaSleeping.memoryFoamPillows) &&
        Objects.equals(this.memoryFoamPillowsException, livingAreaSleeping.memoryFoamPillowsException) &&
        Objects.equals(this.otherBedsCount, livingAreaSleeping.otherBedsCount) &&
        Objects.equals(this.otherBedsCountException, livingAreaSleeping.otherBedsCountException) &&
        Objects.equals(this.queenBedsCount, livingAreaSleeping.queenBedsCount) &&
        Objects.equals(this.queenBedsCountException, livingAreaSleeping.queenBedsCountException) &&
        Objects.equals(this.rollAwayBedsCount, livingAreaSleeping.rollAwayBedsCount) &&
        Objects.equals(this.rollAwayBedsCountException, livingAreaSleeping.rollAwayBedsCountException) &&
        Objects.equals(this.singleOrTwinBedsCount, livingAreaSleeping.singleOrTwinBedsCount) &&
        Objects.equals(this.singleOrTwinBedsCountException, livingAreaSleeping.singleOrTwinBedsCountException) &&
        Objects.equals(this.sofaBedsCount, livingAreaSleeping.sofaBedsCount) &&
        Objects.equals(this.sofaBedsCountException, livingAreaSleeping.sofaBedsCountException) &&
        Objects.equals(this.syntheticPillows, livingAreaSleeping.syntheticPillows) &&
        Objects.equals(this.syntheticPillowsException, livingAreaSleeping.syntheticPillowsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bedsCount, bedsCountException, bunkBedsCount, bunkBedsCountException, cribsCount, cribsCountException, doubleBedsCount, doubleBedsCountException, featherPillows, featherPillowsException, hypoallergenicBedding, hypoallergenicBeddingException, kingBedsCount, kingBedsCountException, memoryFoamPillows, memoryFoamPillowsException, otherBedsCount, otherBedsCountException, queenBedsCount, queenBedsCountException, rollAwayBedsCount, rollAwayBedsCountException, singleOrTwinBedsCount, singleOrTwinBedsCountException, sofaBedsCount, sofaBedsCountException, syntheticPillows, syntheticPillowsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingAreaSleeping {\n");
    sb.append("    bedsCount: ").append(toIndentedString(bedsCount)).append("\n");
    sb.append("    bedsCountException: ").append(toIndentedString(bedsCountException)).append("\n");
    sb.append("    bunkBedsCount: ").append(toIndentedString(bunkBedsCount)).append("\n");
    sb.append("    bunkBedsCountException: ").append(toIndentedString(bunkBedsCountException)).append("\n");
    sb.append("    cribsCount: ").append(toIndentedString(cribsCount)).append("\n");
    sb.append("    cribsCountException: ").append(toIndentedString(cribsCountException)).append("\n");
    sb.append("    doubleBedsCount: ").append(toIndentedString(doubleBedsCount)).append("\n");
    sb.append("    doubleBedsCountException: ").append(toIndentedString(doubleBedsCountException)).append("\n");
    sb.append("    featherPillows: ").append(toIndentedString(featherPillows)).append("\n");
    sb.append("    featherPillowsException: ").append(toIndentedString(featherPillowsException)).append("\n");
    sb.append("    hypoallergenicBedding: ").append(toIndentedString(hypoallergenicBedding)).append("\n");
    sb.append("    hypoallergenicBeddingException: ").append(toIndentedString(hypoallergenicBeddingException)).append("\n");
    sb.append("    kingBedsCount: ").append(toIndentedString(kingBedsCount)).append("\n");
    sb.append("    kingBedsCountException: ").append(toIndentedString(kingBedsCountException)).append("\n");
    sb.append("    memoryFoamPillows: ").append(toIndentedString(memoryFoamPillows)).append("\n");
    sb.append("    memoryFoamPillowsException: ").append(toIndentedString(memoryFoamPillowsException)).append("\n");
    sb.append("    otherBedsCount: ").append(toIndentedString(otherBedsCount)).append("\n");
    sb.append("    otherBedsCountException: ").append(toIndentedString(otherBedsCountException)).append("\n");
    sb.append("    queenBedsCount: ").append(toIndentedString(queenBedsCount)).append("\n");
    sb.append("    queenBedsCountException: ").append(toIndentedString(queenBedsCountException)).append("\n");
    sb.append("    rollAwayBedsCount: ").append(toIndentedString(rollAwayBedsCount)).append("\n");
    sb.append("    rollAwayBedsCountException: ").append(toIndentedString(rollAwayBedsCountException)).append("\n");
    sb.append("    singleOrTwinBedsCount: ").append(toIndentedString(singleOrTwinBedsCount)).append("\n");
    sb.append("    singleOrTwinBedsCountException: ").append(toIndentedString(singleOrTwinBedsCountException)).append("\n");
    sb.append("    sofaBedsCount: ").append(toIndentedString(sofaBedsCount)).append("\n");
    sb.append("    sofaBedsCountException: ").append(toIndentedString(sofaBedsCountException)).append("\n");
    sb.append("    syntheticPillows: ").append(toIndentedString(syntheticPillows)).append("\n");
    sb.append("    syntheticPillowsException: ").append(toIndentedString(syntheticPillowsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bedsCount");
    openapiFields.add("bedsCountException");
    openapiFields.add("bunkBedsCount");
    openapiFields.add("bunkBedsCountException");
    openapiFields.add("cribsCount");
    openapiFields.add("cribsCountException");
    openapiFields.add("doubleBedsCount");
    openapiFields.add("doubleBedsCountException");
    openapiFields.add("featherPillows");
    openapiFields.add("featherPillowsException");
    openapiFields.add("hypoallergenicBedding");
    openapiFields.add("hypoallergenicBeddingException");
    openapiFields.add("kingBedsCount");
    openapiFields.add("kingBedsCountException");
    openapiFields.add("memoryFoamPillows");
    openapiFields.add("memoryFoamPillowsException");
    openapiFields.add("otherBedsCount");
    openapiFields.add("otherBedsCountException");
    openapiFields.add("queenBedsCount");
    openapiFields.add("queenBedsCountException");
    openapiFields.add("rollAwayBedsCount");
    openapiFields.add("rollAwayBedsCountException");
    openapiFields.add("singleOrTwinBedsCount");
    openapiFields.add("singleOrTwinBedsCountException");
    openapiFields.add("sofaBedsCount");
    openapiFields.add("sofaBedsCountException");
    openapiFields.add("syntheticPillows");
    openapiFields.add("syntheticPillowsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingAreaSleeping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingAreaSleeping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingAreaSleeping is not found in the empty JSON string", LivingAreaSleeping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingAreaSleeping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingAreaSleeping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bedsCountException") != null && !jsonObj.get("bedsCountException").isJsonNull()) && !jsonObj.get("bedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bedsCountException").toString()));
      }
      // validate the optional field `bedsCountException`
      if (jsonObj.get("bedsCountException") != null && !jsonObj.get("bedsCountException").isJsonNull()) {
        BedsCountExceptionEnum.validateJsonElement(jsonObj.get("bedsCountException"));
      }
      if ((jsonObj.get("bunkBedsCountException") != null && !jsonObj.get("bunkBedsCountException").isJsonNull()) && !jsonObj.get("bunkBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bunkBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bunkBedsCountException").toString()));
      }
      // validate the optional field `bunkBedsCountException`
      if (jsonObj.get("bunkBedsCountException") != null && !jsonObj.get("bunkBedsCountException").isJsonNull()) {
        BunkBedsCountExceptionEnum.validateJsonElement(jsonObj.get("bunkBedsCountException"));
      }
      if ((jsonObj.get("cribsCountException") != null && !jsonObj.get("cribsCountException").isJsonNull()) && !jsonObj.get("cribsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cribsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cribsCountException").toString()));
      }
      // validate the optional field `cribsCountException`
      if (jsonObj.get("cribsCountException") != null && !jsonObj.get("cribsCountException").isJsonNull()) {
        CribsCountExceptionEnum.validateJsonElement(jsonObj.get("cribsCountException"));
      }
      if ((jsonObj.get("doubleBedsCountException") != null && !jsonObj.get("doubleBedsCountException").isJsonNull()) && !jsonObj.get("doubleBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doubleBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doubleBedsCountException").toString()));
      }
      // validate the optional field `doubleBedsCountException`
      if (jsonObj.get("doubleBedsCountException") != null && !jsonObj.get("doubleBedsCountException").isJsonNull()) {
        DoubleBedsCountExceptionEnum.validateJsonElement(jsonObj.get("doubleBedsCountException"));
      }
      if ((jsonObj.get("featherPillowsException") != null && !jsonObj.get("featherPillowsException").isJsonNull()) && !jsonObj.get("featherPillowsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featherPillowsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featherPillowsException").toString()));
      }
      // validate the optional field `featherPillowsException`
      if (jsonObj.get("featherPillowsException") != null && !jsonObj.get("featherPillowsException").isJsonNull()) {
        FeatherPillowsExceptionEnum.validateJsonElement(jsonObj.get("featherPillowsException"));
      }
      if ((jsonObj.get("hypoallergenicBeddingException") != null && !jsonObj.get("hypoallergenicBeddingException").isJsonNull()) && !jsonObj.get("hypoallergenicBeddingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hypoallergenicBeddingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hypoallergenicBeddingException").toString()));
      }
      // validate the optional field `hypoallergenicBeddingException`
      if (jsonObj.get("hypoallergenicBeddingException") != null && !jsonObj.get("hypoallergenicBeddingException").isJsonNull()) {
        HypoallergenicBeddingExceptionEnum.validateJsonElement(jsonObj.get("hypoallergenicBeddingException"));
      }
      if ((jsonObj.get("kingBedsCountException") != null && !jsonObj.get("kingBedsCountException").isJsonNull()) && !jsonObj.get("kingBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kingBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kingBedsCountException").toString()));
      }
      // validate the optional field `kingBedsCountException`
      if (jsonObj.get("kingBedsCountException") != null && !jsonObj.get("kingBedsCountException").isJsonNull()) {
        KingBedsCountExceptionEnum.validateJsonElement(jsonObj.get("kingBedsCountException"));
      }
      if ((jsonObj.get("memoryFoamPillowsException") != null && !jsonObj.get("memoryFoamPillowsException").isJsonNull()) && !jsonObj.get("memoryFoamPillowsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memoryFoamPillowsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memoryFoamPillowsException").toString()));
      }
      // validate the optional field `memoryFoamPillowsException`
      if (jsonObj.get("memoryFoamPillowsException") != null && !jsonObj.get("memoryFoamPillowsException").isJsonNull()) {
        MemoryFoamPillowsExceptionEnum.validateJsonElement(jsonObj.get("memoryFoamPillowsException"));
      }
      if ((jsonObj.get("otherBedsCountException") != null && !jsonObj.get("otherBedsCountException").isJsonNull()) && !jsonObj.get("otherBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherBedsCountException").toString()));
      }
      // validate the optional field `otherBedsCountException`
      if (jsonObj.get("otherBedsCountException") != null && !jsonObj.get("otherBedsCountException").isJsonNull()) {
        OtherBedsCountExceptionEnum.validateJsonElement(jsonObj.get("otherBedsCountException"));
      }
      if ((jsonObj.get("queenBedsCountException") != null && !jsonObj.get("queenBedsCountException").isJsonNull()) && !jsonObj.get("queenBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queenBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queenBedsCountException").toString()));
      }
      // validate the optional field `queenBedsCountException`
      if (jsonObj.get("queenBedsCountException") != null && !jsonObj.get("queenBedsCountException").isJsonNull()) {
        QueenBedsCountExceptionEnum.validateJsonElement(jsonObj.get("queenBedsCountException"));
      }
      if ((jsonObj.get("rollAwayBedsCountException") != null && !jsonObj.get("rollAwayBedsCountException").isJsonNull()) && !jsonObj.get("rollAwayBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollAwayBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollAwayBedsCountException").toString()));
      }
      // validate the optional field `rollAwayBedsCountException`
      if (jsonObj.get("rollAwayBedsCountException") != null && !jsonObj.get("rollAwayBedsCountException").isJsonNull()) {
        RollAwayBedsCountExceptionEnum.validateJsonElement(jsonObj.get("rollAwayBedsCountException"));
      }
      if ((jsonObj.get("singleOrTwinBedsCountException") != null && !jsonObj.get("singleOrTwinBedsCountException").isJsonNull()) && !jsonObj.get("singleOrTwinBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `singleOrTwinBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("singleOrTwinBedsCountException").toString()));
      }
      // validate the optional field `singleOrTwinBedsCountException`
      if (jsonObj.get("singleOrTwinBedsCountException") != null && !jsonObj.get("singleOrTwinBedsCountException").isJsonNull()) {
        SingleOrTwinBedsCountExceptionEnum.validateJsonElement(jsonObj.get("singleOrTwinBedsCountException"));
      }
      if ((jsonObj.get("sofaBedsCountException") != null && !jsonObj.get("sofaBedsCountException").isJsonNull()) && !jsonObj.get("sofaBedsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sofaBedsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sofaBedsCountException").toString()));
      }
      // validate the optional field `sofaBedsCountException`
      if (jsonObj.get("sofaBedsCountException") != null && !jsonObj.get("sofaBedsCountException").isJsonNull()) {
        SofaBedsCountExceptionEnum.validateJsonElement(jsonObj.get("sofaBedsCountException"));
      }
      if ((jsonObj.get("syntheticPillowsException") != null && !jsonObj.get("syntheticPillowsException").isJsonNull()) && !jsonObj.get("syntheticPillowsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syntheticPillowsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syntheticPillowsException").toString()));
      }
      // validate the optional field `syntheticPillowsException`
      if (jsonObj.get("syntheticPillowsException") != null && !jsonObj.get("syntheticPillowsException").isJsonNull()) {
        SyntheticPillowsExceptionEnum.validateJsonElement(jsonObj.get("syntheticPillowsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingAreaSleeping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingAreaSleeping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingAreaSleeping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingAreaSleeping.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingAreaSleeping>() {
           @Override
           public void write(JsonWriter out, LivingAreaSleeping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingAreaSleeping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingAreaSleeping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingAreaSleeping
   * @throws IOException if the JSON string is invalid with respect to LivingAreaSleeping
   */
  public static LivingAreaSleeping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingAreaSleeping.class);
  }

  /**
   * Convert an instance of LivingAreaSleeping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

