/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Water conservation practices implemented at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaterConservation {
  public static final String SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_WATER_USE = "independentOrganizationAuditsWaterUse";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_WATER_USE)
  private Boolean independentOrganizationAuditsWaterUse;

  /**
   * Independent organization audits water use exception.
   */
  @JsonAdapter(IndependentOrganizationAuditsWaterUseExceptionEnum.Adapter.class)
  public enum IndependentOrganizationAuditsWaterUseExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndependentOrganizationAuditsWaterUseExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndependentOrganizationAuditsWaterUseExceptionEnum fromValue(String value) {
      for (IndependentOrganizationAuditsWaterUseExceptionEnum b : IndependentOrganizationAuditsWaterUseExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndependentOrganizationAuditsWaterUseExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndependentOrganizationAuditsWaterUseExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndependentOrganizationAuditsWaterUseExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndependentOrganizationAuditsWaterUseExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndependentOrganizationAuditsWaterUseExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_WATER_USE_EXCEPTION = "independentOrganizationAuditsWaterUseException";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_WATER_USE_EXCEPTION)
  private IndependentOrganizationAuditsWaterUseExceptionEnum independentOrganizationAuditsWaterUseException;

  public static final String SERIALIZED_NAME_LINEN_REUSE_PROGRAM = "linenReuseProgram";
  @SerializedName(SERIALIZED_NAME_LINEN_REUSE_PROGRAM)
  private Boolean linenReuseProgram;

  /**
   * Linen reuse program exception.
   */
  @JsonAdapter(LinenReuseProgramExceptionEnum.Adapter.class)
  public enum LinenReuseProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LinenReuseProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinenReuseProgramExceptionEnum fromValue(String value) {
      for (LinenReuseProgramExceptionEnum b : LinenReuseProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinenReuseProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinenReuseProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinenReuseProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinenReuseProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinenReuseProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINEN_REUSE_PROGRAM_EXCEPTION = "linenReuseProgramException";
  @SerializedName(SERIALIZED_NAME_LINEN_REUSE_PROGRAM_EXCEPTION)
  private LinenReuseProgramExceptionEnum linenReuseProgramException;

  public static final String SERIALIZED_NAME_TOWEL_REUSE_PROGRAM = "towelReuseProgram";
  @SerializedName(SERIALIZED_NAME_TOWEL_REUSE_PROGRAM)
  private Boolean towelReuseProgram;

  /**
   * Towel reuse program exception.
   */
  @JsonAdapter(TowelReuseProgramExceptionEnum.Adapter.class)
  public enum TowelReuseProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TowelReuseProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TowelReuseProgramExceptionEnum fromValue(String value) {
      for (TowelReuseProgramExceptionEnum b : TowelReuseProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TowelReuseProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TowelReuseProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TowelReuseProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TowelReuseProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TowelReuseProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOWEL_REUSE_PROGRAM_EXCEPTION = "towelReuseProgramException";
  @SerializedName(SERIALIZED_NAME_TOWEL_REUSE_PROGRAM_EXCEPTION)
  private TowelReuseProgramExceptionEnum towelReuseProgramException;

  public static final String SERIALIZED_NAME_WATER_SAVING_SHOWERS = "waterSavingShowers";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_SHOWERS)
  private Boolean waterSavingShowers;

  /**
   * Water saving showers exception.
   */
  @JsonAdapter(WaterSavingShowersExceptionEnum.Adapter.class)
  public enum WaterSavingShowersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterSavingShowersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterSavingShowersExceptionEnum fromValue(String value) {
      for (WaterSavingShowersExceptionEnum b : WaterSavingShowersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterSavingShowersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterSavingShowersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterSavingShowersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterSavingShowersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterSavingShowersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_SAVING_SHOWERS_EXCEPTION = "waterSavingShowersException";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_SHOWERS_EXCEPTION)
  private WaterSavingShowersExceptionEnum waterSavingShowersException;

  public static final String SERIALIZED_NAME_WATER_SAVING_SINKS = "waterSavingSinks";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_SINKS)
  private Boolean waterSavingSinks;

  /**
   * Water saving sinks exception.
   */
  @JsonAdapter(WaterSavingSinksExceptionEnum.Adapter.class)
  public enum WaterSavingSinksExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterSavingSinksExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterSavingSinksExceptionEnum fromValue(String value) {
      for (WaterSavingSinksExceptionEnum b : WaterSavingSinksExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterSavingSinksExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterSavingSinksExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterSavingSinksExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterSavingSinksExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterSavingSinksExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_SAVING_SINKS_EXCEPTION = "waterSavingSinksException";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_SINKS_EXCEPTION)
  private WaterSavingSinksExceptionEnum waterSavingSinksException;

  public static final String SERIALIZED_NAME_WATER_SAVING_TOILETS = "waterSavingToilets";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_TOILETS)
  private Boolean waterSavingToilets;

  /**
   * Water saving toilets exception.
   */
  @JsonAdapter(WaterSavingToiletsExceptionEnum.Adapter.class)
  public enum WaterSavingToiletsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterSavingToiletsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterSavingToiletsExceptionEnum fromValue(String value) {
      for (WaterSavingToiletsExceptionEnum b : WaterSavingToiletsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterSavingToiletsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterSavingToiletsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterSavingToiletsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterSavingToiletsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterSavingToiletsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_SAVING_TOILETS_EXCEPTION = "waterSavingToiletsException";
  @SerializedName(SERIALIZED_NAME_WATER_SAVING_TOILETS_EXCEPTION)
  private WaterSavingToiletsExceptionEnum waterSavingToiletsException;

  public WaterConservation() {
  }

  public WaterConservation independentOrganizationAuditsWaterUse(Boolean independentOrganizationAuditsWaterUse) {
    this.independentOrganizationAuditsWaterUse = independentOrganizationAuditsWaterUse;
    return this;
  }

  /**
   * Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits).
   * @return independentOrganizationAuditsWaterUse
   */
  @javax.annotation.Nullable
  public Boolean getIndependentOrganizationAuditsWaterUse() {
    return independentOrganizationAuditsWaterUse;
  }

  public void setIndependentOrganizationAuditsWaterUse(Boolean independentOrganizationAuditsWaterUse) {
    this.independentOrganizationAuditsWaterUse = independentOrganizationAuditsWaterUse;
  }


  public WaterConservation independentOrganizationAuditsWaterUseException(IndependentOrganizationAuditsWaterUseExceptionEnum independentOrganizationAuditsWaterUseException) {
    this.independentOrganizationAuditsWaterUseException = independentOrganizationAuditsWaterUseException;
    return this;
  }

  /**
   * Independent organization audits water use exception.
   * @return independentOrganizationAuditsWaterUseException
   */
  @javax.annotation.Nullable
  public IndependentOrganizationAuditsWaterUseExceptionEnum getIndependentOrganizationAuditsWaterUseException() {
    return independentOrganizationAuditsWaterUseException;
  }

  public void setIndependentOrganizationAuditsWaterUseException(IndependentOrganizationAuditsWaterUseExceptionEnum independentOrganizationAuditsWaterUseException) {
    this.independentOrganizationAuditsWaterUseException = independentOrganizationAuditsWaterUseException;
  }


  public WaterConservation linenReuseProgram(Boolean linenReuseProgram) {
    this.linenReuseProgram = linenReuseProgram;
    return this;
  }

  /**
   * Linen reuse program. The property offers a linen reuse program.
   * @return linenReuseProgram
   */
  @javax.annotation.Nullable
  public Boolean getLinenReuseProgram() {
    return linenReuseProgram;
  }

  public void setLinenReuseProgram(Boolean linenReuseProgram) {
    this.linenReuseProgram = linenReuseProgram;
  }


  public WaterConservation linenReuseProgramException(LinenReuseProgramExceptionEnum linenReuseProgramException) {
    this.linenReuseProgramException = linenReuseProgramException;
    return this;
  }

  /**
   * Linen reuse program exception.
   * @return linenReuseProgramException
   */
  @javax.annotation.Nullable
  public LinenReuseProgramExceptionEnum getLinenReuseProgramException() {
    return linenReuseProgramException;
  }

  public void setLinenReuseProgramException(LinenReuseProgramExceptionEnum linenReuseProgramException) {
    this.linenReuseProgramException = linenReuseProgramException;
  }


  public WaterConservation towelReuseProgram(Boolean towelReuseProgram) {
    this.towelReuseProgram = towelReuseProgram;
    return this;
  }

  /**
   * Towel reuse program. The property offers a towel reuse program.
   * @return towelReuseProgram
   */
  @javax.annotation.Nullable
  public Boolean getTowelReuseProgram() {
    return towelReuseProgram;
  }

  public void setTowelReuseProgram(Boolean towelReuseProgram) {
    this.towelReuseProgram = towelReuseProgram;
  }


  public WaterConservation towelReuseProgramException(TowelReuseProgramExceptionEnum towelReuseProgramException) {
    this.towelReuseProgramException = towelReuseProgramException;
    return this;
  }

  /**
   * Towel reuse program exception.
   * @return towelReuseProgramException
   */
  @javax.annotation.Nullable
  public TowelReuseProgramExceptionEnum getTowelReuseProgramException() {
    return towelReuseProgramException;
  }

  public void setTowelReuseProgramException(TowelReuseProgramExceptionEnum towelReuseProgramException) {
    this.towelReuseProgramException = towelReuseProgramException;
  }


  public WaterConservation waterSavingShowers(Boolean waterSavingShowers) {
    this.waterSavingShowers = waterSavingShowers;
    return this;
  }

  /**
   * Water saving showers. All of the property&#39;s guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm).
   * @return waterSavingShowers
   */
  @javax.annotation.Nullable
  public Boolean getWaterSavingShowers() {
    return waterSavingShowers;
  }

  public void setWaterSavingShowers(Boolean waterSavingShowers) {
    this.waterSavingShowers = waterSavingShowers;
  }


  public WaterConservation waterSavingShowersException(WaterSavingShowersExceptionEnum waterSavingShowersException) {
    this.waterSavingShowersException = waterSavingShowersException;
    return this;
  }

  /**
   * Water saving showers exception.
   * @return waterSavingShowersException
   */
  @javax.annotation.Nullable
  public WaterSavingShowersExceptionEnum getWaterSavingShowersException() {
    return waterSavingShowersException;
  }

  public void setWaterSavingShowersException(WaterSavingShowersExceptionEnum waterSavingShowersException) {
    this.waterSavingShowersException = waterSavingShowersException;
  }


  public WaterConservation waterSavingSinks(Boolean waterSavingSinks) {
    this.waterSavingSinks = waterSavingSinks;
    return this;
  }

  /**
   * Water saving sinks. All of the property&#39;s guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm.
   * @return waterSavingSinks
   */
  @javax.annotation.Nullable
  public Boolean getWaterSavingSinks() {
    return waterSavingSinks;
  }

  public void setWaterSavingSinks(Boolean waterSavingSinks) {
    this.waterSavingSinks = waterSavingSinks;
  }


  public WaterConservation waterSavingSinksException(WaterSavingSinksExceptionEnum waterSavingSinksException) {
    this.waterSavingSinksException = waterSavingSinksException;
    return this;
  }

  /**
   * Water saving sinks exception.
   * @return waterSavingSinksException
   */
  @javax.annotation.Nullable
  public WaterSavingSinksExceptionEnum getWaterSavingSinksException() {
    return waterSavingSinksException;
  }

  public void setWaterSavingSinksException(WaterSavingSinksExceptionEnum waterSavingSinksException) {
    this.waterSavingSinksException = waterSavingSinksException;
  }


  public WaterConservation waterSavingToilets(Boolean waterSavingToilets) {
    this.waterSavingToilets = waterSavingToilets;
    return this;
  }

  /**
   * Water saving toilets. All of the property&#39;s toilets use 1.6 gallons per flush, or less.
   * @return waterSavingToilets
   */
  @javax.annotation.Nullable
  public Boolean getWaterSavingToilets() {
    return waterSavingToilets;
  }

  public void setWaterSavingToilets(Boolean waterSavingToilets) {
    this.waterSavingToilets = waterSavingToilets;
  }


  public WaterConservation waterSavingToiletsException(WaterSavingToiletsExceptionEnum waterSavingToiletsException) {
    this.waterSavingToiletsException = waterSavingToiletsException;
    return this;
  }

  /**
   * Water saving toilets exception.
   * @return waterSavingToiletsException
   */
  @javax.annotation.Nullable
  public WaterSavingToiletsExceptionEnum getWaterSavingToiletsException() {
    return waterSavingToiletsException;
  }

  public void setWaterSavingToiletsException(WaterSavingToiletsExceptionEnum waterSavingToiletsException) {
    this.waterSavingToiletsException = waterSavingToiletsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaterConservation waterConservation = (WaterConservation) o;
    return Objects.equals(this.independentOrganizationAuditsWaterUse, waterConservation.independentOrganizationAuditsWaterUse) &&
        Objects.equals(this.independentOrganizationAuditsWaterUseException, waterConservation.independentOrganizationAuditsWaterUseException) &&
        Objects.equals(this.linenReuseProgram, waterConservation.linenReuseProgram) &&
        Objects.equals(this.linenReuseProgramException, waterConservation.linenReuseProgramException) &&
        Objects.equals(this.towelReuseProgram, waterConservation.towelReuseProgram) &&
        Objects.equals(this.towelReuseProgramException, waterConservation.towelReuseProgramException) &&
        Objects.equals(this.waterSavingShowers, waterConservation.waterSavingShowers) &&
        Objects.equals(this.waterSavingShowersException, waterConservation.waterSavingShowersException) &&
        Objects.equals(this.waterSavingSinks, waterConservation.waterSavingSinks) &&
        Objects.equals(this.waterSavingSinksException, waterConservation.waterSavingSinksException) &&
        Objects.equals(this.waterSavingToilets, waterConservation.waterSavingToilets) &&
        Objects.equals(this.waterSavingToiletsException, waterConservation.waterSavingToiletsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(independentOrganizationAuditsWaterUse, independentOrganizationAuditsWaterUseException, linenReuseProgram, linenReuseProgramException, towelReuseProgram, towelReuseProgramException, waterSavingShowers, waterSavingShowersException, waterSavingSinks, waterSavingSinksException, waterSavingToilets, waterSavingToiletsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaterConservation {\n");
    sb.append("    independentOrganizationAuditsWaterUse: ").append(toIndentedString(independentOrganizationAuditsWaterUse)).append("\n");
    sb.append("    independentOrganizationAuditsWaterUseException: ").append(toIndentedString(independentOrganizationAuditsWaterUseException)).append("\n");
    sb.append("    linenReuseProgram: ").append(toIndentedString(linenReuseProgram)).append("\n");
    sb.append("    linenReuseProgramException: ").append(toIndentedString(linenReuseProgramException)).append("\n");
    sb.append("    towelReuseProgram: ").append(toIndentedString(towelReuseProgram)).append("\n");
    sb.append("    towelReuseProgramException: ").append(toIndentedString(towelReuseProgramException)).append("\n");
    sb.append("    waterSavingShowers: ").append(toIndentedString(waterSavingShowers)).append("\n");
    sb.append("    waterSavingShowersException: ").append(toIndentedString(waterSavingShowersException)).append("\n");
    sb.append("    waterSavingSinks: ").append(toIndentedString(waterSavingSinks)).append("\n");
    sb.append("    waterSavingSinksException: ").append(toIndentedString(waterSavingSinksException)).append("\n");
    sb.append("    waterSavingToilets: ").append(toIndentedString(waterSavingToilets)).append("\n");
    sb.append("    waterSavingToiletsException: ").append(toIndentedString(waterSavingToiletsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("independentOrganizationAuditsWaterUse");
    openapiFields.add("independentOrganizationAuditsWaterUseException");
    openapiFields.add("linenReuseProgram");
    openapiFields.add("linenReuseProgramException");
    openapiFields.add("towelReuseProgram");
    openapiFields.add("towelReuseProgramException");
    openapiFields.add("waterSavingShowers");
    openapiFields.add("waterSavingShowersException");
    openapiFields.add("waterSavingSinks");
    openapiFields.add("waterSavingSinksException");
    openapiFields.add("waterSavingToilets");
    openapiFields.add("waterSavingToiletsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaterConservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaterConservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaterConservation is not found in the empty JSON string", WaterConservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaterConservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaterConservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("independentOrganizationAuditsWaterUseException") != null && !jsonObj.get("independentOrganizationAuditsWaterUseException").isJsonNull()) && !jsonObj.get("independentOrganizationAuditsWaterUseException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `independentOrganizationAuditsWaterUseException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("independentOrganizationAuditsWaterUseException").toString()));
      }
      // validate the optional field `independentOrganizationAuditsWaterUseException`
      if (jsonObj.get("independentOrganizationAuditsWaterUseException") != null && !jsonObj.get("independentOrganizationAuditsWaterUseException").isJsonNull()) {
        IndependentOrganizationAuditsWaterUseExceptionEnum.validateJsonElement(jsonObj.get("independentOrganizationAuditsWaterUseException"));
      }
      if ((jsonObj.get("linenReuseProgramException") != null && !jsonObj.get("linenReuseProgramException").isJsonNull()) && !jsonObj.get("linenReuseProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linenReuseProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linenReuseProgramException").toString()));
      }
      // validate the optional field `linenReuseProgramException`
      if (jsonObj.get("linenReuseProgramException") != null && !jsonObj.get("linenReuseProgramException").isJsonNull()) {
        LinenReuseProgramExceptionEnum.validateJsonElement(jsonObj.get("linenReuseProgramException"));
      }
      if ((jsonObj.get("towelReuseProgramException") != null && !jsonObj.get("towelReuseProgramException").isJsonNull()) && !jsonObj.get("towelReuseProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `towelReuseProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("towelReuseProgramException").toString()));
      }
      // validate the optional field `towelReuseProgramException`
      if (jsonObj.get("towelReuseProgramException") != null && !jsonObj.get("towelReuseProgramException").isJsonNull()) {
        TowelReuseProgramExceptionEnum.validateJsonElement(jsonObj.get("towelReuseProgramException"));
      }
      if ((jsonObj.get("waterSavingShowersException") != null && !jsonObj.get("waterSavingShowersException").isJsonNull()) && !jsonObj.get("waterSavingShowersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterSavingShowersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterSavingShowersException").toString()));
      }
      // validate the optional field `waterSavingShowersException`
      if (jsonObj.get("waterSavingShowersException") != null && !jsonObj.get("waterSavingShowersException").isJsonNull()) {
        WaterSavingShowersExceptionEnum.validateJsonElement(jsonObj.get("waterSavingShowersException"));
      }
      if ((jsonObj.get("waterSavingSinksException") != null && !jsonObj.get("waterSavingSinksException").isJsonNull()) && !jsonObj.get("waterSavingSinksException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterSavingSinksException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterSavingSinksException").toString()));
      }
      // validate the optional field `waterSavingSinksException`
      if (jsonObj.get("waterSavingSinksException") != null && !jsonObj.get("waterSavingSinksException").isJsonNull()) {
        WaterSavingSinksExceptionEnum.validateJsonElement(jsonObj.get("waterSavingSinksException"));
      }
      if ((jsonObj.get("waterSavingToiletsException") != null && !jsonObj.get("waterSavingToiletsException").isJsonNull()) && !jsonObj.get("waterSavingToiletsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterSavingToiletsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterSavingToiletsException").toString()));
      }
      // validate the optional field `waterSavingToiletsException`
      if (jsonObj.get("waterSavingToiletsException") != null && !jsonObj.get("waterSavingToiletsException").isJsonNull()) {
        WaterSavingToiletsExceptionEnum.validateJsonElement(jsonObj.get("waterSavingToiletsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaterConservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaterConservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaterConservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaterConservation.class));

       return (TypeAdapter<T>) new TypeAdapter<WaterConservation>() {
           @Override
           public void write(JsonWriter out, WaterConservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaterConservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaterConservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaterConservation
   * @throws IOException if the JSON string is invalid with respect to WaterConservation
   */
  public static WaterConservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaterConservation.class);
  }

  /**
   * Convert an instance of WaterConservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

