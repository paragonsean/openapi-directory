/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conveniences provided in guest units to facilitate an easier, more comfortable stay.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Housekeeping {
  public static final String SERIALIZED_NAME_DAILY_HOUSEKEEPING = "dailyHousekeeping";
  @SerializedName(SERIALIZED_NAME_DAILY_HOUSEKEEPING)
  private Boolean dailyHousekeeping;

  /**
   * Daily housekeeping exception.
   */
  @JsonAdapter(DailyHousekeepingExceptionEnum.Adapter.class)
  public enum DailyHousekeepingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DailyHousekeepingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DailyHousekeepingExceptionEnum fromValue(String value) {
      for (DailyHousekeepingExceptionEnum b : DailyHousekeepingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DailyHousekeepingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DailyHousekeepingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DailyHousekeepingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DailyHousekeepingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DailyHousekeepingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAILY_HOUSEKEEPING_EXCEPTION = "dailyHousekeepingException";
  @SerializedName(SERIALIZED_NAME_DAILY_HOUSEKEEPING_EXCEPTION)
  private DailyHousekeepingExceptionEnum dailyHousekeepingException;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_AVAILABLE = "housekeepingAvailable";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_AVAILABLE)
  private Boolean housekeepingAvailable;

  /**
   * Housekeeping available exception.
   */
  @JsonAdapter(HousekeepingAvailableExceptionEnum.Adapter.class)
  public enum HousekeepingAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HousekeepingAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HousekeepingAvailableExceptionEnum fromValue(String value) {
      for (HousekeepingAvailableExceptionEnum b : HousekeepingAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HousekeepingAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HousekeepingAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HousekeepingAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HousekeepingAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HousekeepingAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOUSEKEEPING_AVAILABLE_EXCEPTION = "housekeepingAvailableException";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_AVAILABLE_EXCEPTION)
  private HousekeepingAvailableExceptionEnum housekeepingAvailableException;

  public static final String SERIALIZED_NAME_TURNDOWN_SERVICE = "turndownService";
  @SerializedName(SERIALIZED_NAME_TURNDOWN_SERVICE)
  private Boolean turndownService;

  /**
   * Turndown service exception.
   */
  @JsonAdapter(TurndownServiceExceptionEnum.Adapter.class)
  public enum TurndownServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TurndownServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TurndownServiceExceptionEnum fromValue(String value) {
      for (TurndownServiceExceptionEnum b : TurndownServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TurndownServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TurndownServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TurndownServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TurndownServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TurndownServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TURNDOWN_SERVICE_EXCEPTION = "turndownServiceException";
  @SerializedName(SERIALIZED_NAME_TURNDOWN_SERVICE_EXCEPTION)
  private TurndownServiceExceptionEnum turndownServiceException;

  public Housekeeping() {
  }

  public Housekeeping dailyHousekeeping(Boolean dailyHousekeeping) {
    this.dailyHousekeeping = dailyHousekeeping;
    return this;
  }

  /**
   * Daily housekeeping. Guest units are cleaned by hotel staff daily during guest&#39;s stay.
   * @return dailyHousekeeping
   */
  @javax.annotation.Nullable
  public Boolean getDailyHousekeeping() {
    return dailyHousekeeping;
  }

  public void setDailyHousekeeping(Boolean dailyHousekeeping) {
    this.dailyHousekeeping = dailyHousekeeping;
  }


  public Housekeeping dailyHousekeepingException(DailyHousekeepingExceptionEnum dailyHousekeepingException) {
    this.dailyHousekeepingException = dailyHousekeepingException;
    return this;
  }

  /**
   * Daily housekeeping exception.
   * @return dailyHousekeepingException
   */
  @javax.annotation.Nullable
  public DailyHousekeepingExceptionEnum getDailyHousekeepingException() {
    return dailyHousekeepingException;
  }

  public void setDailyHousekeepingException(DailyHousekeepingExceptionEnum dailyHousekeepingException) {
    this.dailyHousekeepingException = dailyHousekeepingException;
  }


  public Housekeeping housekeepingAvailable(Boolean housekeepingAvailable) {
    this.housekeepingAvailable = housekeepingAvailable;
    return this;
  }

  /**
   * Housekeeping available. Guest units are cleaned by hotel staff during guest&#39;s stay. Schedule may vary from daily, weekly, or specific days of the week.
   * @return housekeepingAvailable
   */
  @javax.annotation.Nullable
  public Boolean getHousekeepingAvailable() {
    return housekeepingAvailable;
  }

  public void setHousekeepingAvailable(Boolean housekeepingAvailable) {
    this.housekeepingAvailable = housekeepingAvailable;
  }


  public Housekeeping housekeepingAvailableException(HousekeepingAvailableExceptionEnum housekeepingAvailableException) {
    this.housekeepingAvailableException = housekeepingAvailableException;
    return this;
  }

  /**
   * Housekeeping available exception.
   * @return housekeepingAvailableException
   */
  @javax.annotation.Nullable
  public HousekeepingAvailableExceptionEnum getHousekeepingAvailableException() {
    return housekeepingAvailableException;
  }

  public void setHousekeepingAvailableException(HousekeepingAvailableExceptionEnum housekeepingAvailableException) {
    this.housekeepingAvailableException = housekeepingAvailableException;
  }


  public Housekeeping turndownService(Boolean turndownService) {
    this.turndownService = turndownService;
    return this;
  }

  /**
   * Turndown service. Hotel staff enters guest units to prepare the bed for sleep use. May or may not include some light housekeeping. May or may not include an evening snack or candy. Also known as evening service.
   * @return turndownService
   */
  @javax.annotation.Nullable
  public Boolean getTurndownService() {
    return turndownService;
  }

  public void setTurndownService(Boolean turndownService) {
    this.turndownService = turndownService;
  }


  public Housekeeping turndownServiceException(TurndownServiceExceptionEnum turndownServiceException) {
    this.turndownServiceException = turndownServiceException;
    return this;
  }

  /**
   * Turndown service exception.
   * @return turndownServiceException
   */
  @javax.annotation.Nullable
  public TurndownServiceExceptionEnum getTurndownServiceException() {
    return turndownServiceException;
  }

  public void setTurndownServiceException(TurndownServiceExceptionEnum turndownServiceException) {
    this.turndownServiceException = turndownServiceException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Housekeeping housekeeping = (Housekeeping) o;
    return Objects.equals(this.dailyHousekeeping, housekeeping.dailyHousekeeping) &&
        Objects.equals(this.dailyHousekeepingException, housekeeping.dailyHousekeepingException) &&
        Objects.equals(this.housekeepingAvailable, housekeeping.housekeepingAvailable) &&
        Objects.equals(this.housekeepingAvailableException, housekeeping.housekeepingAvailableException) &&
        Objects.equals(this.turndownService, housekeeping.turndownService) &&
        Objects.equals(this.turndownServiceException, housekeeping.turndownServiceException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyHousekeeping, dailyHousekeepingException, housekeepingAvailable, housekeepingAvailableException, turndownService, turndownServiceException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Housekeeping {\n");
    sb.append("    dailyHousekeeping: ").append(toIndentedString(dailyHousekeeping)).append("\n");
    sb.append("    dailyHousekeepingException: ").append(toIndentedString(dailyHousekeepingException)).append("\n");
    sb.append("    housekeepingAvailable: ").append(toIndentedString(housekeepingAvailable)).append("\n");
    sb.append("    housekeepingAvailableException: ").append(toIndentedString(housekeepingAvailableException)).append("\n");
    sb.append("    turndownService: ").append(toIndentedString(turndownService)).append("\n");
    sb.append("    turndownServiceException: ").append(toIndentedString(turndownServiceException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dailyHousekeeping");
    openapiFields.add("dailyHousekeepingException");
    openapiFields.add("housekeepingAvailable");
    openapiFields.add("housekeepingAvailableException");
    openapiFields.add("turndownService");
    openapiFields.add("turndownServiceException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Housekeeping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Housekeeping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Housekeeping is not found in the empty JSON string", Housekeeping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Housekeeping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Housekeeping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dailyHousekeepingException") != null && !jsonObj.get("dailyHousekeepingException").isJsonNull()) && !jsonObj.get("dailyHousekeepingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyHousekeepingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyHousekeepingException").toString()));
      }
      // validate the optional field `dailyHousekeepingException`
      if (jsonObj.get("dailyHousekeepingException") != null && !jsonObj.get("dailyHousekeepingException").isJsonNull()) {
        DailyHousekeepingExceptionEnum.validateJsonElement(jsonObj.get("dailyHousekeepingException"));
      }
      if ((jsonObj.get("housekeepingAvailableException") != null && !jsonObj.get("housekeepingAvailableException").isJsonNull()) && !jsonObj.get("housekeepingAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housekeepingAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housekeepingAvailableException").toString()));
      }
      // validate the optional field `housekeepingAvailableException`
      if (jsonObj.get("housekeepingAvailableException") != null && !jsonObj.get("housekeepingAvailableException").isJsonNull()) {
        HousekeepingAvailableExceptionEnum.validateJsonElement(jsonObj.get("housekeepingAvailableException"));
      }
      if ((jsonObj.get("turndownServiceException") != null && !jsonObj.get("turndownServiceException").isJsonNull()) && !jsonObj.get("turndownServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turndownServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turndownServiceException").toString()));
      }
      // validate the optional field `turndownServiceException`
      if (jsonObj.get("turndownServiceException") != null && !jsonObj.get("turndownServiceException").isJsonNull()) {
        TurndownServiceExceptionEnum.validateJsonElement(jsonObj.get("turndownServiceException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Housekeeping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Housekeeping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Housekeeping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Housekeeping.class));

       return (TypeAdapter<T>) new TypeAdapter<Housekeeping>() {
           @Override
           public void write(JsonWriter out, Housekeeping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Housekeeping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Housekeeping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Housekeeping
   * @throws IOException if the JSON string is invalid with respect to Housekeeping
   */
  public static Housekeeping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Housekeeping.class);
  }

  /**
   * Convert an instance of Housekeeping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

