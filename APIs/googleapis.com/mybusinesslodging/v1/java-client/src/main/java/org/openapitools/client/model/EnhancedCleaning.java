/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Enhanced cleaning measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnhancedCleaning {
  public static final String SERIALIZED_NAME_COMMERCIAL_GRADE_DISINFECTANT_CLEANING = "commercialGradeDisinfectantCleaning";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_GRADE_DISINFECTANT_CLEANING)
  private Boolean commercialGradeDisinfectantCleaning;

  /**
   * Commercial grade disinfectant cleaning exception.
   */
  @JsonAdapter(CommercialGradeDisinfectantCleaningExceptionEnum.Adapter.class)
  public enum CommercialGradeDisinfectantCleaningExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CommercialGradeDisinfectantCleaningExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommercialGradeDisinfectantCleaningExceptionEnum fromValue(String value) {
      for (CommercialGradeDisinfectantCleaningExceptionEnum b : CommercialGradeDisinfectantCleaningExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommercialGradeDisinfectantCleaningExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommercialGradeDisinfectantCleaningExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommercialGradeDisinfectantCleaningExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommercialGradeDisinfectantCleaningExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommercialGradeDisinfectantCleaningExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMERCIAL_GRADE_DISINFECTANT_CLEANING_EXCEPTION = "commercialGradeDisinfectantCleaningException";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_GRADE_DISINFECTANT_CLEANING_EXCEPTION)
  private CommercialGradeDisinfectantCleaningExceptionEnum commercialGradeDisinfectantCleaningException;

  public static final String SERIALIZED_NAME_COMMON_AREAS_ENHANCED_CLEANING = "commonAreasEnhancedCleaning";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_ENHANCED_CLEANING)
  private Boolean commonAreasEnhancedCleaning;

  /**
   * Common areas enhanced cleaning exception.
   */
  @JsonAdapter(CommonAreasEnhancedCleaningExceptionEnum.Adapter.class)
  public enum CommonAreasEnhancedCleaningExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CommonAreasEnhancedCleaningExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommonAreasEnhancedCleaningExceptionEnum fromValue(String value) {
      for (CommonAreasEnhancedCleaningExceptionEnum b : CommonAreasEnhancedCleaningExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommonAreasEnhancedCleaningExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommonAreasEnhancedCleaningExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommonAreasEnhancedCleaningExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommonAreasEnhancedCleaningExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommonAreasEnhancedCleaningExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMON_AREAS_ENHANCED_CLEANING_EXCEPTION = "commonAreasEnhancedCleaningException";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_ENHANCED_CLEANING_EXCEPTION)
  private CommonAreasEnhancedCleaningExceptionEnum commonAreasEnhancedCleaningException;

  public static final String SERIALIZED_NAME_EMPLOYEES_TRAINED_CLEANING_PROCEDURES = "employeesTrainedCleaningProcedures";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_TRAINED_CLEANING_PROCEDURES)
  private Boolean employeesTrainedCleaningProcedures;

  /**
   * Employees trained cleaning procedures exception.
   */
  @JsonAdapter(EmployeesTrainedCleaningProceduresExceptionEnum.Adapter.class)
  public enum EmployeesTrainedCleaningProceduresExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EmployeesTrainedCleaningProceduresExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeesTrainedCleaningProceduresExceptionEnum fromValue(String value) {
      for (EmployeesTrainedCleaningProceduresExceptionEnum b : EmployeesTrainedCleaningProceduresExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeesTrainedCleaningProceduresExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeesTrainedCleaningProceduresExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeesTrainedCleaningProceduresExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeesTrainedCleaningProceduresExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmployeesTrainedCleaningProceduresExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEES_TRAINED_CLEANING_PROCEDURES_EXCEPTION = "employeesTrainedCleaningProceduresException";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_TRAINED_CLEANING_PROCEDURES_EXCEPTION)
  private EmployeesTrainedCleaningProceduresExceptionEnum employeesTrainedCleaningProceduresException;

  public static final String SERIALIZED_NAME_EMPLOYEES_TRAINED_THOROUGH_HAND_WASHING = "employeesTrainedThoroughHandWashing";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_TRAINED_THOROUGH_HAND_WASHING)
  private Boolean employeesTrainedThoroughHandWashing;

  /**
   * Employees trained thorough hand washing exception.
   */
  @JsonAdapter(EmployeesTrainedThoroughHandWashingExceptionEnum.Adapter.class)
  public enum EmployeesTrainedThoroughHandWashingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EmployeesTrainedThoroughHandWashingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeesTrainedThoroughHandWashingExceptionEnum fromValue(String value) {
      for (EmployeesTrainedThoroughHandWashingExceptionEnum b : EmployeesTrainedThoroughHandWashingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeesTrainedThoroughHandWashingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeesTrainedThoroughHandWashingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeesTrainedThoroughHandWashingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeesTrainedThoroughHandWashingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmployeesTrainedThoroughHandWashingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEES_TRAINED_THOROUGH_HAND_WASHING_EXCEPTION = "employeesTrainedThoroughHandWashingException";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_TRAINED_THOROUGH_HAND_WASHING_EXCEPTION)
  private EmployeesTrainedThoroughHandWashingExceptionEnum employeesTrainedThoroughHandWashingException;

  public static final String SERIALIZED_NAME_EMPLOYEES_WEAR_PROTECTIVE_EQUIPMENT = "employeesWearProtectiveEquipment";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_WEAR_PROTECTIVE_EQUIPMENT)
  private Boolean employeesWearProtectiveEquipment;

  /**
   * Employees wear protective equipment exception.
   */
  @JsonAdapter(EmployeesWearProtectiveEquipmentExceptionEnum.Adapter.class)
  public enum EmployeesWearProtectiveEquipmentExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EmployeesWearProtectiveEquipmentExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeesWearProtectiveEquipmentExceptionEnum fromValue(String value) {
      for (EmployeesWearProtectiveEquipmentExceptionEnum b : EmployeesWearProtectiveEquipmentExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeesWearProtectiveEquipmentExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeesWearProtectiveEquipmentExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeesWearProtectiveEquipmentExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeesWearProtectiveEquipmentExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmployeesWearProtectiveEquipmentExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEES_WEAR_PROTECTIVE_EQUIPMENT_EXCEPTION = "employeesWearProtectiveEquipmentException";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES_WEAR_PROTECTIVE_EQUIPMENT_EXCEPTION)
  private EmployeesWearProtectiveEquipmentExceptionEnum employeesWearProtectiveEquipmentException;

  public static final String SERIALIZED_NAME_GUEST_ROOMS_ENHANCED_CLEANING = "guestRoomsEnhancedCleaning";
  @SerializedName(SERIALIZED_NAME_GUEST_ROOMS_ENHANCED_CLEANING)
  private Boolean guestRoomsEnhancedCleaning;

  /**
   * Guest rooms enhanced cleaning exception.
   */
  @JsonAdapter(GuestRoomsEnhancedCleaningExceptionEnum.Adapter.class)
  public enum GuestRoomsEnhancedCleaningExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GuestRoomsEnhancedCleaningExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GuestRoomsEnhancedCleaningExceptionEnum fromValue(String value) {
      for (GuestRoomsEnhancedCleaningExceptionEnum b : GuestRoomsEnhancedCleaningExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GuestRoomsEnhancedCleaningExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GuestRoomsEnhancedCleaningExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GuestRoomsEnhancedCleaningExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GuestRoomsEnhancedCleaningExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GuestRoomsEnhancedCleaningExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GUEST_ROOMS_ENHANCED_CLEANING_EXCEPTION = "guestRoomsEnhancedCleaningException";
  @SerializedName(SERIALIZED_NAME_GUEST_ROOMS_ENHANCED_CLEANING_EXCEPTION)
  private GuestRoomsEnhancedCleaningExceptionEnum guestRoomsEnhancedCleaningException;

  public EnhancedCleaning() {
  }

  public EnhancedCleaning commercialGradeDisinfectantCleaning(Boolean commercialGradeDisinfectantCleaning) {
    this.commercialGradeDisinfectantCleaning = commercialGradeDisinfectantCleaning;
    return this;
  }

  /**
   * Commercial-grade disinfectant used to clean the property.
   * @return commercialGradeDisinfectantCleaning
   */
  @javax.annotation.Nullable
  public Boolean getCommercialGradeDisinfectantCleaning() {
    return commercialGradeDisinfectantCleaning;
  }

  public void setCommercialGradeDisinfectantCleaning(Boolean commercialGradeDisinfectantCleaning) {
    this.commercialGradeDisinfectantCleaning = commercialGradeDisinfectantCleaning;
  }


  public EnhancedCleaning commercialGradeDisinfectantCleaningException(CommercialGradeDisinfectantCleaningExceptionEnum commercialGradeDisinfectantCleaningException) {
    this.commercialGradeDisinfectantCleaningException = commercialGradeDisinfectantCleaningException;
    return this;
  }

  /**
   * Commercial grade disinfectant cleaning exception.
   * @return commercialGradeDisinfectantCleaningException
   */
  @javax.annotation.Nullable
  public CommercialGradeDisinfectantCleaningExceptionEnum getCommercialGradeDisinfectantCleaningException() {
    return commercialGradeDisinfectantCleaningException;
  }

  public void setCommercialGradeDisinfectantCleaningException(CommercialGradeDisinfectantCleaningExceptionEnum commercialGradeDisinfectantCleaningException) {
    this.commercialGradeDisinfectantCleaningException = commercialGradeDisinfectantCleaningException;
  }


  public EnhancedCleaning commonAreasEnhancedCleaning(Boolean commonAreasEnhancedCleaning) {
    this.commonAreasEnhancedCleaning = commonAreasEnhancedCleaning;
    return this;
  }

  /**
   * Enhanced cleaning of common areas.
   * @return commonAreasEnhancedCleaning
   */
  @javax.annotation.Nullable
  public Boolean getCommonAreasEnhancedCleaning() {
    return commonAreasEnhancedCleaning;
  }

  public void setCommonAreasEnhancedCleaning(Boolean commonAreasEnhancedCleaning) {
    this.commonAreasEnhancedCleaning = commonAreasEnhancedCleaning;
  }


  public EnhancedCleaning commonAreasEnhancedCleaningException(CommonAreasEnhancedCleaningExceptionEnum commonAreasEnhancedCleaningException) {
    this.commonAreasEnhancedCleaningException = commonAreasEnhancedCleaningException;
    return this;
  }

  /**
   * Common areas enhanced cleaning exception.
   * @return commonAreasEnhancedCleaningException
   */
  @javax.annotation.Nullable
  public CommonAreasEnhancedCleaningExceptionEnum getCommonAreasEnhancedCleaningException() {
    return commonAreasEnhancedCleaningException;
  }

  public void setCommonAreasEnhancedCleaningException(CommonAreasEnhancedCleaningExceptionEnum commonAreasEnhancedCleaningException) {
    this.commonAreasEnhancedCleaningException = commonAreasEnhancedCleaningException;
  }


  public EnhancedCleaning employeesTrainedCleaningProcedures(Boolean employeesTrainedCleaningProcedures) {
    this.employeesTrainedCleaningProcedures = employeesTrainedCleaningProcedures;
    return this;
  }

  /**
   * Employees trained in COVID-19 cleaning procedures.
   * @return employeesTrainedCleaningProcedures
   */
  @javax.annotation.Nullable
  public Boolean getEmployeesTrainedCleaningProcedures() {
    return employeesTrainedCleaningProcedures;
  }

  public void setEmployeesTrainedCleaningProcedures(Boolean employeesTrainedCleaningProcedures) {
    this.employeesTrainedCleaningProcedures = employeesTrainedCleaningProcedures;
  }


  public EnhancedCleaning employeesTrainedCleaningProceduresException(EmployeesTrainedCleaningProceduresExceptionEnum employeesTrainedCleaningProceduresException) {
    this.employeesTrainedCleaningProceduresException = employeesTrainedCleaningProceduresException;
    return this;
  }

  /**
   * Employees trained cleaning procedures exception.
   * @return employeesTrainedCleaningProceduresException
   */
  @javax.annotation.Nullable
  public EmployeesTrainedCleaningProceduresExceptionEnum getEmployeesTrainedCleaningProceduresException() {
    return employeesTrainedCleaningProceduresException;
  }

  public void setEmployeesTrainedCleaningProceduresException(EmployeesTrainedCleaningProceduresExceptionEnum employeesTrainedCleaningProceduresException) {
    this.employeesTrainedCleaningProceduresException = employeesTrainedCleaningProceduresException;
  }


  public EnhancedCleaning employeesTrainedThoroughHandWashing(Boolean employeesTrainedThoroughHandWashing) {
    this.employeesTrainedThoroughHandWashing = employeesTrainedThoroughHandWashing;
    return this;
  }

  /**
   * Employees trained in thorough hand-washing.
   * @return employeesTrainedThoroughHandWashing
   */
  @javax.annotation.Nullable
  public Boolean getEmployeesTrainedThoroughHandWashing() {
    return employeesTrainedThoroughHandWashing;
  }

  public void setEmployeesTrainedThoroughHandWashing(Boolean employeesTrainedThoroughHandWashing) {
    this.employeesTrainedThoroughHandWashing = employeesTrainedThoroughHandWashing;
  }


  public EnhancedCleaning employeesTrainedThoroughHandWashingException(EmployeesTrainedThoroughHandWashingExceptionEnum employeesTrainedThoroughHandWashingException) {
    this.employeesTrainedThoroughHandWashingException = employeesTrainedThoroughHandWashingException;
    return this;
  }

  /**
   * Employees trained thorough hand washing exception.
   * @return employeesTrainedThoroughHandWashingException
   */
  @javax.annotation.Nullable
  public EmployeesTrainedThoroughHandWashingExceptionEnum getEmployeesTrainedThoroughHandWashingException() {
    return employeesTrainedThoroughHandWashingException;
  }

  public void setEmployeesTrainedThoroughHandWashingException(EmployeesTrainedThoroughHandWashingExceptionEnum employeesTrainedThoroughHandWashingException) {
    this.employeesTrainedThoroughHandWashingException = employeesTrainedThoroughHandWashingException;
  }


  public EnhancedCleaning employeesWearProtectiveEquipment(Boolean employeesWearProtectiveEquipment) {
    this.employeesWearProtectiveEquipment = employeesWearProtectiveEquipment;
    return this;
  }

  /**
   * Employees wear masks, face shields, and/or gloves.
   * @return employeesWearProtectiveEquipment
   */
  @javax.annotation.Nullable
  public Boolean getEmployeesWearProtectiveEquipment() {
    return employeesWearProtectiveEquipment;
  }

  public void setEmployeesWearProtectiveEquipment(Boolean employeesWearProtectiveEquipment) {
    this.employeesWearProtectiveEquipment = employeesWearProtectiveEquipment;
  }


  public EnhancedCleaning employeesWearProtectiveEquipmentException(EmployeesWearProtectiveEquipmentExceptionEnum employeesWearProtectiveEquipmentException) {
    this.employeesWearProtectiveEquipmentException = employeesWearProtectiveEquipmentException;
    return this;
  }

  /**
   * Employees wear protective equipment exception.
   * @return employeesWearProtectiveEquipmentException
   */
  @javax.annotation.Nullable
  public EmployeesWearProtectiveEquipmentExceptionEnum getEmployeesWearProtectiveEquipmentException() {
    return employeesWearProtectiveEquipmentException;
  }

  public void setEmployeesWearProtectiveEquipmentException(EmployeesWearProtectiveEquipmentExceptionEnum employeesWearProtectiveEquipmentException) {
    this.employeesWearProtectiveEquipmentException = employeesWearProtectiveEquipmentException;
  }


  public EnhancedCleaning guestRoomsEnhancedCleaning(Boolean guestRoomsEnhancedCleaning) {
    this.guestRoomsEnhancedCleaning = guestRoomsEnhancedCleaning;
    return this;
  }

  /**
   * Enhanced cleaning of guest rooms.
   * @return guestRoomsEnhancedCleaning
   */
  @javax.annotation.Nullable
  public Boolean getGuestRoomsEnhancedCleaning() {
    return guestRoomsEnhancedCleaning;
  }

  public void setGuestRoomsEnhancedCleaning(Boolean guestRoomsEnhancedCleaning) {
    this.guestRoomsEnhancedCleaning = guestRoomsEnhancedCleaning;
  }


  public EnhancedCleaning guestRoomsEnhancedCleaningException(GuestRoomsEnhancedCleaningExceptionEnum guestRoomsEnhancedCleaningException) {
    this.guestRoomsEnhancedCleaningException = guestRoomsEnhancedCleaningException;
    return this;
  }

  /**
   * Guest rooms enhanced cleaning exception.
   * @return guestRoomsEnhancedCleaningException
   */
  @javax.annotation.Nullable
  public GuestRoomsEnhancedCleaningExceptionEnum getGuestRoomsEnhancedCleaningException() {
    return guestRoomsEnhancedCleaningException;
  }

  public void setGuestRoomsEnhancedCleaningException(GuestRoomsEnhancedCleaningExceptionEnum guestRoomsEnhancedCleaningException) {
    this.guestRoomsEnhancedCleaningException = guestRoomsEnhancedCleaningException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedCleaning enhancedCleaning = (EnhancedCleaning) o;
    return Objects.equals(this.commercialGradeDisinfectantCleaning, enhancedCleaning.commercialGradeDisinfectantCleaning) &&
        Objects.equals(this.commercialGradeDisinfectantCleaningException, enhancedCleaning.commercialGradeDisinfectantCleaningException) &&
        Objects.equals(this.commonAreasEnhancedCleaning, enhancedCleaning.commonAreasEnhancedCleaning) &&
        Objects.equals(this.commonAreasEnhancedCleaningException, enhancedCleaning.commonAreasEnhancedCleaningException) &&
        Objects.equals(this.employeesTrainedCleaningProcedures, enhancedCleaning.employeesTrainedCleaningProcedures) &&
        Objects.equals(this.employeesTrainedCleaningProceduresException, enhancedCleaning.employeesTrainedCleaningProceduresException) &&
        Objects.equals(this.employeesTrainedThoroughHandWashing, enhancedCleaning.employeesTrainedThoroughHandWashing) &&
        Objects.equals(this.employeesTrainedThoroughHandWashingException, enhancedCleaning.employeesTrainedThoroughHandWashingException) &&
        Objects.equals(this.employeesWearProtectiveEquipment, enhancedCleaning.employeesWearProtectiveEquipment) &&
        Objects.equals(this.employeesWearProtectiveEquipmentException, enhancedCleaning.employeesWearProtectiveEquipmentException) &&
        Objects.equals(this.guestRoomsEnhancedCleaning, enhancedCleaning.guestRoomsEnhancedCleaning) &&
        Objects.equals(this.guestRoomsEnhancedCleaningException, enhancedCleaning.guestRoomsEnhancedCleaningException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commercialGradeDisinfectantCleaning, commercialGradeDisinfectantCleaningException, commonAreasEnhancedCleaning, commonAreasEnhancedCleaningException, employeesTrainedCleaningProcedures, employeesTrainedCleaningProceduresException, employeesTrainedThoroughHandWashing, employeesTrainedThoroughHandWashingException, employeesWearProtectiveEquipment, employeesWearProtectiveEquipmentException, guestRoomsEnhancedCleaning, guestRoomsEnhancedCleaningException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedCleaning {\n");
    sb.append("    commercialGradeDisinfectantCleaning: ").append(toIndentedString(commercialGradeDisinfectantCleaning)).append("\n");
    sb.append("    commercialGradeDisinfectantCleaningException: ").append(toIndentedString(commercialGradeDisinfectantCleaningException)).append("\n");
    sb.append("    commonAreasEnhancedCleaning: ").append(toIndentedString(commonAreasEnhancedCleaning)).append("\n");
    sb.append("    commonAreasEnhancedCleaningException: ").append(toIndentedString(commonAreasEnhancedCleaningException)).append("\n");
    sb.append("    employeesTrainedCleaningProcedures: ").append(toIndentedString(employeesTrainedCleaningProcedures)).append("\n");
    sb.append("    employeesTrainedCleaningProceduresException: ").append(toIndentedString(employeesTrainedCleaningProceduresException)).append("\n");
    sb.append("    employeesTrainedThoroughHandWashing: ").append(toIndentedString(employeesTrainedThoroughHandWashing)).append("\n");
    sb.append("    employeesTrainedThoroughHandWashingException: ").append(toIndentedString(employeesTrainedThoroughHandWashingException)).append("\n");
    sb.append("    employeesWearProtectiveEquipment: ").append(toIndentedString(employeesWearProtectiveEquipment)).append("\n");
    sb.append("    employeesWearProtectiveEquipmentException: ").append(toIndentedString(employeesWearProtectiveEquipmentException)).append("\n");
    sb.append("    guestRoomsEnhancedCleaning: ").append(toIndentedString(guestRoomsEnhancedCleaning)).append("\n");
    sb.append("    guestRoomsEnhancedCleaningException: ").append(toIndentedString(guestRoomsEnhancedCleaningException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commercialGradeDisinfectantCleaning");
    openapiFields.add("commercialGradeDisinfectantCleaningException");
    openapiFields.add("commonAreasEnhancedCleaning");
    openapiFields.add("commonAreasEnhancedCleaningException");
    openapiFields.add("employeesTrainedCleaningProcedures");
    openapiFields.add("employeesTrainedCleaningProceduresException");
    openapiFields.add("employeesTrainedThoroughHandWashing");
    openapiFields.add("employeesTrainedThoroughHandWashingException");
    openapiFields.add("employeesWearProtectiveEquipment");
    openapiFields.add("employeesWearProtectiveEquipmentException");
    openapiFields.add("guestRoomsEnhancedCleaning");
    openapiFields.add("guestRoomsEnhancedCleaningException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnhancedCleaning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedCleaning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedCleaning is not found in the empty JSON string", EnhancedCleaning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedCleaning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedCleaning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commercialGradeDisinfectantCleaningException") != null && !jsonObj.get("commercialGradeDisinfectantCleaningException").isJsonNull()) && !jsonObj.get("commercialGradeDisinfectantCleaningException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialGradeDisinfectantCleaningException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialGradeDisinfectantCleaningException").toString()));
      }
      // validate the optional field `commercialGradeDisinfectantCleaningException`
      if (jsonObj.get("commercialGradeDisinfectantCleaningException") != null && !jsonObj.get("commercialGradeDisinfectantCleaningException").isJsonNull()) {
        CommercialGradeDisinfectantCleaningExceptionEnum.validateJsonElement(jsonObj.get("commercialGradeDisinfectantCleaningException"));
      }
      if ((jsonObj.get("commonAreasEnhancedCleaningException") != null && !jsonObj.get("commonAreasEnhancedCleaningException").isJsonNull()) && !jsonObj.get("commonAreasEnhancedCleaningException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonAreasEnhancedCleaningException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonAreasEnhancedCleaningException").toString()));
      }
      // validate the optional field `commonAreasEnhancedCleaningException`
      if (jsonObj.get("commonAreasEnhancedCleaningException") != null && !jsonObj.get("commonAreasEnhancedCleaningException").isJsonNull()) {
        CommonAreasEnhancedCleaningExceptionEnum.validateJsonElement(jsonObj.get("commonAreasEnhancedCleaningException"));
      }
      if ((jsonObj.get("employeesTrainedCleaningProceduresException") != null && !jsonObj.get("employeesTrainedCleaningProceduresException").isJsonNull()) && !jsonObj.get("employeesTrainedCleaningProceduresException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeesTrainedCleaningProceduresException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeesTrainedCleaningProceduresException").toString()));
      }
      // validate the optional field `employeesTrainedCleaningProceduresException`
      if (jsonObj.get("employeesTrainedCleaningProceduresException") != null && !jsonObj.get("employeesTrainedCleaningProceduresException").isJsonNull()) {
        EmployeesTrainedCleaningProceduresExceptionEnum.validateJsonElement(jsonObj.get("employeesTrainedCleaningProceduresException"));
      }
      if ((jsonObj.get("employeesTrainedThoroughHandWashingException") != null && !jsonObj.get("employeesTrainedThoroughHandWashingException").isJsonNull()) && !jsonObj.get("employeesTrainedThoroughHandWashingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeesTrainedThoroughHandWashingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeesTrainedThoroughHandWashingException").toString()));
      }
      // validate the optional field `employeesTrainedThoroughHandWashingException`
      if (jsonObj.get("employeesTrainedThoroughHandWashingException") != null && !jsonObj.get("employeesTrainedThoroughHandWashingException").isJsonNull()) {
        EmployeesTrainedThoroughHandWashingExceptionEnum.validateJsonElement(jsonObj.get("employeesTrainedThoroughHandWashingException"));
      }
      if ((jsonObj.get("employeesWearProtectiveEquipmentException") != null && !jsonObj.get("employeesWearProtectiveEquipmentException").isJsonNull()) && !jsonObj.get("employeesWearProtectiveEquipmentException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeesWearProtectiveEquipmentException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeesWearProtectiveEquipmentException").toString()));
      }
      // validate the optional field `employeesWearProtectiveEquipmentException`
      if (jsonObj.get("employeesWearProtectiveEquipmentException") != null && !jsonObj.get("employeesWearProtectiveEquipmentException").isJsonNull()) {
        EmployeesWearProtectiveEquipmentExceptionEnum.validateJsonElement(jsonObj.get("employeesWearProtectiveEquipmentException"));
      }
      if ((jsonObj.get("guestRoomsEnhancedCleaningException") != null && !jsonObj.get("guestRoomsEnhancedCleaningException").isJsonNull()) && !jsonObj.get("guestRoomsEnhancedCleaningException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestRoomsEnhancedCleaningException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestRoomsEnhancedCleaningException").toString()));
      }
      // validate the optional field `guestRoomsEnhancedCleaningException`
      if (jsonObj.get("guestRoomsEnhancedCleaningException") != null && !jsonObj.get("guestRoomsEnhancedCleaningException").isJsonNull()) {
        GuestRoomsEnhancedCleaningExceptionEnum.validateJsonElement(jsonObj.get("guestRoomsEnhancedCleaningException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedCleaning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedCleaning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedCleaning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedCleaning.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedCleaning>() {
           @Override
           public void write(JsonWriter out, EnhancedCleaning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedCleaning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnhancedCleaning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnhancedCleaning
   * @throws IOException if the JSON string is invalid with respect to EnhancedCleaning
   */
  public static EnhancedCleaning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedCleaning.class);
  }

  /**
   * Convert an instance of EnhancedCleaning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

