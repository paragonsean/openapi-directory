/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An eco certificate awarded to the hotel. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcoCertification {
  public static final String SERIALIZED_NAME_AWARDED = "awarded";
  @SerializedName(SERIALIZED_NAME_AWARDED)
  private Boolean awarded;

  /**
   * Awarded exception.
   */
  @JsonAdapter(AwardedExceptionEnum.Adapter.class)
  public enum AwardedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AwardedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AwardedExceptionEnum fromValue(String value) {
      for (AwardedExceptionEnum b : AwardedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AwardedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AwardedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AwardedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AwardedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AwardedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AWARDED_EXCEPTION = "awardedException";
  @SerializedName(SERIALIZED_NAME_AWARDED_EXCEPTION)
  private AwardedExceptionEnum awardedException;

  /**
   * Required. The eco certificate.
   */
  @JsonAdapter(EcoCertificateEnum.Adapter.class)
  public enum EcoCertificateEnum {
    ECO_CERTIFICATE_UNSPECIFIED("ECO_CERTIFICATE_UNSPECIFIED"),
    
    ISO14001("ISO14001"),
    
    ISO50001("ISO50001"),
    
    ASIAN_ECOTOURISM("ASIAN_ECOTOURISM"),
    
    BIOSPHERE_RESPOSNIBLE_TOURISM("BIOSPHERE_RESPOSNIBLE_TOURISM"),
    
    BUREAU_VERITAS("BUREAU_VERITAS"),
    
    CONTROL_UNION("CONTROL_UNION"),
    
    EARTHCHECK("EARTHCHECK"),
    
    ECO_CERTIFICATION_MALTA("ECO_CERTIFICATION_MALTA"),
    
    ECOTOURISM_AUSTRALIAS_ECO("ECOTOURISM_AUSTRALIAS_ECO"),
    
    GREAT_GREEN_DEAL("GREAT_GREEN_DEAL"),
    
    GREEN_GLOBE("GREEN_GLOBE"),
    
    GREEN_GROWTH2050("GREEN_GROWTH2050"),
    
    GREEN_KEY("GREEN_KEY"),
    
    GREEN_KEY_ECO_RATING("GREEN_KEY_ECO_RATING"),
    
    GREEN_SEAL("GREEN_SEAL"),
    
    GREEN_STAR("GREEN_STAR"),
    
    GREEN_TOURISM_ACTIVE("GREEN_TOURISM_ACTIVE"),
    
    HILTON_LIGHTSTAY("HILTON_LIGHTSTAY"),
    
    HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY("HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY"),
    
    HOTELES_MAS_VERDES("HOTELES_MAS_VERDES"),
    
    NORDIC_SWAN_ECOLABEL("NORDIC_SWAN_ECOLABEL"),
    
    PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM("PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM"),
    
    SUSTAINABLE_TRAVEL_IRELAND("SUSTAINABLE_TRAVEL_IRELAND"),
    
    TOF_TIGERS_INITITIVES_PUG("TOF_TIGERS_INITITIVES_PUG"),
    
    TRAVELIFE("TRAVELIFE"),
    
    UNITED_CERTIFICATION_SYSTEMS_LIMITED("UNITED_CERTIFICATION_SYSTEMS_LIMITED"),
    
    VIREO_SRL("VIREO_SRL");

    private String value;

    EcoCertificateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EcoCertificateEnum fromValue(String value) {
      for (EcoCertificateEnum b : EcoCertificateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EcoCertificateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EcoCertificateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EcoCertificateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EcoCertificateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EcoCertificateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ECO_CERTIFICATE = "ecoCertificate";
  @SerializedName(SERIALIZED_NAME_ECO_CERTIFICATE)
  private EcoCertificateEnum ecoCertificate;

  public EcoCertification() {
  }

  public EcoCertification awarded(Boolean awarded) {
    this.awarded = awarded;
    return this;
  }

  /**
   * Whether the eco certificate was awarded or not.
   * @return awarded
   */
  @javax.annotation.Nullable
  public Boolean getAwarded() {
    return awarded;
  }

  public void setAwarded(Boolean awarded) {
    this.awarded = awarded;
  }


  public EcoCertification awardedException(AwardedExceptionEnum awardedException) {
    this.awardedException = awardedException;
    return this;
  }

  /**
   * Awarded exception.
   * @return awardedException
   */
  @javax.annotation.Nullable
  public AwardedExceptionEnum getAwardedException() {
    return awardedException;
  }

  public void setAwardedException(AwardedExceptionEnum awardedException) {
    this.awardedException = awardedException;
  }


  public EcoCertification ecoCertificate(EcoCertificateEnum ecoCertificate) {
    this.ecoCertificate = ecoCertificate;
    return this;
  }

  /**
   * Required. The eco certificate.
   * @return ecoCertificate
   */
  @javax.annotation.Nullable
  public EcoCertificateEnum getEcoCertificate() {
    return ecoCertificate;
  }

  public void setEcoCertificate(EcoCertificateEnum ecoCertificate) {
    this.ecoCertificate = ecoCertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcoCertification ecoCertification = (EcoCertification) o;
    return Objects.equals(this.awarded, ecoCertification.awarded) &&
        Objects.equals(this.awardedException, ecoCertification.awardedException) &&
        Objects.equals(this.ecoCertificate, ecoCertification.ecoCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awarded, awardedException, ecoCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcoCertification {\n");
    sb.append("    awarded: ").append(toIndentedString(awarded)).append("\n");
    sb.append("    awardedException: ").append(toIndentedString(awardedException)).append("\n");
    sb.append("    ecoCertificate: ").append(toIndentedString(ecoCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awarded");
    openapiFields.add("awardedException");
    openapiFields.add("ecoCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcoCertification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcoCertification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcoCertification is not found in the empty JSON string", EcoCertification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcoCertification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcoCertification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awardedException") != null && !jsonObj.get("awardedException").isJsonNull()) && !jsonObj.get("awardedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awardedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awardedException").toString()));
      }
      // validate the optional field `awardedException`
      if (jsonObj.get("awardedException") != null && !jsonObj.get("awardedException").isJsonNull()) {
        AwardedExceptionEnum.validateJsonElement(jsonObj.get("awardedException"));
      }
      if ((jsonObj.get("ecoCertificate") != null && !jsonObj.get("ecoCertificate").isJsonNull()) && !jsonObj.get("ecoCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ecoCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ecoCertificate").toString()));
      }
      // validate the optional field `ecoCertificate`
      if (jsonObj.get("ecoCertificate") != null && !jsonObj.get("ecoCertificate").isJsonNull()) {
        EcoCertificateEnum.validateJsonElement(jsonObj.get("ecoCertificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcoCertification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcoCertification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcoCertification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcoCertification.class));

       return (TypeAdapter<T>) new TypeAdapter<EcoCertification>() {
           @Override
           public void write(JsonWriter out, EcoCertification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcoCertification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcoCertification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcoCertification
   * @throws IOException if the JSON string is invalid with respect to EcoCertification
   */
  public static EcoCertification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcoCertification.class);
  }

  /**
   * Convert an instance of EcoCertification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

