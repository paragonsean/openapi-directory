/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Swimming pool or recreational water facilities available at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pools {
  public static final String SERIALIZED_NAME_ADULT_POOL = "adultPool";
  @SerializedName(SERIALIZED_NAME_ADULT_POOL)
  private Boolean adultPool;

  /**
   * Adult pool exception.
   */
  @JsonAdapter(AdultPoolExceptionEnum.Adapter.class)
  public enum AdultPoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AdultPoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdultPoolExceptionEnum fromValue(String value) {
      for (AdultPoolExceptionEnum b : AdultPoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdultPoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdultPoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdultPoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdultPoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdultPoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADULT_POOL_EXCEPTION = "adultPoolException";
  @SerializedName(SERIALIZED_NAME_ADULT_POOL_EXCEPTION)
  private AdultPoolExceptionEnum adultPoolException;

  public static final String SERIALIZED_NAME_HOT_TUB = "hotTub";
  @SerializedName(SERIALIZED_NAME_HOT_TUB)
  private Boolean hotTub;

  /**
   * Hot tub exception.
   */
  @JsonAdapter(HotTubExceptionEnum.Adapter.class)
  public enum HotTubExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HotTubExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HotTubExceptionEnum fromValue(String value) {
      for (HotTubExceptionEnum b : HotTubExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HotTubExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HotTubExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HotTubExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HotTubExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HotTubExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOT_TUB_EXCEPTION = "hotTubException";
  @SerializedName(SERIALIZED_NAME_HOT_TUB_EXCEPTION)
  private HotTubExceptionEnum hotTubException;

  public static final String SERIALIZED_NAME_INDOOR_POOL = "indoorPool";
  @SerializedName(SERIALIZED_NAME_INDOOR_POOL)
  private Boolean indoorPool;

  /**
   * Indoor pool exception.
   */
  @JsonAdapter(IndoorPoolExceptionEnum.Adapter.class)
  public enum IndoorPoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndoorPoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndoorPoolExceptionEnum fromValue(String value) {
      for (IndoorPoolExceptionEnum b : IndoorPoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndoorPoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndoorPoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndoorPoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndoorPoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndoorPoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDOOR_POOL_EXCEPTION = "indoorPoolException";
  @SerializedName(SERIALIZED_NAME_INDOOR_POOL_EXCEPTION)
  private IndoorPoolExceptionEnum indoorPoolException;

  public static final String SERIALIZED_NAME_INDOOR_POOLS_COUNT = "indoorPoolsCount";
  @SerializedName(SERIALIZED_NAME_INDOOR_POOLS_COUNT)
  private Integer indoorPoolsCount;

  /**
   * Indoor pools count exception.
   */
  @JsonAdapter(IndoorPoolsCountExceptionEnum.Adapter.class)
  public enum IndoorPoolsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndoorPoolsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndoorPoolsCountExceptionEnum fromValue(String value) {
      for (IndoorPoolsCountExceptionEnum b : IndoorPoolsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndoorPoolsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndoorPoolsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndoorPoolsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndoorPoolsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndoorPoolsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDOOR_POOLS_COUNT_EXCEPTION = "indoorPoolsCountException";
  @SerializedName(SERIALIZED_NAME_INDOOR_POOLS_COUNT_EXCEPTION)
  private IndoorPoolsCountExceptionEnum indoorPoolsCountException;

  public static final String SERIALIZED_NAME_LAZY_RIVER = "lazyRiver";
  @SerializedName(SERIALIZED_NAME_LAZY_RIVER)
  private Boolean lazyRiver;

  /**
   * Lazy river exception.
   */
  @JsonAdapter(LazyRiverExceptionEnum.Adapter.class)
  public enum LazyRiverExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LazyRiverExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LazyRiverExceptionEnum fromValue(String value) {
      for (LazyRiverExceptionEnum b : LazyRiverExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LazyRiverExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LazyRiverExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LazyRiverExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LazyRiverExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LazyRiverExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAZY_RIVER_EXCEPTION = "lazyRiverException";
  @SerializedName(SERIALIZED_NAME_LAZY_RIVER_EXCEPTION)
  private LazyRiverExceptionEnum lazyRiverException;

  public static final String SERIALIZED_NAME_LIFEGUARD = "lifeguard";
  @SerializedName(SERIALIZED_NAME_LIFEGUARD)
  private Boolean lifeguard;

  /**
   * Lifeguard exception.
   */
  @JsonAdapter(LifeguardExceptionEnum.Adapter.class)
  public enum LifeguardExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LifeguardExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifeguardExceptionEnum fromValue(String value) {
      for (LifeguardExceptionEnum b : LifeguardExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifeguardExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifeguardExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifeguardExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifeguardExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LifeguardExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFEGUARD_EXCEPTION = "lifeguardException";
  @SerializedName(SERIALIZED_NAME_LIFEGUARD_EXCEPTION)
  private LifeguardExceptionEnum lifeguardException;

  public static final String SERIALIZED_NAME_OUTDOOR_POOL = "outdoorPool";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_POOL)
  private Boolean outdoorPool;

  /**
   * Outdoor pool exception.
   */
  @JsonAdapter(OutdoorPoolExceptionEnum.Adapter.class)
  public enum OutdoorPoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OutdoorPoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutdoorPoolExceptionEnum fromValue(String value) {
      for (OutdoorPoolExceptionEnum b : OutdoorPoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutdoorPoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutdoorPoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutdoorPoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutdoorPoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutdoorPoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTDOOR_POOL_EXCEPTION = "outdoorPoolException";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_POOL_EXCEPTION)
  private OutdoorPoolExceptionEnum outdoorPoolException;

  public static final String SERIALIZED_NAME_OUTDOOR_POOLS_COUNT = "outdoorPoolsCount";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_POOLS_COUNT)
  private Integer outdoorPoolsCount;

  /**
   * Outdoor pools count exception.
   */
  @JsonAdapter(OutdoorPoolsCountExceptionEnum.Adapter.class)
  public enum OutdoorPoolsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OutdoorPoolsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutdoorPoolsCountExceptionEnum fromValue(String value) {
      for (OutdoorPoolsCountExceptionEnum b : OutdoorPoolsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutdoorPoolsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutdoorPoolsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutdoorPoolsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutdoorPoolsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutdoorPoolsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTDOOR_POOLS_COUNT_EXCEPTION = "outdoorPoolsCountException";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_POOLS_COUNT_EXCEPTION)
  private OutdoorPoolsCountExceptionEnum outdoorPoolsCountException;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private Boolean pool;

  /**
   * Pool exception.
   */
  @JsonAdapter(PoolExceptionEnum.Adapter.class)
  public enum PoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoolExceptionEnum fromValue(String value) {
      for (PoolExceptionEnum b : PoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POOL_EXCEPTION = "poolException";
  @SerializedName(SERIALIZED_NAME_POOL_EXCEPTION)
  private PoolExceptionEnum poolException;

  public static final String SERIALIZED_NAME_POOLS_COUNT = "poolsCount";
  @SerializedName(SERIALIZED_NAME_POOLS_COUNT)
  private Integer poolsCount;

  /**
   * Pools count exception.
   */
  @JsonAdapter(PoolsCountExceptionEnum.Adapter.class)
  public enum PoolsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PoolsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoolsCountExceptionEnum fromValue(String value) {
      for (PoolsCountExceptionEnum b : PoolsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoolsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoolsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoolsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoolsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoolsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POOLS_COUNT_EXCEPTION = "poolsCountException";
  @SerializedName(SERIALIZED_NAME_POOLS_COUNT_EXCEPTION)
  private PoolsCountExceptionEnum poolsCountException;

  public static final String SERIALIZED_NAME_WADING_POOL = "wadingPool";
  @SerializedName(SERIALIZED_NAME_WADING_POOL)
  private Boolean wadingPool;

  /**
   * Wading pool exception.
   */
  @JsonAdapter(WadingPoolExceptionEnum.Adapter.class)
  public enum WadingPoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WadingPoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WadingPoolExceptionEnum fromValue(String value) {
      for (WadingPoolExceptionEnum b : WadingPoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WadingPoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WadingPoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WadingPoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WadingPoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WadingPoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WADING_POOL_EXCEPTION = "wadingPoolException";
  @SerializedName(SERIALIZED_NAME_WADING_POOL_EXCEPTION)
  private WadingPoolExceptionEnum wadingPoolException;

  public static final String SERIALIZED_NAME_WATER_PARK = "waterPark";
  @SerializedName(SERIALIZED_NAME_WATER_PARK)
  private Boolean waterPark;

  /**
   * Water park exception.
   */
  @JsonAdapter(WaterParkExceptionEnum.Adapter.class)
  public enum WaterParkExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterParkExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterParkExceptionEnum fromValue(String value) {
      for (WaterParkExceptionEnum b : WaterParkExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterParkExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterParkExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterParkExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterParkExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterParkExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_PARK_EXCEPTION = "waterParkException";
  @SerializedName(SERIALIZED_NAME_WATER_PARK_EXCEPTION)
  private WaterParkExceptionEnum waterParkException;

  public static final String SERIALIZED_NAME_WATERSLIDE = "waterslide";
  @SerializedName(SERIALIZED_NAME_WATERSLIDE)
  private Boolean waterslide;

  /**
   * Waterslide exception.
   */
  @JsonAdapter(WaterslideExceptionEnum.Adapter.class)
  public enum WaterslideExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterslideExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterslideExceptionEnum fromValue(String value) {
      for (WaterslideExceptionEnum b : WaterslideExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterslideExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterslideExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterslideExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterslideExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterslideExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATERSLIDE_EXCEPTION = "waterslideException";
  @SerializedName(SERIALIZED_NAME_WATERSLIDE_EXCEPTION)
  private WaterslideExceptionEnum waterslideException;

  public static final String SERIALIZED_NAME_WAVE_POOL = "wavePool";
  @SerializedName(SERIALIZED_NAME_WAVE_POOL)
  private Boolean wavePool;

  /**
   * Wave pool exception.
   */
  @JsonAdapter(WavePoolExceptionEnum.Adapter.class)
  public enum WavePoolExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WavePoolExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WavePoolExceptionEnum fromValue(String value) {
      for (WavePoolExceptionEnum b : WavePoolExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WavePoolExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WavePoolExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WavePoolExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WavePoolExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WavePoolExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAVE_POOL_EXCEPTION = "wavePoolException";
  @SerializedName(SERIALIZED_NAME_WAVE_POOL_EXCEPTION)
  private WavePoolExceptionEnum wavePoolException;

  public Pools() {
  }

  public Pools adultPool(Boolean adultPool) {
    this.adultPool = adultPool;
    return this;
  }

  /**
   * Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.
   * @return adultPool
   */
  @javax.annotation.Nullable
  public Boolean getAdultPool() {
    return adultPool;
  }

  public void setAdultPool(Boolean adultPool) {
    this.adultPool = adultPool;
  }


  public Pools adultPoolException(AdultPoolExceptionEnum adultPoolException) {
    this.adultPoolException = adultPoolException;
    return this;
  }

  /**
   * Adult pool exception.
   * @return adultPoolException
   */
  @javax.annotation.Nullable
  public AdultPoolExceptionEnum getAdultPoolException() {
    return adultPoolException;
  }

  public void setAdultPoolException(AdultPoolExceptionEnum adultPoolException) {
    this.adultPoolException = adultPoolException;
  }


  public Pools hotTub(Boolean hotTub) {
    this.hotTub = hotTub;
    return this;
  }

  /**
   * Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.
   * @return hotTub
   */
  @javax.annotation.Nullable
  public Boolean getHotTub() {
    return hotTub;
  }

  public void setHotTub(Boolean hotTub) {
    this.hotTub = hotTub;
  }


  public Pools hotTubException(HotTubExceptionEnum hotTubException) {
    this.hotTubException = hotTubException;
    return this;
  }

  /**
   * Hot tub exception.
   * @return hotTubException
   */
  @javax.annotation.Nullable
  public HotTubExceptionEnum getHotTubException() {
    return hotTubException;
  }

  public void setHotTubException(HotTubExceptionEnum hotTubException) {
    this.hotTubException = hotTubException;
  }


  public Pools indoorPool(Boolean indoorPool) {
    this.indoorPool = indoorPool;
    return this;
  }

  /**
   * Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
   * @return indoorPool
   */
  @javax.annotation.Nullable
  public Boolean getIndoorPool() {
    return indoorPool;
  }

  public void setIndoorPool(Boolean indoorPool) {
    this.indoorPool = indoorPool;
  }


  public Pools indoorPoolException(IndoorPoolExceptionEnum indoorPoolException) {
    this.indoorPoolException = indoorPoolException;
    return this;
  }

  /**
   * Indoor pool exception.
   * @return indoorPoolException
   */
  @javax.annotation.Nullable
  public IndoorPoolExceptionEnum getIndoorPoolException() {
    return indoorPoolException;
  }

  public void setIndoorPoolException(IndoorPoolExceptionEnum indoorPoolException) {
    this.indoorPoolException = indoorPoolException;
  }


  public Pools indoorPoolsCount(Integer indoorPoolsCount) {
    this.indoorPoolsCount = indoorPoolsCount;
    return this;
  }

  /**
   * Indoor pools count. The sum of all indoor pools at the hotel.
   * @return indoorPoolsCount
   */
  @javax.annotation.Nullable
  public Integer getIndoorPoolsCount() {
    return indoorPoolsCount;
  }

  public void setIndoorPoolsCount(Integer indoorPoolsCount) {
    this.indoorPoolsCount = indoorPoolsCount;
  }


  public Pools indoorPoolsCountException(IndoorPoolsCountExceptionEnum indoorPoolsCountException) {
    this.indoorPoolsCountException = indoorPoolsCountException;
    return this;
  }

  /**
   * Indoor pools count exception.
   * @return indoorPoolsCountException
   */
  @javax.annotation.Nullable
  public IndoorPoolsCountExceptionEnum getIndoorPoolsCountException() {
    return indoorPoolsCountException;
  }

  public void setIndoorPoolsCountException(IndoorPoolsCountExceptionEnum indoorPoolsCountException) {
    this.indoorPoolsCountException = indoorPoolsCountException;
  }


  public Pools lazyRiver(Boolean lazyRiver) {
    this.lazyRiver = lazyRiver;
    return this;
  }

  /**
   * Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.
   * @return lazyRiver
   */
  @javax.annotation.Nullable
  public Boolean getLazyRiver() {
    return lazyRiver;
  }

  public void setLazyRiver(Boolean lazyRiver) {
    this.lazyRiver = lazyRiver;
  }


  public Pools lazyRiverException(LazyRiverExceptionEnum lazyRiverException) {
    this.lazyRiverException = lazyRiverException;
    return this;
  }

  /**
   * Lazy river exception.
   * @return lazyRiverException
   */
  @javax.annotation.Nullable
  public LazyRiverExceptionEnum getLazyRiverException() {
    return lazyRiverException;
  }

  public void setLazyRiverException(LazyRiverExceptionEnum lazyRiverException) {
    this.lazyRiverException = lazyRiverException;
  }


  public Pools lifeguard(Boolean lifeguard) {
    this.lifeguard = lifeguard;
    return this;
  }

  /**
   * Lifeguard. A trained member of the hotel staff stationed by the hotel&#39;s indoor or outdoor swimming area and responsible for the safety of swimming guests.
   * @return lifeguard
   */
  @javax.annotation.Nullable
  public Boolean getLifeguard() {
    return lifeguard;
  }

  public void setLifeguard(Boolean lifeguard) {
    this.lifeguard = lifeguard;
  }


  public Pools lifeguardException(LifeguardExceptionEnum lifeguardException) {
    this.lifeguardException = lifeguardException;
    return this;
  }

  /**
   * Lifeguard exception.
   * @return lifeguardException
   */
  @javax.annotation.Nullable
  public LifeguardExceptionEnum getLifeguardException() {
    return lifeguardException;
  }

  public void setLifeguardException(LifeguardExceptionEnum lifeguardException) {
    this.lifeguardException = lifeguardException;
  }


  public Pools outdoorPool(Boolean outdoorPool) {
    this.outdoorPool = outdoorPool;
    return this;
  }

  /**
   * Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.
   * @return outdoorPool
   */
  @javax.annotation.Nullable
  public Boolean getOutdoorPool() {
    return outdoorPool;
  }

  public void setOutdoorPool(Boolean outdoorPool) {
    this.outdoorPool = outdoorPool;
  }


  public Pools outdoorPoolException(OutdoorPoolExceptionEnum outdoorPoolException) {
    this.outdoorPoolException = outdoorPoolException;
    return this;
  }

  /**
   * Outdoor pool exception.
   * @return outdoorPoolException
   */
  @javax.annotation.Nullable
  public OutdoorPoolExceptionEnum getOutdoorPoolException() {
    return outdoorPoolException;
  }

  public void setOutdoorPoolException(OutdoorPoolExceptionEnum outdoorPoolException) {
    this.outdoorPoolException = outdoorPoolException;
  }


  public Pools outdoorPoolsCount(Integer outdoorPoolsCount) {
    this.outdoorPoolsCount = outdoorPoolsCount;
    return this;
  }

  /**
   * Outdoor pools count. The sum of all outdoor pools at the hotel.
   * @return outdoorPoolsCount
   */
  @javax.annotation.Nullable
  public Integer getOutdoorPoolsCount() {
    return outdoorPoolsCount;
  }

  public void setOutdoorPoolsCount(Integer outdoorPoolsCount) {
    this.outdoorPoolsCount = outdoorPoolsCount;
  }


  public Pools outdoorPoolsCountException(OutdoorPoolsCountExceptionEnum outdoorPoolsCountException) {
    this.outdoorPoolsCountException = outdoorPoolsCountException;
    return this;
  }

  /**
   * Outdoor pools count exception.
   * @return outdoorPoolsCountException
   */
  @javax.annotation.Nullable
  public OutdoorPoolsCountExceptionEnum getOutdoorPoolsCountException() {
    return outdoorPoolsCountException;
  }

  public void setOutdoorPoolsCountException(OutdoorPoolsCountExceptionEnum outdoorPoolsCountException) {
    this.outdoorPoolsCountException = outdoorPoolsCountException;
  }


  public Pools pool(Boolean pool) {
    this.pool = pool;
    return this;
  }

  /**
   * Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
   * @return pool
   */
  @javax.annotation.Nullable
  public Boolean getPool() {
    return pool;
  }

  public void setPool(Boolean pool) {
    this.pool = pool;
  }


  public Pools poolException(PoolExceptionEnum poolException) {
    this.poolException = poolException;
    return this;
  }

  /**
   * Pool exception.
   * @return poolException
   */
  @javax.annotation.Nullable
  public PoolExceptionEnum getPoolException() {
    return poolException;
  }

  public void setPoolException(PoolExceptionEnum poolException) {
    this.poolException = poolException;
  }


  public Pools poolsCount(Integer poolsCount) {
    this.poolsCount = poolsCount;
    return this;
  }

  /**
   * Pools count. The sum of all pools at the hotel.
   * @return poolsCount
   */
  @javax.annotation.Nullable
  public Integer getPoolsCount() {
    return poolsCount;
  }

  public void setPoolsCount(Integer poolsCount) {
    this.poolsCount = poolsCount;
  }


  public Pools poolsCountException(PoolsCountExceptionEnum poolsCountException) {
    this.poolsCountException = poolsCountException;
    return this;
  }

  /**
   * Pools count exception.
   * @return poolsCountException
   */
  @javax.annotation.Nullable
  public PoolsCountExceptionEnum getPoolsCountException() {
    return poolsCountException;
  }

  public void setPoolsCountException(PoolsCountExceptionEnum poolsCountException) {
    this.poolsCountException = poolsCountException;
  }


  public Pools wadingPool(Boolean wadingPool) {
    this.wadingPool = wadingPool;
    return this;
  }

  /**
   * Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.
   * @return wadingPool
   */
  @javax.annotation.Nullable
  public Boolean getWadingPool() {
    return wadingPool;
  }

  public void setWadingPool(Boolean wadingPool) {
    this.wadingPool = wadingPool;
  }


  public Pools wadingPoolException(WadingPoolExceptionEnum wadingPoolException) {
    this.wadingPoolException = wadingPoolException;
    return this;
  }

  /**
   * Wading pool exception.
   * @return wadingPoolException
   */
  @javax.annotation.Nullable
  public WadingPoolExceptionEnum getWadingPoolException() {
    return wadingPoolException;
  }

  public void setWadingPoolException(WadingPoolExceptionEnum wadingPoolException) {
    this.wadingPoolException = wadingPoolException;
  }


  public Pools waterPark(Boolean waterPark) {
    this.waterPark = waterPark;
    return this;
  }

  /**
   * Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.
   * @return waterPark
   */
  @javax.annotation.Nullable
  public Boolean getWaterPark() {
    return waterPark;
  }

  public void setWaterPark(Boolean waterPark) {
    this.waterPark = waterPark;
  }


  public Pools waterParkException(WaterParkExceptionEnum waterParkException) {
    this.waterParkException = waterParkException;
    return this;
  }

  /**
   * Water park exception.
   * @return waterParkException
   */
  @javax.annotation.Nullable
  public WaterParkExceptionEnum getWaterParkException() {
    return waterParkException;
  }

  public void setWaterParkException(WaterParkExceptionEnum waterParkException) {
    this.waterParkException = waterParkException;
  }


  public Pools waterslide(Boolean waterslide) {
    this.waterslide = waterslide;
    return this;
  }

  /**
   * Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.
   * @return waterslide
   */
  @javax.annotation.Nullable
  public Boolean getWaterslide() {
    return waterslide;
  }

  public void setWaterslide(Boolean waterslide) {
    this.waterslide = waterslide;
  }


  public Pools waterslideException(WaterslideExceptionEnum waterslideException) {
    this.waterslideException = waterslideException;
    return this;
  }

  /**
   * Waterslide exception.
   * @return waterslideException
   */
  @javax.annotation.Nullable
  public WaterslideExceptionEnum getWaterslideException() {
    return waterslideException;
  }

  public void setWaterslideException(WaterslideExceptionEnum waterslideException) {
    this.waterslideException = waterslideException;
  }


  public Pools wavePool(Boolean wavePool) {
    this.wavePool = wavePool;
    return this;
  }

  /**
   * Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean&#39;s crests.
   * @return wavePool
   */
  @javax.annotation.Nullable
  public Boolean getWavePool() {
    return wavePool;
  }

  public void setWavePool(Boolean wavePool) {
    this.wavePool = wavePool;
  }


  public Pools wavePoolException(WavePoolExceptionEnum wavePoolException) {
    this.wavePoolException = wavePoolException;
    return this;
  }

  /**
   * Wave pool exception.
   * @return wavePoolException
   */
  @javax.annotation.Nullable
  public WavePoolExceptionEnum getWavePoolException() {
    return wavePoolException;
  }

  public void setWavePoolException(WavePoolExceptionEnum wavePoolException) {
    this.wavePoolException = wavePoolException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pools pools = (Pools) o;
    return Objects.equals(this.adultPool, pools.adultPool) &&
        Objects.equals(this.adultPoolException, pools.adultPoolException) &&
        Objects.equals(this.hotTub, pools.hotTub) &&
        Objects.equals(this.hotTubException, pools.hotTubException) &&
        Objects.equals(this.indoorPool, pools.indoorPool) &&
        Objects.equals(this.indoorPoolException, pools.indoorPoolException) &&
        Objects.equals(this.indoorPoolsCount, pools.indoorPoolsCount) &&
        Objects.equals(this.indoorPoolsCountException, pools.indoorPoolsCountException) &&
        Objects.equals(this.lazyRiver, pools.lazyRiver) &&
        Objects.equals(this.lazyRiverException, pools.lazyRiverException) &&
        Objects.equals(this.lifeguard, pools.lifeguard) &&
        Objects.equals(this.lifeguardException, pools.lifeguardException) &&
        Objects.equals(this.outdoorPool, pools.outdoorPool) &&
        Objects.equals(this.outdoorPoolException, pools.outdoorPoolException) &&
        Objects.equals(this.outdoorPoolsCount, pools.outdoorPoolsCount) &&
        Objects.equals(this.outdoorPoolsCountException, pools.outdoorPoolsCountException) &&
        Objects.equals(this.pool, pools.pool) &&
        Objects.equals(this.poolException, pools.poolException) &&
        Objects.equals(this.poolsCount, pools.poolsCount) &&
        Objects.equals(this.poolsCountException, pools.poolsCountException) &&
        Objects.equals(this.wadingPool, pools.wadingPool) &&
        Objects.equals(this.wadingPoolException, pools.wadingPoolException) &&
        Objects.equals(this.waterPark, pools.waterPark) &&
        Objects.equals(this.waterParkException, pools.waterParkException) &&
        Objects.equals(this.waterslide, pools.waterslide) &&
        Objects.equals(this.waterslideException, pools.waterslideException) &&
        Objects.equals(this.wavePool, pools.wavePool) &&
        Objects.equals(this.wavePoolException, pools.wavePoolException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adultPool, adultPoolException, hotTub, hotTubException, indoorPool, indoorPoolException, indoorPoolsCount, indoorPoolsCountException, lazyRiver, lazyRiverException, lifeguard, lifeguardException, outdoorPool, outdoorPoolException, outdoorPoolsCount, outdoorPoolsCountException, pool, poolException, poolsCount, poolsCountException, wadingPool, wadingPoolException, waterPark, waterParkException, waterslide, waterslideException, wavePool, wavePoolException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pools {\n");
    sb.append("    adultPool: ").append(toIndentedString(adultPool)).append("\n");
    sb.append("    adultPoolException: ").append(toIndentedString(adultPoolException)).append("\n");
    sb.append("    hotTub: ").append(toIndentedString(hotTub)).append("\n");
    sb.append("    hotTubException: ").append(toIndentedString(hotTubException)).append("\n");
    sb.append("    indoorPool: ").append(toIndentedString(indoorPool)).append("\n");
    sb.append("    indoorPoolException: ").append(toIndentedString(indoorPoolException)).append("\n");
    sb.append("    indoorPoolsCount: ").append(toIndentedString(indoorPoolsCount)).append("\n");
    sb.append("    indoorPoolsCountException: ").append(toIndentedString(indoorPoolsCountException)).append("\n");
    sb.append("    lazyRiver: ").append(toIndentedString(lazyRiver)).append("\n");
    sb.append("    lazyRiverException: ").append(toIndentedString(lazyRiverException)).append("\n");
    sb.append("    lifeguard: ").append(toIndentedString(lifeguard)).append("\n");
    sb.append("    lifeguardException: ").append(toIndentedString(lifeguardException)).append("\n");
    sb.append("    outdoorPool: ").append(toIndentedString(outdoorPool)).append("\n");
    sb.append("    outdoorPoolException: ").append(toIndentedString(outdoorPoolException)).append("\n");
    sb.append("    outdoorPoolsCount: ").append(toIndentedString(outdoorPoolsCount)).append("\n");
    sb.append("    outdoorPoolsCountException: ").append(toIndentedString(outdoorPoolsCountException)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    poolException: ").append(toIndentedString(poolException)).append("\n");
    sb.append("    poolsCount: ").append(toIndentedString(poolsCount)).append("\n");
    sb.append("    poolsCountException: ").append(toIndentedString(poolsCountException)).append("\n");
    sb.append("    wadingPool: ").append(toIndentedString(wadingPool)).append("\n");
    sb.append("    wadingPoolException: ").append(toIndentedString(wadingPoolException)).append("\n");
    sb.append("    waterPark: ").append(toIndentedString(waterPark)).append("\n");
    sb.append("    waterParkException: ").append(toIndentedString(waterParkException)).append("\n");
    sb.append("    waterslide: ").append(toIndentedString(waterslide)).append("\n");
    sb.append("    waterslideException: ").append(toIndentedString(waterslideException)).append("\n");
    sb.append("    wavePool: ").append(toIndentedString(wavePool)).append("\n");
    sb.append("    wavePoolException: ").append(toIndentedString(wavePoolException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adultPool");
    openapiFields.add("adultPoolException");
    openapiFields.add("hotTub");
    openapiFields.add("hotTubException");
    openapiFields.add("indoorPool");
    openapiFields.add("indoorPoolException");
    openapiFields.add("indoorPoolsCount");
    openapiFields.add("indoorPoolsCountException");
    openapiFields.add("lazyRiver");
    openapiFields.add("lazyRiverException");
    openapiFields.add("lifeguard");
    openapiFields.add("lifeguardException");
    openapiFields.add("outdoorPool");
    openapiFields.add("outdoorPoolException");
    openapiFields.add("outdoorPoolsCount");
    openapiFields.add("outdoorPoolsCountException");
    openapiFields.add("pool");
    openapiFields.add("poolException");
    openapiFields.add("poolsCount");
    openapiFields.add("poolsCountException");
    openapiFields.add("wadingPool");
    openapiFields.add("wadingPoolException");
    openapiFields.add("waterPark");
    openapiFields.add("waterParkException");
    openapiFields.add("waterslide");
    openapiFields.add("waterslideException");
    openapiFields.add("wavePool");
    openapiFields.add("wavePoolException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pools
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pools.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pools is not found in the empty JSON string", Pools.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pools.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pools` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adultPoolException") != null && !jsonObj.get("adultPoolException").isJsonNull()) && !jsonObj.get("adultPoolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adultPoolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adultPoolException").toString()));
      }
      // validate the optional field `adultPoolException`
      if (jsonObj.get("adultPoolException") != null && !jsonObj.get("adultPoolException").isJsonNull()) {
        AdultPoolExceptionEnum.validateJsonElement(jsonObj.get("adultPoolException"));
      }
      if ((jsonObj.get("hotTubException") != null && !jsonObj.get("hotTubException").isJsonNull()) && !jsonObj.get("hotTubException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotTubException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotTubException").toString()));
      }
      // validate the optional field `hotTubException`
      if (jsonObj.get("hotTubException") != null && !jsonObj.get("hotTubException").isJsonNull()) {
        HotTubExceptionEnum.validateJsonElement(jsonObj.get("hotTubException"));
      }
      if ((jsonObj.get("indoorPoolException") != null && !jsonObj.get("indoorPoolException").isJsonNull()) && !jsonObj.get("indoorPoolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indoorPoolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indoorPoolException").toString()));
      }
      // validate the optional field `indoorPoolException`
      if (jsonObj.get("indoorPoolException") != null && !jsonObj.get("indoorPoolException").isJsonNull()) {
        IndoorPoolExceptionEnum.validateJsonElement(jsonObj.get("indoorPoolException"));
      }
      if ((jsonObj.get("indoorPoolsCountException") != null && !jsonObj.get("indoorPoolsCountException").isJsonNull()) && !jsonObj.get("indoorPoolsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indoorPoolsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indoorPoolsCountException").toString()));
      }
      // validate the optional field `indoorPoolsCountException`
      if (jsonObj.get("indoorPoolsCountException") != null && !jsonObj.get("indoorPoolsCountException").isJsonNull()) {
        IndoorPoolsCountExceptionEnum.validateJsonElement(jsonObj.get("indoorPoolsCountException"));
      }
      if ((jsonObj.get("lazyRiverException") != null && !jsonObj.get("lazyRiverException").isJsonNull()) && !jsonObj.get("lazyRiverException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lazyRiverException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lazyRiverException").toString()));
      }
      // validate the optional field `lazyRiverException`
      if (jsonObj.get("lazyRiverException") != null && !jsonObj.get("lazyRiverException").isJsonNull()) {
        LazyRiverExceptionEnum.validateJsonElement(jsonObj.get("lazyRiverException"));
      }
      if ((jsonObj.get("lifeguardException") != null && !jsonObj.get("lifeguardException").isJsonNull()) && !jsonObj.get("lifeguardException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeguardException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeguardException").toString()));
      }
      // validate the optional field `lifeguardException`
      if (jsonObj.get("lifeguardException") != null && !jsonObj.get("lifeguardException").isJsonNull()) {
        LifeguardExceptionEnum.validateJsonElement(jsonObj.get("lifeguardException"));
      }
      if ((jsonObj.get("outdoorPoolException") != null && !jsonObj.get("outdoorPoolException").isJsonNull()) && !jsonObj.get("outdoorPoolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outdoorPoolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outdoorPoolException").toString()));
      }
      // validate the optional field `outdoorPoolException`
      if (jsonObj.get("outdoorPoolException") != null && !jsonObj.get("outdoorPoolException").isJsonNull()) {
        OutdoorPoolExceptionEnum.validateJsonElement(jsonObj.get("outdoorPoolException"));
      }
      if ((jsonObj.get("outdoorPoolsCountException") != null && !jsonObj.get("outdoorPoolsCountException").isJsonNull()) && !jsonObj.get("outdoorPoolsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outdoorPoolsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outdoorPoolsCountException").toString()));
      }
      // validate the optional field `outdoorPoolsCountException`
      if (jsonObj.get("outdoorPoolsCountException") != null && !jsonObj.get("outdoorPoolsCountException").isJsonNull()) {
        OutdoorPoolsCountExceptionEnum.validateJsonElement(jsonObj.get("outdoorPoolsCountException"));
      }
      if ((jsonObj.get("poolException") != null && !jsonObj.get("poolException").isJsonNull()) && !jsonObj.get("poolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolException").toString()));
      }
      // validate the optional field `poolException`
      if (jsonObj.get("poolException") != null && !jsonObj.get("poolException").isJsonNull()) {
        PoolExceptionEnum.validateJsonElement(jsonObj.get("poolException"));
      }
      if ((jsonObj.get("poolsCountException") != null && !jsonObj.get("poolsCountException").isJsonNull()) && !jsonObj.get("poolsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolsCountException").toString()));
      }
      // validate the optional field `poolsCountException`
      if (jsonObj.get("poolsCountException") != null && !jsonObj.get("poolsCountException").isJsonNull()) {
        PoolsCountExceptionEnum.validateJsonElement(jsonObj.get("poolsCountException"));
      }
      if ((jsonObj.get("wadingPoolException") != null && !jsonObj.get("wadingPoolException").isJsonNull()) && !jsonObj.get("wadingPoolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wadingPoolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wadingPoolException").toString()));
      }
      // validate the optional field `wadingPoolException`
      if (jsonObj.get("wadingPoolException") != null && !jsonObj.get("wadingPoolException").isJsonNull()) {
        WadingPoolExceptionEnum.validateJsonElement(jsonObj.get("wadingPoolException"));
      }
      if ((jsonObj.get("waterParkException") != null && !jsonObj.get("waterParkException").isJsonNull()) && !jsonObj.get("waterParkException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterParkException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterParkException").toString()));
      }
      // validate the optional field `waterParkException`
      if (jsonObj.get("waterParkException") != null && !jsonObj.get("waterParkException").isJsonNull()) {
        WaterParkExceptionEnum.validateJsonElement(jsonObj.get("waterParkException"));
      }
      if ((jsonObj.get("waterslideException") != null && !jsonObj.get("waterslideException").isJsonNull()) && !jsonObj.get("waterslideException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterslideException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterslideException").toString()));
      }
      // validate the optional field `waterslideException`
      if (jsonObj.get("waterslideException") != null && !jsonObj.get("waterslideException").isJsonNull()) {
        WaterslideExceptionEnum.validateJsonElement(jsonObj.get("waterslideException"));
      }
      if ((jsonObj.get("wavePoolException") != null && !jsonObj.get("wavePoolException").isJsonNull()) && !jsonObj.get("wavePoolException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wavePoolException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wavePoolException").toString()));
      }
      // validate the optional field `wavePoolException`
      if (jsonObj.get("wavePoolException") != null && !jsonObj.get("wavePoolException").isJsonNull()) {
        WavePoolExceptionEnum.validateJsonElement(jsonObj.get("wavePoolException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pools.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pools' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pools> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pools.class));

       return (TypeAdapter<T>) new TypeAdapter<Pools>() {
           @Override
           public void write(JsonWriter out, Pools value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pools read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pools given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pools
   * @throws IOException if the JSON string is invalid with respect to Pools
   */
  public static Pools fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pools.class);
  }

  /**
   * Convert an instance of Pools to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

