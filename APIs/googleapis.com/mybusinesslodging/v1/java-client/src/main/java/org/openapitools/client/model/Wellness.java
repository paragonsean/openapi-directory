/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guest facilities at the property to promote or maintain health, beauty, and fitness.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Wellness {
  public static final String SERIALIZED_NAME_DOCTOR_ON_CALL = "doctorOnCall";
  @SerializedName(SERIALIZED_NAME_DOCTOR_ON_CALL)
  private Boolean doctorOnCall;

  /**
   * Doctor on call exception.
   */
  @JsonAdapter(DoctorOnCallExceptionEnum.Adapter.class)
  public enum DoctorOnCallExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DoctorOnCallExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DoctorOnCallExceptionEnum fromValue(String value) {
      for (DoctorOnCallExceptionEnum b : DoctorOnCallExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DoctorOnCallExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DoctorOnCallExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DoctorOnCallExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DoctorOnCallExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DoctorOnCallExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCTOR_ON_CALL_EXCEPTION = "doctorOnCallException";
  @SerializedName(SERIALIZED_NAME_DOCTOR_ON_CALL_EXCEPTION)
  private DoctorOnCallExceptionEnum doctorOnCallException;

  public static final String SERIALIZED_NAME_ELLIPTICAL_MACHINE = "ellipticalMachine";
  @SerializedName(SERIALIZED_NAME_ELLIPTICAL_MACHINE)
  private Boolean ellipticalMachine;

  /**
   * Elliptical machine exception.
   */
  @JsonAdapter(EllipticalMachineExceptionEnum.Adapter.class)
  public enum EllipticalMachineExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EllipticalMachineExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EllipticalMachineExceptionEnum fromValue(String value) {
      for (EllipticalMachineExceptionEnum b : EllipticalMachineExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EllipticalMachineExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EllipticalMachineExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EllipticalMachineExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EllipticalMachineExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EllipticalMachineExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELLIPTICAL_MACHINE_EXCEPTION = "ellipticalMachineException";
  @SerializedName(SERIALIZED_NAME_ELLIPTICAL_MACHINE_EXCEPTION)
  private EllipticalMachineExceptionEnum ellipticalMachineException;

  public static final String SERIALIZED_NAME_FITNESS_CENTER = "fitnessCenter";
  @SerializedName(SERIALIZED_NAME_FITNESS_CENTER)
  private Boolean fitnessCenter;

  /**
   * Fitness center exception.
   */
  @JsonAdapter(FitnessCenterExceptionEnum.Adapter.class)
  public enum FitnessCenterExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FitnessCenterExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FitnessCenterExceptionEnum fromValue(String value) {
      for (FitnessCenterExceptionEnum b : FitnessCenterExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FitnessCenterExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FitnessCenterExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FitnessCenterExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FitnessCenterExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FitnessCenterExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FITNESS_CENTER_EXCEPTION = "fitnessCenterException";
  @SerializedName(SERIALIZED_NAME_FITNESS_CENTER_EXCEPTION)
  private FitnessCenterExceptionEnum fitnessCenterException;

  public static final String SERIALIZED_NAME_FREE_FITNESS_CENTER = "freeFitnessCenter";
  @SerializedName(SERIALIZED_NAME_FREE_FITNESS_CENTER)
  private Boolean freeFitnessCenter;

  /**
   * Free fitness center exception.
   */
  @JsonAdapter(FreeFitnessCenterExceptionEnum.Adapter.class)
  public enum FreeFitnessCenterExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeFitnessCenterExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeFitnessCenterExceptionEnum fromValue(String value) {
      for (FreeFitnessCenterExceptionEnum b : FreeFitnessCenterExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeFitnessCenterExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeFitnessCenterExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeFitnessCenterExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeFitnessCenterExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeFitnessCenterExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_FITNESS_CENTER_EXCEPTION = "freeFitnessCenterException";
  @SerializedName(SERIALIZED_NAME_FREE_FITNESS_CENTER_EXCEPTION)
  private FreeFitnessCenterExceptionEnum freeFitnessCenterException;

  public static final String SERIALIZED_NAME_FREE_WEIGHTS = "freeWeights";
  @SerializedName(SERIALIZED_NAME_FREE_WEIGHTS)
  private Boolean freeWeights;

  /**
   * Free weights exception.
   */
  @JsonAdapter(FreeWeightsExceptionEnum.Adapter.class)
  public enum FreeWeightsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeWeightsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeWeightsExceptionEnum fromValue(String value) {
      for (FreeWeightsExceptionEnum b : FreeWeightsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeWeightsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeWeightsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeWeightsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeWeightsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeWeightsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_WEIGHTS_EXCEPTION = "freeWeightsException";
  @SerializedName(SERIALIZED_NAME_FREE_WEIGHTS_EXCEPTION)
  private FreeWeightsExceptionEnum freeWeightsException;

  public static final String SERIALIZED_NAME_MASSAGE = "massage";
  @SerializedName(SERIALIZED_NAME_MASSAGE)
  private Boolean massage;

  /**
   * Massage exception.
   */
  @JsonAdapter(MassageExceptionEnum.Adapter.class)
  public enum MassageExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MassageExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MassageExceptionEnum fromValue(String value) {
      for (MassageExceptionEnum b : MassageExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MassageExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MassageExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MassageExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MassageExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MassageExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MASSAGE_EXCEPTION = "massageException";
  @SerializedName(SERIALIZED_NAME_MASSAGE_EXCEPTION)
  private MassageExceptionEnum massageException;

  public static final String SERIALIZED_NAME_SALON = "salon";
  @SerializedName(SERIALIZED_NAME_SALON)
  private Boolean salon;

  /**
   * Salon exception.
   */
  @JsonAdapter(SalonExceptionEnum.Adapter.class)
  public enum SalonExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SalonExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalonExceptionEnum fromValue(String value) {
      for (SalonExceptionEnum b : SalonExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalonExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalonExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalonExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalonExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SalonExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SALON_EXCEPTION = "salonException";
  @SerializedName(SERIALIZED_NAME_SALON_EXCEPTION)
  private SalonExceptionEnum salonException;

  public static final String SERIALIZED_NAME_SAUNA = "sauna";
  @SerializedName(SERIALIZED_NAME_SAUNA)
  private Boolean sauna;

  /**
   * Sauna exception.
   */
  @JsonAdapter(SaunaExceptionEnum.Adapter.class)
  public enum SaunaExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SaunaExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SaunaExceptionEnum fromValue(String value) {
      for (SaunaExceptionEnum b : SaunaExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SaunaExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SaunaExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SaunaExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SaunaExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SaunaExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAUNA_EXCEPTION = "saunaException";
  @SerializedName(SERIALIZED_NAME_SAUNA_EXCEPTION)
  private SaunaExceptionEnum saunaException;

  public static final String SERIALIZED_NAME_SPA = "spa";
  @SerializedName(SERIALIZED_NAME_SPA)
  private Boolean spa;

  /**
   * Spa exception.
   */
  @JsonAdapter(SpaExceptionEnum.Adapter.class)
  public enum SpaExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SpaExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpaExceptionEnum fromValue(String value) {
      for (SpaExceptionEnum b : SpaExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpaExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpaExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpaExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpaExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpaExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPA_EXCEPTION = "spaException";
  @SerializedName(SERIALIZED_NAME_SPA_EXCEPTION)
  private SpaExceptionEnum spaException;

  public static final String SERIALIZED_NAME_TREADMILL = "treadmill";
  @SerializedName(SERIALIZED_NAME_TREADMILL)
  private Boolean treadmill;

  /**
   * Treadmill exception.
   */
  @JsonAdapter(TreadmillExceptionEnum.Adapter.class)
  public enum TreadmillExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TreadmillExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TreadmillExceptionEnum fromValue(String value) {
      for (TreadmillExceptionEnum b : TreadmillExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TreadmillExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TreadmillExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TreadmillExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TreadmillExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TreadmillExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TREADMILL_EXCEPTION = "treadmillException";
  @SerializedName(SERIALIZED_NAME_TREADMILL_EXCEPTION)
  private TreadmillExceptionEnum treadmillException;

  public static final String SERIALIZED_NAME_WEIGHT_MACHINE = "weightMachine";
  @SerializedName(SERIALIZED_NAME_WEIGHT_MACHINE)
  private Boolean weightMachine;

  /**
   * Weight machine exception.
   */
  @JsonAdapter(WeightMachineExceptionEnum.Adapter.class)
  public enum WeightMachineExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WeightMachineExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeightMachineExceptionEnum fromValue(String value) {
      for (WeightMachineExceptionEnum b : WeightMachineExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeightMachineExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeightMachineExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeightMachineExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeightMachineExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WeightMachineExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEIGHT_MACHINE_EXCEPTION = "weightMachineException";
  @SerializedName(SERIALIZED_NAME_WEIGHT_MACHINE_EXCEPTION)
  private WeightMachineExceptionEnum weightMachineException;

  public Wellness() {
  }

  public Wellness doctorOnCall(Boolean doctorOnCall) {
    this.doctorOnCall = doctorOnCall;
    return this;
  }

  /**
   * Doctor on call. The hotel has a contract with a medical professional who provides services to hotel guests should they fall ill during their stay. The doctor may or may not have an on-site office or be at the hotel at all times.
   * @return doctorOnCall
   */
  @javax.annotation.Nullable
  public Boolean getDoctorOnCall() {
    return doctorOnCall;
  }

  public void setDoctorOnCall(Boolean doctorOnCall) {
    this.doctorOnCall = doctorOnCall;
  }


  public Wellness doctorOnCallException(DoctorOnCallExceptionEnum doctorOnCallException) {
    this.doctorOnCallException = doctorOnCallException;
    return this;
  }

  /**
   * Doctor on call exception.
   * @return doctorOnCallException
   */
  @javax.annotation.Nullable
  public DoctorOnCallExceptionEnum getDoctorOnCallException() {
    return doctorOnCallException;
  }

  public void setDoctorOnCallException(DoctorOnCallExceptionEnum doctorOnCallException) {
    this.doctorOnCallException = doctorOnCallException;
  }


  public Wellness ellipticalMachine(Boolean ellipticalMachine) {
    this.ellipticalMachine = ellipticalMachine;
    return this;
  }

  /**
   * Elliptical machine. An electric, stationary fitness machine with pedals that simulates climbing, walking or running and provides a user-controlled range of speeds and tensions. May not have arm-controlled levers to work out the upper body as well. Commonly found in a gym, fitness room, health center, or health club.
   * @return ellipticalMachine
   */
  @javax.annotation.Nullable
  public Boolean getEllipticalMachine() {
    return ellipticalMachine;
  }

  public void setEllipticalMachine(Boolean ellipticalMachine) {
    this.ellipticalMachine = ellipticalMachine;
  }


  public Wellness ellipticalMachineException(EllipticalMachineExceptionEnum ellipticalMachineException) {
    this.ellipticalMachineException = ellipticalMachineException;
    return this;
  }

  /**
   * Elliptical machine exception.
   * @return ellipticalMachineException
   */
  @javax.annotation.Nullable
  public EllipticalMachineExceptionEnum getEllipticalMachineException() {
    return ellipticalMachineException;
  }

  public void setEllipticalMachineException(EllipticalMachineExceptionEnum ellipticalMachineException) {
    this.ellipticalMachineException = ellipticalMachineException;
  }


  public Wellness fitnessCenter(Boolean fitnessCenter) {
    this.fitnessCenter = fitnessCenter;
    return this;
  }

  /**
   * Fitness center. A room or building at the hotel containing equipment to promote physical activity, such as treadmills, elliptical machines, stationary bikes, weight machines, free weights, and/or stretching mats. Use of the fitness center can be free or for a fee. May or may not be staffed. May or may not offer instructor-led classes in various styles of physical conditioning. May or may not be open 24/7. May or may not include locker rooms and showers. Also known as health club, gym, fitness room, health center.
   * @return fitnessCenter
   */
  @javax.annotation.Nullable
  public Boolean getFitnessCenter() {
    return fitnessCenter;
  }

  public void setFitnessCenter(Boolean fitnessCenter) {
    this.fitnessCenter = fitnessCenter;
  }


  public Wellness fitnessCenterException(FitnessCenterExceptionEnum fitnessCenterException) {
    this.fitnessCenterException = fitnessCenterException;
    return this;
  }

  /**
   * Fitness center exception.
   * @return fitnessCenterException
   */
  @javax.annotation.Nullable
  public FitnessCenterExceptionEnum getFitnessCenterException() {
    return fitnessCenterException;
  }

  public void setFitnessCenterException(FitnessCenterExceptionEnum fitnessCenterException) {
    this.fitnessCenterException = fitnessCenterException;
  }


  public Wellness freeFitnessCenter(Boolean freeFitnessCenter) {
    this.freeFitnessCenter = freeFitnessCenter;
    return this;
  }

  /**
   * Free fitness center. Guests may use the fitness center for free.
   * @return freeFitnessCenter
   */
  @javax.annotation.Nullable
  public Boolean getFreeFitnessCenter() {
    return freeFitnessCenter;
  }

  public void setFreeFitnessCenter(Boolean freeFitnessCenter) {
    this.freeFitnessCenter = freeFitnessCenter;
  }


  public Wellness freeFitnessCenterException(FreeFitnessCenterExceptionEnum freeFitnessCenterException) {
    this.freeFitnessCenterException = freeFitnessCenterException;
    return this;
  }

  /**
   * Free fitness center exception.
   * @return freeFitnessCenterException
   */
  @javax.annotation.Nullable
  public FreeFitnessCenterExceptionEnum getFreeFitnessCenterException() {
    return freeFitnessCenterException;
  }

  public void setFreeFitnessCenterException(FreeFitnessCenterExceptionEnum freeFitnessCenterException) {
    this.freeFitnessCenterException = freeFitnessCenterException;
  }


  public Wellness freeWeights(Boolean freeWeights) {
    this.freeWeights = freeWeights;
    return this;
  }

  /**
   * Free weights. Individual handheld fitness equipment of varied weights used for upper body strength training or bodybuilding. Also known as barbells, dumbbells, or kettlebells. Often stored on a rack with the weights arranged from light to heavy. Commonly found in a gym, fitness room, health center, or health club.
   * @return freeWeights
   */
  @javax.annotation.Nullable
  public Boolean getFreeWeights() {
    return freeWeights;
  }

  public void setFreeWeights(Boolean freeWeights) {
    this.freeWeights = freeWeights;
  }


  public Wellness freeWeightsException(FreeWeightsExceptionEnum freeWeightsException) {
    this.freeWeightsException = freeWeightsException;
    return this;
  }

  /**
   * Free weights exception.
   * @return freeWeightsException
   */
  @javax.annotation.Nullable
  public FreeWeightsExceptionEnum getFreeWeightsException() {
    return freeWeightsException;
  }

  public void setFreeWeightsException(FreeWeightsExceptionEnum freeWeightsException) {
    this.freeWeightsException = freeWeightsException;
  }


  public Wellness massage(Boolean massage) {
    this.massage = massage;
    return this;
  }

  /**
   * Massage. A service provided by a trained massage therapist involving the physical manipulation of a guest&#39;s muscles in order to achieve relaxation or pain relief.
   * @return massage
   */
  @javax.annotation.Nullable
  public Boolean getMassage() {
    return massage;
  }

  public void setMassage(Boolean massage) {
    this.massage = massage;
  }


  public Wellness massageException(MassageExceptionEnum massageException) {
    this.massageException = massageException;
    return this;
  }

  /**
   * Massage exception.
   * @return massageException
   */
  @javax.annotation.Nullable
  public MassageExceptionEnum getMassageException() {
    return massageException;
  }

  public void setMassageException(MassageExceptionEnum massageException) {
    this.massageException = massageException;
  }


  public Wellness salon(Boolean salon) {
    this.salon = salon;
    return this;
  }

  /**
   * Salon. A room at the hotel where professionals provide hair styling services such as shampooing, blow drying, hair dos, hair cutting and hair coloring. Also known as hairdresser or beauty salon.
   * @return salon
   */
  @javax.annotation.Nullable
  public Boolean getSalon() {
    return salon;
  }

  public void setSalon(Boolean salon) {
    this.salon = salon;
  }


  public Wellness salonException(SalonExceptionEnum salonException) {
    this.salonException = salonException;
    return this;
  }

  /**
   * Salon exception.
   * @return salonException
   */
  @javax.annotation.Nullable
  public SalonExceptionEnum getSalonException() {
    return salonException;
  }

  public void setSalonException(SalonExceptionEnum salonException) {
    this.salonException = salonException;
  }


  public Wellness sauna(Boolean sauna) {
    this.sauna = sauna;
    return this;
  }

  /**
   * Sauna. A wood-paneled room heated to a high temperature where guests sit on built-in wood benches for the purpose of perspiring and relaxing their muscles. Can be dry or slightly wet heat. Not a steam room.
   * @return sauna
   */
  @javax.annotation.Nullable
  public Boolean getSauna() {
    return sauna;
  }

  public void setSauna(Boolean sauna) {
    this.sauna = sauna;
  }


  public Wellness saunaException(SaunaExceptionEnum saunaException) {
    this.saunaException = saunaException;
    return this;
  }

  /**
   * Sauna exception.
   * @return saunaException
   */
  @javax.annotation.Nullable
  public SaunaExceptionEnum getSaunaException() {
    return saunaException;
  }

  public void setSaunaException(SaunaExceptionEnum saunaException) {
    this.saunaException = saunaException;
  }


  public Wellness spa(Boolean spa) {
    this.spa = spa;
    return this;
  }

  /**
   * Spa. A designated area, room or building at the hotel offering health and beauty treatment through such means as steam baths, exercise equipment, and massage. May also offer facials, nail care, and hair care. Services are usually available by appointment and for an additional fee. Does not apply if hotel only offers a steam room; must offer other beauty and/or health treatments as well.
   * @return spa
   */
  @javax.annotation.Nullable
  public Boolean getSpa() {
    return spa;
  }

  public void setSpa(Boolean spa) {
    this.spa = spa;
  }


  public Wellness spaException(SpaExceptionEnum spaException) {
    this.spaException = spaException;
    return this;
  }

  /**
   * Spa exception.
   * @return spaException
   */
  @javax.annotation.Nullable
  public SpaExceptionEnum getSpaException() {
    return spaException;
  }

  public void setSpaException(SpaExceptionEnum spaException) {
    this.spaException = spaException;
  }


  public Wellness treadmill(Boolean treadmill) {
    this.treadmill = treadmill;
    return this;
  }

  /**
   * Treadmill. An electric stationary fitness machine that simulates a moving path to promote walking or running within a range of user-controlled speeds and inclines. Also known as running machine. Commonly found in a gym, fitness room, health center, or health club.
   * @return treadmill
   */
  @javax.annotation.Nullable
  public Boolean getTreadmill() {
    return treadmill;
  }

  public void setTreadmill(Boolean treadmill) {
    this.treadmill = treadmill;
  }


  public Wellness treadmillException(TreadmillExceptionEnum treadmillException) {
    this.treadmillException = treadmillException;
    return this;
  }

  /**
   * Treadmill exception.
   * @return treadmillException
   */
  @javax.annotation.Nullable
  public TreadmillExceptionEnum getTreadmillException() {
    return treadmillException;
  }

  public void setTreadmillException(TreadmillExceptionEnum treadmillException) {
    this.treadmillException = treadmillException;
  }


  public Wellness weightMachine(Boolean weightMachine) {
    this.weightMachine = weightMachine;
    return this;
  }

  /**
   * Weight machine. Non-electronic fitness equipment designed for the user to target the exertion of different muscles. Usually incorporates a padded seat, a stack of flat weights and various bars and pulleys. May be designed for toning a specific part of the body or may involve different user-controlled settings, hardware and pulleys so as to provide an overall workout in one machine. Commonly found in a gym, fitness center, fitness room, or health club.
   * @return weightMachine
   */
  @javax.annotation.Nullable
  public Boolean getWeightMachine() {
    return weightMachine;
  }

  public void setWeightMachine(Boolean weightMachine) {
    this.weightMachine = weightMachine;
  }


  public Wellness weightMachineException(WeightMachineExceptionEnum weightMachineException) {
    this.weightMachineException = weightMachineException;
    return this;
  }

  /**
   * Weight machine exception.
   * @return weightMachineException
   */
  @javax.annotation.Nullable
  public WeightMachineExceptionEnum getWeightMachineException() {
    return weightMachineException;
  }

  public void setWeightMachineException(WeightMachineExceptionEnum weightMachineException) {
    this.weightMachineException = weightMachineException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wellness wellness = (Wellness) o;
    return Objects.equals(this.doctorOnCall, wellness.doctorOnCall) &&
        Objects.equals(this.doctorOnCallException, wellness.doctorOnCallException) &&
        Objects.equals(this.ellipticalMachine, wellness.ellipticalMachine) &&
        Objects.equals(this.ellipticalMachineException, wellness.ellipticalMachineException) &&
        Objects.equals(this.fitnessCenter, wellness.fitnessCenter) &&
        Objects.equals(this.fitnessCenterException, wellness.fitnessCenterException) &&
        Objects.equals(this.freeFitnessCenter, wellness.freeFitnessCenter) &&
        Objects.equals(this.freeFitnessCenterException, wellness.freeFitnessCenterException) &&
        Objects.equals(this.freeWeights, wellness.freeWeights) &&
        Objects.equals(this.freeWeightsException, wellness.freeWeightsException) &&
        Objects.equals(this.massage, wellness.massage) &&
        Objects.equals(this.massageException, wellness.massageException) &&
        Objects.equals(this.salon, wellness.salon) &&
        Objects.equals(this.salonException, wellness.salonException) &&
        Objects.equals(this.sauna, wellness.sauna) &&
        Objects.equals(this.saunaException, wellness.saunaException) &&
        Objects.equals(this.spa, wellness.spa) &&
        Objects.equals(this.spaException, wellness.spaException) &&
        Objects.equals(this.treadmill, wellness.treadmill) &&
        Objects.equals(this.treadmillException, wellness.treadmillException) &&
        Objects.equals(this.weightMachine, wellness.weightMachine) &&
        Objects.equals(this.weightMachineException, wellness.weightMachineException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doctorOnCall, doctorOnCallException, ellipticalMachine, ellipticalMachineException, fitnessCenter, fitnessCenterException, freeFitnessCenter, freeFitnessCenterException, freeWeights, freeWeightsException, massage, massageException, salon, salonException, sauna, saunaException, spa, spaException, treadmill, treadmillException, weightMachine, weightMachineException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wellness {\n");
    sb.append("    doctorOnCall: ").append(toIndentedString(doctorOnCall)).append("\n");
    sb.append("    doctorOnCallException: ").append(toIndentedString(doctorOnCallException)).append("\n");
    sb.append("    ellipticalMachine: ").append(toIndentedString(ellipticalMachine)).append("\n");
    sb.append("    ellipticalMachineException: ").append(toIndentedString(ellipticalMachineException)).append("\n");
    sb.append("    fitnessCenter: ").append(toIndentedString(fitnessCenter)).append("\n");
    sb.append("    fitnessCenterException: ").append(toIndentedString(fitnessCenterException)).append("\n");
    sb.append("    freeFitnessCenter: ").append(toIndentedString(freeFitnessCenter)).append("\n");
    sb.append("    freeFitnessCenterException: ").append(toIndentedString(freeFitnessCenterException)).append("\n");
    sb.append("    freeWeights: ").append(toIndentedString(freeWeights)).append("\n");
    sb.append("    freeWeightsException: ").append(toIndentedString(freeWeightsException)).append("\n");
    sb.append("    massage: ").append(toIndentedString(massage)).append("\n");
    sb.append("    massageException: ").append(toIndentedString(massageException)).append("\n");
    sb.append("    salon: ").append(toIndentedString(salon)).append("\n");
    sb.append("    salonException: ").append(toIndentedString(salonException)).append("\n");
    sb.append("    sauna: ").append(toIndentedString(sauna)).append("\n");
    sb.append("    saunaException: ").append(toIndentedString(saunaException)).append("\n");
    sb.append("    spa: ").append(toIndentedString(spa)).append("\n");
    sb.append("    spaException: ").append(toIndentedString(spaException)).append("\n");
    sb.append("    treadmill: ").append(toIndentedString(treadmill)).append("\n");
    sb.append("    treadmillException: ").append(toIndentedString(treadmillException)).append("\n");
    sb.append("    weightMachine: ").append(toIndentedString(weightMachine)).append("\n");
    sb.append("    weightMachineException: ").append(toIndentedString(weightMachineException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doctorOnCall");
    openapiFields.add("doctorOnCallException");
    openapiFields.add("ellipticalMachine");
    openapiFields.add("ellipticalMachineException");
    openapiFields.add("fitnessCenter");
    openapiFields.add("fitnessCenterException");
    openapiFields.add("freeFitnessCenter");
    openapiFields.add("freeFitnessCenterException");
    openapiFields.add("freeWeights");
    openapiFields.add("freeWeightsException");
    openapiFields.add("massage");
    openapiFields.add("massageException");
    openapiFields.add("salon");
    openapiFields.add("salonException");
    openapiFields.add("sauna");
    openapiFields.add("saunaException");
    openapiFields.add("spa");
    openapiFields.add("spaException");
    openapiFields.add("treadmill");
    openapiFields.add("treadmillException");
    openapiFields.add("weightMachine");
    openapiFields.add("weightMachineException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Wellness
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Wellness.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Wellness is not found in the empty JSON string", Wellness.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Wellness.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Wellness` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("doctorOnCallException") != null && !jsonObj.get("doctorOnCallException").isJsonNull()) && !jsonObj.get("doctorOnCallException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doctorOnCallException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doctorOnCallException").toString()));
      }
      // validate the optional field `doctorOnCallException`
      if (jsonObj.get("doctorOnCallException") != null && !jsonObj.get("doctorOnCallException").isJsonNull()) {
        DoctorOnCallExceptionEnum.validateJsonElement(jsonObj.get("doctorOnCallException"));
      }
      if ((jsonObj.get("ellipticalMachineException") != null && !jsonObj.get("ellipticalMachineException").isJsonNull()) && !jsonObj.get("ellipticalMachineException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ellipticalMachineException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ellipticalMachineException").toString()));
      }
      // validate the optional field `ellipticalMachineException`
      if (jsonObj.get("ellipticalMachineException") != null && !jsonObj.get("ellipticalMachineException").isJsonNull()) {
        EllipticalMachineExceptionEnum.validateJsonElement(jsonObj.get("ellipticalMachineException"));
      }
      if ((jsonObj.get("fitnessCenterException") != null && !jsonObj.get("fitnessCenterException").isJsonNull()) && !jsonObj.get("fitnessCenterException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fitnessCenterException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fitnessCenterException").toString()));
      }
      // validate the optional field `fitnessCenterException`
      if (jsonObj.get("fitnessCenterException") != null && !jsonObj.get("fitnessCenterException").isJsonNull()) {
        FitnessCenterExceptionEnum.validateJsonElement(jsonObj.get("fitnessCenterException"));
      }
      if ((jsonObj.get("freeFitnessCenterException") != null && !jsonObj.get("freeFitnessCenterException").isJsonNull()) && !jsonObj.get("freeFitnessCenterException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeFitnessCenterException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeFitnessCenterException").toString()));
      }
      // validate the optional field `freeFitnessCenterException`
      if (jsonObj.get("freeFitnessCenterException") != null && !jsonObj.get("freeFitnessCenterException").isJsonNull()) {
        FreeFitnessCenterExceptionEnum.validateJsonElement(jsonObj.get("freeFitnessCenterException"));
      }
      if ((jsonObj.get("freeWeightsException") != null && !jsonObj.get("freeWeightsException").isJsonNull()) && !jsonObj.get("freeWeightsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeWeightsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeWeightsException").toString()));
      }
      // validate the optional field `freeWeightsException`
      if (jsonObj.get("freeWeightsException") != null && !jsonObj.get("freeWeightsException").isJsonNull()) {
        FreeWeightsExceptionEnum.validateJsonElement(jsonObj.get("freeWeightsException"));
      }
      if ((jsonObj.get("massageException") != null && !jsonObj.get("massageException").isJsonNull()) && !jsonObj.get("massageException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `massageException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("massageException").toString()));
      }
      // validate the optional field `massageException`
      if (jsonObj.get("massageException") != null && !jsonObj.get("massageException").isJsonNull()) {
        MassageExceptionEnum.validateJsonElement(jsonObj.get("massageException"));
      }
      if ((jsonObj.get("salonException") != null && !jsonObj.get("salonException").isJsonNull()) && !jsonObj.get("salonException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salonException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salonException").toString()));
      }
      // validate the optional field `salonException`
      if (jsonObj.get("salonException") != null && !jsonObj.get("salonException").isJsonNull()) {
        SalonExceptionEnum.validateJsonElement(jsonObj.get("salonException"));
      }
      if ((jsonObj.get("saunaException") != null && !jsonObj.get("saunaException").isJsonNull()) && !jsonObj.get("saunaException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saunaException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saunaException").toString()));
      }
      // validate the optional field `saunaException`
      if (jsonObj.get("saunaException") != null && !jsonObj.get("saunaException").isJsonNull()) {
        SaunaExceptionEnum.validateJsonElement(jsonObj.get("saunaException"));
      }
      if ((jsonObj.get("spaException") != null && !jsonObj.get("spaException").isJsonNull()) && !jsonObj.get("spaException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaException").toString()));
      }
      // validate the optional field `spaException`
      if (jsonObj.get("spaException") != null && !jsonObj.get("spaException").isJsonNull()) {
        SpaExceptionEnum.validateJsonElement(jsonObj.get("spaException"));
      }
      if ((jsonObj.get("treadmillException") != null && !jsonObj.get("treadmillException").isJsonNull()) && !jsonObj.get("treadmillException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treadmillException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treadmillException").toString()));
      }
      // validate the optional field `treadmillException`
      if (jsonObj.get("treadmillException") != null && !jsonObj.get("treadmillException").isJsonNull()) {
        TreadmillExceptionEnum.validateJsonElement(jsonObj.get("treadmillException"));
      }
      if ((jsonObj.get("weightMachineException") != null && !jsonObj.get("weightMachineException").isJsonNull()) && !jsonObj.get("weightMachineException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weightMachineException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weightMachineException").toString()));
      }
      // validate the optional field `weightMachineException`
      if (jsonObj.get("weightMachineException") != null && !jsonObj.get("weightMachineException").isJsonNull()) {
        WeightMachineExceptionEnum.validateJsonElement(jsonObj.get("weightMachineException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Wellness.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Wellness' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Wellness> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Wellness.class));

       return (TypeAdapter<T>) new TypeAdapter<Wellness>() {
           @Override
           public void write(JsonWriter out, Wellness value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Wellness read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Wellness given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Wellness
   * @throws IOException if the JSON string is invalid with respect to Wellness
   */
  public static Wellness fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Wellness.class);
  }

  /**
   * Convert an instance of Wellness to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

