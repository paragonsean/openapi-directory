/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Physical distancing measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhysicalDistancing {
  public static final String SERIALIZED_NAME_COMMON_AREAS_PHYSICAL_DISTANCING_ARRANGED = "commonAreasPhysicalDistancingArranged";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_PHYSICAL_DISTANCING_ARRANGED)
  private Boolean commonAreasPhysicalDistancingArranged;

  /**
   * Common areas physical distancing arranged exception.
   */
  @JsonAdapter(CommonAreasPhysicalDistancingArrangedExceptionEnum.Adapter.class)
  public enum CommonAreasPhysicalDistancingArrangedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CommonAreasPhysicalDistancingArrangedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommonAreasPhysicalDistancingArrangedExceptionEnum fromValue(String value) {
      for (CommonAreasPhysicalDistancingArrangedExceptionEnum b : CommonAreasPhysicalDistancingArrangedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommonAreasPhysicalDistancingArrangedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommonAreasPhysicalDistancingArrangedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommonAreasPhysicalDistancingArrangedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommonAreasPhysicalDistancingArrangedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommonAreasPhysicalDistancingArrangedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMON_AREAS_PHYSICAL_DISTANCING_ARRANGED_EXCEPTION = "commonAreasPhysicalDistancingArrangedException";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_PHYSICAL_DISTANCING_ARRANGED_EXCEPTION)
  private CommonAreasPhysicalDistancingArrangedExceptionEnum commonAreasPhysicalDistancingArrangedException;

  public static final String SERIALIZED_NAME_PHYSICAL_DISTANCING_REQUIRED = "physicalDistancingRequired";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DISTANCING_REQUIRED)
  private Boolean physicalDistancingRequired;

  /**
   * Physical distancing required exception.
   */
  @JsonAdapter(PhysicalDistancingRequiredExceptionEnum.Adapter.class)
  public enum PhysicalDistancingRequiredExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PhysicalDistancingRequiredExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhysicalDistancingRequiredExceptionEnum fromValue(String value) {
      for (PhysicalDistancingRequiredExceptionEnum b : PhysicalDistancingRequiredExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhysicalDistancingRequiredExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhysicalDistancingRequiredExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhysicalDistancingRequiredExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhysicalDistancingRequiredExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhysicalDistancingRequiredExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHYSICAL_DISTANCING_REQUIRED_EXCEPTION = "physicalDistancingRequiredException";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DISTANCING_REQUIRED_EXCEPTION)
  private PhysicalDistancingRequiredExceptionEnum physicalDistancingRequiredException;

  public static final String SERIALIZED_NAME_SAFETY_DIVIDERS = "safetyDividers";
  @SerializedName(SERIALIZED_NAME_SAFETY_DIVIDERS)
  private Boolean safetyDividers;

  /**
   * Safety dividers exception.
   */
  @JsonAdapter(SafetyDividersExceptionEnum.Adapter.class)
  public enum SafetyDividersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SafetyDividersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafetyDividersExceptionEnum fromValue(String value) {
      for (SafetyDividersExceptionEnum b : SafetyDividersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafetyDividersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafetyDividersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafetyDividersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafetyDividersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafetyDividersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFETY_DIVIDERS_EXCEPTION = "safetyDividersException";
  @SerializedName(SERIALIZED_NAME_SAFETY_DIVIDERS_EXCEPTION)
  private SafetyDividersExceptionEnum safetyDividersException;

  public static final String SERIALIZED_NAME_SHARED_AREAS_LIMITED_OCCUPANCY = "sharedAreasLimitedOccupancy";
  @SerializedName(SERIALIZED_NAME_SHARED_AREAS_LIMITED_OCCUPANCY)
  private Boolean sharedAreasLimitedOccupancy;

  /**
   * Shared areas limited occupancy exception.
   */
  @JsonAdapter(SharedAreasLimitedOccupancyExceptionEnum.Adapter.class)
  public enum SharedAreasLimitedOccupancyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SharedAreasLimitedOccupancyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SharedAreasLimitedOccupancyExceptionEnum fromValue(String value) {
      for (SharedAreasLimitedOccupancyExceptionEnum b : SharedAreasLimitedOccupancyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SharedAreasLimitedOccupancyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SharedAreasLimitedOccupancyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SharedAreasLimitedOccupancyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SharedAreasLimitedOccupancyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SharedAreasLimitedOccupancyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARED_AREAS_LIMITED_OCCUPANCY_EXCEPTION = "sharedAreasLimitedOccupancyException";
  @SerializedName(SERIALIZED_NAME_SHARED_AREAS_LIMITED_OCCUPANCY_EXCEPTION)
  private SharedAreasLimitedOccupancyExceptionEnum sharedAreasLimitedOccupancyException;

  public static final String SERIALIZED_NAME_WELLNESS_AREAS_HAVE_PRIVATE_SPACES = "wellnessAreasHavePrivateSpaces";
  @SerializedName(SERIALIZED_NAME_WELLNESS_AREAS_HAVE_PRIVATE_SPACES)
  private Boolean wellnessAreasHavePrivateSpaces;

  /**
   * Wellness areas have private spaces exception.
   */
  @JsonAdapter(WellnessAreasHavePrivateSpacesExceptionEnum.Adapter.class)
  public enum WellnessAreasHavePrivateSpacesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WellnessAreasHavePrivateSpacesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WellnessAreasHavePrivateSpacesExceptionEnum fromValue(String value) {
      for (WellnessAreasHavePrivateSpacesExceptionEnum b : WellnessAreasHavePrivateSpacesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WellnessAreasHavePrivateSpacesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WellnessAreasHavePrivateSpacesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WellnessAreasHavePrivateSpacesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WellnessAreasHavePrivateSpacesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WellnessAreasHavePrivateSpacesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WELLNESS_AREAS_HAVE_PRIVATE_SPACES_EXCEPTION = "wellnessAreasHavePrivateSpacesException";
  @SerializedName(SERIALIZED_NAME_WELLNESS_AREAS_HAVE_PRIVATE_SPACES_EXCEPTION)
  private WellnessAreasHavePrivateSpacesExceptionEnum wellnessAreasHavePrivateSpacesException;

  public PhysicalDistancing() {
  }

  public PhysicalDistancing commonAreasPhysicalDistancingArranged(Boolean commonAreasPhysicalDistancingArranged) {
    this.commonAreasPhysicalDistancingArranged = commonAreasPhysicalDistancingArranged;
    return this;
  }

  /**
   * Common areas arranged to maintain physical distancing.
   * @return commonAreasPhysicalDistancingArranged
   */
  @javax.annotation.Nullable
  public Boolean getCommonAreasPhysicalDistancingArranged() {
    return commonAreasPhysicalDistancingArranged;
  }

  public void setCommonAreasPhysicalDistancingArranged(Boolean commonAreasPhysicalDistancingArranged) {
    this.commonAreasPhysicalDistancingArranged = commonAreasPhysicalDistancingArranged;
  }


  public PhysicalDistancing commonAreasPhysicalDistancingArrangedException(CommonAreasPhysicalDistancingArrangedExceptionEnum commonAreasPhysicalDistancingArrangedException) {
    this.commonAreasPhysicalDistancingArrangedException = commonAreasPhysicalDistancingArrangedException;
    return this;
  }

  /**
   * Common areas physical distancing arranged exception.
   * @return commonAreasPhysicalDistancingArrangedException
   */
  @javax.annotation.Nullable
  public CommonAreasPhysicalDistancingArrangedExceptionEnum getCommonAreasPhysicalDistancingArrangedException() {
    return commonAreasPhysicalDistancingArrangedException;
  }

  public void setCommonAreasPhysicalDistancingArrangedException(CommonAreasPhysicalDistancingArrangedExceptionEnum commonAreasPhysicalDistancingArrangedException) {
    this.commonAreasPhysicalDistancingArrangedException = commonAreasPhysicalDistancingArrangedException;
  }


  public PhysicalDistancing physicalDistancingRequired(Boolean physicalDistancingRequired) {
    this.physicalDistancingRequired = physicalDistancingRequired;
    return this;
  }

  /**
   * Physical distancing required.
   * @return physicalDistancingRequired
   */
  @javax.annotation.Nullable
  public Boolean getPhysicalDistancingRequired() {
    return physicalDistancingRequired;
  }

  public void setPhysicalDistancingRequired(Boolean physicalDistancingRequired) {
    this.physicalDistancingRequired = physicalDistancingRequired;
  }


  public PhysicalDistancing physicalDistancingRequiredException(PhysicalDistancingRequiredExceptionEnum physicalDistancingRequiredException) {
    this.physicalDistancingRequiredException = physicalDistancingRequiredException;
    return this;
  }

  /**
   * Physical distancing required exception.
   * @return physicalDistancingRequiredException
   */
  @javax.annotation.Nullable
  public PhysicalDistancingRequiredExceptionEnum getPhysicalDistancingRequiredException() {
    return physicalDistancingRequiredException;
  }

  public void setPhysicalDistancingRequiredException(PhysicalDistancingRequiredExceptionEnum physicalDistancingRequiredException) {
    this.physicalDistancingRequiredException = physicalDistancingRequiredException;
  }


  public PhysicalDistancing safetyDividers(Boolean safetyDividers) {
    this.safetyDividers = safetyDividers;
    return this;
  }

  /**
   * Safety dividers at front desk and other locations.
   * @return safetyDividers
   */
  @javax.annotation.Nullable
  public Boolean getSafetyDividers() {
    return safetyDividers;
  }

  public void setSafetyDividers(Boolean safetyDividers) {
    this.safetyDividers = safetyDividers;
  }


  public PhysicalDistancing safetyDividersException(SafetyDividersExceptionEnum safetyDividersException) {
    this.safetyDividersException = safetyDividersException;
    return this;
  }

  /**
   * Safety dividers exception.
   * @return safetyDividersException
   */
  @javax.annotation.Nullable
  public SafetyDividersExceptionEnum getSafetyDividersException() {
    return safetyDividersException;
  }

  public void setSafetyDividersException(SafetyDividersExceptionEnum safetyDividersException) {
    this.safetyDividersException = safetyDividersException;
  }


  public PhysicalDistancing sharedAreasLimitedOccupancy(Boolean sharedAreasLimitedOccupancy) {
    this.sharedAreasLimitedOccupancy = sharedAreasLimitedOccupancy;
    return this;
  }

  /**
   * Guest occupancy limited within shared facilities.
   * @return sharedAreasLimitedOccupancy
   */
  @javax.annotation.Nullable
  public Boolean getSharedAreasLimitedOccupancy() {
    return sharedAreasLimitedOccupancy;
  }

  public void setSharedAreasLimitedOccupancy(Boolean sharedAreasLimitedOccupancy) {
    this.sharedAreasLimitedOccupancy = sharedAreasLimitedOccupancy;
  }


  public PhysicalDistancing sharedAreasLimitedOccupancyException(SharedAreasLimitedOccupancyExceptionEnum sharedAreasLimitedOccupancyException) {
    this.sharedAreasLimitedOccupancyException = sharedAreasLimitedOccupancyException;
    return this;
  }

  /**
   * Shared areas limited occupancy exception.
   * @return sharedAreasLimitedOccupancyException
   */
  @javax.annotation.Nullable
  public SharedAreasLimitedOccupancyExceptionEnum getSharedAreasLimitedOccupancyException() {
    return sharedAreasLimitedOccupancyException;
  }

  public void setSharedAreasLimitedOccupancyException(SharedAreasLimitedOccupancyExceptionEnum sharedAreasLimitedOccupancyException) {
    this.sharedAreasLimitedOccupancyException = sharedAreasLimitedOccupancyException;
  }


  public PhysicalDistancing wellnessAreasHavePrivateSpaces(Boolean wellnessAreasHavePrivateSpaces) {
    this.wellnessAreasHavePrivateSpaces = wellnessAreasHavePrivateSpaces;
    return this;
  }

  /**
   * Private spaces designated in spa and wellness areas.
   * @return wellnessAreasHavePrivateSpaces
   */
  @javax.annotation.Nullable
  public Boolean getWellnessAreasHavePrivateSpaces() {
    return wellnessAreasHavePrivateSpaces;
  }

  public void setWellnessAreasHavePrivateSpaces(Boolean wellnessAreasHavePrivateSpaces) {
    this.wellnessAreasHavePrivateSpaces = wellnessAreasHavePrivateSpaces;
  }


  public PhysicalDistancing wellnessAreasHavePrivateSpacesException(WellnessAreasHavePrivateSpacesExceptionEnum wellnessAreasHavePrivateSpacesException) {
    this.wellnessAreasHavePrivateSpacesException = wellnessAreasHavePrivateSpacesException;
    return this;
  }

  /**
   * Wellness areas have private spaces exception.
   * @return wellnessAreasHavePrivateSpacesException
   */
  @javax.annotation.Nullable
  public WellnessAreasHavePrivateSpacesExceptionEnum getWellnessAreasHavePrivateSpacesException() {
    return wellnessAreasHavePrivateSpacesException;
  }

  public void setWellnessAreasHavePrivateSpacesException(WellnessAreasHavePrivateSpacesExceptionEnum wellnessAreasHavePrivateSpacesException) {
    this.wellnessAreasHavePrivateSpacesException = wellnessAreasHavePrivateSpacesException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalDistancing physicalDistancing = (PhysicalDistancing) o;
    return Objects.equals(this.commonAreasPhysicalDistancingArranged, physicalDistancing.commonAreasPhysicalDistancingArranged) &&
        Objects.equals(this.commonAreasPhysicalDistancingArrangedException, physicalDistancing.commonAreasPhysicalDistancingArrangedException) &&
        Objects.equals(this.physicalDistancingRequired, physicalDistancing.physicalDistancingRequired) &&
        Objects.equals(this.physicalDistancingRequiredException, physicalDistancing.physicalDistancingRequiredException) &&
        Objects.equals(this.safetyDividers, physicalDistancing.safetyDividers) &&
        Objects.equals(this.safetyDividersException, physicalDistancing.safetyDividersException) &&
        Objects.equals(this.sharedAreasLimitedOccupancy, physicalDistancing.sharedAreasLimitedOccupancy) &&
        Objects.equals(this.sharedAreasLimitedOccupancyException, physicalDistancing.sharedAreasLimitedOccupancyException) &&
        Objects.equals(this.wellnessAreasHavePrivateSpaces, physicalDistancing.wellnessAreasHavePrivateSpaces) &&
        Objects.equals(this.wellnessAreasHavePrivateSpacesException, physicalDistancing.wellnessAreasHavePrivateSpacesException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonAreasPhysicalDistancingArranged, commonAreasPhysicalDistancingArrangedException, physicalDistancingRequired, physicalDistancingRequiredException, safetyDividers, safetyDividersException, sharedAreasLimitedOccupancy, sharedAreasLimitedOccupancyException, wellnessAreasHavePrivateSpaces, wellnessAreasHavePrivateSpacesException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalDistancing {\n");
    sb.append("    commonAreasPhysicalDistancingArranged: ").append(toIndentedString(commonAreasPhysicalDistancingArranged)).append("\n");
    sb.append("    commonAreasPhysicalDistancingArrangedException: ").append(toIndentedString(commonAreasPhysicalDistancingArrangedException)).append("\n");
    sb.append("    physicalDistancingRequired: ").append(toIndentedString(physicalDistancingRequired)).append("\n");
    sb.append("    physicalDistancingRequiredException: ").append(toIndentedString(physicalDistancingRequiredException)).append("\n");
    sb.append("    safetyDividers: ").append(toIndentedString(safetyDividers)).append("\n");
    sb.append("    safetyDividersException: ").append(toIndentedString(safetyDividersException)).append("\n");
    sb.append("    sharedAreasLimitedOccupancy: ").append(toIndentedString(sharedAreasLimitedOccupancy)).append("\n");
    sb.append("    sharedAreasLimitedOccupancyException: ").append(toIndentedString(sharedAreasLimitedOccupancyException)).append("\n");
    sb.append("    wellnessAreasHavePrivateSpaces: ").append(toIndentedString(wellnessAreasHavePrivateSpaces)).append("\n");
    sb.append("    wellnessAreasHavePrivateSpacesException: ").append(toIndentedString(wellnessAreasHavePrivateSpacesException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonAreasPhysicalDistancingArranged");
    openapiFields.add("commonAreasPhysicalDistancingArrangedException");
    openapiFields.add("physicalDistancingRequired");
    openapiFields.add("physicalDistancingRequiredException");
    openapiFields.add("safetyDividers");
    openapiFields.add("safetyDividersException");
    openapiFields.add("sharedAreasLimitedOccupancy");
    openapiFields.add("sharedAreasLimitedOccupancyException");
    openapiFields.add("wellnessAreasHavePrivateSpaces");
    openapiFields.add("wellnessAreasHavePrivateSpacesException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhysicalDistancing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhysicalDistancing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhysicalDistancing is not found in the empty JSON string", PhysicalDistancing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhysicalDistancing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhysicalDistancing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commonAreasPhysicalDistancingArrangedException") != null && !jsonObj.get("commonAreasPhysicalDistancingArrangedException").isJsonNull()) && !jsonObj.get("commonAreasPhysicalDistancingArrangedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonAreasPhysicalDistancingArrangedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonAreasPhysicalDistancingArrangedException").toString()));
      }
      // validate the optional field `commonAreasPhysicalDistancingArrangedException`
      if (jsonObj.get("commonAreasPhysicalDistancingArrangedException") != null && !jsonObj.get("commonAreasPhysicalDistancingArrangedException").isJsonNull()) {
        CommonAreasPhysicalDistancingArrangedExceptionEnum.validateJsonElement(jsonObj.get("commonAreasPhysicalDistancingArrangedException"));
      }
      if ((jsonObj.get("physicalDistancingRequiredException") != null && !jsonObj.get("physicalDistancingRequiredException").isJsonNull()) && !jsonObj.get("physicalDistancingRequiredException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalDistancingRequiredException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalDistancingRequiredException").toString()));
      }
      // validate the optional field `physicalDistancingRequiredException`
      if (jsonObj.get("physicalDistancingRequiredException") != null && !jsonObj.get("physicalDistancingRequiredException").isJsonNull()) {
        PhysicalDistancingRequiredExceptionEnum.validateJsonElement(jsonObj.get("physicalDistancingRequiredException"));
      }
      if ((jsonObj.get("safetyDividersException") != null && !jsonObj.get("safetyDividersException").isJsonNull()) && !jsonObj.get("safetyDividersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safetyDividersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safetyDividersException").toString()));
      }
      // validate the optional field `safetyDividersException`
      if (jsonObj.get("safetyDividersException") != null && !jsonObj.get("safetyDividersException").isJsonNull()) {
        SafetyDividersExceptionEnum.validateJsonElement(jsonObj.get("safetyDividersException"));
      }
      if ((jsonObj.get("sharedAreasLimitedOccupancyException") != null && !jsonObj.get("sharedAreasLimitedOccupancyException").isJsonNull()) && !jsonObj.get("sharedAreasLimitedOccupancyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAreasLimitedOccupancyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAreasLimitedOccupancyException").toString()));
      }
      // validate the optional field `sharedAreasLimitedOccupancyException`
      if (jsonObj.get("sharedAreasLimitedOccupancyException") != null && !jsonObj.get("sharedAreasLimitedOccupancyException").isJsonNull()) {
        SharedAreasLimitedOccupancyExceptionEnum.validateJsonElement(jsonObj.get("sharedAreasLimitedOccupancyException"));
      }
      if ((jsonObj.get("wellnessAreasHavePrivateSpacesException") != null && !jsonObj.get("wellnessAreasHavePrivateSpacesException").isJsonNull()) && !jsonObj.get("wellnessAreasHavePrivateSpacesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wellnessAreasHavePrivateSpacesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wellnessAreasHavePrivateSpacesException").toString()));
      }
      // validate the optional field `wellnessAreasHavePrivateSpacesException`
      if (jsonObj.get("wellnessAreasHavePrivateSpacesException") != null && !jsonObj.get("wellnessAreasHavePrivateSpacesException").isJsonNull()) {
        WellnessAreasHavePrivateSpacesExceptionEnum.validateJsonElement(jsonObj.get("wellnessAreasHavePrivateSpacesException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhysicalDistancing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhysicalDistancing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhysicalDistancing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhysicalDistancing.class));

       return (TypeAdapter<T>) new TypeAdapter<PhysicalDistancing>() {
           @Override
           public void write(JsonWriter out, PhysicalDistancing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhysicalDistancing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhysicalDistancing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhysicalDistancing
   * @throws IOException if the JSON string is invalid with respect to PhysicalDistancing
   */
  public static PhysicalDistancing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhysicalDistancing.class);
  }

  /**
   * Convert an instance of PhysicalDistancing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

