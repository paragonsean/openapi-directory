/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EcoCertification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sustainability certifications the hotel has been awarded. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SustainabilityCertifications {
  /**
   * BREEAM certification.
   */
  @JsonAdapter(BreeamCertificationEnum.Adapter.class)
  public enum BreeamCertificationEnum {
    BREEAM_CERTIFICATION_UNSPECIFIED("BREEAM_CERTIFICATION_UNSPECIFIED"),
    
    NO_BREEAM_CERTIFICATION("NO_BREEAM_CERTIFICATION"),
    
    BREEAM_PASS("BREEAM_PASS"),
    
    BREEAM_GOOD("BREEAM_GOOD"),
    
    BREEAM_VERY_GOOD("BREEAM_VERY_GOOD"),
    
    BREEAM_EXCELLENT("BREEAM_EXCELLENT"),
    
    BREEAM_OUTSTANDING("BREEAM_OUTSTANDING");

    private String value;

    BreeamCertificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreeamCertificationEnum fromValue(String value) {
      for (BreeamCertificationEnum b : BreeamCertificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreeamCertificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreeamCertificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreeamCertificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BreeamCertificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BreeamCertificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BREEAM_CERTIFICATION = "breeamCertification";
  @SerializedName(SERIALIZED_NAME_BREEAM_CERTIFICATION)
  private BreeamCertificationEnum breeamCertification;

  /**
   * BREEAM certification exception.
   */
  @JsonAdapter(BreeamCertificationExceptionEnum.Adapter.class)
  public enum BreeamCertificationExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BreeamCertificationExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreeamCertificationExceptionEnum fromValue(String value) {
      for (BreeamCertificationExceptionEnum b : BreeamCertificationExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreeamCertificationExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreeamCertificationExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreeamCertificationExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BreeamCertificationExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BreeamCertificationExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BREEAM_CERTIFICATION_EXCEPTION = "breeamCertificationException";
  @SerializedName(SERIALIZED_NAME_BREEAM_CERTIFICATION_EXCEPTION)
  private BreeamCertificationExceptionEnum breeamCertificationException;

  public static final String SERIALIZED_NAME_ECO_CERTIFICATIONS = "ecoCertifications";
  @SerializedName(SERIALIZED_NAME_ECO_CERTIFICATIONS)
  private List<EcoCertification> ecoCertifications = new ArrayList<>();

  /**
   * LEED certification.
   */
  @JsonAdapter(LeedCertificationEnum.Adapter.class)
  public enum LeedCertificationEnum {
    LEED_CERTIFICATION_UNSPECIFIED("LEED_CERTIFICATION_UNSPECIFIED"),
    
    NO_LEED_CERTIFICATION("NO_LEED_CERTIFICATION"),
    
    LEED_CERTIFIED("LEED_CERTIFIED"),
    
    LEED_SILVER("LEED_SILVER"),
    
    LEED_GOLD("LEED_GOLD"),
    
    LEED_PLATINUM("LEED_PLATINUM");

    private String value;

    LeedCertificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeedCertificationEnum fromValue(String value) {
      for (LeedCertificationEnum b : LeedCertificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeedCertificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeedCertificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeedCertificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeedCertificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeedCertificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEED_CERTIFICATION = "leedCertification";
  @SerializedName(SERIALIZED_NAME_LEED_CERTIFICATION)
  private LeedCertificationEnum leedCertification;

  /**
   * LEED certification exception.
   */
  @JsonAdapter(LeedCertificationExceptionEnum.Adapter.class)
  public enum LeedCertificationExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LeedCertificationExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeedCertificationExceptionEnum fromValue(String value) {
      for (LeedCertificationExceptionEnum b : LeedCertificationExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeedCertificationExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeedCertificationExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeedCertificationExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeedCertificationExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeedCertificationExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEED_CERTIFICATION_EXCEPTION = "leedCertificationException";
  @SerializedName(SERIALIZED_NAME_LEED_CERTIFICATION_EXCEPTION)
  private LeedCertificationExceptionEnum leedCertificationException;

  public SustainabilityCertifications() {
  }

  public SustainabilityCertifications breeamCertification(BreeamCertificationEnum breeamCertification) {
    this.breeamCertification = breeamCertification;
    return this;
  }

  /**
   * BREEAM certification.
   * @return breeamCertification
   */
  @javax.annotation.Nullable
  public BreeamCertificationEnum getBreeamCertification() {
    return breeamCertification;
  }

  public void setBreeamCertification(BreeamCertificationEnum breeamCertification) {
    this.breeamCertification = breeamCertification;
  }


  public SustainabilityCertifications breeamCertificationException(BreeamCertificationExceptionEnum breeamCertificationException) {
    this.breeamCertificationException = breeamCertificationException;
    return this;
  }

  /**
   * BREEAM certification exception.
   * @return breeamCertificationException
   */
  @javax.annotation.Nullable
  public BreeamCertificationExceptionEnum getBreeamCertificationException() {
    return breeamCertificationException;
  }

  public void setBreeamCertificationException(BreeamCertificationExceptionEnum breeamCertificationException) {
    this.breeamCertificationException = breeamCertificationException;
  }


  public SustainabilityCertifications ecoCertifications(List<EcoCertification> ecoCertifications) {
    this.ecoCertifications = ecoCertifications;
    return this;
  }

  public SustainabilityCertifications addEcoCertificationsItem(EcoCertification ecoCertificationsItem) {
    if (this.ecoCertifications == null) {
      this.ecoCertifications = new ArrayList<>();
    }
    this.ecoCertifications.add(ecoCertificationsItem);
    return this;
  }

  /**
   * The eco certificates awarded to the hotel.
   * @return ecoCertifications
   */
  @javax.annotation.Nullable
  public List<EcoCertification> getEcoCertifications() {
    return ecoCertifications;
  }

  public void setEcoCertifications(List<EcoCertification> ecoCertifications) {
    this.ecoCertifications = ecoCertifications;
  }


  public SustainabilityCertifications leedCertification(LeedCertificationEnum leedCertification) {
    this.leedCertification = leedCertification;
    return this;
  }

  /**
   * LEED certification.
   * @return leedCertification
   */
  @javax.annotation.Nullable
  public LeedCertificationEnum getLeedCertification() {
    return leedCertification;
  }

  public void setLeedCertification(LeedCertificationEnum leedCertification) {
    this.leedCertification = leedCertification;
  }


  public SustainabilityCertifications leedCertificationException(LeedCertificationExceptionEnum leedCertificationException) {
    this.leedCertificationException = leedCertificationException;
    return this;
  }

  /**
   * LEED certification exception.
   * @return leedCertificationException
   */
  @javax.annotation.Nullable
  public LeedCertificationExceptionEnum getLeedCertificationException() {
    return leedCertificationException;
  }

  public void setLeedCertificationException(LeedCertificationExceptionEnum leedCertificationException) {
    this.leedCertificationException = leedCertificationException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SustainabilityCertifications sustainabilityCertifications = (SustainabilityCertifications) o;
    return Objects.equals(this.breeamCertification, sustainabilityCertifications.breeamCertification) &&
        Objects.equals(this.breeamCertificationException, sustainabilityCertifications.breeamCertificationException) &&
        Objects.equals(this.ecoCertifications, sustainabilityCertifications.ecoCertifications) &&
        Objects.equals(this.leedCertification, sustainabilityCertifications.leedCertification) &&
        Objects.equals(this.leedCertificationException, sustainabilityCertifications.leedCertificationException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breeamCertification, breeamCertificationException, ecoCertifications, leedCertification, leedCertificationException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SustainabilityCertifications {\n");
    sb.append("    breeamCertification: ").append(toIndentedString(breeamCertification)).append("\n");
    sb.append("    breeamCertificationException: ").append(toIndentedString(breeamCertificationException)).append("\n");
    sb.append("    ecoCertifications: ").append(toIndentedString(ecoCertifications)).append("\n");
    sb.append("    leedCertification: ").append(toIndentedString(leedCertification)).append("\n");
    sb.append("    leedCertificationException: ").append(toIndentedString(leedCertificationException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breeamCertification");
    openapiFields.add("breeamCertificationException");
    openapiFields.add("ecoCertifications");
    openapiFields.add("leedCertification");
    openapiFields.add("leedCertificationException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SustainabilityCertifications
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SustainabilityCertifications.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SustainabilityCertifications is not found in the empty JSON string", SustainabilityCertifications.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SustainabilityCertifications.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SustainabilityCertifications` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("breeamCertification") != null && !jsonObj.get("breeamCertification").isJsonNull()) && !jsonObj.get("breeamCertification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breeamCertification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breeamCertification").toString()));
      }
      // validate the optional field `breeamCertification`
      if (jsonObj.get("breeamCertification") != null && !jsonObj.get("breeamCertification").isJsonNull()) {
        BreeamCertificationEnum.validateJsonElement(jsonObj.get("breeamCertification"));
      }
      if ((jsonObj.get("breeamCertificationException") != null && !jsonObj.get("breeamCertificationException").isJsonNull()) && !jsonObj.get("breeamCertificationException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breeamCertificationException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breeamCertificationException").toString()));
      }
      // validate the optional field `breeamCertificationException`
      if (jsonObj.get("breeamCertificationException") != null && !jsonObj.get("breeamCertificationException").isJsonNull()) {
        BreeamCertificationExceptionEnum.validateJsonElement(jsonObj.get("breeamCertificationException"));
      }
      if (jsonObj.get("ecoCertifications") != null && !jsonObj.get("ecoCertifications").isJsonNull()) {
        JsonArray jsonArrayecoCertifications = jsonObj.getAsJsonArray("ecoCertifications");
        if (jsonArrayecoCertifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ecoCertifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ecoCertifications` to be an array in the JSON string but got `%s`", jsonObj.get("ecoCertifications").toString()));
          }

          // validate the optional field `ecoCertifications` (array)
          for (int i = 0; i < jsonArrayecoCertifications.size(); i++) {
            EcoCertification.validateJsonElement(jsonArrayecoCertifications.get(i));
          };
        }
      }
      if ((jsonObj.get("leedCertification") != null && !jsonObj.get("leedCertification").isJsonNull()) && !jsonObj.get("leedCertification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leedCertification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leedCertification").toString()));
      }
      // validate the optional field `leedCertification`
      if (jsonObj.get("leedCertification") != null && !jsonObj.get("leedCertification").isJsonNull()) {
        LeedCertificationEnum.validateJsonElement(jsonObj.get("leedCertification"));
      }
      if ((jsonObj.get("leedCertificationException") != null && !jsonObj.get("leedCertificationException").isJsonNull()) && !jsonObj.get("leedCertificationException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leedCertificationException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leedCertificationException").toString()));
      }
      // validate the optional field `leedCertificationException`
      if (jsonObj.get("leedCertificationException") != null && !jsonObj.get("leedCertificationException").isJsonNull()) {
        LeedCertificationExceptionEnum.validateJsonElement(jsonObj.get("leedCertificationException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SustainabilityCertifications.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SustainabilityCertifications' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SustainabilityCertifications> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SustainabilityCertifications.class));

       return (TypeAdapter<T>) new TypeAdapter<SustainabilityCertifications>() {
           @Override
           public void write(JsonWriter out, SustainabilityCertifications value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SustainabilityCertifications read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SustainabilityCertifications given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SustainabilityCertifications
   * @throws IOException if the JSON string is invalid with respect to SustainabilityCertifications
   */
  public static SustainabilityCertifications fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SustainabilityCertifications.class);
  }

  /**
   * Convert an instance of SustainabilityCertifications to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

