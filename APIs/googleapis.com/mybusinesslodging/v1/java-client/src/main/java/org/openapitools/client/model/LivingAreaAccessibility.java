/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Accessibility features of the living area.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingAreaAccessibility {
  public static final String SERIALIZED_NAME_ADA_COMPLIANT_UNIT = "adaCompliantUnit";
  @SerializedName(SERIALIZED_NAME_ADA_COMPLIANT_UNIT)
  private Boolean adaCompliantUnit;

  /**
   * ADA compliant unit exception.
   */
  @JsonAdapter(AdaCompliantUnitExceptionEnum.Adapter.class)
  public enum AdaCompliantUnitExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AdaCompliantUnitExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdaCompliantUnitExceptionEnum fromValue(String value) {
      for (AdaCompliantUnitExceptionEnum b : AdaCompliantUnitExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdaCompliantUnitExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdaCompliantUnitExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdaCompliantUnitExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdaCompliantUnitExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdaCompliantUnitExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADA_COMPLIANT_UNIT_EXCEPTION = "adaCompliantUnitException";
  @SerializedName(SERIALIZED_NAME_ADA_COMPLIANT_UNIT_EXCEPTION)
  private AdaCompliantUnitExceptionEnum adaCompliantUnitException;

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_DOORBELL = "hearingAccessibleDoorbell";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_DOORBELL)
  private Boolean hearingAccessibleDoorbell;

  /**
   * Hearing-accessible doorbell exception.
   */
  @JsonAdapter(HearingAccessibleDoorbellExceptionEnum.Adapter.class)
  public enum HearingAccessibleDoorbellExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HearingAccessibleDoorbellExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HearingAccessibleDoorbellExceptionEnum fromValue(String value) {
      for (HearingAccessibleDoorbellExceptionEnum b : HearingAccessibleDoorbellExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HearingAccessibleDoorbellExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HearingAccessibleDoorbellExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HearingAccessibleDoorbellExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HearingAccessibleDoorbellExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HearingAccessibleDoorbellExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_DOORBELL_EXCEPTION = "hearingAccessibleDoorbellException";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_DOORBELL_EXCEPTION)
  private HearingAccessibleDoorbellExceptionEnum hearingAccessibleDoorbellException;

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_FIRE_ALARM = "hearingAccessibleFireAlarm";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_FIRE_ALARM)
  private Boolean hearingAccessibleFireAlarm;

  /**
   * Hearing-accessible fire alarm exception.
   */
  @JsonAdapter(HearingAccessibleFireAlarmExceptionEnum.Adapter.class)
  public enum HearingAccessibleFireAlarmExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HearingAccessibleFireAlarmExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HearingAccessibleFireAlarmExceptionEnum fromValue(String value) {
      for (HearingAccessibleFireAlarmExceptionEnum b : HearingAccessibleFireAlarmExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HearingAccessibleFireAlarmExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HearingAccessibleFireAlarmExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HearingAccessibleFireAlarmExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HearingAccessibleFireAlarmExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HearingAccessibleFireAlarmExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_FIRE_ALARM_EXCEPTION = "hearingAccessibleFireAlarmException";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_FIRE_ALARM_EXCEPTION)
  private HearingAccessibleFireAlarmExceptionEnum hearingAccessibleFireAlarmException;

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_UNIT = "hearingAccessibleUnit";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_UNIT)
  private Boolean hearingAccessibleUnit;

  /**
   * Hearing-accessible unit exception.
   */
  @JsonAdapter(HearingAccessibleUnitExceptionEnum.Adapter.class)
  public enum HearingAccessibleUnitExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HearingAccessibleUnitExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HearingAccessibleUnitExceptionEnum fromValue(String value) {
      for (HearingAccessibleUnitExceptionEnum b : HearingAccessibleUnitExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HearingAccessibleUnitExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HearingAccessibleUnitExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HearingAccessibleUnitExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HearingAccessibleUnitExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HearingAccessibleUnitExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEARING_ACCESSIBLE_UNIT_EXCEPTION = "hearingAccessibleUnitException";
  @SerializedName(SERIALIZED_NAME_HEARING_ACCESSIBLE_UNIT_EXCEPTION)
  private HearingAccessibleUnitExceptionEnum hearingAccessibleUnitException;

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_BATHTUB = "mobilityAccessibleBathtub";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_BATHTUB)
  private Boolean mobilityAccessibleBathtub;

  /**
   * Mobility-accessible bathtub exception.
   */
  @JsonAdapter(MobilityAccessibleBathtubExceptionEnum.Adapter.class)
  public enum MobilityAccessibleBathtubExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MobilityAccessibleBathtubExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilityAccessibleBathtubExceptionEnum fromValue(String value) {
      for (MobilityAccessibleBathtubExceptionEnum b : MobilityAccessibleBathtubExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilityAccessibleBathtubExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilityAccessibleBathtubExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilityAccessibleBathtubExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilityAccessibleBathtubExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MobilityAccessibleBathtubExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_BATHTUB_EXCEPTION = "mobilityAccessibleBathtubException";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_BATHTUB_EXCEPTION)
  private MobilityAccessibleBathtubExceptionEnum mobilityAccessibleBathtubException;

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_SHOWER = "mobilityAccessibleShower";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_SHOWER)
  private Boolean mobilityAccessibleShower;

  /**
   * Mobility-accessible shower exception.
   */
  @JsonAdapter(MobilityAccessibleShowerExceptionEnum.Adapter.class)
  public enum MobilityAccessibleShowerExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MobilityAccessibleShowerExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilityAccessibleShowerExceptionEnum fromValue(String value) {
      for (MobilityAccessibleShowerExceptionEnum b : MobilityAccessibleShowerExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilityAccessibleShowerExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilityAccessibleShowerExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilityAccessibleShowerExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilityAccessibleShowerExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MobilityAccessibleShowerExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_SHOWER_EXCEPTION = "mobilityAccessibleShowerException";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_SHOWER_EXCEPTION)
  private MobilityAccessibleShowerExceptionEnum mobilityAccessibleShowerException;

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_TOILET = "mobilityAccessibleToilet";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_TOILET)
  private Boolean mobilityAccessibleToilet;

  /**
   * Mobility-accessible toilet exception.
   */
  @JsonAdapter(MobilityAccessibleToiletExceptionEnum.Adapter.class)
  public enum MobilityAccessibleToiletExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MobilityAccessibleToiletExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilityAccessibleToiletExceptionEnum fromValue(String value) {
      for (MobilityAccessibleToiletExceptionEnum b : MobilityAccessibleToiletExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilityAccessibleToiletExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilityAccessibleToiletExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilityAccessibleToiletExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilityAccessibleToiletExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MobilityAccessibleToiletExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_TOILET_EXCEPTION = "mobilityAccessibleToiletException";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_TOILET_EXCEPTION)
  private MobilityAccessibleToiletExceptionEnum mobilityAccessibleToiletException;

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_UNIT = "mobilityAccessibleUnit";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_UNIT)
  private Boolean mobilityAccessibleUnit;

  /**
   * Mobility-accessible unit exception.
   */
  @JsonAdapter(MobilityAccessibleUnitExceptionEnum.Adapter.class)
  public enum MobilityAccessibleUnitExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MobilityAccessibleUnitExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilityAccessibleUnitExceptionEnum fromValue(String value) {
      for (MobilityAccessibleUnitExceptionEnum b : MobilityAccessibleUnitExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilityAccessibleUnitExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilityAccessibleUnitExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilityAccessibleUnitExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilityAccessibleUnitExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MobilityAccessibleUnitExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOBILITY_ACCESSIBLE_UNIT_EXCEPTION = "mobilityAccessibleUnitException";
  @SerializedName(SERIALIZED_NAME_MOBILITY_ACCESSIBLE_UNIT_EXCEPTION)
  private MobilityAccessibleUnitExceptionEnum mobilityAccessibleUnitException;

  public LivingAreaAccessibility() {
  }

  public LivingAreaAccessibility adaCompliantUnit(Boolean adaCompliantUnit) {
    this.adaCompliantUnit = adaCompliantUnit;
    return this;
  }

  /**
   * ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
   * @return adaCompliantUnit
   */
  @javax.annotation.Nullable
  public Boolean getAdaCompliantUnit() {
    return adaCompliantUnit;
  }

  public void setAdaCompliantUnit(Boolean adaCompliantUnit) {
    this.adaCompliantUnit = adaCompliantUnit;
  }


  public LivingAreaAccessibility adaCompliantUnitException(AdaCompliantUnitExceptionEnum adaCompliantUnitException) {
    this.adaCompliantUnitException = adaCompliantUnitException;
    return this;
  }

  /**
   * ADA compliant unit exception.
   * @return adaCompliantUnitException
   */
  @javax.annotation.Nullable
  public AdaCompliantUnitExceptionEnum getAdaCompliantUnitException() {
    return adaCompliantUnitException;
  }

  public void setAdaCompliantUnitException(AdaCompliantUnitExceptionEnum adaCompliantUnitException) {
    this.adaCompliantUnitException = adaCompliantUnitException;
  }


  public LivingAreaAccessibility hearingAccessibleDoorbell(Boolean hearingAccessibleDoorbell) {
    this.hearingAccessibleDoorbell = hearingAccessibleDoorbell;
    return this;
  }

  /**
   * Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.
   * @return hearingAccessibleDoorbell
   */
  @javax.annotation.Nullable
  public Boolean getHearingAccessibleDoorbell() {
    return hearingAccessibleDoorbell;
  }

  public void setHearingAccessibleDoorbell(Boolean hearingAccessibleDoorbell) {
    this.hearingAccessibleDoorbell = hearingAccessibleDoorbell;
  }


  public LivingAreaAccessibility hearingAccessibleDoorbellException(HearingAccessibleDoorbellExceptionEnum hearingAccessibleDoorbellException) {
    this.hearingAccessibleDoorbellException = hearingAccessibleDoorbellException;
    return this;
  }

  /**
   * Hearing-accessible doorbell exception.
   * @return hearingAccessibleDoorbellException
   */
  @javax.annotation.Nullable
  public HearingAccessibleDoorbellExceptionEnum getHearingAccessibleDoorbellException() {
    return hearingAccessibleDoorbellException;
  }

  public void setHearingAccessibleDoorbellException(HearingAccessibleDoorbellExceptionEnum hearingAccessibleDoorbellException) {
    this.hearingAccessibleDoorbellException = hearingAccessibleDoorbellException;
  }


  public LivingAreaAccessibility hearingAccessibleFireAlarm(Boolean hearingAccessibleFireAlarm) {
    this.hearingAccessibleFireAlarm = hearingAccessibleFireAlarm;
    return this;
  }

  /**
   * Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.
   * @return hearingAccessibleFireAlarm
   */
  @javax.annotation.Nullable
  public Boolean getHearingAccessibleFireAlarm() {
    return hearingAccessibleFireAlarm;
  }

  public void setHearingAccessibleFireAlarm(Boolean hearingAccessibleFireAlarm) {
    this.hearingAccessibleFireAlarm = hearingAccessibleFireAlarm;
  }


  public LivingAreaAccessibility hearingAccessibleFireAlarmException(HearingAccessibleFireAlarmExceptionEnum hearingAccessibleFireAlarmException) {
    this.hearingAccessibleFireAlarmException = hearingAccessibleFireAlarmException;
    return this;
  }

  /**
   * Hearing-accessible fire alarm exception.
   * @return hearingAccessibleFireAlarmException
   */
  @javax.annotation.Nullable
  public HearingAccessibleFireAlarmExceptionEnum getHearingAccessibleFireAlarmException() {
    return hearingAccessibleFireAlarmException;
  }

  public void setHearingAccessibleFireAlarmException(HearingAccessibleFireAlarmExceptionEnum hearingAccessibleFireAlarmException) {
    this.hearingAccessibleFireAlarmException = hearingAccessibleFireAlarmException;
  }


  public LivingAreaAccessibility hearingAccessibleUnit(Boolean hearingAccessibleUnit) {
    this.hearingAccessibleUnit = hearingAccessibleUnit;
    return this;
  }

  /**
   * Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.
   * @return hearingAccessibleUnit
   */
  @javax.annotation.Nullable
  public Boolean getHearingAccessibleUnit() {
    return hearingAccessibleUnit;
  }

  public void setHearingAccessibleUnit(Boolean hearingAccessibleUnit) {
    this.hearingAccessibleUnit = hearingAccessibleUnit;
  }


  public LivingAreaAccessibility hearingAccessibleUnitException(HearingAccessibleUnitExceptionEnum hearingAccessibleUnitException) {
    this.hearingAccessibleUnitException = hearingAccessibleUnitException;
    return this;
  }

  /**
   * Hearing-accessible unit exception.
   * @return hearingAccessibleUnitException
   */
  @javax.annotation.Nullable
  public HearingAccessibleUnitExceptionEnum getHearingAccessibleUnitException() {
    return hearingAccessibleUnitException;
  }

  public void setHearingAccessibleUnitException(HearingAccessibleUnitExceptionEnum hearingAccessibleUnitException) {
    this.hearingAccessibleUnitException = hearingAccessibleUnitException;
  }


  public LivingAreaAccessibility mobilityAccessibleBathtub(Boolean mobilityAccessibleBathtub) {
    this.mobilityAccessibleBathtub = mobilityAccessibleBathtub;
    return this;
  }

  /**
   * Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.
   * @return mobilityAccessibleBathtub
   */
  @javax.annotation.Nullable
  public Boolean getMobilityAccessibleBathtub() {
    return mobilityAccessibleBathtub;
  }

  public void setMobilityAccessibleBathtub(Boolean mobilityAccessibleBathtub) {
    this.mobilityAccessibleBathtub = mobilityAccessibleBathtub;
  }


  public LivingAreaAccessibility mobilityAccessibleBathtubException(MobilityAccessibleBathtubExceptionEnum mobilityAccessibleBathtubException) {
    this.mobilityAccessibleBathtubException = mobilityAccessibleBathtubException;
    return this;
  }

  /**
   * Mobility-accessible bathtub exception.
   * @return mobilityAccessibleBathtubException
   */
  @javax.annotation.Nullable
  public MobilityAccessibleBathtubExceptionEnum getMobilityAccessibleBathtubException() {
    return mobilityAccessibleBathtubException;
  }

  public void setMobilityAccessibleBathtubException(MobilityAccessibleBathtubExceptionEnum mobilityAccessibleBathtubException) {
    this.mobilityAccessibleBathtubException = mobilityAccessibleBathtubException;
  }


  public LivingAreaAccessibility mobilityAccessibleShower(Boolean mobilityAccessibleShower) {
    this.mobilityAccessibleShower = mobilityAccessibleShower;
    return this;
  }

  /**
   * Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.
   * @return mobilityAccessibleShower
   */
  @javax.annotation.Nullable
  public Boolean getMobilityAccessibleShower() {
    return mobilityAccessibleShower;
  }

  public void setMobilityAccessibleShower(Boolean mobilityAccessibleShower) {
    this.mobilityAccessibleShower = mobilityAccessibleShower;
  }


  public LivingAreaAccessibility mobilityAccessibleShowerException(MobilityAccessibleShowerExceptionEnum mobilityAccessibleShowerException) {
    this.mobilityAccessibleShowerException = mobilityAccessibleShowerException;
    return this;
  }

  /**
   * Mobility-accessible shower exception.
   * @return mobilityAccessibleShowerException
   */
  @javax.annotation.Nullable
  public MobilityAccessibleShowerExceptionEnum getMobilityAccessibleShowerException() {
    return mobilityAccessibleShowerException;
  }

  public void setMobilityAccessibleShowerException(MobilityAccessibleShowerExceptionEnum mobilityAccessibleShowerException) {
    this.mobilityAccessibleShowerException = mobilityAccessibleShowerException;
  }


  public LivingAreaAccessibility mobilityAccessibleToilet(Boolean mobilityAccessibleToilet) {
    this.mobilityAccessibleToilet = mobilityAccessibleToilet;
    return this;
  }

  /**
   * Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.
   * @return mobilityAccessibleToilet
   */
  @javax.annotation.Nullable
  public Boolean getMobilityAccessibleToilet() {
    return mobilityAccessibleToilet;
  }

  public void setMobilityAccessibleToilet(Boolean mobilityAccessibleToilet) {
    this.mobilityAccessibleToilet = mobilityAccessibleToilet;
  }


  public LivingAreaAccessibility mobilityAccessibleToiletException(MobilityAccessibleToiletExceptionEnum mobilityAccessibleToiletException) {
    this.mobilityAccessibleToiletException = mobilityAccessibleToiletException;
    return this;
  }

  /**
   * Mobility-accessible toilet exception.
   * @return mobilityAccessibleToiletException
   */
  @javax.annotation.Nullable
  public MobilityAccessibleToiletExceptionEnum getMobilityAccessibleToiletException() {
    return mobilityAccessibleToiletException;
  }

  public void setMobilityAccessibleToiletException(MobilityAccessibleToiletExceptionEnum mobilityAccessibleToiletException) {
    this.mobilityAccessibleToiletException = mobilityAccessibleToiletException;
  }


  public LivingAreaAccessibility mobilityAccessibleUnit(Boolean mobilityAccessibleUnit) {
    this.mobilityAccessibleUnit = mobilityAccessibleUnit;
    return this;
  }

  /**
   * Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
   * @return mobilityAccessibleUnit
   */
  @javax.annotation.Nullable
  public Boolean getMobilityAccessibleUnit() {
    return mobilityAccessibleUnit;
  }

  public void setMobilityAccessibleUnit(Boolean mobilityAccessibleUnit) {
    this.mobilityAccessibleUnit = mobilityAccessibleUnit;
  }


  public LivingAreaAccessibility mobilityAccessibleUnitException(MobilityAccessibleUnitExceptionEnum mobilityAccessibleUnitException) {
    this.mobilityAccessibleUnitException = mobilityAccessibleUnitException;
    return this;
  }

  /**
   * Mobility-accessible unit exception.
   * @return mobilityAccessibleUnitException
   */
  @javax.annotation.Nullable
  public MobilityAccessibleUnitExceptionEnum getMobilityAccessibleUnitException() {
    return mobilityAccessibleUnitException;
  }

  public void setMobilityAccessibleUnitException(MobilityAccessibleUnitExceptionEnum mobilityAccessibleUnitException) {
    this.mobilityAccessibleUnitException = mobilityAccessibleUnitException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingAreaAccessibility livingAreaAccessibility = (LivingAreaAccessibility) o;
    return Objects.equals(this.adaCompliantUnit, livingAreaAccessibility.adaCompliantUnit) &&
        Objects.equals(this.adaCompliantUnitException, livingAreaAccessibility.adaCompliantUnitException) &&
        Objects.equals(this.hearingAccessibleDoorbell, livingAreaAccessibility.hearingAccessibleDoorbell) &&
        Objects.equals(this.hearingAccessibleDoorbellException, livingAreaAccessibility.hearingAccessibleDoorbellException) &&
        Objects.equals(this.hearingAccessibleFireAlarm, livingAreaAccessibility.hearingAccessibleFireAlarm) &&
        Objects.equals(this.hearingAccessibleFireAlarmException, livingAreaAccessibility.hearingAccessibleFireAlarmException) &&
        Objects.equals(this.hearingAccessibleUnit, livingAreaAccessibility.hearingAccessibleUnit) &&
        Objects.equals(this.hearingAccessibleUnitException, livingAreaAccessibility.hearingAccessibleUnitException) &&
        Objects.equals(this.mobilityAccessibleBathtub, livingAreaAccessibility.mobilityAccessibleBathtub) &&
        Objects.equals(this.mobilityAccessibleBathtubException, livingAreaAccessibility.mobilityAccessibleBathtubException) &&
        Objects.equals(this.mobilityAccessibleShower, livingAreaAccessibility.mobilityAccessibleShower) &&
        Objects.equals(this.mobilityAccessibleShowerException, livingAreaAccessibility.mobilityAccessibleShowerException) &&
        Objects.equals(this.mobilityAccessibleToilet, livingAreaAccessibility.mobilityAccessibleToilet) &&
        Objects.equals(this.mobilityAccessibleToiletException, livingAreaAccessibility.mobilityAccessibleToiletException) &&
        Objects.equals(this.mobilityAccessibleUnit, livingAreaAccessibility.mobilityAccessibleUnit) &&
        Objects.equals(this.mobilityAccessibleUnitException, livingAreaAccessibility.mobilityAccessibleUnitException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaCompliantUnit, adaCompliantUnitException, hearingAccessibleDoorbell, hearingAccessibleDoorbellException, hearingAccessibleFireAlarm, hearingAccessibleFireAlarmException, hearingAccessibleUnit, hearingAccessibleUnitException, mobilityAccessibleBathtub, mobilityAccessibleBathtubException, mobilityAccessibleShower, mobilityAccessibleShowerException, mobilityAccessibleToilet, mobilityAccessibleToiletException, mobilityAccessibleUnit, mobilityAccessibleUnitException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingAreaAccessibility {\n");
    sb.append("    adaCompliantUnit: ").append(toIndentedString(adaCompliantUnit)).append("\n");
    sb.append("    adaCompliantUnitException: ").append(toIndentedString(adaCompliantUnitException)).append("\n");
    sb.append("    hearingAccessibleDoorbell: ").append(toIndentedString(hearingAccessibleDoorbell)).append("\n");
    sb.append("    hearingAccessibleDoorbellException: ").append(toIndentedString(hearingAccessibleDoorbellException)).append("\n");
    sb.append("    hearingAccessibleFireAlarm: ").append(toIndentedString(hearingAccessibleFireAlarm)).append("\n");
    sb.append("    hearingAccessibleFireAlarmException: ").append(toIndentedString(hearingAccessibleFireAlarmException)).append("\n");
    sb.append("    hearingAccessibleUnit: ").append(toIndentedString(hearingAccessibleUnit)).append("\n");
    sb.append("    hearingAccessibleUnitException: ").append(toIndentedString(hearingAccessibleUnitException)).append("\n");
    sb.append("    mobilityAccessibleBathtub: ").append(toIndentedString(mobilityAccessibleBathtub)).append("\n");
    sb.append("    mobilityAccessibleBathtubException: ").append(toIndentedString(mobilityAccessibleBathtubException)).append("\n");
    sb.append("    mobilityAccessibleShower: ").append(toIndentedString(mobilityAccessibleShower)).append("\n");
    sb.append("    mobilityAccessibleShowerException: ").append(toIndentedString(mobilityAccessibleShowerException)).append("\n");
    sb.append("    mobilityAccessibleToilet: ").append(toIndentedString(mobilityAccessibleToilet)).append("\n");
    sb.append("    mobilityAccessibleToiletException: ").append(toIndentedString(mobilityAccessibleToiletException)).append("\n");
    sb.append("    mobilityAccessibleUnit: ").append(toIndentedString(mobilityAccessibleUnit)).append("\n");
    sb.append("    mobilityAccessibleUnitException: ").append(toIndentedString(mobilityAccessibleUnitException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adaCompliantUnit");
    openapiFields.add("adaCompliantUnitException");
    openapiFields.add("hearingAccessibleDoorbell");
    openapiFields.add("hearingAccessibleDoorbellException");
    openapiFields.add("hearingAccessibleFireAlarm");
    openapiFields.add("hearingAccessibleFireAlarmException");
    openapiFields.add("hearingAccessibleUnit");
    openapiFields.add("hearingAccessibleUnitException");
    openapiFields.add("mobilityAccessibleBathtub");
    openapiFields.add("mobilityAccessibleBathtubException");
    openapiFields.add("mobilityAccessibleShower");
    openapiFields.add("mobilityAccessibleShowerException");
    openapiFields.add("mobilityAccessibleToilet");
    openapiFields.add("mobilityAccessibleToiletException");
    openapiFields.add("mobilityAccessibleUnit");
    openapiFields.add("mobilityAccessibleUnitException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingAreaAccessibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingAreaAccessibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingAreaAccessibility is not found in the empty JSON string", LivingAreaAccessibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingAreaAccessibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingAreaAccessibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adaCompliantUnitException") != null && !jsonObj.get("adaCompliantUnitException").isJsonNull()) && !jsonObj.get("adaCompliantUnitException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adaCompliantUnitException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adaCompliantUnitException").toString()));
      }
      // validate the optional field `adaCompliantUnitException`
      if (jsonObj.get("adaCompliantUnitException") != null && !jsonObj.get("adaCompliantUnitException").isJsonNull()) {
        AdaCompliantUnitExceptionEnum.validateJsonElement(jsonObj.get("adaCompliantUnitException"));
      }
      if ((jsonObj.get("hearingAccessibleDoorbellException") != null && !jsonObj.get("hearingAccessibleDoorbellException").isJsonNull()) && !jsonObj.get("hearingAccessibleDoorbellException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hearingAccessibleDoorbellException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hearingAccessibleDoorbellException").toString()));
      }
      // validate the optional field `hearingAccessibleDoorbellException`
      if (jsonObj.get("hearingAccessibleDoorbellException") != null && !jsonObj.get("hearingAccessibleDoorbellException").isJsonNull()) {
        HearingAccessibleDoorbellExceptionEnum.validateJsonElement(jsonObj.get("hearingAccessibleDoorbellException"));
      }
      if ((jsonObj.get("hearingAccessibleFireAlarmException") != null && !jsonObj.get("hearingAccessibleFireAlarmException").isJsonNull()) && !jsonObj.get("hearingAccessibleFireAlarmException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hearingAccessibleFireAlarmException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hearingAccessibleFireAlarmException").toString()));
      }
      // validate the optional field `hearingAccessibleFireAlarmException`
      if (jsonObj.get("hearingAccessibleFireAlarmException") != null && !jsonObj.get("hearingAccessibleFireAlarmException").isJsonNull()) {
        HearingAccessibleFireAlarmExceptionEnum.validateJsonElement(jsonObj.get("hearingAccessibleFireAlarmException"));
      }
      if ((jsonObj.get("hearingAccessibleUnitException") != null && !jsonObj.get("hearingAccessibleUnitException").isJsonNull()) && !jsonObj.get("hearingAccessibleUnitException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hearingAccessibleUnitException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hearingAccessibleUnitException").toString()));
      }
      // validate the optional field `hearingAccessibleUnitException`
      if (jsonObj.get("hearingAccessibleUnitException") != null && !jsonObj.get("hearingAccessibleUnitException").isJsonNull()) {
        HearingAccessibleUnitExceptionEnum.validateJsonElement(jsonObj.get("hearingAccessibleUnitException"));
      }
      if ((jsonObj.get("mobilityAccessibleBathtubException") != null && !jsonObj.get("mobilityAccessibleBathtubException").isJsonNull()) && !jsonObj.get("mobilityAccessibleBathtubException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilityAccessibleBathtubException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilityAccessibleBathtubException").toString()));
      }
      // validate the optional field `mobilityAccessibleBathtubException`
      if (jsonObj.get("mobilityAccessibleBathtubException") != null && !jsonObj.get("mobilityAccessibleBathtubException").isJsonNull()) {
        MobilityAccessibleBathtubExceptionEnum.validateJsonElement(jsonObj.get("mobilityAccessibleBathtubException"));
      }
      if ((jsonObj.get("mobilityAccessibleShowerException") != null && !jsonObj.get("mobilityAccessibleShowerException").isJsonNull()) && !jsonObj.get("mobilityAccessibleShowerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilityAccessibleShowerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilityAccessibleShowerException").toString()));
      }
      // validate the optional field `mobilityAccessibleShowerException`
      if (jsonObj.get("mobilityAccessibleShowerException") != null && !jsonObj.get("mobilityAccessibleShowerException").isJsonNull()) {
        MobilityAccessibleShowerExceptionEnum.validateJsonElement(jsonObj.get("mobilityAccessibleShowerException"));
      }
      if ((jsonObj.get("mobilityAccessibleToiletException") != null && !jsonObj.get("mobilityAccessibleToiletException").isJsonNull()) && !jsonObj.get("mobilityAccessibleToiletException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilityAccessibleToiletException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilityAccessibleToiletException").toString()));
      }
      // validate the optional field `mobilityAccessibleToiletException`
      if (jsonObj.get("mobilityAccessibleToiletException") != null && !jsonObj.get("mobilityAccessibleToiletException").isJsonNull()) {
        MobilityAccessibleToiletExceptionEnum.validateJsonElement(jsonObj.get("mobilityAccessibleToiletException"));
      }
      if ((jsonObj.get("mobilityAccessibleUnitException") != null && !jsonObj.get("mobilityAccessibleUnitException").isJsonNull()) && !jsonObj.get("mobilityAccessibleUnitException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilityAccessibleUnitException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilityAccessibleUnitException").toString()));
      }
      // validate the optional field `mobilityAccessibleUnitException`
      if (jsonObj.get("mobilityAccessibleUnitException") != null && !jsonObj.get("mobilityAccessibleUnitException").isJsonNull()) {
        MobilityAccessibleUnitExceptionEnum.validateJsonElement(jsonObj.get("mobilityAccessibleUnitException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingAreaAccessibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingAreaAccessibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingAreaAccessibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingAreaAccessibility.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingAreaAccessibility>() {
           @Override
           public void write(JsonWriter out, LivingAreaAccessibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingAreaAccessibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingAreaAccessibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingAreaAccessibility
   * @throws IOException if the JSON string is invalid with respect to LivingAreaAccessibility
   */
  public static LivingAreaAccessibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingAreaAccessibility.class);
  }

  /**
   * Convert an instance of LivingAreaAccessibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

