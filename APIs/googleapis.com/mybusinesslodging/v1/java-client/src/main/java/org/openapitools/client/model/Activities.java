/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Amenities and features related to leisure and play.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activities {
  public static final String SERIALIZED_NAME_BEACH_ACCESS = "beachAccess";
  @SerializedName(SERIALIZED_NAME_BEACH_ACCESS)
  private Boolean beachAccess;

  /**
   * Beach access exception.
   */
  @JsonAdapter(BeachAccessExceptionEnum.Adapter.class)
  public enum BeachAccessExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BeachAccessExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BeachAccessExceptionEnum fromValue(String value) {
      for (BeachAccessExceptionEnum b : BeachAccessExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BeachAccessExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BeachAccessExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BeachAccessExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BeachAccessExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BeachAccessExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEACH_ACCESS_EXCEPTION = "beachAccessException";
  @SerializedName(SERIALIZED_NAME_BEACH_ACCESS_EXCEPTION)
  private BeachAccessExceptionEnum beachAccessException;

  public static final String SERIALIZED_NAME_BEACH_FRONT = "beachFront";
  @SerializedName(SERIALIZED_NAME_BEACH_FRONT)
  private Boolean beachFront;

  /**
   * Beach front exception.
   */
  @JsonAdapter(BeachFrontExceptionEnum.Adapter.class)
  public enum BeachFrontExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BeachFrontExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BeachFrontExceptionEnum fromValue(String value) {
      for (BeachFrontExceptionEnum b : BeachFrontExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BeachFrontExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BeachFrontExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BeachFrontExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BeachFrontExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BeachFrontExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEACH_FRONT_EXCEPTION = "beachFrontException";
  @SerializedName(SERIALIZED_NAME_BEACH_FRONT_EXCEPTION)
  private BeachFrontExceptionEnum beachFrontException;

  public static final String SERIALIZED_NAME_BICYCLE_RENTAL = "bicycleRental";
  @SerializedName(SERIALIZED_NAME_BICYCLE_RENTAL)
  private Boolean bicycleRental;

  /**
   * Bicycle rental exception.
   */
  @JsonAdapter(BicycleRentalExceptionEnum.Adapter.class)
  public enum BicycleRentalExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BicycleRentalExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BicycleRentalExceptionEnum fromValue(String value) {
      for (BicycleRentalExceptionEnum b : BicycleRentalExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BicycleRentalExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BicycleRentalExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BicycleRentalExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BicycleRentalExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BicycleRentalExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BICYCLE_RENTAL_EXCEPTION = "bicycleRentalException";
  @SerializedName(SERIALIZED_NAME_BICYCLE_RENTAL_EXCEPTION)
  private BicycleRentalExceptionEnum bicycleRentalException;

  public static final String SERIALIZED_NAME_BOUTIQUE_STORES = "boutiqueStores";
  @SerializedName(SERIALIZED_NAME_BOUTIQUE_STORES)
  private Boolean boutiqueStores;

  /**
   * Boutique stores exception.
   */
  @JsonAdapter(BoutiqueStoresExceptionEnum.Adapter.class)
  public enum BoutiqueStoresExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BoutiqueStoresExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BoutiqueStoresExceptionEnum fromValue(String value) {
      for (BoutiqueStoresExceptionEnum b : BoutiqueStoresExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BoutiqueStoresExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BoutiqueStoresExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BoutiqueStoresExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BoutiqueStoresExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BoutiqueStoresExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOUTIQUE_STORES_EXCEPTION = "boutiqueStoresException";
  @SerializedName(SERIALIZED_NAME_BOUTIQUE_STORES_EXCEPTION)
  private BoutiqueStoresExceptionEnum boutiqueStoresException;

  public static final String SERIALIZED_NAME_CASINO = "casino";
  @SerializedName(SERIALIZED_NAME_CASINO)
  private Boolean casino;

  /**
   * Casino exception.
   */
  @JsonAdapter(CasinoExceptionEnum.Adapter.class)
  public enum CasinoExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CasinoExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CasinoExceptionEnum fromValue(String value) {
      for (CasinoExceptionEnum b : CasinoExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CasinoExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CasinoExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CasinoExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CasinoExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CasinoExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CASINO_EXCEPTION = "casinoException";
  @SerializedName(SERIALIZED_NAME_CASINO_EXCEPTION)
  private CasinoExceptionEnum casinoException;

  public static final String SERIALIZED_NAME_FREE_BICYCLE_RENTAL = "freeBicycleRental";
  @SerializedName(SERIALIZED_NAME_FREE_BICYCLE_RENTAL)
  private Boolean freeBicycleRental;

  /**
   * Free bicycle rental exception.
   */
  @JsonAdapter(FreeBicycleRentalExceptionEnum.Adapter.class)
  public enum FreeBicycleRentalExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeBicycleRentalExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeBicycleRentalExceptionEnum fromValue(String value) {
      for (FreeBicycleRentalExceptionEnum b : FreeBicycleRentalExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeBicycleRentalExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeBicycleRentalExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeBicycleRentalExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeBicycleRentalExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeBicycleRentalExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_BICYCLE_RENTAL_EXCEPTION = "freeBicycleRentalException";
  @SerializedName(SERIALIZED_NAME_FREE_BICYCLE_RENTAL_EXCEPTION)
  private FreeBicycleRentalExceptionEnum freeBicycleRentalException;

  public static final String SERIALIZED_NAME_FREE_WATERCRAFT_RENTAL = "freeWatercraftRental";
  @SerializedName(SERIALIZED_NAME_FREE_WATERCRAFT_RENTAL)
  private Boolean freeWatercraftRental;

  /**
   * Free Watercraft rental exception.
   */
  @JsonAdapter(FreeWatercraftRentalExceptionEnum.Adapter.class)
  public enum FreeWatercraftRentalExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeWatercraftRentalExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeWatercraftRentalExceptionEnum fromValue(String value) {
      for (FreeWatercraftRentalExceptionEnum b : FreeWatercraftRentalExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeWatercraftRentalExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeWatercraftRentalExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeWatercraftRentalExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeWatercraftRentalExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeWatercraftRentalExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_WATERCRAFT_RENTAL_EXCEPTION = "freeWatercraftRentalException";
  @SerializedName(SERIALIZED_NAME_FREE_WATERCRAFT_RENTAL_EXCEPTION)
  private FreeWatercraftRentalExceptionEnum freeWatercraftRentalException;

  public static final String SERIALIZED_NAME_GAME_ROOM = "gameRoom";
  @SerializedName(SERIALIZED_NAME_GAME_ROOM)
  private Boolean gameRoom;

  /**
   * Game room exception.
   */
  @JsonAdapter(GameRoomExceptionEnum.Adapter.class)
  public enum GameRoomExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GameRoomExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GameRoomExceptionEnum fromValue(String value) {
      for (GameRoomExceptionEnum b : GameRoomExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GameRoomExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GameRoomExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GameRoomExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GameRoomExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GameRoomExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GAME_ROOM_EXCEPTION = "gameRoomException";
  @SerializedName(SERIALIZED_NAME_GAME_ROOM_EXCEPTION)
  private GameRoomExceptionEnum gameRoomException;

  public static final String SERIALIZED_NAME_GOLF = "golf";
  @SerializedName(SERIALIZED_NAME_GOLF)
  private Boolean golf;

  /**
   * Golf exception.
   */
  @JsonAdapter(GolfExceptionEnum.Adapter.class)
  public enum GolfExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GolfExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GolfExceptionEnum fromValue(String value) {
      for (GolfExceptionEnum b : GolfExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GolfExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GolfExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GolfExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GolfExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GolfExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOLF_EXCEPTION = "golfException";
  @SerializedName(SERIALIZED_NAME_GOLF_EXCEPTION)
  private GolfExceptionEnum golfException;

  public static final String SERIALIZED_NAME_HORSEBACK_RIDING = "horsebackRiding";
  @SerializedName(SERIALIZED_NAME_HORSEBACK_RIDING)
  private Boolean horsebackRiding;

  /**
   * Horseback riding exception.
   */
  @JsonAdapter(HorsebackRidingExceptionEnum.Adapter.class)
  public enum HorsebackRidingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HorsebackRidingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorsebackRidingExceptionEnum fromValue(String value) {
      for (HorsebackRidingExceptionEnum b : HorsebackRidingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorsebackRidingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorsebackRidingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorsebackRidingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorsebackRidingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorsebackRidingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORSEBACK_RIDING_EXCEPTION = "horsebackRidingException";
  @SerializedName(SERIALIZED_NAME_HORSEBACK_RIDING_EXCEPTION)
  private HorsebackRidingExceptionEnum horsebackRidingException;

  public static final String SERIALIZED_NAME_NIGHTCLUB = "nightclub";
  @SerializedName(SERIALIZED_NAME_NIGHTCLUB)
  private Boolean nightclub;

  /**
   * Nightclub exception.
   */
  @JsonAdapter(NightclubExceptionEnum.Adapter.class)
  public enum NightclubExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NightclubExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NightclubExceptionEnum fromValue(String value) {
      for (NightclubExceptionEnum b : NightclubExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NightclubExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NightclubExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NightclubExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NightclubExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NightclubExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NIGHTCLUB_EXCEPTION = "nightclubException";
  @SerializedName(SERIALIZED_NAME_NIGHTCLUB_EXCEPTION)
  private NightclubExceptionEnum nightclubException;

  public static final String SERIALIZED_NAME_PRIVATE_BEACH = "privateBeach";
  @SerializedName(SERIALIZED_NAME_PRIVATE_BEACH)
  private Boolean privateBeach;

  /**
   * Private beach exception.
   */
  @JsonAdapter(PrivateBeachExceptionEnum.Adapter.class)
  public enum PrivateBeachExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PrivateBeachExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateBeachExceptionEnum fromValue(String value) {
      for (PrivateBeachExceptionEnum b : PrivateBeachExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateBeachExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateBeachExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateBeachExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateBeachExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateBeachExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_BEACH_EXCEPTION = "privateBeachException";
  @SerializedName(SERIALIZED_NAME_PRIVATE_BEACH_EXCEPTION)
  private PrivateBeachExceptionEnum privateBeachException;

  public static final String SERIALIZED_NAME_SCUBA = "scuba";
  @SerializedName(SERIALIZED_NAME_SCUBA)
  private Boolean scuba;

  /**
   * Scuba exception.
   */
  @JsonAdapter(ScubaExceptionEnum.Adapter.class)
  public enum ScubaExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ScubaExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScubaExceptionEnum fromValue(String value) {
      for (ScubaExceptionEnum b : ScubaExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScubaExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScubaExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScubaExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScubaExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScubaExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCUBA_EXCEPTION = "scubaException";
  @SerializedName(SERIALIZED_NAME_SCUBA_EXCEPTION)
  private ScubaExceptionEnum scubaException;

  public static final String SERIALIZED_NAME_SNORKELING = "snorkeling";
  @SerializedName(SERIALIZED_NAME_SNORKELING)
  private Boolean snorkeling;

  /**
   * Snorkeling exception.
   */
  @JsonAdapter(SnorkelingExceptionEnum.Adapter.class)
  public enum SnorkelingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SnorkelingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SnorkelingExceptionEnum fromValue(String value) {
      for (SnorkelingExceptionEnum b : SnorkelingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SnorkelingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SnorkelingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SnorkelingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SnorkelingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SnorkelingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SNORKELING_EXCEPTION = "snorkelingException";
  @SerializedName(SERIALIZED_NAME_SNORKELING_EXCEPTION)
  private SnorkelingExceptionEnum snorkelingException;

  public static final String SERIALIZED_NAME_TENNIS = "tennis";
  @SerializedName(SERIALIZED_NAME_TENNIS)
  private Boolean tennis;

  /**
   * Tennis exception.
   */
  @JsonAdapter(TennisExceptionEnum.Adapter.class)
  public enum TennisExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TennisExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TennisExceptionEnum fromValue(String value) {
      for (TennisExceptionEnum b : TennisExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TennisExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TennisExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TennisExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TennisExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TennisExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TENNIS_EXCEPTION = "tennisException";
  @SerializedName(SERIALIZED_NAME_TENNIS_EXCEPTION)
  private TennisExceptionEnum tennisException;

  public static final String SERIALIZED_NAME_WATER_SKIING = "waterSkiing";
  @SerializedName(SERIALIZED_NAME_WATER_SKIING)
  private Boolean waterSkiing;

  /**
   * Water skiing exception.
   */
  @JsonAdapter(WaterSkiingExceptionEnum.Adapter.class)
  public enum WaterSkiingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterSkiingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterSkiingExceptionEnum fromValue(String value) {
      for (WaterSkiingExceptionEnum b : WaterSkiingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterSkiingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterSkiingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterSkiingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterSkiingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterSkiingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_SKIING_EXCEPTION = "waterSkiingException";
  @SerializedName(SERIALIZED_NAME_WATER_SKIING_EXCEPTION)
  private WaterSkiingExceptionEnum waterSkiingException;

  public static final String SERIALIZED_NAME_WATERCRAFT_RENTAL = "watercraftRental";
  @SerializedName(SERIALIZED_NAME_WATERCRAFT_RENTAL)
  private Boolean watercraftRental;

  /**
   * Watercraft rental exception.
   */
  @JsonAdapter(WatercraftRentalExceptionEnum.Adapter.class)
  public enum WatercraftRentalExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WatercraftRentalExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WatercraftRentalExceptionEnum fromValue(String value) {
      for (WatercraftRentalExceptionEnum b : WatercraftRentalExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WatercraftRentalExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WatercraftRentalExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WatercraftRentalExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WatercraftRentalExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WatercraftRentalExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATERCRAFT_RENTAL_EXCEPTION = "watercraftRentalException";
  @SerializedName(SERIALIZED_NAME_WATERCRAFT_RENTAL_EXCEPTION)
  private WatercraftRentalExceptionEnum watercraftRentalException;

  public Activities() {
  }

  public Activities beachAccess(Boolean beachAccess) {
    this.beachAccess = beachAccess;
    return this;
  }

  /**
   * Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel&#39;s proximity is close to but not right on the beach).
   * @return beachAccess
   */
  @javax.annotation.Nullable
  public Boolean getBeachAccess() {
    return beachAccess;
  }

  public void setBeachAccess(Boolean beachAccess) {
    this.beachAccess = beachAccess;
  }


  public Activities beachAccessException(BeachAccessExceptionEnum beachAccessException) {
    this.beachAccessException = beachAccessException;
    return this;
  }

  /**
   * Beach access exception.
   * @return beachAccessException
   */
  @javax.annotation.Nullable
  public BeachAccessExceptionEnum getBeachAccessException() {
    return beachAccessException;
  }

  public void setBeachAccessException(BeachAccessExceptionEnum beachAccessException) {
    this.beachAccessException = beachAccessException;
  }


  public Activities beachFront(Boolean beachFront) {
    this.beachFront = beachFront;
    return this;
  }

  /**
   * Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.
   * @return beachFront
   */
  @javax.annotation.Nullable
  public Boolean getBeachFront() {
    return beachFront;
  }

  public void setBeachFront(Boolean beachFront) {
    this.beachFront = beachFront;
  }


  public Activities beachFrontException(BeachFrontExceptionEnum beachFrontException) {
    this.beachFrontException = beachFrontException;
    return this;
  }

  /**
   * Beach front exception.
   * @return beachFrontException
   */
  @javax.annotation.Nullable
  public BeachFrontExceptionEnum getBeachFrontException() {
    return beachFrontException;
  }

  public void setBeachFrontException(BeachFrontExceptionEnum beachFrontException) {
    this.beachFrontException = beachFrontException;
  }


  public Activities bicycleRental(Boolean bicycleRental) {
    this.bicycleRental = bicycleRental;
    return this;
  }

  /**
   * Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.
   * @return bicycleRental
   */
  @javax.annotation.Nullable
  public Boolean getBicycleRental() {
    return bicycleRental;
  }

  public void setBicycleRental(Boolean bicycleRental) {
    this.bicycleRental = bicycleRental;
  }


  public Activities bicycleRentalException(BicycleRentalExceptionEnum bicycleRentalException) {
    this.bicycleRentalException = bicycleRentalException;
    return this;
  }

  /**
   * Bicycle rental exception.
   * @return bicycleRentalException
   */
  @javax.annotation.Nullable
  public BicycleRentalExceptionEnum getBicycleRentalException() {
    return bicycleRentalException;
  }

  public void setBicycleRentalException(BicycleRentalExceptionEnum bicycleRentalException) {
    this.bicycleRentalException = bicycleRentalException;
  }


  public Activities boutiqueStores(Boolean boutiqueStores) {
    this.boutiqueStores = boutiqueStores;
    return this;
  }

  /**
   * Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.
   * @return boutiqueStores
   */
  @javax.annotation.Nullable
  public Boolean getBoutiqueStores() {
    return boutiqueStores;
  }

  public void setBoutiqueStores(Boolean boutiqueStores) {
    this.boutiqueStores = boutiqueStores;
  }


  public Activities boutiqueStoresException(BoutiqueStoresExceptionEnum boutiqueStoresException) {
    this.boutiqueStoresException = boutiqueStoresException;
    return this;
  }

  /**
   * Boutique stores exception.
   * @return boutiqueStoresException
   */
  @javax.annotation.Nullable
  public BoutiqueStoresExceptionEnum getBoutiqueStoresException() {
    return boutiqueStoresException;
  }

  public void setBoutiqueStoresException(BoutiqueStoresExceptionEnum boutiqueStoresException) {
    this.boutiqueStoresException = boutiqueStoresException;
  }


  public Activities casino(Boolean casino) {
    this.casino = casino;
    return this;
  }

  /**
   * Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.
   * @return casino
   */
  @javax.annotation.Nullable
  public Boolean getCasino() {
    return casino;
  }

  public void setCasino(Boolean casino) {
    this.casino = casino;
  }


  public Activities casinoException(CasinoExceptionEnum casinoException) {
    this.casinoException = casinoException;
    return this;
  }

  /**
   * Casino exception.
   * @return casinoException
   */
  @javax.annotation.Nullable
  public CasinoExceptionEnum getCasinoException() {
    return casinoException;
  }

  public void setCasinoException(CasinoExceptionEnum casinoException) {
    this.casinoException = casinoException;
  }


  public Activities freeBicycleRental(Boolean freeBicycleRental) {
    this.freeBicycleRental = freeBicycleRental;
    return this;
  }

  /**
   * Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.
   * @return freeBicycleRental
   */
  @javax.annotation.Nullable
  public Boolean getFreeBicycleRental() {
    return freeBicycleRental;
  }

  public void setFreeBicycleRental(Boolean freeBicycleRental) {
    this.freeBicycleRental = freeBicycleRental;
  }


  public Activities freeBicycleRentalException(FreeBicycleRentalExceptionEnum freeBicycleRentalException) {
    this.freeBicycleRentalException = freeBicycleRentalException;
    return this;
  }

  /**
   * Free bicycle rental exception.
   * @return freeBicycleRentalException
   */
  @javax.annotation.Nullable
  public FreeBicycleRentalExceptionEnum getFreeBicycleRentalException() {
    return freeBicycleRentalException;
  }

  public void setFreeBicycleRentalException(FreeBicycleRentalExceptionEnum freeBicycleRentalException) {
    this.freeBicycleRentalException = freeBicycleRentalException;
  }


  public Activities freeWatercraftRental(Boolean freeWatercraftRental) {
    this.freeWatercraftRental = freeWatercraftRental;
    return this;
  }

  /**
   * Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.
   * @return freeWatercraftRental
   */
  @javax.annotation.Nullable
  public Boolean getFreeWatercraftRental() {
    return freeWatercraftRental;
  }

  public void setFreeWatercraftRental(Boolean freeWatercraftRental) {
    this.freeWatercraftRental = freeWatercraftRental;
  }


  public Activities freeWatercraftRentalException(FreeWatercraftRentalExceptionEnum freeWatercraftRentalException) {
    this.freeWatercraftRentalException = freeWatercraftRentalException;
    return this;
  }

  /**
   * Free Watercraft rental exception.
   * @return freeWatercraftRentalException
   */
  @javax.annotation.Nullable
  public FreeWatercraftRentalExceptionEnum getFreeWatercraftRentalException() {
    return freeWatercraftRentalException;
  }

  public void setFreeWatercraftRentalException(FreeWatercraftRentalExceptionEnum freeWatercraftRentalException) {
    this.freeWatercraftRentalException = freeWatercraftRentalException;
  }


  public Activities gameRoom(Boolean gameRoom) {
    this.gameRoom = gameRoom;
    return this;
  }

  /**
   * Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.
   * @return gameRoom
   */
  @javax.annotation.Nullable
  public Boolean getGameRoom() {
    return gameRoom;
  }

  public void setGameRoom(Boolean gameRoom) {
    this.gameRoom = gameRoom;
  }


  public Activities gameRoomException(GameRoomExceptionEnum gameRoomException) {
    this.gameRoomException = gameRoomException;
    return this;
  }

  /**
   * Game room exception.
   * @return gameRoomException
   */
  @javax.annotation.Nullable
  public GameRoomExceptionEnum getGameRoomException() {
    return gameRoomException;
  }

  public void setGameRoomException(GameRoomExceptionEnum gameRoomException) {
    this.gameRoomException = gameRoomException;
  }


  public Activities golf(Boolean golf) {
    this.golf = golf;
    return this;
  }

  /**
   * Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.
   * @return golf
   */
  @javax.annotation.Nullable
  public Boolean getGolf() {
    return golf;
  }

  public void setGolf(Boolean golf) {
    this.golf = golf;
  }


  public Activities golfException(GolfExceptionEnum golfException) {
    this.golfException = golfException;
    return this;
  }

  /**
   * Golf exception.
   * @return golfException
   */
  @javax.annotation.Nullable
  public GolfExceptionEnum getGolfException() {
    return golfException;
  }

  public void setGolfException(GolfExceptionEnum golfException) {
    this.golfException = golfException;
  }


  public Activities horsebackRiding(Boolean horsebackRiding) {
    this.horsebackRiding = horsebackRiding;
    return this;
  }

  /**
   * Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.
   * @return horsebackRiding
   */
  @javax.annotation.Nullable
  public Boolean getHorsebackRiding() {
    return horsebackRiding;
  }

  public void setHorsebackRiding(Boolean horsebackRiding) {
    this.horsebackRiding = horsebackRiding;
  }


  public Activities horsebackRidingException(HorsebackRidingExceptionEnum horsebackRidingException) {
    this.horsebackRidingException = horsebackRidingException;
    return this;
  }

  /**
   * Horseback riding exception.
   * @return horsebackRidingException
   */
  @javax.annotation.Nullable
  public HorsebackRidingExceptionEnum getHorsebackRidingException() {
    return horsebackRidingException;
  }

  public void setHorsebackRidingException(HorsebackRidingExceptionEnum horsebackRidingException) {
    this.horsebackRidingException = horsebackRidingException;
  }


  public Activities nightclub(Boolean nightclub) {
    this.nightclub = nightclub;
    return this;
  }

  /**
   * Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.
   * @return nightclub
   */
  @javax.annotation.Nullable
  public Boolean getNightclub() {
    return nightclub;
  }

  public void setNightclub(Boolean nightclub) {
    this.nightclub = nightclub;
  }


  public Activities nightclubException(NightclubExceptionEnum nightclubException) {
    this.nightclubException = nightclubException;
    return this;
  }

  /**
   * Nightclub exception.
   * @return nightclubException
   */
  @javax.annotation.Nullable
  public NightclubExceptionEnum getNightclubException() {
    return nightclubException;
  }

  public void setNightclubException(NightclubExceptionEnum nightclubException) {
    this.nightclubException = nightclubException;
  }


  public Activities privateBeach(Boolean privateBeach) {
    this.privateBeach = privateBeach;
    return this;
  }

  /**
   * Private beach. The beach which is in close proximity to the hotel is open only to guests.
   * @return privateBeach
   */
  @javax.annotation.Nullable
  public Boolean getPrivateBeach() {
    return privateBeach;
  }

  public void setPrivateBeach(Boolean privateBeach) {
    this.privateBeach = privateBeach;
  }


  public Activities privateBeachException(PrivateBeachExceptionEnum privateBeachException) {
    this.privateBeachException = privateBeachException;
    return this;
  }

  /**
   * Private beach exception.
   * @return privateBeachException
   */
  @javax.annotation.Nullable
  public PrivateBeachExceptionEnum getPrivateBeachException() {
    return privateBeachException;
  }

  public void setPrivateBeachException(PrivateBeachExceptionEnum privateBeachException) {
    this.privateBeachException = privateBeachException;
  }


  public Activities scuba(Boolean scuba) {
    this.scuba = scuba;
    return this;
  }

  /**
   * Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.
   * @return scuba
   */
  @javax.annotation.Nullable
  public Boolean getScuba() {
    return scuba;
  }

  public void setScuba(Boolean scuba) {
    this.scuba = scuba;
  }


  public Activities scubaException(ScubaExceptionEnum scubaException) {
    this.scubaException = scubaException;
    return this;
  }

  /**
   * Scuba exception.
   * @return scubaException
   */
  @javax.annotation.Nullable
  public ScubaExceptionEnum getScubaException() {
    return scubaException;
  }

  public void setScubaException(ScubaExceptionEnum scubaException) {
    this.scubaException = scubaException;
  }


  public Activities snorkeling(Boolean snorkeling) {
    this.snorkeling = snorkeling;
    return this;
  }

  /**
   * Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.
   * @return snorkeling
   */
  @javax.annotation.Nullable
  public Boolean getSnorkeling() {
    return snorkeling;
  }

  public void setSnorkeling(Boolean snorkeling) {
    this.snorkeling = snorkeling;
  }


  public Activities snorkelingException(SnorkelingExceptionEnum snorkelingException) {
    this.snorkelingException = snorkelingException;
    return this;
  }

  /**
   * Snorkeling exception.
   * @return snorkelingException
   */
  @javax.annotation.Nullable
  public SnorkelingExceptionEnum getSnorkelingException() {
    return snorkelingException;
  }

  public void setSnorkelingException(SnorkelingExceptionEnum snorkelingException) {
    this.snorkelingException = snorkelingException;
  }


  public Activities tennis(Boolean tennis) {
    this.tennis = tennis;
    return this;
  }

  /**
   * Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.
   * @return tennis
   */
  @javax.annotation.Nullable
  public Boolean getTennis() {
    return tennis;
  }

  public void setTennis(Boolean tennis) {
    this.tennis = tennis;
  }


  public Activities tennisException(TennisExceptionEnum tennisException) {
    this.tennisException = tennisException;
    return this;
  }

  /**
   * Tennis exception.
   * @return tennisException
   */
  @javax.annotation.Nullable
  public TennisExceptionEnum getTennisException() {
    return tennisException;
  }

  public void setTennisException(TennisExceptionEnum tennisException) {
    this.tennisException = tennisException;
  }


  public Activities waterSkiing(Boolean waterSkiing) {
    this.waterSkiing = waterSkiing;
    return this;
  }

  /**
   * Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.
   * @return waterSkiing
   */
  @javax.annotation.Nullable
  public Boolean getWaterSkiing() {
    return waterSkiing;
  }

  public void setWaterSkiing(Boolean waterSkiing) {
    this.waterSkiing = waterSkiing;
  }


  public Activities waterSkiingException(WaterSkiingExceptionEnum waterSkiingException) {
    this.waterSkiingException = waterSkiingException;
    return this;
  }

  /**
   * Water skiing exception.
   * @return waterSkiingException
   */
  @javax.annotation.Nullable
  public WaterSkiingExceptionEnum getWaterSkiingException() {
    return waterSkiingException;
  }

  public void setWaterSkiingException(WaterSkiingExceptionEnum waterSkiingException) {
    this.waterSkiingException = waterSkiingException;
  }


  public Activities watercraftRental(Boolean watercraftRental) {
    this.watercraftRental = watercraftRental;
    return this;
  }

  /**
   * Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).
   * @return watercraftRental
   */
  @javax.annotation.Nullable
  public Boolean getWatercraftRental() {
    return watercraftRental;
  }

  public void setWatercraftRental(Boolean watercraftRental) {
    this.watercraftRental = watercraftRental;
  }


  public Activities watercraftRentalException(WatercraftRentalExceptionEnum watercraftRentalException) {
    this.watercraftRentalException = watercraftRentalException;
    return this;
  }

  /**
   * Watercraft rental exception.
   * @return watercraftRentalException
   */
  @javax.annotation.Nullable
  public WatercraftRentalExceptionEnum getWatercraftRentalException() {
    return watercraftRentalException;
  }

  public void setWatercraftRentalException(WatercraftRentalExceptionEnum watercraftRentalException) {
    this.watercraftRentalException = watercraftRentalException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activities activities = (Activities) o;
    return Objects.equals(this.beachAccess, activities.beachAccess) &&
        Objects.equals(this.beachAccessException, activities.beachAccessException) &&
        Objects.equals(this.beachFront, activities.beachFront) &&
        Objects.equals(this.beachFrontException, activities.beachFrontException) &&
        Objects.equals(this.bicycleRental, activities.bicycleRental) &&
        Objects.equals(this.bicycleRentalException, activities.bicycleRentalException) &&
        Objects.equals(this.boutiqueStores, activities.boutiqueStores) &&
        Objects.equals(this.boutiqueStoresException, activities.boutiqueStoresException) &&
        Objects.equals(this.casino, activities.casino) &&
        Objects.equals(this.casinoException, activities.casinoException) &&
        Objects.equals(this.freeBicycleRental, activities.freeBicycleRental) &&
        Objects.equals(this.freeBicycleRentalException, activities.freeBicycleRentalException) &&
        Objects.equals(this.freeWatercraftRental, activities.freeWatercraftRental) &&
        Objects.equals(this.freeWatercraftRentalException, activities.freeWatercraftRentalException) &&
        Objects.equals(this.gameRoom, activities.gameRoom) &&
        Objects.equals(this.gameRoomException, activities.gameRoomException) &&
        Objects.equals(this.golf, activities.golf) &&
        Objects.equals(this.golfException, activities.golfException) &&
        Objects.equals(this.horsebackRiding, activities.horsebackRiding) &&
        Objects.equals(this.horsebackRidingException, activities.horsebackRidingException) &&
        Objects.equals(this.nightclub, activities.nightclub) &&
        Objects.equals(this.nightclubException, activities.nightclubException) &&
        Objects.equals(this.privateBeach, activities.privateBeach) &&
        Objects.equals(this.privateBeachException, activities.privateBeachException) &&
        Objects.equals(this.scuba, activities.scuba) &&
        Objects.equals(this.scubaException, activities.scubaException) &&
        Objects.equals(this.snorkeling, activities.snorkeling) &&
        Objects.equals(this.snorkelingException, activities.snorkelingException) &&
        Objects.equals(this.tennis, activities.tennis) &&
        Objects.equals(this.tennisException, activities.tennisException) &&
        Objects.equals(this.waterSkiing, activities.waterSkiing) &&
        Objects.equals(this.waterSkiingException, activities.waterSkiingException) &&
        Objects.equals(this.watercraftRental, activities.watercraftRental) &&
        Objects.equals(this.watercraftRentalException, activities.watercraftRentalException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beachAccess, beachAccessException, beachFront, beachFrontException, bicycleRental, bicycleRentalException, boutiqueStores, boutiqueStoresException, casino, casinoException, freeBicycleRental, freeBicycleRentalException, freeWatercraftRental, freeWatercraftRentalException, gameRoom, gameRoomException, golf, golfException, horsebackRiding, horsebackRidingException, nightclub, nightclubException, privateBeach, privateBeachException, scuba, scubaException, snorkeling, snorkelingException, tennis, tennisException, waterSkiing, waterSkiingException, watercraftRental, watercraftRentalException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activities {\n");
    sb.append("    beachAccess: ").append(toIndentedString(beachAccess)).append("\n");
    sb.append("    beachAccessException: ").append(toIndentedString(beachAccessException)).append("\n");
    sb.append("    beachFront: ").append(toIndentedString(beachFront)).append("\n");
    sb.append("    beachFrontException: ").append(toIndentedString(beachFrontException)).append("\n");
    sb.append("    bicycleRental: ").append(toIndentedString(bicycleRental)).append("\n");
    sb.append("    bicycleRentalException: ").append(toIndentedString(bicycleRentalException)).append("\n");
    sb.append("    boutiqueStores: ").append(toIndentedString(boutiqueStores)).append("\n");
    sb.append("    boutiqueStoresException: ").append(toIndentedString(boutiqueStoresException)).append("\n");
    sb.append("    casino: ").append(toIndentedString(casino)).append("\n");
    sb.append("    casinoException: ").append(toIndentedString(casinoException)).append("\n");
    sb.append("    freeBicycleRental: ").append(toIndentedString(freeBicycleRental)).append("\n");
    sb.append("    freeBicycleRentalException: ").append(toIndentedString(freeBicycleRentalException)).append("\n");
    sb.append("    freeWatercraftRental: ").append(toIndentedString(freeWatercraftRental)).append("\n");
    sb.append("    freeWatercraftRentalException: ").append(toIndentedString(freeWatercraftRentalException)).append("\n");
    sb.append("    gameRoom: ").append(toIndentedString(gameRoom)).append("\n");
    sb.append("    gameRoomException: ").append(toIndentedString(gameRoomException)).append("\n");
    sb.append("    golf: ").append(toIndentedString(golf)).append("\n");
    sb.append("    golfException: ").append(toIndentedString(golfException)).append("\n");
    sb.append("    horsebackRiding: ").append(toIndentedString(horsebackRiding)).append("\n");
    sb.append("    horsebackRidingException: ").append(toIndentedString(horsebackRidingException)).append("\n");
    sb.append("    nightclub: ").append(toIndentedString(nightclub)).append("\n");
    sb.append("    nightclubException: ").append(toIndentedString(nightclubException)).append("\n");
    sb.append("    privateBeach: ").append(toIndentedString(privateBeach)).append("\n");
    sb.append("    privateBeachException: ").append(toIndentedString(privateBeachException)).append("\n");
    sb.append("    scuba: ").append(toIndentedString(scuba)).append("\n");
    sb.append("    scubaException: ").append(toIndentedString(scubaException)).append("\n");
    sb.append("    snorkeling: ").append(toIndentedString(snorkeling)).append("\n");
    sb.append("    snorkelingException: ").append(toIndentedString(snorkelingException)).append("\n");
    sb.append("    tennis: ").append(toIndentedString(tennis)).append("\n");
    sb.append("    tennisException: ").append(toIndentedString(tennisException)).append("\n");
    sb.append("    waterSkiing: ").append(toIndentedString(waterSkiing)).append("\n");
    sb.append("    waterSkiingException: ").append(toIndentedString(waterSkiingException)).append("\n");
    sb.append("    watercraftRental: ").append(toIndentedString(watercraftRental)).append("\n");
    sb.append("    watercraftRentalException: ").append(toIndentedString(watercraftRentalException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beachAccess");
    openapiFields.add("beachAccessException");
    openapiFields.add("beachFront");
    openapiFields.add("beachFrontException");
    openapiFields.add("bicycleRental");
    openapiFields.add("bicycleRentalException");
    openapiFields.add("boutiqueStores");
    openapiFields.add("boutiqueStoresException");
    openapiFields.add("casino");
    openapiFields.add("casinoException");
    openapiFields.add("freeBicycleRental");
    openapiFields.add("freeBicycleRentalException");
    openapiFields.add("freeWatercraftRental");
    openapiFields.add("freeWatercraftRentalException");
    openapiFields.add("gameRoom");
    openapiFields.add("gameRoomException");
    openapiFields.add("golf");
    openapiFields.add("golfException");
    openapiFields.add("horsebackRiding");
    openapiFields.add("horsebackRidingException");
    openapiFields.add("nightclub");
    openapiFields.add("nightclubException");
    openapiFields.add("privateBeach");
    openapiFields.add("privateBeachException");
    openapiFields.add("scuba");
    openapiFields.add("scubaException");
    openapiFields.add("snorkeling");
    openapiFields.add("snorkelingException");
    openapiFields.add("tennis");
    openapiFields.add("tennisException");
    openapiFields.add("waterSkiing");
    openapiFields.add("waterSkiingException");
    openapiFields.add("watercraftRental");
    openapiFields.add("watercraftRentalException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activities is not found in the empty JSON string", Activities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beachAccessException") != null && !jsonObj.get("beachAccessException").isJsonNull()) && !jsonObj.get("beachAccessException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beachAccessException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beachAccessException").toString()));
      }
      // validate the optional field `beachAccessException`
      if (jsonObj.get("beachAccessException") != null && !jsonObj.get("beachAccessException").isJsonNull()) {
        BeachAccessExceptionEnum.validateJsonElement(jsonObj.get("beachAccessException"));
      }
      if ((jsonObj.get("beachFrontException") != null && !jsonObj.get("beachFrontException").isJsonNull()) && !jsonObj.get("beachFrontException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beachFrontException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beachFrontException").toString()));
      }
      // validate the optional field `beachFrontException`
      if (jsonObj.get("beachFrontException") != null && !jsonObj.get("beachFrontException").isJsonNull()) {
        BeachFrontExceptionEnum.validateJsonElement(jsonObj.get("beachFrontException"));
      }
      if ((jsonObj.get("bicycleRentalException") != null && !jsonObj.get("bicycleRentalException").isJsonNull()) && !jsonObj.get("bicycleRentalException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bicycleRentalException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bicycleRentalException").toString()));
      }
      // validate the optional field `bicycleRentalException`
      if (jsonObj.get("bicycleRentalException") != null && !jsonObj.get("bicycleRentalException").isJsonNull()) {
        BicycleRentalExceptionEnum.validateJsonElement(jsonObj.get("bicycleRentalException"));
      }
      if ((jsonObj.get("boutiqueStoresException") != null && !jsonObj.get("boutiqueStoresException").isJsonNull()) && !jsonObj.get("boutiqueStoresException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boutiqueStoresException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boutiqueStoresException").toString()));
      }
      // validate the optional field `boutiqueStoresException`
      if (jsonObj.get("boutiqueStoresException") != null && !jsonObj.get("boutiqueStoresException").isJsonNull()) {
        BoutiqueStoresExceptionEnum.validateJsonElement(jsonObj.get("boutiqueStoresException"));
      }
      if ((jsonObj.get("casinoException") != null && !jsonObj.get("casinoException").isJsonNull()) && !jsonObj.get("casinoException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `casinoException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("casinoException").toString()));
      }
      // validate the optional field `casinoException`
      if (jsonObj.get("casinoException") != null && !jsonObj.get("casinoException").isJsonNull()) {
        CasinoExceptionEnum.validateJsonElement(jsonObj.get("casinoException"));
      }
      if ((jsonObj.get("freeBicycleRentalException") != null && !jsonObj.get("freeBicycleRentalException").isJsonNull()) && !jsonObj.get("freeBicycleRentalException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBicycleRentalException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBicycleRentalException").toString()));
      }
      // validate the optional field `freeBicycleRentalException`
      if (jsonObj.get("freeBicycleRentalException") != null && !jsonObj.get("freeBicycleRentalException").isJsonNull()) {
        FreeBicycleRentalExceptionEnum.validateJsonElement(jsonObj.get("freeBicycleRentalException"));
      }
      if ((jsonObj.get("freeWatercraftRentalException") != null && !jsonObj.get("freeWatercraftRentalException").isJsonNull()) && !jsonObj.get("freeWatercraftRentalException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeWatercraftRentalException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeWatercraftRentalException").toString()));
      }
      // validate the optional field `freeWatercraftRentalException`
      if (jsonObj.get("freeWatercraftRentalException") != null && !jsonObj.get("freeWatercraftRentalException").isJsonNull()) {
        FreeWatercraftRentalExceptionEnum.validateJsonElement(jsonObj.get("freeWatercraftRentalException"));
      }
      if ((jsonObj.get("gameRoomException") != null && !jsonObj.get("gameRoomException").isJsonNull()) && !jsonObj.get("gameRoomException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameRoomException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameRoomException").toString()));
      }
      // validate the optional field `gameRoomException`
      if (jsonObj.get("gameRoomException") != null && !jsonObj.get("gameRoomException").isJsonNull()) {
        GameRoomExceptionEnum.validateJsonElement(jsonObj.get("gameRoomException"));
      }
      if ((jsonObj.get("golfException") != null && !jsonObj.get("golfException").isJsonNull()) && !jsonObj.get("golfException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `golfException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("golfException").toString()));
      }
      // validate the optional field `golfException`
      if (jsonObj.get("golfException") != null && !jsonObj.get("golfException").isJsonNull()) {
        GolfExceptionEnum.validateJsonElement(jsonObj.get("golfException"));
      }
      if ((jsonObj.get("horsebackRidingException") != null && !jsonObj.get("horsebackRidingException").isJsonNull()) && !jsonObj.get("horsebackRidingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horsebackRidingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horsebackRidingException").toString()));
      }
      // validate the optional field `horsebackRidingException`
      if (jsonObj.get("horsebackRidingException") != null && !jsonObj.get("horsebackRidingException").isJsonNull()) {
        HorsebackRidingExceptionEnum.validateJsonElement(jsonObj.get("horsebackRidingException"));
      }
      if ((jsonObj.get("nightclubException") != null && !jsonObj.get("nightclubException").isJsonNull()) && !jsonObj.get("nightclubException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nightclubException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nightclubException").toString()));
      }
      // validate the optional field `nightclubException`
      if (jsonObj.get("nightclubException") != null && !jsonObj.get("nightclubException").isJsonNull()) {
        NightclubExceptionEnum.validateJsonElement(jsonObj.get("nightclubException"));
      }
      if ((jsonObj.get("privateBeachException") != null && !jsonObj.get("privateBeachException").isJsonNull()) && !jsonObj.get("privateBeachException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateBeachException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateBeachException").toString()));
      }
      // validate the optional field `privateBeachException`
      if (jsonObj.get("privateBeachException") != null && !jsonObj.get("privateBeachException").isJsonNull()) {
        PrivateBeachExceptionEnum.validateJsonElement(jsonObj.get("privateBeachException"));
      }
      if ((jsonObj.get("scubaException") != null && !jsonObj.get("scubaException").isJsonNull()) && !jsonObj.get("scubaException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scubaException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scubaException").toString()));
      }
      // validate the optional field `scubaException`
      if (jsonObj.get("scubaException") != null && !jsonObj.get("scubaException").isJsonNull()) {
        ScubaExceptionEnum.validateJsonElement(jsonObj.get("scubaException"));
      }
      if ((jsonObj.get("snorkelingException") != null && !jsonObj.get("snorkelingException").isJsonNull()) && !jsonObj.get("snorkelingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snorkelingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snorkelingException").toString()));
      }
      // validate the optional field `snorkelingException`
      if (jsonObj.get("snorkelingException") != null && !jsonObj.get("snorkelingException").isJsonNull()) {
        SnorkelingExceptionEnum.validateJsonElement(jsonObj.get("snorkelingException"));
      }
      if ((jsonObj.get("tennisException") != null && !jsonObj.get("tennisException").isJsonNull()) && !jsonObj.get("tennisException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tennisException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tennisException").toString()));
      }
      // validate the optional field `tennisException`
      if (jsonObj.get("tennisException") != null && !jsonObj.get("tennisException").isJsonNull()) {
        TennisExceptionEnum.validateJsonElement(jsonObj.get("tennisException"));
      }
      if ((jsonObj.get("waterSkiingException") != null && !jsonObj.get("waterSkiingException").isJsonNull()) && !jsonObj.get("waterSkiingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterSkiingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterSkiingException").toString()));
      }
      // validate the optional field `waterSkiingException`
      if (jsonObj.get("waterSkiingException") != null && !jsonObj.get("waterSkiingException").isJsonNull()) {
        WaterSkiingExceptionEnum.validateJsonElement(jsonObj.get("waterSkiingException"));
      }
      if ((jsonObj.get("watercraftRentalException") != null && !jsonObj.get("watercraftRentalException").isJsonNull()) && !jsonObj.get("watercraftRentalException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watercraftRentalException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watercraftRentalException").toString()));
      }
      // validate the optional field `watercraftRentalException`
      if (jsonObj.get("watercraftRentalException") != null && !jsonObj.get("watercraftRentalException").isJsonNull()) {
        WatercraftRentalExceptionEnum.validateJsonElement(jsonObj.get("watercraftRentalException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activities.class));

       return (TypeAdapter<T>) new TypeAdapter<Activities>() {
           @Override
           public void write(JsonWriter out, Activities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activities
   * @throws IOException if the JSON string is invalid with respect to Activities
   */
  public static Activities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activities.class);
  }

  /**
   * Convert an instance of Activities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

