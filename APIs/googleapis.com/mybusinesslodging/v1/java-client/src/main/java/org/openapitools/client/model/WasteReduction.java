/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Waste reduction practices implemented at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WasteReduction {
  public static final String SERIALIZED_NAME_COMPOSTABLE_FOOD_CONTAINERS_AND_CUTLERY = "compostableFoodContainersAndCutlery";
  @SerializedName(SERIALIZED_NAME_COMPOSTABLE_FOOD_CONTAINERS_AND_CUTLERY)
  private Boolean compostableFoodContainersAndCutlery;

  /**
   * Compostable food containers and cutlery exception.
   */
  @JsonAdapter(CompostableFoodContainersAndCutleryExceptionEnum.Adapter.class)
  public enum CompostableFoodContainersAndCutleryExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CompostableFoodContainersAndCutleryExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompostableFoodContainersAndCutleryExceptionEnum fromValue(String value) {
      for (CompostableFoodContainersAndCutleryExceptionEnum b : CompostableFoodContainersAndCutleryExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompostableFoodContainersAndCutleryExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompostableFoodContainersAndCutleryExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompostableFoodContainersAndCutleryExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompostableFoodContainersAndCutleryExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompostableFoodContainersAndCutleryExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPOSTABLE_FOOD_CONTAINERS_AND_CUTLERY_EXCEPTION = "compostableFoodContainersAndCutleryException";
  @SerializedName(SERIALIZED_NAME_COMPOSTABLE_FOOD_CONTAINERS_AND_CUTLERY_EXCEPTION)
  private CompostableFoodContainersAndCutleryExceptionEnum compostableFoodContainersAndCutleryException;

  public static final String SERIALIZED_NAME_COMPOSTS_EXCESS_FOOD = "compostsExcessFood";
  @SerializedName(SERIALIZED_NAME_COMPOSTS_EXCESS_FOOD)
  private Boolean compostsExcessFood;

  /**
   * Composts excess food exception.
   */
  @JsonAdapter(CompostsExcessFoodExceptionEnum.Adapter.class)
  public enum CompostsExcessFoodExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CompostsExcessFoodExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompostsExcessFoodExceptionEnum fromValue(String value) {
      for (CompostsExcessFoodExceptionEnum b : CompostsExcessFoodExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompostsExcessFoodExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompostsExcessFoodExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompostsExcessFoodExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompostsExcessFoodExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompostsExcessFoodExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPOSTS_EXCESS_FOOD_EXCEPTION = "compostsExcessFoodException";
  @SerializedName(SERIALIZED_NAME_COMPOSTS_EXCESS_FOOD_EXCEPTION)
  private CompostsExcessFoodExceptionEnum compostsExcessFoodException;

  public static final String SERIALIZED_NAME_DONATES_EXCESS_FOOD = "donatesExcessFood";
  @SerializedName(SERIALIZED_NAME_DONATES_EXCESS_FOOD)
  private Boolean donatesExcessFood;

  /**
   * Donates excess food exception.
   */
  @JsonAdapter(DonatesExcessFoodExceptionEnum.Adapter.class)
  public enum DonatesExcessFoodExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DonatesExcessFoodExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DonatesExcessFoodExceptionEnum fromValue(String value) {
      for (DonatesExcessFoodExceptionEnum b : DonatesExcessFoodExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DonatesExcessFoodExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DonatesExcessFoodExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DonatesExcessFoodExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DonatesExcessFoodExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DonatesExcessFoodExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DONATES_EXCESS_FOOD_EXCEPTION = "donatesExcessFoodException";
  @SerializedName(SERIALIZED_NAME_DONATES_EXCESS_FOOD_EXCEPTION)
  private DonatesExcessFoodExceptionEnum donatesExcessFoodException;

  public static final String SERIALIZED_NAME_FOOD_WASTE_REDUCTION_PROGRAM = "foodWasteReductionProgram";
  @SerializedName(SERIALIZED_NAME_FOOD_WASTE_REDUCTION_PROGRAM)
  private Boolean foodWasteReductionProgram;

  /**
   * Food waste reduction program exception.
   */
  @JsonAdapter(FoodWasteReductionProgramExceptionEnum.Adapter.class)
  public enum FoodWasteReductionProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FoodWasteReductionProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FoodWasteReductionProgramExceptionEnum fromValue(String value) {
      for (FoodWasteReductionProgramExceptionEnum b : FoodWasteReductionProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FoodWasteReductionProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FoodWasteReductionProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FoodWasteReductionProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FoodWasteReductionProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FoodWasteReductionProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FOOD_WASTE_REDUCTION_PROGRAM_EXCEPTION = "foodWasteReductionProgramException";
  @SerializedName(SERIALIZED_NAME_FOOD_WASTE_REDUCTION_PROGRAM_EXCEPTION)
  private FoodWasteReductionProgramExceptionEnum foodWasteReductionProgramException;

  public static final String SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_STRAWS = "noSingleUsePlasticStraws";
  @SerializedName(SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_STRAWS)
  private Boolean noSingleUsePlasticStraws;

  /**
   * No single use plastic straws exception.
   */
  @JsonAdapter(NoSingleUsePlasticStrawsExceptionEnum.Adapter.class)
  public enum NoSingleUsePlasticStrawsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NoSingleUsePlasticStrawsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoSingleUsePlasticStrawsExceptionEnum fromValue(String value) {
      for (NoSingleUsePlasticStrawsExceptionEnum b : NoSingleUsePlasticStrawsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoSingleUsePlasticStrawsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoSingleUsePlasticStrawsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoSingleUsePlasticStrawsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoSingleUsePlasticStrawsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NoSingleUsePlasticStrawsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_STRAWS_EXCEPTION = "noSingleUsePlasticStrawsException";
  @SerializedName(SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_STRAWS_EXCEPTION)
  private NoSingleUsePlasticStrawsExceptionEnum noSingleUsePlasticStrawsException;

  public static final String SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_WATER_BOTTLES = "noSingleUsePlasticWaterBottles";
  @SerializedName(SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_WATER_BOTTLES)
  private Boolean noSingleUsePlasticWaterBottles;

  /**
   * No single use plastic water bottles exception.
   */
  @JsonAdapter(NoSingleUsePlasticWaterBottlesExceptionEnum.Adapter.class)
  public enum NoSingleUsePlasticWaterBottlesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NoSingleUsePlasticWaterBottlesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoSingleUsePlasticWaterBottlesExceptionEnum fromValue(String value) {
      for (NoSingleUsePlasticWaterBottlesExceptionEnum b : NoSingleUsePlasticWaterBottlesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoSingleUsePlasticWaterBottlesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoSingleUsePlasticWaterBottlesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoSingleUsePlasticWaterBottlesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoSingleUsePlasticWaterBottlesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NoSingleUsePlasticWaterBottlesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_WATER_BOTTLES_EXCEPTION = "noSingleUsePlasticWaterBottlesException";
  @SerializedName(SERIALIZED_NAME_NO_SINGLE_USE_PLASTIC_WATER_BOTTLES_EXCEPTION)
  private NoSingleUsePlasticWaterBottlesExceptionEnum noSingleUsePlasticWaterBottlesException;

  public static final String SERIALIZED_NAME_NO_STYROFOAM_FOOD_CONTAINERS = "noStyrofoamFoodContainers";
  @SerializedName(SERIALIZED_NAME_NO_STYROFOAM_FOOD_CONTAINERS)
  private Boolean noStyrofoamFoodContainers;

  /**
   * No styrofoam food containers exception.
   */
  @JsonAdapter(NoStyrofoamFoodContainersExceptionEnum.Adapter.class)
  public enum NoStyrofoamFoodContainersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NoStyrofoamFoodContainersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoStyrofoamFoodContainersExceptionEnum fromValue(String value) {
      for (NoStyrofoamFoodContainersExceptionEnum b : NoStyrofoamFoodContainersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoStyrofoamFoodContainersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoStyrofoamFoodContainersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoStyrofoamFoodContainersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoStyrofoamFoodContainersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NoStyrofoamFoodContainersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NO_STYROFOAM_FOOD_CONTAINERS_EXCEPTION = "noStyrofoamFoodContainersException";
  @SerializedName(SERIALIZED_NAME_NO_STYROFOAM_FOOD_CONTAINERS_EXCEPTION)
  private NoStyrofoamFoodContainersExceptionEnum noStyrofoamFoodContainersException;

  public static final String SERIALIZED_NAME_RECYCLING_PROGRAM = "recyclingProgram";
  @SerializedName(SERIALIZED_NAME_RECYCLING_PROGRAM)
  private Boolean recyclingProgram;

  /**
   * Recycling program exception.
   */
  @JsonAdapter(RecyclingProgramExceptionEnum.Adapter.class)
  public enum RecyclingProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RecyclingProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecyclingProgramExceptionEnum fromValue(String value) {
      for (RecyclingProgramExceptionEnum b : RecyclingProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecyclingProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecyclingProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecyclingProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecyclingProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecyclingProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECYCLING_PROGRAM_EXCEPTION = "recyclingProgramException";
  @SerializedName(SERIALIZED_NAME_RECYCLING_PROGRAM_EXCEPTION)
  private RecyclingProgramExceptionEnum recyclingProgramException;

  public static final String SERIALIZED_NAME_REFILLABLE_TOILETRY_CONTAINERS = "refillableToiletryContainers";
  @SerializedName(SERIALIZED_NAME_REFILLABLE_TOILETRY_CONTAINERS)
  private Boolean refillableToiletryContainers;

  /**
   * Refillable toiletry containers exception.
   */
  @JsonAdapter(RefillableToiletryContainersExceptionEnum.Adapter.class)
  public enum RefillableToiletryContainersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RefillableToiletryContainersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefillableToiletryContainersExceptionEnum fromValue(String value) {
      for (RefillableToiletryContainersExceptionEnum b : RefillableToiletryContainersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefillableToiletryContainersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefillableToiletryContainersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefillableToiletryContainersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefillableToiletryContainersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefillableToiletryContainersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFILLABLE_TOILETRY_CONTAINERS_EXCEPTION = "refillableToiletryContainersException";
  @SerializedName(SERIALIZED_NAME_REFILLABLE_TOILETRY_CONTAINERS_EXCEPTION)
  private RefillableToiletryContainersExceptionEnum refillableToiletryContainersException;

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_BATTERIES = "safelyDisposesBatteries";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_BATTERIES)
  private Boolean safelyDisposesBatteries;

  /**
   * Safely disposes batteries exception.
   */
  @JsonAdapter(SafelyDisposesBatteriesExceptionEnum.Adapter.class)
  public enum SafelyDisposesBatteriesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SafelyDisposesBatteriesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafelyDisposesBatteriesExceptionEnum fromValue(String value) {
      for (SafelyDisposesBatteriesExceptionEnum b : SafelyDisposesBatteriesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafelyDisposesBatteriesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafelyDisposesBatteriesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafelyDisposesBatteriesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafelyDisposesBatteriesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafelyDisposesBatteriesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_BATTERIES_EXCEPTION = "safelyDisposesBatteriesException";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_BATTERIES_EXCEPTION)
  private SafelyDisposesBatteriesExceptionEnum safelyDisposesBatteriesException;

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_ELECTRONICS = "safelyDisposesElectronics";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_ELECTRONICS)
  private Boolean safelyDisposesElectronics;

  /**
   * Safely disposes electronics exception.
   */
  @JsonAdapter(SafelyDisposesElectronicsExceptionEnum.Adapter.class)
  public enum SafelyDisposesElectronicsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SafelyDisposesElectronicsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafelyDisposesElectronicsExceptionEnum fromValue(String value) {
      for (SafelyDisposesElectronicsExceptionEnum b : SafelyDisposesElectronicsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafelyDisposesElectronicsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafelyDisposesElectronicsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafelyDisposesElectronicsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafelyDisposesElectronicsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafelyDisposesElectronicsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_ELECTRONICS_EXCEPTION = "safelyDisposesElectronicsException";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_ELECTRONICS_EXCEPTION)
  private SafelyDisposesElectronicsExceptionEnum safelyDisposesElectronicsException;

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_LIGHTBULBS = "safelyDisposesLightbulbs";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_LIGHTBULBS)
  private Boolean safelyDisposesLightbulbs;

  /**
   * Safely disposes lightbulbs exception.
   */
  @JsonAdapter(SafelyDisposesLightbulbsExceptionEnum.Adapter.class)
  public enum SafelyDisposesLightbulbsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SafelyDisposesLightbulbsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafelyDisposesLightbulbsExceptionEnum fromValue(String value) {
      for (SafelyDisposesLightbulbsExceptionEnum b : SafelyDisposesLightbulbsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafelyDisposesLightbulbsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafelyDisposesLightbulbsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafelyDisposesLightbulbsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafelyDisposesLightbulbsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafelyDisposesLightbulbsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFELY_DISPOSES_LIGHTBULBS_EXCEPTION = "safelyDisposesLightbulbsException";
  @SerializedName(SERIALIZED_NAME_SAFELY_DISPOSES_LIGHTBULBS_EXCEPTION)
  private SafelyDisposesLightbulbsExceptionEnum safelyDisposesLightbulbsException;

  public static final String SERIALIZED_NAME_SAFELY_HANDLES_HAZARDOUS_SUBSTANCES = "safelyHandlesHazardousSubstances";
  @SerializedName(SERIALIZED_NAME_SAFELY_HANDLES_HAZARDOUS_SUBSTANCES)
  private Boolean safelyHandlesHazardousSubstances;

  /**
   * Safely handles hazardous substances exception.
   */
  @JsonAdapter(SafelyHandlesHazardousSubstancesExceptionEnum.Adapter.class)
  public enum SafelyHandlesHazardousSubstancesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SafelyHandlesHazardousSubstancesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafelyHandlesHazardousSubstancesExceptionEnum fromValue(String value) {
      for (SafelyHandlesHazardousSubstancesExceptionEnum b : SafelyHandlesHazardousSubstancesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafelyHandlesHazardousSubstancesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafelyHandlesHazardousSubstancesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafelyHandlesHazardousSubstancesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafelyHandlesHazardousSubstancesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafelyHandlesHazardousSubstancesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFELY_HANDLES_HAZARDOUS_SUBSTANCES_EXCEPTION = "safelyHandlesHazardousSubstancesException";
  @SerializedName(SERIALIZED_NAME_SAFELY_HANDLES_HAZARDOUS_SUBSTANCES_EXCEPTION)
  private SafelyHandlesHazardousSubstancesExceptionEnum safelyHandlesHazardousSubstancesException;

  public static final String SERIALIZED_NAME_SOAP_DONATION_PROGRAM = "soapDonationProgram";
  @SerializedName(SERIALIZED_NAME_SOAP_DONATION_PROGRAM)
  private Boolean soapDonationProgram;

  /**
   * Soap donation program exception.
   */
  @JsonAdapter(SoapDonationProgramExceptionEnum.Adapter.class)
  public enum SoapDonationProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SoapDonationProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SoapDonationProgramExceptionEnum fromValue(String value) {
      for (SoapDonationProgramExceptionEnum b : SoapDonationProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SoapDonationProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SoapDonationProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SoapDonationProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SoapDonationProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SoapDonationProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOAP_DONATION_PROGRAM_EXCEPTION = "soapDonationProgramException";
  @SerializedName(SERIALIZED_NAME_SOAP_DONATION_PROGRAM_EXCEPTION)
  private SoapDonationProgramExceptionEnum soapDonationProgramException;

  public static final String SERIALIZED_NAME_TOILETRY_DONATION_PROGRAM = "toiletryDonationProgram";
  @SerializedName(SERIALIZED_NAME_TOILETRY_DONATION_PROGRAM)
  private Boolean toiletryDonationProgram;

  /**
   * Toiletry donation program exception.
   */
  @JsonAdapter(ToiletryDonationProgramExceptionEnum.Adapter.class)
  public enum ToiletryDonationProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ToiletryDonationProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToiletryDonationProgramExceptionEnum fromValue(String value) {
      for (ToiletryDonationProgramExceptionEnum b : ToiletryDonationProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToiletryDonationProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToiletryDonationProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToiletryDonationProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToiletryDonationProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToiletryDonationProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOILETRY_DONATION_PROGRAM_EXCEPTION = "toiletryDonationProgramException";
  @SerializedName(SERIALIZED_NAME_TOILETRY_DONATION_PROGRAM_EXCEPTION)
  private ToiletryDonationProgramExceptionEnum toiletryDonationProgramException;

  public static final String SERIALIZED_NAME_WATER_BOTTLE_FILLING_STATIONS = "waterBottleFillingStations";
  @SerializedName(SERIALIZED_NAME_WATER_BOTTLE_FILLING_STATIONS)
  private Boolean waterBottleFillingStations;

  /**
   * Water bottle filling stations exception.
   */
  @JsonAdapter(WaterBottleFillingStationsExceptionEnum.Adapter.class)
  public enum WaterBottleFillingStationsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WaterBottleFillingStationsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaterBottleFillingStationsExceptionEnum fromValue(String value) {
      for (WaterBottleFillingStationsExceptionEnum b : WaterBottleFillingStationsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaterBottleFillingStationsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaterBottleFillingStationsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaterBottleFillingStationsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaterBottleFillingStationsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaterBottleFillingStationsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WATER_BOTTLE_FILLING_STATIONS_EXCEPTION = "waterBottleFillingStationsException";
  @SerializedName(SERIALIZED_NAME_WATER_BOTTLE_FILLING_STATIONS_EXCEPTION)
  private WaterBottleFillingStationsExceptionEnum waterBottleFillingStationsException;

  public WasteReduction() {
  }

  public WasteReduction compostableFoodContainersAndCutlery(Boolean compostableFoodContainersAndCutlery) {
    this.compostableFoodContainersAndCutlery = compostableFoodContainersAndCutlery;
    return this;
  }

  /**
   * Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.
   * @return compostableFoodContainersAndCutlery
   */
  @javax.annotation.Nullable
  public Boolean getCompostableFoodContainersAndCutlery() {
    return compostableFoodContainersAndCutlery;
  }

  public void setCompostableFoodContainersAndCutlery(Boolean compostableFoodContainersAndCutlery) {
    this.compostableFoodContainersAndCutlery = compostableFoodContainersAndCutlery;
  }


  public WasteReduction compostableFoodContainersAndCutleryException(CompostableFoodContainersAndCutleryExceptionEnum compostableFoodContainersAndCutleryException) {
    this.compostableFoodContainersAndCutleryException = compostableFoodContainersAndCutleryException;
    return this;
  }

  /**
   * Compostable food containers and cutlery exception.
   * @return compostableFoodContainersAndCutleryException
   */
  @javax.annotation.Nullable
  public CompostableFoodContainersAndCutleryExceptionEnum getCompostableFoodContainersAndCutleryException() {
    return compostableFoodContainersAndCutleryException;
  }

  public void setCompostableFoodContainersAndCutleryException(CompostableFoodContainersAndCutleryExceptionEnum compostableFoodContainersAndCutleryException) {
    this.compostableFoodContainersAndCutleryException = compostableFoodContainersAndCutleryException;
  }


  public WasteReduction compostsExcessFood(Boolean compostsExcessFood) {
    this.compostsExcessFood = compostsExcessFood;
    return this;
  }

  /**
   * Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.
   * @return compostsExcessFood
   */
  @javax.annotation.Nullable
  public Boolean getCompostsExcessFood() {
    return compostsExcessFood;
  }

  public void setCompostsExcessFood(Boolean compostsExcessFood) {
    this.compostsExcessFood = compostsExcessFood;
  }


  public WasteReduction compostsExcessFoodException(CompostsExcessFoodExceptionEnum compostsExcessFoodException) {
    this.compostsExcessFoodException = compostsExcessFoodException;
    return this;
  }

  /**
   * Composts excess food exception.
   * @return compostsExcessFoodException
   */
  @javax.annotation.Nullable
  public CompostsExcessFoodExceptionEnum getCompostsExcessFoodException() {
    return compostsExcessFoodException;
  }

  public void setCompostsExcessFoodException(CompostsExcessFoodExceptionEnum compostsExcessFoodException) {
    this.compostsExcessFoodException = compostsExcessFoodException;
  }


  public WasteReduction donatesExcessFood(Boolean donatesExcessFood) {
    this.donatesExcessFood = donatesExcessFood;
    return this;
  }

  /**
   * Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.
   * @return donatesExcessFood
   */
  @javax.annotation.Nullable
  public Boolean getDonatesExcessFood() {
    return donatesExcessFood;
  }

  public void setDonatesExcessFood(Boolean donatesExcessFood) {
    this.donatesExcessFood = donatesExcessFood;
  }


  public WasteReduction donatesExcessFoodException(DonatesExcessFoodExceptionEnum donatesExcessFoodException) {
    this.donatesExcessFoodException = donatesExcessFoodException;
    return this;
  }

  /**
   * Donates excess food exception.
   * @return donatesExcessFoodException
   */
  @javax.annotation.Nullable
  public DonatesExcessFoodExceptionEnum getDonatesExcessFoodException() {
    return donatesExcessFoodException;
  }

  public void setDonatesExcessFoodException(DonatesExcessFoodExceptionEnum donatesExcessFoodException) {
    this.donatesExcessFoodException = donatesExcessFoodException;
  }


  public WasteReduction foodWasteReductionProgram(Boolean foodWasteReductionProgram) {
    this.foodWasteReductionProgram = foodWasteReductionProgram;
    return this;
  }

  /**
   * Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.
   * @return foodWasteReductionProgram
   */
  @javax.annotation.Nullable
  public Boolean getFoodWasteReductionProgram() {
    return foodWasteReductionProgram;
  }

  public void setFoodWasteReductionProgram(Boolean foodWasteReductionProgram) {
    this.foodWasteReductionProgram = foodWasteReductionProgram;
  }


  public WasteReduction foodWasteReductionProgramException(FoodWasteReductionProgramExceptionEnum foodWasteReductionProgramException) {
    this.foodWasteReductionProgramException = foodWasteReductionProgramException;
    return this;
  }

  /**
   * Food waste reduction program exception.
   * @return foodWasteReductionProgramException
   */
  @javax.annotation.Nullable
  public FoodWasteReductionProgramExceptionEnum getFoodWasteReductionProgramException() {
    return foodWasteReductionProgramException;
  }

  public void setFoodWasteReductionProgramException(FoodWasteReductionProgramExceptionEnum foodWasteReductionProgramException) {
    this.foodWasteReductionProgramException = foodWasteReductionProgramException;
  }


  public WasteReduction noSingleUsePlasticStraws(Boolean noSingleUsePlasticStraws) {
    this.noSingleUsePlasticStraws = noSingleUsePlasticStraws;
    return this;
  }

  /**
   * No single use plastic straws. The property bans single-use plastic straws.
   * @return noSingleUsePlasticStraws
   */
  @javax.annotation.Nullable
  public Boolean getNoSingleUsePlasticStraws() {
    return noSingleUsePlasticStraws;
  }

  public void setNoSingleUsePlasticStraws(Boolean noSingleUsePlasticStraws) {
    this.noSingleUsePlasticStraws = noSingleUsePlasticStraws;
  }


  public WasteReduction noSingleUsePlasticStrawsException(NoSingleUsePlasticStrawsExceptionEnum noSingleUsePlasticStrawsException) {
    this.noSingleUsePlasticStrawsException = noSingleUsePlasticStrawsException;
    return this;
  }

  /**
   * No single use plastic straws exception.
   * @return noSingleUsePlasticStrawsException
   */
  @javax.annotation.Nullable
  public NoSingleUsePlasticStrawsExceptionEnum getNoSingleUsePlasticStrawsException() {
    return noSingleUsePlasticStrawsException;
  }

  public void setNoSingleUsePlasticStrawsException(NoSingleUsePlasticStrawsExceptionEnum noSingleUsePlasticStrawsException) {
    this.noSingleUsePlasticStrawsException = noSingleUsePlasticStrawsException;
  }


  public WasteReduction noSingleUsePlasticWaterBottles(Boolean noSingleUsePlasticWaterBottles) {
    this.noSingleUsePlasticWaterBottles = noSingleUsePlasticWaterBottles;
    return this;
  }

  /**
   * No single use plastic water bottles. The property bans single-use plastic water bottles.
   * @return noSingleUsePlasticWaterBottles
   */
  @javax.annotation.Nullable
  public Boolean getNoSingleUsePlasticWaterBottles() {
    return noSingleUsePlasticWaterBottles;
  }

  public void setNoSingleUsePlasticWaterBottles(Boolean noSingleUsePlasticWaterBottles) {
    this.noSingleUsePlasticWaterBottles = noSingleUsePlasticWaterBottles;
  }


  public WasteReduction noSingleUsePlasticWaterBottlesException(NoSingleUsePlasticWaterBottlesExceptionEnum noSingleUsePlasticWaterBottlesException) {
    this.noSingleUsePlasticWaterBottlesException = noSingleUsePlasticWaterBottlesException;
    return this;
  }

  /**
   * No single use plastic water bottles exception.
   * @return noSingleUsePlasticWaterBottlesException
   */
  @javax.annotation.Nullable
  public NoSingleUsePlasticWaterBottlesExceptionEnum getNoSingleUsePlasticWaterBottlesException() {
    return noSingleUsePlasticWaterBottlesException;
  }

  public void setNoSingleUsePlasticWaterBottlesException(NoSingleUsePlasticWaterBottlesExceptionEnum noSingleUsePlasticWaterBottlesException) {
    this.noSingleUsePlasticWaterBottlesException = noSingleUsePlasticWaterBottlesException;
  }


  public WasteReduction noStyrofoamFoodContainers(Boolean noStyrofoamFoodContainers) {
    this.noStyrofoamFoodContainers = noStyrofoamFoodContainers;
    return this;
  }

  /**
   * No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.
   * @return noStyrofoamFoodContainers
   */
  @javax.annotation.Nullable
  public Boolean getNoStyrofoamFoodContainers() {
    return noStyrofoamFoodContainers;
  }

  public void setNoStyrofoamFoodContainers(Boolean noStyrofoamFoodContainers) {
    this.noStyrofoamFoodContainers = noStyrofoamFoodContainers;
  }


  public WasteReduction noStyrofoamFoodContainersException(NoStyrofoamFoodContainersExceptionEnum noStyrofoamFoodContainersException) {
    this.noStyrofoamFoodContainersException = noStyrofoamFoodContainersException;
    return this;
  }

  /**
   * No styrofoam food containers exception.
   * @return noStyrofoamFoodContainersException
   */
  @javax.annotation.Nullable
  public NoStyrofoamFoodContainersExceptionEnum getNoStyrofoamFoodContainersException() {
    return noStyrofoamFoodContainersException;
  }

  public void setNoStyrofoamFoodContainersException(NoStyrofoamFoodContainersExceptionEnum noStyrofoamFoodContainersException) {
    this.noStyrofoamFoodContainersException = noStyrofoamFoodContainersException;
  }


  public WasteReduction recyclingProgram(Boolean recyclingProgram) {
    this.recyclingProgram = recyclingProgram;
    return this;
  }

  /**
   * Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.
   * @return recyclingProgram
   */
  @javax.annotation.Nullable
  public Boolean getRecyclingProgram() {
    return recyclingProgram;
  }

  public void setRecyclingProgram(Boolean recyclingProgram) {
    this.recyclingProgram = recyclingProgram;
  }


  public WasteReduction recyclingProgramException(RecyclingProgramExceptionEnum recyclingProgramException) {
    this.recyclingProgramException = recyclingProgramException;
    return this;
  }

  /**
   * Recycling program exception.
   * @return recyclingProgramException
   */
  @javax.annotation.Nullable
  public RecyclingProgramExceptionEnum getRecyclingProgramException() {
    return recyclingProgramException;
  }

  public void setRecyclingProgramException(RecyclingProgramExceptionEnum recyclingProgramException) {
    this.recyclingProgramException = recyclingProgramException;
  }


  public WasteReduction refillableToiletryContainers(Boolean refillableToiletryContainers) {
    this.refillableToiletryContainers = refillableToiletryContainers;
    return this;
  }

  /**
   * Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
   * @return refillableToiletryContainers
   */
  @javax.annotation.Nullable
  public Boolean getRefillableToiletryContainers() {
    return refillableToiletryContainers;
  }

  public void setRefillableToiletryContainers(Boolean refillableToiletryContainers) {
    this.refillableToiletryContainers = refillableToiletryContainers;
  }


  public WasteReduction refillableToiletryContainersException(RefillableToiletryContainersExceptionEnum refillableToiletryContainersException) {
    this.refillableToiletryContainersException = refillableToiletryContainersException;
    return this;
  }

  /**
   * Refillable toiletry containers exception.
   * @return refillableToiletryContainersException
   */
  @javax.annotation.Nullable
  public RefillableToiletryContainersExceptionEnum getRefillableToiletryContainersException() {
    return refillableToiletryContainersException;
  }

  public void setRefillableToiletryContainersException(RefillableToiletryContainersExceptionEnum refillableToiletryContainersException) {
    this.refillableToiletryContainersException = refillableToiletryContainersException;
  }


  public WasteReduction safelyDisposesBatteries(Boolean safelyDisposesBatteries) {
    this.safelyDisposesBatteries = safelyDisposesBatteries;
    return this;
  }

  /**
   * Safely disposes batteries. The property safely stores and disposes batteries.
   * @return safelyDisposesBatteries
   */
  @javax.annotation.Nullable
  public Boolean getSafelyDisposesBatteries() {
    return safelyDisposesBatteries;
  }

  public void setSafelyDisposesBatteries(Boolean safelyDisposesBatteries) {
    this.safelyDisposesBatteries = safelyDisposesBatteries;
  }


  public WasteReduction safelyDisposesBatteriesException(SafelyDisposesBatteriesExceptionEnum safelyDisposesBatteriesException) {
    this.safelyDisposesBatteriesException = safelyDisposesBatteriesException;
    return this;
  }

  /**
   * Safely disposes batteries exception.
   * @return safelyDisposesBatteriesException
   */
  @javax.annotation.Nullable
  public SafelyDisposesBatteriesExceptionEnum getSafelyDisposesBatteriesException() {
    return safelyDisposesBatteriesException;
  }

  public void setSafelyDisposesBatteriesException(SafelyDisposesBatteriesExceptionEnum safelyDisposesBatteriesException) {
    this.safelyDisposesBatteriesException = safelyDisposesBatteriesException;
  }


  public WasteReduction safelyDisposesElectronics(Boolean safelyDisposesElectronics) {
    this.safelyDisposesElectronics = safelyDisposesElectronics;
    return this;
  }

  /**
   * Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).
   * @return safelyDisposesElectronics
   */
  @javax.annotation.Nullable
  public Boolean getSafelyDisposesElectronics() {
    return safelyDisposesElectronics;
  }

  public void setSafelyDisposesElectronics(Boolean safelyDisposesElectronics) {
    this.safelyDisposesElectronics = safelyDisposesElectronics;
  }


  public WasteReduction safelyDisposesElectronicsException(SafelyDisposesElectronicsExceptionEnum safelyDisposesElectronicsException) {
    this.safelyDisposesElectronicsException = safelyDisposesElectronicsException;
    return this;
  }

  /**
   * Safely disposes electronics exception.
   * @return safelyDisposesElectronicsException
   */
  @javax.annotation.Nullable
  public SafelyDisposesElectronicsExceptionEnum getSafelyDisposesElectronicsException() {
    return safelyDisposesElectronicsException;
  }

  public void setSafelyDisposesElectronicsException(SafelyDisposesElectronicsExceptionEnum safelyDisposesElectronicsException) {
    this.safelyDisposesElectronicsException = safelyDisposesElectronicsException;
  }


  public WasteReduction safelyDisposesLightbulbs(Boolean safelyDisposesLightbulbs) {
    this.safelyDisposesLightbulbs = safelyDisposesLightbulbs;
    return this;
  }

  /**
   * Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
   * @return safelyDisposesLightbulbs
   */
  @javax.annotation.Nullable
  public Boolean getSafelyDisposesLightbulbs() {
    return safelyDisposesLightbulbs;
  }

  public void setSafelyDisposesLightbulbs(Boolean safelyDisposesLightbulbs) {
    this.safelyDisposesLightbulbs = safelyDisposesLightbulbs;
  }


  public WasteReduction safelyDisposesLightbulbsException(SafelyDisposesLightbulbsExceptionEnum safelyDisposesLightbulbsException) {
    this.safelyDisposesLightbulbsException = safelyDisposesLightbulbsException;
    return this;
  }

  /**
   * Safely disposes lightbulbs exception.
   * @return safelyDisposesLightbulbsException
   */
  @javax.annotation.Nullable
  public SafelyDisposesLightbulbsExceptionEnum getSafelyDisposesLightbulbsException() {
    return safelyDisposesLightbulbsException;
  }

  public void setSafelyDisposesLightbulbsException(SafelyDisposesLightbulbsExceptionEnum safelyDisposesLightbulbsException) {
    this.safelyDisposesLightbulbsException = safelyDisposesLightbulbsException;
  }


  public WasteReduction safelyHandlesHazardousSubstances(Boolean safelyHandlesHazardousSubstances) {
    this.safelyHandlesHazardousSubstances = safelyHandlesHazardousSubstances;
    return this;
  }

  /**
   * Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as \&quot;hazardous\&quot; by an authoritative body (such as OSHA or DOT), are labeled with signal words such as \&quot;Danger,\&quot; \&quot;Caution,\&quot; \&quot;Warning,\&quot; or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.
   * @return safelyHandlesHazardousSubstances
   */
  @javax.annotation.Nullable
  public Boolean getSafelyHandlesHazardousSubstances() {
    return safelyHandlesHazardousSubstances;
  }

  public void setSafelyHandlesHazardousSubstances(Boolean safelyHandlesHazardousSubstances) {
    this.safelyHandlesHazardousSubstances = safelyHandlesHazardousSubstances;
  }


  public WasteReduction safelyHandlesHazardousSubstancesException(SafelyHandlesHazardousSubstancesExceptionEnum safelyHandlesHazardousSubstancesException) {
    this.safelyHandlesHazardousSubstancesException = safelyHandlesHazardousSubstancesException;
    return this;
  }

  /**
   * Safely handles hazardous substances exception.
   * @return safelyHandlesHazardousSubstancesException
   */
  @javax.annotation.Nullable
  public SafelyHandlesHazardousSubstancesExceptionEnum getSafelyHandlesHazardousSubstancesException() {
    return safelyHandlesHazardousSubstancesException;
  }

  public void setSafelyHandlesHazardousSubstancesException(SafelyHandlesHazardousSubstancesExceptionEnum safelyHandlesHazardousSubstancesException) {
    this.safelyHandlesHazardousSubstancesException = safelyHandlesHazardousSubstancesException;
  }


  public WasteReduction soapDonationProgram(Boolean soapDonationProgram) {
    this.soapDonationProgram = soapDonationProgram;
    return this;
  }

  /**
   * Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.
   * @return soapDonationProgram
   */
  @javax.annotation.Nullable
  public Boolean getSoapDonationProgram() {
    return soapDonationProgram;
  }

  public void setSoapDonationProgram(Boolean soapDonationProgram) {
    this.soapDonationProgram = soapDonationProgram;
  }


  public WasteReduction soapDonationProgramException(SoapDonationProgramExceptionEnum soapDonationProgramException) {
    this.soapDonationProgramException = soapDonationProgramException;
    return this;
  }

  /**
   * Soap donation program exception.
   * @return soapDonationProgramException
   */
  @javax.annotation.Nullable
  public SoapDonationProgramExceptionEnum getSoapDonationProgramException() {
    return soapDonationProgramException;
  }

  public void setSoapDonationProgramException(SoapDonationProgramExceptionEnum soapDonationProgramException) {
    this.soapDonationProgramException = soapDonationProgramException;
  }


  public WasteReduction toiletryDonationProgram(Boolean toiletryDonationProgram) {
    this.toiletryDonationProgram = toiletryDonationProgram;
    return this;
  }

  /**
   * Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.
   * @return toiletryDonationProgram
   */
  @javax.annotation.Nullable
  public Boolean getToiletryDonationProgram() {
    return toiletryDonationProgram;
  }

  public void setToiletryDonationProgram(Boolean toiletryDonationProgram) {
    this.toiletryDonationProgram = toiletryDonationProgram;
  }


  public WasteReduction toiletryDonationProgramException(ToiletryDonationProgramExceptionEnum toiletryDonationProgramException) {
    this.toiletryDonationProgramException = toiletryDonationProgramException;
    return this;
  }

  /**
   * Toiletry donation program exception.
   * @return toiletryDonationProgramException
   */
  @javax.annotation.Nullable
  public ToiletryDonationProgramExceptionEnum getToiletryDonationProgramException() {
    return toiletryDonationProgramException;
  }

  public void setToiletryDonationProgramException(ToiletryDonationProgramExceptionEnum toiletryDonationProgramException) {
    this.toiletryDonationProgramException = toiletryDonationProgramException;
  }


  public WasteReduction waterBottleFillingStations(Boolean waterBottleFillingStations) {
    this.waterBottleFillingStations = waterBottleFillingStations;
    return this;
  }

  /**
   * Water bottle filling stations. The property offers water stations throughout the building for guest use.
   * @return waterBottleFillingStations
   */
  @javax.annotation.Nullable
  public Boolean getWaterBottleFillingStations() {
    return waterBottleFillingStations;
  }

  public void setWaterBottleFillingStations(Boolean waterBottleFillingStations) {
    this.waterBottleFillingStations = waterBottleFillingStations;
  }


  public WasteReduction waterBottleFillingStationsException(WaterBottleFillingStationsExceptionEnum waterBottleFillingStationsException) {
    this.waterBottleFillingStationsException = waterBottleFillingStationsException;
    return this;
  }

  /**
   * Water bottle filling stations exception.
   * @return waterBottleFillingStationsException
   */
  @javax.annotation.Nullable
  public WaterBottleFillingStationsExceptionEnum getWaterBottleFillingStationsException() {
    return waterBottleFillingStationsException;
  }

  public void setWaterBottleFillingStationsException(WaterBottleFillingStationsExceptionEnum waterBottleFillingStationsException) {
    this.waterBottleFillingStationsException = waterBottleFillingStationsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WasteReduction wasteReduction = (WasteReduction) o;
    return Objects.equals(this.compostableFoodContainersAndCutlery, wasteReduction.compostableFoodContainersAndCutlery) &&
        Objects.equals(this.compostableFoodContainersAndCutleryException, wasteReduction.compostableFoodContainersAndCutleryException) &&
        Objects.equals(this.compostsExcessFood, wasteReduction.compostsExcessFood) &&
        Objects.equals(this.compostsExcessFoodException, wasteReduction.compostsExcessFoodException) &&
        Objects.equals(this.donatesExcessFood, wasteReduction.donatesExcessFood) &&
        Objects.equals(this.donatesExcessFoodException, wasteReduction.donatesExcessFoodException) &&
        Objects.equals(this.foodWasteReductionProgram, wasteReduction.foodWasteReductionProgram) &&
        Objects.equals(this.foodWasteReductionProgramException, wasteReduction.foodWasteReductionProgramException) &&
        Objects.equals(this.noSingleUsePlasticStraws, wasteReduction.noSingleUsePlasticStraws) &&
        Objects.equals(this.noSingleUsePlasticStrawsException, wasteReduction.noSingleUsePlasticStrawsException) &&
        Objects.equals(this.noSingleUsePlasticWaterBottles, wasteReduction.noSingleUsePlasticWaterBottles) &&
        Objects.equals(this.noSingleUsePlasticWaterBottlesException, wasteReduction.noSingleUsePlasticWaterBottlesException) &&
        Objects.equals(this.noStyrofoamFoodContainers, wasteReduction.noStyrofoamFoodContainers) &&
        Objects.equals(this.noStyrofoamFoodContainersException, wasteReduction.noStyrofoamFoodContainersException) &&
        Objects.equals(this.recyclingProgram, wasteReduction.recyclingProgram) &&
        Objects.equals(this.recyclingProgramException, wasteReduction.recyclingProgramException) &&
        Objects.equals(this.refillableToiletryContainers, wasteReduction.refillableToiletryContainers) &&
        Objects.equals(this.refillableToiletryContainersException, wasteReduction.refillableToiletryContainersException) &&
        Objects.equals(this.safelyDisposesBatteries, wasteReduction.safelyDisposesBatteries) &&
        Objects.equals(this.safelyDisposesBatteriesException, wasteReduction.safelyDisposesBatteriesException) &&
        Objects.equals(this.safelyDisposesElectronics, wasteReduction.safelyDisposesElectronics) &&
        Objects.equals(this.safelyDisposesElectronicsException, wasteReduction.safelyDisposesElectronicsException) &&
        Objects.equals(this.safelyDisposesLightbulbs, wasteReduction.safelyDisposesLightbulbs) &&
        Objects.equals(this.safelyDisposesLightbulbsException, wasteReduction.safelyDisposesLightbulbsException) &&
        Objects.equals(this.safelyHandlesHazardousSubstances, wasteReduction.safelyHandlesHazardousSubstances) &&
        Objects.equals(this.safelyHandlesHazardousSubstancesException, wasteReduction.safelyHandlesHazardousSubstancesException) &&
        Objects.equals(this.soapDonationProgram, wasteReduction.soapDonationProgram) &&
        Objects.equals(this.soapDonationProgramException, wasteReduction.soapDonationProgramException) &&
        Objects.equals(this.toiletryDonationProgram, wasteReduction.toiletryDonationProgram) &&
        Objects.equals(this.toiletryDonationProgramException, wasteReduction.toiletryDonationProgramException) &&
        Objects.equals(this.waterBottleFillingStations, wasteReduction.waterBottleFillingStations) &&
        Objects.equals(this.waterBottleFillingStationsException, wasteReduction.waterBottleFillingStationsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compostableFoodContainersAndCutlery, compostableFoodContainersAndCutleryException, compostsExcessFood, compostsExcessFoodException, donatesExcessFood, donatesExcessFoodException, foodWasteReductionProgram, foodWasteReductionProgramException, noSingleUsePlasticStraws, noSingleUsePlasticStrawsException, noSingleUsePlasticWaterBottles, noSingleUsePlasticWaterBottlesException, noStyrofoamFoodContainers, noStyrofoamFoodContainersException, recyclingProgram, recyclingProgramException, refillableToiletryContainers, refillableToiletryContainersException, safelyDisposesBatteries, safelyDisposesBatteriesException, safelyDisposesElectronics, safelyDisposesElectronicsException, safelyDisposesLightbulbs, safelyDisposesLightbulbsException, safelyHandlesHazardousSubstances, safelyHandlesHazardousSubstancesException, soapDonationProgram, soapDonationProgramException, toiletryDonationProgram, toiletryDonationProgramException, waterBottleFillingStations, waterBottleFillingStationsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WasteReduction {\n");
    sb.append("    compostableFoodContainersAndCutlery: ").append(toIndentedString(compostableFoodContainersAndCutlery)).append("\n");
    sb.append("    compostableFoodContainersAndCutleryException: ").append(toIndentedString(compostableFoodContainersAndCutleryException)).append("\n");
    sb.append("    compostsExcessFood: ").append(toIndentedString(compostsExcessFood)).append("\n");
    sb.append("    compostsExcessFoodException: ").append(toIndentedString(compostsExcessFoodException)).append("\n");
    sb.append("    donatesExcessFood: ").append(toIndentedString(donatesExcessFood)).append("\n");
    sb.append("    donatesExcessFoodException: ").append(toIndentedString(donatesExcessFoodException)).append("\n");
    sb.append("    foodWasteReductionProgram: ").append(toIndentedString(foodWasteReductionProgram)).append("\n");
    sb.append("    foodWasteReductionProgramException: ").append(toIndentedString(foodWasteReductionProgramException)).append("\n");
    sb.append("    noSingleUsePlasticStraws: ").append(toIndentedString(noSingleUsePlasticStraws)).append("\n");
    sb.append("    noSingleUsePlasticStrawsException: ").append(toIndentedString(noSingleUsePlasticStrawsException)).append("\n");
    sb.append("    noSingleUsePlasticWaterBottles: ").append(toIndentedString(noSingleUsePlasticWaterBottles)).append("\n");
    sb.append("    noSingleUsePlasticWaterBottlesException: ").append(toIndentedString(noSingleUsePlasticWaterBottlesException)).append("\n");
    sb.append("    noStyrofoamFoodContainers: ").append(toIndentedString(noStyrofoamFoodContainers)).append("\n");
    sb.append("    noStyrofoamFoodContainersException: ").append(toIndentedString(noStyrofoamFoodContainersException)).append("\n");
    sb.append("    recyclingProgram: ").append(toIndentedString(recyclingProgram)).append("\n");
    sb.append("    recyclingProgramException: ").append(toIndentedString(recyclingProgramException)).append("\n");
    sb.append("    refillableToiletryContainers: ").append(toIndentedString(refillableToiletryContainers)).append("\n");
    sb.append("    refillableToiletryContainersException: ").append(toIndentedString(refillableToiletryContainersException)).append("\n");
    sb.append("    safelyDisposesBatteries: ").append(toIndentedString(safelyDisposesBatteries)).append("\n");
    sb.append("    safelyDisposesBatteriesException: ").append(toIndentedString(safelyDisposesBatteriesException)).append("\n");
    sb.append("    safelyDisposesElectronics: ").append(toIndentedString(safelyDisposesElectronics)).append("\n");
    sb.append("    safelyDisposesElectronicsException: ").append(toIndentedString(safelyDisposesElectronicsException)).append("\n");
    sb.append("    safelyDisposesLightbulbs: ").append(toIndentedString(safelyDisposesLightbulbs)).append("\n");
    sb.append("    safelyDisposesLightbulbsException: ").append(toIndentedString(safelyDisposesLightbulbsException)).append("\n");
    sb.append("    safelyHandlesHazardousSubstances: ").append(toIndentedString(safelyHandlesHazardousSubstances)).append("\n");
    sb.append("    safelyHandlesHazardousSubstancesException: ").append(toIndentedString(safelyHandlesHazardousSubstancesException)).append("\n");
    sb.append("    soapDonationProgram: ").append(toIndentedString(soapDonationProgram)).append("\n");
    sb.append("    soapDonationProgramException: ").append(toIndentedString(soapDonationProgramException)).append("\n");
    sb.append("    toiletryDonationProgram: ").append(toIndentedString(toiletryDonationProgram)).append("\n");
    sb.append("    toiletryDonationProgramException: ").append(toIndentedString(toiletryDonationProgramException)).append("\n");
    sb.append("    waterBottleFillingStations: ").append(toIndentedString(waterBottleFillingStations)).append("\n");
    sb.append("    waterBottleFillingStationsException: ").append(toIndentedString(waterBottleFillingStationsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compostableFoodContainersAndCutlery");
    openapiFields.add("compostableFoodContainersAndCutleryException");
    openapiFields.add("compostsExcessFood");
    openapiFields.add("compostsExcessFoodException");
    openapiFields.add("donatesExcessFood");
    openapiFields.add("donatesExcessFoodException");
    openapiFields.add("foodWasteReductionProgram");
    openapiFields.add("foodWasteReductionProgramException");
    openapiFields.add("noSingleUsePlasticStraws");
    openapiFields.add("noSingleUsePlasticStrawsException");
    openapiFields.add("noSingleUsePlasticWaterBottles");
    openapiFields.add("noSingleUsePlasticWaterBottlesException");
    openapiFields.add("noStyrofoamFoodContainers");
    openapiFields.add("noStyrofoamFoodContainersException");
    openapiFields.add("recyclingProgram");
    openapiFields.add("recyclingProgramException");
    openapiFields.add("refillableToiletryContainers");
    openapiFields.add("refillableToiletryContainersException");
    openapiFields.add("safelyDisposesBatteries");
    openapiFields.add("safelyDisposesBatteriesException");
    openapiFields.add("safelyDisposesElectronics");
    openapiFields.add("safelyDisposesElectronicsException");
    openapiFields.add("safelyDisposesLightbulbs");
    openapiFields.add("safelyDisposesLightbulbsException");
    openapiFields.add("safelyHandlesHazardousSubstances");
    openapiFields.add("safelyHandlesHazardousSubstancesException");
    openapiFields.add("soapDonationProgram");
    openapiFields.add("soapDonationProgramException");
    openapiFields.add("toiletryDonationProgram");
    openapiFields.add("toiletryDonationProgramException");
    openapiFields.add("waterBottleFillingStations");
    openapiFields.add("waterBottleFillingStationsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WasteReduction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WasteReduction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WasteReduction is not found in the empty JSON string", WasteReduction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WasteReduction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WasteReduction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compostableFoodContainersAndCutleryException") != null && !jsonObj.get("compostableFoodContainersAndCutleryException").isJsonNull()) && !jsonObj.get("compostableFoodContainersAndCutleryException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compostableFoodContainersAndCutleryException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compostableFoodContainersAndCutleryException").toString()));
      }
      // validate the optional field `compostableFoodContainersAndCutleryException`
      if (jsonObj.get("compostableFoodContainersAndCutleryException") != null && !jsonObj.get("compostableFoodContainersAndCutleryException").isJsonNull()) {
        CompostableFoodContainersAndCutleryExceptionEnum.validateJsonElement(jsonObj.get("compostableFoodContainersAndCutleryException"));
      }
      if ((jsonObj.get("compostsExcessFoodException") != null && !jsonObj.get("compostsExcessFoodException").isJsonNull()) && !jsonObj.get("compostsExcessFoodException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compostsExcessFoodException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compostsExcessFoodException").toString()));
      }
      // validate the optional field `compostsExcessFoodException`
      if (jsonObj.get("compostsExcessFoodException") != null && !jsonObj.get("compostsExcessFoodException").isJsonNull()) {
        CompostsExcessFoodExceptionEnum.validateJsonElement(jsonObj.get("compostsExcessFoodException"));
      }
      if ((jsonObj.get("donatesExcessFoodException") != null && !jsonObj.get("donatesExcessFoodException").isJsonNull()) && !jsonObj.get("donatesExcessFoodException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `donatesExcessFoodException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("donatesExcessFoodException").toString()));
      }
      // validate the optional field `donatesExcessFoodException`
      if (jsonObj.get("donatesExcessFoodException") != null && !jsonObj.get("donatesExcessFoodException").isJsonNull()) {
        DonatesExcessFoodExceptionEnum.validateJsonElement(jsonObj.get("donatesExcessFoodException"));
      }
      if ((jsonObj.get("foodWasteReductionProgramException") != null && !jsonObj.get("foodWasteReductionProgramException").isJsonNull()) && !jsonObj.get("foodWasteReductionProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foodWasteReductionProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foodWasteReductionProgramException").toString()));
      }
      // validate the optional field `foodWasteReductionProgramException`
      if (jsonObj.get("foodWasteReductionProgramException") != null && !jsonObj.get("foodWasteReductionProgramException").isJsonNull()) {
        FoodWasteReductionProgramExceptionEnum.validateJsonElement(jsonObj.get("foodWasteReductionProgramException"));
      }
      if ((jsonObj.get("noSingleUsePlasticStrawsException") != null && !jsonObj.get("noSingleUsePlasticStrawsException").isJsonNull()) && !jsonObj.get("noSingleUsePlasticStrawsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noSingleUsePlasticStrawsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noSingleUsePlasticStrawsException").toString()));
      }
      // validate the optional field `noSingleUsePlasticStrawsException`
      if (jsonObj.get("noSingleUsePlasticStrawsException") != null && !jsonObj.get("noSingleUsePlasticStrawsException").isJsonNull()) {
        NoSingleUsePlasticStrawsExceptionEnum.validateJsonElement(jsonObj.get("noSingleUsePlasticStrawsException"));
      }
      if ((jsonObj.get("noSingleUsePlasticWaterBottlesException") != null && !jsonObj.get("noSingleUsePlasticWaterBottlesException").isJsonNull()) && !jsonObj.get("noSingleUsePlasticWaterBottlesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noSingleUsePlasticWaterBottlesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noSingleUsePlasticWaterBottlesException").toString()));
      }
      // validate the optional field `noSingleUsePlasticWaterBottlesException`
      if (jsonObj.get("noSingleUsePlasticWaterBottlesException") != null && !jsonObj.get("noSingleUsePlasticWaterBottlesException").isJsonNull()) {
        NoSingleUsePlasticWaterBottlesExceptionEnum.validateJsonElement(jsonObj.get("noSingleUsePlasticWaterBottlesException"));
      }
      if ((jsonObj.get("noStyrofoamFoodContainersException") != null && !jsonObj.get("noStyrofoamFoodContainersException").isJsonNull()) && !jsonObj.get("noStyrofoamFoodContainersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noStyrofoamFoodContainersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noStyrofoamFoodContainersException").toString()));
      }
      // validate the optional field `noStyrofoamFoodContainersException`
      if (jsonObj.get("noStyrofoamFoodContainersException") != null && !jsonObj.get("noStyrofoamFoodContainersException").isJsonNull()) {
        NoStyrofoamFoodContainersExceptionEnum.validateJsonElement(jsonObj.get("noStyrofoamFoodContainersException"));
      }
      if ((jsonObj.get("recyclingProgramException") != null && !jsonObj.get("recyclingProgramException").isJsonNull()) && !jsonObj.get("recyclingProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recyclingProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recyclingProgramException").toString()));
      }
      // validate the optional field `recyclingProgramException`
      if (jsonObj.get("recyclingProgramException") != null && !jsonObj.get("recyclingProgramException").isJsonNull()) {
        RecyclingProgramExceptionEnum.validateJsonElement(jsonObj.get("recyclingProgramException"));
      }
      if ((jsonObj.get("refillableToiletryContainersException") != null && !jsonObj.get("refillableToiletryContainersException").isJsonNull()) && !jsonObj.get("refillableToiletryContainersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refillableToiletryContainersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refillableToiletryContainersException").toString()));
      }
      // validate the optional field `refillableToiletryContainersException`
      if (jsonObj.get("refillableToiletryContainersException") != null && !jsonObj.get("refillableToiletryContainersException").isJsonNull()) {
        RefillableToiletryContainersExceptionEnum.validateJsonElement(jsonObj.get("refillableToiletryContainersException"));
      }
      if ((jsonObj.get("safelyDisposesBatteriesException") != null && !jsonObj.get("safelyDisposesBatteriesException").isJsonNull()) && !jsonObj.get("safelyDisposesBatteriesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safelyDisposesBatteriesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safelyDisposesBatteriesException").toString()));
      }
      // validate the optional field `safelyDisposesBatteriesException`
      if (jsonObj.get("safelyDisposesBatteriesException") != null && !jsonObj.get("safelyDisposesBatteriesException").isJsonNull()) {
        SafelyDisposesBatteriesExceptionEnum.validateJsonElement(jsonObj.get("safelyDisposesBatteriesException"));
      }
      if ((jsonObj.get("safelyDisposesElectronicsException") != null && !jsonObj.get("safelyDisposesElectronicsException").isJsonNull()) && !jsonObj.get("safelyDisposesElectronicsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safelyDisposesElectronicsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safelyDisposesElectronicsException").toString()));
      }
      // validate the optional field `safelyDisposesElectronicsException`
      if (jsonObj.get("safelyDisposesElectronicsException") != null && !jsonObj.get("safelyDisposesElectronicsException").isJsonNull()) {
        SafelyDisposesElectronicsExceptionEnum.validateJsonElement(jsonObj.get("safelyDisposesElectronicsException"));
      }
      if ((jsonObj.get("safelyDisposesLightbulbsException") != null && !jsonObj.get("safelyDisposesLightbulbsException").isJsonNull()) && !jsonObj.get("safelyDisposesLightbulbsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safelyDisposesLightbulbsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safelyDisposesLightbulbsException").toString()));
      }
      // validate the optional field `safelyDisposesLightbulbsException`
      if (jsonObj.get("safelyDisposesLightbulbsException") != null && !jsonObj.get("safelyDisposesLightbulbsException").isJsonNull()) {
        SafelyDisposesLightbulbsExceptionEnum.validateJsonElement(jsonObj.get("safelyDisposesLightbulbsException"));
      }
      if ((jsonObj.get("safelyHandlesHazardousSubstancesException") != null && !jsonObj.get("safelyHandlesHazardousSubstancesException").isJsonNull()) && !jsonObj.get("safelyHandlesHazardousSubstancesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safelyHandlesHazardousSubstancesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safelyHandlesHazardousSubstancesException").toString()));
      }
      // validate the optional field `safelyHandlesHazardousSubstancesException`
      if (jsonObj.get("safelyHandlesHazardousSubstancesException") != null && !jsonObj.get("safelyHandlesHazardousSubstancesException").isJsonNull()) {
        SafelyHandlesHazardousSubstancesExceptionEnum.validateJsonElement(jsonObj.get("safelyHandlesHazardousSubstancesException"));
      }
      if ((jsonObj.get("soapDonationProgramException") != null && !jsonObj.get("soapDonationProgramException").isJsonNull()) && !jsonObj.get("soapDonationProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soapDonationProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soapDonationProgramException").toString()));
      }
      // validate the optional field `soapDonationProgramException`
      if (jsonObj.get("soapDonationProgramException") != null && !jsonObj.get("soapDonationProgramException").isJsonNull()) {
        SoapDonationProgramExceptionEnum.validateJsonElement(jsonObj.get("soapDonationProgramException"));
      }
      if ((jsonObj.get("toiletryDonationProgramException") != null && !jsonObj.get("toiletryDonationProgramException").isJsonNull()) && !jsonObj.get("toiletryDonationProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toiletryDonationProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toiletryDonationProgramException").toString()));
      }
      // validate the optional field `toiletryDonationProgramException`
      if (jsonObj.get("toiletryDonationProgramException") != null && !jsonObj.get("toiletryDonationProgramException").isJsonNull()) {
        ToiletryDonationProgramExceptionEnum.validateJsonElement(jsonObj.get("toiletryDonationProgramException"));
      }
      if ((jsonObj.get("waterBottleFillingStationsException") != null && !jsonObj.get("waterBottleFillingStationsException").isJsonNull()) && !jsonObj.get("waterBottleFillingStationsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waterBottleFillingStationsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waterBottleFillingStationsException").toString()));
      }
      // validate the optional field `waterBottleFillingStationsException`
      if (jsonObj.get("waterBottleFillingStationsException") != null && !jsonObj.get("waterBottleFillingStationsException").isJsonNull()) {
        WaterBottleFillingStationsExceptionEnum.validateJsonElement(jsonObj.get("waterBottleFillingStationsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WasteReduction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WasteReduction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WasteReduction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WasteReduction.class));

       return (TypeAdapter<T>) new TypeAdapter<WasteReduction>() {
           @Override
           public void write(JsonWriter out, WasteReduction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WasteReduction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WasteReduction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WasteReduction
   * @throws IOException if the JSON string is invalid with respect to WasteReduction
   */
  public static WasteReduction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WasteReduction.class);
  }

  /**
   * Convert an instance of WasteReduction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

