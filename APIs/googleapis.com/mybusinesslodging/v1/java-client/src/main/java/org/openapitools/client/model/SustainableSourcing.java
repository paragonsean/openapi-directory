/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sustainable sourcing practices implemented at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SustainableSourcing {
  public static final String SERIALIZED_NAME_ECO_FRIENDLY_TOILETRIES = "ecoFriendlyToiletries";
  @SerializedName(SERIALIZED_NAME_ECO_FRIENDLY_TOILETRIES)
  private Boolean ecoFriendlyToiletries;

  /**
   * Eco friendly toiletries exception.
   */
  @JsonAdapter(EcoFriendlyToiletriesExceptionEnum.Adapter.class)
  public enum EcoFriendlyToiletriesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EcoFriendlyToiletriesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EcoFriendlyToiletriesExceptionEnum fromValue(String value) {
      for (EcoFriendlyToiletriesExceptionEnum b : EcoFriendlyToiletriesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EcoFriendlyToiletriesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EcoFriendlyToiletriesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EcoFriendlyToiletriesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EcoFriendlyToiletriesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EcoFriendlyToiletriesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ECO_FRIENDLY_TOILETRIES_EXCEPTION = "ecoFriendlyToiletriesException";
  @SerializedName(SERIALIZED_NAME_ECO_FRIENDLY_TOILETRIES_EXCEPTION)
  private EcoFriendlyToiletriesExceptionEnum ecoFriendlyToiletriesException;

  public static final String SERIALIZED_NAME_LOCALLY_SOURCED_FOOD_AND_BEVERAGES = "locallySourcedFoodAndBeverages";
  @SerializedName(SERIALIZED_NAME_LOCALLY_SOURCED_FOOD_AND_BEVERAGES)
  private Boolean locallySourcedFoodAndBeverages;

  /**
   * Locally sourced food and beverages exception.
   */
  @JsonAdapter(LocallySourcedFoodAndBeveragesExceptionEnum.Adapter.class)
  public enum LocallySourcedFoodAndBeveragesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LocallySourcedFoodAndBeveragesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocallySourcedFoodAndBeveragesExceptionEnum fromValue(String value) {
      for (LocallySourcedFoodAndBeveragesExceptionEnum b : LocallySourcedFoodAndBeveragesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocallySourcedFoodAndBeveragesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocallySourcedFoodAndBeveragesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocallySourcedFoodAndBeveragesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocallySourcedFoodAndBeveragesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocallySourcedFoodAndBeveragesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALLY_SOURCED_FOOD_AND_BEVERAGES_EXCEPTION = "locallySourcedFoodAndBeveragesException";
  @SerializedName(SERIALIZED_NAME_LOCALLY_SOURCED_FOOD_AND_BEVERAGES_EXCEPTION)
  private LocallySourcedFoodAndBeveragesExceptionEnum locallySourcedFoodAndBeveragesException;

  public static final String SERIALIZED_NAME_ORGANIC_CAGE_FREE_EGGS = "organicCageFreeEggs";
  @SerializedName(SERIALIZED_NAME_ORGANIC_CAGE_FREE_EGGS)
  private Boolean organicCageFreeEggs;

  /**
   * Organic cage free eggs exception.
   */
  @JsonAdapter(OrganicCageFreeEggsExceptionEnum.Adapter.class)
  public enum OrganicCageFreeEggsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OrganicCageFreeEggsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganicCageFreeEggsExceptionEnum fromValue(String value) {
      for (OrganicCageFreeEggsExceptionEnum b : OrganicCageFreeEggsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganicCageFreeEggsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganicCageFreeEggsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganicCageFreeEggsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganicCageFreeEggsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganicCageFreeEggsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANIC_CAGE_FREE_EGGS_EXCEPTION = "organicCageFreeEggsException";
  @SerializedName(SERIALIZED_NAME_ORGANIC_CAGE_FREE_EGGS_EXCEPTION)
  private OrganicCageFreeEggsExceptionEnum organicCageFreeEggsException;

  public static final String SERIALIZED_NAME_ORGANIC_FOOD_AND_BEVERAGES = "organicFoodAndBeverages";
  @SerializedName(SERIALIZED_NAME_ORGANIC_FOOD_AND_BEVERAGES)
  private Boolean organicFoodAndBeverages;

  /**
   * Organic food and beverages exception.
   */
  @JsonAdapter(OrganicFoodAndBeveragesExceptionEnum.Adapter.class)
  public enum OrganicFoodAndBeveragesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OrganicFoodAndBeveragesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganicFoodAndBeveragesExceptionEnum fromValue(String value) {
      for (OrganicFoodAndBeveragesExceptionEnum b : OrganicFoodAndBeveragesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganicFoodAndBeveragesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganicFoodAndBeveragesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganicFoodAndBeveragesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganicFoodAndBeveragesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganicFoodAndBeveragesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANIC_FOOD_AND_BEVERAGES_EXCEPTION = "organicFoodAndBeveragesException";
  @SerializedName(SERIALIZED_NAME_ORGANIC_FOOD_AND_BEVERAGES_EXCEPTION)
  private OrganicFoodAndBeveragesExceptionEnum organicFoodAndBeveragesException;

  public static final String SERIALIZED_NAME_RESPONSIBLE_PURCHASING_POLICY = "responsiblePurchasingPolicy";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PURCHASING_POLICY)
  private Boolean responsiblePurchasingPolicy;

  /**
   * Responsible purchasing policy exception.
   */
  @JsonAdapter(ResponsiblePurchasingPolicyExceptionEnum.Adapter.class)
  public enum ResponsiblePurchasingPolicyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ResponsiblePurchasingPolicyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponsiblePurchasingPolicyExceptionEnum fromValue(String value) {
      for (ResponsiblePurchasingPolicyExceptionEnum b : ResponsiblePurchasingPolicyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponsiblePurchasingPolicyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponsiblePurchasingPolicyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponsiblePurchasingPolicyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponsiblePurchasingPolicyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponsiblePurchasingPolicyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSIBLE_PURCHASING_POLICY_EXCEPTION = "responsiblePurchasingPolicyException";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PURCHASING_POLICY_EXCEPTION)
  private ResponsiblePurchasingPolicyExceptionEnum responsiblePurchasingPolicyException;

  public static final String SERIALIZED_NAME_RESPONSIBLY_SOURCES_SEAFOOD = "responsiblySourcesSeafood";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLY_SOURCES_SEAFOOD)
  private Boolean responsiblySourcesSeafood;

  /**
   * Responsibly sources seafood exception.
   */
  @JsonAdapter(ResponsiblySourcesSeafoodExceptionEnum.Adapter.class)
  public enum ResponsiblySourcesSeafoodExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ResponsiblySourcesSeafoodExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponsiblySourcesSeafoodExceptionEnum fromValue(String value) {
      for (ResponsiblySourcesSeafoodExceptionEnum b : ResponsiblySourcesSeafoodExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponsiblySourcesSeafoodExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponsiblySourcesSeafoodExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponsiblySourcesSeafoodExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponsiblySourcesSeafoodExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponsiblySourcesSeafoodExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSIBLY_SOURCES_SEAFOOD_EXCEPTION = "responsiblySourcesSeafoodException";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLY_SOURCES_SEAFOOD_EXCEPTION)
  private ResponsiblySourcesSeafoodExceptionEnum responsiblySourcesSeafoodException;

  public static final String SERIALIZED_NAME_VEGAN_MEALS = "veganMeals";
  @SerializedName(SERIALIZED_NAME_VEGAN_MEALS)
  private Boolean veganMeals;

  /**
   * Vegan meals exception.
   */
  @JsonAdapter(VeganMealsExceptionEnum.Adapter.class)
  public enum VeganMealsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    VeganMealsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VeganMealsExceptionEnum fromValue(String value) {
      for (VeganMealsExceptionEnum b : VeganMealsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VeganMealsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VeganMealsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VeganMealsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VeganMealsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VeganMealsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VEGAN_MEALS_EXCEPTION = "veganMealsException";
  @SerializedName(SERIALIZED_NAME_VEGAN_MEALS_EXCEPTION)
  private VeganMealsExceptionEnum veganMealsException;

  public static final String SERIALIZED_NAME_VEGETARIAN_MEALS = "vegetarianMeals";
  @SerializedName(SERIALIZED_NAME_VEGETARIAN_MEALS)
  private Boolean vegetarianMeals;

  /**
   * Vegetarian meals exception.
   */
  @JsonAdapter(VegetarianMealsExceptionEnum.Adapter.class)
  public enum VegetarianMealsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    VegetarianMealsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VegetarianMealsExceptionEnum fromValue(String value) {
      for (VegetarianMealsExceptionEnum b : VegetarianMealsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VegetarianMealsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VegetarianMealsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VegetarianMealsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VegetarianMealsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VegetarianMealsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VEGETARIAN_MEALS_EXCEPTION = "vegetarianMealsException";
  @SerializedName(SERIALIZED_NAME_VEGETARIAN_MEALS_EXCEPTION)
  private VegetarianMealsExceptionEnum vegetarianMealsException;

  public SustainableSourcing() {
  }

  public SustainableSourcing ecoFriendlyToiletries(Boolean ecoFriendlyToiletries) {
    this.ecoFriendlyToiletries = ecoFriendlyToiletries;
    return this;
  }

  /**
   * Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.
   * @return ecoFriendlyToiletries
   */
  @javax.annotation.Nullable
  public Boolean getEcoFriendlyToiletries() {
    return ecoFriendlyToiletries;
  }

  public void setEcoFriendlyToiletries(Boolean ecoFriendlyToiletries) {
    this.ecoFriendlyToiletries = ecoFriendlyToiletries;
  }


  public SustainableSourcing ecoFriendlyToiletriesException(EcoFriendlyToiletriesExceptionEnum ecoFriendlyToiletriesException) {
    this.ecoFriendlyToiletriesException = ecoFriendlyToiletriesException;
    return this;
  }

  /**
   * Eco friendly toiletries exception.
   * @return ecoFriendlyToiletriesException
   */
  @javax.annotation.Nullable
  public EcoFriendlyToiletriesExceptionEnum getEcoFriendlyToiletriesException() {
    return ecoFriendlyToiletriesException;
  }

  public void setEcoFriendlyToiletriesException(EcoFriendlyToiletriesExceptionEnum ecoFriendlyToiletriesException) {
    this.ecoFriendlyToiletriesException = ecoFriendlyToiletriesException;
  }


  public SustainableSourcing locallySourcedFoodAndBeverages(Boolean locallySourcedFoodAndBeverages) {
    this.locallySourcedFoodAndBeverages = locallySourcedFoodAndBeverages;
    return this;
  }

  /**
   * Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.
   * @return locallySourcedFoodAndBeverages
   */
  @javax.annotation.Nullable
  public Boolean getLocallySourcedFoodAndBeverages() {
    return locallySourcedFoodAndBeverages;
  }

  public void setLocallySourcedFoodAndBeverages(Boolean locallySourcedFoodAndBeverages) {
    this.locallySourcedFoodAndBeverages = locallySourcedFoodAndBeverages;
  }


  public SustainableSourcing locallySourcedFoodAndBeveragesException(LocallySourcedFoodAndBeveragesExceptionEnum locallySourcedFoodAndBeveragesException) {
    this.locallySourcedFoodAndBeveragesException = locallySourcedFoodAndBeveragesException;
    return this;
  }

  /**
   * Locally sourced food and beverages exception.
   * @return locallySourcedFoodAndBeveragesException
   */
  @javax.annotation.Nullable
  public LocallySourcedFoodAndBeveragesExceptionEnum getLocallySourcedFoodAndBeveragesException() {
    return locallySourcedFoodAndBeveragesException;
  }

  public void setLocallySourcedFoodAndBeveragesException(LocallySourcedFoodAndBeveragesExceptionEnum locallySourcedFoodAndBeveragesException) {
    this.locallySourcedFoodAndBeveragesException = locallySourcedFoodAndBeveragesException;
  }


  public SustainableSourcing organicCageFreeEggs(Boolean organicCageFreeEggs) {
    this.organicCageFreeEggs = organicCageFreeEggs;
    return this;
  }

  /**
   * Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).
   * @return organicCageFreeEggs
   */
  @javax.annotation.Nullable
  public Boolean getOrganicCageFreeEggs() {
    return organicCageFreeEggs;
  }

  public void setOrganicCageFreeEggs(Boolean organicCageFreeEggs) {
    this.organicCageFreeEggs = organicCageFreeEggs;
  }


  public SustainableSourcing organicCageFreeEggsException(OrganicCageFreeEggsExceptionEnum organicCageFreeEggsException) {
    this.organicCageFreeEggsException = organicCageFreeEggsException;
    return this;
  }

  /**
   * Organic cage free eggs exception.
   * @return organicCageFreeEggsException
   */
  @javax.annotation.Nullable
  public OrganicCageFreeEggsExceptionEnum getOrganicCageFreeEggsException() {
    return organicCageFreeEggsException;
  }

  public void setOrganicCageFreeEggsException(OrganicCageFreeEggsExceptionEnum organicCageFreeEggsException) {
    this.organicCageFreeEggsException = organicCageFreeEggsException;
  }


  public SustainableSourcing organicFoodAndBeverages(Boolean organicFoodAndBeverages) {
    this.organicFoodAndBeverages = organicFoodAndBeverages;
    return this;
  }

  /**
   * Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.
   * @return organicFoodAndBeverages
   */
  @javax.annotation.Nullable
  public Boolean getOrganicFoodAndBeverages() {
    return organicFoodAndBeverages;
  }

  public void setOrganicFoodAndBeverages(Boolean organicFoodAndBeverages) {
    this.organicFoodAndBeverages = organicFoodAndBeverages;
  }


  public SustainableSourcing organicFoodAndBeveragesException(OrganicFoodAndBeveragesExceptionEnum organicFoodAndBeveragesException) {
    this.organicFoodAndBeveragesException = organicFoodAndBeveragesException;
    return this;
  }

  /**
   * Organic food and beverages exception.
   * @return organicFoodAndBeveragesException
   */
  @javax.annotation.Nullable
  public OrganicFoodAndBeveragesExceptionEnum getOrganicFoodAndBeveragesException() {
    return organicFoodAndBeveragesException;
  }

  public void setOrganicFoodAndBeveragesException(OrganicFoodAndBeveragesExceptionEnum organicFoodAndBeveragesException) {
    this.organicFoodAndBeveragesException = organicFoodAndBeveragesException;
  }


  public SustainableSourcing responsiblePurchasingPolicy(Boolean responsiblePurchasingPolicy) {
    this.responsiblePurchasingPolicy = responsiblePurchasingPolicy;
    return this;
  }

  /**
   * Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.
   * @return responsiblePurchasingPolicy
   */
  @javax.annotation.Nullable
  public Boolean getResponsiblePurchasingPolicy() {
    return responsiblePurchasingPolicy;
  }

  public void setResponsiblePurchasingPolicy(Boolean responsiblePurchasingPolicy) {
    this.responsiblePurchasingPolicy = responsiblePurchasingPolicy;
  }


  public SustainableSourcing responsiblePurchasingPolicyException(ResponsiblePurchasingPolicyExceptionEnum responsiblePurchasingPolicyException) {
    this.responsiblePurchasingPolicyException = responsiblePurchasingPolicyException;
    return this;
  }

  /**
   * Responsible purchasing policy exception.
   * @return responsiblePurchasingPolicyException
   */
  @javax.annotation.Nullable
  public ResponsiblePurchasingPolicyExceptionEnum getResponsiblePurchasingPolicyException() {
    return responsiblePurchasingPolicyException;
  }

  public void setResponsiblePurchasingPolicyException(ResponsiblePurchasingPolicyExceptionEnum responsiblePurchasingPolicyException) {
    this.responsiblePurchasingPolicyException = responsiblePurchasingPolicyException;
  }


  public SustainableSourcing responsiblySourcesSeafood(Boolean responsiblySourcesSeafood) {
    this.responsiblySourcesSeafood = responsiblySourcesSeafood;
    return this;
  }

  /**
   * Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch \&quot;avoid\&quot; list, and must sustainably source seafood listed as \&quot;good alternative,\&quot; \&quot;eco-certified,\&quot; and \&quot;best choice\&quot;. The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.
   * @return responsiblySourcesSeafood
   */
  @javax.annotation.Nullable
  public Boolean getResponsiblySourcesSeafood() {
    return responsiblySourcesSeafood;
  }

  public void setResponsiblySourcesSeafood(Boolean responsiblySourcesSeafood) {
    this.responsiblySourcesSeafood = responsiblySourcesSeafood;
  }


  public SustainableSourcing responsiblySourcesSeafoodException(ResponsiblySourcesSeafoodExceptionEnum responsiblySourcesSeafoodException) {
    this.responsiblySourcesSeafoodException = responsiblySourcesSeafoodException;
    return this;
  }

  /**
   * Responsibly sources seafood exception.
   * @return responsiblySourcesSeafoodException
   */
  @javax.annotation.Nullable
  public ResponsiblySourcesSeafoodExceptionEnum getResponsiblySourcesSeafoodException() {
    return responsiblySourcesSeafoodException;
  }

  public void setResponsiblySourcesSeafoodException(ResponsiblySourcesSeafoodExceptionEnum responsiblySourcesSeafoodException) {
    this.responsiblySourcesSeafoodException = responsiblySourcesSeafoodException;
  }


  public SustainableSourcing veganMeals(Boolean veganMeals) {
    this.veganMeals = veganMeals;
    return this;
  }

  /**
   * Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.
   * @return veganMeals
   */
  @javax.annotation.Nullable
  public Boolean getVeganMeals() {
    return veganMeals;
  }

  public void setVeganMeals(Boolean veganMeals) {
    this.veganMeals = veganMeals;
  }


  public SustainableSourcing veganMealsException(VeganMealsExceptionEnum veganMealsException) {
    this.veganMealsException = veganMealsException;
    return this;
  }

  /**
   * Vegan meals exception.
   * @return veganMealsException
   */
  @javax.annotation.Nullable
  public VeganMealsExceptionEnum getVeganMealsException() {
    return veganMealsException;
  }

  public void setVeganMealsException(VeganMealsExceptionEnum veganMealsException) {
    this.veganMealsException = veganMealsException;
  }


  public SustainableSourcing vegetarianMeals(Boolean vegetarianMeals) {
    this.vegetarianMeals = vegetarianMeals;
    return this;
  }

  /**
   * Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.
   * @return vegetarianMeals
   */
  @javax.annotation.Nullable
  public Boolean getVegetarianMeals() {
    return vegetarianMeals;
  }

  public void setVegetarianMeals(Boolean vegetarianMeals) {
    this.vegetarianMeals = vegetarianMeals;
  }


  public SustainableSourcing vegetarianMealsException(VegetarianMealsExceptionEnum vegetarianMealsException) {
    this.vegetarianMealsException = vegetarianMealsException;
    return this;
  }

  /**
   * Vegetarian meals exception.
   * @return vegetarianMealsException
   */
  @javax.annotation.Nullable
  public VegetarianMealsExceptionEnum getVegetarianMealsException() {
    return vegetarianMealsException;
  }

  public void setVegetarianMealsException(VegetarianMealsExceptionEnum vegetarianMealsException) {
    this.vegetarianMealsException = vegetarianMealsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SustainableSourcing sustainableSourcing = (SustainableSourcing) o;
    return Objects.equals(this.ecoFriendlyToiletries, sustainableSourcing.ecoFriendlyToiletries) &&
        Objects.equals(this.ecoFriendlyToiletriesException, sustainableSourcing.ecoFriendlyToiletriesException) &&
        Objects.equals(this.locallySourcedFoodAndBeverages, sustainableSourcing.locallySourcedFoodAndBeverages) &&
        Objects.equals(this.locallySourcedFoodAndBeveragesException, sustainableSourcing.locallySourcedFoodAndBeveragesException) &&
        Objects.equals(this.organicCageFreeEggs, sustainableSourcing.organicCageFreeEggs) &&
        Objects.equals(this.organicCageFreeEggsException, sustainableSourcing.organicCageFreeEggsException) &&
        Objects.equals(this.organicFoodAndBeverages, sustainableSourcing.organicFoodAndBeverages) &&
        Objects.equals(this.organicFoodAndBeveragesException, sustainableSourcing.organicFoodAndBeveragesException) &&
        Objects.equals(this.responsiblePurchasingPolicy, sustainableSourcing.responsiblePurchasingPolicy) &&
        Objects.equals(this.responsiblePurchasingPolicyException, sustainableSourcing.responsiblePurchasingPolicyException) &&
        Objects.equals(this.responsiblySourcesSeafood, sustainableSourcing.responsiblySourcesSeafood) &&
        Objects.equals(this.responsiblySourcesSeafoodException, sustainableSourcing.responsiblySourcesSeafoodException) &&
        Objects.equals(this.veganMeals, sustainableSourcing.veganMeals) &&
        Objects.equals(this.veganMealsException, sustainableSourcing.veganMealsException) &&
        Objects.equals(this.vegetarianMeals, sustainableSourcing.vegetarianMeals) &&
        Objects.equals(this.vegetarianMealsException, sustainableSourcing.vegetarianMealsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ecoFriendlyToiletries, ecoFriendlyToiletriesException, locallySourcedFoodAndBeverages, locallySourcedFoodAndBeveragesException, organicCageFreeEggs, organicCageFreeEggsException, organicFoodAndBeverages, organicFoodAndBeveragesException, responsiblePurchasingPolicy, responsiblePurchasingPolicyException, responsiblySourcesSeafood, responsiblySourcesSeafoodException, veganMeals, veganMealsException, vegetarianMeals, vegetarianMealsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SustainableSourcing {\n");
    sb.append("    ecoFriendlyToiletries: ").append(toIndentedString(ecoFriendlyToiletries)).append("\n");
    sb.append("    ecoFriendlyToiletriesException: ").append(toIndentedString(ecoFriendlyToiletriesException)).append("\n");
    sb.append("    locallySourcedFoodAndBeverages: ").append(toIndentedString(locallySourcedFoodAndBeverages)).append("\n");
    sb.append("    locallySourcedFoodAndBeveragesException: ").append(toIndentedString(locallySourcedFoodAndBeveragesException)).append("\n");
    sb.append("    organicCageFreeEggs: ").append(toIndentedString(organicCageFreeEggs)).append("\n");
    sb.append("    organicCageFreeEggsException: ").append(toIndentedString(organicCageFreeEggsException)).append("\n");
    sb.append("    organicFoodAndBeverages: ").append(toIndentedString(organicFoodAndBeverages)).append("\n");
    sb.append("    organicFoodAndBeveragesException: ").append(toIndentedString(organicFoodAndBeveragesException)).append("\n");
    sb.append("    responsiblePurchasingPolicy: ").append(toIndentedString(responsiblePurchasingPolicy)).append("\n");
    sb.append("    responsiblePurchasingPolicyException: ").append(toIndentedString(responsiblePurchasingPolicyException)).append("\n");
    sb.append("    responsiblySourcesSeafood: ").append(toIndentedString(responsiblySourcesSeafood)).append("\n");
    sb.append("    responsiblySourcesSeafoodException: ").append(toIndentedString(responsiblySourcesSeafoodException)).append("\n");
    sb.append("    veganMeals: ").append(toIndentedString(veganMeals)).append("\n");
    sb.append("    veganMealsException: ").append(toIndentedString(veganMealsException)).append("\n");
    sb.append("    vegetarianMeals: ").append(toIndentedString(vegetarianMeals)).append("\n");
    sb.append("    vegetarianMealsException: ").append(toIndentedString(vegetarianMealsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ecoFriendlyToiletries");
    openapiFields.add("ecoFriendlyToiletriesException");
    openapiFields.add("locallySourcedFoodAndBeverages");
    openapiFields.add("locallySourcedFoodAndBeveragesException");
    openapiFields.add("organicCageFreeEggs");
    openapiFields.add("organicCageFreeEggsException");
    openapiFields.add("organicFoodAndBeverages");
    openapiFields.add("organicFoodAndBeveragesException");
    openapiFields.add("responsiblePurchasingPolicy");
    openapiFields.add("responsiblePurchasingPolicyException");
    openapiFields.add("responsiblySourcesSeafood");
    openapiFields.add("responsiblySourcesSeafoodException");
    openapiFields.add("veganMeals");
    openapiFields.add("veganMealsException");
    openapiFields.add("vegetarianMeals");
    openapiFields.add("vegetarianMealsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SustainableSourcing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SustainableSourcing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SustainableSourcing is not found in the empty JSON string", SustainableSourcing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SustainableSourcing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SustainableSourcing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ecoFriendlyToiletriesException") != null && !jsonObj.get("ecoFriendlyToiletriesException").isJsonNull()) && !jsonObj.get("ecoFriendlyToiletriesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ecoFriendlyToiletriesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ecoFriendlyToiletriesException").toString()));
      }
      // validate the optional field `ecoFriendlyToiletriesException`
      if (jsonObj.get("ecoFriendlyToiletriesException") != null && !jsonObj.get("ecoFriendlyToiletriesException").isJsonNull()) {
        EcoFriendlyToiletriesExceptionEnum.validateJsonElement(jsonObj.get("ecoFriendlyToiletriesException"));
      }
      if ((jsonObj.get("locallySourcedFoodAndBeveragesException") != null && !jsonObj.get("locallySourcedFoodAndBeveragesException").isJsonNull()) && !jsonObj.get("locallySourcedFoodAndBeveragesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locallySourcedFoodAndBeveragesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locallySourcedFoodAndBeveragesException").toString()));
      }
      // validate the optional field `locallySourcedFoodAndBeveragesException`
      if (jsonObj.get("locallySourcedFoodAndBeveragesException") != null && !jsonObj.get("locallySourcedFoodAndBeveragesException").isJsonNull()) {
        LocallySourcedFoodAndBeveragesExceptionEnum.validateJsonElement(jsonObj.get("locallySourcedFoodAndBeveragesException"));
      }
      if ((jsonObj.get("organicCageFreeEggsException") != null && !jsonObj.get("organicCageFreeEggsException").isJsonNull()) && !jsonObj.get("organicCageFreeEggsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organicCageFreeEggsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organicCageFreeEggsException").toString()));
      }
      // validate the optional field `organicCageFreeEggsException`
      if (jsonObj.get("organicCageFreeEggsException") != null && !jsonObj.get("organicCageFreeEggsException").isJsonNull()) {
        OrganicCageFreeEggsExceptionEnum.validateJsonElement(jsonObj.get("organicCageFreeEggsException"));
      }
      if ((jsonObj.get("organicFoodAndBeveragesException") != null && !jsonObj.get("organicFoodAndBeveragesException").isJsonNull()) && !jsonObj.get("organicFoodAndBeveragesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organicFoodAndBeveragesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organicFoodAndBeveragesException").toString()));
      }
      // validate the optional field `organicFoodAndBeveragesException`
      if (jsonObj.get("organicFoodAndBeveragesException") != null && !jsonObj.get("organicFoodAndBeveragesException").isJsonNull()) {
        OrganicFoodAndBeveragesExceptionEnum.validateJsonElement(jsonObj.get("organicFoodAndBeveragesException"));
      }
      if ((jsonObj.get("responsiblePurchasingPolicyException") != null && !jsonObj.get("responsiblePurchasingPolicyException").isJsonNull()) && !jsonObj.get("responsiblePurchasingPolicyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsiblePurchasingPolicyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsiblePurchasingPolicyException").toString()));
      }
      // validate the optional field `responsiblePurchasingPolicyException`
      if (jsonObj.get("responsiblePurchasingPolicyException") != null && !jsonObj.get("responsiblePurchasingPolicyException").isJsonNull()) {
        ResponsiblePurchasingPolicyExceptionEnum.validateJsonElement(jsonObj.get("responsiblePurchasingPolicyException"));
      }
      if ((jsonObj.get("responsiblySourcesSeafoodException") != null && !jsonObj.get("responsiblySourcesSeafoodException").isJsonNull()) && !jsonObj.get("responsiblySourcesSeafoodException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsiblySourcesSeafoodException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsiblySourcesSeafoodException").toString()));
      }
      // validate the optional field `responsiblySourcesSeafoodException`
      if (jsonObj.get("responsiblySourcesSeafoodException") != null && !jsonObj.get("responsiblySourcesSeafoodException").isJsonNull()) {
        ResponsiblySourcesSeafoodExceptionEnum.validateJsonElement(jsonObj.get("responsiblySourcesSeafoodException"));
      }
      if ((jsonObj.get("veganMealsException") != null && !jsonObj.get("veganMealsException").isJsonNull()) && !jsonObj.get("veganMealsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `veganMealsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("veganMealsException").toString()));
      }
      // validate the optional field `veganMealsException`
      if (jsonObj.get("veganMealsException") != null && !jsonObj.get("veganMealsException").isJsonNull()) {
        VeganMealsExceptionEnum.validateJsonElement(jsonObj.get("veganMealsException"));
      }
      if ((jsonObj.get("vegetarianMealsException") != null && !jsonObj.get("vegetarianMealsException").isJsonNull()) && !jsonObj.get("vegetarianMealsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vegetarianMealsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vegetarianMealsException").toString()));
      }
      // validate the optional field `vegetarianMealsException`
      if (jsonObj.get("vegetarianMealsException") != null && !jsonObj.get("vegetarianMealsException").isJsonNull()) {
        VegetarianMealsExceptionEnum.validateJsonElement(jsonObj.get("vegetarianMealsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SustainableSourcing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SustainableSourcing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SustainableSourcing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SustainableSourcing.class));

       return (TypeAdapter<T>) new TypeAdapter<SustainableSourcing>() {
           @Override
           public void write(JsonWriter out, SustainableSourcing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SustainableSourcing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SustainableSourcing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SustainableSourcing
   * @throws IOException if the JSON string is invalid with respect to SustainableSourcing
   */
  public static SustainableSourcing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SustainableSourcing.class);
  }

  /**
   * Convert an instance of SustainableSourcing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

