/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vehicles or vehicular services facilitated or owned by the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transportation {
  public static final String SERIALIZED_NAME_AIRPORT_SHUTTLE = "airportShuttle";
  @SerializedName(SERIALIZED_NAME_AIRPORT_SHUTTLE)
  private Boolean airportShuttle;

  /**
   * Airport shuttle exception.
   */
  @JsonAdapter(AirportShuttleExceptionEnum.Adapter.class)
  public enum AirportShuttleExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AirportShuttleExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AirportShuttleExceptionEnum fromValue(String value) {
      for (AirportShuttleExceptionEnum b : AirportShuttleExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AirportShuttleExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AirportShuttleExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AirportShuttleExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AirportShuttleExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AirportShuttleExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AIRPORT_SHUTTLE_EXCEPTION = "airportShuttleException";
  @SerializedName(SERIALIZED_NAME_AIRPORT_SHUTTLE_EXCEPTION)
  private AirportShuttleExceptionEnum airportShuttleException;

  public static final String SERIALIZED_NAME_CAR_RENTAL_ON_PROPERTY = "carRentalOnProperty";
  @SerializedName(SERIALIZED_NAME_CAR_RENTAL_ON_PROPERTY)
  private Boolean carRentalOnProperty;

  /**
   * Car rental on property exception.
   */
  @JsonAdapter(CarRentalOnPropertyExceptionEnum.Adapter.class)
  public enum CarRentalOnPropertyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CarRentalOnPropertyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarRentalOnPropertyExceptionEnum fromValue(String value) {
      for (CarRentalOnPropertyExceptionEnum b : CarRentalOnPropertyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarRentalOnPropertyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarRentalOnPropertyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarRentalOnPropertyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarRentalOnPropertyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CarRentalOnPropertyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAR_RENTAL_ON_PROPERTY_EXCEPTION = "carRentalOnPropertyException";
  @SerializedName(SERIALIZED_NAME_CAR_RENTAL_ON_PROPERTY_EXCEPTION)
  private CarRentalOnPropertyExceptionEnum carRentalOnPropertyException;

  public static final String SERIALIZED_NAME_FREE_AIRPORT_SHUTTLE = "freeAirportShuttle";
  @SerializedName(SERIALIZED_NAME_FREE_AIRPORT_SHUTTLE)
  private Boolean freeAirportShuttle;

  /**
   * Free airport shuttle exception.
   */
  @JsonAdapter(FreeAirportShuttleExceptionEnum.Adapter.class)
  public enum FreeAirportShuttleExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeAirportShuttleExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeAirportShuttleExceptionEnum fromValue(String value) {
      for (FreeAirportShuttleExceptionEnum b : FreeAirportShuttleExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeAirportShuttleExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeAirportShuttleExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeAirportShuttleExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeAirportShuttleExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeAirportShuttleExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_AIRPORT_SHUTTLE_EXCEPTION = "freeAirportShuttleException";
  @SerializedName(SERIALIZED_NAME_FREE_AIRPORT_SHUTTLE_EXCEPTION)
  private FreeAirportShuttleExceptionEnum freeAirportShuttleException;

  public static final String SERIALIZED_NAME_FREE_PRIVATE_CAR_SERVICE = "freePrivateCarService";
  @SerializedName(SERIALIZED_NAME_FREE_PRIVATE_CAR_SERVICE)
  private Boolean freePrivateCarService;

  /**
   * Free private car service exception.
   */
  @JsonAdapter(FreePrivateCarServiceExceptionEnum.Adapter.class)
  public enum FreePrivateCarServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreePrivateCarServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreePrivateCarServiceExceptionEnum fromValue(String value) {
      for (FreePrivateCarServiceExceptionEnum b : FreePrivateCarServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreePrivateCarServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreePrivateCarServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreePrivateCarServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreePrivateCarServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreePrivateCarServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_PRIVATE_CAR_SERVICE_EXCEPTION = "freePrivateCarServiceException";
  @SerializedName(SERIALIZED_NAME_FREE_PRIVATE_CAR_SERVICE_EXCEPTION)
  private FreePrivateCarServiceExceptionEnum freePrivateCarServiceException;

  public static final String SERIALIZED_NAME_LOCAL_SHUTTLE = "localShuttle";
  @SerializedName(SERIALIZED_NAME_LOCAL_SHUTTLE)
  private Boolean localShuttle;

  /**
   * Local shuttle exception.
   */
  @JsonAdapter(LocalShuttleExceptionEnum.Adapter.class)
  public enum LocalShuttleExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LocalShuttleExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocalShuttleExceptionEnum fromValue(String value) {
      for (LocalShuttleExceptionEnum b : LocalShuttleExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocalShuttleExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocalShuttleExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocalShuttleExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocalShuttleExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocalShuttleExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCAL_SHUTTLE_EXCEPTION = "localShuttleException";
  @SerializedName(SERIALIZED_NAME_LOCAL_SHUTTLE_EXCEPTION)
  private LocalShuttleExceptionEnum localShuttleException;

  public static final String SERIALIZED_NAME_PRIVATE_CAR_SERVICE = "privateCarService";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CAR_SERVICE)
  private Boolean privateCarService;

  /**
   * Private car service exception.
   */
  @JsonAdapter(PrivateCarServiceExceptionEnum.Adapter.class)
  public enum PrivateCarServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PrivateCarServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateCarServiceExceptionEnum fromValue(String value) {
      for (PrivateCarServiceExceptionEnum b : PrivateCarServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateCarServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateCarServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateCarServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateCarServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateCarServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_CAR_SERVICE_EXCEPTION = "privateCarServiceException";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CAR_SERVICE_EXCEPTION)
  private PrivateCarServiceExceptionEnum privateCarServiceException;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private Boolean transfer;

  /**
   * Transfer exception.
   */
  @JsonAdapter(TransferExceptionEnum.Adapter.class)
  public enum TransferExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TransferExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferExceptionEnum fromValue(String value) {
      for (TransferExceptionEnum b : TransferExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_EXCEPTION = "transferException";
  @SerializedName(SERIALIZED_NAME_TRANSFER_EXCEPTION)
  private TransferExceptionEnum transferException;

  public Transportation() {
  }

  public Transportation airportShuttle(Boolean airportShuttle) {
    this.airportShuttle = airportShuttle;
    return this;
  }

  /**
   * Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn&#39;t matter if it&#39;s directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.
   * @return airportShuttle
   */
  @javax.annotation.Nullable
  public Boolean getAirportShuttle() {
    return airportShuttle;
  }

  public void setAirportShuttle(Boolean airportShuttle) {
    this.airportShuttle = airportShuttle;
  }


  public Transportation airportShuttleException(AirportShuttleExceptionEnum airportShuttleException) {
    this.airportShuttleException = airportShuttleException;
    return this;
  }

  /**
   * Airport shuttle exception.
   * @return airportShuttleException
   */
  @javax.annotation.Nullable
  public AirportShuttleExceptionEnum getAirportShuttleException() {
    return airportShuttleException;
  }

  public void setAirportShuttleException(AirportShuttleExceptionEnum airportShuttleException) {
    this.airportShuttleException = airportShuttleException;
  }


  public Transportation carRentalOnProperty(Boolean carRentalOnProperty) {
    this.carRentalOnProperty = carRentalOnProperty;
    return this;
  }

  /**
   * Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.
   * @return carRentalOnProperty
   */
  @javax.annotation.Nullable
  public Boolean getCarRentalOnProperty() {
    return carRentalOnProperty;
  }

  public void setCarRentalOnProperty(Boolean carRentalOnProperty) {
    this.carRentalOnProperty = carRentalOnProperty;
  }


  public Transportation carRentalOnPropertyException(CarRentalOnPropertyExceptionEnum carRentalOnPropertyException) {
    this.carRentalOnPropertyException = carRentalOnPropertyException;
    return this;
  }

  /**
   * Car rental on property exception.
   * @return carRentalOnPropertyException
   */
  @javax.annotation.Nullable
  public CarRentalOnPropertyExceptionEnum getCarRentalOnPropertyException() {
    return carRentalOnPropertyException;
  }

  public void setCarRentalOnPropertyException(CarRentalOnPropertyExceptionEnum carRentalOnPropertyException) {
    this.carRentalOnPropertyException = carRentalOnPropertyException;
  }


  public Transportation freeAirportShuttle(Boolean freeAirportShuttle) {
    this.freeAirportShuttle = freeAirportShuttle;
    return this;
  }

  /**
   * Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.
   * @return freeAirportShuttle
   */
  @javax.annotation.Nullable
  public Boolean getFreeAirportShuttle() {
    return freeAirportShuttle;
  }

  public void setFreeAirportShuttle(Boolean freeAirportShuttle) {
    this.freeAirportShuttle = freeAirportShuttle;
  }


  public Transportation freeAirportShuttleException(FreeAirportShuttleExceptionEnum freeAirportShuttleException) {
    this.freeAirportShuttleException = freeAirportShuttleException;
    return this;
  }

  /**
   * Free airport shuttle exception.
   * @return freeAirportShuttleException
   */
  @javax.annotation.Nullable
  public FreeAirportShuttleExceptionEnum getFreeAirportShuttleException() {
    return freeAirportShuttleException;
  }

  public void setFreeAirportShuttleException(FreeAirportShuttleExceptionEnum freeAirportShuttleException) {
    this.freeAirportShuttleException = freeAirportShuttleException;
  }


  public Transportation freePrivateCarService(Boolean freePrivateCarService) {
    this.freePrivateCarService = freePrivateCarService;
    return this;
  }

  /**
   * Free private car service. Private chauffeured car service is free to guests.
   * @return freePrivateCarService
   */
  @javax.annotation.Nullable
  public Boolean getFreePrivateCarService() {
    return freePrivateCarService;
  }

  public void setFreePrivateCarService(Boolean freePrivateCarService) {
    this.freePrivateCarService = freePrivateCarService;
  }


  public Transportation freePrivateCarServiceException(FreePrivateCarServiceExceptionEnum freePrivateCarServiceException) {
    this.freePrivateCarServiceException = freePrivateCarServiceException;
    return this;
  }

  /**
   * Free private car service exception.
   * @return freePrivateCarServiceException
   */
  @javax.annotation.Nullable
  public FreePrivateCarServiceExceptionEnum getFreePrivateCarServiceException() {
    return freePrivateCarServiceException;
  }

  public void setFreePrivateCarServiceException(FreePrivateCarServiceExceptionEnum freePrivateCarServiceException) {
    this.freePrivateCarServiceException = freePrivateCarServiceException;
  }


  public Transportation localShuttle(Boolean localShuttle) {
    this.localShuttle = localShuttle;
    return this;
  }

  /**
   * Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.
   * @return localShuttle
   */
  @javax.annotation.Nullable
  public Boolean getLocalShuttle() {
    return localShuttle;
  }

  public void setLocalShuttle(Boolean localShuttle) {
    this.localShuttle = localShuttle;
  }


  public Transportation localShuttleException(LocalShuttleExceptionEnum localShuttleException) {
    this.localShuttleException = localShuttleException;
    return this;
  }

  /**
   * Local shuttle exception.
   * @return localShuttleException
   */
  @javax.annotation.Nullable
  public LocalShuttleExceptionEnum getLocalShuttleException() {
    return localShuttleException;
  }

  public void setLocalShuttleException(LocalShuttleExceptionEnum localShuttleException) {
    this.localShuttleException = localShuttleException;
  }


  public Transportation privateCarService(Boolean privateCarService) {
    this.privateCarService = privateCarService;
    return this;
  }

  /**
   * Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.
   * @return privateCarService
   */
  @javax.annotation.Nullable
  public Boolean getPrivateCarService() {
    return privateCarService;
  }

  public void setPrivateCarService(Boolean privateCarService) {
    this.privateCarService = privateCarService;
  }


  public Transportation privateCarServiceException(PrivateCarServiceExceptionEnum privateCarServiceException) {
    this.privateCarServiceException = privateCarServiceException;
    return this;
  }

  /**
   * Private car service exception.
   * @return privateCarServiceException
   */
  @javax.annotation.Nullable
  public PrivateCarServiceExceptionEnum getPrivateCarServiceException() {
    return privateCarServiceException;
  }

  public void setPrivateCarServiceException(PrivateCarServiceExceptionEnum privateCarServiceException) {
    this.privateCarServiceException = privateCarServiceException;
  }


  public Transportation transfer(Boolean transfer) {
    this.transfer = transfer;
    return this;
  }

  /**
   * Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.
   * @return transfer
   */
  @javax.annotation.Nullable
  public Boolean getTransfer() {
    return transfer;
  }

  public void setTransfer(Boolean transfer) {
    this.transfer = transfer;
  }


  public Transportation transferException(TransferExceptionEnum transferException) {
    this.transferException = transferException;
    return this;
  }

  /**
   * Transfer exception.
   * @return transferException
   */
  @javax.annotation.Nullable
  public TransferExceptionEnum getTransferException() {
    return transferException;
  }

  public void setTransferException(TransferExceptionEnum transferException) {
    this.transferException = transferException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transportation transportation = (Transportation) o;
    return Objects.equals(this.airportShuttle, transportation.airportShuttle) &&
        Objects.equals(this.airportShuttleException, transportation.airportShuttleException) &&
        Objects.equals(this.carRentalOnProperty, transportation.carRentalOnProperty) &&
        Objects.equals(this.carRentalOnPropertyException, transportation.carRentalOnPropertyException) &&
        Objects.equals(this.freeAirportShuttle, transportation.freeAirportShuttle) &&
        Objects.equals(this.freeAirportShuttleException, transportation.freeAirportShuttleException) &&
        Objects.equals(this.freePrivateCarService, transportation.freePrivateCarService) &&
        Objects.equals(this.freePrivateCarServiceException, transportation.freePrivateCarServiceException) &&
        Objects.equals(this.localShuttle, transportation.localShuttle) &&
        Objects.equals(this.localShuttleException, transportation.localShuttleException) &&
        Objects.equals(this.privateCarService, transportation.privateCarService) &&
        Objects.equals(this.privateCarServiceException, transportation.privateCarServiceException) &&
        Objects.equals(this.transfer, transportation.transfer) &&
        Objects.equals(this.transferException, transportation.transferException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airportShuttle, airportShuttleException, carRentalOnProperty, carRentalOnPropertyException, freeAirportShuttle, freeAirportShuttleException, freePrivateCarService, freePrivateCarServiceException, localShuttle, localShuttleException, privateCarService, privateCarServiceException, transfer, transferException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transportation {\n");
    sb.append("    airportShuttle: ").append(toIndentedString(airportShuttle)).append("\n");
    sb.append("    airportShuttleException: ").append(toIndentedString(airportShuttleException)).append("\n");
    sb.append("    carRentalOnProperty: ").append(toIndentedString(carRentalOnProperty)).append("\n");
    sb.append("    carRentalOnPropertyException: ").append(toIndentedString(carRentalOnPropertyException)).append("\n");
    sb.append("    freeAirportShuttle: ").append(toIndentedString(freeAirportShuttle)).append("\n");
    sb.append("    freeAirportShuttleException: ").append(toIndentedString(freeAirportShuttleException)).append("\n");
    sb.append("    freePrivateCarService: ").append(toIndentedString(freePrivateCarService)).append("\n");
    sb.append("    freePrivateCarServiceException: ").append(toIndentedString(freePrivateCarServiceException)).append("\n");
    sb.append("    localShuttle: ").append(toIndentedString(localShuttle)).append("\n");
    sb.append("    localShuttleException: ").append(toIndentedString(localShuttleException)).append("\n");
    sb.append("    privateCarService: ").append(toIndentedString(privateCarService)).append("\n");
    sb.append("    privateCarServiceException: ").append(toIndentedString(privateCarServiceException)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("    transferException: ").append(toIndentedString(transferException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airportShuttle");
    openapiFields.add("airportShuttleException");
    openapiFields.add("carRentalOnProperty");
    openapiFields.add("carRentalOnPropertyException");
    openapiFields.add("freeAirportShuttle");
    openapiFields.add("freeAirportShuttleException");
    openapiFields.add("freePrivateCarService");
    openapiFields.add("freePrivateCarServiceException");
    openapiFields.add("localShuttle");
    openapiFields.add("localShuttleException");
    openapiFields.add("privateCarService");
    openapiFields.add("privateCarServiceException");
    openapiFields.add("transfer");
    openapiFields.add("transferException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transportation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transportation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transportation is not found in the empty JSON string", Transportation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transportation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transportation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("airportShuttleException") != null && !jsonObj.get("airportShuttleException").isJsonNull()) && !jsonObj.get("airportShuttleException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airportShuttleException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airportShuttleException").toString()));
      }
      // validate the optional field `airportShuttleException`
      if (jsonObj.get("airportShuttleException") != null && !jsonObj.get("airportShuttleException").isJsonNull()) {
        AirportShuttleExceptionEnum.validateJsonElement(jsonObj.get("airportShuttleException"));
      }
      if ((jsonObj.get("carRentalOnPropertyException") != null && !jsonObj.get("carRentalOnPropertyException").isJsonNull()) && !jsonObj.get("carRentalOnPropertyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carRentalOnPropertyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carRentalOnPropertyException").toString()));
      }
      // validate the optional field `carRentalOnPropertyException`
      if (jsonObj.get("carRentalOnPropertyException") != null && !jsonObj.get("carRentalOnPropertyException").isJsonNull()) {
        CarRentalOnPropertyExceptionEnum.validateJsonElement(jsonObj.get("carRentalOnPropertyException"));
      }
      if ((jsonObj.get("freeAirportShuttleException") != null && !jsonObj.get("freeAirportShuttleException").isJsonNull()) && !jsonObj.get("freeAirportShuttleException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeAirportShuttleException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeAirportShuttleException").toString()));
      }
      // validate the optional field `freeAirportShuttleException`
      if (jsonObj.get("freeAirportShuttleException") != null && !jsonObj.get("freeAirportShuttleException").isJsonNull()) {
        FreeAirportShuttleExceptionEnum.validateJsonElement(jsonObj.get("freeAirportShuttleException"));
      }
      if ((jsonObj.get("freePrivateCarServiceException") != null && !jsonObj.get("freePrivateCarServiceException").isJsonNull()) && !jsonObj.get("freePrivateCarServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freePrivateCarServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freePrivateCarServiceException").toString()));
      }
      // validate the optional field `freePrivateCarServiceException`
      if (jsonObj.get("freePrivateCarServiceException") != null && !jsonObj.get("freePrivateCarServiceException").isJsonNull()) {
        FreePrivateCarServiceExceptionEnum.validateJsonElement(jsonObj.get("freePrivateCarServiceException"));
      }
      if ((jsonObj.get("localShuttleException") != null && !jsonObj.get("localShuttleException").isJsonNull()) && !jsonObj.get("localShuttleException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localShuttleException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localShuttleException").toString()));
      }
      // validate the optional field `localShuttleException`
      if (jsonObj.get("localShuttleException") != null && !jsonObj.get("localShuttleException").isJsonNull()) {
        LocalShuttleExceptionEnum.validateJsonElement(jsonObj.get("localShuttleException"));
      }
      if ((jsonObj.get("privateCarServiceException") != null && !jsonObj.get("privateCarServiceException").isJsonNull()) && !jsonObj.get("privateCarServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCarServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCarServiceException").toString()));
      }
      // validate the optional field `privateCarServiceException`
      if (jsonObj.get("privateCarServiceException") != null && !jsonObj.get("privateCarServiceException").isJsonNull()) {
        PrivateCarServiceExceptionEnum.validateJsonElement(jsonObj.get("privateCarServiceException"));
      }
      if ((jsonObj.get("transferException") != null && !jsonObj.get("transferException").isJsonNull()) && !jsonObj.get("transferException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferException").toString()));
      }
      // validate the optional field `transferException`
      if (jsonObj.get("transferException") != null && !jsonObj.get("transferException").isJsonNull()) {
        TransferExceptionEnum.validateJsonElement(jsonObj.get("transferException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transportation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transportation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transportation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transportation.class));

       return (TypeAdapter<T>) new TypeAdapter<Transportation>() {
           @Override
           public void write(JsonWriter out, Transportation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transportation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transportation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transportation
   * @throws IOException if the JSON string is invalid with respect to Transportation
   */
  public static Transportation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transportation.class);
  }

  /**
   * Convert an instance of Transportation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

