/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnergyEfficiency;
import org.openapitools.client.model.SustainabilityCertifications;
import org.openapitools.client.model.SustainableSourcing;
import org.openapitools.client.model.WasteReduction;
import org.openapitools.client.model.WaterConservation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sustainability practices implemented at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sustainability {
  public static final String SERIALIZED_NAME_ENERGY_EFFICIENCY = "energyEfficiency";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENCY)
  private EnergyEfficiency energyEfficiency;

  public static final String SERIALIZED_NAME_SUSTAINABILITY_CERTIFICATIONS = "sustainabilityCertifications";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SUSTAINABILITY_CERTIFICATIONS)
  private SustainabilityCertifications sustainabilityCertifications;

  public static final String SERIALIZED_NAME_SUSTAINABLE_SOURCING = "sustainableSourcing";
  @SerializedName(SERIALIZED_NAME_SUSTAINABLE_SOURCING)
  private SustainableSourcing sustainableSourcing;

  public static final String SERIALIZED_NAME_WASTE_REDUCTION = "wasteReduction";
  @SerializedName(SERIALIZED_NAME_WASTE_REDUCTION)
  private WasteReduction wasteReduction;

  public static final String SERIALIZED_NAME_WATER_CONSERVATION = "waterConservation";
  @SerializedName(SERIALIZED_NAME_WATER_CONSERVATION)
  private WaterConservation waterConservation;

  public Sustainability() {
  }

  public Sustainability energyEfficiency(EnergyEfficiency energyEfficiency) {
    this.energyEfficiency = energyEfficiency;
    return this;
  }

  /**
   * Get energyEfficiency
   * @return energyEfficiency
   */
  @javax.annotation.Nullable
  public EnergyEfficiency getEnergyEfficiency() {
    return energyEfficiency;
  }

  public void setEnergyEfficiency(EnergyEfficiency energyEfficiency) {
    this.energyEfficiency = energyEfficiency;
  }


  @Deprecated
  public Sustainability sustainabilityCertifications(SustainabilityCertifications sustainabilityCertifications) {
    this.sustainabilityCertifications = sustainabilityCertifications;
    return this;
  }

  /**
   * Get sustainabilityCertifications
   * @return sustainabilityCertifications
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public SustainabilityCertifications getSustainabilityCertifications() {
    return sustainabilityCertifications;
  }

  @Deprecated
  public void setSustainabilityCertifications(SustainabilityCertifications sustainabilityCertifications) {
    this.sustainabilityCertifications = sustainabilityCertifications;
  }


  public Sustainability sustainableSourcing(SustainableSourcing sustainableSourcing) {
    this.sustainableSourcing = sustainableSourcing;
    return this;
  }

  /**
   * Get sustainableSourcing
   * @return sustainableSourcing
   */
  @javax.annotation.Nullable
  public SustainableSourcing getSustainableSourcing() {
    return sustainableSourcing;
  }

  public void setSustainableSourcing(SustainableSourcing sustainableSourcing) {
    this.sustainableSourcing = sustainableSourcing;
  }


  public Sustainability wasteReduction(WasteReduction wasteReduction) {
    this.wasteReduction = wasteReduction;
    return this;
  }

  /**
   * Get wasteReduction
   * @return wasteReduction
   */
  @javax.annotation.Nullable
  public WasteReduction getWasteReduction() {
    return wasteReduction;
  }

  public void setWasteReduction(WasteReduction wasteReduction) {
    this.wasteReduction = wasteReduction;
  }


  public Sustainability waterConservation(WaterConservation waterConservation) {
    this.waterConservation = waterConservation;
    return this;
  }

  /**
   * Get waterConservation
   * @return waterConservation
   */
  @javax.annotation.Nullable
  public WaterConservation getWaterConservation() {
    return waterConservation;
  }

  public void setWaterConservation(WaterConservation waterConservation) {
    this.waterConservation = waterConservation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sustainability sustainability = (Sustainability) o;
    return Objects.equals(this.energyEfficiency, sustainability.energyEfficiency) &&
        Objects.equals(this.sustainabilityCertifications, sustainability.sustainabilityCertifications) &&
        Objects.equals(this.sustainableSourcing, sustainability.sustainableSourcing) &&
        Objects.equals(this.wasteReduction, sustainability.wasteReduction) &&
        Objects.equals(this.waterConservation, sustainability.waterConservation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(energyEfficiency, sustainabilityCertifications, sustainableSourcing, wasteReduction, waterConservation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sustainability {\n");
    sb.append("    energyEfficiency: ").append(toIndentedString(energyEfficiency)).append("\n");
    sb.append("    sustainabilityCertifications: ").append(toIndentedString(sustainabilityCertifications)).append("\n");
    sb.append("    sustainableSourcing: ").append(toIndentedString(sustainableSourcing)).append("\n");
    sb.append("    wasteReduction: ").append(toIndentedString(wasteReduction)).append("\n");
    sb.append("    waterConservation: ").append(toIndentedString(waterConservation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("energyEfficiency");
    openapiFields.add("sustainabilityCertifications");
    openapiFields.add("sustainableSourcing");
    openapiFields.add("wasteReduction");
    openapiFields.add("waterConservation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sustainability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sustainability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sustainability is not found in the empty JSON string", Sustainability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sustainability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sustainability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `energyEfficiency`
      if (jsonObj.get("energyEfficiency") != null && !jsonObj.get("energyEfficiency").isJsonNull()) {
        EnergyEfficiency.validateJsonElement(jsonObj.get("energyEfficiency"));
      }
      // validate the optional field `sustainabilityCertifications`
      if (jsonObj.get("sustainabilityCertifications") != null && !jsonObj.get("sustainabilityCertifications").isJsonNull()) {
        SustainabilityCertifications.validateJsonElement(jsonObj.get("sustainabilityCertifications"));
      }
      // validate the optional field `sustainableSourcing`
      if (jsonObj.get("sustainableSourcing") != null && !jsonObj.get("sustainableSourcing").isJsonNull()) {
        SustainableSourcing.validateJsonElement(jsonObj.get("sustainableSourcing"));
      }
      // validate the optional field `wasteReduction`
      if (jsonObj.get("wasteReduction") != null && !jsonObj.get("wasteReduction").isJsonNull()) {
        WasteReduction.validateJsonElement(jsonObj.get("wasteReduction"));
      }
      // validate the optional field `waterConservation`
      if (jsonObj.get("waterConservation") != null && !jsonObj.get("waterConservation").isJsonNull()) {
        WaterConservation.validateJsonElement(jsonObj.get("waterConservation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sustainability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sustainability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sustainability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sustainability.class));

       return (TypeAdapter<T>) new TypeAdapter<Sustainability>() {
           @Override
           public void write(JsonWriter out, Sustainability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sustainability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sustainability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sustainability
   * @throws IOException if the JSON string is invalid with respect to Sustainability
   */
  public static Sustainability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sustainability.class);
  }

  /**
   * Convert an instance of Sustainability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

