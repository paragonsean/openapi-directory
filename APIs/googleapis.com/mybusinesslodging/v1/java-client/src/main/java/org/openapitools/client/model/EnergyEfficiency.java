/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Energy efficiency practices implemented at the hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnergyEfficiency {
  public static final String SERIALIZED_NAME_CARBON_FREE_ENERGY_SOURCES = "carbonFreeEnergySources";
  @SerializedName(SERIALIZED_NAME_CARBON_FREE_ENERGY_SOURCES)
  private Boolean carbonFreeEnergySources;

  /**
   * Carbon free energy sources exception.
   */
  @JsonAdapter(CarbonFreeEnergySourcesExceptionEnum.Adapter.class)
  public enum CarbonFreeEnergySourcesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CarbonFreeEnergySourcesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarbonFreeEnergySourcesExceptionEnum fromValue(String value) {
      for (CarbonFreeEnergySourcesExceptionEnum b : CarbonFreeEnergySourcesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarbonFreeEnergySourcesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarbonFreeEnergySourcesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarbonFreeEnergySourcesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarbonFreeEnergySourcesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CarbonFreeEnergySourcesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARBON_FREE_ENERGY_SOURCES_EXCEPTION = "carbonFreeEnergySourcesException";
  @SerializedName(SERIALIZED_NAME_CARBON_FREE_ENERGY_SOURCES_EXCEPTION)
  private CarbonFreeEnergySourcesExceptionEnum carbonFreeEnergySourcesException;

  public static final String SERIALIZED_NAME_ENERGY_CONSERVATION_PROGRAM = "energyConservationProgram";
  @SerializedName(SERIALIZED_NAME_ENERGY_CONSERVATION_PROGRAM)
  private Boolean energyConservationProgram;

  /**
   * Energy conservation program exception.
   */
  @JsonAdapter(EnergyConservationProgramExceptionEnum.Adapter.class)
  public enum EnergyConservationProgramExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EnergyConservationProgramExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnergyConservationProgramExceptionEnum fromValue(String value) {
      for (EnergyConservationProgramExceptionEnum b : EnergyConservationProgramExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnergyConservationProgramExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnergyConservationProgramExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnergyConservationProgramExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnergyConservationProgramExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnergyConservationProgramExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENERGY_CONSERVATION_PROGRAM_EXCEPTION = "energyConservationProgramException";
  @SerializedName(SERIALIZED_NAME_ENERGY_CONSERVATION_PROGRAM_EXCEPTION)
  private EnergyConservationProgramExceptionEnum energyConservationProgramException;

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENT_HEATING_AND_COOLING_SYSTEMS = "energyEfficientHeatingAndCoolingSystems";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENT_HEATING_AND_COOLING_SYSTEMS)
  private Boolean energyEfficientHeatingAndCoolingSystems;

  /**
   * Energy efficient heating and cooling systems exception.
   */
  @JsonAdapter(EnergyEfficientHeatingAndCoolingSystemsExceptionEnum.Adapter.class)
  public enum EnergyEfficientHeatingAndCoolingSystemsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EnergyEfficientHeatingAndCoolingSystemsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnergyEfficientHeatingAndCoolingSystemsExceptionEnum fromValue(String value) {
      for (EnergyEfficientHeatingAndCoolingSystemsExceptionEnum b : EnergyEfficientHeatingAndCoolingSystemsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnergyEfficientHeatingAndCoolingSystemsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnergyEfficientHeatingAndCoolingSystemsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnergyEfficientHeatingAndCoolingSystemsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnergyEfficientHeatingAndCoolingSystemsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnergyEfficientHeatingAndCoolingSystemsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENT_HEATING_AND_COOLING_SYSTEMS_EXCEPTION = "energyEfficientHeatingAndCoolingSystemsException";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENT_HEATING_AND_COOLING_SYSTEMS_EXCEPTION)
  private EnergyEfficientHeatingAndCoolingSystemsExceptionEnum energyEfficientHeatingAndCoolingSystemsException;

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENT_LIGHTING = "energyEfficientLighting";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENT_LIGHTING)
  private Boolean energyEfficientLighting;

  /**
   * Energy efficient lighting exception.
   */
  @JsonAdapter(EnergyEfficientLightingExceptionEnum.Adapter.class)
  public enum EnergyEfficientLightingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EnergyEfficientLightingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnergyEfficientLightingExceptionEnum fromValue(String value) {
      for (EnergyEfficientLightingExceptionEnum b : EnergyEfficientLightingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnergyEfficientLightingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnergyEfficientLightingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnergyEfficientLightingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnergyEfficientLightingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnergyEfficientLightingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENERGY_EFFICIENT_LIGHTING_EXCEPTION = "energyEfficientLightingException";
  @SerializedName(SERIALIZED_NAME_ENERGY_EFFICIENT_LIGHTING_EXCEPTION)
  private EnergyEfficientLightingExceptionEnum energyEfficientLightingException;

  public static final String SERIALIZED_NAME_ENERGY_SAVING_THERMOSTATS = "energySavingThermostats";
  @SerializedName(SERIALIZED_NAME_ENERGY_SAVING_THERMOSTATS)
  private Boolean energySavingThermostats;

  /**
   * Energy saving thermostats exception.
   */
  @JsonAdapter(EnergySavingThermostatsExceptionEnum.Adapter.class)
  public enum EnergySavingThermostatsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EnergySavingThermostatsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnergySavingThermostatsExceptionEnum fromValue(String value) {
      for (EnergySavingThermostatsExceptionEnum b : EnergySavingThermostatsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnergySavingThermostatsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnergySavingThermostatsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnergySavingThermostatsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnergySavingThermostatsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnergySavingThermostatsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENERGY_SAVING_THERMOSTATS_EXCEPTION = "energySavingThermostatsException";
  @SerializedName(SERIALIZED_NAME_ENERGY_SAVING_THERMOSTATS_EXCEPTION)
  private EnergySavingThermostatsExceptionEnum energySavingThermostatsException;

  public static final String SERIALIZED_NAME_GREEN_BUILDING_DESIGN = "greenBuildingDesign";
  @SerializedName(SERIALIZED_NAME_GREEN_BUILDING_DESIGN)
  private Boolean greenBuildingDesign;

  /**
   * Output only. Green building design exception.
   */
  @JsonAdapter(GreenBuildingDesignExceptionEnum.Adapter.class)
  public enum GreenBuildingDesignExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GreenBuildingDesignExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GreenBuildingDesignExceptionEnum fromValue(String value) {
      for (GreenBuildingDesignExceptionEnum b : GreenBuildingDesignExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GreenBuildingDesignExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GreenBuildingDesignExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GreenBuildingDesignExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GreenBuildingDesignExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GreenBuildingDesignExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GREEN_BUILDING_DESIGN_EXCEPTION = "greenBuildingDesignException";
  @SerializedName(SERIALIZED_NAME_GREEN_BUILDING_DESIGN_EXCEPTION)
  private GreenBuildingDesignExceptionEnum greenBuildingDesignException;

  public static final String SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_ENERGY_USE = "independentOrganizationAuditsEnergyUse";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_ENERGY_USE)
  private Boolean independentOrganizationAuditsEnergyUse;

  /**
   * Independent organization audits energy use exception.
   */
  @JsonAdapter(IndependentOrganizationAuditsEnergyUseExceptionEnum.Adapter.class)
  public enum IndependentOrganizationAuditsEnergyUseExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndependentOrganizationAuditsEnergyUseExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndependentOrganizationAuditsEnergyUseExceptionEnum fromValue(String value) {
      for (IndependentOrganizationAuditsEnergyUseExceptionEnum b : IndependentOrganizationAuditsEnergyUseExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndependentOrganizationAuditsEnergyUseExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndependentOrganizationAuditsEnergyUseExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndependentOrganizationAuditsEnergyUseExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndependentOrganizationAuditsEnergyUseExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndependentOrganizationAuditsEnergyUseExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_ENERGY_USE_EXCEPTION = "independentOrganizationAuditsEnergyUseException";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_ORGANIZATION_AUDITS_ENERGY_USE_EXCEPTION)
  private IndependentOrganizationAuditsEnergyUseExceptionEnum independentOrganizationAuditsEnergyUseException;

  public EnergyEfficiency() {
  }

  public EnergyEfficiency(
     Boolean greenBuildingDesign, 
     GreenBuildingDesignExceptionEnum greenBuildingDesignException
  ) {
    this();
    this.greenBuildingDesign = greenBuildingDesign;
    this.greenBuildingDesignException = greenBuildingDesignException;
  }

  public EnergyEfficiency carbonFreeEnergySources(Boolean carbonFreeEnergySources) {
    this.carbonFreeEnergySources = carbonFreeEnergySources;
    return this;
  }

  /**
   * Carbon free energy sources. Property sources carbon-free electricity via at least one of the following methods: on-site clean energy generation, power purchase agreement(s) with clean energy generators, green power provided by electricity supplier, or purchases of Energy Attribute Certificates (such as Renewable Energy Certificates or Guarantees of Origin).
   * @return carbonFreeEnergySources
   */
  @javax.annotation.Nullable
  public Boolean getCarbonFreeEnergySources() {
    return carbonFreeEnergySources;
  }

  public void setCarbonFreeEnergySources(Boolean carbonFreeEnergySources) {
    this.carbonFreeEnergySources = carbonFreeEnergySources;
  }


  public EnergyEfficiency carbonFreeEnergySourcesException(CarbonFreeEnergySourcesExceptionEnum carbonFreeEnergySourcesException) {
    this.carbonFreeEnergySourcesException = carbonFreeEnergySourcesException;
    return this;
  }

  /**
   * Carbon free energy sources exception.
   * @return carbonFreeEnergySourcesException
   */
  @javax.annotation.Nullable
  public CarbonFreeEnergySourcesExceptionEnum getCarbonFreeEnergySourcesException() {
    return carbonFreeEnergySourcesException;
  }

  public void setCarbonFreeEnergySourcesException(CarbonFreeEnergySourcesExceptionEnum carbonFreeEnergySourcesException) {
    this.carbonFreeEnergySourcesException = carbonFreeEnergySourcesException;
  }


  public EnergyEfficiency energyConservationProgram(Boolean energyConservationProgram) {
    this.energyConservationProgram = energyConservationProgram;
    return this;
  }

  /**
   * Energy conservation program. The property tracks corporate-level Scope 1 and 2 GHG emissions, and Scope 3 emissions if available. The property has a commitment to implement initiatives that reduce GHG emissions year over year. The property has shown an absolute reduction in emissions for at least 2 years. Emissions are either verfied by a third-party and/or published in external communications.
   * @return energyConservationProgram
   */
  @javax.annotation.Nullable
  public Boolean getEnergyConservationProgram() {
    return energyConservationProgram;
  }

  public void setEnergyConservationProgram(Boolean energyConservationProgram) {
    this.energyConservationProgram = energyConservationProgram;
  }


  public EnergyEfficiency energyConservationProgramException(EnergyConservationProgramExceptionEnum energyConservationProgramException) {
    this.energyConservationProgramException = energyConservationProgramException;
    return this;
  }

  /**
   * Energy conservation program exception.
   * @return energyConservationProgramException
   */
  @javax.annotation.Nullable
  public EnergyConservationProgramExceptionEnum getEnergyConservationProgramException() {
    return energyConservationProgramException;
  }

  public void setEnergyConservationProgramException(EnergyConservationProgramExceptionEnum energyConservationProgramException) {
    this.energyConservationProgramException = energyConservationProgramException;
  }


  public EnergyEfficiency energyEfficientHeatingAndCoolingSystems(Boolean energyEfficientHeatingAndCoolingSystems) {
    this.energyEfficientHeatingAndCoolingSystems = energyEfficientHeatingAndCoolingSystems;
    return this;
  }

  /**
   * Energy efficient heating and cooling systems. The property doesn&#39;t use chlorofluorocarbon (CFC)-based refrigerants in heating, ventilating, and air-conditioning systems unless a third-party audit shows it&#39;s not economically feasible. The CFC-based refrigerants which are used should have a Global Warming Potential (GWP) ≤ 10. The property uses occupancy sensors on HVAC systems in back-of-house spaces, meeting rooms, and other low-traffic areas.
   * @return energyEfficientHeatingAndCoolingSystems
   */
  @javax.annotation.Nullable
  public Boolean getEnergyEfficientHeatingAndCoolingSystems() {
    return energyEfficientHeatingAndCoolingSystems;
  }

  public void setEnergyEfficientHeatingAndCoolingSystems(Boolean energyEfficientHeatingAndCoolingSystems) {
    this.energyEfficientHeatingAndCoolingSystems = energyEfficientHeatingAndCoolingSystems;
  }


  public EnergyEfficiency energyEfficientHeatingAndCoolingSystemsException(EnergyEfficientHeatingAndCoolingSystemsExceptionEnum energyEfficientHeatingAndCoolingSystemsException) {
    this.energyEfficientHeatingAndCoolingSystemsException = energyEfficientHeatingAndCoolingSystemsException;
    return this;
  }

  /**
   * Energy efficient heating and cooling systems exception.
   * @return energyEfficientHeatingAndCoolingSystemsException
   */
  @javax.annotation.Nullable
  public EnergyEfficientHeatingAndCoolingSystemsExceptionEnum getEnergyEfficientHeatingAndCoolingSystemsException() {
    return energyEfficientHeatingAndCoolingSystemsException;
  }

  public void setEnergyEfficientHeatingAndCoolingSystemsException(EnergyEfficientHeatingAndCoolingSystemsExceptionEnum energyEfficientHeatingAndCoolingSystemsException) {
    this.energyEfficientHeatingAndCoolingSystemsException = energyEfficientHeatingAndCoolingSystemsException;
  }


  public EnergyEfficiency energyEfficientLighting(Boolean energyEfficientLighting) {
    this.energyEfficientLighting = energyEfficientLighting;
    return this;
  }

  /**
   * Energy efficient lighting. At least 75% of the property&#39;s lighting is energy efficient, using lighting that is more than 45 lumens per watt – typically LED or CFL lightbulbs.
   * @return energyEfficientLighting
   */
  @javax.annotation.Nullable
  public Boolean getEnergyEfficientLighting() {
    return energyEfficientLighting;
  }

  public void setEnergyEfficientLighting(Boolean energyEfficientLighting) {
    this.energyEfficientLighting = energyEfficientLighting;
  }


  public EnergyEfficiency energyEfficientLightingException(EnergyEfficientLightingExceptionEnum energyEfficientLightingException) {
    this.energyEfficientLightingException = energyEfficientLightingException;
    return this;
  }

  /**
   * Energy efficient lighting exception.
   * @return energyEfficientLightingException
   */
  @javax.annotation.Nullable
  public EnergyEfficientLightingExceptionEnum getEnergyEfficientLightingException() {
    return energyEfficientLightingException;
  }

  public void setEnergyEfficientLightingException(EnergyEfficientLightingExceptionEnum energyEfficientLightingException) {
    this.energyEfficientLightingException = energyEfficientLightingException;
  }


  public EnergyEfficiency energySavingThermostats(Boolean energySavingThermostats) {
    this.energySavingThermostats = energySavingThermostats;
    return this;
  }

  /**
   * Energy saving thermostats. The property installed energy-saving thermostats throughout the building to conserve energy when rooms or areas are not in use. Energy-saving thermostats are devices that control heating/cooling in the building by learning temperature preferences and automatically adjusting to energy-saving temperatures as the default. The thermostats are automatically set to a temperature between 68-78 degrees F (20-26 °C), depending on seasonality. In the winter, set the thermostat to 68°F (20°C) when the room is occupied, lowering room temperature when unoccupied. In the summer, set the thermostat to 78°F (26°C) when the room is occupied.
   * @return energySavingThermostats
   */
  @javax.annotation.Nullable
  public Boolean getEnergySavingThermostats() {
    return energySavingThermostats;
  }

  public void setEnergySavingThermostats(Boolean energySavingThermostats) {
    this.energySavingThermostats = energySavingThermostats;
  }


  public EnergyEfficiency energySavingThermostatsException(EnergySavingThermostatsExceptionEnum energySavingThermostatsException) {
    this.energySavingThermostatsException = energySavingThermostatsException;
    return this;
  }

  /**
   * Energy saving thermostats exception.
   * @return energySavingThermostatsException
   */
  @javax.annotation.Nullable
  public EnergySavingThermostatsExceptionEnum getEnergySavingThermostatsException() {
    return energySavingThermostatsException;
  }

  public void setEnergySavingThermostatsException(EnergySavingThermostatsExceptionEnum energySavingThermostatsException) {
    this.energySavingThermostatsException = energySavingThermostatsException;
  }


  /**
   * Output only. Green building design. True if the property has been awarded a relevant certification.
   * @return greenBuildingDesign
   */
  @javax.annotation.Nullable
  public Boolean getGreenBuildingDesign() {
    return greenBuildingDesign;
  }



  /**
   * Output only. Green building design exception.
   * @return greenBuildingDesignException
   */
  @javax.annotation.Nullable
  public GreenBuildingDesignExceptionEnum getGreenBuildingDesignException() {
    return greenBuildingDesignException;
  }



  public EnergyEfficiency independentOrganizationAuditsEnergyUse(Boolean independentOrganizationAuditsEnergyUse) {
    this.independentOrganizationAuditsEnergyUse = independentOrganizationAuditsEnergyUse;
    return this;
  }

  /**
   * Independent organization audits energy use. The property conducts an energy audit at least every 5 years, the results of which are either verified by a third-party and/or published in external communications. An energy audit is a detailed assessment of the facility which provides recommendations to existing operations and procedures to improve energy efficiency, available incentives or rebates,and opportunities for improvements through renovations or upgrades. Examples of organizations that conduct credible third party audits include: Engie Impact, DNV GL (EU), Dexma, and local utility providers (they often provide energy and water audits).
   * @return independentOrganizationAuditsEnergyUse
   */
  @javax.annotation.Nullable
  public Boolean getIndependentOrganizationAuditsEnergyUse() {
    return independentOrganizationAuditsEnergyUse;
  }

  public void setIndependentOrganizationAuditsEnergyUse(Boolean independentOrganizationAuditsEnergyUse) {
    this.independentOrganizationAuditsEnergyUse = independentOrganizationAuditsEnergyUse;
  }


  public EnergyEfficiency independentOrganizationAuditsEnergyUseException(IndependentOrganizationAuditsEnergyUseExceptionEnum independentOrganizationAuditsEnergyUseException) {
    this.independentOrganizationAuditsEnergyUseException = independentOrganizationAuditsEnergyUseException;
    return this;
  }

  /**
   * Independent organization audits energy use exception.
   * @return independentOrganizationAuditsEnergyUseException
   */
  @javax.annotation.Nullable
  public IndependentOrganizationAuditsEnergyUseExceptionEnum getIndependentOrganizationAuditsEnergyUseException() {
    return independentOrganizationAuditsEnergyUseException;
  }

  public void setIndependentOrganizationAuditsEnergyUseException(IndependentOrganizationAuditsEnergyUseExceptionEnum independentOrganizationAuditsEnergyUseException) {
    this.independentOrganizationAuditsEnergyUseException = independentOrganizationAuditsEnergyUseException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnergyEfficiency energyEfficiency = (EnergyEfficiency) o;
    return Objects.equals(this.carbonFreeEnergySources, energyEfficiency.carbonFreeEnergySources) &&
        Objects.equals(this.carbonFreeEnergySourcesException, energyEfficiency.carbonFreeEnergySourcesException) &&
        Objects.equals(this.energyConservationProgram, energyEfficiency.energyConservationProgram) &&
        Objects.equals(this.energyConservationProgramException, energyEfficiency.energyConservationProgramException) &&
        Objects.equals(this.energyEfficientHeatingAndCoolingSystems, energyEfficiency.energyEfficientHeatingAndCoolingSystems) &&
        Objects.equals(this.energyEfficientHeatingAndCoolingSystemsException, energyEfficiency.energyEfficientHeatingAndCoolingSystemsException) &&
        Objects.equals(this.energyEfficientLighting, energyEfficiency.energyEfficientLighting) &&
        Objects.equals(this.energyEfficientLightingException, energyEfficiency.energyEfficientLightingException) &&
        Objects.equals(this.energySavingThermostats, energyEfficiency.energySavingThermostats) &&
        Objects.equals(this.energySavingThermostatsException, energyEfficiency.energySavingThermostatsException) &&
        Objects.equals(this.greenBuildingDesign, energyEfficiency.greenBuildingDesign) &&
        Objects.equals(this.greenBuildingDesignException, energyEfficiency.greenBuildingDesignException) &&
        Objects.equals(this.independentOrganizationAuditsEnergyUse, energyEfficiency.independentOrganizationAuditsEnergyUse) &&
        Objects.equals(this.independentOrganizationAuditsEnergyUseException, energyEfficiency.independentOrganizationAuditsEnergyUseException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carbonFreeEnergySources, carbonFreeEnergySourcesException, energyConservationProgram, energyConservationProgramException, energyEfficientHeatingAndCoolingSystems, energyEfficientHeatingAndCoolingSystemsException, energyEfficientLighting, energyEfficientLightingException, energySavingThermostats, energySavingThermostatsException, greenBuildingDesign, greenBuildingDesignException, independentOrganizationAuditsEnergyUse, independentOrganizationAuditsEnergyUseException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnergyEfficiency {\n");
    sb.append("    carbonFreeEnergySources: ").append(toIndentedString(carbonFreeEnergySources)).append("\n");
    sb.append("    carbonFreeEnergySourcesException: ").append(toIndentedString(carbonFreeEnergySourcesException)).append("\n");
    sb.append("    energyConservationProgram: ").append(toIndentedString(energyConservationProgram)).append("\n");
    sb.append("    energyConservationProgramException: ").append(toIndentedString(energyConservationProgramException)).append("\n");
    sb.append("    energyEfficientHeatingAndCoolingSystems: ").append(toIndentedString(energyEfficientHeatingAndCoolingSystems)).append("\n");
    sb.append("    energyEfficientHeatingAndCoolingSystemsException: ").append(toIndentedString(energyEfficientHeatingAndCoolingSystemsException)).append("\n");
    sb.append("    energyEfficientLighting: ").append(toIndentedString(energyEfficientLighting)).append("\n");
    sb.append("    energyEfficientLightingException: ").append(toIndentedString(energyEfficientLightingException)).append("\n");
    sb.append("    energySavingThermostats: ").append(toIndentedString(energySavingThermostats)).append("\n");
    sb.append("    energySavingThermostatsException: ").append(toIndentedString(energySavingThermostatsException)).append("\n");
    sb.append("    greenBuildingDesign: ").append(toIndentedString(greenBuildingDesign)).append("\n");
    sb.append("    greenBuildingDesignException: ").append(toIndentedString(greenBuildingDesignException)).append("\n");
    sb.append("    independentOrganizationAuditsEnergyUse: ").append(toIndentedString(independentOrganizationAuditsEnergyUse)).append("\n");
    sb.append("    independentOrganizationAuditsEnergyUseException: ").append(toIndentedString(independentOrganizationAuditsEnergyUseException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carbonFreeEnergySources");
    openapiFields.add("carbonFreeEnergySourcesException");
    openapiFields.add("energyConservationProgram");
    openapiFields.add("energyConservationProgramException");
    openapiFields.add("energyEfficientHeatingAndCoolingSystems");
    openapiFields.add("energyEfficientHeatingAndCoolingSystemsException");
    openapiFields.add("energyEfficientLighting");
    openapiFields.add("energyEfficientLightingException");
    openapiFields.add("energySavingThermostats");
    openapiFields.add("energySavingThermostatsException");
    openapiFields.add("greenBuildingDesign");
    openapiFields.add("greenBuildingDesignException");
    openapiFields.add("independentOrganizationAuditsEnergyUse");
    openapiFields.add("independentOrganizationAuditsEnergyUseException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnergyEfficiency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnergyEfficiency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnergyEfficiency is not found in the empty JSON string", EnergyEfficiency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnergyEfficiency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnergyEfficiency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carbonFreeEnergySourcesException") != null && !jsonObj.get("carbonFreeEnergySourcesException").isJsonNull()) && !jsonObj.get("carbonFreeEnergySourcesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carbonFreeEnergySourcesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carbonFreeEnergySourcesException").toString()));
      }
      // validate the optional field `carbonFreeEnergySourcesException`
      if (jsonObj.get("carbonFreeEnergySourcesException") != null && !jsonObj.get("carbonFreeEnergySourcesException").isJsonNull()) {
        CarbonFreeEnergySourcesExceptionEnum.validateJsonElement(jsonObj.get("carbonFreeEnergySourcesException"));
      }
      if ((jsonObj.get("energyConservationProgramException") != null && !jsonObj.get("energyConservationProgramException").isJsonNull()) && !jsonObj.get("energyConservationProgramException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyConservationProgramException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyConservationProgramException").toString()));
      }
      // validate the optional field `energyConservationProgramException`
      if (jsonObj.get("energyConservationProgramException") != null && !jsonObj.get("energyConservationProgramException").isJsonNull()) {
        EnergyConservationProgramExceptionEnum.validateJsonElement(jsonObj.get("energyConservationProgramException"));
      }
      if ((jsonObj.get("energyEfficientHeatingAndCoolingSystemsException") != null && !jsonObj.get("energyEfficientHeatingAndCoolingSystemsException").isJsonNull()) && !jsonObj.get("energyEfficientHeatingAndCoolingSystemsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyEfficientHeatingAndCoolingSystemsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyEfficientHeatingAndCoolingSystemsException").toString()));
      }
      // validate the optional field `energyEfficientHeatingAndCoolingSystemsException`
      if (jsonObj.get("energyEfficientHeatingAndCoolingSystemsException") != null && !jsonObj.get("energyEfficientHeatingAndCoolingSystemsException").isJsonNull()) {
        EnergyEfficientHeatingAndCoolingSystemsExceptionEnum.validateJsonElement(jsonObj.get("energyEfficientHeatingAndCoolingSystemsException"));
      }
      if ((jsonObj.get("energyEfficientLightingException") != null && !jsonObj.get("energyEfficientLightingException").isJsonNull()) && !jsonObj.get("energyEfficientLightingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energyEfficientLightingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energyEfficientLightingException").toString()));
      }
      // validate the optional field `energyEfficientLightingException`
      if (jsonObj.get("energyEfficientLightingException") != null && !jsonObj.get("energyEfficientLightingException").isJsonNull()) {
        EnergyEfficientLightingExceptionEnum.validateJsonElement(jsonObj.get("energyEfficientLightingException"));
      }
      if ((jsonObj.get("energySavingThermostatsException") != null && !jsonObj.get("energySavingThermostatsException").isJsonNull()) && !jsonObj.get("energySavingThermostatsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `energySavingThermostatsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("energySavingThermostatsException").toString()));
      }
      // validate the optional field `energySavingThermostatsException`
      if (jsonObj.get("energySavingThermostatsException") != null && !jsonObj.get("energySavingThermostatsException").isJsonNull()) {
        EnergySavingThermostatsExceptionEnum.validateJsonElement(jsonObj.get("energySavingThermostatsException"));
      }
      if ((jsonObj.get("greenBuildingDesignException") != null && !jsonObj.get("greenBuildingDesignException").isJsonNull()) && !jsonObj.get("greenBuildingDesignException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greenBuildingDesignException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greenBuildingDesignException").toString()));
      }
      // validate the optional field `greenBuildingDesignException`
      if (jsonObj.get("greenBuildingDesignException") != null && !jsonObj.get("greenBuildingDesignException").isJsonNull()) {
        GreenBuildingDesignExceptionEnum.validateJsonElement(jsonObj.get("greenBuildingDesignException"));
      }
      if ((jsonObj.get("independentOrganizationAuditsEnergyUseException") != null && !jsonObj.get("independentOrganizationAuditsEnergyUseException").isJsonNull()) && !jsonObj.get("independentOrganizationAuditsEnergyUseException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `independentOrganizationAuditsEnergyUseException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("independentOrganizationAuditsEnergyUseException").toString()));
      }
      // validate the optional field `independentOrganizationAuditsEnergyUseException`
      if (jsonObj.get("independentOrganizationAuditsEnergyUseException") != null && !jsonObj.get("independentOrganizationAuditsEnergyUseException").isJsonNull()) {
        IndependentOrganizationAuditsEnergyUseExceptionEnum.validateJsonElement(jsonObj.get("independentOrganizationAuditsEnergyUseException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnergyEfficiency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnergyEfficiency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnergyEfficiency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnergyEfficiency.class));

       return (TypeAdapter<T>) new TypeAdapter<EnergyEfficiency>() {
           @Override
           public void write(JsonWriter out, EnergyEfficiency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnergyEfficiency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnergyEfficiency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnergyEfficiency
   * @throws IOException if the JSON string is invalid with respect to EnergyEfficiency
   */
  public static EnergyEfficiency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnergyEfficiency.class);
  }

  /**
   * Convert an instance of EnergyEfficiency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

