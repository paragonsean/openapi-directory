/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Features of the property of specific interest to the business traveler.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Business {
  public static final String SERIALIZED_NAME_BUSINESS_CENTER = "businessCenter";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CENTER)
  private Boolean businessCenter;

  /**
   * Business center exception.
   */
  @JsonAdapter(BusinessCenterExceptionEnum.Adapter.class)
  public enum BusinessCenterExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BusinessCenterExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessCenterExceptionEnum fromValue(String value) {
      for (BusinessCenterExceptionEnum b : BusinessCenterExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessCenterExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessCenterExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessCenterExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessCenterExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BusinessCenterExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_CENTER_EXCEPTION = "businessCenterException";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CENTER_EXCEPTION)
  private BusinessCenterExceptionEnum businessCenterException;

  public static final String SERIALIZED_NAME_MEETING_ROOMS = "meetingRooms";
  @SerializedName(SERIALIZED_NAME_MEETING_ROOMS)
  private Boolean meetingRooms;

  public static final String SERIALIZED_NAME_MEETING_ROOMS_COUNT = "meetingRoomsCount";
  @SerializedName(SERIALIZED_NAME_MEETING_ROOMS_COUNT)
  private Integer meetingRoomsCount;

  /**
   * Meeting rooms count exception.
   */
  @JsonAdapter(MeetingRoomsCountExceptionEnum.Adapter.class)
  public enum MeetingRoomsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MeetingRoomsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeetingRoomsCountExceptionEnum fromValue(String value) {
      for (MeetingRoomsCountExceptionEnum b : MeetingRoomsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeetingRoomsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeetingRoomsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeetingRoomsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeetingRoomsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeetingRoomsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEETING_ROOMS_COUNT_EXCEPTION = "meetingRoomsCountException";
  @SerializedName(SERIALIZED_NAME_MEETING_ROOMS_COUNT_EXCEPTION)
  private MeetingRoomsCountExceptionEnum meetingRoomsCountException;

  /**
   * Meeting rooms exception.
   */
  @JsonAdapter(MeetingRoomsExceptionEnum.Adapter.class)
  public enum MeetingRoomsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MeetingRoomsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeetingRoomsExceptionEnum fromValue(String value) {
      for (MeetingRoomsExceptionEnum b : MeetingRoomsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeetingRoomsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeetingRoomsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeetingRoomsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeetingRoomsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeetingRoomsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEETING_ROOMS_EXCEPTION = "meetingRoomsException";
  @SerializedName(SERIALIZED_NAME_MEETING_ROOMS_EXCEPTION)
  private MeetingRoomsExceptionEnum meetingRoomsException;

  public Business() {
  }

  public Business businessCenter(Boolean businessCenter) {
    this.businessCenter = businessCenter;
    return this;
  }

  /**
   * Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.
   * @return businessCenter
   */
  @javax.annotation.Nullable
  public Boolean getBusinessCenter() {
    return businessCenter;
  }

  public void setBusinessCenter(Boolean businessCenter) {
    this.businessCenter = businessCenter;
  }


  public Business businessCenterException(BusinessCenterExceptionEnum businessCenterException) {
    this.businessCenterException = businessCenterException;
    return this;
  }

  /**
   * Business center exception.
   * @return businessCenterException
   */
  @javax.annotation.Nullable
  public BusinessCenterExceptionEnum getBusinessCenterException() {
    return businessCenterException;
  }

  public void setBusinessCenterException(BusinessCenterExceptionEnum businessCenterException) {
    this.businessCenterException = businessCenterException;
  }


  public Business meetingRooms(Boolean meetingRooms) {
    this.meetingRooms = meetingRooms;
    return this;
  }

  /**
   * Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.
   * @return meetingRooms
   */
  @javax.annotation.Nullable
  public Boolean getMeetingRooms() {
    return meetingRooms;
  }

  public void setMeetingRooms(Boolean meetingRooms) {
    this.meetingRooms = meetingRooms;
  }


  public Business meetingRoomsCount(Integer meetingRoomsCount) {
    this.meetingRoomsCount = meetingRoomsCount;
    return this;
  }

  /**
   * Meeting rooms count. The number of meeting rooms at the property.
   * @return meetingRoomsCount
   */
  @javax.annotation.Nullable
  public Integer getMeetingRoomsCount() {
    return meetingRoomsCount;
  }

  public void setMeetingRoomsCount(Integer meetingRoomsCount) {
    this.meetingRoomsCount = meetingRoomsCount;
  }


  public Business meetingRoomsCountException(MeetingRoomsCountExceptionEnum meetingRoomsCountException) {
    this.meetingRoomsCountException = meetingRoomsCountException;
    return this;
  }

  /**
   * Meeting rooms count exception.
   * @return meetingRoomsCountException
   */
  @javax.annotation.Nullable
  public MeetingRoomsCountExceptionEnum getMeetingRoomsCountException() {
    return meetingRoomsCountException;
  }

  public void setMeetingRoomsCountException(MeetingRoomsCountExceptionEnum meetingRoomsCountException) {
    this.meetingRoomsCountException = meetingRoomsCountException;
  }


  public Business meetingRoomsException(MeetingRoomsExceptionEnum meetingRoomsException) {
    this.meetingRoomsException = meetingRoomsException;
    return this;
  }

  /**
   * Meeting rooms exception.
   * @return meetingRoomsException
   */
  @javax.annotation.Nullable
  public MeetingRoomsExceptionEnum getMeetingRoomsException() {
    return meetingRoomsException;
  }

  public void setMeetingRoomsException(MeetingRoomsExceptionEnum meetingRoomsException) {
    this.meetingRoomsException = meetingRoomsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Business business = (Business) o;
    return Objects.equals(this.businessCenter, business.businessCenter) &&
        Objects.equals(this.businessCenterException, business.businessCenterException) &&
        Objects.equals(this.meetingRooms, business.meetingRooms) &&
        Objects.equals(this.meetingRoomsCount, business.meetingRoomsCount) &&
        Objects.equals(this.meetingRoomsCountException, business.meetingRoomsCountException) &&
        Objects.equals(this.meetingRoomsException, business.meetingRoomsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessCenter, businessCenterException, meetingRooms, meetingRoomsCount, meetingRoomsCountException, meetingRoomsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Business {\n");
    sb.append("    businessCenter: ").append(toIndentedString(businessCenter)).append("\n");
    sb.append("    businessCenterException: ").append(toIndentedString(businessCenterException)).append("\n");
    sb.append("    meetingRooms: ").append(toIndentedString(meetingRooms)).append("\n");
    sb.append("    meetingRoomsCount: ").append(toIndentedString(meetingRoomsCount)).append("\n");
    sb.append("    meetingRoomsCountException: ").append(toIndentedString(meetingRoomsCountException)).append("\n");
    sb.append("    meetingRoomsException: ").append(toIndentedString(meetingRoomsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessCenter");
    openapiFields.add("businessCenterException");
    openapiFields.add("meetingRooms");
    openapiFields.add("meetingRoomsCount");
    openapiFields.add("meetingRoomsCountException");
    openapiFields.add("meetingRoomsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Business
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Business.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Business is not found in the empty JSON string", Business.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Business.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Business` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessCenterException") != null && !jsonObj.get("businessCenterException").isJsonNull()) && !jsonObj.get("businessCenterException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessCenterException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessCenterException").toString()));
      }
      // validate the optional field `businessCenterException`
      if (jsonObj.get("businessCenterException") != null && !jsonObj.get("businessCenterException").isJsonNull()) {
        BusinessCenterExceptionEnum.validateJsonElement(jsonObj.get("businessCenterException"));
      }
      if ((jsonObj.get("meetingRoomsCountException") != null && !jsonObj.get("meetingRoomsCountException").isJsonNull()) && !jsonObj.get("meetingRoomsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingRoomsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingRoomsCountException").toString()));
      }
      // validate the optional field `meetingRoomsCountException`
      if (jsonObj.get("meetingRoomsCountException") != null && !jsonObj.get("meetingRoomsCountException").isJsonNull()) {
        MeetingRoomsCountExceptionEnum.validateJsonElement(jsonObj.get("meetingRoomsCountException"));
      }
      if ((jsonObj.get("meetingRoomsException") != null && !jsonObj.get("meetingRoomsException").isJsonNull()) && !jsonObj.get("meetingRoomsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingRoomsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingRoomsException").toString()));
      }
      // validate the optional field `meetingRoomsException`
      if (jsonObj.get("meetingRoomsException") != null && !jsonObj.get("meetingRoomsException").isJsonNull()) {
        MeetingRoomsExceptionEnum.validateJsonElement(jsonObj.get("meetingRoomsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Business.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Business' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Business> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Business.class));

       return (TypeAdapter<T>) new TypeAdapter<Business>() {
           @Override
           public void write(JsonWriter out, Business value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Business read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Business given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Business
   * @throws IOException if the JSON string is invalid with respect to Business
   */
  public static Business fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Business.class);
  }

  /**
   * Convert an instance of Business to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

