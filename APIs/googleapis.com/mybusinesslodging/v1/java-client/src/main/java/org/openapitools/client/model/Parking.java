/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parking options at the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Parking {
  public static final String SERIALIZED_NAME_ELECTRIC_CAR_CHARGING_STATIONS = "electricCarChargingStations";
  @SerializedName(SERIALIZED_NAME_ELECTRIC_CAR_CHARGING_STATIONS)
  private Boolean electricCarChargingStations;

  /**
   * Electric car charging stations exception.
   */
  @JsonAdapter(ElectricCarChargingStationsExceptionEnum.Adapter.class)
  public enum ElectricCarChargingStationsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ElectricCarChargingStationsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ElectricCarChargingStationsExceptionEnum fromValue(String value) {
      for (ElectricCarChargingStationsExceptionEnum b : ElectricCarChargingStationsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ElectricCarChargingStationsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ElectricCarChargingStationsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ElectricCarChargingStationsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ElectricCarChargingStationsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ElectricCarChargingStationsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELECTRIC_CAR_CHARGING_STATIONS_EXCEPTION = "electricCarChargingStationsException";
  @SerializedName(SERIALIZED_NAME_ELECTRIC_CAR_CHARGING_STATIONS_EXCEPTION)
  private ElectricCarChargingStationsExceptionEnum electricCarChargingStationsException;

  public static final String SERIALIZED_NAME_FREE_PARKING = "freeParking";
  @SerializedName(SERIALIZED_NAME_FREE_PARKING)
  private Boolean freeParking;

  /**
   * Free parking exception.
   */
  @JsonAdapter(FreeParkingExceptionEnum.Adapter.class)
  public enum FreeParkingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeParkingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeParkingExceptionEnum fromValue(String value) {
      for (FreeParkingExceptionEnum b : FreeParkingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeParkingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeParkingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeParkingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeParkingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeParkingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_PARKING_EXCEPTION = "freeParkingException";
  @SerializedName(SERIALIZED_NAME_FREE_PARKING_EXCEPTION)
  private FreeParkingExceptionEnum freeParkingException;

  public static final String SERIALIZED_NAME_FREE_SELF_PARKING = "freeSelfParking";
  @SerializedName(SERIALIZED_NAME_FREE_SELF_PARKING)
  private Boolean freeSelfParking;

  /**
   * Free self parking exception.
   */
  @JsonAdapter(FreeSelfParkingExceptionEnum.Adapter.class)
  public enum FreeSelfParkingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeSelfParkingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeSelfParkingExceptionEnum fromValue(String value) {
      for (FreeSelfParkingExceptionEnum b : FreeSelfParkingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeSelfParkingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeSelfParkingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeSelfParkingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeSelfParkingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeSelfParkingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_SELF_PARKING_EXCEPTION = "freeSelfParkingException";
  @SerializedName(SERIALIZED_NAME_FREE_SELF_PARKING_EXCEPTION)
  private FreeSelfParkingExceptionEnum freeSelfParkingException;

  public static final String SERIALIZED_NAME_FREE_VALET_PARKING = "freeValetParking";
  @SerializedName(SERIALIZED_NAME_FREE_VALET_PARKING)
  private Boolean freeValetParking;

  /**
   * Free valet parking exception.
   */
  @JsonAdapter(FreeValetParkingExceptionEnum.Adapter.class)
  public enum FreeValetParkingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeValetParkingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeValetParkingExceptionEnum fromValue(String value) {
      for (FreeValetParkingExceptionEnum b : FreeValetParkingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeValetParkingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeValetParkingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeValetParkingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeValetParkingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeValetParkingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_VALET_PARKING_EXCEPTION = "freeValetParkingException";
  @SerializedName(SERIALIZED_NAME_FREE_VALET_PARKING_EXCEPTION)
  private FreeValetParkingExceptionEnum freeValetParkingException;

  public static final String SERIALIZED_NAME_PARKING_AVAILABLE = "parkingAvailable";
  @SerializedName(SERIALIZED_NAME_PARKING_AVAILABLE)
  private Boolean parkingAvailable;

  /**
   * Parking available exception.
   */
  @JsonAdapter(ParkingAvailableExceptionEnum.Adapter.class)
  public enum ParkingAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ParkingAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParkingAvailableExceptionEnum fromValue(String value) {
      for (ParkingAvailableExceptionEnum b : ParkingAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParkingAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParkingAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParkingAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParkingAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParkingAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARKING_AVAILABLE_EXCEPTION = "parkingAvailableException";
  @SerializedName(SERIALIZED_NAME_PARKING_AVAILABLE_EXCEPTION)
  private ParkingAvailableExceptionEnum parkingAvailableException;

  public static final String SERIALIZED_NAME_SELF_PARKING_AVAILABLE = "selfParkingAvailable";
  @SerializedName(SERIALIZED_NAME_SELF_PARKING_AVAILABLE)
  private Boolean selfParkingAvailable;

  /**
   * Self parking available exception.
   */
  @JsonAdapter(SelfParkingAvailableExceptionEnum.Adapter.class)
  public enum SelfParkingAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SelfParkingAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfParkingAvailableExceptionEnum fromValue(String value) {
      for (SelfParkingAvailableExceptionEnum b : SelfParkingAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfParkingAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfParkingAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfParkingAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfParkingAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelfParkingAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELF_PARKING_AVAILABLE_EXCEPTION = "selfParkingAvailableException";
  @SerializedName(SERIALIZED_NAME_SELF_PARKING_AVAILABLE_EXCEPTION)
  private SelfParkingAvailableExceptionEnum selfParkingAvailableException;

  public static final String SERIALIZED_NAME_VALET_PARKING_AVAILABLE = "valetParkingAvailable";
  @SerializedName(SERIALIZED_NAME_VALET_PARKING_AVAILABLE)
  private Boolean valetParkingAvailable;

  /**
   * Valet parking available exception.
   */
  @JsonAdapter(ValetParkingAvailableExceptionEnum.Adapter.class)
  public enum ValetParkingAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ValetParkingAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValetParkingAvailableExceptionEnum fromValue(String value) {
      for (ValetParkingAvailableExceptionEnum b : ValetParkingAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValetParkingAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValetParkingAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValetParkingAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValetParkingAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValetParkingAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALET_PARKING_AVAILABLE_EXCEPTION = "valetParkingAvailableException";
  @SerializedName(SERIALIZED_NAME_VALET_PARKING_AVAILABLE_EXCEPTION)
  private ValetParkingAvailableExceptionEnum valetParkingAvailableException;

  public Parking() {
  }

  public Parking electricCarChargingStations(Boolean electricCarChargingStations) {
    this.electricCarChargingStations = electricCarChargingStations;
    return this;
  }

  /**
   * Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.
   * @return electricCarChargingStations
   */
  @javax.annotation.Nullable
  public Boolean getElectricCarChargingStations() {
    return electricCarChargingStations;
  }

  public void setElectricCarChargingStations(Boolean electricCarChargingStations) {
    this.electricCarChargingStations = electricCarChargingStations;
  }


  public Parking electricCarChargingStationsException(ElectricCarChargingStationsExceptionEnum electricCarChargingStationsException) {
    this.electricCarChargingStationsException = electricCarChargingStationsException;
    return this;
  }

  /**
   * Electric car charging stations exception.
   * @return electricCarChargingStationsException
   */
  @javax.annotation.Nullable
  public ElectricCarChargingStationsExceptionEnum getElectricCarChargingStationsException() {
    return electricCarChargingStationsException;
  }

  public void setElectricCarChargingStationsException(ElectricCarChargingStationsExceptionEnum electricCarChargingStationsException) {
    this.electricCarChargingStationsException = electricCarChargingStationsException;
  }


  public Parking freeParking(Boolean freeParking) {
    this.freeParking = freeParking;
    return this;
  }

  /**
   * Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).
   * @return freeParking
   */
  @javax.annotation.Nullable
  public Boolean getFreeParking() {
    return freeParking;
  }

  public void setFreeParking(Boolean freeParking) {
    this.freeParking = freeParking;
  }


  public Parking freeParkingException(FreeParkingExceptionEnum freeParkingException) {
    this.freeParkingException = freeParkingException;
    return this;
  }

  /**
   * Free parking exception.
   * @return freeParkingException
   */
  @javax.annotation.Nullable
  public FreeParkingExceptionEnum getFreeParkingException() {
    return freeParkingException;
  }

  public void setFreeParkingException(FreeParkingExceptionEnum freeParkingException) {
    this.freeParkingException = freeParkingException;
  }


  public Parking freeSelfParking(Boolean freeSelfParking) {
    this.freeSelfParking = freeSelfParking;
    return this;
  }

  /**
   * Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.
   * @return freeSelfParking
   */
  @javax.annotation.Nullable
  public Boolean getFreeSelfParking() {
    return freeSelfParking;
  }

  public void setFreeSelfParking(Boolean freeSelfParking) {
    this.freeSelfParking = freeSelfParking;
  }


  public Parking freeSelfParkingException(FreeSelfParkingExceptionEnum freeSelfParkingException) {
    this.freeSelfParkingException = freeSelfParkingException;
    return this;
  }

  /**
   * Free self parking exception.
   * @return freeSelfParkingException
   */
  @javax.annotation.Nullable
  public FreeSelfParkingExceptionEnum getFreeSelfParkingException() {
    return freeSelfParkingException;
  }

  public void setFreeSelfParkingException(FreeSelfParkingExceptionEnum freeSelfParkingException) {
    this.freeSelfParkingException = freeSelfParkingException;
  }


  public Parking freeValetParking(Boolean freeValetParking) {
    this.freeValetParking = freeValetParking;
    return this;
  }

  /**
   * Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.
   * @return freeValetParking
   */
  @javax.annotation.Nullable
  public Boolean getFreeValetParking() {
    return freeValetParking;
  }

  public void setFreeValetParking(Boolean freeValetParking) {
    this.freeValetParking = freeValetParking;
  }


  public Parking freeValetParkingException(FreeValetParkingExceptionEnum freeValetParkingException) {
    this.freeValetParkingException = freeValetParkingException;
    return this;
  }

  /**
   * Free valet parking exception.
   * @return freeValetParkingException
   */
  @javax.annotation.Nullable
  public FreeValetParkingExceptionEnum getFreeValetParkingException() {
    return freeValetParkingException;
  }

  public void setFreeValetParkingException(FreeValetParkingExceptionEnum freeValetParkingException) {
    this.freeValetParkingException = freeValetParkingException;
  }


  public Parking parkingAvailable(Boolean parkingAvailable) {
    this.parkingAvailable = parkingAvailable;
    return this;
  }

  /**
   * Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.
   * @return parkingAvailable
   */
  @javax.annotation.Nullable
  public Boolean getParkingAvailable() {
    return parkingAvailable;
  }

  public void setParkingAvailable(Boolean parkingAvailable) {
    this.parkingAvailable = parkingAvailable;
  }


  public Parking parkingAvailableException(ParkingAvailableExceptionEnum parkingAvailableException) {
    this.parkingAvailableException = parkingAvailableException;
    return this;
  }

  /**
   * Parking available exception.
   * @return parkingAvailableException
   */
  @javax.annotation.Nullable
  public ParkingAvailableExceptionEnum getParkingAvailableException() {
    return parkingAvailableException;
  }

  public void setParkingAvailableException(ParkingAvailableExceptionEnum parkingAvailableException) {
    this.parkingAvailableException = parkingAvailableException;
  }


  public Parking selfParkingAvailable(Boolean selfParkingAvailable) {
    this.selfParkingAvailable = selfParkingAvailable;
    return this;
  }

  /**
   * Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.
   * @return selfParkingAvailable
   */
  @javax.annotation.Nullable
  public Boolean getSelfParkingAvailable() {
    return selfParkingAvailable;
  }

  public void setSelfParkingAvailable(Boolean selfParkingAvailable) {
    this.selfParkingAvailable = selfParkingAvailable;
  }


  public Parking selfParkingAvailableException(SelfParkingAvailableExceptionEnum selfParkingAvailableException) {
    this.selfParkingAvailableException = selfParkingAvailableException;
    return this;
  }

  /**
   * Self parking available exception.
   * @return selfParkingAvailableException
   */
  @javax.annotation.Nullable
  public SelfParkingAvailableExceptionEnum getSelfParkingAvailableException() {
    return selfParkingAvailableException;
  }

  public void setSelfParkingAvailableException(SelfParkingAvailableExceptionEnum selfParkingAvailableException) {
    this.selfParkingAvailableException = selfParkingAvailableException;
  }


  public Parking valetParkingAvailable(Boolean valetParkingAvailable) {
    this.valetParkingAvailable = valetParkingAvailable;
    return this;
  }

  /**
   * Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.
   * @return valetParkingAvailable
   */
  @javax.annotation.Nullable
  public Boolean getValetParkingAvailable() {
    return valetParkingAvailable;
  }

  public void setValetParkingAvailable(Boolean valetParkingAvailable) {
    this.valetParkingAvailable = valetParkingAvailable;
  }


  public Parking valetParkingAvailableException(ValetParkingAvailableExceptionEnum valetParkingAvailableException) {
    this.valetParkingAvailableException = valetParkingAvailableException;
    return this;
  }

  /**
   * Valet parking available exception.
   * @return valetParkingAvailableException
   */
  @javax.annotation.Nullable
  public ValetParkingAvailableExceptionEnum getValetParkingAvailableException() {
    return valetParkingAvailableException;
  }

  public void setValetParkingAvailableException(ValetParkingAvailableExceptionEnum valetParkingAvailableException) {
    this.valetParkingAvailableException = valetParkingAvailableException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parking parking = (Parking) o;
    return Objects.equals(this.electricCarChargingStations, parking.electricCarChargingStations) &&
        Objects.equals(this.electricCarChargingStationsException, parking.electricCarChargingStationsException) &&
        Objects.equals(this.freeParking, parking.freeParking) &&
        Objects.equals(this.freeParkingException, parking.freeParkingException) &&
        Objects.equals(this.freeSelfParking, parking.freeSelfParking) &&
        Objects.equals(this.freeSelfParkingException, parking.freeSelfParkingException) &&
        Objects.equals(this.freeValetParking, parking.freeValetParking) &&
        Objects.equals(this.freeValetParkingException, parking.freeValetParkingException) &&
        Objects.equals(this.parkingAvailable, parking.parkingAvailable) &&
        Objects.equals(this.parkingAvailableException, parking.parkingAvailableException) &&
        Objects.equals(this.selfParkingAvailable, parking.selfParkingAvailable) &&
        Objects.equals(this.selfParkingAvailableException, parking.selfParkingAvailableException) &&
        Objects.equals(this.valetParkingAvailable, parking.valetParkingAvailable) &&
        Objects.equals(this.valetParkingAvailableException, parking.valetParkingAvailableException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(electricCarChargingStations, electricCarChargingStationsException, freeParking, freeParkingException, freeSelfParking, freeSelfParkingException, freeValetParking, freeValetParkingException, parkingAvailable, parkingAvailableException, selfParkingAvailable, selfParkingAvailableException, valetParkingAvailable, valetParkingAvailableException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parking {\n");
    sb.append("    electricCarChargingStations: ").append(toIndentedString(electricCarChargingStations)).append("\n");
    sb.append("    electricCarChargingStationsException: ").append(toIndentedString(electricCarChargingStationsException)).append("\n");
    sb.append("    freeParking: ").append(toIndentedString(freeParking)).append("\n");
    sb.append("    freeParkingException: ").append(toIndentedString(freeParkingException)).append("\n");
    sb.append("    freeSelfParking: ").append(toIndentedString(freeSelfParking)).append("\n");
    sb.append("    freeSelfParkingException: ").append(toIndentedString(freeSelfParkingException)).append("\n");
    sb.append("    freeValetParking: ").append(toIndentedString(freeValetParking)).append("\n");
    sb.append("    freeValetParkingException: ").append(toIndentedString(freeValetParkingException)).append("\n");
    sb.append("    parkingAvailable: ").append(toIndentedString(parkingAvailable)).append("\n");
    sb.append("    parkingAvailableException: ").append(toIndentedString(parkingAvailableException)).append("\n");
    sb.append("    selfParkingAvailable: ").append(toIndentedString(selfParkingAvailable)).append("\n");
    sb.append("    selfParkingAvailableException: ").append(toIndentedString(selfParkingAvailableException)).append("\n");
    sb.append("    valetParkingAvailable: ").append(toIndentedString(valetParkingAvailable)).append("\n");
    sb.append("    valetParkingAvailableException: ").append(toIndentedString(valetParkingAvailableException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("electricCarChargingStations");
    openapiFields.add("electricCarChargingStationsException");
    openapiFields.add("freeParking");
    openapiFields.add("freeParkingException");
    openapiFields.add("freeSelfParking");
    openapiFields.add("freeSelfParkingException");
    openapiFields.add("freeValetParking");
    openapiFields.add("freeValetParkingException");
    openapiFields.add("parkingAvailable");
    openapiFields.add("parkingAvailableException");
    openapiFields.add("selfParkingAvailable");
    openapiFields.add("selfParkingAvailableException");
    openapiFields.add("valetParkingAvailable");
    openapiFields.add("valetParkingAvailableException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Parking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parking is not found in the empty JSON string", Parking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("electricCarChargingStationsException") != null && !jsonObj.get("electricCarChargingStationsException").isJsonNull()) && !jsonObj.get("electricCarChargingStationsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electricCarChargingStationsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electricCarChargingStationsException").toString()));
      }
      // validate the optional field `electricCarChargingStationsException`
      if (jsonObj.get("electricCarChargingStationsException") != null && !jsonObj.get("electricCarChargingStationsException").isJsonNull()) {
        ElectricCarChargingStationsExceptionEnum.validateJsonElement(jsonObj.get("electricCarChargingStationsException"));
      }
      if ((jsonObj.get("freeParkingException") != null && !jsonObj.get("freeParkingException").isJsonNull()) && !jsonObj.get("freeParkingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeParkingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeParkingException").toString()));
      }
      // validate the optional field `freeParkingException`
      if (jsonObj.get("freeParkingException") != null && !jsonObj.get("freeParkingException").isJsonNull()) {
        FreeParkingExceptionEnum.validateJsonElement(jsonObj.get("freeParkingException"));
      }
      if ((jsonObj.get("freeSelfParkingException") != null && !jsonObj.get("freeSelfParkingException").isJsonNull()) && !jsonObj.get("freeSelfParkingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeSelfParkingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeSelfParkingException").toString()));
      }
      // validate the optional field `freeSelfParkingException`
      if (jsonObj.get("freeSelfParkingException") != null && !jsonObj.get("freeSelfParkingException").isJsonNull()) {
        FreeSelfParkingExceptionEnum.validateJsonElement(jsonObj.get("freeSelfParkingException"));
      }
      if ((jsonObj.get("freeValetParkingException") != null && !jsonObj.get("freeValetParkingException").isJsonNull()) && !jsonObj.get("freeValetParkingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeValetParkingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeValetParkingException").toString()));
      }
      // validate the optional field `freeValetParkingException`
      if (jsonObj.get("freeValetParkingException") != null && !jsonObj.get("freeValetParkingException").isJsonNull()) {
        FreeValetParkingExceptionEnum.validateJsonElement(jsonObj.get("freeValetParkingException"));
      }
      if ((jsonObj.get("parkingAvailableException") != null && !jsonObj.get("parkingAvailableException").isJsonNull()) && !jsonObj.get("parkingAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parkingAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parkingAvailableException").toString()));
      }
      // validate the optional field `parkingAvailableException`
      if (jsonObj.get("parkingAvailableException") != null && !jsonObj.get("parkingAvailableException").isJsonNull()) {
        ParkingAvailableExceptionEnum.validateJsonElement(jsonObj.get("parkingAvailableException"));
      }
      if ((jsonObj.get("selfParkingAvailableException") != null && !jsonObj.get("selfParkingAvailableException").isJsonNull()) && !jsonObj.get("selfParkingAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfParkingAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfParkingAvailableException").toString()));
      }
      // validate the optional field `selfParkingAvailableException`
      if (jsonObj.get("selfParkingAvailableException") != null && !jsonObj.get("selfParkingAvailableException").isJsonNull()) {
        SelfParkingAvailableExceptionEnum.validateJsonElement(jsonObj.get("selfParkingAvailableException"));
      }
      if ((jsonObj.get("valetParkingAvailableException") != null && !jsonObj.get("valetParkingAvailableException").isJsonNull()) && !jsonObj.get("valetParkingAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valetParkingAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valetParkingAvailableException").toString()));
      }
      // validate the optional field `valetParkingAvailableException`
      if (jsonObj.get("valetParkingAvailableException") != null && !jsonObj.get("valetParkingAvailableException").isJsonNull()) {
        ValetParkingAvailableExceptionEnum.validateJsonElement(jsonObj.get("valetParkingAvailableException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parking.class));

       return (TypeAdapter<T>) new TypeAdapter<Parking>() {
           @Override
           public void write(JsonWriter out, Parking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Parking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Parking
   * @throws IOException if the JSON string is invalid with respect to Parking
   */
  public static Parking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parking.class);
  }

  /**
   * Convert an instance of Parking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

