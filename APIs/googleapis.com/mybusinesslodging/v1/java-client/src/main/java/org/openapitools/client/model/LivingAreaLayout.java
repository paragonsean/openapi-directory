/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the layout of the living area.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingAreaLayout {
  public static final String SERIALIZED_NAME_BALCONY = "balcony";
  @SerializedName(SERIALIZED_NAME_BALCONY)
  private Boolean balcony;

  /**
   * Balcony exception.
   */
  @JsonAdapter(BalconyExceptionEnum.Adapter.class)
  public enum BalconyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BalconyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BalconyExceptionEnum fromValue(String value) {
      for (BalconyExceptionEnum b : BalconyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BalconyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BalconyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BalconyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BalconyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BalconyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BALCONY_EXCEPTION = "balconyException";
  @SerializedName(SERIALIZED_NAME_BALCONY_EXCEPTION)
  private BalconyExceptionEnum balconyException;

  public static final String SERIALIZED_NAME_LIVING_AREA_SQ_METERS = "livingAreaSqMeters";
  @SerializedName(SERIALIZED_NAME_LIVING_AREA_SQ_METERS)
  private Float livingAreaSqMeters;

  /**
   * Living area sq meters exception.
   */
  @JsonAdapter(LivingAreaSqMetersExceptionEnum.Adapter.class)
  public enum LivingAreaSqMetersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LivingAreaSqMetersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LivingAreaSqMetersExceptionEnum fromValue(String value) {
      for (LivingAreaSqMetersExceptionEnum b : LivingAreaSqMetersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LivingAreaSqMetersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LivingAreaSqMetersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LivingAreaSqMetersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LivingAreaSqMetersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LivingAreaSqMetersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIVING_AREA_SQ_METERS_EXCEPTION = "livingAreaSqMetersException";
  @SerializedName(SERIALIZED_NAME_LIVING_AREA_SQ_METERS_EXCEPTION)
  private LivingAreaSqMetersExceptionEnum livingAreaSqMetersException;

  public static final String SERIALIZED_NAME_LOFT = "loft";
  @SerializedName(SERIALIZED_NAME_LOFT)
  private Boolean loft;

  /**
   * Loft exception.
   */
  @JsonAdapter(LoftExceptionEnum.Adapter.class)
  public enum LoftExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LoftExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoftExceptionEnum fromValue(String value) {
      for (LoftExceptionEnum b : LoftExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoftExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoftExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoftExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoftExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoftExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOFT_EXCEPTION = "loftException";
  @SerializedName(SERIALIZED_NAME_LOFT_EXCEPTION)
  private LoftExceptionEnum loftException;

  public static final String SERIALIZED_NAME_NON_SMOKING = "nonSmoking";
  @SerializedName(SERIALIZED_NAME_NON_SMOKING)
  private Boolean nonSmoking;

  /**
   * Non smoking exception.
   */
  @JsonAdapter(NonSmokingExceptionEnum.Adapter.class)
  public enum NonSmokingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NonSmokingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NonSmokingExceptionEnum fromValue(String value) {
      for (NonSmokingExceptionEnum b : NonSmokingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NonSmokingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NonSmokingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NonSmokingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NonSmokingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NonSmokingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NON_SMOKING_EXCEPTION = "nonSmokingException";
  @SerializedName(SERIALIZED_NAME_NON_SMOKING_EXCEPTION)
  private NonSmokingExceptionEnum nonSmokingException;

  public static final String SERIALIZED_NAME_PATIO = "patio";
  @SerializedName(SERIALIZED_NAME_PATIO)
  private Boolean patio;

  /**
   * Patio exception.
   */
  @JsonAdapter(PatioExceptionEnum.Adapter.class)
  public enum PatioExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PatioExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PatioExceptionEnum fromValue(String value) {
      for (PatioExceptionEnum b : PatioExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PatioExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PatioExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PatioExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PatioExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PatioExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PATIO_EXCEPTION = "patioException";
  @SerializedName(SERIALIZED_NAME_PATIO_EXCEPTION)
  private PatioExceptionEnum patioException;

  public static final String SERIALIZED_NAME_STAIRS = "stairs";
  @SerializedName(SERIALIZED_NAME_STAIRS)
  private Boolean stairs;

  /**
   * Stairs exception.
   */
  @JsonAdapter(StairsExceptionEnum.Adapter.class)
  public enum StairsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    StairsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StairsExceptionEnum fromValue(String value) {
      for (StairsExceptionEnum b : StairsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StairsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StairsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StairsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StairsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StairsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAIRS_EXCEPTION = "stairsException";
  @SerializedName(SERIALIZED_NAME_STAIRS_EXCEPTION)
  private StairsExceptionEnum stairsException;

  public LivingAreaLayout() {
  }

  public LivingAreaLayout balcony(Boolean balcony) {
    this.balcony = balcony;
    return this;
  }

  /**
   * Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.
   * @return balcony
   */
  @javax.annotation.Nullable
  public Boolean getBalcony() {
    return balcony;
  }

  public void setBalcony(Boolean balcony) {
    this.balcony = balcony;
  }


  public LivingAreaLayout balconyException(BalconyExceptionEnum balconyException) {
    this.balconyException = balconyException;
    return this;
  }

  /**
   * Balcony exception.
   * @return balconyException
   */
  @javax.annotation.Nullable
  public BalconyExceptionEnum getBalconyException() {
    return balconyException;
  }

  public void setBalconyException(BalconyExceptionEnum balconyException) {
    this.balconyException = balconyException;
  }


  public LivingAreaLayout livingAreaSqMeters(Float livingAreaSqMeters) {
    this.livingAreaSqMeters = livingAreaSqMeters;
    return this;
  }

  /**
   * Living area sq meters. The measurement in meters of the area of a guestroom&#39;s living space.
   * @return livingAreaSqMeters
   */
  @javax.annotation.Nullable
  public Float getLivingAreaSqMeters() {
    return livingAreaSqMeters;
  }

  public void setLivingAreaSqMeters(Float livingAreaSqMeters) {
    this.livingAreaSqMeters = livingAreaSqMeters;
  }


  public LivingAreaLayout livingAreaSqMetersException(LivingAreaSqMetersExceptionEnum livingAreaSqMetersException) {
    this.livingAreaSqMetersException = livingAreaSqMetersException;
    return this;
  }

  /**
   * Living area sq meters exception.
   * @return livingAreaSqMetersException
   */
  @javax.annotation.Nullable
  public LivingAreaSqMetersExceptionEnum getLivingAreaSqMetersException() {
    return livingAreaSqMetersException;
  }

  public void setLivingAreaSqMetersException(LivingAreaSqMetersExceptionEnum livingAreaSqMetersException) {
    this.livingAreaSqMetersException = livingAreaSqMetersException;
  }


  public LivingAreaLayout loft(Boolean loft) {
    this.loft = loft;
    return this;
  }

  /**
   * Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.
   * @return loft
   */
  @javax.annotation.Nullable
  public Boolean getLoft() {
    return loft;
  }

  public void setLoft(Boolean loft) {
    this.loft = loft;
  }


  public LivingAreaLayout loftException(LoftExceptionEnum loftException) {
    this.loftException = loftException;
    return this;
  }

  /**
   * Loft exception.
   * @return loftException
   */
  @javax.annotation.Nullable
  public LoftExceptionEnum getLoftException() {
    return loftException;
  }

  public void setLoftException(LoftExceptionEnum loftException) {
    this.loftException = loftException;
  }


  public LivingAreaLayout nonSmoking(Boolean nonSmoking) {
    this.nonSmoking = nonSmoking;
    return this;
  }

  /**
   * Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.
   * @return nonSmoking
   */
  @javax.annotation.Nullable
  public Boolean getNonSmoking() {
    return nonSmoking;
  }

  public void setNonSmoking(Boolean nonSmoking) {
    this.nonSmoking = nonSmoking;
  }


  public LivingAreaLayout nonSmokingException(NonSmokingExceptionEnum nonSmokingException) {
    this.nonSmokingException = nonSmokingException;
    return this;
  }

  /**
   * Non smoking exception.
   * @return nonSmokingException
   */
  @javax.annotation.Nullable
  public NonSmokingExceptionEnum getNonSmokingException() {
    return nonSmokingException;
  }

  public void setNonSmokingException(NonSmokingExceptionEnum nonSmokingException) {
    this.nonSmokingException = nonSmokingException;
  }


  public LivingAreaLayout patio(Boolean patio) {
    this.patio = patio;
    return this;
  }

  /**
   * Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.
   * @return patio
   */
  @javax.annotation.Nullable
  public Boolean getPatio() {
    return patio;
  }

  public void setPatio(Boolean patio) {
    this.patio = patio;
  }


  public LivingAreaLayout patioException(PatioExceptionEnum patioException) {
    this.patioException = patioException;
    return this;
  }

  /**
   * Patio exception.
   * @return patioException
   */
  @javax.annotation.Nullable
  public PatioExceptionEnum getPatioException() {
    return patioException;
  }

  public void setPatioException(PatioExceptionEnum patioException) {
    this.patioException = patioException;
  }


  public LivingAreaLayout stairs(Boolean stairs) {
    this.stairs = stairs;
    return this;
  }

  /**
   * Stairs. There are steps leading from one level or story to another in the unit.
   * @return stairs
   */
  @javax.annotation.Nullable
  public Boolean getStairs() {
    return stairs;
  }

  public void setStairs(Boolean stairs) {
    this.stairs = stairs;
  }


  public LivingAreaLayout stairsException(StairsExceptionEnum stairsException) {
    this.stairsException = stairsException;
    return this;
  }

  /**
   * Stairs exception.
   * @return stairsException
   */
  @javax.annotation.Nullable
  public StairsExceptionEnum getStairsException() {
    return stairsException;
  }

  public void setStairsException(StairsExceptionEnum stairsException) {
    this.stairsException = stairsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingAreaLayout livingAreaLayout = (LivingAreaLayout) o;
    return Objects.equals(this.balcony, livingAreaLayout.balcony) &&
        Objects.equals(this.balconyException, livingAreaLayout.balconyException) &&
        Objects.equals(this.livingAreaSqMeters, livingAreaLayout.livingAreaSqMeters) &&
        Objects.equals(this.livingAreaSqMetersException, livingAreaLayout.livingAreaSqMetersException) &&
        Objects.equals(this.loft, livingAreaLayout.loft) &&
        Objects.equals(this.loftException, livingAreaLayout.loftException) &&
        Objects.equals(this.nonSmoking, livingAreaLayout.nonSmoking) &&
        Objects.equals(this.nonSmokingException, livingAreaLayout.nonSmokingException) &&
        Objects.equals(this.patio, livingAreaLayout.patio) &&
        Objects.equals(this.patioException, livingAreaLayout.patioException) &&
        Objects.equals(this.stairs, livingAreaLayout.stairs) &&
        Objects.equals(this.stairsException, livingAreaLayout.stairsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balcony, balconyException, livingAreaSqMeters, livingAreaSqMetersException, loft, loftException, nonSmoking, nonSmokingException, patio, patioException, stairs, stairsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingAreaLayout {\n");
    sb.append("    balcony: ").append(toIndentedString(balcony)).append("\n");
    sb.append("    balconyException: ").append(toIndentedString(balconyException)).append("\n");
    sb.append("    livingAreaSqMeters: ").append(toIndentedString(livingAreaSqMeters)).append("\n");
    sb.append("    livingAreaSqMetersException: ").append(toIndentedString(livingAreaSqMetersException)).append("\n");
    sb.append("    loft: ").append(toIndentedString(loft)).append("\n");
    sb.append("    loftException: ").append(toIndentedString(loftException)).append("\n");
    sb.append("    nonSmoking: ").append(toIndentedString(nonSmoking)).append("\n");
    sb.append("    nonSmokingException: ").append(toIndentedString(nonSmokingException)).append("\n");
    sb.append("    patio: ").append(toIndentedString(patio)).append("\n");
    sb.append("    patioException: ").append(toIndentedString(patioException)).append("\n");
    sb.append("    stairs: ").append(toIndentedString(stairs)).append("\n");
    sb.append("    stairsException: ").append(toIndentedString(stairsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balcony");
    openapiFields.add("balconyException");
    openapiFields.add("livingAreaSqMeters");
    openapiFields.add("livingAreaSqMetersException");
    openapiFields.add("loft");
    openapiFields.add("loftException");
    openapiFields.add("nonSmoking");
    openapiFields.add("nonSmokingException");
    openapiFields.add("patio");
    openapiFields.add("patioException");
    openapiFields.add("stairs");
    openapiFields.add("stairsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingAreaLayout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingAreaLayout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingAreaLayout is not found in the empty JSON string", LivingAreaLayout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingAreaLayout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingAreaLayout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("balconyException") != null && !jsonObj.get("balconyException").isJsonNull()) && !jsonObj.get("balconyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balconyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balconyException").toString()));
      }
      // validate the optional field `balconyException`
      if (jsonObj.get("balconyException") != null && !jsonObj.get("balconyException").isJsonNull()) {
        BalconyExceptionEnum.validateJsonElement(jsonObj.get("balconyException"));
      }
      if ((jsonObj.get("livingAreaSqMetersException") != null && !jsonObj.get("livingAreaSqMetersException").isJsonNull()) && !jsonObj.get("livingAreaSqMetersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `livingAreaSqMetersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("livingAreaSqMetersException").toString()));
      }
      // validate the optional field `livingAreaSqMetersException`
      if (jsonObj.get("livingAreaSqMetersException") != null && !jsonObj.get("livingAreaSqMetersException").isJsonNull()) {
        LivingAreaSqMetersExceptionEnum.validateJsonElement(jsonObj.get("livingAreaSqMetersException"));
      }
      if ((jsonObj.get("loftException") != null && !jsonObj.get("loftException").isJsonNull()) && !jsonObj.get("loftException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loftException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loftException").toString()));
      }
      // validate the optional field `loftException`
      if (jsonObj.get("loftException") != null && !jsonObj.get("loftException").isJsonNull()) {
        LoftExceptionEnum.validateJsonElement(jsonObj.get("loftException"));
      }
      if ((jsonObj.get("nonSmokingException") != null && !jsonObj.get("nonSmokingException").isJsonNull()) && !jsonObj.get("nonSmokingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonSmokingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonSmokingException").toString()));
      }
      // validate the optional field `nonSmokingException`
      if (jsonObj.get("nonSmokingException") != null && !jsonObj.get("nonSmokingException").isJsonNull()) {
        NonSmokingExceptionEnum.validateJsonElement(jsonObj.get("nonSmokingException"));
      }
      if ((jsonObj.get("patioException") != null && !jsonObj.get("patioException").isJsonNull()) && !jsonObj.get("patioException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patioException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patioException").toString()));
      }
      // validate the optional field `patioException`
      if (jsonObj.get("patioException") != null && !jsonObj.get("patioException").isJsonNull()) {
        PatioExceptionEnum.validateJsonElement(jsonObj.get("patioException"));
      }
      if ((jsonObj.get("stairsException") != null && !jsonObj.get("stairsException").isJsonNull()) && !jsonObj.get("stairsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stairsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stairsException").toString()));
      }
      // validate the optional field `stairsException`
      if (jsonObj.get("stairsException") != null && !jsonObj.get("stairsException").isJsonNull()) {
        StairsExceptionEnum.validateJsonElement(jsonObj.get("stairsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingAreaLayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingAreaLayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingAreaLayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingAreaLayout.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingAreaLayout>() {
           @Override
           public void write(JsonWriter out, LivingAreaLayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingAreaLayout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingAreaLayout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingAreaLayout
   * @throws IOException if the JSON string is invalid with respect to LivingAreaLayout
   */
  public static LivingAreaLayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingAreaLayout.class);
  }

  /**
   * Convert an instance of LivingAreaLayout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

