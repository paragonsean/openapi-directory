/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Views available from the guest unit itself.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewsFromUnit {
  public static final String SERIALIZED_NAME_BEACH_VIEW = "beachView";
  @SerializedName(SERIALIZED_NAME_BEACH_VIEW)
  private Boolean beachView;

  /**
   * Beach view exception.
   */
  @JsonAdapter(BeachViewExceptionEnum.Adapter.class)
  public enum BeachViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BeachViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BeachViewExceptionEnum fromValue(String value) {
      for (BeachViewExceptionEnum b : BeachViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BeachViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BeachViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BeachViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BeachViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BeachViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEACH_VIEW_EXCEPTION = "beachViewException";
  @SerializedName(SERIALIZED_NAME_BEACH_VIEW_EXCEPTION)
  private BeachViewExceptionEnum beachViewException;

  public static final String SERIALIZED_NAME_CITY_VIEW = "cityView";
  @SerializedName(SERIALIZED_NAME_CITY_VIEW)
  private Boolean cityView;

  /**
   * City view exception.
   */
  @JsonAdapter(CityViewExceptionEnum.Adapter.class)
  public enum CityViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CityViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CityViewExceptionEnum fromValue(String value) {
      for (CityViewExceptionEnum b : CityViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CityViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CityViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CityViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CityViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CityViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CITY_VIEW_EXCEPTION = "cityViewException";
  @SerializedName(SERIALIZED_NAME_CITY_VIEW_EXCEPTION)
  private CityViewExceptionEnum cityViewException;

  public static final String SERIALIZED_NAME_GARDEN_VIEW = "gardenView";
  @SerializedName(SERIALIZED_NAME_GARDEN_VIEW)
  private Boolean gardenView;

  /**
   * Garden view exception.
   */
  @JsonAdapter(GardenViewExceptionEnum.Adapter.class)
  public enum GardenViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GardenViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GardenViewExceptionEnum fromValue(String value) {
      for (GardenViewExceptionEnum b : GardenViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GardenViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GardenViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GardenViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GardenViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GardenViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GARDEN_VIEW_EXCEPTION = "gardenViewException";
  @SerializedName(SERIALIZED_NAME_GARDEN_VIEW_EXCEPTION)
  private GardenViewExceptionEnum gardenViewException;

  public static final String SERIALIZED_NAME_LAKE_VIEW = "lakeView";
  @SerializedName(SERIALIZED_NAME_LAKE_VIEW)
  private Boolean lakeView;

  /**
   * Lake view exception.
   */
  @JsonAdapter(LakeViewExceptionEnum.Adapter.class)
  public enum LakeViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LakeViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LakeViewExceptionEnum fromValue(String value) {
      for (LakeViewExceptionEnum b : LakeViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LakeViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LakeViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LakeViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LakeViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LakeViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAKE_VIEW_EXCEPTION = "lakeViewException";
  @SerializedName(SERIALIZED_NAME_LAKE_VIEW_EXCEPTION)
  private LakeViewExceptionEnum lakeViewException;

  public static final String SERIALIZED_NAME_LANDMARK_VIEW = "landmarkView";
  @SerializedName(SERIALIZED_NAME_LANDMARK_VIEW)
  private Boolean landmarkView;

  /**
   * Landmark view exception.
   */
  @JsonAdapter(LandmarkViewExceptionEnum.Adapter.class)
  public enum LandmarkViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    LandmarkViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LandmarkViewExceptionEnum fromValue(String value) {
      for (LandmarkViewExceptionEnum b : LandmarkViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LandmarkViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LandmarkViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LandmarkViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LandmarkViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LandmarkViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANDMARK_VIEW_EXCEPTION = "landmarkViewException";
  @SerializedName(SERIALIZED_NAME_LANDMARK_VIEW_EXCEPTION)
  private LandmarkViewExceptionEnum landmarkViewException;

  public static final String SERIALIZED_NAME_OCEAN_VIEW = "oceanView";
  @SerializedName(SERIALIZED_NAME_OCEAN_VIEW)
  private Boolean oceanView;

  /**
   * Ocean view exception.
   */
  @JsonAdapter(OceanViewExceptionEnum.Adapter.class)
  public enum OceanViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OceanViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OceanViewExceptionEnum fromValue(String value) {
      for (OceanViewExceptionEnum b : OceanViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OceanViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OceanViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OceanViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OceanViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OceanViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCEAN_VIEW_EXCEPTION = "oceanViewException";
  @SerializedName(SERIALIZED_NAME_OCEAN_VIEW_EXCEPTION)
  private OceanViewExceptionEnum oceanViewException;

  public static final String SERIALIZED_NAME_POOL_VIEW = "poolView";
  @SerializedName(SERIALIZED_NAME_POOL_VIEW)
  private Boolean poolView;

  /**
   * Pool view exception.
   */
  @JsonAdapter(PoolViewExceptionEnum.Adapter.class)
  public enum PoolViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PoolViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoolViewExceptionEnum fromValue(String value) {
      for (PoolViewExceptionEnum b : PoolViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoolViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoolViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoolViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoolViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoolViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POOL_VIEW_EXCEPTION = "poolViewException";
  @SerializedName(SERIALIZED_NAME_POOL_VIEW_EXCEPTION)
  private PoolViewExceptionEnum poolViewException;

  public static final String SERIALIZED_NAME_VALLEY_VIEW = "valleyView";
  @SerializedName(SERIALIZED_NAME_VALLEY_VIEW)
  private Boolean valleyView;

  /**
   * Valley view exception.
   */
  @JsonAdapter(ValleyViewExceptionEnum.Adapter.class)
  public enum ValleyViewExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ValleyViewExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValleyViewExceptionEnum fromValue(String value) {
      for (ValleyViewExceptionEnum b : ValleyViewExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValleyViewExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValleyViewExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValleyViewExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValleyViewExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValleyViewExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALLEY_VIEW_EXCEPTION = "valleyViewException";
  @SerializedName(SERIALIZED_NAME_VALLEY_VIEW_EXCEPTION)
  private ValleyViewExceptionEnum valleyViewException;

  public ViewsFromUnit() {
  }

  public ViewsFromUnit beachView(Boolean beachView) {
    this.beachView = beachView;
    return this;
  }

  /**
   * Beach view. A guestroom that features a window through which guests can see the beach.
   * @return beachView
   */
  @javax.annotation.Nullable
  public Boolean getBeachView() {
    return beachView;
  }

  public void setBeachView(Boolean beachView) {
    this.beachView = beachView;
  }


  public ViewsFromUnit beachViewException(BeachViewExceptionEnum beachViewException) {
    this.beachViewException = beachViewException;
    return this;
  }

  /**
   * Beach view exception.
   * @return beachViewException
   */
  @javax.annotation.Nullable
  public BeachViewExceptionEnum getBeachViewException() {
    return beachViewException;
  }

  public void setBeachViewException(BeachViewExceptionEnum beachViewException) {
    this.beachViewException = beachViewException;
  }


  public ViewsFromUnit cityView(Boolean cityView) {
    this.cityView = cityView;
    return this;
  }

  /**
   * City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
   * @return cityView
   */
  @javax.annotation.Nullable
  public Boolean getCityView() {
    return cityView;
  }

  public void setCityView(Boolean cityView) {
    this.cityView = cityView;
  }


  public ViewsFromUnit cityViewException(CityViewExceptionEnum cityViewException) {
    this.cityViewException = cityViewException;
    return this;
  }

  /**
   * City view exception.
   * @return cityViewException
   */
  @javax.annotation.Nullable
  public CityViewExceptionEnum getCityViewException() {
    return cityViewException;
  }

  public void setCityViewException(CityViewExceptionEnum cityViewException) {
    this.cityViewException = cityViewException;
  }


  public ViewsFromUnit gardenView(Boolean gardenView) {
    this.gardenView = gardenView;
    return this;
  }

  /**
   * Garden view. A guestroom that features a window through which guests can see a garden.
   * @return gardenView
   */
  @javax.annotation.Nullable
  public Boolean getGardenView() {
    return gardenView;
  }

  public void setGardenView(Boolean gardenView) {
    this.gardenView = gardenView;
  }


  public ViewsFromUnit gardenViewException(GardenViewExceptionEnum gardenViewException) {
    this.gardenViewException = gardenViewException;
    return this;
  }

  /**
   * Garden view exception.
   * @return gardenViewException
   */
  @javax.annotation.Nullable
  public GardenViewExceptionEnum getGardenViewException() {
    return gardenViewException;
  }

  public void setGardenViewException(GardenViewExceptionEnum gardenViewException) {
    this.gardenViewException = gardenViewException;
  }


  public ViewsFromUnit lakeView(Boolean lakeView) {
    this.lakeView = lakeView;
    return this;
  }

  /**
   * Lake view.
   * @return lakeView
   */
  @javax.annotation.Nullable
  public Boolean getLakeView() {
    return lakeView;
  }

  public void setLakeView(Boolean lakeView) {
    this.lakeView = lakeView;
  }


  public ViewsFromUnit lakeViewException(LakeViewExceptionEnum lakeViewException) {
    this.lakeViewException = lakeViewException;
    return this;
  }

  /**
   * Lake view exception.
   * @return lakeViewException
   */
  @javax.annotation.Nullable
  public LakeViewExceptionEnum getLakeViewException() {
    return lakeViewException;
  }

  public void setLakeViewException(LakeViewExceptionEnum lakeViewException) {
    this.lakeViewException = lakeViewException;
  }


  public ViewsFromUnit landmarkView(Boolean landmarkView) {
    this.landmarkView = landmarkView;
    return this;
  }

  /**
   * Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
   * @return landmarkView
   */
  @javax.annotation.Nullable
  public Boolean getLandmarkView() {
    return landmarkView;
  }

  public void setLandmarkView(Boolean landmarkView) {
    this.landmarkView = landmarkView;
  }


  public ViewsFromUnit landmarkViewException(LandmarkViewExceptionEnum landmarkViewException) {
    this.landmarkViewException = landmarkViewException;
    return this;
  }

  /**
   * Landmark view exception.
   * @return landmarkViewException
   */
  @javax.annotation.Nullable
  public LandmarkViewExceptionEnum getLandmarkViewException() {
    return landmarkViewException;
  }

  public void setLandmarkViewException(LandmarkViewExceptionEnum landmarkViewException) {
    this.landmarkViewException = landmarkViewException;
  }


  public ViewsFromUnit oceanView(Boolean oceanView) {
    this.oceanView = oceanView;
    return this;
  }

  /**
   * Ocean view. A guestroom that features a window through which guests can see the ocean.
   * @return oceanView
   */
  @javax.annotation.Nullable
  public Boolean getOceanView() {
    return oceanView;
  }

  public void setOceanView(Boolean oceanView) {
    this.oceanView = oceanView;
  }


  public ViewsFromUnit oceanViewException(OceanViewExceptionEnum oceanViewException) {
    this.oceanViewException = oceanViewException;
    return this;
  }

  /**
   * Ocean view exception.
   * @return oceanViewException
   */
  @javax.annotation.Nullable
  public OceanViewExceptionEnum getOceanViewException() {
    return oceanViewException;
  }

  public void setOceanViewException(OceanViewExceptionEnum oceanViewException) {
    this.oceanViewException = oceanViewException;
  }


  public ViewsFromUnit poolView(Boolean poolView) {
    this.poolView = poolView;
    return this;
  }

  /**
   * Pool view. A guestroom that features a window through which guests can see the hotel&#39;s swimming pool.
   * @return poolView
   */
  @javax.annotation.Nullable
  public Boolean getPoolView() {
    return poolView;
  }

  public void setPoolView(Boolean poolView) {
    this.poolView = poolView;
  }


  public ViewsFromUnit poolViewException(PoolViewExceptionEnum poolViewException) {
    this.poolViewException = poolViewException;
    return this;
  }

  /**
   * Pool view exception.
   * @return poolViewException
   */
  @javax.annotation.Nullable
  public PoolViewExceptionEnum getPoolViewException() {
    return poolViewException;
  }

  public void setPoolViewException(PoolViewExceptionEnum poolViewException) {
    this.poolViewException = poolViewException;
  }


  public ViewsFromUnit valleyView(Boolean valleyView) {
    this.valleyView = valleyView;
    return this;
  }

  /**
   * Valley view. A guestroom that features a window through which guests can see over a valley.
   * @return valleyView
   */
  @javax.annotation.Nullable
  public Boolean getValleyView() {
    return valleyView;
  }

  public void setValleyView(Boolean valleyView) {
    this.valleyView = valleyView;
  }


  public ViewsFromUnit valleyViewException(ValleyViewExceptionEnum valleyViewException) {
    this.valleyViewException = valleyViewException;
    return this;
  }

  /**
   * Valley view exception.
   * @return valleyViewException
   */
  @javax.annotation.Nullable
  public ValleyViewExceptionEnum getValleyViewException() {
    return valleyViewException;
  }

  public void setValleyViewException(ValleyViewExceptionEnum valleyViewException) {
    this.valleyViewException = valleyViewException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewsFromUnit viewsFromUnit = (ViewsFromUnit) o;
    return Objects.equals(this.beachView, viewsFromUnit.beachView) &&
        Objects.equals(this.beachViewException, viewsFromUnit.beachViewException) &&
        Objects.equals(this.cityView, viewsFromUnit.cityView) &&
        Objects.equals(this.cityViewException, viewsFromUnit.cityViewException) &&
        Objects.equals(this.gardenView, viewsFromUnit.gardenView) &&
        Objects.equals(this.gardenViewException, viewsFromUnit.gardenViewException) &&
        Objects.equals(this.lakeView, viewsFromUnit.lakeView) &&
        Objects.equals(this.lakeViewException, viewsFromUnit.lakeViewException) &&
        Objects.equals(this.landmarkView, viewsFromUnit.landmarkView) &&
        Objects.equals(this.landmarkViewException, viewsFromUnit.landmarkViewException) &&
        Objects.equals(this.oceanView, viewsFromUnit.oceanView) &&
        Objects.equals(this.oceanViewException, viewsFromUnit.oceanViewException) &&
        Objects.equals(this.poolView, viewsFromUnit.poolView) &&
        Objects.equals(this.poolViewException, viewsFromUnit.poolViewException) &&
        Objects.equals(this.valleyView, viewsFromUnit.valleyView) &&
        Objects.equals(this.valleyViewException, viewsFromUnit.valleyViewException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beachView, beachViewException, cityView, cityViewException, gardenView, gardenViewException, lakeView, lakeViewException, landmarkView, landmarkViewException, oceanView, oceanViewException, poolView, poolViewException, valleyView, valleyViewException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewsFromUnit {\n");
    sb.append("    beachView: ").append(toIndentedString(beachView)).append("\n");
    sb.append("    beachViewException: ").append(toIndentedString(beachViewException)).append("\n");
    sb.append("    cityView: ").append(toIndentedString(cityView)).append("\n");
    sb.append("    cityViewException: ").append(toIndentedString(cityViewException)).append("\n");
    sb.append("    gardenView: ").append(toIndentedString(gardenView)).append("\n");
    sb.append("    gardenViewException: ").append(toIndentedString(gardenViewException)).append("\n");
    sb.append("    lakeView: ").append(toIndentedString(lakeView)).append("\n");
    sb.append("    lakeViewException: ").append(toIndentedString(lakeViewException)).append("\n");
    sb.append("    landmarkView: ").append(toIndentedString(landmarkView)).append("\n");
    sb.append("    landmarkViewException: ").append(toIndentedString(landmarkViewException)).append("\n");
    sb.append("    oceanView: ").append(toIndentedString(oceanView)).append("\n");
    sb.append("    oceanViewException: ").append(toIndentedString(oceanViewException)).append("\n");
    sb.append("    poolView: ").append(toIndentedString(poolView)).append("\n");
    sb.append("    poolViewException: ").append(toIndentedString(poolViewException)).append("\n");
    sb.append("    valleyView: ").append(toIndentedString(valleyView)).append("\n");
    sb.append("    valleyViewException: ").append(toIndentedString(valleyViewException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beachView");
    openapiFields.add("beachViewException");
    openapiFields.add("cityView");
    openapiFields.add("cityViewException");
    openapiFields.add("gardenView");
    openapiFields.add("gardenViewException");
    openapiFields.add("lakeView");
    openapiFields.add("lakeViewException");
    openapiFields.add("landmarkView");
    openapiFields.add("landmarkViewException");
    openapiFields.add("oceanView");
    openapiFields.add("oceanViewException");
    openapiFields.add("poolView");
    openapiFields.add("poolViewException");
    openapiFields.add("valleyView");
    openapiFields.add("valleyViewException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewsFromUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewsFromUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewsFromUnit is not found in the empty JSON string", ViewsFromUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViewsFromUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewsFromUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("beachViewException") != null && !jsonObj.get("beachViewException").isJsonNull()) && !jsonObj.get("beachViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beachViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beachViewException").toString()));
      }
      // validate the optional field `beachViewException`
      if (jsonObj.get("beachViewException") != null && !jsonObj.get("beachViewException").isJsonNull()) {
        BeachViewExceptionEnum.validateJsonElement(jsonObj.get("beachViewException"));
      }
      if ((jsonObj.get("cityViewException") != null && !jsonObj.get("cityViewException").isJsonNull()) && !jsonObj.get("cityViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityViewException").toString()));
      }
      // validate the optional field `cityViewException`
      if (jsonObj.get("cityViewException") != null && !jsonObj.get("cityViewException").isJsonNull()) {
        CityViewExceptionEnum.validateJsonElement(jsonObj.get("cityViewException"));
      }
      if ((jsonObj.get("gardenViewException") != null && !jsonObj.get("gardenViewException").isJsonNull()) && !jsonObj.get("gardenViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gardenViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gardenViewException").toString()));
      }
      // validate the optional field `gardenViewException`
      if (jsonObj.get("gardenViewException") != null && !jsonObj.get("gardenViewException").isJsonNull()) {
        GardenViewExceptionEnum.validateJsonElement(jsonObj.get("gardenViewException"));
      }
      if ((jsonObj.get("lakeViewException") != null && !jsonObj.get("lakeViewException").isJsonNull()) && !jsonObj.get("lakeViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lakeViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lakeViewException").toString()));
      }
      // validate the optional field `lakeViewException`
      if (jsonObj.get("lakeViewException") != null && !jsonObj.get("lakeViewException").isJsonNull()) {
        LakeViewExceptionEnum.validateJsonElement(jsonObj.get("lakeViewException"));
      }
      if ((jsonObj.get("landmarkViewException") != null && !jsonObj.get("landmarkViewException").isJsonNull()) && !jsonObj.get("landmarkViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landmarkViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landmarkViewException").toString()));
      }
      // validate the optional field `landmarkViewException`
      if (jsonObj.get("landmarkViewException") != null && !jsonObj.get("landmarkViewException").isJsonNull()) {
        LandmarkViewExceptionEnum.validateJsonElement(jsonObj.get("landmarkViewException"));
      }
      if ((jsonObj.get("oceanViewException") != null && !jsonObj.get("oceanViewException").isJsonNull()) && !jsonObj.get("oceanViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oceanViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oceanViewException").toString()));
      }
      // validate the optional field `oceanViewException`
      if (jsonObj.get("oceanViewException") != null && !jsonObj.get("oceanViewException").isJsonNull()) {
        OceanViewExceptionEnum.validateJsonElement(jsonObj.get("oceanViewException"));
      }
      if ((jsonObj.get("poolViewException") != null && !jsonObj.get("poolViewException").isJsonNull()) && !jsonObj.get("poolViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolViewException").toString()));
      }
      // validate the optional field `poolViewException`
      if (jsonObj.get("poolViewException") != null && !jsonObj.get("poolViewException").isJsonNull()) {
        PoolViewExceptionEnum.validateJsonElement(jsonObj.get("poolViewException"));
      }
      if ((jsonObj.get("valleyViewException") != null && !jsonObj.get("valleyViewException").isJsonNull()) && !jsonObj.get("valleyViewException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valleyViewException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valleyViewException").toString()));
      }
      // validate the optional field `valleyViewException`
      if (jsonObj.get("valleyViewException") != null && !jsonObj.get("valleyViewException").isJsonNull()) {
        ValleyViewExceptionEnum.validateJsonElement(jsonObj.get("valleyViewException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewsFromUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewsFromUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewsFromUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewsFromUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewsFromUnit>() {
           @Override
           public void write(JsonWriter out, ViewsFromUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewsFromUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewsFromUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewsFromUnit
   * @throws IOException if the JSON string is invalid with respect to ViewsFromUnit
   */
  public static ViewsFromUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewsFromUnit.class);
  }

  /**
   * Convert an instance of ViewsFromUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

