/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Language spoken by at least one staff member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LanguageSpoken {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_SPOKEN = "spoken";
  @SerializedName(SERIALIZED_NAME_SPOKEN)
  private Boolean spoken;

  /**
   * Spoken exception.
   */
  @JsonAdapter(SpokenExceptionEnum.Adapter.class)
  public enum SpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpokenExceptionEnum fromValue(String value) {
      for (SpokenExceptionEnum b : SpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPOKEN_EXCEPTION = "spokenException";
  @SerializedName(SERIALIZED_NAME_SPOKEN_EXCEPTION)
  private SpokenExceptionEnum spokenException;

  public LanguageSpoken() {
  }

  public LanguageSpoken languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Required. The BCP-47 language code for the spoken language. Currently accepted codes: ar, de, en, es, fil, fr, hi, id, it, ja, ko, nl, pt, ru, vi, yue, zh.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public LanguageSpoken spoken(Boolean spoken) {
    this.spoken = spoken;
    return this;
  }

  /**
   * At least one member of the staff can speak the language.
   * @return spoken
   */
  @javax.annotation.Nullable
  public Boolean getSpoken() {
    return spoken;
  }

  public void setSpoken(Boolean spoken) {
    this.spoken = spoken;
  }


  public LanguageSpoken spokenException(SpokenExceptionEnum spokenException) {
    this.spokenException = spokenException;
    return this;
  }

  /**
   * Spoken exception.
   * @return spokenException
   */
  @javax.annotation.Nullable
  public SpokenExceptionEnum getSpokenException() {
    return spokenException;
  }

  public void setSpokenException(SpokenExceptionEnum spokenException) {
    this.spokenException = spokenException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguageSpoken languageSpoken = (LanguageSpoken) o;
    return Objects.equals(this.languageCode, languageSpoken.languageCode) &&
        Objects.equals(this.spoken, languageSpoken.spoken) &&
        Objects.equals(this.spokenException, languageSpoken.spokenException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, spoken, spokenException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguageSpoken {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    spoken: ").append(toIndentedString(spoken)).append("\n");
    sb.append("    spokenException: ").append(toIndentedString(spokenException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languageCode");
    openapiFields.add("spoken");
    openapiFields.add("spokenException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LanguageSpoken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LanguageSpoken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LanguageSpoken is not found in the empty JSON string", LanguageSpoken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LanguageSpoken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LanguageSpoken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("spokenException") != null && !jsonObj.get("spokenException").isJsonNull()) && !jsonObj.get("spokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spokenException").toString()));
      }
      // validate the optional field `spokenException`
      if (jsonObj.get("spokenException") != null && !jsonObj.get("spokenException").isJsonNull()) {
        SpokenExceptionEnum.validateJsonElement(jsonObj.get("spokenException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LanguageSpoken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LanguageSpoken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LanguageSpoken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LanguageSpoken.class));

       return (TypeAdapter<T>) new TypeAdapter<LanguageSpoken>() {
           @Override
           public void write(JsonWriter out, LanguageSpoken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LanguageSpoken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LanguageSpoken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LanguageSpoken
   * @throws IOException if the JSON string is invalid with respect to LanguageSpoken
   */
  public static LanguageSpoken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LanguageSpoken.class);
  }

  /**
   * Convert an instance of LanguageSpoken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

