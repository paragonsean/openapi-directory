/*
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about eating features in the living area.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:19.182361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingAreaEating {
  public static final String SERIALIZED_NAME_COFFEE_MAKER = "coffeeMaker";
  @SerializedName(SERIALIZED_NAME_COFFEE_MAKER)
  private Boolean coffeeMaker;

  /**
   * Coffee maker exception.
   */
  @JsonAdapter(CoffeeMakerExceptionEnum.Adapter.class)
  public enum CoffeeMakerExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CoffeeMakerExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CoffeeMakerExceptionEnum fromValue(String value) {
      for (CoffeeMakerExceptionEnum b : CoffeeMakerExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CoffeeMakerExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CoffeeMakerExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CoffeeMakerExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CoffeeMakerExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CoffeeMakerExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COFFEE_MAKER_EXCEPTION = "coffeeMakerException";
  @SerializedName(SERIALIZED_NAME_COFFEE_MAKER_EXCEPTION)
  private CoffeeMakerExceptionEnum coffeeMakerException;

  public static final String SERIALIZED_NAME_COOKWARE = "cookware";
  @SerializedName(SERIALIZED_NAME_COOKWARE)
  private Boolean cookware;

  /**
   * Cookware exception.
   */
  @JsonAdapter(CookwareExceptionEnum.Adapter.class)
  public enum CookwareExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CookwareExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CookwareExceptionEnum fromValue(String value) {
      for (CookwareExceptionEnum b : CookwareExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CookwareExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CookwareExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CookwareExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CookwareExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CookwareExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COOKWARE_EXCEPTION = "cookwareException";
  @SerializedName(SERIALIZED_NAME_COOKWARE_EXCEPTION)
  private CookwareExceptionEnum cookwareException;

  public static final String SERIALIZED_NAME_DISHWASHER = "dishwasher";
  @SerializedName(SERIALIZED_NAME_DISHWASHER)
  private Boolean dishwasher;

  /**
   * Dishwasher exception.
   */
  @JsonAdapter(DishwasherExceptionEnum.Adapter.class)
  public enum DishwasherExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DishwasherExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DishwasherExceptionEnum fromValue(String value) {
      for (DishwasherExceptionEnum b : DishwasherExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DishwasherExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DishwasherExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DishwasherExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DishwasherExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DishwasherExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISHWASHER_EXCEPTION = "dishwasherException";
  @SerializedName(SERIALIZED_NAME_DISHWASHER_EXCEPTION)
  private DishwasherExceptionEnum dishwasherException;

  public static final String SERIALIZED_NAME_INDOOR_GRILL = "indoorGrill";
  @SerializedName(SERIALIZED_NAME_INDOOR_GRILL)
  private Boolean indoorGrill;

  /**
   * Indoor grill exception.
   */
  @JsonAdapter(IndoorGrillExceptionEnum.Adapter.class)
  public enum IndoorGrillExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndoorGrillExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndoorGrillExceptionEnum fromValue(String value) {
      for (IndoorGrillExceptionEnum b : IndoorGrillExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndoorGrillExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndoorGrillExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndoorGrillExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndoorGrillExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndoorGrillExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDOOR_GRILL_EXCEPTION = "indoorGrillException";
  @SerializedName(SERIALIZED_NAME_INDOOR_GRILL_EXCEPTION)
  private IndoorGrillExceptionEnum indoorGrillException;

  public static final String SERIALIZED_NAME_KETTLE = "kettle";
  @SerializedName(SERIALIZED_NAME_KETTLE)
  private Boolean kettle;

  /**
   * Kettle exception.
   */
  @JsonAdapter(KettleExceptionEnum.Adapter.class)
  public enum KettleExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KettleExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KettleExceptionEnum fromValue(String value) {
      for (KettleExceptionEnum b : KettleExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KettleExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KettleExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KettleExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KettleExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KettleExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KETTLE_EXCEPTION = "kettleException";
  @SerializedName(SERIALIZED_NAME_KETTLE_EXCEPTION)
  private KettleExceptionEnum kettleException;

  public static final String SERIALIZED_NAME_KITCHEN_AVAILABLE = "kitchenAvailable";
  @SerializedName(SERIALIZED_NAME_KITCHEN_AVAILABLE)
  private Boolean kitchenAvailable;

  /**
   * Kitchen available exception.
   */
  @JsonAdapter(KitchenAvailableExceptionEnum.Adapter.class)
  public enum KitchenAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KitchenAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KitchenAvailableExceptionEnum fromValue(String value) {
      for (KitchenAvailableExceptionEnum b : KitchenAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KitchenAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KitchenAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KitchenAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KitchenAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KitchenAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KITCHEN_AVAILABLE_EXCEPTION = "kitchenAvailableException";
  @SerializedName(SERIALIZED_NAME_KITCHEN_AVAILABLE_EXCEPTION)
  private KitchenAvailableExceptionEnum kitchenAvailableException;

  public static final String SERIALIZED_NAME_MICROWAVE = "microwave";
  @SerializedName(SERIALIZED_NAME_MICROWAVE)
  private Boolean microwave;

  /**
   * Microwave exception.
   */
  @JsonAdapter(MicrowaveExceptionEnum.Adapter.class)
  public enum MicrowaveExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MicrowaveExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MicrowaveExceptionEnum fromValue(String value) {
      for (MicrowaveExceptionEnum b : MicrowaveExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MicrowaveExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MicrowaveExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MicrowaveExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MicrowaveExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MicrowaveExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MICROWAVE_EXCEPTION = "microwaveException";
  @SerializedName(SERIALIZED_NAME_MICROWAVE_EXCEPTION)
  private MicrowaveExceptionEnum microwaveException;

  public static final String SERIALIZED_NAME_MINIBAR = "minibar";
  @SerializedName(SERIALIZED_NAME_MINIBAR)
  private Boolean minibar;

  /**
   * Minibar exception.
   */
  @JsonAdapter(MinibarExceptionEnum.Adapter.class)
  public enum MinibarExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MinibarExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinibarExceptionEnum fromValue(String value) {
      for (MinibarExceptionEnum b : MinibarExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinibarExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinibarExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinibarExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinibarExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinibarExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIBAR_EXCEPTION = "minibarException";
  @SerializedName(SERIALIZED_NAME_MINIBAR_EXCEPTION)
  private MinibarExceptionEnum minibarException;

  public static final String SERIALIZED_NAME_OUTDOOR_GRILL = "outdoorGrill";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_GRILL)
  private Boolean outdoorGrill;

  /**
   * Outdoor grill exception.
   */
  @JsonAdapter(OutdoorGrillExceptionEnum.Adapter.class)
  public enum OutdoorGrillExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OutdoorGrillExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutdoorGrillExceptionEnum fromValue(String value) {
      for (OutdoorGrillExceptionEnum b : OutdoorGrillExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutdoorGrillExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutdoorGrillExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutdoorGrillExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutdoorGrillExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutdoorGrillExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTDOOR_GRILL_EXCEPTION = "outdoorGrillException";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_GRILL_EXCEPTION)
  private OutdoorGrillExceptionEnum outdoorGrillException;

  public static final String SERIALIZED_NAME_OVEN = "oven";
  @SerializedName(SERIALIZED_NAME_OVEN)
  private Boolean oven;

  /**
   * Oven exception.
   */
  @JsonAdapter(OvenExceptionEnum.Adapter.class)
  public enum OvenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    OvenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OvenExceptionEnum fromValue(String value) {
      for (OvenExceptionEnum b : OvenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OvenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OvenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OvenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OvenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OvenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OVEN_EXCEPTION = "ovenException";
  @SerializedName(SERIALIZED_NAME_OVEN_EXCEPTION)
  private OvenExceptionEnum ovenException;

  public static final String SERIALIZED_NAME_REFRIGERATOR = "refrigerator";
  @SerializedName(SERIALIZED_NAME_REFRIGERATOR)
  private Boolean refrigerator;

  /**
   * Refrigerator exception.
   */
  @JsonAdapter(RefrigeratorExceptionEnum.Adapter.class)
  public enum RefrigeratorExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RefrigeratorExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefrigeratorExceptionEnum fromValue(String value) {
      for (RefrigeratorExceptionEnum b : RefrigeratorExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefrigeratorExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefrigeratorExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefrigeratorExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefrigeratorExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefrigeratorExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFRIGERATOR_EXCEPTION = "refrigeratorException";
  @SerializedName(SERIALIZED_NAME_REFRIGERATOR_EXCEPTION)
  private RefrigeratorExceptionEnum refrigeratorException;

  public static final String SERIALIZED_NAME_SINK = "sink";
  @SerializedName(SERIALIZED_NAME_SINK)
  private Boolean sink;

  /**
   * Sink exception.
   */
  @JsonAdapter(SinkExceptionEnum.Adapter.class)
  public enum SinkExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SinkExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SinkExceptionEnum fromValue(String value) {
      for (SinkExceptionEnum b : SinkExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SinkExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SinkExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SinkExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SinkExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SinkExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SINK_EXCEPTION = "sinkException";
  @SerializedName(SERIALIZED_NAME_SINK_EXCEPTION)
  private SinkExceptionEnum sinkException;

  public static final String SERIALIZED_NAME_SNACKBAR = "snackbar";
  @SerializedName(SERIALIZED_NAME_SNACKBAR)
  private Boolean snackbar;

  /**
   * Snackbar exception.
   */
  @JsonAdapter(SnackbarExceptionEnum.Adapter.class)
  public enum SnackbarExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SnackbarExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SnackbarExceptionEnum fromValue(String value) {
      for (SnackbarExceptionEnum b : SnackbarExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SnackbarExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SnackbarExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SnackbarExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SnackbarExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SnackbarExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SNACKBAR_EXCEPTION = "snackbarException";
  @SerializedName(SERIALIZED_NAME_SNACKBAR_EXCEPTION)
  private SnackbarExceptionEnum snackbarException;

  public static final String SERIALIZED_NAME_STOVE = "stove";
  @SerializedName(SERIALIZED_NAME_STOVE)
  private Boolean stove;

  /**
   * Stove exception.
   */
  @JsonAdapter(StoveExceptionEnum.Adapter.class)
  public enum StoveExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    StoveExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StoveExceptionEnum fromValue(String value) {
      for (StoveExceptionEnum b : StoveExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StoveExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StoveExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StoveExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StoveExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StoveExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STOVE_EXCEPTION = "stoveException";
  @SerializedName(SERIALIZED_NAME_STOVE_EXCEPTION)
  private StoveExceptionEnum stoveException;

  public static final String SERIALIZED_NAME_TEA_STATION = "teaStation";
  @SerializedName(SERIALIZED_NAME_TEA_STATION)
  private Boolean teaStation;

  /**
   * Tea station exception.
   */
  @JsonAdapter(TeaStationExceptionEnum.Adapter.class)
  public enum TeaStationExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TeaStationExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TeaStationExceptionEnum fromValue(String value) {
      for (TeaStationExceptionEnum b : TeaStationExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TeaStationExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TeaStationExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TeaStationExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TeaStationExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TeaStationExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEA_STATION_EXCEPTION = "teaStationException";
  @SerializedName(SERIALIZED_NAME_TEA_STATION_EXCEPTION)
  private TeaStationExceptionEnum teaStationException;

  public static final String SERIALIZED_NAME_TOASTER = "toaster";
  @SerializedName(SERIALIZED_NAME_TOASTER)
  private Boolean toaster;

  /**
   * Toaster exception.
   */
  @JsonAdapter(ToasterExceptionEnum.Adapter.class)
  public enum ToasterExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ToasterExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToasterExceptionEnum fromValue(String value) {
      for (ToasterExceptionEnum b : ToasterExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToasterExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToasterExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToasterExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToasterExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToasterExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOASTER_EXCEPTION = "toasterException";
  @SerializedName(SERIALIZED_NAME_TOASTER_EXCEPTION)
  private ToasterExceptionEnum toasterException;

  public LivingAreaEating() {
  }

  public LivingAreaEating coffeeMaker(Boolean coffeeMaker) {
    this.coffeeMaker = coffeeMaker;
    return this;
  }

  /**
   * Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.
   * @return coffeeMaker
   */
  @javax.annotation.Nullable
  public Boolean getCoffeeMaker() {
    return coffeeMaker;
  }

  public void setCoffeeMaker(Boolean coffeeMaker) {
    this.coffeeMaker = coffeeMaker;
  }


  public LivingAreaEating coffeeMakerException(CoffeeMakerExceptionEnum coffeeMakerException) {
    this.coffeeMakerException = coffeeMakerException;
    return this;
  }

  /**
   * Coffee maker exception.
   * @return coffeeMakerException
   */
  @javax.annotation.Nullable
  public CoffeeMakerExceptionEnum getCoffeeMakerException() {
    return coffeeMakerException;
  }

  public void setCoffeeMakerException(CoffeeMakerExceptionEnum coffeeMakerException) {
    this.coffeeMakerException = coffeeMakerException;
  }


  public LivingAreaEating cookware(Boolean cookware) {
    this.cookware = cookware;
    return this;
  }

  /**
   * Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
   * @return cookware
   */
  @javax.annotation.Nullable
  public Boolean getCookware() {
    return cookware;
  }

  public void setCookware(Boolean cookware) {
    this.cookware = cookware;
  }


  public LivingAreaEating cookwareException(CookwareExceptionEnum cookwareException) {
    this.cookwareException = cookwareException;
    return this;
  }

  /**
   * Cookware exception.
   * @return cookwareException
   */
  @javax.annotation.Nullable
  public CookwareExceptionEnum getCookwareException() {
    return cookwareException;
  }

  public void setCookwareException(CookwareExceptionEnum cookwareException) {
    this.cookwareException = cookwareException;
  }


  public LivingAreaEating dishwasher(Boolean dishwasher) {
    this.dishwasher = dishwasher;
    return this;
  }

  /**
   * Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.
   * @return dishwasher
   */
  @javax.annotation.Nullable
  public Boolean getDishwasher() {
    return dishwasher;
  }

  public void setDishwasher(Boolean dishwasher) {
    this.dishwasher = dishwasher;
  }


  public LivingAreaEating dishwasherException(DishwasherExceptionEnum dishwasherException) {
    this.dishwasherException = dishwasherException;
    return this;
  }

  /**
   * Dishwasher exception.
   * @return dishwasherException
   */
  @javax.annotation.Nullable
  public DishwasherExceptionEnum getDishwasherException() {
    return dishwasherException;
  }

  public void setDishwasherException(DishwasherExceptionEnum dishwasherException) {
    this.dishwasherException = dishwasherException;
  }


  public LivingAreaEating indoorGrill(Boolean indoorGrill) {
    this.indoorGrill = indoorGrill;
    return this;
  }

  /**
   * Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.
   * @return indoorGrill
   */
  @javax.annotation.Nullable
  public Boolean getIndoorGrill() {
    return indoorGrill;
  }

  public void setIndoorGrill(Boolean indoorGrill) {
    this.indoorGrill = indoorGrill;
  }


  public LivingAreaEating indoorGrillException(IndoorGrillExceptionEnum indoorGrillException) {
    this.indoorGrillException = indoorGrillException;
    return this;
  }

  /**
   * Indoor grill exception.
   * @return indoorGrillException
   */
  @javax.annotation.Nullable
  public IndoorGrillExceptionEnum getIndoorGrillException() {
    return indoorGrillException;
  }

  public void setIndoorGrillException(IndoorGrillExceptionEnum indoorGrillException) {
    this.indoorGrillException = indoorGrillException;
  }


  public LivingAreaEating kettle(Boolean kettle) {
    this.kettle = kettle;
    return this;
  }

  /**
   * Kettle. A covered container with a handle and a spout used for boiling water.
   * @return kettle
   */
  @javax.annotation.Nullable
  public Boolean getKettle() {
    return kettle;
  }

  public void setKettle(Boolean kettle) {
    this.kettle = kettle;
  }


  public LivingAreaEating kettleException(KettleExceptionEnum kettleException) {
    this.kettleException = kettleException;
    return this;
  }

  /**
   * Kettle exception.
   * @return kettleException
   */
  @javax.annotation.Nullable
  public KettleExceptionEnum getKettleException() {
    return kettleException;
  }

  public void setKettleException(KettleExceptionEnum kettleException) {
    this.kettleException = kettleException;
  }


  public LivingAreaEating kitchenAvailable(Boolean kitchenAvailable) {
    this.kitchenAvailable = kitchenAvailable;
    return this;
  }

  /**
   * Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.
   * @return kitchenAvailable
   */
  @javax.annotation.Nullable
  public Boolean getKitchenAvailable() {
    return kitchenAvailable;
  }

  public void setKitchenAvailable(Boolean kitchenAvailable) {
    this.kitchenAvailable = kitchenAvailable;
  }


  public LivingAreaEating kitchenAvailableException(KitchenAvailableExceptionEnum kitchenAvailableException) {
    this.kitchenAvailableException = kitchenAvailableException;
    return this;
  }

  /**
   * Kitchen available exception.
   * @return kitchenAvailableException
   */
  @javax.annotation.Nullable
  public KitchenAvailableExceptionEnum getKitchenAvailableException() {
    return kitchenAvailableException;
  }

  public void setKitchenAvailableException(KitchenAvailableExceptionEnum kitchenAvailableException) {
    this.kitchenAvailableException = kitchenAvailableException;
  }


  public LivingAreaEating microwave(Boolean microwave) {
    this.microwave = microwave;
    return this;
  }

  /**
   * Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.
   * @return microwave
   */
  @javax.annotation.Nullable
  public Boolean getMicrowave() {
    return microwave;
  }

  public void setMicrowave(Boolean microwave) {
    this.microwave = microwave;
  }


  public LivingAreaEating microwaveException(MicrowaveExceptionEnum microwaveException) {
    this.microwaveException = microwaveException;
    return this;
  }

  /**
   * Microwave exception.
   * @return microwaveException
   */
  @javax.annotation.Nullable
  public MicrowaveExceptionEnum getMicrowaveException() {
    return microwaveException;
  }

  public void setMicrowaveException(MicrowaveExceptionEnum microwaveException) {
    this.microwaveException = microwaveException;
  }


  public LivingAreaEating minibar(Boolean minibar) {
    this.minibar = minibar;
    return this;
  }

  /**
   * Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
   * @return minibar
   */
  @javax.annotation.Nullable
  public Boolean getMinibar() {
    return minibar;
  }

  public void setMinibar(Boolean minibar) {
    this.minibar = minibar;
  }


  public LivingAreaEating minibarException(MinibarExceptionEnum minibarException) {
    this.minibarException = minibarException;
    return this;
  }

  /**
   * Minibar exception.
   * @return minibarException
   */
  @javax.annotation.Nullable
  public MinibarExceptionEnum getMinibarException() {
    return minibarException;
  }

  public void setMinibarException(MinibarExceptionEnum minibarException) {
    this.minibarException = minibarException;
  }


  public LivingAreaEating outdoorGrill(Boolean outdoorGrill) {
    this.outdoorGrill = outdoorGrill;
    return this;
  }

  /**
   * Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.
   * @return outdoorGrill
   */
  @javax.annotation.Nullable
  public Boolean getOutdoorGrill() {
    return outdoorGrill;
  }

  public void setOutdoorGrill(Boolean outdoorGrill) {
    this.outdoorGrill = outdoorGrill;
  }


  public LivingAreaEating outdoorGrillException(OutdoorGrillExceptionEnum outdoorGrillException) {
    this.outdoorGrillException = outdoorGrillException;
    return this;
  }

  /**
   * Outdoor grill exception.
   * @return outdoorGrillException
   */
  @javax.annotation.Nullable
  public OutdoorGrillExceptionEnum getOutdoorGrillException() {
    return outdoorGrillException;
  }

  public void setOutdoorGrillException(OutdoorGrillExceptionEnum outdoorGrillException) {
    this.outdoorGrillException = outdoorGrillException;
  }


  public LivingAreaEating oven(Boolean oven) {
    this.oven = oven;
    return this;
  }

  /**
   * Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.
   * @return oven
   */
  @javax.annotation.Nullable
  public Boolean getOven() {
    return oven;
  }

  public void setOven(Boolean oven) {
    this.oven = oven;
  }


  public LivingAreaEating ovenException(OvenExceptionEnum ovenException) {
    this.ovenException = ovenException;
    return this;
  }

  /**
   * Oven exception.
   * @return ovenException
   */
  @javax.annotation.Nullable
  public OvenExceptionEnum getOvenException() {
    return ovenException;
  }

  public void setOvenException(OvenExceptionEnum ovenException) {
    this.ovenException = ovenException;
  }


  public LivingAreaEating refrigerator(Boolean refrigerator) {
    this.refrigerator = refrigerator;
    return this;
  }

  /**
   * Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.
   * @return refrigerator
   */
  @javax.annotation.Nullable
  public Boolean getRefrigerator() {
    return refrigerator;
  }

  public void setRefrigerator(Boolean refrigerator) {
    this.refrigerator = refrigerator;
  }


  public LivingAreaEating refrigeratorException(RefrigeratorExceptionEnum refrigeratorException) {
    this.refrigeratorException = refrigeratorException;
    return this;
  }

  /**
   * Refrigerator exception.
   * @return refrigeratorException
   */
  @javax.annotation.Nullable
  public RefrigeratorExceptionEnum getRefrigeratorException() {
    return refrigeratorException;
  }

  public void setRefrigeratorException(RefrigeratorExceptionEnum refrigeratorException) {
    this.refrigeratorException = refrigeratorException;
  }


  public LivingAreaEating sink(Boolean sink) {
    this.sink = sink;
    return this;
  }

  /**
   * Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.
   * @return sink
   */
  @javax.annotation.Nullable
  public Boolean getSink() {
    return sink;
  }

  public void setSink(Boolean sink) {
    this.sink = sink;
  }


  public LivingAreaEating sinkException(SinkExceptionEnum sinkException) {
    this.sinkException = sinkException;
    return this;
  }

  /**
   * Sink exception.
   * @return sinkException
   */
  @javax.annotation.Nullable
  public SinkExceptionEnum getSinkException() {
    return sinkException;
  }

  public void setSinkException(SinkExceptionEnum sinkException) {
    this.sinkException = sinkException;
  }


  public LivingAreaEating snackbar(Boolean snackbar) {
    this.snackbar = snackbar;
    return this;
  }

  /**
   * Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.
   * @return snackbar
   */
  @javax.annotation.Nullable
  public Boolean getSnackbar() {
    return snackbar;
  }

  public void setSnackbar(Boolean snackbar) {
    this.snackbar = snackbar;
  }


  public LivingAreaEating snackbarException(SnackbarExceptionEnum snackbarException) {
    this.snackbarException = snackbarException;
    return this;
  }

  /**
   * Snackbar exception.
   * @return snackbarException
   */
  @javax.annotation.Nullable
  public SnackbarExceptionEnum getSnackbarException() {
    return snackbarException;
  }

  public void setSnackbarException(SnackbarExceptionEnum snackbarException) {
    this.snackbarException = snackbarException;
  }


  public LivingAreaEating stove(Boolean stove) {
    this.stove = stove;
    return this;
  }

  /**
   * Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.
   * @return stove
   */
  @javax.annotation.Nullable
  public Boolean getStove() {
    return stove;
  }

  public void setStove(Boolean stove) {
    this.stove = stove;
  }


  public LivingAreaEating stoveException(StoveExceptionEnum stoveException) {
    this.stoveException = stoveException;
    return this;
  }

  /**
   * Stove exception.
   * @return stoveException
   */
  @javax.annotation.Nullable
  public StoveExceptionEnum getStoveException() {
    return stoveException;
  }

  public void setStoveException(StoveExceptionEnum stoveException) {
    this.stoveException = stoveException;
  }


  public LivingAreaEating teaStation(Boolean teaStation) {
    this.teaStation = teaStation;
    return this;
  }

  /**
   * Tea station. A small area with the supplies needed to heat water and make tea.
   * @return teaStation
   */
  @javax.annotation.Nullable
  public Boolean getTeaStation() {
    return teaStation;
  }

  public void setTeaStation(Boolean teaStation) {
    this.teaStation = teaStation;
  }


  public LivingAreaEating teaStationException(TeaStationExceptionEnum teaStationException) {
    this.teaStationException = teaStationException;
    return this;
  }

  /**
   * Tea station exception.
   * @return teaStationException
   */
  @javax.annotation.Nullable
  public TeaStationExceptionEnum getTeaStationException() {
    return teaStationException;
  }

  public void setTeaStationException(TeaStationExceptionEnum teaStationException) {
    this.teaStationException = teaStationException;
  }


  public LivingAreaEating toaster(Boolean toaster) {
    this.toaster = toaster;
    return this;
  }

  /**
   * Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.
   * @return toaster
   */
  @javax.annotation.Nullable
  public Boolean getToaster() {
    return toaster;
  }

  public void setToaster(Boolean toaster) {
    this.toaster = toaster;
  }


  public LivingAreaEating toasterException(ToasterExceptionEnum toasterException) {
    this.toasterException = toasterException;
    return this;
  }

  /**
   * Toaster exception.
   * @return toasterException
   */
  @javax.annotation.Nullable
  public ToasterExceptionEnum getToasterException() {
    return toasterException;
  }

  public void setToasterException(ToasterExceptionEnum toasterException) {
    this.toasterException = toasterException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingAreaEating livingAreaEating = (LivingAreaEating) o;
    return Objects.equals(this.coffeeMaker, livingAreaEating.coffeeMaker) &&
        Objects.equals(this.coffeeMakerException, livingAreaEating.coffeeMakerException) &&
        Objects.equals(this.cookware, livingAreaEating.cookware) &&
        Objects.equals(this.cookwareException, livingAreaEating.cookwareException) &&
        Objects.equals(this.dishwasher, livingAreaEating.dishwasher) &&
        Objects.equals(this.dishwasherException, livingAreaEating.dishwasherException) &&
        Objects.equals(this.indoorGrill, livingAreaEating.indoorGrill) &&
        Objects.equals(this.indoorGrillException, livingAreaEating.indoorGrillException) &&
        Objects.equals(this.kettle, livingAreaEating.kettle) &&
        Objects.equals(this.kettleException, livingAreaEating.kettleException) &&
        Objects.equals(this.kitchenAvailable, livingAreaEating.kitchenAvailable) &&
        Objects.equals(this.kitchenAvailableException, livingAreaEating.kitchenAvailableException) &&
        Objects.equals(this.microwave, livingAreaEating.microwave) &&
        Objects.equals(this.microwaveException, livingAreaEating.microwaveException) &&
        Objects.equals(this.minibar, livingAreaEating.minibar) &&
        Objects.equals(this.minibarException, livingAreaEating.minibarException) &&
        Objects.equals(this.outdoorGrill, livingAreaEating.outdoorGrill) &&
        Objects.equals(this.outdoorGrillException, livingAreaEating.outdoorGrillException) &&
        Objects.equals(this.oven, livingAreaEating.oven) &&
        Objects.equals(this.ovenException, livingAreaEating.ovenException) &&
        Objects.equals(this.refrigerator, livingAreaEating.refrigerator) &&
        Objects.equals(this.refrigeratorException, livingAreaEating.refrigeratorException) &&
        Objects.equals(this.sink, livingAreaEating.sink) &&
        Objects.equals(this.sinkException, livingAreaEating.sinkException) &&
        Objects.equals(this.snackbar, livingAreaEating.snackbar) &&
        Objects.equals(this.snackbarException, livingAreaEating.snackbarException) &&
        Objects.equals(this.stove, livingAreaEating.stove) &&
        Objects.equals(this.stoveException, livingAreaEating.stoveException) &&
        Objects.equals(this.teaStation, livingAreaEating.teaStation) &&
        Objects.equals(this.teaStationException, livingAreaEating.teaStationException) &&
        Objects.equals(this.toaster, livingAreaEating.toaster) &&
        Objects.equals(this.toasterException, livingAreaEating.toasterException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coffeeMaker, coffeeMakerException, cookware, cookwareException, dishwasher, dishwasherException, indoorGrill, indoorGrillException, kettle, kettleException, kitchenAvailable, kitchenAvailableException, microwave, microwaveException, minibar, minibarException, outdoorGrill, outdoorGrillException, oven, ovenException, refrigerator, refrigeratorException, sink, sinkException, snackbar, snackbarException, stove, stoveException, teaStation, teaStationException, toaster, toasterException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingAreaEating {\n");
    sb.append("    coffeeMaker: ").append(toIndentedString(coffeeMaker)).append("\n");
    sb.append("    coffeeMakerException: ").append(toIndentedString(coffeeMakerException)).append("\n");
    sb.append("    cookware: ").append(toIndentedString(cookware)).append("\n");
    sb.append("    cookwareException: ").append(toIndentedString(cookwareException)).append("\n");
    sb.append("    dishwasher: ").append(toIndentedString(dishwasher)).append("\n");
    sb.append("    dishwasherException: ").append(toIndentedString(dishwasherException)).append("\n");
    sb.append("    indoorGrill: ").append(toIndentedString(indoorGrill)).append("\n");
    sb.append("    indoorGrillException: ").append(toIndentedString(indoorGrillException)).append("\n");
    sb.append("    kettle: ").append(toIndentedString(kettle)).append("\n");
    sb.append("    kettleException: ").append(toIndentedString(kettleException)).append("\n");
    sb.append("    kitchenAvailable: ").append(toIndentedString(kitchenAvailable)).append("\n");
    sb.append("    kitchenAvailableException: ").append(toIndentedString(kitchenAvailableException)).append("\n");
    sb.append("    microwave: ").append(toIndentedString(microwave)).append("\n");
    sb.append("    microwaveException: ").append(toIndentedString(microwaveException)).append("\n");
    sb.append("    minibar: ").append(toIndentedString(minibar)).append("\n");
    sb.append("    minibarException: ").append(toIndentedString(minibarException)).append("\n");
    sb.append("    outdoorGrill: ").append(toIndentedString(outdoorGrill)).append("\n");
    sb.append("    outdoorGrillException: ").append(toIndentedString(outdoorGrillException)).append("\n");
    sb.append("    oven: ").append(toIndentedString(oven)).append("\n");
    sb.append("    ovenException: ").append(toIndentedString(ovenException)).append("\n");
    sb.append("    refrigerator: ").append(toIndentedString(refrigerator)).append("\n");
    sb.append("    refrigeratorException: ").append(toIndentedString(refrigeratorException)).append("\n");
    sb.append("    sink: ").append(toIndentedString(sink)).append("\n");
    sb.append("    sinkException: ").append(toIndentedString(sinkException)).append("\n");
    sb.append("    snackbar: ").append(toIndentedString(snackbar)).append("\n");
    sb.append("    snackbarException: ").append(toIndentedString(snackbarException)).append("\n");
    sb.append("    stove: ").append(toIndentedString(stove)).append("\n");
    sb.append("    stoveException: ").append(toIndentedString(stoveException)).append("\n");
    sb.append("    teaStation: ").append(toIndentedString(teaStation)).append("\n");
    sb.append("    teaStationException: ").append(toIndentedString(teaStationException)).append("\n");
    sb.append("    toaster: ").append(toIndentedString(toaster)).append("\n");
    sb.append("    toasterException: ").append(toIndentedString(toasterException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coffeeMaker");
    openapiFields.add("coffeeMakerException");
    openapiFields.add("cookware");
    openapiFields.add("cookwareException");
    openapiFields.add("dishwasher");
    openapiFields.add("dishwasherException");
    openapiFields.add("indoorGrill");
    openapiFields.add("indoorGrillException");
    openapiFields.add("kettle");
    openapiFields.add("kettleException");
    openapiFields.add("kitchenAvailable");
    openapiFields.add("kitchenAvailableException");
    openapiFields.add("microwave");
    openapiFields.add("microwaveException");
    openapiFields.add("minibar");
    openapiFields.add("minibarException");
    openapiFields.add("outdoorGrill");
    openapiFields.add("outdoorGrillException");
    openapiFields.add("oven");
    openapiFields.add("ovenException");
    openapiFields.add("refrigerator");
    openapiFields.add("refrigeratorException");
    openapiFields.add("sink");
    openapiFields.add("sinkException");
    openapiFields.add("snackbar");
    openapiFields.add("snackbarException");
    openapiFields.add("stove");
    openapiFields.add("stoveException");
    openapiFields.add("teaStation");
    openapiFields.add("teaStationException");
    openapiFields.add("toaster");
    openapiFields.add("toasterException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingAreaEating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingAreaEating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingAreaEating is not found in the empty JSON string", LivingAreaEating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingAreaEating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingAreaEating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coffeeMakerException") != null && !jsonObj.get("coffeeMakerException").isJsonNull()) && !jsonObj.get("coffeeMakerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coffeeMakerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coffeeMakerException").toString()));
      }
      // validate the optional field `coffeeMakerException`
      if (jsonObj.get("coffeeMakerException") != null && !jsonObj.get("coffeeMakerException").isJsonNull()) {
        CoffeeMakerExceptionEnum.validateJsonElement(jsonObj.get("coffeeMakerException"));
      }
      if ((jsonObj.get("cookwareException") != null && !jsonObj.get("cookwareException").isJsonNull()) && !jsonObj.get("cookwareException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookwareException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookwareException").toString()));
      }
      // validate the optional field `cookwareException`
      if (jsonObj.get("cookwareException") != null && !jsonObj.get("cookwareException").isJsonNull()) {
        CookwareExceptionEnum.validateJsonElement(jsonObj.get("cookwareException"));
      }
      if ((jsonObj.get("dishwasherException") != null && !jsonObj.get("dishwasherException").isJsonNull()) && !jsonObj.get("dishwasherException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dishwasherException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dishwasherException").toString()));
      }
      // validate the optional field `dishwasherException`
      if (jsonObj.get("dishwasherException") != null && !jsonObj.get("dishwasherException").isJsonNull()) {
        DishwasherExceptionEnum.validateJsonElement(jsonObj.get("dishwasherException"));
      }
      if ((jsonObj.get("indoorGrillException") != null && !jsonObj.get("indoorGrillException").isJsonNull()) && !jsonObj.get("indoorGrillException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indoorGrillException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indoorGrillException").toString()));
      }
      // validate the optional field `indoorGrillException`
      if (jsonObj.get("indoorGrillException") != null && !jsonObj.get("indoorGrillException").isJsonNull()) {
        IndoorGrillExceptionEnum.validateJsonElement(jsonObj.get("indoorGrillException"));
      }
      if ((jsonObj.get("kettleException") != null && !jsonObj.get("kettleException").isJsonNull()) && !jsonObj.get("kettleException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kettleException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kettleException").toString()));
      }
      // validate the optional field `kettleException`
      if (jsonObj.get("kettleException") != null && !jsonObj.get("kettleException").isJsonNull()) {
        KettleExceptionEnum.validateJsonElement(jsonObj.get("kettleException"));
      }
      if ((jsonObj.get("kitchenAvailableException") != null && !jsonObj.get("kitchenAvailableException").isJsonNull()) && !jsonObj.get("kitchenAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kitchenAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kitchenAvailableException").toString()));
      }
      // validate the optional field `kitchenAvailableException`
      if (jsonObj.get("kitchenAvailableException") != null && !jsonObj.get("kitchenAvailableException").isJsonNull()) {
        KitchenAvailableExceptionEnum.validateJsonElement(jsonObj.get("kitchenAvailableException"));
      }
      if ((jsonObj.get("microwaveException") != null && !jsonObj.get("microwaveException").isJsonNull()) && !jsonObj.get("microwaveException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microwaveException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microwaveException").toString()));
      }
      // validate the optional field `microwaveException`
      if (jsonObj.get("microwaveException") != null && !jsonObj.get("microwaveException").isJsonNull()) {
        MicrowaveExceptionEnum.validateJsonElement(jsonObj.get("microwaveException"));
      }
      if ((jsonObj.get("minibarException") != null && !jsonObj.get("minibarException").isJsonNull()) && !jsonObj.get("minibarException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minibarException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minibarException").toString()));
      }
      // validate the optional field `minibarException`
      if (jsonObj.get("minibarException") != null && !jsonObj.get("minibarException").isJsonNull()) {
        MinibarExceptionEnum.validateJsonElement(jsonObj.get("minibarException"));
      }
      if ((jsonObj.get("outdoorGrillException") != null && !jsonObj.get("outdoorGrillException").isJsonNull()) && !jsonObj.get("outdoorGrillException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outdoorGrillException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outdoorGrillException").toString()));
      }
      // validate the optional field `outdoorGrillException`
      if (jsonObj.get("outdoorGrillException") != null && !jsonObj.get("outdoorGrillException").isJsonNull()) {
        OutdoorGrillExceptionEnum.validateJsonElement(jsonObj.get("outdoorGrillException"));
      }
      if ((jsonObj.get("ovenException") != null && !jsonObj.get("ovenException").isJsonNull()) && !jsonObj.get("ovenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ovenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ovenException").toString()));
      }
      // validate the optional field `ovenException`
      if (jsonObj.get("ovenException") != null && !jsonObj.get("ovenException").isJsonNull()) {
        OvenExceptionEnum.validateJsonElement(jsonObj.get("ovenException"));
      }
      if ((jsonObj.get("refrigeratorException") != null && !jsonObj.get("refrigeratorException").isJsonNull()) && !jsonObj.get("refrigeratorException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refrigeratorException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refrigeratorException").toString()));
      }
      // validate the optional field `refrigeratorException`
      if (jsonObj.get("refrigeratorException") != null && !jsonObj.get("refrigeratorException").isJsonNull()) {
        RefrigeratorExceptionEnum.validateJsonElement(jsonObj.get("refrigeratorException"));
      }
      if ((jsonObj.get("sinkException") != null && !jsonObj.get("sinkException").isJsonNull()) && !jsonObj.get("sinkException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sinkException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sinkException").toString()));
      }
      // validate the optional field `sinkException`
      if (jsonObj.get("sinkException") != null && !jsonObj.get("sinkException").isJsonNull()) {
        SinkExceptionEnum.validateJsonElement(jsonObj.get("sinkException"));
      }
      if ((jsonObj.get("snackbarException") != null && !jsonObj.get("snackbarException").isJsonNull()) && !jsonObj.get("snackbarException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snackbarException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snackbarException").toString()));
      }
      // validate the optional field `snackbarException`
      if (jsonObj.get("snackbarException") != null && !jsonObj.get("snackbarException").isJsonNull()) {
        SnackbarExceptionEnum.validateJsonElement(jsonObj.get("snackbarException"));
      }
      if ((jsonObj.get("stoveException") != null && !jsonObj.get("stoveException").isJsonNull()) && !jsonObj.get("stoveException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stoveException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stoveException").toString()));
      }
      // validate the optional field `stoveException`
      if (jsonObj.get("stoveException") != null && !jsonObj.get("stoveException").isJsonNull()) {
        StoveExceptionEnum.validateJsonElement(jsonObj.get("stoveException"));
      }
      if ((jsonObj.get("teaStationException") != null && !jsonObj.get("teaStationException").isJsonNull()) && !jsonObj.get("teaStationException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teaStationException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teaStationException").toString()));
      }
      // validate the optional field `teaStationException`
      if (jsonObj.get("teaStationException") != null && !jsonObj.get("teaStationException").isJsonNull()) {
        TeaStationExceptionEnum.validateJsonElement(jsonObj.get("teaStationException"));
      }
      if ((jsonObj.get("toasterException") != null && !jsonObj.get("toasterException").isJsonNull()) && !jsonObj.get("toasterException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toasterException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toasterException").toString()));
      }
      // validate the optional field `toasterException`
      if (jsonObj.get("toasterException") != null && !jsonObj.get("toasterException").isJsonNull()) {
        ToasterExceptionEnum.validateJsonElement(jsonObj.get("toasterException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingAreaEating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingAreaEating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingAreaEating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingAreaEating.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingAreaEating>() {
           @Override
           public void write(JsonWriter out, LivingAreaEating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingAreaEating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingAreaEating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingAreaEating
   * @throws IOException if the JSON string is invalid with respect to LivingAreaEating
   */
  public static LivingAreaEating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingAreaEating.class);
  }

  /**
   * Convert an instance of LivingAreaEating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

