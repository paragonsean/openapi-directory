/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Families model module.
 * @module model/Families
 * @version v1
 */
class Families {
    /**
     * Constructs a new <code>Families</code>.
     * Services and amenities for families and young guests.
     * @alias module:model/Families
     */
    constructor() { 
        
        Families.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Families</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Families} obj Optional instance to populate.
     * @return {module:model/Families} The populated <code>Families</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Families();

            if (data.hasOwnProperty('babysitting')) {
                obj['babysitting'] = ApiClient.convertToType(data['babysitting'], 'Boolean');
            }
            if (data.hasOwnProperty('babysittingException')) {
                obj['babysittingException'] = ApiClient.convertToType(data['babysittingException'], 'String');
            }
            if (data.hasOwnProperty('kidsActivities')) {
                obj['kidsActivities'] = ApiClient.convertToType(data['kidsActivities'], 'Boolean');
            }
            if (data.hasOwnProperty('kidsActivitiesException')) {
                obj['kidsActivitiesException'] = ApiClient.convertToType(data['kidsActivitiesException'], 'String');
            }
            if (data.hasOwnProperty('kidsClub')) {
                obj['kidsClub'] = ApiClient.convertToType(data['kidsClub'], 'Boolean');
            }
            if (data.hasOwnProperty('kidsClubException')) {
                obj['kidsClubException'] = ApiClient.convertToType(data['kidsClubException'], 'String');
            }
            if (data.hasOwnProperty('kidsFriendly')) {
                obj['kidsFriendly'] = ApiClient.convertToType(data['kidsFriendly'], 'Boolean');
            }
            if (data.hasOwnProperty('kidsFriendlyException')) {
                obj['kidsFriendlyException'] = ApiClient.convertToType(data['kidsFriendlyException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Families</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Families</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['babysittingException'] && !(typeof data['babysittingException'] === 'string' || data['babysittingException'] instanceof String)) {
            throw new Error("Expected the field `babysittingException` to be a primitive type in the JSON string but got " + data['babysittingException']);
        }
        // ensure the json data is a string
        if (data['kidsActivitiesException'] && !(typeof data['kidsActivitiesException'] === 'string' || data['kidsActivitiesException'] instanceof String)) {
            throw new Error("Expected the field `kidsActivitiesException` to be a primitive type in the JSON string but got " + data['kidsActivitiesException']);
        }
        // ensure the json data is a string
        if (data['kidsClubException'] && !(typeof data['kidsClubException'] === 'string' || data['kidsClubException'] instanceof String)) {
            throw new Error("Expected the field `kidsClubException` to be a primitive type in the JSON string but got " + data['kidsClubException']);
        }
        // ensure the json data is a string
        if (data['kidsFriendlyException'] && !(typeof data['kidsFriendlyException'] === 'string' || data['kidsFriendlyException'] instanceof String)) {
            throw new Error("Expected the field `kidsFriendlyException` to be a primitive type in the JSON string but got " + data['kidsFriendlyException']);
        }

        return true;
    }


}



/**
 * Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.
 * @member {Boolean} babysitting
 */
Families.prototype['babysitting'] = undefined;

/**
 * Babysitting exception.
 * @member {module:model/Families.BabysittingExceptionEnum} babysittingException
 */
Families.prototype['babysittingException'] = undefined;

/**
 * Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.
 * @member {Boolean} kidsActivities
 */
Families.prototype['kidsActivities'] = undefined;

/**
 * Kids activities exception.
 * @member {module:model/Families.KidsActivitiesExceptionEnum} kidsActivitiesException
 */
Families.prototype['kidsActivitiesException'] = undefined;

/**
 * Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.
 * @member {Boolean} kidsClub
 */
Families.prototype['kidsClub'] = undefined;

/**
 * Kids club exception.
 * @member {module:model/Families.KidsClubExceptionEnum} kidsClubException
 */
Families.prototype['kidsClubException'] = undefined;

/**
 * Kids friendly. The hotel has one or more special features for families with children, such as reduced rates, child-sized beds, kids' club, babysitting service, or suitable place to play on premises.
 * @member {Boolean} kidsFriendly
 */
Families.prototype['kidsFriendly'] = undefined;

/**
 * Kids friendly exception.
 * @member {module:model/Families.KidsFriendlyExceptionEnum} kidsFriendlyException
 */
Families.prototype['kidsFriendlyException'] = undefined;





/**
 * Allowed values for the <code>babysittingException</code> property.
 * @enum {String}
 * @readonly
 */
Families['BabysittingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>kidsActivitiesException</code> property.
 * @enum {String}
 * @readonly
 */
Families['KidsActivitiesExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>kidsClubException</code> property.
 * @enum {String}
 * @readonly
 */
Families['KidsClubExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>kidsFriendlyException</code> property.
 * @enum {String}
 * @readonly
 */
Families['KidsFriendlyExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default Families;

