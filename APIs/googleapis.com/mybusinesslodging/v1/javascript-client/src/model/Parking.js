/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Parking model module.
 * @module model/Parking
 * @version v1
 */
class Parking {
    /**
     * Constructs a new <code>Parking</code>.
     * Parking options at the property.
     * @alias module:model/Parking
     */
    constructor() { 
        
        Parking.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Parking</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parking} obj Optional instance to populate.
     * @return {module:model/Parking} The populated <code>Parking</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parking();

            if (data.hasOwnProperty('electricCarChargingStations')) {
                obj['electricCarChargingStations'] = ApiClient.convertToType(data['electricCarChargingStations'], 'Boolean');
            }
            if (data.hasOwnProperty('electricCarChargingStationsException')) {
                obj['electricCarChargingStationsException'] = ApiClient.convertToType(data['electricCarChargingStationsException'], 'String');
            }
            if (data.hasOwnProperty('freeParking')) {
                obj['freeParking'] = ApiClient.convertToType(data['freeParking'], 'Boolean');
            }
            if (data.hasOwnProperty('freeParkingException')) {
                obj['freeParkingException'] = ApiClient.convertToType(data['freeParkingException'], 'String');
            }
            if (data.hasOwnProperty('freeSelfParking')) {
                obj['freeSelfParking'] = ApiClient.convertToType(data['freeSelfParking'], 'Boolean');
            }
            if (data.hasOwnProperty('freeSelfParkingException')) {
                obj['freeSelfParkingException'] = ApiClient.convertToType(data['freeSelfParkingException'], 'String');
            }
            if (data.hasOwnProperty('freeValetParking')) {
                obj['freeValetParking'] = ApiClient.convertToType(data['freeValetParking'], 'Boolean');
            }
            if (data.hasOwnProperty('freeValetParkingException')) {
                obj['freeValetParkingException'] = ApiClient.convertToType(data['freeValetParkingException'], 'String');
            }
            if (data.hasOwnProperty('parkingAvailable')) {
                obj['parkingAvailable'] = ApiClient.convertToType(data['parkingAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('parkingAvailableException')) {
                obj['parkingAvailableException'] = ApiClient.convertToType(data['parkingAvailableException'], 'String');
            }
            if (data.hasOwnProperty('selfParkingAvailable')) {
                obj['selfParkingAvailable'] = ApiClient.convertToType(data['selfParkingAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('selfParkingAvailableException')) {
                obj['selfParkingAvailableException'] = ApiClient.convertToType(data['selfParkingAvailableException'], 'String');
            }
            if (data.hasOwnProperty('valetParkingAvailable')) {
                obj['valetParkingAvailable'] = ApiClient.convertToType(data['valetParkingAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('valetParkingAvailableException')) {
                obj['valetParkingAvailableException'] = ApiClient.convertToType(data['valetParkingAvailableException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Parking</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Parking</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['electricCarChargingStationsException'] && !(typeof data['electricCarChargingStationsException'] === 'string' || data['electricCarChargingStationsException'] instanceof String)) {
            throw new Error("Expected the field `electricCarChargingStationsException` to be a primitive type in the JSON string but got " + data['electricCarChargingStationsException']);
        }
        // ensure the json data is a string
        if (data['freeParkingException'] && !(typeof data['freeParkingException'] === 'string' || data['freeParkingException'] instanceof String)) {
            throw new Error("Expected the field `freeParkingException` to be a primitive type in the JSON string but got " + data['freeParkingException']);
        }
        // ensure the json data is a string
        if (data['freeSelfParkingException'] && !(typeof data['freeSelfParkingException'] === 'string' || data['freeSelfParkingException'] instanceof String)) {
            throw new Error("Expected the field `freeSelfParkingException` to be a primitive type in the JSON string but got " + data['freeSelfParkingException']);
        }
        // ensure the json data is a string
        if (data['freeValetParkingException'] && !(typeof data['freeValetParkingException'] === 'string' || data['freeValetParkingException'] instanceof String)) {
            throw new Error("Expected the field `freeValetParkingException` to be a primitive type in the JSON string but got " + data['freeValetParkingException']);
        }
        // ensure the json data is a string
        if (data['parkingAvailableException'] && !(typeof data['parkingAvailableException'] === 'string' || data['parkingAvailableException'] instanceof String)) {
            throw new Error("Expected the field `parkingAvailableException` to be a primitive type in the JSON string but got " + data['parkingAvailableException']);
        }
        // ensure the json data is a string
        if (data['selfParkingAvailableException'] && !(typeof data['selfParkingAvailableException'] === 'string' || data['selfParkingAvailableException'] instanceof String)) {
            throw new Error("Expected the field `selfParkingAvailableException` to be a primitive type in the JSON string but got " + data['selfParkingAvailableException']);
        }
        // ensure the json data is a string
        if (data['valetParkingAvailableException'] && !(typeof data['valetParkingAvailableException'] === 'string' || data['valetParkingAvailableException'] instanceof String)) {
            throw new Error("Expected the field `valetParkingAvailableException` to be a primitive type in the JSON string but got " + data['valetParkingAvailableException']);
        }

        return true;
    }


}



/**
 * Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.
 * @member {Boolean} electricCarChargingStations
 */
Parking.prototype['electricCarChargingStations'] = undefined;

/**
 * Electric car charging stations exception.
 * @member {module:model/Parking.ElectricCarChargingStationsExceptionEnum} electricCarChargingStationsException
 */
Parking.prototype['electricCarChargingStationsException'] = undefined;

/**
 * Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).
 * @member {Boolean} freeParking
 */
Parking.prototype['freeParking'] = undefined;

/**
 * Free parking exception.
 * @member {module:model/Parking.FreeParkingExceptionEnum} freeParkingException
 */
Parking.prototype['freeParkingException'] = undefined;

/**
 * Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.
 * @member {Boolean} freeSelfParking
 */
Parking.prototype['freeSelfParking'] = undefined;

/**
 * Free self parking exception.
 * @member {module:model/Parking.FreeSelfParkingExceptionEnum} freeSelfParkingException
 */
Parking.prototype['freeSelfParkingException'] = undefined;

/**
 * Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.
 * @member {Boolean} freeValetParking
 */
Parking.prototype['freeValetParking'] = undefined;

/**
 * Free valet parking exception.
 * @member {module:model/Parking.FreeValetParkingExceptionEnum} freeValetParkingException
 */
Parking.prototype['freeValetParkingException'] = undefined;

/**
 * Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.
 * @member {Boolean} parkingAvailable
 */
Parking.prototype['parkingAvailable'] = undefined;

/**
 * Parking available exception.
 * @member {module:model/Parking.ParkingAvailableExceptionEnum} parkingAvailableException
 */
Parking.prototype['parkingAvailableException'] = undefined;

/**
 * Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.
 * @member {Boolean} selfParkingAvailable
 */
Parking.prototype['selfParkingAvailable'] = undefined;

/**
 * Self parking available exception.
 * @member {module:model/Parking.SelfParkingAvailableExceptionEnum} selfParkingAvailableException
 */
Parking.prototype['selfParkingAvailableException'] = undefined;

/**
 * Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.
 * @member {Boolean} valetParkingAvailable
 */
Parking.prototype['valetParkingAvailable'] = undefined;

/**
 * Valet parking available exception.
 * @member {module:model/Parking.ValetParkingAvailableExceptionEnum} valetParkingAvailableException
 */
Parking.prototype['valetParkingAvailableException'] = undefined;





/**
 * Allowed values for the <code>electricCarChargingStationsException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['ElectricCarChargingStationsExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>freeParkingException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['FreeParkingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>freeSelfParkingException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['FreeSelfParkingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>freeValetParkingException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['FreeValetParkingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>parkingAvailableException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['ParkingAvailableExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>selfParkingAvailableException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['SelfParkingAvailableExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>valetParkingAvailableException</code> property.
 * @enum {String}
 * @readonly
 */
Parking['ValetParkingAvailableExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default Parking;

