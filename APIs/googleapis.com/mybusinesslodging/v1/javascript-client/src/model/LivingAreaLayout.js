/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LivingAreaLayout model module.
 * @module model/LivingAreaLayout
 * @version v1
 */
class LivingAreaLayout {
    /**
     * Constructs a new <code>LivingAreaLayout</code>.
     * Information about the layout of the living area.
     * @alias module:model/LivingAreaLayout
     */
    constructor() { 
        
        LivingAreaLayout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivingAreaLayout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivingAreaLayout} obj Optional instance to populate.
     * @return {module:model/LivingAreaLayout} The populated <code>LivingAreaLayout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivingAreaLayout();

            if (data.hasOwnProperty('balcony')) {
                obj['balcony'] = ApiClient.convertToType(data['balcony'], 'Boolean');
            }
            if (data.hasOwnProperty('balconyException')) {
                obj['balconyException'] = ApiClient.convertToType(data['balconyException'], 'String');
            }
            if (data.hasOwnProperty('livingAreaSqMeters')) {
                obj['livingAreaSqMeters'] = ApiClient.convertToType(data['livingAreaSqMeters'], 'Number');
            }
            if (data.hasOwnProperty('livingAreaSqMetersException')) {
                obj['livingAreaSqMetersException'] = ApiClient.convertToType(data['livingAreaSqMetersException'], 'String');
            }
            if (data.hasOwnProperty('loft')) {
                obj['loft'] = ApiClient.convertToType(data['loft'], 'Boolean');
            }
            if (data.hasOwnProperty('loftException')) {
                obj['loftException'] = ApiClient.convertToType(data['loftException'], 'String');
            }
            if (data.hasOwnProperty('nonSmoking')) {
                obj['nonSmoking'] = ApiClient.convertToType(data['nonSmoking'], 'Boolean');
            }
            if (data.hasOwnProperty('nonSmokingException')) {
                obj['nonSmokingException'] = ApiClient.convertToType(data['nonSmokingException'], 'String');
            }
            if (data.hasOwnProperty('patio')) {
                obj['patio'] = ApiClient.convertToType(data['patio'], 'Boolean');
            }
            if (data.hasOwnProperty('patioException')) {
                obj['patioException'] = ApiClient.convertToType(data['patioException'], 'String');
            }
            if (data.hasOwnProperty('stairs')) {
                obj['stairs'] = ApiClient.convertToType(data['stairs'], 'Boolean');
            }
            if (data.hasOwnProperty('stairsException')) {
                obj['stairsException'] = ApiClient.convertToType(data['stairsException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivingAreaLayout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivingAreaLayout</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['balconyException'] && !(typeof data['balconyException'] === 'string' || data['balconyException'] instanceof String)) {
            throw new Error("Expected the field `balconyException` to be a primitive type in the JSON string but got " + data['balconyException']);
        }
        // ensure the json data is a string
        if (data['livingAreaSqMetersException'] && !(typeof data['livingAreaSqMetersException'] === 'string' || data['livingAreaSqMetersException'] instanceof String)) {
            throw new Error("Expected the field `livingAreaSqMetersException` to be a primitive type in the JSON string but got " + data['livingAreaSqMetersException']);
        }
        // ensure the json data is a string
        if (data['loftException'] && !(typeof data['loftException'] === 'string' || data['loftException'] instanceof String)) {
            throw new Error("Expected the field `loftException` to be a primitive type in the JSON string but got " + data['loftException']);
        }
        // ensure the json data is a string
        if (data['nonSmokingException'] && !(typeof data['nonSmokingException'] === 'string' || data['nonSmokingException'] instanceof String)) {
            throw new Error("Expected the field `nonSmokingException` to be a primitive type in the JSON string but got " + data['nonSmokingException']);
        }
        // ensure the json data is a string
        if (data['patioException'] && !(typeof data['patioException'] === 'string' || data['patioException'] instanceof String)) {
            throw new Error("Expected the field `patioException` to be a primitive type in the JSON string but got " + data['patioException']);
        }
        // ensure the json data is a string
        if (data['stairsException'] && !(typeof data['stairsException'] === 'string' || data['stairsException'] instanceof String)) {
            throw new Error("Expected the field `stairsException` to be a primitive type in the JSON string but got " + data['stairsException']);
        }

        return true;
    }


}



/**
 * Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.
 * @member {Boolean} balcony
 */
LivingAreaLayout.prototype['balcony'] = undefined;

/**
 * Balcony exception.
 * @member {module:model/LivingAreaLayout.BalconyExceptionEnum} balconyException
 */
LivingAreaLayout.prototype['balconyException'] = undefined;

/**
 * Living area sq meters. The measurement in meters of the area of a guestroom's living space.
 * @member {Number} livingAreaSqMeters
 */
LivingAreaLayout.prototype['livingAreaSqMeters'] = undefined;

/**
 * Living area sq meters exception.
 * @member {module:model/LivingAreaLayout.LivingAreaSqMetersExceptionEnum} livingAreaSqMetersException
 */
LivingAreaLayout.prototype['livingAreaSqMetersException'] = undefined;

/**
 * Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.
 * @member {Boolean} loft
 */
LivingAreaLayout.prototype['loft'] = undefined;

/**
 * Loft exception.
 * @member {module:model/LivingAreaLayout.LoftExceptionEnum} loftException
 */
LivingAreaLayout.prototype['loftException'] = undefined;

/**
 * Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.
 * @member {Boolean} nonSmoking
 */
LivingAreaLayout.prototype['nonSmoking'] = undefined;

/**
 * Non smoking exception.
 * @member {module:model/LivingAreaLayout.NonSmokingExceptionEnum} nonSmokingException
 */
LivingAreaLayout.prototype['nonSmokingException'] = undefined;

/**
 * Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.
 * @member {Boolean} patio
 */
LivingAreaLayout.prototype['patio'] = undefined;

/**
 * Patio exception.
 * @member {module:model/LivingAreaLayout.PatioExceptionEnum} patioException
 */
LivingAreaLayout.prototype['patioException'] = undefined;

/**
 * Stairs. There are steps leading from one level or story to another in the unit.
 * @member {Boolean} stairs
 */
LivingAreaLayout.prototype['stairs'] = undefined;

/**
 * Stairs exception.
 * @member {module:model/LivingAreaLayout.StairsExceptionEnum} stairsException
 */
LivingAreaLayout.prototype['stairsException'] = undefined;





/**
 * Allowed values for the <code>balconyException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['BalconyExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>livingAreaSqMetersException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['LivingAreaSqMetersExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>loftException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['LoftExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>nonSmokingException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['NonSmokingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>patioException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['PatioExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>stairsException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaLayout['StairsExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default LivingAreaLayout;

