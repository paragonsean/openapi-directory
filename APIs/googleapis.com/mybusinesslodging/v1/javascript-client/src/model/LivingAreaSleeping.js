/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LivingAreaSleeping model module.
 * @module model/LivingAreaSleeping
 * @version v1
 */
class LivingAreaSleeping {
    /**
     * Constructs a new <code>LivingAreaSleeping</code>.
     * Information about sleeping features in the living area.
     * @alias module:model/LivingAreaSleeping
     */
    constructor() { 
        
        LivingAreaSleeping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivingAreaSleeping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivingAreaSleeping} obj Optional instance to populate.
     * @return {module:model/LivingAreaSleeping} The populated <code>LivingAreaSleeping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivingAreaSleeping();

            if (data.hasOwnProperty('bedsCount')) {
                obj['bedsCount'] = ApiClient.convertToType(data['bedsCount'], 'Number');
            }
            if (data.hasOwnProperty('bedsCountException')) {
                obj['bedsCountException'] = ApiClient.convertToType(data['bedsCountException'], 'String');
            }
            if (data.hasOwnProperty('bunkBedsCount')) {
                obj['bunkBedsCount'] = ApiClient.convertToType(data['bunkBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('bunkBedsCountException')) {
                obj['bunkBedsCountException'] = ApiClient.convertToType(data['bunkBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('cribsCount')) {
                obj['cribsCount'] = ApiClient.convertToType(data['cribsCount'], 'Number');
            }
            if (data.hasOwnProperty('cribsCountException')) {
                obj['cribsCountException'] = ApiClient.convertToType(data['cribsCountException'], 'String');
            }
            if (data.hasOwnProperty('doubleBedsCount')) {
                obj['doubleBedsCount'] = ApiClient.convertToType(data['doubleBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('doubleBedsCountException')) {
                obj['doubleBedsCountException'] = ApiClient.convertToType(data['doubleBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('featherPillows')) {
                obj['featherPillows'] = ApiClient.convertToType(data['featherPillows'], 'Boolean');
            }
            if (data.hasOwnProperty('featherPillowsException')) {
                obj['featherPillowsException'] = ApiClient.convertToType(data['featherPillowsException'], 'String');
            }
            if (data.hasOwnProperty('hypoallergenicBedding')) {
                obj['hypoallergenicBedding'] = ApiClient.convertToType(data['hypoallergenicBedding'], 'Boolean');
            }
            if (data.hasOwnProperty('hypoallergenicBeddingException')) {
                obj['hypoallergenicBeddingException'] = ApiClient.convertToType(data['hypoallergenicBeddingException'], 'String');
            }
            if (data.hasOwnProperty('kingBedsCount')) {
                obj['kingBedsCount'] = ApiClient.convertToType(data['kingBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('kingBedsCountException')) {
                obj['kingBedsCountException'] = ApiClient.convertToType(data['kingBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('memoryFoamPillows')) {
                obj['memoryFoamPillows'] = ApiClient.convertToType(data['memoryFoamPillows'], 'Boolean');
            }
            if (data.hasOwnProperty('memoryFoamPillowsException')) {
                obj['memoryFoamPillowsException'] = ApiClient.convertToType(data['memoryFoamPillowsException'], 'String');
            }
            if (data.hasOwnProperty('otherBedsCount')) {
                obj['otherBedsCount'] = ApiClient.convertToType(data['otherBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('otherBedsCountException')) {
                obj['otherBedsCountException'] = ApiClient.convertToType(data['otherBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('queenBedsCount')) {
                obj['queenBedsCount'] = ApiClient.convertToType(data['queenBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('queenBedsCountException')) {
                obj['queenBedsCountException'] = ApiClient.convertToType(data['queenBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('rollAwayBedsCount')) {
                obj['rollAwayBedsCount'] = ApiClient.convertToType(data['rollAwayBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('rollAwayBedsCountException')) {
                obj['rollAwayBedsCountException'] = ApiClient.convertToType(data['rollAwayBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('singleOrTwinBedsCount')) {
                obj['singleOrTwinBedsCount'] = ApiClient.convertToType(data['singleOrTwinBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('singleOrTwinBedsCountException')) {
                obj['singleOrTwinBedsCountException'] = ApiClient.convertToType(data['singleOrTwinBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('sofaBedsCount')) {
                obj['sofaBedsCount'] = ApiClient.convertToType(data['sofaBedsCount'], 'Number');
            }
            if (data.hasOwnProperty('sofaBedsCountException')) {
                obj['sofaBedsCountException'] = ApiClient.convertToType(data['sofaBedsCountException'], 'String');
            }
            if (data.hasOwnProperty('syntheticPillows')) {
                obj['syntheticPillows'] = ApiClient.convertToType(data['syntheticPillows'], 'Boolean');
            }
            if (data.hasOwnProperty('syntheticPillowsException')) {
                obj['syntheticPillowsException'] = ApiClient.convertToType(data['syntheticPillowsException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivingAreaSleeping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivingAreaSleeping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bedsCountException'] && !(typeof data['bedsCountException'] === 'string' || data['bedsCountException'] instanceof String)) {
            throw new Error("Expected the field `bedsCountException` to be a primitive type in the JSON string but got " + data['bedsCountException']);
        }
        // ensure the json data is a string
        if (data['bunkBedsCountException'] && !(typeof data['bunkBedsCountException'] === 'string' || data['bunkBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `bunkBedsCountException` to be a primitive type in the JSON string but got " + data['bunkBedsCountException']);
        }
        // ensure the json data is a string
        if (data['cribsCountException'] && !(typeof data['cribsCountException'] === 'string' || data['cribsCountException'] instanceof String)) {
            throw new Error("Expected the field `cribsCountException` to be a primitive type in the JSON string but got " + data['cribsCountException']);
        }
        // ensure the json data is a string
        if (data['doubleBedsCountException'] && !(typeof data['doubleBedsCountException'] === 'string' || data['doubleBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `doubleBedsCountException` to be a primitive type in the JSON string but got " + data['doubleBedsCountException']);
        }
        // ensure the json data is a string
        if (data['featherPillowsException'] && !(typeof data['featherPillowsException'] === 'string' || data['featherPillowsException'] instanceof String)) {
            throw new Error("Expected the field `featherPillowsException` to be a primitive type in the JSON string but got " + data['featherPillowsException']);
        }
        // ensure the json data is a string
        if (data['hypoallergenicBeddingException'] && !(typeof data['hypoallergenicBeddingException'] === 'string' || data['hypoallergenicBeddingException'] instanceof String)) {
            throw new Error("Expected the field `hypoallergenicBeddingException` to be a primitive type in the JSON string but got " + data['hypoallergenicBeddingException']);
        }
        // ensure the json data is a string
        if (data['kingBedsCountException'] && !(typeof data['kingBedsCountException'] === 'string' || data['kingBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `kingBedsCountException` to be a primitive type in the JSON string but got " + data['kingBedsCountException']);
        }
        // ensure the json data is a string
        if (data['memoryFoamPillowsException'] && !(typeof data['memoryFoamPillowsException'] === 'string' || data['memoryFoamPillowsException'] instanceof String)) {
            throw new Error("Expected the field `memoryFoamPillowsException` to be a primitive type in the JSON string but got " + data['memoryFoamPillowsException']);
        }
        // ensure the json data is a string
        if (data['otherBedsCountException'] && !(typeof data['otherBedsCountException'] === 'string' || data['otherBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `otherBedsCountException` to be a primitive type in the JSON string but got " + data['otherBedsCountException']);
        }
        // ensure the json data is a string
        if (data['queenBedsCountException'] && !(typeof data['queenBedsCountException'] === 'string' || data['queenBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `queenBedsCountException` to be a primitive type in the JSON string but got " + data['queenBedsCountException']);
        }
        // ensure the json data is a string
        if (data['rollAwayBedsCountException'] && !(typeof data['rollAwayBedsCountException'] === 'string' || data['rollAwayBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `rollAwayBedsCountException` to be a primitive type in the JSON string but got " + data['rollAwayBedsCountException']);
        }
        // ensure the json data is a string
        if (data['singleOrTwinBedsCountException'] && !(typeof data['singleOrTwinBedsCountException'] === 'string' || data['singleOrTwinBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `singleOrTwinBedsCountException` to be a primitive type in the JSON string but got " + data['singleOrTwinBedsCountException']);
        }
        // ensure the json data is a string
        if (data['sofaBedsCountException'] && !(typeof data['sofaBedsCountException'] === 'string' || data['sofaBedsCountException'] instanceof String)) {
            throw new Error("Expected the field `sofaBedsCountException` to be a primitive type in the JSON string but got " + data['sofaBedsCountException']);
        }
        // ensure the json data is a string
        if (data['syntheticPillowsException'] && !(typeof data['syntheticPillowsException'] === 'string' || data['syntheticPillowsException'] instanceof String)) {
            throw new Error("Expected the field `syntheticPillowsException` to be a primitive type in the JSON string but got " + data['syntheticPillowsException']);
        }

        return true;
    }


}



/**
 * Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
 * @member {Number} bedsCount
 */
LivingAreaSleeping.prototype['bedsCount'] = undefined;

/**
 * Beds count exception.
 * @member {module:model/LivingAreaSleeping.BedsCountExceptionEnum} bedsCountException
 */
LivingAreaSleeping.prototype['bedsCountException'] = undefined;

/**
 * Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
 * @member {Number} bunkBedsCount
 */
LivingAreaSleeping.prototype['bunkBedsCount'] = undefined;

/**
 * Bunk beds count exception.
 * @member {module:model/LivingAreaSleeping.BunkBedsCountExceptionEnum} bunkBedsCountException
 */
LivingAreaSleeping.prototype['bunkBedsCountException'] = undefined;

/**
 * Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
 * @member {Number} cribsCount
 */
LivingAreaSleeping.prototype['cribsCount'] = undefined;

/**
 * Cribs count exception.
 * @member {module:model/LivingAreaSleeping.CribsCountExceptionEnum} cribsCountException
 */
LivingAreaSleeping.prototype['cribsCountException'] = undefined;

/**
 * Double beds count. The number of medium beds measuring 53\"W x 75\"L (135cm x 191cm). Also known as full size bed.
 * @member {Number} doubleBedsCount
 */
LivingAreaSleeping.prototype['doubleBedsCount'] = undefined;

/**
 * Double beds count exception.
 * @member {module:model/LivingAreaSleeping.DoubleBedsCountExceptionEnum} doubleBedsCountException
 */
LivingAreaSleeping.prototype['doubleBedsCountException'] = undefined;

/**
 * Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
 * @member {Boolean} featherPillows
 */
LivingAreaSleeping.prototype['featherPillows'] = undefined;

/**
 * Feather pillows exception.
 * @member {module:model/LivingAreaSleeping.FeatherPillowsExceptionEnum} featherPillowsException
 */
LivingAreaSleeping.prototype['featherPillowsException'] = undefined;

/**
 * Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
 * @member {Boolean} hypoallergenicBedding
 */
LivingAreaSleeping.prototype['hypoallergenicBedding'] = undefined;

/**
 * Hypoallergenic bedding exception.
 * @member {module:model/LivingAreaSleeping.HypoallergenicBeddingExceptionEnum} hypoallergenicBeddingException
 */
LivingAreaSleeping.prototype['hypoallergenicBeddingException'] = undefined;

/**
 * King beds count. The number of large beds measuring 76\"W x 80\"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
 * @member {Number} kingBedsCount
 */
LivingAreaSleeping.prototype['kingBedsCount'] = undefined;

/**
 * King beds count exception.
 * @member {module:model/LivingAreaSleeping.KingBedsCountExceptionEnum} kingBedsCountException
 */
LivingAreaSleeping.prototype['kingBedsCountException'] = undefined;

/**
 * Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
 * @member {Boolean} memoryFoamPillows
 */
LivingAreaSleeping.prototype['memoryFoamPillows'] = undefined;

/**
 * Memory foam pillows exception.
 * @member {module:model/LivingAreaSleeping.MemoryFoamPillowsExceptionEnum} memoryFoamPillowsException
 */
LivingAreaSleeping.prototype['memoryFoamPillowsException'] = undefined;

/**
 * Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
 * @member {Number} otherBedsCount
 */
LivingAreaSleeping.prototype['otherBedsCount'] = undefined;

/**
 * Other beds count exception.
 * @member {module:model/LivingAreaSleeping.OtherBedsCountExceptionEnum} otherBedsCountException
 */
LivingAreaSleeping.prototype['otherBedsCountException'] = undefined;

/**
 * Queen beds count. The number of medium-large beds measuring 60\"W x 80\"L (152cm x 102cm).
 * @member {Number} queenBedsCount
 */
LivingAreaSleeping.prototype['queenBedsCount'] = undefined;

/**
 * Queen beds count exception.
 * @member {module:model/LivingAreaSleeping.QueenBedsCountExceptionEnum} queenBedsCountException
 */
LivingAreaSleeping.prototype['queenBedsCountException'] = undefined;

/**
 * Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
 * @member {Number} rollAwayBedsCount
 */
LivingAreaSleeping.prototype['rollAwayBedsCount'] = undefined;

/**
 * Roll away beds count exception.
 * @member {module:model/LivingAreaSleeping.RollAwayBedsCountExceptionEnum} rollAwayBedsCountException
 */
LivingAreaSleeping.prototype['rollAwayBedsCountException'] = undefined;

/**
 * Single or twin count beds. The number of smaller beds measuring 38\"W x 75\"L (97cm x 191cm) that can accommodate one adult.
 * @member {Number} singleOrTwinBedsCount
 */
LivingAreaSleeping.prototype['singleOrTwinBedsCount'] = undefined;

/**
 * Single or twin beds count exception.
 * @member {module:model/LivingAreaSleeping.SingleOrTwinBedsCountExceptionEnum} singleOrTwinBedsCountException
 */
LivingAreaSleeping.prototype['singleOrTwinBedsCountException'] = undefined;

/**
 * Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
 * @member {Number} sofaBedsCount
 */
LivingAreaSleeping.prototype['sofaBedsCount'] = undefined;

/**
 * Sofa beds count exception.
 * @member {module:model/LivingAreaSleeping.SofaBedsCountExceptionEnum} sofaBedsCountException
 */
LivingAreaSleeping.prototype['sofaBedsCountException'] = undefined;

/**
 * Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
 * @member {Boolean} syntheticPillows
 */
LivingAreaSleeping.prototype['syntheticPillows'] = undefined;

/**
 * Synthetic pillows exception.
 * @member {module:model/LivingAreaSleeping.SyntheticPillowsExceptionEnum} syntheticPillowsException
 */
LivingAreaSleeping.prototype['syntheticPillowsException'] = undefined;





/**
 * Allowed values for the <code>bedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['BedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>bunkBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['BunkBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>cribsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['CribsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>doubleBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['DoubleBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>featherPillowsException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['FeatherPillowsExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>hypoallergenicBeddingException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['HypoallergenicBeddingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>kingBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['KingBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>memoryFoamPillowsException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['MemoryFoamPillowsExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>otherBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['OtherBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>queenBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['QueenBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>rollAwayBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['RollAwayBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>singleOrTwinBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['SingleOrTwinBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>sofaBedsCountException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['SofaBedsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>syntheticPillowsException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaSleeping['SyntheticPillowsExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default LivingAreaSleeping;

