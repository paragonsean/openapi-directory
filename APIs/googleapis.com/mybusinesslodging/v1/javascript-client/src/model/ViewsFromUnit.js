/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ViewsFromUnit model module.
 * @module model/ViewsFromUnit
 * @version v1
 */
class ViewsFromUnit {
    /**
     * Constructs a new <code>ViewsFromUnit</code>.
     * Views available from the guest unit itself.
     * @alias module:model/ViewsFromUnit
     */
    constructor() { 
        
        ViewsFromUnit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewsFromUnit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewsFromUnit} obj Optional instance to populate.
     * @return {module:model/ViewsFromUnit} The populated <code>ViewsFromUnit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewsFromUnit();

            if (data.hasOwnProperty('beachView')) {
                obj['beachView'] = ApiClient.convertToType(data['beachView'], 'Boolean');
            }
            if (data.hasOwnProperty('beachViewException')) {
                obj['beachViewException'] = ApiClient.convertToType(data['beachViewException'], 'String');
            }
            if (data.hasOwnProperty('cityView')) {
                obj['cityView'] = ApiClient.convertToType(data['cityView'], 'Boolean');
            }
            if (data.hasOwnProperty('cityViewException')) {
                obj['cityViewException'] = ApiClient.convertToType(data['cityViewException'], 'String');
            }
            if (data.hasOwnProperty('gardenView')) {
                obj['gardenView'] = ApiClient.convertToType(data['gardenView'], 'Boolean');
            }
            if (data.hasOwnProperty('gardenViewException')) {
                obj['gardenViewException'] = ApiClient.convertToType(data['gardenViewException'], 'String');
            }
            if (data.hasOwnProperty('lakeView')) {
                obj['lakeView'] = ApiClient.convertToType(data['lakeView'], 'Boolean');
            }
            if (data.hasOwnProperty('lakeViewException')) {
                obj['lakeViewException'] = ApiClient.convertToType(data['lakeViewException'], 'String');
            }
            if (data.hasOwnProperty('landmarkView')) {
                obj['landmarkView'] = ApiClient.convertToType(data['landmarkView'], 'Boolean');
            }
            if (data.hasOwnProperty('landmarkViewException')) {
                obj['landmarkViewException'] = ApiClient.convertToType(data['landmarkViewException'], 'String');
            }
            if (data.hasOwnProperty('oceanView')) {
                obj['oceanView'] = ApiClient.convertToType(data['oceanView'], 'Boolean');
            }
            if (data.hasOwnProperty('oceanViewException')) {
                obj['oceanViewException'] = ApiClient.convertToType(data['oceanViewException'], 'String');
            }
            if (data.hasOwnProperty('poolView')) {
                obj['poolView'] = ApiClient.convertToType(data['poolView'], 'Boolean');
            }
            if (data.hasOwnProperty('poolViewException')) {
                obj['poolViewException'] = ApiClient.convertToType(data['poolViewException'], 'String');
            }
            if (data.hasOwnProperty('valleyView')) {
                obj['valleyView'] = ApiClient.convertToType(data['valleyView'], 'Boolean');
            }
            if (data.hasOwnProperty('valleyViewException')) {
                obj['valleyViewException'] = ApiClient.convertToType(data['valleyViewException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewsFromUnit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewsFromUnit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['beachViewException'] && !(typeof data['beachViewException'] === 'string' || data['beachViewException'] instanceof String)) {
            throw new Error("Expected the field `beachViewException` to be a primitive type in the JSON string but got " + data['beachViewException']);
        }
        // ensure the json data is a string
        if (data['cityViewException'] && !(typeof data['cityViewException'] === 'string' || data['cityViewException'] instanceof String)) {
            throw new Error("Expected the field `cityViewException` to be a primitive type in the JSON string but got " + data['cityViewException']);
        }
        // ensure the json data is a string
        if (data['gardenViewException'] && !(typeof data['gardenViewException'] === 'string' || data['gardenViewException'] instanceof String)) {
            throw new Error("Expected the field `gardenViewException` to be a primitive type in the JSON string but got " + data['gardenViewException']);
        }
        // ensure the json data is a string
        if (data['lakeViewException'] && !(typeof data['lakeViewException'] === 'string' || data['lakeViewException'] instanceof String)) {
            throw new Error("Expected the field `lakeViewException` to be a primitive type in the JSON string but got " + data['lakeViewException']);
        }
        // ensure the json data is a string
        if (data['landmarkViewException'] && !(typeof data['landmarkViewException'] === 'string' || data['landmarkViewException'] instanceof String)) {
            throw new Error("Expected the field `landmarkViewException` to be a primitive type in the JSON string but got " + data['landmarkViewException']);
        }
        // ensure the json data is a string
        if (data['oceanViewException'] && !(typeof data['oceanViewException'] === 'string' || data['oceanViewException'] instanceof String)) {
            throw new Error("Expected the field `oceanViewException` to be a primitive type in the JSON string but got " + data['oceanViewException']);
        }
        // ensure the json data is a string
        if (data['poolViewException'] && !(typeof data['poolViewException'] === 'string' || data['poolViewException'] instanceof String)) {
            throw new Error("Expected the field `poolViewException` to be a primitive type in the JSON string but got " + data['poolViewException']);
        }
        // ensure the json data is a string
        if (data['valleyViewException'] && !(typeof data['valleyViewException'] === 'string' || data['valleyViewException'] instanceof String)) {
            throw new Error("Expected the field `valleyViewException` to be a primitive type in the JSON string but got " + data['valleyViewException']);
        }

        return true;
    }


}



/**
 * Beach view. A guestroom that features a window through which guests can see the beach.
 * @member {Boolean} beachView
 */
ViewsFromUnit.prototype['beachView'] = undefined;

/**
 * Beach view exception.
 * @member {module:model/ViewsFromUnit.BeachViewExceptionEnum} beachViewException
 */
ViewsFromUnit.prototype['beachViewException'] = undefined;

/**
 * City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
 * @member {Boolean} cityView
 */
ViewsFromUnit.prototype['cityView'] = undefined;

/**
 * City view exception.
 * @member {module:model/ViewsFromUnit.CityViewExceptionEnum} cityViewException
 */
ViewsFromUnit.prototype['cityViewException'] = undefined;

/**
 * Garden view. A guestroom that features a window through which guests can see a garden.
 * @member {Boolean} gardenView
 */
ViewsFromUnit.prototype['gardenView'] = undefined;

/**
 * Garden view exception.
 * @member {module:model/ViewsFromUnit.GardenViewExceptionEnum} gardenViewException
 */
ViewsFromUnit.prototype['gardenViewException'] = undefined;

/**
 * Lake view.
 * @member {Boolean} lakeView
 */
ViewsFromUnit.prototype['lakeView'] = undefined;

/**
 * Lake view exception.
 * @member {module:model/ViewsFromUnit.LakeViewExceptionEnum} lakeViewException
 */
ViewsFromUnit.prototype['lakeViewException'] = undefined;

/**
 * Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
 * @member {Boolean} landmarkView
 */
ViewsFromUnit.prototype['landmarkView'] = undefined;

/**
 * Landmark view exception.
 * @member {module:model/ViewsFromUnit.LandmarkViewExceptionEnum} landmarkViewException
 */
ViewsFromUnit.prototype['landmarkViewException'] = undefined;

/**
 * Ocean view. A guestroom that features a window through which guests can see the ocean.
 * @member {Boolean} oceanView
 */
ViewsFromUnit.prototype['oceanView'] = undefined;

/**
 * Ocean view exception.
 * @member {module:model/ViewsFromUnit.OceanViewExceptionEnum} oceanViewException
 */
ViewsFromUnit.prototype['oceanViewException'] = undefined;

/**
 * Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.
 * @member {Boolean} poolView
 */
ViewsFromUnit.prototype['poolView'] = undefined;

/**
 * Pool view exception.
 * @member {module:model/ViewsFromUnit.PoolViewExceptionEnum} poolViewException
 */
ViewsFromUnit.prototype['poolViewException'] = undefined;

/**
 * Valley view. A guestroom that features a window through which guests can see over a valley.
 * @member {Boolean} valleyView
 */
ViewsFromUnit.prototype['valleyView'] = undefined;

/**
 * Valley view exception.
 * @member {module:model/ViewsFromUnit.ValleyViewExceptionEnum} valleyViewException
 */
ViewsFromUnit.prototype['valleyViewException'] = undefined;





/**
 * Allowed values for the <code>beachViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['BeachViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>cityViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['CityViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>gardenViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['GardenViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>lakeViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['LakeViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>landmarkViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['LandmarkViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>oceanViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['OceanViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>poolViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['PoolViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>valleyViewException</code> property.
 * @enum {String}
 * @readonly
 */
ViewsFromUnit['ValleyViewExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default ViewsFromUnit;

