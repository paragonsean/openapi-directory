/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Property model module.
 * @module model/Property
 * @version v1
 */
class Property {
    /**
     * Constructs a new <code>Property</code>.
     * General factual information about the property&#39;s physical structure and important dates.
     * @alias module:model/Property
     */
    constructor() { 
        
        Property.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Property} obj Optional instance to populate.
     * @return {module:model/Property} The populated <code>Property</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Property();

            if (data.hasOwnProperty('builtYear')) {
                obj['builtYear'] = ApiClient.convertToType(data['builtYear'], 'Number');
            }
            if (data.hasOwnProperty('builtYearException')) {
                obj['builtYearException'] = ApiClient.convertToType(data['builtYearException'], 'String');
            }
            if (data.hasOwnProperty('floorsCount')) {
                obj['floorsCount'] = ApiClient.convertToType(data['floorsCount'], 'Number');
            }
            if (data.hasOwnProperty('floorsCountException')) {
                obj['floorsCountException'] = ApiClient.convertToType(data['floorsCountException'], 'String');
            }
            if (data.hasOwnProperty('lastRenovatedYear')) {
                obj['lastRenovatedYear'] = ApiClient.convertToType(data['lastRenovatedYear'], 'Number');
            }
            if (data.hasOwnProperty('lastRenovatedYearException')) {
                obj['lastRenovatedYearException'] = ApiClient.convertToType(data['lastRenovatedYearException'], 'String');
            }
            if (data.hasOwnProperty('roomsCount')) {
                obj['roomsCount'] = ApiClient.convertToType(data['roomsCount'], 'Number');
            }
            if (data.hasOwnProperty('roomsCountException')) {
                obj['roomsCountException'] = ApiClient.convertToType(data['roomsCountException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Property</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Property</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['builtYearException'] && !(typeof data['builtYearException'] === 'string' || data['builtYearException'] instanceof String)) {
            throw new Error("Expected the field `builtYearException` to be a primitive type in the JSON string but got " + data['builtYearException']);
        }
        // ensure the json data is a string
        if (data['floorsCountException'] && !(typeof data['floorsCountException'] === 'string' || data['floorsCountException'] instanceof String)) {
            throw new Error("Expected the field `floorsCountException` to be a primitive type in the JSON string but got " + data['floorsCountException']);
        }
        // ensure the json data is a string
        if (data['lastRenovatedYearException'] && !(typeof data['lastRenovatedYearException'] === 'string' || data['lastRenovatedYearException'] instanceof String)) {
            throw new Error("Expected the field `lastRenovatedYearException` to be a primitive type in the JSON string but got " + data['lastRenovatedYearException']);
        }
        // ensure the json data is a string
        if (data['roomsCountException'] && !(typeof data['roomsCountException'] === 'string' || data['roomsCountException'] instanceof String)) {
            throw new Error("Expected the field `roomsCountException` to be a primitive type in the JSON string but got " + data['roomsCountException']);
        }

        return true;
    }


}



/**
 * Built year. The year that construction of the property was completed.
 * @member {Number} builtYear
 */
Property.prototype['builtYear'] = undefined;

/**
 * Built year exception.
 * @member {module:model/Property.BuiltYearExceptionEnum} builtYearException
 */
Property.prototype['builtYearException'] = undefined;

/**
 * Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.
 * @member {Number} floorsCount
 */
Property.prototype['floorsCount'] = undefined;

/**
 * Floors count exception.
 * @member {module:model/Property.FloorsCountExceptionEnum} floorsCountException
 */
Property.prototype['floorsCountException'] = undefined;

/**
 * Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.
 * @member {Number} lastRenovatedYear
 */
Property.prototype['lastRenovatedYear'] = undefined;

/**
 * Last renovated year exception.
 * @member {module:model/Property.LastRenovatedYearExceptionEnum} lastRenovatedYearException
 */
Property.prototype['lastRenovatedYearException'] = undefined;

/**
 * Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.
 * @member {Number} roomsCount
 */
Property.prototype['roomsCount'] = undefined;

/**
 * Rooms count exception.
 * @member {module:model/Property.RoomsCountExceptionEnum} roomsCountException
 */
Property.prototype['roomsCountException'] = undefined;





/**
 * Allowed values for the <code>builtYearException</code> property.
 * @enum {String}
 * @readonly
 */
Property['BuiltYearExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>floorsCountException</code> property.
 * @enum {String}
 * @readonly
 */
Property['FloorsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>lastRenovatedYearException</code> property.
 * @enum {String}
 * @readonly
 */
Property['LastRenovatedYearExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>roomsCountException</code> property.
 * @enum {String}
 * @readonly
 */
Property['RoomsCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default Property;

