/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accessibility from './Accessibility';
import Activities from './Activities';
import Business from './Business';
import Connectivity from './Connectivity';
import Families from './Families';
import FoodAndDrink from './FoodAndDrink';
import GuestUnitFeatures from './GuestUnitFeatures';
import GuestUnitType from './GuestUnitType';
import HealthAndSafety from './HealthAndSafety';
import Housekeeping from './Housekeeping';
import LivingArea from './LivingArea';
import LodgingMetadata from './LodgingMetadata';
import Parking from './Parking';
import Pets from './Pets';
import Policies from './Policies';
import Pools from './Pools';
import Property from './Property';
import Services from './Services';
import Sustainability from './Sustainability';
import Transportation from './Transportation';
import Wellness from './Wellness';

/**
 * The Lodging model module.
 * @module model/Lodging
 * @version v1
 */
class Lodging {
    /**
     * Constructs a new <code>Lodging</code>.
     * Lodging of a location that provides accomodations.
     * @alias module:model/Lodging
     */
    constructor() { 
        
        Lodging.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Lodging</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Lodging} obj Optional instance to populate.
     * @return {module:model/Lodging} The populated <code>Lodging</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Lodging();

            if (data.hasOwnProperty('accessibility')) {
                obj['accessibility'] = Accessibility.constructFromObject(data['accessibility']);
            }
            if (data.hasOwnProperty('activities')) {
                obj['activities'] = Activities.constructFromObject(data['activities']);
            }
            if (data.hasOwnProperty('allUnits')) {
                obj['allUnits'] = GuestUnitFeatures.constructFromObject(data['allUnits']);
            }
            if (data.hasOwnProperty('business')) {
                obj['business'] = Business.constructFromObject(data['business']);
            }
            if (data.hasOwnProperty('commonLivingArea')) {
                obj['commonLivingArea'] = LivingArea.constructFromObject(data['commonLivingArea']);
            }
            if (data.hasOwnProperty('connectivity')) {
                obj['connectivity'] = Connectivity.constructFromObject(data['connectivity']);
            }
            if (data.hasOwnProperty('families')) {
                obj['families'] = Families.constructFromObject(data['families']);
            }
            if (data.hasOwnProperty('foodAndDrink')) {
                obj['foodAndDrink'] = FoodAndDrink.constructFromObject(data['foodAndDrink']);
            }
            if (data.hasOwnProperty('guestUnits')) {
                obj['guestUnits'] = ApiClient.convertToType(data['guestUnits'], [GuestUnitType]);
            }
            if (data.hasOwnProperty('healthAndSafety')) {
                obj['healthAndSafety'] = HealthAndSafety.constructFromObject(data['healthAndSafety']);
            }
            if (data.hasOwnProperty('housekeeping')) {
                obj['housekeeping'] = Housekeeping.constructFromObject(data['housekeeping']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = LodgingMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parking')) {
                obj['parking'] = Parking.constructFromObject(data['parking']);
            }
            if (data.hasOwnProperty('pets')) {
                obj['pets'] = Pets.constructFromObject(data['pets']);
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = Policies.constructFromObject(data['policies']);
            }
            if (data.hasOwnProperty('pools')) {
                obj['pools'] = Pools.constructFromObject(data['pools']);
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = Property.constructFromObject(data['property']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = Services.constructFromObject(data['services']);
            }
            if (data.hasOwnProperty('someUnits')) {
                obj['someUnits'] = GuestUnitFeatures.constructFromObject(data['someUnits']);
            }
            if (data.hasOwnProperty('sustainability')) {
                obj['sustainability'] = Sustainability.constructFromObject(data['sustainability']);
            }
            if (data.hasOwnProperty('transportation')) {
                obj['transportation'] = Transportation.constructFromObject(data['transportation']);
            }
            if (data.hasOwnProperty('wellness')) {
                obj['wellness'] = Wellness.constructFromObject(data['wellness']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Lodging</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Lodging</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessibility`
        if (data['accessibility']) { // data not null
          Accessibility.validateJSON(data['accessibility']);
        }
        // validate the optional field `activities`
        if (data['activities']) { // data not null
          Activities.validateJSON(data['activities']);
        }
        // validate the optional field `allUnits`
        if (data['allUnits']) { // data not null
          GuestUnitFeatures.validateJSON(data['allUnits']);
        }
        // validate the optional field `business`
        if (data['business']) { // data not null
          Business.validateJSON(data['business']);
        }
        // validate the optional field `commonLivingArea`
        if (data['commonLivingArea']) { // data not null
          LivingArea.validateJSON(data['commonLivingArea']);
        }
        // validate the optional field `connectivity`
        if (data['connectivity']) { // data not null
          Connectivity.validateJSON(data['connectivity']);
        }
        // validate the optional field `families`
        if (data['families']) { // data not null
          Families.validateJSON(data['families']);
        }
        // validate the optional field `foodAndDrink`
        if (data['foodAndDrink']) { // data not null
          FoodAndDrink.validateJSON(data['foodAndDrink']);
        }
        if (data['guestUnits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['guestUnits'])) {
                throw new Error("Expected the field `guestUnits` to be an array in the JSON data but got " + data['guestUnits']);
            }
            // validate the optional field `guestUnits` (array)
            for (const item of data['guestUnits']) {
                GuestUnitType.validateJSON(item);
            };
        }
        // validate the optional field `healthAndSafety`
        if (data['healthAndSafety']) { // data not null
          HealthAndSafety.validateJSON(data['healthAndSafety']);
        }
        // validate the optional field `housekeeping`
        if (data['housekeeping']) { // data not null
          Housekeeping.validateJSON(data['housekeeping']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          LodgingMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parking`
        if (data['parking']) { // data not null
          Parking.validateJSON(data['parking']);
        }
        // validate the optional field `pets`
        if (data['pets']) { // data not null
          Pets.validateJSON(data['pets']);
        }
        // validate the optional field `policies`
        if (data['policies']) { // data not null
          Policies.validateJSON(data['policies']);
        }
        // validate the optional field `pools`
        if (data['pools']) { // data not null
          Pools.validateJSON(data['pools']);
        }
        // validate the optional field `property`
        if (data['property']) { // data not null
          Property.validateJSON(data['property']);
        }
        // validate the optional field `services`
        if (data['services']) { // data not null
          Services.validateJSON(data['services']);
        }
        // validate the optional field `someUnits`
        if (data['someUnits']) { // data not null
          GuestUnitFeatures.validateJSON(data['someUnits']);
        }
        // validate the optional field `sustainability`
        if (data['sustainability']) { // data not null
          Sustainability.validateJSON(data['sustainability']);
        }
        // validate the optional field `transportation`
        if (data['transportation']) { // data not null
          Transportation.validateJSON(data['transportation']);
        }
        // validate the optional field `wellness`
        if (data['wellness']) { // data not null
          Wellness.validateJSON(data['wellness']);
        }

        return true;
    }


}



/**
 * @member {module:model/Accessibility} accessibility
 */
Lodging.prototype['accessibility'] = undefined;

/**
 * @member {module:model/Activities} activities
 */
Lodging.prototype['activities'] = undefined;

/**
 * @member {module:model/GuestUnitFeatures} allUnits
 */
Lodging.prototype['allUnits'] = undefined;

/**
 * @member {module:model/Business} business
 */
Lodging.prototype['business'] = undefined;

/**
 * @member {module:model/LivingArea} commonLivingArea
 */
Lodging.prototype['commonLivingArea'] = undefined;

/**
 * @member {module:model/Connectivity} connectivity
 */
Lodging.prototype['connectivity'] = undefined;

/**
 * @member {module:model/Families} families
 */
Lodging.prototype['families'] = undefined;

/**
 * @member {module:model/FoodAndDrink} foodAndDrink
 */
Lodging.prototype['foodAndDrink'] = undefined;

/**
 * Individual GuestUnitTypes that are available in this Lodging.
 * @member {Array.<module:model/GuestUnitType>} guestUnits
 */
Lodging.prototype['guestUnits'] = undefined;

/**
 * @member {module:model/HealthAndSafety} healthAndSafety
 */
Lodging.prototype['healthAndSafety'] = undefined;

/**
 * @member {module:model/Housekeeping} housekeeping
 */
Lodging.prototype['housekeeping'] = undefined;

/**
 * @member {module:model/LodgingMetadata} metadata
 */
Lodging.prototype['metadata'] = undefined;

/**
 * Required. Google identifier for this location in the form: `locations/{location_id}/lodging`
 * @member {String} name
 */
Lodging.prototype['name'] = undefined;

/**
 * @member {module:model/Parking} parking
 */
Lodging.prototype['parking'] = undefined;

/**
 * @member {module:model/Pets} pets
 */
Lodging.prototype['pets'] = undefined;

/**
 * @member {module:model/Policies} policies
 */
Lodging.prototype['policies'] = undefined;

/**
 * @member {module:model/Pools} pools
 */
Lodging.prototype['pools'] = undefined;

/**
 * @member {module:model/Property} property
 */
Lodging.prototype['property'] = undefined;

/**
 * @member {module:model/Services} services
 */
Lodging.prototype['services'] = undefined;

/**
 * @member {module:model/GuestUnitFeatures} someUnits
 */
Lodging.prototype['someUnits'] = undefined;

/**
 * @member {module:model/Sustainability} sustainability
 */
Lodging.prototype['sustainability'] = undefined;

/**
 * @member {module:model/Transportation} transportation
 */
Lodging.prototype['transportation'] = undefined;

/**
 * @member {module:model/Wellness} wellness
 */
Lodging.prototype['wellness'] = undefined;






export default Lodging;

