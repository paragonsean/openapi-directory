/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingAreaAccessibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingAreaAccessibility::OAILivingAreaAccessibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingAreaAccessibility::OAILivingAreaAccessibility() {
    this->initializeModel();
}

OAILivingAreaAccessibility::~OAILivingAreaAccessibility() {}

void OAILivingAreaAccessibility::initializeModel() {

    m_ada_compliant_unit_isSet = false;
    m_ada_compliant_unit_isValid = false;

    m_ada_compliant_unit_exception_isSet = false;
    m_ada_compliant_unit_exception_isValid = false;

    m_hearing_accessible_doorbell_isSet = false;
    m_hearing_accessible_doorbell_isValid = false;

    m_hearing_accessible_doorbell_exception_isSet = false;
    m_hearing_accessible_doorbell_exception_isValid = false;

    m_hearing_accessible_fire_alarm_isSet = false;
    m_hearing_accessible_fire_alarm_isValid = false;

    m_hearing_accessible_fire_alarm_exception_isSet = false;
    m_hearing_accessible_fire_alarm_exception_isValid = false;

    m_hearing_accessible_unit_isSet = false;
    m_hearing_accessible_unit_isValid = false;

    m_hearing_accessible_unit_exception_isSet = false;
    m_hearing_accessible_unit_exception_isValid = false;

    m_mobility_accessible_bathtub_isSet = false;
    m_mobility_accessible_bathtub_isValid = false;

    m_mobility_accessible_bathtub_exception_isSet = false;
    m_mobility_accessible_bathtub_exception_isValid = false;

    m_mobility_accessible_shower_isSet = false;
    m_mobility_accessible_shower_isValid = false;

    m_mobility_accessible_shower_exception_isSet = false;
    m_mobility_accessible_shower_exception_isValid = false;

    m_mobility_accessible_toilet_isSet = false;
    m_mobility_accessible_toilet_isValid = false;

    m_mobility_accessible_toilet_exception_isSet = false;
    m_mobility_accessible_toilet_exception_isValid = false;

    m_mobility_accessible_unit_isSet = false;
    m_mobility_accessible_unit_isValid = false;

    m_mobility_accessible_unit_exception_isSet = false;
    m_mobility_accessible_unit_exception_isValid = false;
}

void OAILivingAreaAccessibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingAreaAccessibility::fromJsonObject(QJsonObject json) {

    m_ada_compliant_unit_isValid = ::OpenAPI::fromJsonValue(m_ada_compliant_unit, json[QString("adaCompliantUnit")]);
    m_ada_compliant_unit_isSet = !json[QString("adaCompliantUnit")].isNull() && m_ada_compliant_unit_isValid;

    m_ada_compliant_unit_exception_isValid = ::OpenAPI::fromJsonValue(m_ada_compliant_unit_exception, json[QString("adaCompliantUnitException")]);
    m_ada_compliant_unit_exception_isSet = !json[QString("adaCompliantUnitException")].isNull() && m_ada_compliant_unit_exception_isValid;

    m_hearing_accessible_doorbell_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_doorbell, json[QString("hearingAccessibleDoorbell")]);
    m_hearing_accessible_doorbell_isSet = !json[QString("hearingAccessibleDoorbell")].isNull() && m_hearing_accessible_doorbell_isValid;

    m_hearing_accessible_doorbell_exception_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_doorbell_exception, json[QString("hearingAccessibleDoorbellException")]);
    m_hearing_accessible_doorbell_exception_isSet = !json[QString("hearingAccessibleDoorbellException")].isNull() && m_hearing_accessible_doorbell_exception_isValid;

    m_hearing_accessible_fire_alarm_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_fire_alarm, json[QString("hearingAccessibleFireAlarm")]);
    m_hearing_accessible_fire_alarm_isSet = !json[QString("hearingAccessibleFireAlarm")].isNull() && m_hearing_accessible_fire_alarm_isValid;

    m_hearing_accessible_fire_alarm_exception_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_fire_alarm_exception, json[QString("hearingAccessibleFireAlarmException")]);
    m_hearing_accessible_fire_alarm_exception_isSet = !json[QString("hearingAccessibleFireAlarmException")].isNull() && m_hearing_accessible_fire_alarm_exception_isValid;

    m_hearing_accessible_unit_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_unit, json[QString("hearingAccessibleUnit")]);
    m_hearing_accessible_unit_isSet = !json[QString("hearingAccessibleUnit")].isNull() && m_hearing_accessible_unit_isValid;

    m_hearing_accessible_unit_exception_isValid = ::OpenAPI::fromJsonValue(m_hearing_accessible_unit_exception, json[QString("hearingAccessibleUnitException")]);
    m_hearing_accessible_unit_exception_isSet = !json[QString("hearingAccessibleUnitException")].isNull() && m_hearing_accessible_unit_exception_isValid;

    m_mobility_accessible_bathtub_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_bathtub, json[QString("mobilityAccessibleBathtub")]);
    m_mobility_accessible_bathtub_isSet = !json[QString("mobilityAccessibleBathtub")].isNull() && m_mobility_accessible_bathtub_isValid;

    m_mobility_accessible_bathtub_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_bathtub_exception, json[QString("mobilityAccessibleBathtubException")]);
    m_mobility_accessible_bathtub_exception_isSet = !json[QString("mobilityAccessibleBathtubException")].isNull() && m_mobility_accessible_bathtub_exception_isValid;

    m_mobility_accessible_shower_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_shower, json[QString("mobilityAccessibleShower")]);
    m_mobility_accessible_shower_isSet = !json[QString("mobilityAccessibleShower")].isNull() && m_mobility_accessible_shower_isValid;

    m_mobility_accessible_shower_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_shower_exception, json[QString("mobilityAccessibleShowerException")]);
    m_mobility_accessible_shower_exception_isSet = !json[QString("mobilityAccessibleShowerException")].isNull() && m_mobility_accessible_shower_exception_isValid;

    m_mobility_accessible_toilet_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_toilet, json[QString("mobilityAccessibleToilet")]);
    m_mobility_accessible_toilet_isSet = !json[QString("mobilityAccessibleToilet")].isNull() && m_mobility_accessible_toilet_isValid;

    m_mobility_accessible_toilet_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_toilet_exception, json[QString("mobilityAccessibleToiletException")]);
    m_mobility_accessible_toilet_exception_isSet = !json[QString("mobilityAccessibleToiletException")].isNull() && m_mobility_accessible_toilet_exception_isValid;

    m_mobility_accessible_unit_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_unit, json[QString("mobilityAccessibleUnit")]);
    m_mobility_accessible_unit_isSet = !json[QString("mobilityAccessibleUnit")].isNull() && m_mobility_accessible_unit_isValid;

    m_mobility_accessible_unit_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_unit_exception, json[QString("mobilityAccessibleUnitException")]);
    m_mobility_accessible_unit_exception_isSet = !json[QString("mobilityAccessibleUnitException")].isNull() && m_mobility_accessible_unit_exception_isValid;
}

QString OAILivingAreaAccessibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingAreaAccessibility::asJsonObject() const {
    QJsonObject obj;
    if (m_ada_compliant_unit_isSet) {
        obj.insert(QString("adaCompliantUnit"), ::OpenAPI::toJsonValue(m_ada_compliant_unit));
    }
    if (m_ada_compliant_unit_exception_isSet) {
        obj.insert(QString("adaCompliantUnitException"), ::OpenAPI::toJsonValue(m_ada_compliant_unit_exception));
    }
    if (m_hearing_accessible_doorbell_isSet) {
        obj.insert(QString("hearingAccessibleDoorbell"), ::OpenAPI::toJsonValue(m_hearing_accessible_doorbell));
    }
    if (m_hearing_accessible_doorbell_exception_isSet) {
        obj.insert(QString("hearingAccessibleDoorbellException"), ::OpenAPI::toJsonValue(m_hearing_accessible_doorbell_exception));
    }
    if (m_hearing_accessible_fire_alarm_isSet) {
        obj.insert(QString("hearingAccessibleFireAlarm"), ::OpenAPI::toJsonValue(m_hearing_accessible_fire_alarm));
    }
    if (m_hearing_accessible_fire_alarm_exception_isSet) {
        obj.insert(QString("hearingAccessibleFireAlarmException"), ::OpenAPI::toJsonValue(m_hearing_accessible_fire_alarm_exception));
    }
    if (m_hearing_accessible_unit_isSet) {
        obj.insert(QString("hearingAccessibleUnit"), ::OpenAPI::toJsonValue(m_hearing_accessible_unit));
    }
    if (m_hearing_accessible_unit_exception_isSet) {
        obj.insert(QString("hearingAccessibleUnitException"), ::OpenAPI::toJsonValue(m_hearing_accessible_unit_exception));
    }
    if (m_mobility_accessible_bathtub_isSet) {
        obj.insert(QString("mobilityAccessibleBathtub"), ::OpenAPI::toJsonValue(m_mobility_accessible_bathtub));
    }
    if (m_mobility_accessible_bathtub_exception_isSet) {
        obj.insert(QString("mobilityAccessibleBathtubException"), ::OpenAPI::toJsonValue(m_mobility_accessible_bathtub_exception));
    }
    if (m_mobility_accessible_shower_isSet) {
        obj.insert(QString("mobilityAccessibleShower"), ::OpenAPI::toJsonValue(m_mobility_accessible_shower));
    }
    if (m_mobility_accessible_shower_exception_isSet) {
        obj.insert(QString("mobilityAccessibleShowerException"), ::OpenAPI::toJsonValue(m_mobility_accessible_shower_exception));
    }
    if (m_mobility_accessible_toilet_isSet) {
        obj.insert(QString("mobilityAccessibleToilet"), ::OpenAPI::toJsonValue(m_mobility_accessible_toilet));
    }
    if (m_mobility_accessible_toilet_exception_isSet) {
        obj.insert(QString("mobilityAccessibleToiletException"), ::OpenAPI::toJsonValue(m_mobility_accessible_toilet_exception));
    }
    if (m_mobility_accessible_unit_isSet) {
        obj.insert(QString("mobilityAccessibleUnit"), ::OpenAPI::toJsonValue(m_mobility_accessible_unit));
    }
    if (m_mobility_accessible_unit_exception_isSet) {
        obj.insert(QString("mobilityAccessibleUnitException"), ::OpenAPI::toJsonValue(m_mobility_accessible_unit_exception));
    }
    return obj;
}

bool OAILivingAreaAccessibility::isAdaCompliantUnit() const {
    return m_ada_compliant_unit;
}
void OAILivingAreaAccessibility::setAdaCompliantUnit(const bool &ada_compliant_unit) {
    m_ada_compliant_unit = ada_compliant_unit;
    m_ada_compliant_unit_isSet = true;
}

bool OAILivingAreaAccessibility::is_ada_compliant_unit_Set() const{
    return m_ada_compliant_unit_isSet;
}

bool OAILivingAreaAccessibility::is_ada_compliant_unit_Valid() const{
    return m_ada_compliant_unit_isValid;
}

QString OAILivingAreaAccessibility::getAdaCompliantUnitException() const {
    return m_ada_compliant_unit_exception;
}
void OAILivingAreaAccessibility::setAdaCompliantUnitException(const QString &ada_compliant_unit_exception) {
    m_ada_compliant_unit_exception = ada_compliant_unit_exception;
    m_ada_compliant_unit_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_ada_compliant_unit_exception_Set() const{
    return m_ada_compliant_unit_exception_isSet;
}

bool OAILivingAreaAccessibility::is_ada_compliant_unit_exception_Valid() const{
    return m_ada_compliant_unit_exception_isValid;
}

bool OAILivingAreaAccessibility::isHearingAccessibleDoorbell() const {
    return m_hearing_accessible_doorbell;
}
void OAILivingAreaAccessibility::setHearingAccessibleDoorbell(const bool &hearing_accessible_doorbell) {
    m_hearing_accessible_doorbell = hearing_accessible_doorbell;
    m_hearing_accessible_doorbell_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_doorbell_Set() const{
    return m_hearing_accessible_doorbell_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_doorbell_Valid() const{
    return m_hearing_accessible_doorbell_isValid;
}

QString OAILivingAreaAccessibility::getHearingAccessibleDoorbellException() const {
    return m_hearing_accessible_doorbell_exception;
}
void OAILivingAreaAccessibility::setHearingAccessibleDoorbellException(const QString &hearing_accessible_doorbell_exception) {
    m_hearing_accessible_doorbell_exception = hearing_accessible_doorbell_exception;
    m_hearing_accessible_doorbell_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_doorbell_exception_Set() const{
    return m_hearing_accessible_doorbell_exception_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_doorbell_exception_Valid() const{
    return m_hearing_accessible_doorbell_exception_isValid;
}

bool OAILivingAreaAccessibility::isHearingAccessibleFireAlarm() const {
    return m_hearing_accessible_fire_alarm;
}
void OAILivingAreaAccessibility::setHearingAccessibleFireAlarm(const bool &hearing_accessible_fire_alarm) {
    m_hearing_accessible_fire_alarm = hearing_accessible_fire_alarm;
    m_hearing_accessible_fire_alarm_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_fire_alarm_Set() const{
    return m_hearing_accessible_fire_alarm_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_fire_alarm_Valid() const{
    return m_hearing_accessible_fire_alarm_isValid;
}

QString OAILivingAreaAccessibility::getHearingAccessibleFireAlarmException() const {
    return m_hearing_accessible_fire_alarm_exception;
}
void OAILivingAreaAccessibility::setHearingAccessibleFireAlarmException(const QString &hearing_accessible_fire_alarm_exception) {
    m_hearing_accessible_fire_alarm_exception = hearing_accessible_fire_alarm_exception;
    m_hearing_accessible_fire_alarm_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_fire_alarm_exception_Set() const{
    return m_hearing_accessible_fire_alarm_exception_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_fire_alarm_exception_Valid() const{
    return m_hearing_accessible_fire_alarm_exception_isValid;
}

bool OAILivingAreaAccessibility::isHearingAccessibleUnit() const {
    return m_hearing_accessible_unit;
}
void OAILivingAreaAccessibility::setHearingAccessibleUnit(const bool &hearing_accessible_unit) {
    m_hearing_accessible_unit = hearing_accessible_unit;
    m_hearing_accessible_unit_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_unit_Set() const{
    return m_hearing_accessible_unit_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_unit_Valid() const{
    return m_hearing_accessible_unit_isValid;
}

QString OAILivingAreaAccessibility::getHearingAccessibleUnitException() const {
    return m_hearing_accessible_unit_exception;
}
void OAILivingAreaAccessibility::setHearingAccessibleUnitException(const QString &hearing_accessible_unit_exception) {
    m_hearing_accessible_unit_exception = hearing_accessible_unit_exception;
    m_hearing_accessible_unit_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_unit_exception_Set() const{
    return m_hearing_accessible_unit_exception_isSet;
}

bool OAILivingAreaAccessibility::is_hearing_accessible_unit_exception_Valid() const{
    return m_hearing_accessible_unit_exception_isValid;
}

bool OAILivingAreaAccessibility::isMobilityAccessibleBathtub() const {
    return m_mobility_accessible_bathtub;
}
void OAILivingAreaAccessibility::setMobilityAccessibleBathtub(const bool &mobility_accessible_bathtub) {
    m_mobility_accessible_bathtub = mobility_accessible_bathtub;
    m_mobility_accessible_bathtub_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_bathtub_Set() const{
    return m_mobility_accessible_bathtub_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_bathtub_Valid() const{
    return m_mobility_accessible_bathtub_isValid;
}

QString OAILivingAreaAccessibility::getMobilityAccessibleBathtubException() const {
    return m_mobility_accessible_bathtub_exception;
}
void OAILivingAreaAccessibility::setMobilityAccessibleBathtubException(const QString &mobility_accessible_bathtub_exception) {
    m_mobility_accessible_bathtub_exception = mobility_accessible_bathtub_exception;
    m_mobility_accessible_bathtub_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_bathtub_exception_Set() const{
    return m_mobility_accessible_bathtub_exception_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_bathtub_exception_Valid() const{
    return m_mobility_accessible_bathtub_exception_isValid;
}

bool OAILivingAreaAccessibility::isMobilityAccessibleShower() const {
    return m_mobility_accessible_shower;
}
void OAILivingAreaAccessibility::setMobilityAccessibleShower(const bool &mobility_accessible_shower) {
    m_mobility_accessible_shower = mobility_accessible_shower;
    m_mobility_accessible_shower_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_shower_Set() const{
    return m_mobility_accessible_shower_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_shower_Valid() const{
    return m_mobility_accessible_shower_isValid;
}

QString OAILivingAreaAccessibility::getMobilityAccessibleShowerException() const {
    return m_mobility_accessible_shower_exception;
}
void OAILivingAreaAccessibility::setMobilityAccessibleShowerException(const QString &mobility_accessible_shower_exception) {
    m_mobility_accessible_shower_exception = mobility_accessible_shower_exception;
    m_mobility_accessible_shower_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_shower_exception_Set() const{
    return m_mobility_accessible_shower_exception_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_shower_exception_Valid() const{
    return m_mobility_accessible_shower_exception_isValid;
}

bool OAILivingAreaAccessibility::isMobilityAccessibleToilet() const {
    return m_mobility_accessible_toilet;
}
void OAILivingAreaAccessibility::setMobilityAccessibleToilet(const bool &mobility_accessible_toilet) {
    m_mobility_accessible_toilet = mobility_accessible_toilet;
    m_mobility_accessible_toilet_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_toilet_Set() const{
    return m_mobility_accessible_toilet_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_toilet_Valid() const{
    return m_mobility_accessible_toilet_isValid;
}

QString OAILivingAreaAccessibility::getMobilityAccessibleToiletException() const {
    return m_mobility_accessible_toilet_exception;
}
void OAILivingAreaAccessibility::setMobilityAccessibleToiletException(const QString &mobility_accessible_toilet_exception) {
    m_mobility_accessible_toilet_exception = mobility_accessible_toilet_exception;
    m_mobility_accessible_toilet_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_toilet_exception_Set() const{
    return m_mobility_accessible_toilet_exception_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_toilet_exception_Valid() const{
    return m_mobility_accessible_toilet_exception_isValid;
}

bool OAILivingAreaAccessibility::isMobilityAccessibleUnit() const {
    return m_mobility_accessible_unit;
}
void OAILivingAreaAccessibility::setMobilityAccessibleUnit(const bool &mobility_accessible_unit) {
    m_mobility_accessible_unit = mobility_accessible_unit;
    m_mobility_accessible_unit_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_unit_Set() const{
    return m_mobility_accessible_unit_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_unit_Valid() const{
    return m_mobility_accessible_unit_isValid;
}

QString OAILivingAreaAccessibility::getMobilityAccessibleUnitException() const {
    return m_mobility_accessible_unit_exception;
}
void OAILivingAreaAccessibility::setMobilityAccessibleUnitException(const QString &mobility_accessible_unit_exception) {
    m_mobility_accessible_unit_exception = mobility_accessible_unit_exception;
    m_mobility_accessible_unit_exception_isSet = true;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_unit_exception_Set() const{
    return m_mobility_accessible_unit_exception_isSet;
}

bool OAILivingAreaAccessibility::is_mobility_accessible_unit_exception_Valid() const{
    return m_mobility_accessible_unit_exception_isValid;
}

bool OAILivingAreaAccessibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ada_compliant_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ada_compliant_unit_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_doorbell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_doorbell_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_fire_alarm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_fire_alarm_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_accessible_unit_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_bathtub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_bathtub_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_shower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_shower_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_toilet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_toilet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_unit_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingAreaAccessibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
