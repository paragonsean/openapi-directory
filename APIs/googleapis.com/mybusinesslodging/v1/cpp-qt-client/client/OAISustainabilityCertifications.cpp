/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISustainabilityCertifications.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISustainabilityCertifications::OAISustainabilityCertifications(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISustainabilityCertifications::OAISustainabilityCertifications() {
    this->initializeModel();
}

OAISustainabilityCertifications::~OAISustainabilityCertifications() {}

void OAISustainabilityCertifications::initializeModel() {

    m_breeam_certification_isSet = false;
    m_breeam_certification_isValid = false;

    m_breeam_certification_exception_isSet = false;
    m_breeam_certification_exception_isValid = false;

    m_eco_certifications_isSet = false;
    m_eco_certifications_isValid = false;

    m_leed_certification_isSet = false;
    m_leed_certification_isValid = false;

    m_leed_certification_exception_isSet = false;
    m_leed_certification_exception_isValid = false;
}

void OAISustainabilityCertifications::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISustainabilityCertifications::fromJsonObject(QJsonObject json) {

    m_breeam_certification_isValid = ::OpenAPI::fromJsonValue(m_breeam_certification, json[QString("breeamCertification")]);
    m_breeam_certification_isSet = !json[QString("breeamCertification")].isNull() && m_breeam_certification_isValid;

    m_breeam_certification_exception_isValid = ::OpenAPI::fromJsonValue(m_breeam_certification_exception, json[QString("breeamCertificationException")]);
    m_breeam_certification_exception_isSet = !json[QString("breeamCertificationException")].isNull() && m_breeam_certification_exception_isValid;

    m_eco_certifications_isValid = ::OpenAPI::fromJsonValue(m_eco_certifications, json[QString("ecoCertifications")]);
    m_eco_certifications_isSet = !json[QString("ecoCertifications")].isNull() && m_eco_certifications_isValid;

    m_leed_certification_isValid = ::OpenAPI::fromJsonValue(m_leed_certification, json[QString("leedCertification")]);
    m_leed_certification_isSet = !json[QString("leedCertification")].isNull() && m_leed_certification_isValid;

    m_leed_certification_exception_isValid = ::OpenAPI::fromJsonValue(m_leed_certification_exception, json[QString("leedCertificationException")]);
    m_leed_certification_exception_isSet = !json[QString("leedCertificationException")].isNull() && m_leed_certification_exception_isValid;
}

QString OAISustainabilityCertifications::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISustainabilityCertifications::asJsonObject() const {
    QJsonObject obj;
    if (m_breeam_certification_isSet) {
        obj.insert(QString("breeamCertification"), ::OpenAPI::toJsonValue(m_breeam_certification));
    }
    if (m_breeam_certification_exception_isSet) {
        obj.insert(QString("breeamCertificationException"), ::OpenAPI::toJsonValue(m_breeam_certification_exception));
    }
    if (m_eco_certifications.size() > 0) {
        obj.insert(QString("ecoCertifications"), ::OpenAPI::toJsonValue(m_eco_certifications));
    }
    if (m_leed_certification_isSet) {
        obj.insert(QString("leedCertification"), ::OpenAPI::toJsonValue(m_leed_certification));
    }
    if (m_leed_certification_exception_isSet) {
        obj.insert(QString("leedCertificationException"), ::OpenAPI::toJsonValue(m_leed_certification_exception));
    }
    return obj;
}

QString OAISustainabilityCertifications::getBreeamCertification() const {
    return m_breeam_certification;
}
void OAISustainabilityCertifications::setBreeamCertification(const QString &breeam_certification) {
    m_breeam_certification = breeam_certification;
    m_breeam_certification_isSet = true;
}

bool OAISustainabilityCertifications::is_breeam_certification_Set() const{
    return m_breeam_certification_isSet;
}

bool OAISustainabilityCertifications::is_breeam_certification_Valid() const{
    return m_breeam_certification_isValid;
}

QString OAISustainabilityCertifications::getBreeamCertificationException() const {
    return m_breeam_certification_exception;
}
void OAISustainabilityCertifications::setBreeamCertificationException(const QString &breeam_certification_exception) {
    m_breeam_certification_exception = breeam_certification_exception;
    m_breeam_certification_exception_isSet = true;
}

bool OAISustainabilityCertifications::is_breeam_certification_exception_Set() const{
    return m_breeam_certification_exception_isSet;
}

bool OAISustainabilityCertifications::is_breeam_certification_exception_Valid() const{
    return m_breeam_certification_exception_isValid;
}

QList<OAIEcoCertification> OAISustainabilityCertifications::getEcoCertifications() const {
    return m_eco_certifications;
}
void OAISustainabilityCertifications::setEcoCertifications(const QList<OAIEcoCertification> &eco_certifications) {
    m_eco_certifications = eco_certifications;
    m_eco_certifications_isSet = true;
}

bool OAISustainabilityCertifications::is_eco_certifications_Set() const{
    return m_eco_certifications_isSet;
}

bool OAISustainabilityCertifications::is_eco_certifications_Valid() const{
    return m_eco_certifications_isValid;
}

QString OAISustainabilityCertifications::getLeedCertification() const {
    return m_leed_certification;
}
void OAISustainabilityCertifications::setLeedCertification(const QString &leed_certification) {
    m_leed_certification = leed_certification;
    m_leed_certification_isSet = true;
}

bool OAISustainabilityCertifications::is_leed_certification_Set() const{
    return m_leed_certification_isSet;
}

bool OAISustainabilityCertifications::is_leed_certification_Valid() const{
    return m_leed_certification_isValid;
}

QString OAISustainabilityCertifications::getLeedCertificationException() const {
    return m_leed_certification_exception;
}
void OAISustainabilityCertifications::setLeedCertificationException(const QString &leed_certification_exception) {
    m_leed_certification_exception = leed_certification_exception;
    m_leed_certification_exception_isSet = true;
}

bool OAISustainabilityCertifications::is_leed_certification_exception_Set() const{
    return m_leed_certification_exception_isSet;
}

bool OAISustainabilityCertifications::is_leed_certification_exception_Valid() const{
    return m_leed_certification_exception_isValid;
}

bool OAISustainabilityCertifications::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breeam_certification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breeam_certification_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_certifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leed_certification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leed_certification_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISustainabilityCertifications::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
