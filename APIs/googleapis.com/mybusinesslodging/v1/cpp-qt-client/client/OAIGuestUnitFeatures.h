/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGuestUnitFeatures.h
 *
 * Features and available amenities in the guest unit.
 */

#ifndef OAIGuestUnitFeatures_H
#define OAIGuestUnitFeatures_H

#include <QJsonObject>

#include "OAILivingArea.h"
#include "OAIViewsFromUnit.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILivingArea;
class OAIViewsFromUnit;

class OAIGuestUnitFeatures : public OAIObject {
public:
    OAIGuestUnitFeatures();
    OAIGuestUnitFeatures(QString json);
    ~OAIGuestUnitFeatures() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBungalowOrVilla() const;
    void setBungalowOrVilla(const bool &bungalow_or_villa);
    bool is_bungalow_or_villa_Set() const;
    bool is_bungalow_or_villa_Valid() const;

    QString getBungalowOrVillaException() const;
    void setBungalowOrVillaException(const QString &bungalow_or_villa_exception);
    bool is_bungalow_or_villa_exception_Set() const;
    bool is_bungalow_or_villa_exception_Valid() const;

    bool isConnectingUnitAvailable() const;
    void setConnectingUnitAvailable(const bool &connecting_unit_available);
    bool is_connecting_unit_available_Set() const;
    bool is_connecting_unit_available_Valid() const;

    QString getConnectingUnitAvailableException() const;
    void setConnectingUnitAvailableException(const QString &connecting_unit_available_exception);
    bool is_connecting_unit_available_exception_Set() const;
    bool is_connecting_unit_available_exception_Valid() const;

    bool isExecutiveFloor() const;
    void setExecutiveFloor(const bool &executive_floor);
    bool is_executive_floor_Set() const;
    bool is_executive_floor_Valid() const;

    QString getExecutiveFloorException() const;
    void setExecutiveFloorException(const QString &executive_floor_exception);
    bool is_executive_floor_exception_Set() const;
    bool is_executive_floor_exception_Valid() const;

    qint32 getMaxAdultOccupantsCount() const;
    void setMaxAdultOccupantsCount(const qint32 &max_adult_occupants_count);
    bool is_max_adult_occupants_count_Set() const;
    bool is_max_adult_occupants_count_Valid() const;

    QString getMaxAdultOccupantsCountException() const;
    void setMaxAdultOccupantsCountException(const QString &max_adult_occupants_count_exception);
    bool is_max_adult_occupants_count_exception_Set() const;
    bool is_max_adult_occupants_count_exception_Valid() const;

    qint32 getMaxChildOccupantsCount() const;
    void setMaxChildOccupantsCount(const qint32 &max_child_occupants_count);
    bool is_max_child_occupants_count_Set() const;
    bool is_max_child_occupants_count_Valid() const;

    QString getMaxChildOccupantsCountException() const;
    void setMaxChildOccupantsCountException(const QString &max_child_occupants_count_exception);
    bool is_max_child_occupants_count_exception_Set() const;
    bool is_max_child_occupants_count_exception_Valid() const;

    qint32 getMaxOccupantsCount() const;
    void setMaxOccupantsCount(const qint32 &max_occupants_count);
    bool is_max_occupants_count_Set() const;
    bool is_max_occupants_count_Valid() const;

    QString getMaxOccupantsCountException() const;
    void setMaxOccupantsCountException(const QString &max_occupants_count_exception);
    bool is_max_occupants_count_exception_Set() const;
    bool is_max_occupants_count_exception_Valid() const;

    bool isPrivateHome() const;
    void setPrivateHome(const bool &private_home);
    bool is_private_home_Set() const;
    bool is_private_home_Valid() const;

    QString getPrivateHomeException() const;
    void setPrivateHomeException(const QString &private_home_exception);
    bool is_private_home_exception_Set() const;
    bool is_private_home_exception_Valid() const;

    bool isSuite() const;
    void setSuite(const bool &suite);
    bool is_suite_Set() const;
    bool is_suite_Valid() const;

    QString getSuiteException() const;
    void setSuiteException(const QString &suite_exception);
    bool is_suite_exception_Set() const;
    bool is_suite_exception_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    QString getTierException() const;
    void setTierException(const QString &tier_exception);
    bool is_tier_exception_Set() const;
    bool is_tier_exception_Valid() const;

    OAILivingArea getTotalLivingAreas() const;
    void setTotalLivingAreas(const OAILivingArea &total_living_areas);
    bool is_total_living_areas_Set() const;
    bool is_total_living_areas_Valid() const;

    OAIViewsFromUnit getViews() const;
    void setViews(const OAIViewsFromUnit &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_bungalow_or_villa;
    bool m_bungalow_or_villa_isSet;
    bool m_bungalow_or_villa_isValid;

    QString m_bungalow_or_villa_exception;
    bool m_bungalow_or_villa_exception_isSet;
    bool m_bungalow_or_villa_exception_isValid;

    bool m_connecting_unit_available;
    bool m_connecting_unit_available_isSet;
    bool m_connecting_unit_available_isValid;

    QString m_connecting_unit_available_exception;
    bool m_connecting_unit_available_exception_isSet;
    bool m_connecting_unit_available_exception_isValid;

    bool m_executive_floor;
    bool m_executive_floor_isSet;
    bool m_executive_floor_isValid;

    QString m_executive_floor_exception;
    bool m_executive_floor_exception_isSet;
    bool m_executive_floor_exception_isValid;

    qint32 m_max_adult_occupants_count;
    bool m_max_adult_occupants_count_isSet;
    bool m_max_adult_occupants_count_isValid;

    QString m_max_adult_occupants_count_exception;
    bool m_max_adult_occupants_count_exception_isSet;
    bool m_max_adult_occupants_count_exception_isValid;

    qint32 m_max_child_occupants_count;
    bool m_max_child_occupants_count_isSet;
    bool m_max_child_occupants_count_isValid;

    QString m_max_child_occupants_count_exception;
    bool m_max_child_occupants_count_exception_isSet;
    bool m_max_child_occupants_count_exception_isValid;

    qint32 m_max_occupants_count;
    bool m_max_occupants_count_isSet;
    bool m_max_occupants_count_isValid;

    QString m_max_occupants_count_exception;
    bool m_max_occupants_count_exception_isSet;
    bool m_max_occupants_count_exception_isValid;

    bool m_private_home;
    bool m_private_home_isSet;
    bool m_private_home_isValid;

    QString m_private_home_exception;
    bool m_private_home_exception_isSet;
    bool m_private_home_exception_isValid;

    bool m_suite;
    bool m_suite_isSet;
    bool m_suite_isValid;

    QString m_suite_exception;
    bool m_suite_exception_isSet;
    bool m_suite_exception_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    QString m_tier_exception;
    bool m_tier_exception_isSet;
    bool m_tier_exception_isValid;

    OAILivingArea m_total_living_areas;
    bool m_total_living_areas_isSet;
    bool m_total_living_areas_isValid;

    OAIViewsFromUnit m_views;
    bool m_views_isSet;
    bool m_views_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGuestUnitFeatures)

#endif // OAIGuestUnitFeatures_H
