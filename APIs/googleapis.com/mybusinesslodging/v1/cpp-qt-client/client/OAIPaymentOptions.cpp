/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentOptions::OAIPaymentOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentOptions::OAIPaymentOptions() {
    this->initializeModel();
}

OAIPaymentOptions::~OAIPaymentOptions() {}

void OAIPaymentOptions::initializeModel() {

    m_cash_isSet = false;
    m_cash_isValid = false;

    m_cash_exception_isSet = false;
    m_cash_exception_isValid = false;

    m_cheque_isSet = false;
    m_cheque_isValid = false;

    m_cheque_exception_isSet = false;
    m_cheque_exception_isValid = false;

    m_credit_card_isSet = false;
    m_credit_card_isValid = false;

    m_credit_card_exception_isSet = false;
    m_credit_card_exception_isValid = false;

    m_debit_card_isSet = false;
    m_debit_card_isValid = false;

    m_debit_card_exception_isSet = false;
    m_debit_card_exception_isValid = false;

    m_mobile_nfc_isSet = false;
    m_mobile_nfc_isValid = false;

    m_mobile_nfc_exception_isSet = false;
    m_mobile_nfc_exception_isValid = false;
}

void OAIPaymentOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentOptions::fromJsonObject(QJsonObject json) {

    m_cash_isValid = ::OpenAPI::fromJsonValue(m_cash, json[QString("cash")]);
    m_cash_isSet = !json[QString("cash")].isNull() && m_cash_isValid;

    m_cash_exception_isValid = ::OpenAPI::fromJsonValue(m_cash_exception, json[QString("cashException")]);
    m_cash_exception_isSet = !json[QString("cashException")].isNull() && m_cash_exception_isValid;

    m_cheque_isValid = ::OpenAPI::fromJsonValue(m_cheque, json[QString("cheque")]);
    m_cheque_isSet = !json[QString("cheque")].isNull() && m_cheque_isValid;

    m_cheque_exception_isValid = ::OpenAPI::fromJsonValue(m_cheque_exception, json[QString("chequeException")]);
    m_cheque_exception_isSet = !json[QString("chequeException")].isNull() && m_cheque_exception_isValid;

    m_credit_card_isValid = ::OpenAPI::fromJsonValue(m_credit_card, json[QString("creditCard")]);
    m_credit_card_isSet = !json[QString("creditCard")].isNull() && m_credit_card_isValid;

    m_credit_card_exception_isValid = ::OpenAPI::fromJsonValue(m_credit_card_exception, json[QString("creditCardException")]);
    m_credit_card_exception_isSet = !json[QString("creditCardException")].isNull() && m_credit_card_exception_isValid;

    m_debit_card_isValid = ::OpenAPI::fromJsonValue(m_debit_card, json[QString("debitCard")]);
    m_debit_card_isSet = !json[QString("debitCard")].isNull() && m_debit_card_isValid;

    m_debit_card_exception_isValid = ::OpenAPI::fromJsonValue(m_debit_card_exception, json[QString("debitCardException")]);
    m_debit_card_exception_isSet = !json[QString("debitCardException")].isNull() && m_debit_card_exception_isValid;

    m_mobile_nfc_isValid = ::OpenAPI::fromJsonValue(m_mobile_nfc, json[QString("mobileNfc")]);
    m_mobile_nfc_isSet = !json[QString("mobileNfc")].isNull() && m_mobile_nfc_isValid;

    m_mobile_nfc_exception_isValid = ::OpenAPI::fromJsonValue(m_mobile_nfc_exception, json[QString("mobileNfcException")]);
    m_mobile_nfc_exception_isSet = !json[QString("mobileNfcException")].isNull() && m_mobile_nfc_exception_isValid;
}

QString OAIPaymentOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_isSet) {
        obj.insert(QString("cash"), ::OpenAPI::toJsonValue(m_cash));
    }
    if (m_cash_exception_isSet) {
        obj.insert(QString("cashException"), ::OpenAPI::toJsonValue(m_cash_exception));
    }
    if (m_cheque_isSet) {
        obj.insert(QString("cheque"), ::OpenAPI::toJsonValue(m_cheque));
    }
    if (m_cheque_exception_isSet) {
        obj.insert(QString("chequeException"), ::OpenAPI::toJsonValue(m_cheque_exception));
    }
    if (m_credit_card_isSet) {
        obj.insert(QString("creditCard"), ::OpenAPI::toJsonValue(m_credit_card));
    }
    if (m_credit_card_exception_isSet) {
        obj.insert(QString("creditCardException"), ::OpenAPI::toJsonValue(m_credit_card_exception));
    }
    if (m_debit_card_isSet) {
        obj.insert(QString("debitCard"), ::OpenAPI::toJsonValue(m_debit_card));
    }
    if (m_debit_card_exception_isSet) {
        obj.insert(QString("debitCardException"), ::OpenAPI::toJsonValue(m_debit_card_exception));
    }
    if (m_mobile_nfc_isSet) {
        obj.insert(QString("mobileNfc"), ::OpenAPI::toJsonValue(m_mobile_nfc));
    }
    if (m_mobile_nfc_exception_isSet) {
        obj.insert(QString("mobileNfcException"), ::OpenAPI::toJsonValue(m_mobile_nfc_exception));
    }
    return obj;
}

bool OAIPaymentOptions::isCash() const {
    return m_cash;
}
void OAIPaymentOptions::setCash(const bool &cash) {
    m_cash = cash;
    m_cash_isSet = true;
}

bool OAIPaymentOptions::is_cash_Set() const{
    return m_cash_isSet;
}

bool OAIPaymentOptions::is_cash_Valid() const{
    return m_cash_isValid;
}

QString OAIPaymentOptions::getCashException() const {
    return m_cash_exception;
}
void OAIPaymentOptions::setCashException(const QString &cash_exception) {
    m_cash_exception = cash_exception;
    m_cash_exception_isSet = true;
}

bool OAIPaymentOptions::is_cash_exception_Set() const{
    return m_cash_exception_isSet;
}

bool OAIPaymentOptions::is_cash_exception_Valid() const{
    return m_cash_exception_isValid;
}

bool OAIPaymentOptions::isCheque() const {
    return m_cheque;
}
void OAIPaymentOptions::setCheque(const bool &cheque) {
    m_cheque = cheque;
    m_cheque_isSet = true;
}

bool OAIPaymentOptions::is_cheque_Set() const{
    return m_cheque_isSet;
}

bool OAIPaymentOptions::is_cheque_Valid() const{
    return m_cheque_isValid;
}

QString OAIPaymentOptions::getChequeException() const {
    return m_cheque_exception;
}
void OAIPaymentOptions::setChequeException(const QString &cheque_exception) {
    m_cheque_exception = cheque_exception;
    m_cheque_exception_isSet = true;
}

bool OAIPaymentOptions::is_cheque_exception_Set() const{
    return m_cheque_exception_isSet;
}

bool OAIPaymentOptions::is_cheque_exception_Valid() const{
    return m_cheque_exception_isValid;
}

bool OAIPaymentOptions::isCreditCard() const {
    return m_credit_card;
}
void OAIPaymentOptions::setCreditCard(const bool &credit_card) {
    m_credit_card = credit_card;
    m_credit_card_isSet = true;
}

bool OAIPaymentOptions::is_credit_card_Set() const{
    return m_credit_card_isSet;
}

bool OAIPaymentOptions::is_credit_card_Valid() const{
    return m_credit_card_isValid;
}

QString OAIPaymentOptions::getCreditCardException() const {
    return m_credit_card_exception;
}
void OAIPaymentOptions::setCreditCardException(const QString &credit_card_exception) {
    m_credit_card_exception = credit_card_exception;
    m_credit_card_exception_isSet = true;
}

bool OAIPaymentOptions::is_credit_card_exception_Set() const{
    return m_credit_card_exception_isSet;
}

bool OAIPaymentOptions::is_credit_card_exception_Valid() const{
    return m_credit_card_exception_isValid;
}

bool OAIPaymentOptions::isDebitCard() const {
    return m_debit_card;
}
void OAIPaymentOptions::setDebitCard(const bool &debit_card) {
    m_debit_card = debit_card;
    m_debit_card_isSet = true;
}

bool OAIPaymentOptions::is_debit_card_Set() const{
    return m_debit_card_isSet;
}

bool OAIPaymentOptions::is_debit_card_Valid() const{
    return m_debit_card_isValid;
}

QString OAIPaymentOptions::getDebitCardException() const {
    return m_debit_card_exception;
}
void OAIPaymentOptions::setDebitCardException(const QString &debit_card_exception) {
    m_debit_card_exception = debit_card_exception;
    m_debit_card_exception_isSet = true;
}

bool OAIPaymentOptions::is_debit_card_exception_Set() const{
    return m_debit_card_exception_isSet;
}

bool OAIPaymentOptions::is_debit_card_exception_Valid() const{
    return m_debit_card_exception_isValid;
}

bool OAIPaymentOptions::isMobileNfc() const {
    return m_mobile_nfc;
}
void OAIPaymentOptions::setMobileNfc(const bool &mobile_nfc) {
    m_mobile_nfc = mobile_nfc;
    m_mobile_nfc_isSet = true;
}

bool OAIPaymentOptions::is_mobile_nfc_Set() const{
    return m_mobile_nfc_isSet;
}

bool OAIPaymentOptions::is_mobile_nfc_Valid() const{
    return m_mobile_nfc_isValid;
}

QString OAIPaymentOptions::getMobileNfcException() const {
    return m_mobile_nfc_exception;
}
void OAIPaymentOptions::setMobileNfcException(const QString &mobile_nfc_exception) {
    m_mobile_nfc_exception = mobile_nfc_exception;
    m_mobile_nfc_exception_isSet = true;
}

bool OAIPaymentOptions::is_mobile_nfc_exception_Set() const{
    return m_mobile_nfc_exception_isSet;
}

bool OAIPaymentOptions::is_mobile_nfc_exception_Valid() const{
    return m_mobile_nfc_exception_isValid;
}

bool OAIPaymentOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheque_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheque_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_card_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_card_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_nfc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_nfc_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
