/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoodAndDrink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoodAndDrink::OAIFoodAndDrink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoodAndDrink::OAIFoodAndDrink() {
    this->initializeModel();
}

OAIFoodAndDrink::~OAIFoodAndDrink() {}

void OAIFoodAndDrink::initializeModel() {

    m_bar_isSet = false;
    m_bar_isValid = false;

    m_bar_exception_isSet = false;
    m_bar_exception_isValid = false;

    m_breakfast_available_isSet = false;
    m_breakfast_available_isValid = false;

    m_breakfast_available_exception_isSet = false;
    m_breakfast_available_exception_isValid = false;

    m_breakfast_buffet_isSet = false;
    m_breakfast_buffet_isValid = false;

    m_breakfast_buffet_exception_isSet = false;
    m_breakfast_buffet_exception_isValid = false;

    m_buffet_isSet = false;
    m_buffet_isValid = false;

    m_buffet_exception_isSet = false;
    m_buffet_exception_isValid = false;

    m_dinner_buffet_isSet = false;
    m_dinner_buffet_isValid = false;

    m_dinner_buffet_exception_isSet = false;
    m_dinner_buffet_exception_isValid = false;

    m_free_breakfast_isSet = false;
    m_free_breakfast_isValid = false;

    m_free_breakfast_exception_isSet = false;
    m_free_breakfast_exception_isValid = false;

    m_restaurant_isSet = false;
    m_restaurant_isValid = false;

    m_restaurant_exception_isSet = false;
    m_restaurant_exception_isValid = false;

    m_restaurants_count_isSet = false;
    m_restaurants_count_isValid = false;

    m_restaurants_count_exception_isSet = false;
    m_restaurants_count_exception_isValid = false;

    m_room_service_isSet = false;
    m_room_service_isValid = false;

    m_room_service_exception_isSet = false;
    m_room_service_exception_isValid = false;

    m_table_service_isSet = false;
    m_table_service_isValid = false;

    m_table_service_exception_isSet = false;
    m_table_service_exception_isValid = false;

    m_twenty_four_hour_room_service_isSet = false;
    m_twenty_four_hour_room_service_isValid = false;

    m_twenty_four_hour_room_service_exception_isSet = false;
    m_twenty_four_hour_room_service_exception_isValid = false;

    m_vending_machine_isSet = false;
    m_vending_machine_isValid = false;

    m_vending_machine_exception_isSet = false;
    m_vending_machine_exception_isValid = false;
}

void OAIFoodAndDrink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoodAndDrink::fromJsonObject(QJsonObject json) {

    m_bar_isValid = ::OpenAPI::fromJsonValue(m_bar, json[QString("bar")]);
    m_bar_isSet = !json[QString("bar")].isNull() && m_bar_isValid;

    m_bar_exception_isValid = ::OpenAPI::fromJsonValue(m_bar_exception, json[QString("barException")]);
    m_bar_exception_isSet = !json[QString("barException")].isNull() && m_bar_exception_isValid;

    m_breakfast_available_isValid = ::OpenAPI::fromJsonValue(m_breakfast_available, json[QString("breakfastAvailable")]);
    m_breakfast_available_isSet = !json[QString("breakfastAvailable")].isNull() && m_breakfast_available_isValid;

    m_breakfast_available_exception_isValid = ::OpenAPI::fromJsonValue(m_breakfast_available_exception, json[QString("breakfastAvailableException")]);
    m_breakfast_available_exception_isSet = !json[QString("breakfastAvailableException")].isNull() && m_breakfast_available_exception_isValid;

    m_breakfast_buffet_isValid = ::OpenAPI::fromJsonValue(m_breakfast_buffet, json[QString("breakfastBuffet")]);
    m_breakfast_buffet_isSet = !json[QString("breakfastBuffet")].isNull() && m_breakfast_buffet_isValid;

    m_breakfast_buffet_exception_isValid = ::OpenAPI::fromJsonValue(m_breakfast_buffet_exception, json[QString("breakfastBuffetException")]);
    m_breakfast_buffet_exception_isSet = !json[QString("breakfastBuffetException")].isNull() && m_breakfast_buffet_exception_isValid;

    m_buffet_isValid = ::OpenAPI::fromJsonValue(m_buffet, json[QString("buffet")]);
    m_buffet_isSet = !json[QString("buffet")].isNull() && m_buffet_isValid;

    m_buffet_exception_isValid = ::OpenAPI::fromJsonValue(m_buffet_exception, json[QString("buffetException")]);
    m_buffet_exception_isSet = !json[QString("buffetException")].isNull() && m_buffet_exception_isValid;

    m_dinner_buffet_isValid = ::OpenAPI::fromJsonValue(m_dinner_buffet, json[QString("dinnerBuffet")]);
    m_dinner_buffet_isSet = !json[QString("dinnerBuffet")].isNull() && m_dinner_buffet_isValid;

    m_dinner_buffet_exception_isValid = ::OpenAPI::fromJsonValue(m_dinner_buffet_exception, json[QString("dinnerBuffetException")]);
    m_dinner_buffet_exception_isSet = !json[QString("dinnerBuffetException")].isNull() && m_dinner_buffet_exception_isValid;

    m_free_breakfast_isValid = ::OpenAPI::fromJsonValue(m_free_breakfast, json[QString("freeBreakfast")]);
    m_free_breakfast_isSet = !json[QString("freeBreakfast")].isNull() && m_free_breakfast_isValid;

    m_free_breakfast_exception_isValid = ::OpenAPI::fromJsonValue(m_free_breakfast_exception, json[QString("freeBreakfastException")]);
    m_free_breakfast_exception_isSet = !json[QString("freeBreakfastException")].isNull() && m_free_breakfast_exception_isValid;

    m_restaurant_isValid = ::OpenAPI::fromJsonValue(m_restaurant, json[QString("restaurant")]);
    m_restaurant_isSet = !json[QString("restaurant")].isNull() && m_restaurant_isValid;

    m_restaurant_exception_isValid = ::OpenAPI::fromJsonValue(m_restaurant_exception, json[QString("restaurantException")]);
    m_restaurant_exception_isSet = !json[QString("restaurantException")].isNull() && m_restaurant_exception_isValid;

    m_restaurants_count_isValid = ::OpenAPI::fromJsonValue(m_restaurants_count, json[QString("restaurantsCount")]);
    m_restaurants_count_isSet = !json[QString("restaurantsCount")].isNull() && m_restaurants_count_isValid;

    m_restaurants_count_exception_isValid = ::OpenAPI::fromJsonValue(m_restaurants_count_exception, json[QString("restaurantsCountException")]);
    m_restaurants_count_exception_isSet = !json[QString("restaurantsCountException")].isNull() && m_restaurants_count_exception_isValid;

    m_room_service_isValid = ::OpenAPI::fromJsonValue(m_room_service, json[QString("roomService")]);
    m_room_service_isSet = !json[QString("roomService")].isNull() && m_room_service_isValid;

    m_room_service_exception_isValid = ::OpenAPI::fromJsonValue(m_room_service_exception, json[QString("roomServiceException")]);
    m_room_service_exception_isSet = !json[QString("roomServiceException")].isNull() && m_room_service_exception_isValid;

    m_table_service_isValid = ::OpenAPI::fromJsonValue(m_table_service, json[QString("tableService")]);
    m_table_service_isSet = !json[QString("tableService")].isNull() && m_table_service_isValid;

    m_table_service_exception_isValid = ::OpenAPI::fromJsonValue(m_table_service_exception, json[QString("tableServiceException")]);
    m_table_service_exception_isSet = !json[QString("tableServiceException")].isNull() && m_table_service_exception_isValid;

    m_twenty_four_hour_room_service_isValid = ::OpenAPI::fromJsonValue(m_twenty_four_hour_room_service, json[QString("twentyFourHourRoomService")]);
    m_twenty_four_hour_room_service_isSet = !json[QString("twentyFourHourRoomService")].isNull() && m_twenty_four_hour_room_service_isValid;

    m_twenty_four_hour_room_service_exception_isValid = ::OpenAPI::fromJsonValue(m_twenty_four_hour_room_service_exception, json[QString("twentyFourHourRoomServiceException")]);
    m_twenty_four_hour_room_service_exception_isSet = !json[QString("twentyFourHourRoomServiceException")].isNull() && m_twenty_four_hour_room_service_exception_isValid;

    m_vending_machine_isValid = ::OpenAPI::fromJsonValue(m_vending_machine, json[QString("vendingMachine")]);
    m_vending_machine_isSet = !json[QString("vendingMachine")].isNull() && m_vending_machine_isValid;

    m_vending_machine_exception_isValid = ::OpenAPI::fromJsonValue(m_vending_machine_exception, json[QString("vendingMachineException")]);
    m_vending_machine_exception_isSet = !json[QString("vendingMachineException")].isNull() && m_vending_machine_exception_isValid;
}

QString OAIFoodAndDrink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoodAndDrink::asJsonObject() const {
    QJsonObject obj;
    if (m_bar_isSet) {
        obj.insert(QString("bar"), ::OpenAPI::toJsonValue(m_bar));
    }
    if (m_bar_exception_isSet) {
        obj.insert(QString("barException"), ::OpenAPI::toJsonValue(m_bar_exception));
    }
    if (m_breakfast_available_isSet) {
        obj.insert(QString("breakfastAvailable"), ::OpenAPI::toJsonValue(m_breakfast_available));
    }
    if (m_breakfast_available_exception_isSet) {
        obj.insert(QString("breakfastAvailableException"), ::OpenAPI::toJsonValue(m_breakfast_available_exception));
    }
    if (m_breakfast_buffet_isSet) {
        obj.insert(QString("breakfastBuffet"), ::OpenAPI::toJsonValue(m_breakfast_buffet));
    }
    if (m_breakfast_buffet_exception_isSet) {
        obj.insert(QString("breakfastBuffetException"), ::OpenAPI::toJsonValue(m_breakfast_buffet_exception));
    }
    if (m_buffet_isSet) {
        obj.insert(QString("buffet"), ::OpenAPI::toJsonValue(m_buffet));
    }
    if (m_buffet_exception_isSet) {
        obj.insert(QString("buffetException"), ::OpenAPI::toJsonValue(m_buffet_exception));
    }
    if (m_dinner_buffet_isSet) {
        obj.insert(QString("dinnerBuffet"), ::OpenAPI::toJsonValue(m_dinner_buffet));
    }
    if (m_dinner_buffet_exception_isSet) {
        obj.insert(QString("dinnerBuffetException"), ::OpenAPI::toJsonValue(m_dinner_buffet_exception));
    }
    if (m_free_breakfast_isSet) {
        obj.insert(QString("freeBreakfast"), ::OpenAPI::toJsonValue(m_free_breakfast));
    }
    if (m_free_breakfast_exception_isSet) {
        obj.insert(QString("freeBreakfastException"), ::OpenAPI::toJsonValue(m_free_breakfast_exception));
    }
    if (m_restaurant_isSet) {
        obj.insert(QString("restaurant"), ::OpenAPI::toJsonValue(m_restaurant));
    }
    if (m_restaurant_exception_isSet) {
        obj.insert(QString("restaurantException"), ::OpenAPI::toJsonValue(m_restaurant_exception));
    }
    if (m_restaurants_count_isSet) {
        obj.insert(QString("restaurantsCount"), ::OpenAPI::toJsonValue(m_restaurants_count));
    }
    if (m_restaurants_count_exception_isSet) {
        obj.insert(QString("restaurantsCountException"), ::OpenAPI::toJsonValue(m_restaurants_count_exception));
    }
    if (m_room_service_isSet) {
        obj.insert(QString("roomService"), ::OpenAPI::toJsonValue(m_room_service));
    }
    if (m_room_service_exception_isSet) {
        obj.insert(QString("roomServiceException"), ::OpenAPI::toJsonValue(m_room_service_exception));
    }
    if (m_table_service_isSet) {
        obj.insert(QString("tableService"), ::OpenAPI::toJsonValue(m_table_service));
    }
    if (m_table_service_exception_isSet) {
        obj.insert(QString("tableServiceException"), ::OpenAPI::toJsonValue(m_table_service_exception));
    }
    if (m_twenty_four_hour_room_service_isSet) {
        obj.insert(QString("twentyFourHourRoomService"), ::OpenAPI::toJsonValue(m_twenty_four_hour_room_service));
    }
    if (m_twenty_four_hour_room_service_exception_isSet) {
        obj.insert(QString("twentyFourHourRoomServiceException"), ::OpenAPI::toJsonValue(m_twenty_four_hour_room_service_exception));
    }
    if (m_vending_machine_isSet) {
        obj.insert(QString("vendingMachine"), ::OpenAPI::toJsonValue(m_vending_machine));
    }
    if (m_vending_machine_exception_isSet) {
        obj.insert(QString("vendingMachineException"), ::OpenAPI::toJsonValue(m_vending_machine_exception));
    }
    return obj;
}

bool OAIFoodAndDrink::isBar() const {
    return m_bar;
}
void OAIFoodAndDrink::setBar(const bool &bar) {
    m_bar = bar;
    m_bar_isSet = true;
}

bool OAIFoodAndDrink::is_bar_Set() const{
    return m_bar_isSet;
}

bool OAIFoodAndDrink::is_bar_Valid() const{
    return m_bar_isValid;
}

QString OAIFoodAndDrink::getBarException() const {
    return m_bar_exception;
}
void OAIFoodAndDrink::setBarException(const QString &bar_exception) {
    m_bar_exception = bar_exception;
    m_bar_exception_isSet = true;
}

bool OAIFoodAndDrink::is_bar_exception_Set() const{
    return m_bar_exception_isSet;
}

bool OAIFoodAndDrink::is_bar_exception_Valid() const{
    return m_bar_exception_isValid;
}

bool OAIFoodAndDrink::isBreakfastAvailable() const {
    return m_breakfast_available;
}
void OAIFoodAndDrink::setBreakfastAvailable(const bool &breakfast_available) {
    m_breakfast_available = breakfast_available;
    m_breakfast_available_isSet = true;
}

bool OAIFoodAndDrink::is_breakfast_available_Set() const{
    return m_breakfast_available_isSet;
}

bool OAIFoodAndDrink::is_breakfast_available_Valid() const{
    return m_breakfast_available_isValid;
}

QString OAIFoodAndDrink::getBreakfastAvailableException() const {
    return m_breakfast_available_exception;
}
void OAIFoodAndDrink::setBreakfastAvailableException(const QString &breakfast_available_exception) {
    m_breakfast_available_exception = breakfast_available_exception;
    m_breakfast_available_exception_isSet = true;
}

bool OAIFoodAndDrink::is_breakfast_available_exception_Set() const{
    return m_breakfast_available_exception_isSet;
}

bool OAIFoodAndDrink::is_breakfast_available_exception_Valid() const{
    return m_breakfast_available_exception_isValid;
}

bool OAIFoodAndDrink::isBreakfastBuffet() const {
    return m_breakfast_buffet;
}
void OAIFoodAndDrink::setBreakfastBuffet(const bool &breakfast_buffet) {
    m_breakfast_buffet = breakfast_buffet;
    m_breakfast_buffet_isSet = true;
}

bool OAIFoodAndDrink::is_breakfast_buffet_Set() const{
    return m_breakfast_buffet_isSet;
}

bool OAIFoodAndDrink::is_breakfast_buffet_Valid() const{
    return m_breakfast_buffet_isValid;
}

QString OAIFoodAndDrink::getBreakfastBuffetException() const {
    return m_breakfast_buffet_exception;
}
void OAIFoodAndDrink::setBreakfastBuffetException(const QString &breakfast_buffet_exception) {
    m_breakfast_buffet_exception = breakfast_buffet_exception;
    m_breakfast_buffet_exception_isSet = true;
}

bool OAIFoodAndDrink::is_breakfast_buffet_exception_Set() const{
    return m_breakfast_buffet_exception_isSet;
}

bool OAIFoodAndDrink::is_breakfast_buffet_exception_Valid() const{
    return m_breakfast_buffet_exception_isValid;
}

bool OAIFoodAndDrink::isBuffet() const {
    return m_buffet;
}
void OAIFoodAndDrink::setBuffet(const bool &buffet) {
    m_buffet = buffet;
    m_buffet_isSet = true;
}

bool OAIFoodAndDrink::is_buffet_Set() const{
    return m_buffet_isSet;
}

bool OAIFoodAndDrink::is_buffet_Valid() const{
    return m_buffet_isValid;
}

QString OAIFoodAndDrink::getBuffetException() const {
    return m_buffet_exception;
}
void OAIFoodAndDrink::setBuffetException(const QString &buffet_exception) {
    m_buffet_exception = buffet_exception;
    m_buffet_exception_isSet = true;
}

bool OAIFoodAndDrink::is_buffet_exception_Set() const{
    return m_buffet_exception_isSet;
}

bool OAIFoodAndDrink::is_buffet_exception_Valid() const{
    return m_buffet_exception_isValid;
}

bool OAIFoodAndDrink::isDinnerBuffet() const {
    return m_dinner_buffet;
}
void OAIFoodAndDrink::setDinnerBuffet(const bool &dinner_buffet) {
    m_dinner_buffet = dinner_buffet;
    m_dinner_buffet_isSet = true;
}

bool OAIFoodAndDrink::is_dinner_buffet_Set() const{
    return m_dinner_buffet_isSet;
}

bool OAIFoodAndDrink::is_dinner_buffet_Valid() const{
    return m_dinner_buffet_isValid;
}

QString OAIFoodAndDrink::getDinnerBuffetException() const {
    return m_dinner_buffet_exception;
}
void OAIFoodAndDrink::setDinnerBuffetException(const QString &dinner_buffet_exception) {
    m_dinner_buffet_exception = dinner_buffet_exception;
    m_dinner_buffet_exception_isSet = true;
}

bool OAIFoodAndDrink::is_dinner_buffet_exception_Set() const{
    return m_dinner_buffet_exception_isSet;
}

bool OAIFoodAndDrink::is_dinner_buffet_exception_Valid() const{
    return m_dinner_buffet_exception_isValid;
}

bool OAIFoodAndDrink::isFreeBreakfast() const {
    return m_free_breakfast;
}
void OAIFoodAndDrink::setFreeBreakfast(const bool &free_breakfast) {
    m_free_breakfast = free_breakfast;
    m_free_breakfast_isSet = true;
}

bool OAIFoodAndDrink::is_free_breakfast_Set() const{
    return m_free_breakfast_isSet;
}

bool OAIFoodAndDrink::is_free_breakfast_Valid() const{
    return m_free_breakfast_isValid;
}

QString OAIFoodAndDrink::getFreeBreakfastException() const {
    return m_free_breakfast_exception;
}
void OAIFoodAndDrink::setFreeBreakfastException(const QString &free_breakfast_exception) {
    m_free_breakfast_exception = free_breakfast_exception;
    m_free_breakfast_exception_isSet = true;
}

bool OAIFoodAndDrink::is_free_breakfast_exception_Set() const{
    return m_free_breakfast_exception_isSet;
}

bool OAIFoodAndDrink::is_free_breakfast_exception_Valid() const{
    return m_free_breakfast_exception_isValid;
}

bool OAIFoodAndDrink::isRestaurant() const {
    return m_restaurant;
}
void OAIFoodAndDrink::setRestaurant(const bool &restaurant) {
    m_restaurant = restaurant;
    m_restaurant_isSet = true;
}

bool OAIFoodAndDrink::is_restaurant_Set() const{
    return m_restaurant_isSet;
}

bool OAIFoodAndDrink::is_restaurant_Valid() const{
    return m_restaurant_isValid;
}

QString OAIFoodAndDrink::getRestaurantException() const {
    return m_restaurant_exception;
}
void OAIFoodAndDrink::setRestaurantException(const QString &restaurant_exception) {
    m_restaurant_exception = restaurant_exception;
    m_restaurant_exception_isSet = true;
}

bool OAIFoodAndDrink::is_restaurant_exception_Set() const{
    return m_restaurant_exception_isSet;
}

bool OAIFoodAndDrink::is_restaurant_exception_Valid() const{
    return m_restaurant_exception_isValid;
}

qint32 OAIFoodAndDrink::getRestaurantsCount() const {
    return m_restaurants_count;
}
void OAIFoodAndDrink::setRestaurantsCount(const qint32 &restaurants_count) {
    m_restaurants_count = restaurants_count;
    m_restaurants_count_isSet = true;
}

bool OAIFoodAndDrink::is_restaurants_count_Set() const{
    return m_restaurants_count_isSet;
}

bool OAIFoodAndDrink::is_restaurants_count_Valid() const{
    return m_restaurants_count_isValid;
}

QString OAIFoodAndDrink::getRestaurantsCountException() const {
    return m_restaurants_count_exception;
}
void OAIFoodAndDrink::setRestaurantsCountException(const QString &restaurants_count_exception) {
    m_restaurants_count_exception = restaurants_count_exception;
    m_restaurants_count_exception_isSet = true;
}

bool OAIFoodAndDrink::is_restaurants_count_exception_Set() const{
    return m_restaurants_count_exception_isSet;
}

bool OAIFoodAndDrink::is_restaurants_count_exception_Valid() const{
    return m_restaurants_count_exception_isValid;
}

bool OAIFoodAndDrink::isRoomService() const {
    return m_room_service;
}
void OAIFoodAndDrink::setRoomService(const bool &room_service) {
    m_room_service = room_service;
    m_room_service_isSet = true;
}

bool OAIFoodAndDrink::is_room_service_Set() const{
    return m_room_service_isSet;
}

bool OAIFoodAndDrink::is_room_service_Valid() const{
    return m_room_service_isValid;
}

QString OAIFoodAndDrink::getRoomServiceException() const {
    return m_room_service_exception;
}
void OAIFoodAndDrink::setRoomServiceException(const QString &room_service_exception) {
    m_room_service_exception = room_service_exception;
    m_room_service_exception_isSet = true;
}

bool OAIFoodAndDrink::is_room_service_exception_Set() const{
    return m_room_service_exception_isSet;
}

bool OAIFoodAndDrink::is_room_service_exception_Valid() const{
    return m_room_service_exception_isValid;
}

bool OAIFoodAndDrink::isTableService() const {
    return m_table_service;
}
void OAIFoodAndDrink::setTableService(const bool &table_service) {
    m_table_service = table_service;
    m_table_service_isSet = true;
}

bool OAIFoodAndDrink::is_table_service_Set() const{
    return m_table_service_isSet;
}

bool OAIFoodAndDrink::is_table_service_Valid() const{
    return m_table_service_isValid;
}

QString OAIFoodAndDrink::getTableServiceException() const {
    return m_table_service_exception;
}
void OAIFoodAndDrink::setTableServiceException(const QString &table_service_exception) {
    m_table_service_exception = table_service_exception;
    m_table_service_exception_isSet = true;
}

bool OAIFoodAndDrink::is_table_service_exception_Set() const{
    return m_table_service_exception_isSet;
}

bool OAIFoodAndDrink::is_table_service_exception_Valid() const{
    return m_table_service_exception_isValid;
}

bool OAIFoodAndDrink::isTwentyFourHourRoomService() const {
    return m_twenty_four_hour_room_service;
}
void OAIFoodAndDrink::setTwentyFourHourRoomService(const bool &twenty_four_hour_room_service) {
    m_twenty_four_hour_room_service = twenty_four_hour_room_service;
    m_twenty_four_hour_room_service_isSet = true;
}

bool OAIFoodAndDrink::is_twenty_four_hour_room_service_Set() const{
    return m_twenty_four_hour_room_service_isSet;
}

bool OAIFoodAndDrink::is_twenty_four_hour_room_service_Valid() const{
    return m_twenty_four_hour_room_service_isValid;
}

QString OAIFoodAndDrink::getTwentyFourHourRoomServiceException() const {
    return m_twenty_four_hour_room_service_exception;
}
void OAIFoodAndDrink::setTwentyFourHourRoomServiceException(const QString &twenty_four_hour_room_service_exception) {
    m_twenty_four_hour_room_service_exception = twenty_four_hour_room_service_exception;
    m_twenty_four_hour_room_service_exception_isSet = true;
}

bool OAIFoodAndDrink::is_twenty_four_hour_room_service_exception_Set() const{
    return m_twenty_four_hour_room_service_exception_isSet;
}

bool OAIFoodAndDrink::is_twenty_four_hour_room_service_exception_Valid() const{
    return m_twenty_four_hour_room_service_exception_isValid;
}

bool OAIFoodAndDrink::isVendingMachine() const {
    return m_vending_machine;
}
void OAIFoodAndDrink::setVendingMachine(const bool &vending_machine) {
    m_vending_machine = vending_machine;
    m_vending_machine_isSet = true;
}

bool OAIFoodAndDrink::is_vending_machine_Set() const{
    return m_vending_machine_isSet;
}

bool OAIFoodAndDrink::is_vending_machine_Valid() const{
    return m_vending_machine_isValid;
}

QString OAIFoodAndDrink::getVendingMachineException() const {
    return m_vending_machine_exception;
}
void OAIFoodAndDrink::setVendingMachineException(const QString &vending_machine_exception) {
    m_vending_machine_exception = vending_machine_exception;
    m_vending_machine_exception_isSet = true;
}

bool OAIFoodAndDrink::is_vending_machine_exception_Set() const{
    return m_vending_machine_exception_isSet;
}

bool OAIFoodAndDrink::is_vending_machine_exception_Valid() const{
    return m_vending_machine_exception_isValid;
}

bool OAIFoodAndDrink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bar_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakfast_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakfast_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakfast_buffet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakfast_buffet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dinner_buffet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dinner_buffet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_breakfast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_breakfast_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurant_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurants_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurants_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twenty_four_hour_room_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twenty_four_hour_room_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vending_machine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vending_machine_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoodAndDrink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
