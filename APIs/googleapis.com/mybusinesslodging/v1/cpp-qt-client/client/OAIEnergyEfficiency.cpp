/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnergyEfficiency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnergyEfficiency::OAIEnergyEfficiency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnergyEfficiency::OAIEnergyEfficiency() {
    this->initializeModel();
}

OAIEnergyEfficiency::~OAIEnergyEfficiency() {}

void OAIEnergyEfficiency::initializeModel() {

    m_carbon_free_energy_sources_isSet = false;
    m_carbon_free_energy_sources_isValid = false;

    m_carbon_free_energy_sources_exception_isSet = false;
    m_carbon_free_energy_sources_exception_isValid = false;

    m_energy_conservation_program_isSet = false;
    m_energy_conservation_program_isValid = false;

    m_energy_conservation_program_exception_isSet = false;
    m_energy_conservation_program_exception_isValid = false;

    m_energy_efficient_heating_and_cooling_systems_isSet = false;
    m_energy_efficient_heating_and_cooling_systems_isValid = false;

    m_energy_efficient_heating_and_cooling_systems_exception_isSet = false;
    m_energy_efficient_heating_and_cooling_systems_exception_isValid = false;

    m_energy_efficient_lighting_isSet = false;
    m_energy_efficient_lighting_isValid = false;

    m_energy_efficient_lighting_exception_isSet = false;
    m_energy_efficient_lighting_exception_isValid = false;

    m_energy_saving_thermostats_isSet = false;
    m_energy_saving_thermostats_isValid = false;

    m_energy_saving_thermostats_exception_isSet = false;
    m_energy_saving_thermostats_exception_isValid = false;

    m_green_building_design_isSet = false;
    m_green_building_design_isValid = false;

    m_green_building_design_exception_isSet = false;
    m_green_building_design_exception_isValid = false;

    m_independent_organization_audits_energy_use_isSet = false;
    m_independent_organization_audits_energy_use_isValid = false;

    m_independent_organization_audits_energy_use_exception_isSet = false;
    m_independent_organization_audits_energy_use_exception_isValid = false;
}

void OAIEnergyEfficiency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnergyEfficiency::fromJsonObject(QJsonObject json) {

    m_carbon_free_energy_sources_isValid = ::OpenAPI::fromJsonValue(m_carbon_free_energy_sources, json[QString("carbonFreeEnergySources")]);
    m_carbon_free_energy_sources_isSet = !json[QString("carbonFreeEnergySources")].isNull() && m_carbon_free_energy_sources_isValid;

    m_carbon_free_energy_sources_exception_isValid = ::OpenAPI::fromJsonValue(m_carbon_free_energy_sources_exception, json[QString("carbonFreeEnergySourcesException")]);
    m_carbon_free_energy_sources_exception_isSet = !json[QString("carbonFreeEnergySourcesException")].isNull() && m_carbon_free_energy_sources_exception_isValid;

    m_energy_conservation_program_isValid = ::OpenAPI::fromJsonValue(m_energy_conservation_program, json[QString("energyConservationProgram")]);
    m_energy_conservation_program_isSet = !json[QString("energyConservationProgram")].isNull() && m_energy_conservation_program_isValid;

    m_energy_conservation_program_exception_isValid = ::OpenAPI::fromJsonValue(m_energy_conservation_program_exception, json[QString("energyConservationProgramException")]);
    m_energy_conservation_program_exception_isSet = !json[QString("energyConservationProgramException")].isNull() && m_energy_conservation_program_exception_isValid;

    m_energy_efficient_heating_and_cooling_systems_isValid = ::OpenAPI::fromJsonValue(m_energy_efficient_heating_and_cooling_systems, json[QString("energyEfficientHeatingAndCoolingSystems")]);
    m_energy_efficient_heating_and_cooling_systems_isSet = !json[QString("energyEfficientHeatingAndCoolingSystems")].isNull() && m_energy_efficient_heating_and_cooling_systems_isValid;

    m_energy_efficient_heating_and_cooling_systems_exception_isValid = ::OpenAPI::fromJsonValue(m_energy_efficient_heating_and_cooling_systems_exception, json[QString("energyEfficientHeatingAndCoolingSystemsException")]);
    m_energy_efficient_heating_and_cooling_systems_exception_isSet = !json[QString("energyEfficientHeatingAndCoolingSystemsException")].isNull() && m_energy_efficient_heating_and_cooling_systems_exception_isValid;

    m_energy_efficient_lighting_isValid = ::OpenAPI::fromJsonValue(m_energy_efficient_lighting, json[QString("energyEfficientLighting")]);
    m_energy_efficient_lighting_isSet = !json[QString("energyEfficientLighting")].isNull() && m_energy_efficient_lighting_isValid;

    m_energy_efficient_lighting_exception_isValid = ::OpenAPI::fromJsonValue(m_energy_efficient_lighting_exception, json[QString("energyEfficientLightingException")]);
    m_energy_efficient_lighting_exception_isSet = !json[QString("energyEfficientLightingException")].isNull() && m_energy_efficient_lighting_exception_isValid;

    m_energy_saving_thermostats_isValid = ::OpenAPI::fromJsonValue(m_energy_saving_thermostats, json[QString("energySavingThermostats")]);
    m_energy_saving_thermostats_isSet = !json[QString("energySavingThermostats")].isNull() && m_energy_saving_thermostats_isValid;

    m_energy_saving_thermostats_exception_isValid = ::OpenAPI::fromJsonValue(m_energy_saving_thermostats_exception, json[QString("energySavingThermostatsException")]);
    m_energy_saving_thermostats_exception_isSet = !json[QString("energySavingThermostatsException")].isNull() && m_energy_saving_thermostats_exception_isValid;

    m_green_building_design_isValid = ::OpenAPI::fromJsonValue(m_green_building_design, json[QString("greenBuildingDesign")]);
    m_green_building_design_isSet = !json[QString("greenBuildingDesign")].isNull() && m_green_building_design_isValid;

    m_green_building_design_exception_isValid = ::OpenAPI::fromJsonValue(m_green_building_design_exception, json[QString("greenBuildingDesignException")]);
    m_green_building_design_exception_isSet = !json[QString("greenBuildingDesignException")].isNull() && m_green_building_design_exception_isValid;

    m_independent_organization_audits_energy_use_isValid = ::OpenAPI::fromJsonValue(m_independent_organization_audits_energy_use, json[QString("independentOrganizationAuditsEnergyUse")]);
    m_independent_organization_audits_energy_use_isSet = !json[QString("independentOrganizationAuditsEnergyUse")].isNull() && m_independent_organization_audits_energy_use_isValid;

    m_independent_organization_audits_energy_use_exception_isValid = ::OpenAPI::fromJsonValue(m_independent_organization_audits_energy_use_exception, json[QString("independentOrganizationAuditsEnergyUseException")]);
    m_independent_organization_audits_energy_use_exception_isSet = !json[QString("independentOrganizationAuditsEnergyUseException")].isNull() && m_independent_organization_audits_energy_use_exception_isValid;
}

QString OAIEnergyEfficiency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnergyEfficiency::asJsonObject() const {
    QJsonObject obj;
    if (m_carbon_free_energy_sources_isSet) {
        obj.insert(QString("carbonFreeEnergySources"), ::OpenAPI::toJsonValue(m_carbon_free_energy_sources));
    }
    if (m_carbon_free_energy_sources_exception_isSet) {
        obj.insert(QString("carbonFreeEnergySourcesException"), ::OpenAPI::toJsonValue(m_carbon_free_energy_sources_exception));
    }
    if (m_energy_conservation_program_isSet) {
        obj.insert(QString("energyConservationProgram"), ::OpenAPI::toJsonValue(m_energy_conservation_program));
    }
    if (m_energy_conservation_program_exception_isSet) {
        obj.insert(QString("energyConservationProgramException"), ::OpenAPI::toJsonValue(m_energy_conservation_program_exception));
    }
    if (m_energy_efficient_heating_and_cooling_systems_isSet) {
        obj.insert(QString("energyEfficientHeatingAndCoolingSystems"), ::OpenAPI::toJsonValue(m_energy_efficient_heating_and_cooling_systems));
    }
    if (m_energy_efficient_heating_and_cooling_systems_exception_isSet) {
        obj.insert(QString("energyEfficientHeatingAndCoolingSystemsException"), ::OpenAPI::toJsonValue(m_energy_efficient_heating_and_cooling_systems_exception));
    }
    if (m_energy_efficient_lighting_isSet) {
        obj.insert(QString("energyEfficientLighting"), ::OpenAPI::toJsonValue(m_energy_efficient_lighting));
    }
    if (m_energy_efficient_lighting_exception_isSet) {
        obj.insert(QString("energyEfficientLightingException"), ::OpenAPI::toJsonValue(m_energy_efficient_lighting_exception));
    }
    if (m_energy_saving_thermostats_isSet) {
        obj.insert(QString("energySavingThermostats"), ::OpenAPI::toJsonValue(m_energy_saving_thermostats));
    }
    if (m_energy_saving_thermostats_exception_isSet) {
        obj.insert(QString("energySavingThermostatsException"), ::OpenAPI::toJsonValue(m_energy_saving_thermostats_exception));
    }
    if (m_green_building_design_isSet) {
        obj.insert(QString("greenBuildingDesign"), ::OpenAPI::toJsonValue(m_green_building_design));
    }
    if (m_green_building_design_exception_isSet) {
        obj.insert(QString("greenBuildingDesignException"), ::OpenAPI::toJsonValue(m_green_building_design_exception));
    }
    if (m_independent_organization_audits_energy_use_isSet) {
        obj.insert(QString("independentOrganizationAuditsEnergyUse"), ::OpenAPI::toJsonValue(m_independent_organization_audits_energy_use));
    }
    if (m_independent_organization_audits_energy_use_exception_isSet) {
        obj.insert(QString("independentOrganizationAuditsEnergyUseException"), ::OpenAPI::toJsonValue(m_independent_organization_audits_energy_use_exception));
    }
    return obj;
}

bool OAIEnergyEfficiency::isCarbonFreeEnergySources() const {
    return m_carbon_free_energy_sources;
}
void OAIEnergyEfficiency::setCarbonFreeEnergySources(const bool &carbon_free_energy_sources) {
    m_carbon_free_energy_sources = carbon_free_energy_sources;
    m_carbon_free_energy_sources_isSet = true;
}

bool OAIEnergyEfficiency::is_carbon_free_energy_sources_Set() const{
    return m_carbon_free_energy_sources_isSet;
}

bool OAIEnergyEfficiency::is_carbon_free_energy_sources_Valid() const{
    return m_carbon_free_energy_sources_isValid;
}

QString OAIEnergyEfficiency::getCarbonFreeEnergySourcesException() const {
    return m_carbon_free_energy_sources_exception;
}
void OAIEnergyEfficiency::setCarbonFreeEnergySourcesException(const QString &carbon_free_energy_sources_exception) {
    m_carbon_free_energy_sources_exception = carbon_free_energy_sources_exception;
    m_carbon_free_energy_sources_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_carbon_free_energy_sources_exception_Set() const{
    return m_carbon_free_energy_sources_exception_isSet;
}

bool OAIEnergyEfficiency::is_carbon_free_energy_sources_exception_Valid() const{
    return m_carbon_free_energy_sources_exception_isValid;
}

bool OAIEnergyEfficiency::isEnergyConservationProgram() const {
    return m_energy_conservation_program;
}
void OAIEnergyEfficiency::setEnergyConservationProgram(const bool &energy_conservation_program) {
    m_energy_conservation_program = energy_conservation_program;
    m_energy_conservation_program_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_conservation_program_Set() const{
    return m_energy_conservation_program_isSet;
}

bool OAIEnergyEfficiency::is_energy_conservation_program_Valid() const{
    return m_energy_conservation_program_isValid;
}

QString OAIEnergyEfficiency::getEnergyConservationProgramException() const {
    return m_energy_conservation_program_exception;
}
void OAIEnergyEfficiency::setEnergyConservationProgramException(const QString &energy_conservation_program_exception) {
    m_energy_conservation_program_exception = energy_conservation_program_exception;
    m_energy_conservation_program_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_conservation_program_exception_Set() const{
    return m_energy_conservation_program_exception_isSet;
}

bool OAIEnergyEfficiency::is_energy_conservation_program_exception_Valid() const{
    return m_energy_conservation_program_exception_isValid;
}

bool OAIEnergyEfficiency::isEnergyEfficientHeatingAndCoolingSystems() const {
    return m_energy_efficient_heating_and_cooling_systems;
}
void OAIEnergyEfficiency::setEnergyEfficientHeatingAndCoolingSystems(const bool &energy_efficient_heating_and_cooling_systems) {
    m_energy_efficient_heating_and_cooling_systems = energy_efficient_heating_and_cooling_systems;
    m_energy_efficient_heating_and_cooling_systems_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_efficient_heating_and_cooling_systems_Set() const{
    return m_energy_efficient_heating_and_cooling_systems_isSet;
}

bool OAIEnergyEfficiency::is_energy_efficient_heating_and_cooling_systems_Valid() const{
    return m_energy_efficient_heating_and_cooling_systems_isValid;
}

QString OAIEnergyEfficiency::getEnergyEfficientHeatingAndCoolingSystemsException() const {
    return m_energy_efficient_heating_and_cooling_systems_exception;
}
void OAIEnergyEfficiency::setEnergyEfficientHeatingAndCoolingSystemsException(const QString &energy_efficient_heating_and_cooling_systems_exception) {
    m_energy_efficient_heating_and_cooling_systems_exception = energy_efficient_heating_and_cooling_systems_exception;
    m_energy_efficient_heating_and_cooling_systems_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_efficient_heating_and_cooling_systems_exception_Set() const{
    return m_energy_efficient_heating_and_cooling_systems_exception_isSet;
}

bool OAIEnergyEfficiency::is_energy_efficient_heating_and_cooling_systems_exception_Valid() const{
    return m_energy_efficient_heating_and_cooling_systems_exception_isValid;
}

bool OAIEnergyEfficiency::isEnergyEfficientLighting() const {
    return m_energy_efficient_lighting;
}
void OAIEnergyEfficiency::setEnergyEfficientLighting(const bool &energy_efficient_lighting) {
    m_energy_efficient_lighting = energy_efficient_lighting;
    m_energy_efficient_lighting_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_efficient_lighting_Set() const{
    return m_energy_efficient_lighting_isSet;
}

bool OAIEnergyEfficiency::is_energy_efficient_lighting_Valid() const{
    return m_energy_efficient_lighting_isValid;
}

QString OAIEnergyEfficiency::getEnergyEfficientLightingException() const {
    return m_energy_efficient_lighting_exception;
}
void OAIEnergyEfficiency::setEnergyEfficientLightingException(const QString &energy_efficient_lighting_exception) {
    m_energy_efficient_lighting_exception = energy_efficient_lighting_exception;
    m_energy_efficient_lighting_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_efficient_lighting_exception_Set() const{
    return m_energy_efficient_lighting_exception_isSet;
}

bool OAIEnergyEfficiency::is_energy_efficient_lighting_exception_Valid() const{
    return m_energy_efficient_lighting_exception_isValid;
}

bool OAIEnergyEfficiency::isEnergySavingThermostats() const {
    return m_energy_saving_thermostats;
}
void OAIEnergyEfficiency::setEnergySavingThermostats(const bool &energy_saving_thermostats) {
    m_energy_saving_thermostats = energy_saving_thermostats;
    m_energy_saving_thermostats_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_saving_thermostats_Set() const{
    return m_energy_saving_thermostats_isSet;
}

bool OAIEnergyEfficiency::is_energy_saving_thermostats_Valid() const{
    return m_energy_saving_thermostats_isValid;
}

QString OAIEnergyEfficiency::getEnergySavingThermostatsException() const {
    return m_energy_saving_thermostats_exception;
}
void OAIEnergyEfficiency::setEnergySavingThermostatsException(const QString &energy_saving_thermostats_exception) {
    m_energy_saving_thermostats_exception = energy_saving_thermostats_exception;
    m_energy_saving_thermostats_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_energy_saving_thermostats_exception_Set() const{
    return m_energy_saving_thermostats_exception_isSet;
}

bool OAIEnergyEfficiency::is_energy_saving_thermostats_exception_Valid() const{
    return m_energy_saving_thermostats_exception_isValid;
}

bool OAIEnergyEfficiency::isGreenBuildingDesign() const {
    return m_green_building_design;
}
void OAIEnergyEfficiency::setGreenBuildingDesign(const bool &green_building_design) {
    m_green_building_design = green_building_design;
    m_green_building_design_isSet = true;
}

bool OAIEnergyEfficiency::is_green_building_design_Set() const{
    return m_green_building_design_isSet;
}

bool OAIEnergyEfficiency::is_green_building_design_Valid() const{
    return m_green_building_design_isValid;
}

QString OAIEnergyEfficiency::getGreenBuildingDesignException() const {
    return m_green_building_design_exception;
}
void OAIEnergyEfficiency::setGreenBuildingDesignException(const QString &green_building_design_exception) {
    m_green_building_design_exception = green_building_design_exception;
    m_green_building_design_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_green_building_design_exception_Set() const{
    return m_green_building_design_exception_isSet;
}

bool OAIEnergyEfficiency::is_green_building_design_exception_Valid() const{
    return m_green_building_design_exception_isValid;
}

bool OAIEnergyEfficiency::isIndependentOrganizationAuditsEnergyUse() const {
    return m_independent_organization_audits_energy_use;
}
void OAIEnergyEfficiency::setIndependentOrganizationAuditsEnergyUse(const bool &independent_organization_audits_energy_use) {
    m_independent_organization_audits_energy_use = independent_organization_audits_energy_use;
    m_independent_organization_audits_energy_use_isSet = true;
}

bool OAIEnergyEfficiency::is_independent_organization_audits_energy_use_Set() const{
    return m_independent_organization_audits_energy_use_isSet;
}

bool OAIEnergyEfficiency::is_independent_organization_audits_energy_use_Valid() const{
    return m_independent_organization_audits_energy_use_isValid;
}

QString OAIEnergyEfficiency::getIndependentOrganizationAuditsEnergyUseException() const {
    return m_independent_organization_audits_energy_use_exception;
}
void OAIEnergyEfficiency::setIndependentOrganizationAuditsEnergyUseException(const QString &independent_organization_audits_energy_use_exception) {
    m_independent_organization_audits_energy_use_exception = independent_organization_audits_energy_use_exception;
    m_independent_organization_audits_energy_use_exception_isSet = true;
}

bool OAIEnergyEfficiency::is_independent_organization_audits_energy_use_exception_Set() const{
    return m_independent_organization_audits_energy_use_exception_isSet;
}

bool OAIEnergyEfficiency::is_independent_organization_audits_energy_use_exception_Valid() const{
    return m_independent_organization_audits_energy_use_exception_isValid;
}

bool OAIEnergyEfficiency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carbon_free_energy_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carbon_free_energy_sources_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_conservation_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_conservation_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficient_heating_and_cooling_systems_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficient_heating_and_cooling_systems_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficient_lighting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_efficient_lighting_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_saving_thermostats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_saving_thermostats_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_building_design_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_building_design_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_organization_audits_energy_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_organization_audits_energy_use_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnergyEfficiency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
