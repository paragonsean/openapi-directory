/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusiness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusiness::OAIBusiness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusiness::OAIBusiness() {
    this->initializeModel();
}

OAIBusiness::~OAIBusiness() {}

void OAIBusiness::initializeModel() {

    m_business_center_isSet = false;
    m_business_center_isValid = false;

    m_business_center_exception_isSet = false;
    m_business_center_exception_isValid = false;

    m_meeting_rooms_isSet = false;
    m_meeting_rooms_isValid = false;

    m_meeting_rooms_count_isSet = false;
    m_meeting_rooms_count_isValid = false;

    m_meeting_rooms_count_exception_isSet = false;
    m_meeting_rooms_count_exception_isValid = false;

    m_meeting_rooms_exception_isSet = false;
    m_meeting_rooms_exception_isValid = false;
}

void OAIBusiness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusiness::fromJsonObject(QJsonObject json) {

    m_business_center_isValid = ::OpenAPI::fromJsonValue(m_business_center, json[QString("businessCenter")]);
    m_business_center_isSet = !json[QString("businessCenter")].isNull() && m_business_center_isValid;

    m_business_center_exception_isValid = ::OpenAPI::fromJsonValue(m_business_center_exception, json[QString("businessCenterException")]);
    m_business_center_exception_isSet = !json[QString("businessCenterException")].isNull() && m_business_center_exception_isValid;

    m_meeting_rooms_isValid = ::OpenAPI::fromJsonValue(m_meeting_rooms, json[QString("meetingRooms")]);
    m_meeting_rooms_isSet = !json[QString("meetingRooms")].isNull() && m_meeting_rooms_isValid;

    m_meeting_rooms_count_isValid = ::OpenAPI::fromJsonValue(m_meeting_rooms_count, json[QString("meetingRoomsCount")]);
    m_meeting_rooms_count_isSet = !json[QString("meetingRoomsCount")].isNull() && m_meeting_rooms_count_isValid;

    m_meeting_rooms_count_exception_isValid = ::OpenAPI::fromJsonValue(m_meeting_rooms_count_exception, json[QString("meetingRoomsCountException")]);
    m_meeting_rooms_count_exception_isSet = !json[QString("meetingRoomsCountException")].isNull() && m_meeting_rooms_count_exception_isValid;

    m_meeting_rooms_exception_isValid = ::OpenAPI::fromJsonValue(m_meeting_rooms_exception, json[QString("meetingRoomsException")]);
    m_meeting_rooms_exception_isSet = !json[QString("meetingRoomsException")].isNull() && m_meeting_rooms_exception_isValid;
}

QString OAIBusiness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusiness::asJsonObject() const {
    QJsonObject obj;
    if (m_business_center_isSet) {
        obj.insert(QString("businessCenter"), ::OpenAPI::toJsonValue(m_business_center));
    }
    if (m_business_center_exception_isSet) {
        obj.insert(QString("businessCenterException"), ::OpenAPI::toJsonValue(m_business_center_exception));
    }
    if (m_meeting_rooms_isSet) {
        obj.insert(QString("meetingRooms"), ::OpenAPI::toJsonValue(m_meeting_rooms));
    }
    if (m_meeting_rooms_count_isSet) {
        obj.insert(QString("meetingRoomsCount"), ::OpenAPI::toJsonValue(m_meeting_rooms_count));
    }
    if (m_meeting_rooms_count_exception_isSet) {
        obj.insert(QString("meetingRoomsCountException"), ::OpenAPI::toJsonValue(m_meeting_rooms_count_exception));
    }
    if (m_meeting_rooms_exception_isSet) {
        obj.insert(QString("meetingRoomsException"), ::OpenAPI::toJsonValue(m_meeting_rooms_exception));
    }
    return obj;
}

bool OAIBusiness::isBusinessCenter() const {
    return m_business_center;
}
void OAIBusiness::setBusinessCenter(const bool &business_center) {
    m_business_center = business_center;
    m_business_center_isSet = true;
}

bool OAIBusiness::is_business_center_Set() const{
    return m_business_center_isSet;
}

bool OAIBusiness::is_business_center_Valid() const{
    return m_business_center_isValid;
}

QString OAIBusiness::getBusinessCenterException() const {
    return m_business_center_exception;
}
void OAIBusiness::setBusinessCenterException(const QString &business_center_exception) {
    m_business_center_exception = business_center_exception;
    m_business_center_exception_isSet = true;
}

bool OAIBusiness::is_business_center_exception_Set() const{
    return m_business_center_exception_isSet;
}

bool OAIBusiness::is_business_center_exception_Valid() const{
    return m_business_center_exception_isValid;
}

bool OAIBusiness::isMeetingRooms() const {
    return m_meeting_rooms;
}
void OAIBusiness::setMeetingRooms(const bool &meeting_rooms) {
    m_meeting_rooms = meeting_rooms;
    m_meeting_rooms_isSet = true;
}

bool OAIBusiness::is_meeting_rooms_Set() const{
    return m_meeting_rooms_isSet;
}

bool OAIBusiness::is_meeting_rooms_Valid() const{
    return m_meeting_rooms_isValid;
}

qint32 OAIBusiness::getMeetingRoomsCount() const {
    return m_meeting_rooms_count;
}
void OAIBusiness::setMeetingRoomsCount(const qint32 &meeting_rooms_count) {
    m_meeting_rooms_count = meeting_rooms_count;
    m_meeting_rooms_count_isSet = true;
}

bool OAIBusiness::is_meeting_rooms_count_Set() const{
    return m_meeting_rooms_count_isSet;
}

bool OAIBusiness::is_meeting_rooms_count_Valid() const{
    return m_meeting_rooms_count_isValid;
}

QString OAIBusiness::getMeetingRoomsCountException() const {
    return m_meeting_rooms_count_exception;
}
void OAIBusiness::setMeetingRoomsCountException(const QString &meeting_rooms_count_exception) {
    m_meeting_rooms_count_exception = meeting_rooms_count_exception;
    m_meeting_rooms_count_exception_isSet = true;
}

bool OAIBusiness::is_meeting_rooms_count_exception_Set() const{
    return m_meeting_rooms_count_exception_isSet;
}

bool OAIBusiness::is_meeting_rooms_count_exception_Valid() const{
    return m_meeting_rooms_count_exception_isValid;
}

QString OAIBusiness::getMeetingRoomsException() const {
    return m_meeting_rooms_exception;
}
void OAIBusiness::setMeetingRoomsException(const QString &meeting_rooms_exception) {
    m_meeting_rooms_exception = meeting_rooms_exception;
    m_meeting_rooms_exception_isSet = true;
}

bool OAIBusiness::is_meeting_rooms_exception_Set() const{
    return m_meeting_rooms_exception_isSet;
}

bool OAIBusiness::is_meeting_rooms_exception_Valid() const{
    return m_meeting_rooms_exception_isValid;
}

bool OAIBusiness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_center_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_rooms_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_rooms_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_rooms_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusiness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
