/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterConservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterConservation::OAIWaterConservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterConservation::OAIWaterConservation() {
    this->initializeModel();
}

OAIWaterConservation::~OAIWaterConservation() {}

void OAIWaterConservation::initializeModel() {

    m_independent_organization_audits_water_use_isSet = false;
    m_independent_organization_audits_water_use_isValid = false;

    m_independent_organization_audits_water_use_exception_isSet = false;
    m_independent_organization_audits_water_use_exception_isValid = false;

    m_linen_reuse_program_isSet = false;
    m_linen_reuse_program_isValid = false;

    m_linen_reuse_program_exception_isSet = false;
    m_linen_reuse_program_exception_isValid = false;

    m_towel_reuse_program_isSet = false;
    m_towel_reuse_program_isValid = false;

    m_towel_reuse_program_exception_isSet = false;
    m_towel_reuse_program_exception_isValid = false;

    m_water_saving_showers_isSet = false;
    m_water_saving_showers_isValid = false;

    m_water_saving_showers_exception_isSet = false;
    m_water_saving_showers_exception_isValid = false;

    m_water_saving_sinks_isSet = false;
    m_water_saving_sinks_isValid = false;

    m_water_saving_sinks_exception_isSet = false;
    m_water_saving_sinks_exception_isValid = false;

    m_water_saving_toilets_isSet = false;
    m_water_saving_toilets_isValid = false;

    m_water_saving_toilets_exception_isSet = false;
    m_water_saving_toilets_exception_isValid = false;
}

void OAIWaterConservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterConservation::fromJsonObject(QJsonObject json) {

    m_independent_organization_audits_water_use_isValid = ::OpenAPI::fromJsonValue(m_independent_organization_audits_water_use, json[QString("independentOrganizationAuditsWaterUse")]);
    m_independent_organization_audits_water_use_isSet = !json[QString("independentOrganizationAuditsWaterUse")].isNull() && m_independent_organization_audits_water_use_isValid;

    m_independent_organization_audits_water_use_exception_isValid = ::OpenAPI::fromJsonValue(m_independent_organization_audits_water_use_exception, json[QString("independentOrganizationAuditsWaterUseException")]);
    m_independent_organization_audits_water_use_exception_isSet = !json[QString("independentOrganizationAuditsWaterUseException")].isNull() && m_independent_organization_audits_water_use_exception_isValid;

    m_linen_reuse_program_isValid = ::OpenAPI::fromJsonValue(m_linen_reuse_program, json[QString("linenReuseProgram")]);
    m_linen_reuse_program_isSet = !json[QString("linenReuseProgram")].isNull() && m_linen_reuse_program_isValid;

    m_linen_reuse_program_exception_isValid = ::OpenAPI::fromJsonValue(m_linen_reuse_program_exception, json[QString("linenReuseProgramException")]);
    m_linen_reuse_program_exception_isSet = !json[QString("linenReuseProgramException")].isNull() && m_linen_reuse_program_exception_isValid;

    m_towel_reuse_program_isValid = ::OpenAPI::fromJsonValue(m_towel_reuse_program, json[QString("towelReuseProgram")]);
    m_towel_reuse_program_isSet = !json[QString("towelReuseProgram")].isNull() && m_towel_reuse_program_isValid;

    m_towel_reuse_program_exception_isValid = ::OpenAPI::fromJsonValue(m_towel_reuse_program_exception, json[QString("towelReuseProgramException")]);
    m_towel_reuse_program_exception_isSet = !json[QString("towelReuseProgramException")].isNull() && m_towel_reuse_program_exception_isValid;

    m_water_saving_showers_isValid = ::OpenAPI::fromJsonValue(m_water_saving_showers, json[QString("waterSavingShowers")]);
    m_water_saving_showers_isSet = !json[QString("waterSavingShowers")].isNull() && m_water_saving_showers_isValid;

    m_water_saving_showers_exception_isValid = ::OpenAPI::fromJsonValue(m_water_saving_showers_exception, json[QString("waterSavingShowersException")]);
    m_water_saving_showers_exception_isSet = !json[QString("waterSavingShowersException")].isNull() && m_water_saving_showers_exception_isValid;

    m_water_saving_sinks_isValid = ::OpenAPI::fromJsonValue(m_water_saving_sinks, json[QString("waterSavingSinks")]);
    m_water_saving_sinks_isSet = !json[QString("waterSavingSinks")].isNull() && m_water_saving_sinks_isValid;

    m_water_saving_sinks_exception_isValid = ::OpenAPI::fromJsonValue(m_water_saving_sinks_exception, json[QString("waterSavingSinksException")]);
    m_water_saving_sinks_exception_isSet = !json[QString("waterSavingSinksException")].isNull() && m_water_saving_sinks_exception_isValid;

    m_water_saving_toilets_isValid = ::OpenAPI::fromJsonValue(m_water_saving_toilets, json[QString("waterSavingToilets")]);
    m_water_saving_toilets_isSet = !json[QString("waterSavingToilets")].isNull() && m_water_saving_toilets_isValid;

    m_water_saving_toilets_exception_isValid = ::OpenAPI::fromJsonValue(m_water_saving_toilets_exception, json[QString("waterSavingToiletsException")]);
    m_water_saving_toilets_exception_isSet = !json[QString("waterSavingToiletsException")].isNull() && m_water_saving_toilets_exception_isValid;
}

QString OAIWaterConservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterConservation::asJsonObject() const {
    QJsonObject obj;
    if (m_independent_organization_audits_water_use_isSet) {
        obj.insert(QString("independentOrganizationAuditsWaterUse"), ::OpenAPI::toJsonValue(m_independent_organization_audits_water_use));
    }
    if (m_independent_organization_audits_water_use_exception_isSet) {
        obj.insert(QString("independentOrganizationAuditsWaterUseException"), ::OpenAPI::toJsonValue(m_independent_organization_audits_water_use_exception));
    }
    if (m_linen_reuse_program_isSet) {
        obj.insert(QString("linenReuseProgram"), ::OpenAPI::toJsonValue(m_linen_reuse_program));
    }
    if (m_linen_reuse_program_exception_isSet) {
        obj.insert(QString("linenReuseProgramException"), ::OpenAPI::toJsonValue(m_linen_reuse_program_exception));
    }
    if (m_towel_reuse_program_isSet) {
        obj.insert(QString("towelReuseProgram"), ::OpenAPI::toJsonValue(m_towel_reuse_program));
    }
    if (m_towel_reuse_program_exception_isSet) {
        obj.insert(QString("towelReuseProgramException"), ::OpenAPI::toJsonValue(m_towel_reuse_program_exception));
    }
    if (m_water_saving_showers_isSet) {
        obj.insert(QString("waterSavingShowers"), ::OpenAPI::toJsonValue(m_water_saving_showers));
    }
    if (m_water_saving_showers_exception_isSet) {
        obj.insert(QString("waterSavingShowersException"), ::OpenAPI::toJsonValue(m_water_saving_showers_exception));
    }
    if (m_water_saving_sinks_isSet) {
        obj.insert(QString("waterSavingSinks"), ::OpenAPI::toJsonValue(m_water_saving_sinks));
    }
    if (m_water_saving_sinks_exception_isSet) {
        obj.insert(QString("waterSavingSinksException"), ::OpenAPI::toJsonValue(m_water_saving_sinks_exception));
    }
    if (m_water_saving_toilets_isSet) {
        obj.insert(QString("waterSavingToilets"), ::OpenAPI::toJsonValue(m_water_saving_toilets));
    }
    if (m_water_saving_toilets_exception_isSet) {
        obj.insert(QString("waterSavingToiletsException"), ::OpenAPI::toJsonValue(m_water_saving_toilets_exception));
    }
    return obj;
}

bool OAIWaterConservation::isIndependentOrganizationAuditsWaterUse() const {
    return m_independent_organization_audits_water_use;
}
void OAIWaterConservation::setIndependentOrganizationAuditsWaterUse(const bool &independent_organization_audits_water_use) {
    m_independent_organization_audits_water_use = independent_organization_audits_water_use;
    m_independent_organization_audits_water_use_isSet = true;
}

bool OAIWaterConservation::is_independent_organization_audits_water_use_Set() const{
    return m_independent_organization_audits_water_use_isSet;
}

bool OAIWaterConservation::is_independent_organization_audits_water_use_Valid() const{
    return m_independent_organization_audits_water_use_isValid;
}

QString OAIWaterConservation::getIndependentOrganizationAuditsWaterUseException() const {
    return m_independent_organization_audits_water_use_exception;
}
void OAIWaterConservation::setIndependentOrganizationAuditsWaterUseException(const QString &independent_organization_audits_water_use_exception) {
    m_independent_organization_audits_water_use_exception = independent_organization_audits_water_use_exception;
    m_independent_organization_audits_water_use_exception_isSet = true;
}

bool OAIWaterConservation::is_independent_organization_audits_water_use_exception_Set() const{
    return m_independent_organization_audits_water_use_exception_isSet;
}

bool OAIWaterConservation::is_independent_organization_audits_water_use_exception_Valid() const{
    return m_independent_organization_audits_water_use_exception_isValid;
}

bool OAIWaterConservation::isLinenReuseProgram() const {
    return m_linen_reuse_program;
}
void OAIWaterConservation::setLinenReuseProgram(const bool &linen_reuse_program) {
    m_linen_reuse_program = linen_reuse_program;
    m_linen_reuse_program_isSet = true;
}

bool OAIWaterConservation::is_linen_reuse_program_Set() const{
    return m_linen_reuse_program_isSet;
}

bool OAIWaterConservation::is_linen_reuse_program_Valid() const{
    return m_linen_reuse_program_isValid;
}

QString OAIWaterConservation::getLinenReuseProgramException() const {
    return m_linen_reuse_program_exception;
}
void OAIWaterConservation::setLinenReuseProgramException(const QString &linen_reuse_program_exception) {
    m_linen_reuse_program_exception = linen_reuse_program_exception;
    m_linen_reuse_program_exception_isSet = true;
}

bool OAIWaterConservation::is_linen_reuse_program_exception_Set() const{
    return m_linen_reuse_program_exception_isSet;
}

bool OAIWaterConservation::is_linen_reuse_program_exception_Valid() const{
    return m_linen_reuse_program_exception_isValid;
}

bool OAIWaterConservation::isTowelReuseProgram() const {
    return m_towel_reuse_program;
}
void OAIWaterConservation::setTowelReuseProgram(const bool &towel_reuse_program) {
    m_towel_reuse_program = towel_reuse_program;
    m_towel_reuse_program_isSet = true;
}

bool OAIWaterConservation::is_towel_reuse_program_Set() const{
    return m_towel_reuse_program_isSet;
}

bool OAIWaterConservation::is_towel_reuse_program_Valid() const{
    return m_towel_reuse_program_isValid;
}

QString OAIWaterConservation::getTowelReuseProgramException() const {
    return m_towel_reuse_program_exception;
}
void OAIWaterConservation::setTowelReuseProgramException(const QString &towel_reuse_program_exception) {
    m_towel_reuse_program_exception = towel_reuse_program_exception;
    m_towel_reuse_program_exception_isSet = true;
}

bool OAIWaterConservation::is_towel_reuse_program_exception_Set() const{
    return m_towel_reuse_program_exception_isSet;
}

bool OAIWaterConservation::is_towel_reuse_program_exception_Valid() const{
    return m_towel_reuse_program_exception_isValid;
}

bool OAIWaterConservation::isWaterSavingShowers() const {
    return m_water_saving_showers;
}
void OAIWaterConservation::setWaterSavingShowers(const bool &water_saving_showers) {
    m_water_saving_showers = water_saving_showers;
    m_water_saving_showers_isSet = true;
}

bool OAIWaterConservation::is_water_saving_showers_Set() const{
    return m_water_saving_showers_isSet;
}

bool OAIWaterConservation::is_water_saving_showers_Valid() const{
    return m_water_saving_showers_isValid;
}

QString OAIWaterConservation::getWaterSavingShowersException() const {
    return m_water_saving_showers_exception;
}
void OAIWaterConservation::setWaterSavingShowersException(const QString &water_saving_showers_exception) {
    m_water_saving_showers_exception = water_saving_showers_exception;
    m_water_saving_showers_exception_isSet = true;
}

bool OAIWaterConservation::is_water_saving_showers_exception_Set() const{
    return m_water_saving_showers_exception_isSet;
}

bool OAIWaterConservation::is_water_saving_showers_exception_Valid() const{
    return m_water_saving_showers_exception_isValid;
}

bool OAIWaterConservation::isWaterSavingSinks() const {
    return m_water_saving_sinks;
}
void OAIWaterConservation::setWaterSavingSinks(const bool &water_saving_sinks) {
    m_water_saving_sinks = water_saving_sinks;
    m_water_saving_sinks_isSet = true;
}

bool OAIWaterConservation::is_water_saving_sinks_Set() const{
    return m_water_saving_sinks_isSet;
}

bool OAIWaterConservation::is_water_saving_sinks_Valid() const{
    return m_water_saving_sinks_isValid;
}

QString OAIWaterConservation::getWaterSavingSinksException() const {
    return m_water_saving_sinks_exception;
}
void OAIWaterConservation::setWaterSavingSinksException(const QString &water_saving_sinks_exception) {
    m_water_saving_sinks_exception = water_saving_sinks_exception;
    m_water_saving_sinks_exception_isSet = true;
}

bool OAIWaterConservation::is_water_saving_sinks_exception_Set() const{
    return m_water_saving_sinks_exception_isSet;
}

bool OAIWaterConservation::is_water_saving_sinks_exception_Valid() const{
    return m_water_saving_sinks_exception_isValid;
}

bool OAIWaterConservation::isWaterSavingToilets() const {
    return m_water_saving_toilets;
}
void OAIWaterConservation::setWaterSavingToilets(const bool &water_saving_toilets) {
    m_water_saving_toilets = water_saving_toilets;
    m_water_saving_toilets_isSet = true;
}

bool OAIWaterConservation::is_water_saving_toilets_Set() const{
    return m_water_saving_toilets_isSet;
}

bool OAIWaterConservation::is_water_saving_toilets_Valid() const{
    return m_water_saving_toilets_isValid;
}

QString OAIWaterConservation::getWaterSavingToiletsException() const {
    return m_water_saving_toilets_exception;
}
void OAIWaterConservation::setWaterSavingToiletsException(const QString &water_saving_toilets_exception) {
    m_water_saving_toilets_exception = water_saving_toilets_exception;
    m_water_saving_toilets_exception_isSet = true;
}

bool OAIWaterConservation::is_water_saving_toilets_exception_Set() const{
    return m_water_saving_toilets_exception_isSet;
}

bool OAIWaterConservation::is_water_saving_toilets_exception_Valid() const{
    return m_water_saving_toilets_exception_isValid;
}

bool OAIWaterConservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_independent_organization_audits_water_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_organization_audits_water_use_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linen_reuse_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linen_reuse_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_towel_reuse_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_towel_reuse_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_showers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_showers_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_sinks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_sinks_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_toilets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_saving_toilets_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterConservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
