/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty::OAIProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty::OAIProperty() {
    this->initializeModel();
}

OAIProperty::~OAIProperty() {}

void OAIProperty::initializeModel() {

    m_built_year_isSet = false;
    m_built_year_isValid = false;

    m_built_year_exception_isSet = false;
    m_built_year_exception_isValid = false;

    m_floors_count_isSet = false;
    m_floors_count_isValid = false;

    m_floors_count_exception_isSet = false;
    m_floors_count_exception_isValid = false;

    m_last_renovated_year_isSet = false;
    m_last_renovated_year_isValid = false;

    m_last_renovated_year_exception_isSet = false;
    m_last_renovated_year_exception_isValid = false;

    m_rooms_count_isSet = false;
    m_rooms_count_isValid = false;

    m_rooms_count_exception_isSet = false;
    m_rooms_count_exception_isValid = false;
}

void OAIProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty::fromJsonObject(QJsonObject json) {

    m_built_year_isValid = ::OpenAPI::fromJsonValue(m_built_year, json[QString("builtYear")]);
    m_built_year_isSet = !json[QString("builtYear")].isNull() && m_built_year_isValid;

    m_built_year_exception_isValid = ::OpenAPI::fromJsonValue(m_built_year_exception, json[QString("builtYearException")]);
    m_built_year_exception_isSet = !json[QString("builtYearException")].isNull() && m_built_year_exception_isValid;

    m_floors_count_isValid = ::OpenAPI::fromJsonValue(m_floors_count, json[QString("floorsCount")]);
    m_floors_count_isSet = !json[QString("floorsCount")].isNull() && m_floors_count_isValid;

    m_floors_count_exception_isValid = ::OpenAPI::fromJsonValue(m_floors_count_exception, json[QString("floorsCountException")]);
    m_floors_count_exception_isSet = !json[QString("floorsCountException")].isNull() && m_floors_count_exception_isValid;

    m_last_renovated_year_isValid = ::OpenAPI::fromJsonValue(m_last_renovated_year, json[QString("lastRenovatedYear")]);
    m_last_renovated_year_isSet = !json[QString("lastRenovatedYear")].isNull() && m_last_renovated_year_isValid;

    m_last_renovated_year_exception_isValid = ::OpenAPI::fromJsonValue(m_last_renovated_year_exception, json[QString("lastRenovatedYearException")]);
    m_last_renovated_year_exception_isSet = !json[QString("lastRenovatedYearException")].isNull() && m_last_renovated_year_exception_isValid;

    m_rooms_count_isValid = ::OpenAPI::fromJsonValue(m_rooms_count, json[QString("roomsCount")]);
    m_rooms_count_isSet = !json[QString("roomsCount")].isNull() && m_rooms_count_isValid;

    m_rooms_count_exception_isValid = ::OpenAPI::fromJsonValue(m_rooms_count_exception, json[QString("roomsCountException")]);
    m_rooms_count_exception_isSet = !json[QString("roomsCountException")].isNull() && m_rooms_count_exception_isValid;
}

QString OAIProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_built_year_isSet) {
        obj.insert(QString("builtYear"), ::OpenAPI::toJsonValue(m_built_year));
    }
    if (m_built_year_exception_isSet) {
        obj.insert(QString("builtYearException"), ::OpenAPI::toJsonValue(m_built_year_exception));
    }
    if (m_floors_count_isSet) {
        obj.insert(QString("floorsCount"), ::OpenAPI::toJsonValue(m_floors_count));
    }
    if (m_floors_count_exception_isSet) {
        obj.insert(QString("floorsCountException"), ::OpenAPI::toJsonValue(m_floors_count_exception));
    }
    if (m_last_renovated_year_isSet) {
        obj.insert(QString("lastRenovatedYear"), ::OpenAPI::toJsonValue(m_last_renovated_year));
    }
    if (m_last_renovated_year_exception_isSet) {
        obj.insert(QString("lastRenovatedYearException"), ::OpenAPI::toJsonValue(m_last_renovated_year_exception));
    }
    if (m_rooms_count_isSet) {
        obj.insert(QString("roomsCount"), ::OpenAPI::toJsonValue(m_rooms_count));
    }
    if (m_rooms_count_exception_isSet) {
        obj.insert(QString("roomsCountException"), ::OpenAPI::toJsonValue(m_rooms_count_exception));
    }
    return obj;
}

qint32 OAIProperty::getBuiltYear() const {
    return m_built_year;
}
void OAIProperty::setBuiltYear(const qint32 &built_year) {
    m_built_year = built_year;
    m_built_year_isSet = true;
}

bool OAIProperty::is_built_year_Set() const{
    return m_built_year_isSet;
}

bool OAIProperty::is_built_year_Valid() const{
    return m_built_year_isValid;
}

QString OAIProperty::getBuiltYearException() const {
    return m_built_year_exception;
}
void OAIProperty::setBuiltYearException(const QString &built_year_exception) {
    m_built_year_exception = built_year_exception;
    m_built_year_exception_isSet = true;
}

bool OAIProperty::is_built_year_exception_Set() const{
    return m_built_year_exception_isSet;
}

bool OAIProperty::is_built_year_exception_Valid() const{
    return m_built_year_exception_isValid;
}

qint32 OAIProperty::getFloorsCount() const {
    return m_floors_count;
}
void OAIProperty::setFloorsCount(const qint32 &floors_count) {
    m_floors_count = floors_count;
    m_floors_count_isSet = true;
}

bool OAIProperty::is_floors_count_Set() const{
    return m_floors_count_isSet;
}

bool OAIProperty::is_floors_count_Valid() const{
    return m_floors_count_isValid;
}

QString OAIProperty::getFloorsCountException() const {
    return m_floors_count_exception;
}
void OAIProperty::setFloorsCountException(const QString &floors_count_exception) {
    m_floors_count_exception = floors_count_exception;
    m_floors_count_exception_isSet = true;
}

bool OAIProperty::is_floors_count_exception_Set() const{
    return m_floors_count_exception_isSet;
}

bool OAIProperty::is_floors_count_exception_Valid() const{
    return m_floors_count_exception_isValid;
}

qint32 OAIProperty::getLastRenovatedYear() const {
    return m_last_renovated_year;
}
void OAIProperty::setLastRenovatedYear(const qint32 &last_renovated_year) {
    m_last_renovated_year = last_renovated_year;
    m_last_renovated_year_isSet = true;
}

bool OAIProperty::is_last_renovated_year_Set() const{
    return m_last_renovated_year_isSet;
}

bool OAIProperty::is_last_renovated_year_Valid() const{
    return m_last_renovated_year_isValid;
}

QString OAIProperty::getLastRenovatedYearException() const {
    return m_last_renovated_year_exception;
}
void OAIProperty::setLastRenovatedYearException(const QString &last_renovated_year_exception) {
    m_last_renovated_year_exception = last_renovated_year_exception;
    m_last_renovated_year_exception_isSet = true;
}

bool OAIProperty::is_last_renovated_year_exception_Set() const{
    return m_last_renovated_year_exception_isSet;
}

bool OAIProperty::is_last_renovated_year_exception_Valid() const{
    return m_last_renovated_year_exception_isValid;
}

qint32 OAIProperty::getRoomsCount() const {
    return m_rooms_count;
}
void OAIProperty::setRoomsCount(const qint32 &rooms_count) {
    m_rooms_count = rooms_count;
    m_rooms_count_isSet = true;
}

bool OAIProperty::is_rooms_count_Set() const{
    return m_rooms_count_isSet;
}

bool OAIProperty::is_rooms_count_Valid() const{
    return m_rooms_count_isValid;
}

QString OAIProperty::getRoomsCountException() const {
    return m_rooms_count_exception;
}
void OAIProperty::setRoomsCountException(const QString &rooms_count_exception) {
    m_rooms_count_exception = rooms_count_exception;
    m_rooms_count_exception_isSet = true;
}

bool OAIProperty::is_rooms_count_exception_Set() const{
    return m_rooms_count_exception_isSet;
}

bool OAIProperty::is_rooms_count_exception_Valid() const{
    return m_rooms_count_exception_isValid;
}

bool OAIProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_built_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_year_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floors_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_renovated_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_renovated_year_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
