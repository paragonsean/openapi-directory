/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIViewsFromUnit.h
 *
 * Views available from the guest unit itself.
 */

#ifndef OAIViewsFromUnit_H
#define OAIViewsFromUnit_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIViewsFromUnit : public OAIObject {
public:
    OAIViewsFromUnit();
    OAIViewsFromUnit(QString json);
    ~OAIViewsFromUnit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBeachView() const;
    void setBeachView(const bool &beach_view);
    bool is_beach_view_Set() const;
    bool is_beach_view_Valid() const;

    QString getBeachViewException() const;
    void setBeachViewException(const QString &beach_view_exception);
    bool is_beach_view_exception_Set() const;
    bool is_beach_view_exception_Valid() const;

    bool isCityView() const;
    void setCityView(const bool &city_view);
    bool is_city_view_Set() const;
    bool is_city_view_Valid() const;

    QString getCityViewException() const;
    void setCityViewException(const QString &city_view_exception);
    bool is_city_view_exception_Set() const;
    bool is_city_view_exception_Valid() const;

    bool isGardenView() const;
    void setGardenView(const bool &garden_view);
    bool is_garden_view_Set() const;
    bool is_garden_view_Valid() const;

    QString getGardenViewException() const;
    void setGardenViewException(const QString &garden_view_exception);
    bool is_garden_view_exception_Set() const;
    bool is_garden_view_exception_Valid() const;

    bool isLakeView() const;
    void setLakeView(const bool &lake_view);
    bool is_lake_view_Set() const;
    bool is_lake_view_Valid() const;

    QString getLakeViewException() const;
    void setLakeViewException(const QString &lake_view_exception);
    bool is_lake_view_exception_Set() const;
    bool is_lake_view_exception_Valid() const;

    bool isLandmarkView() const;
    void setLandmarkView(const bool &landmark_view);
    bool is_landmark_view_Set() const;
    bool is_landmark_view_Valid() const;

    QString getLandmarkViewException() const;
    void setLandmarkViewException(const QString &landmark_view_exception);
    bool is_landmark_view_exception_Set() const;
    bool is_landmark_view_exception_Valid() const;

    bool isOceanView() const;
    void setOceanView(const bool &ocean_view);
    bool is_ocean_view_Set() const;
    bool is_ocean_view_Valid() const;

    QString getOceanViewException() const;
    void setOceanViewException(const QString &ocean_view_exception);
    bool is_ocean_view_exception_Set() const;
    bool is_ocean_view_exception_Valid() const;

    bool isPoolView() const;
    void setPoolView(const bool &pool_view);
    bool is_pool_view_Set() const;
    bool is_pool_view_Valid() const;

    QString getPoolViewException() const;
    void setPoolViewException(const QString &pool_view_exception);
    bool is_pool_view_exception_Set() const;
    bool is_pool_view_exception_Valid() const;

    bool isValleyView() const;
    void setValleyView(const bool &valley_view);
    bool is_valley_view_Set() const;
    bool is_valley_view_Valid() const;

    QString getValleyViewException() const;
    void setValleyViewException(const QString &valley_view_exception);
    bool is_valley_view_exception_Set() const;
    bool is_valley_view_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_beach_view;
    bool m_beach_view_isSet;
    bool m_beach_view_isValid;

    QString m_beach_view_exception;
    bool m_beach_view_exception_isSet;
    bool m_beach_view_exception_isValid;

    bool m_city_view;
    bool m_city_view_isSet;
    bool m_city_view_isValid;

    QString m_city_view_exception;
    bool m_city_view_exception_isSet;
    bool m_city_view_exception_isValid;

    bool m_garden_view;
    bool m_garden_view_isSet;
    bool m_garden_view_isValid;

    QString m_garden_view_exception;
    bool m_garden_view_exception_isSet;
    bool m_garden_view_exception_isValid;

    bool m_lake_view;
    bool m_lake_view_isSet;
    bool m_lake_view_isValid;

    QString m_lake_view_exception;
    bool m_lake_view_exception_isSet;
    bool m_lake_view_exception_isValid;

    bool m_landmark_view;
    bool m_landmark_view_isSet;
    bool m_landmark_view_isValid;

    QString m_landmark_view_exception;
    bool m_landmark_view_exception_isSet;
    bool m_landmark_view_exception_isValid;

    bool m_ocean_view;
    bool m_ocean_view_isSet;
    bool m_ocean_view_isValid;

    QString m_ocean_view_exception;
    bool m_ocean_view_exception_isSet;
    bool m_ocean_view_exception_isValid;

    bool m_pool_view;
    bool m_pool_view_isSet;
    bool m_pool_view_isValid;

    QString m_pool_view_exception;
    bool m_pool_view_exception_isSet;
    bool m_pool_view_exception_isValid;

    bool m_valley_view;
    bool m_valley_view_isSet;
    bool m_valley_view_isValid;

    QString m_valley_view_exception;
    bool m_valley_view_exception_isSet;
    bool m_valley_view_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIViewsFromUnit)

#endif // OAIViewsFromUnit_H
