/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcoCertification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcoCertification::OAIEcoCertification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcoCertification::OAIEcoCertification() {
    this->initializeModel();
}

OAIEcoCertification::~OAIEcoCertification() {}

void OAIEcoCertification::initializeModel() {

    m_awarded_isSet = false;
    m_awarded_isValid = false;

    m_awarded_exception_isSet = false;
    m_awarded_exception_isValid = false;

    m_eco_certificate_isSet = false;
    m_eco_certificate_isValid = false;
}

void OAIEcoCertification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcoCertification::fromJsonObject(QJsonObject json) {

    m_awarded_isValid = ::OpenAPI::fromJsonValue(m_awarded, json[QString("awarded")]);
    m_awarded_isSet = !json[QString("awarded")].isNull() && m_awarded_isValid;

    m_awarded_exception_isValid = ::OpenAPI::fromJsonValue(m_awarded_exception, json[QString("awardedException")]);
    m_awarded_exception_isSet = !json[QString("awardedException")].isNull() && m_awarded_exception_isValid;

    m_eco_certificate_isValid = ::OpenAPI::fromJsonValue(m_eco_certificate, json[QString("ecoCertificate")]);
    m_eco_certificate_isSet = !json[QString("ecoCertificate")].isNull() && m_eco_certificate_isValid;
}

QString OAIEcoCertification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcoCertification::asJsonObject() const {
    QJsonObject obj;
    if (m_awarded_isSet) {
        obj.insert(QString("awarded"), ::OpenAPI::toJsonValue(m_awarded));
    }
    if (m_awarded_exception_isSet) {
        obj.insert(QString("awardedException"), ::OpenAPI::toJsonValue(m_awarded_exception));
    }
    if (m_eco_certificate_isSet) {
        obj.insert(QString("ecoCertificate"), ::OpenAPI::toJsonValue(m_eco_certificate));
    }
    return obj;
}

bool OAIEcoCertification::isAwarded() const {
    return m_awarded;
}
void OAIEcoCertification::setAwarded(const bool &awarded) {
    m_awarded = awarded;
    m_awarded_isSet = true;
}

bool OAIEcoCertification::is_awarded_Set() const{
    return m_awarded_isSet;
}

bool OAIEcoCertification::is_awarded_Valid() const{
    return m_awarded_isValid;
}

QString OAIEcoCertification::getAwardedException() const {
    return m_awarded_exception;
}
void OAIEcoCertification::setAwardedException(const QString &awarded_exception) {
    m_awarded_exception = awarded_exception;
    m_awarded_exception_isSet = true;
}

bool OAIEcoCertification::is_awarded_exception_Set() const{
    return m_awarded_exception_isSet;
}

bool OAIEcoCertification::is_awarded_exception_Valid() const{
    return m_awarded_exception_isValid;
}

QString OAIEcoCertification::getEcoCertificate() const {
    return m_eco_certificate;
}
void OAIEcoCertification::setEcoCertificate(const QString &eco_certificate) {
    m_eco_certificate = eco_certificate;
    m_eco_certificate_isSet = true;
}

bool OAIEcoCertification::is_eco_certificate_Set() const{
    return m_eco_certificate_isSet;
}

bool OAIEcoCertification::is_eco_certificate_Valid() const{
    return m_eco_certificate_isValid;
}

bool OAIEcoCertification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_awarded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awarded_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcoCertification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
