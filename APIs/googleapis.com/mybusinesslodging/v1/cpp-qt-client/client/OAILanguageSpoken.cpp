/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageSpoken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageSpoken::OAILanguageSpoken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageSpoken::OAILanguageSpoken() {
    this->initializeModel();
}

OAILanguageSpoken::~OAILanguageSpoken() {}

void OAILanguageSpoken::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_spoken_isSet = false;
    m_spoken_isValid = false;

    m_spoken_exception_isSet = false;
    m_spoken_exception_isValid = false;
}

void OAILanguageSpoken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageSpoken::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_spoken_isValid = ::OpenAPI::fromJsonValue(m_spoken, json[QString("spoken")]);
    m_spoken_isSet = !json[QString("spoken")].isNull() && m_spoken_isValid;

    m_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_spoken_exception, json[QString("spokenException")]);
    m_spoken_exception_isSet = !json[QString("spokenException")].isNull() && m_spoken_exception_isValid;
}

QString OAILanguageSpoken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageSpoken::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_spoken_isSet) {
        obj.insert(QString("spoken"), ::OpenAPI::toJsonValue(m_spoken));
    }
    if (m_spoken_exception_isSet) {
        obj.insert(QString("spokenException"), ::OpenAPI::toJsonValue(m_spoken_exception));
    }
    return obj;
}

QString OAILanguageSpoken::getLanguageCode() const {
    return m_language_code;
}
void OAILanguageSpoken::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAILanguageSpoken::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAILanguageSpoken::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAILanguageSpoken::isSpoken() const {
    return m_spoken;
}
void OAILanguageSpoken::setSpoken(const bool &spoken) {
    m_spoken = spoken;
    m_spoken_isSet = true;
}

bool OAILanguageSpoken::is_spoken_Set() const{
    return m_spoken_isSet;
}

bool OAILanguageSpoken::is_spoken_Valid() const{
    return m_spoken_isValid;
}

QString OAILanguageSpoken::getSpokenException() const {
    return m_spoken_exception;
}
void OAILanguageSpoken::setSpokenException(const QString &spoken_exception) {
    m_spoken_exception = spoken_exception;
    m_spoken_exception_isSet = true;
}

bool OAILanguageSpoken::is_spoken_exception_Set() const{
    return m_spoken_exception_isSet;
}

bool OAILanguageSpoken::is_spoken_exception_Valid() const{
    return m_spoken_exception_isValid;
}

bool OAILanguageSpoken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageSpoken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
