/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivingAreaLayout.h
 *
 * Information about the layout of the living area.
 */

#ifndef OAILivingAreaLayout_H
#define OAILivingAreaLayout_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivingAreaLayout : public OAIObject {
public:
    OAILivingAreaLayout();
    OAILivingAreaLayout(QString json);
    ~OAILivingAreaLayout() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBalcony() const;
    void setBalcony(const bool &balcony);
    bool is_balcony_Set() const;
    bool is_balcony_Valid() const;

    QString getBalconyException() const;
    void setBalconyException(const QString &balcony_exception);
    bool is_balcony_exception_Set() const;
    bool is_balcony_exception_Valid() const;

    float getLivingAreaSqMeters() const;
    void setLivingAreaSqMeters(const float &living_area_sq_meters);
    bool is_living_area_sq_meters_Set() const;
    bool is_living_area_sq_meters_Valid() const;

    QString getLivingAreaSqMetersException() const;
    void setLivingAreaSqMetersException(const QString &living_area_sq_meters_exception);
    bool is_living_area_sq_meters_exception_Set() const;
    bool is_living_area_sq_meters_exception_Valid() const;

    bool isLoft() const;
    void setLoft(const bool &loft);
    bool is_loft_Set() const;
    bool is_loft_Valid() const;

    QString getLoftException() const;
    void setLoftException(const QString &loft_exception);
    bool is_loft_exception_Set() const;
    bool is_loft_exception_Valid() const;

    bool isNonSmoking() const;
    void setNonSmoking(const bool &non_smoking);
    bool is_non_smoking_Set() const;
    bool is_non_smoking_Valid() const;

    QString getNonSmokingException() const;
    void setNonSmokingException(const QString &non_smoking_exception);
    bool is_non_smoking_exception_Set() const;
    bool is_non_smoking_exception_Valid() const;

    bool isPatio() const;
    void setPatio(const bool &patio);
    bool is_patio_Set() const;
    bool is_patio_Valid() const;

    QString getPatioException() const;
    void setPatioException(const QString &patio_exception);
    bool is_patio_exception_Set() const;
    bool is_patio_exception_Valid() const;

    bool isStairs() const;
    void setStairs(const bool &stairs);
    bool is_stairs_Set() const;
    bool is_stairs_Valid() const;

    QString getStairsException() const;
    void setStairsException(const QString &stairs_exception);
    bool is_stairs_exception_Set() const;
    bool is_stairs_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_balcony;
    bool m_balcony_isSet;
    bool m_balcony_isValid;

    QString m_balcony_exception;
    bool m_balcony_exception_isSet;
    bool m_balcony_exception_isValid;

    float m_living_area_sq_meters;
    bool m_living_area_sq_meters_isSet;
    bool m_living_area_sq_meters_isValid;

    QString m_living_area_sq_meters_exception;
    bool m_living_area_sq_meters_exception_isSet;
    bool m_living_area_sq_meters_exception_isValid;

    bool m_loft;
    bool m_loft_isSet;
    bool m_loft_isValid;

    QString m_loft_exception;
    bool m_loft_exception_isSet;
    bool m_loft_exception_isValid;

    bool m_non_smoking;
    bool m_non_smoking_isSet;
    bool m_non_smoking_isValid;

    QString m_non_smoking_exception;
    bool m_non_smoking_exception_isSet;
    bool m_non_smoking_exception_isValid;

    bool m_patio;
    bool m_patio_isSet;
    bool m_patio_isValid;

    QString m_patio_exception;
    bool m_patio_exception_isSet;
    bool m_patio_exception_isValid;

    bool m_stairs;
    bool m_stairs_isSet;
    bool m_stairs_isValid;

    QString m_stairs_exception;
    bool m_stairs_exception_isSet;
    bool m_stairs_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivingAreaLayout)

#endif // OAILivingAreaLayout_H
