/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISustainability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISustainability::OAISustainability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISustainability::OAISustainability() {
    this->initializeModel();
}

OAISustainability::~OAISustainability() {}

void OAISustainability::initializeModel() {

    m_energy_efficiency_isSet = false;
    m_energy_efficiency_isValid = false;

    m_sustainability_certifications_isSet = false;
    m_sustainability_certifications_isValid = false;

    m_sustainable_sourcing_isSet = false;
    m_sustainable_sourcing_isValid = false;

    m_waste_reduction_isSet = false;
    m_waste_reduction_isValid = false;

    m_water_conservation_isSet = false;
    m_water_conservation_isValid = false;
}

void OAISustainability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISustainability::fromJsonObject(QJsonObject json) {

    m_energy_efficiency_isValid = ::OpenAPI::fromJsonValue(m_energy_efficiency, json[QString("energyEfficiency")]);
    m_energy_efficiency_isSet = !json[QString("energyEfficiency")].isNull() && m_energy_efficiency_isValid;

    m_sustainability_certifications_isValid = ::OpenAPI::fromJsonValue(m_sustainability_certifications, json[QString("sustainabilityCertifications")]);
    m_sustainability_certifications_isSet = !json[QString("sustainabilityCertifications")].isNull() && m_sustainability_certifications_isValid;

    m_sustainable_sourcing_isValid = ::OpenAPI::fromJsonValue(m_sustainable_sourcing, json[QString("sustainableSourcing")]);
    m_sustainable_sourcing_isSet = !json[QString("sustainableSourcing")].isNull() && m_sustainable_sourcing_isValid;

    m_waste_reduction_isValid = ::OpenAPI::fromJsonValue(m_waste_reduction, json[QString("wasteReduction")]);
    m_waste_reduction_isSet = !json[QString("wasteReduction")].isNull() && m_waste_reduction_isValid;

    m_water_conservation_isValid = ::OpenAPI::fromJsonValue(m_water_conservation, json[QString("waterConservation")]);
    m_water_conservation_isSet = !json[QString("waterConservation")].isNull() && m_water_conservation_isValid;
}

QString OAISustainability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISustainability::asJsonObject() const {
    QJsonObject obj;
    if (m_energy_efficiency.isSet()) {
        obj.insert(QString("energyEfficiency"), ::OpenAPI::toJsonValue(m_energy_efficiency));
    }
    if (m_sustainability_certifications.isSet()) {
        obj.insert(QString("sustainabilityCertifications"), ::OpenAPI::toJsonValue(m_sustainability_certifications));
    }
    if (m_sustainable_sourcing.isSet()) {
        obj.insert(QString("sustainableSourcing"), ::OpenAPI::toJsonValue(m_sustainable_sourcing));
    }
    if (m_waste_reduction.isSet()) {
        obj.insert(QString("wasteReduction"), ::OpenAPI::toJsonValue(m_waste_reduction));
    }
    if (m_water_conservation.isSet()) {
        obj.insert(QString("waterConservation"), ::OpenAPI::toJsonValue(m_water_conservation));
    }
    return obj;
}

OAIEnergyEfficiency OAISustainability::getEnergyEfficiency() const {
    return m_energy_efficiency;
}
void OAISustainability::setEnergyEfficiency(const OAIEnergyEfficiency &energy_efficiency) {
    m_energy_efficiency = energy_efficiency;
    m_energy_efficiency_isSet = true;
}

bool OAISustainability::is_energy_efficiency_Set() const{
    return m_energy_efficiency_isSet;
}

bool OAISustainability::is_energy_efficiency_Valid() const{
    return m_energy_efficiency_isValid;
}

OAISustainabilityCertifications OAISustainability::getSustainabilityCertifications() const {
    return m_sustainability_certifications;
}
void OAISustainability::setSustainabilityCertifications(const OAISustainabilityCertifications &sustainability_certifications) {
    m_sustainability_certifications = sustainability_certifications;
    m_sustainability_certifications_isSet = true;
}

bool OAISustainability::is_sustainability_certifications_Set() const{
    return m_sustainability_certifications_isSet;
}

bool OAISustainability::is_sustainability_certifications_Valid() const{
    return m_sustainability_certifications_isValid;
}

OAISustainableSourcing OAISustainability::getSustainableSourcing() const {
    return m_sustainable_sourcing;
}
void OAISustainability::setSustainableSourcing(const OAISustainableSourcing &sustainable_sourcing) {
    m_sustainable_sourcing = sustainable_sourcing;
    m_sustainable_sourcing_isSet = true;
}

bool OAISustainability::is_sustainable_sourcing_Set() const{
    return m_sustainable_sourcing_isSet;
}

bool OAISustainability::is_sustainable_sourcing_Valid() const{
    return m_sustainable_sourcing_isValid;
}

OAIWasteReduction OAISustainability::getWasteReduction() const {
    return m_waste_reduction;
}
void OAISustainability::setWasteReduction(const OAIWasteReduction &waste_reduction) {
    m_waste_reduction = waste_reduction;
    m_waste_reduction_isSet = true;
}

bool OAISustainability::is_waste_reduction_Set() const{
    return m_waste_reduction_isSet;
}

bool OAISustainability::is_waste_reduction_Valid() const{
    return m_waste_reduction_isValid;
}

OAIWaterConservation OAISustainability::getWaterConservation() const {
    return m_water_conservation;
}
void OAISustainability::setWaterConservation(const OAIWaterConservation &water_conservation) {
    m_water_conservation = water_conservation;
    m_water_conservation_isSet = true;
}

bool OAISustainability::is_water_conservation_Set() const{
    return m_water_conservation_isSet;
}

bool OAISustainability::is_water_conservation_Valid() const{
    return m_water_conservation_isValid;
}

bool OAISustainability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_energy_efficiency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sustainability_certifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sustainable_sourcing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waste_reduction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_conservation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISustainability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
