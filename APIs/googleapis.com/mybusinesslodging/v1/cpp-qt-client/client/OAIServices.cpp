/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServices::OAIServices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServices::OAIServices() {
    this->initializeModel();
}

OAIServices::~OAIServices() {}

void OAIServices::initializeModel() {

    m_baggage_storage_isSet = false;
    m_baggage_storage_isValid = false;

    m_baggage_storage_exception_isSet = false;
    m_baggage_storage_exception_isValid = false;

    m_concierge_isSet = false;
    m_concierge_isValid = false;

    m_concierge_exception_isSet = false;
    m_concierge_exception_isValid = false;

    m_convenience_store_isSet = false;
    m_convenience_store_isValid = false;

    m_convenience_store_exception_isSet = false;
    m_convenience_store_exception_isValid = false;

    m_currency_exchange_isSet = false;
    m_currency_exchange_isValid = false;

    m_currency_exchange_exception_isSet = false;
    m_currency_exchange_exception_isValid = false;

    m_elevator_isSet = false;
    m_elevator_isValid = false;

    m_elevator_exception_isSet = false;
    m_elevator_exception_isValid = false;

    m_front_desk_isSet = false;
    m_front_desk_isValid = false;

    m_front_desk_exception_isSet = false;
    m_front_desk_exception_isValid = false;

    m_full_service_laundry_isSet = false;
    m_full_service_laundry_isValid = false;

    m_full_service_laundry_exception_isSet = false;
    m_full_service_laundry_exception_isValid = false;

    m_gift_shop_isSet = false;
    m_gift_shop_isValid = false;

    m_gift_shop_exception_isSet = false;
    m_gift_shop_exception_isValid = false;

    m_languages_spoken_isSet = false;
    m_languages_spoken_isValid = false;

    m_self_service_laundry_isSet = false;
    m_self_service_laundry_isValid = false;

    m_self_service_laundry_exception_isSet = false;
    m_self_service_laundry_exception_isValid = false;

    m_social_hour_isSet = false;
    m_social_hour_isValid = false;

    m_social_hour_exception_isSet = false;
    m_social_hour_exception_isValid = false;

    m_twenty_four_hour_front_desk_isSet = false;
    m_twenty_four_hour_front_desk_isValid = false;

    m_twenty_four_hour_front_desk_exception_isSet = false;
    m_twenty_four_hour_front_desk_exception_isValid = false;

    m_wake_up_calls_isSet = false;
    m_wake_up_calls_isValid = false;

    m_wake_up_calls_exception_isSet = false;
    m_wake_up_calls_exception_isValid = false;
}

void OAIServices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServices::fromJsonObject(QJsonObject json) {

    m_baggage_storage_isValid = ::OpenAPI::fromJsonValue(m_baggage_storage, json[QString("baggageStorage")]);
    m_baggage_storage_isSet = !json[QString("baggageStorage")].isNull() && m_baggage_storage_isValid;

    m_baggage_storage_exception_isValid = ::OpenAPI::fromJsonValue(m_baggage_storage_exception, json[QString("baggageStorageException")]);
    m_baggage_storage_exception_isSet = !json[QString("baggageStorageException")].isNull() && m_baggage_storage_exception_isValid;

    m_concierge_isValid = ::OpenAPI::fromJsonValue(m_concierge, json[QString("concierge")]);
    m_concierge_isSet = !json[QString("concierge")].isNull() && m_concierge_isValid;

    m_concierge_exception_isValid = ::OpenAPI::fromJsonValue(m_concierge_exception, json[QString("conciergeException")]);
    m_concierge_exception_isSet = !json[QString("conciergeException")].isNull() && m_concierge_exception_isValid;

    m_convenience_store_isValid = ::OpenAPI::fromJsonValue(m_convenience_store, json[QString("convenienceStore")]);
    m_convenience_store_isSet = !json[QString("convenienceStore")].isNull() && m_convenience_store_isValid;

    m_convenience_store_exception_isValid = ::OpenAPI::fromJsonValue(m_convenience_store_exception, json[QString("convenienceStoreException")]);
    m_convenience_store_exception_isSet = !json[QString("convenienceStoreException")].isNull() && m_convenience_store_exception_isValid;

    m_currency_exchange_isValid = ::OpenAPI::fromJsonValue(m_currency_exchange, json[QString("currencyExchange")]);
    m_currency_exchange_isSet = !json[QString("currencyExchange")].isNull() && m_currency_exchange_isValid;

    m_currency_exchange_exception_isValid = ::OpenAPI::fromJsonValue(m_currency_exchange_exception, json[QString("currencyExchangeException")]);
    m_currency_exchange_exception_isSet = !json[QString("currencyExchangeException")].isNull() && m_currency_exchange_exception_isValid;

    m_elevator_isValid = ::OpenAPI::fromJsonValue(m_elevator, json[QString("elevator")]);
    m_elevator_isSet = !json[QString("elevator")].isNull() && m_elevator_isValid;

    m_elevator_exception_isValid = ::OpenAPI::fromJsonValue(m_elevator_exception, json[QString("elevatorException")]);
    m_elevator_exception_isSet = !json[QString("elevatorException")].isNull() && m_elevator_exception_isValid;

    m_front_desk_isValid = ::OpenAPI::fromJsonValue(m_front_desk, json[QString("frontDesk")]);
    m_front_desk_isSet = !json[QString("frontDesk")].isNull() && m_front_desk_isValid;

    m_front_desk_exception_isValid = ::OpenAPI::fromJsonValue(m_front_desk_exception, json[QString("frontDeskException")]);
    m_front_desk_exception_isSet = !json[QString("frontDeskException")].isNull() && m_front_desk_exception_isValid;

    m_full_service_laundry_isValid = ::OpenAPI::fromJsonValue(m_full_service_laundry, json[QString("fullServiceLaundry")]);
    m_full_service_laundry_isSet = !json[QString("fullServiceLaundry")].isNull() && m_full_service_laundry_isValid;

    m_full_service_laundry_exception_isValid = ::OpenAPI::fromJsonValue(m_full_service_laundry_exception, json[QString("fullServiceLaundryException")]);
    m_full_service_laundry_exception_isSet = !json[QString("fullServiceLaundryException")].isNull() && m_full_service_laundry_exception_isValid;

    m_gift_shop_isValid = ::OpenAPI::fromJsonValue(m_gift_shop, json[QString("giftShop")]);
    m_gift_shop_isSet = !json[QString("giftShop")].isNull() && m_gift_shop_isValid;

    m_gift_shop_exception_isValid = ::OpenAPI::fromJsonValue(m_gift_shop_exception, json[QString("giftShopException")]);
    m_gift_shop_exception_isSet = !json[QString("giftShopException")].isNull() && m_gift_shop_exception_isValid;

    m_languages_spoken_isValid = ::OpenAPI::fromJsonValue(m_languages_spoken, json[QString("languagesSpoken")]);
    m_languages_spoken_isSet = !json[QString("languagesSpoken")].isNull() && m_languages_spoken_isValid;

    m_self_service_laundry_isValid = ::OpenAPI::fromJsonValue(m_self_service_laundry, json[QString("selfServiceLaundry")]);
    m_self_service_laundry_isSet = !json[QString("selfServiceLaundry")].isNull() && m_self_service_laundry_isValid;

    m_self_service_laundry_exception_isValid = ::OpenAPI::fromJsonValue(m_self_service_laundry_exception, json[QString("selfServiceLaundryException")]);
    m_self_service_laundry_exception_isSet = !json[QString("selfServiceLaundryException")].isNull() && m_self_service_laundry_exception_isValid;

    m_social_hour_isValid = ::OpenAPI::fromJsonValue(m_social_hour, json[QString("socialHour")]);
    m_social_hour_isSet = !json[QString("socialHour")].isNull() && m_social_hour_isValid;

    m_social_hour_exception_isValid = ::OpenAPI::fromJsonValue(m_social_hour_exception, json[QString("socialHourException")]);
    m_social_hour_exception_isSet = !json[QString("socialHourException")].isNull() && m_social_hour_exception_isValid;

    m_twenty_four_hour_front_desk_isValid = ::OpenAPI::fromJsonValue(m_twenty_four_hour_front_desk, json[QString("twentyFourHourFrontDesk")]);
    m_twenty_four_hour_front_desk_isSet = !json[QString("twentyFourHourFrontDesk")].isNull() && m_twenty_four_hour_front_desk_isValid;

    m_twenty_four_hour_front_desk_exception_isValid = ::OpenAPI::fromJsonValue(m_twenty_four_hour_front_desk_exception, json[QString("twentyFourHourFrontDeskException")]);
    m_twenty_four_hour_front_desk_exception_isSet = !json[QString("twentyFourHourFrontDeskException")].isNull() && m_twenty_four_hour_front_desk_exception_isValid;

    m_wake_up_calls_isValid = ::OpenAPI::fromJsonValue(m_wake_up_calls, json[QString("wakeUpCalls")]);
    m_wake_up_calls_isSet = !json[QString("wakeUpCalls")].isNull() && m_wake_up_calls_isValid;

    m_wake_up_calls_exception_isValid = ::OpenAPI::fromJsonValue(m_wake_up_calls_exception, json[QString("wakeUpCallsException")]);
    m_wake_up_calls_exception_isSet = !json[QString("wakeUpCallsException")].isNull() && m_wake_up_calls_exception_isValid;
}

QString OAIServices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServices::asJsonObject() const {
    QJsonObject obj;
    if (m_baggage_storage_isSet) {
        obj.insert(QString("baggageStorage"), ::OpenAPI::toJsonValue(m_baggage_storage));
    }
    if (m_baggage_storage_exception_isSet) {
        obj.insert(QString("baggageStorageException"), ::OpenAPI::toJsonValue(m_baggage_storage_exception));
    }
    if (m_concierge_isSet) {
        obj.insert(QString("concierge"), ::OpenAPI::toJsonValue(m_concierge));
    }
    if (m_concierge_exception_isSet) {
        obj.insert(QString("conciergeException"), ::OpenAPI::toJsonValue(m_concierge_exception));
    }
    if (m_convenience_store_isSet) {
        obj.insert(QString("convenienceStore"), ::OpenAPI::toJsonValue(m_convenience_store));
    }
    if (m_convenience_store_exception_isSet) {
        obj.insert(QString("convenienceStoreException"), ::OpenAPI::toJsonValue(m_convenience_store_exception));
    }
    if (m_currency_exchange_isSet) {
        obj.insert(QString("currencyExchange"), ::OpenAPI::toJsonValue(m_currency_exchange));
    }
    if (m_currency_exchange_exception_isSet) {
        obj.insert(QString("currencyExchangeException"), ::OpenAPI::toJsonValue(m_currency_exchange_exception));
    }
    if (m_elevator_isSet) {
        obj.insert(QString("elevator"), ::OpenAPI::toJsonValue(m_elevator));
    }
    if (m_elevator_exception_isSet) {
        obj.insert(QString("elevatorException"), ::OpenAPI::toJsonValue(m_elevator_exception));
    }
    if (m_front_desk_isSet) {
        obj.insert(QString("frontDesk"), ::OpenAPI::toJsonValue(m_front_desk));
    }
    if (m_front_desk_exception_isSet) {
        obj.insert(QString("frontDeskException"), ::OpenAPI::toJsonValue(m_front_desk_exception));
    }
    if (m_full_service_laundry_isSet) {
        obj.insert(QString("fullServiceLaundry"), ::OpenAPI::toJsonValue(m_full_service_laundry));
    }
    if (m_full_service_laundry_exception_isSet) {
        obj.insert(QString("fullServiceLaundryException"), ::OpenAPI::toJsonValue(m_full_service_laundry_exception));
    }
    if (m_gift_shop_isSet) {
        obj.insert(QString("giftShop"), ::OpenAPI::toJsonValue(m_gift_shop));
    }
    if (m_gift_shop_exception_isSet) {
        obj.insert(QString("giftShopException"), ::OpenAPI::toJsonValue(m_gift_shop_exception));
    }
    if (m_languages_spoken.size() > 0) {
        obj.insert(QString("languagesSpoken"), ::OpenAPI::toJsonValue(m_languages_spoken));
    }
    if (m_self_service_laundry_isSet) {
        obj.insert(QString("selfServiceLaundry"), ::OpenAPI::toJsonValue(m_self_service_laundry));
    }
    if (m_self_service_laundry_exception_isSet) {
        obj.insert(QString("selfServiceLaundryException"), ::OpenAPI::toJsonValue(m_self_service_laundry_exception));
    }
    if (m_social_hour_isSet) {
        obj.insert(QString("socialHour"), ::OpenAPI::toJsonValue(m_social_hour));
    }
    if (m_social_hour_exception_isSet) {
        obj.insert(QString("socialHourException"), ::OpenAPI::toJsonValue(m_social_hour_exception));
    }
    if (m_twenty_four_hour_front_desk_isSet) {
        obj.insert(QString("twentyFourHourFrontDesk"), ::OpenAPI::toJsonValue(m_twenty_four_hour_front_desk));
    }
    if (m_twenty_four_hour_front_desk_exception_isSet) {
        obj.insert(QString("twentyFourHourFrontDeskException"), ::OpenAPI::toJsonValue(m_twenty_four_hour_front_desk_exception));
    }
    if (m_wake_up_calls_isSet) {
        obj.insert(QString("wakeUpCalls"), ::OpenAPI::toJsonValue(m_wake_up_calls));
    }
    if (m_wake_up_calls_exception_isSet) {
        obj.insert(QString("wakeUpCallsException"), ::OpenAPI::toJsonValue(m_wake_up_calls_exception));
    }
    return obj;
}

bool OAIServices::isBaggageStorage() const {
    return m_baggage_storage;
}
void OAIServices::setBaggageStorage(const bool &baggage_storage) {
    m_baggage_storage = baggage_storage;
    m_baggage_storage_isSet = true;
}

bool OAIServices::is_baggage_storage_Set() const{
    return m_baggage_storage_isSet;
}

bool OAIServices::is_baggage_storage_Valid() const{
    return m_baggage_storage_isValid;
}

QString OAIServices::getBaggageStorageException() const {
    return m_baggage_storage_exception;
}
void OAIServices::setBaggageStorageException(const QString &baggage_storage_exception) {
    m_baggage_storage_exception = baggage_storage_exception;
    m_baggage_storage_exception_isSet = true;
}

bool OAIServices::is_baggage_storage_exception_Set() const{
    return m_baggage_storage_exception_isSet;
}

bool OAIServices::is_baggage_storage_exception_Valid() const{
    return m_baggage_storage_exception_isValid;
}

bool OAIServices::isConcierge() const {
    return m_concierge;
}
void OAIServices::setConcierge(const bool &concierge) {
    m_concierge = concierge;
    m_concierge_isSet = true;
}

bool OAIServices::is_concierge_Set() const{
    return m_concierge_isSet;
}

bool OAIServices::is_concierge_Valid() const{
    return m_concierge_isValid;
}

QString OAIServices::getConciergeException() const {
    return m_concierge_exception;
}
void OAIServices::setConciergeException(const QString &concierge_exception) {
    m_concierge_exception = concierge_exception;
    m_concierge_exception_isSet = true;
}

bool OAIServices::is_concierge_exception_Set() const{
    return m_concierge_exception_isSet;
}

bool OAIServices::is_concierge_exception_Valid() const{
    return m_concierge_exception_isValid;
}

bool OAIServices::isConvenienceStore() const {
    return m_convenience_store;
}
void OAIServices::setConvenienceStore(const bool &convenience_store) {
    m_convenience_store = convenience_store;
    m_convenience_store_isSet = true;
}

bool OAIServices::is_convenience_store_Set() const{
    return m_convenience_store_isSet;
}

bool OAIServices::is_convenience_store_Valid() const{
    return m_convenience_store_isValid;
}

QString OAIServices::getConvenienceStoreException() const {
    return m_convenience_store_exception;
}
void OAIServices::setConvenienceStoreException(const QString &convenience_store_exception) {
    m_convenience_store_exception = convenience_store_exception;
    m_convenience_store_exception_isSet = true;
}

bool OAIServices::is_convenience_store_exception_Set() const{
    return m_convenience_store_exception_isSet;
}

bool OAIServices::is_convenience_store_exception_Valid() const{
    return m_convenience_store_exception_isValid;
}

bool OAIServices::isCurrencyExchange() const {
    return m_currency_exchange;
}
void OAIServices::setCurrencyExchange(const bool &currency_exchange) {
    m_currency_exchange = currency_exchange;
    m_currency_exchange_isSet = true;
}

bool OAIServices::is_currency_exchange_Set() const{
    return m_currency_exchange_isSet;
}

bool OAIServices::is_currency_exchange_Valid() const{
    return m_currency_exchange_isValid;
}

QString OAIServices::getCurrencyExchangeException() const {
    return m_currency_exchange_exception;
}
void OAIServices::setCurrencyExchangeException(const QString &currency_exchange_exception) {
    m_currency_exchange_exception = currency_exchange_exception;
    m_currency_exchange_exception_isSet = true;
}

bool OAIServices::is_currency_exchange_exception_Set() const{
    return m_currency_exchange_exception_isSet;
}

bool OAIServices::is_currency_exchange_exception_Valid() const{
    return m_currency_exchange_exception_isValid;
}

bool OAIServices::isElevator() const {
    return m_elevator;
}
void OAIServices::setElevator(const bool &elevator) {
    m_elevator = elevator;
    m_elevator_isSet = true;
}

bool OAIServices::is_elevator_Set() const{
    return m_elevator_isSet;
}

bool OAIServices::is_elevator_Valid() const{
    return m_elevator_isValid;
}

QString OAIServices::getElevatorException() const {
    return m_elevator_exception;
}
void OAIServices::setElevatorException(const QString &elevator_exception) {
    m_elevator_exception = elevator_exception;
    m_elevator_exception_isSet = true;
}

bool OAIServices::is_elevator_exception_Set() const{
    return m_elevator_exception_isSet;
}

bool OAIServices::is_elevator_exception_Valid() const{
    return m_elevator_exception_isValid;
}

bool OAIServices::isFrontDesk() const {
    return m_front_desk;
}
void OAIServices::setFrontDesk(const bool &front_desk) {
    m_front_desk = front_desk;
    m_front_desk_isSet = true;
}

bool OAIServices::is_front_desk_Set() const{
    return m_front_desk_isSet;
}

bool OAIServices::is_front_desk_Valid() const{
    return m_front_desk_isValid;
}

QString OAIServices::getFrontDeskException() const {
    return m_front_desk_exception;
}
void OAIServices::setFrontDeskException(const QString &front_desk_exception) {
    m_front_desk_exception = front_desk_exception;
    m_front_desk_exception_isSet = true;
}

bool OAIServices::is_front_desk_exception_Set() const{
    return m_front_desk_exception_isSet;
}

bool OAIServices::is_front_desk_exception_Valid() const{
    return m_front_desk_exception_isValid;
}

bool OAIServices::isFullServiceLaundry() const {
    return m_full_service_laundry;
}
void OAIServices::setFullServiceLaundry(const bool &full_service_laundry) {
    m_full_service_laundry = full_service_laundry;
    m_full_service_laundry_isSet = true;
}

bool OAIServices::is_full_service_laundry_Set() const{
    return m_full_service_laundry_isSet;
}

bool OAIServices::is_full_service_laundry_Valid() const{
    return m_full_service_laundry_isValid;
}

QString OAIServices::getFullServiceLaundryException() const {
    return m_full_service_laundry_exception;
}
void OAIServices::setFullServiceLaundryException(const QString &full_service_laundry_exception) {
    m_full_service_laundry_exception = full_service_laundry_exception;
    m_full_service_laundry_exception_isSet = true;
}

bool OAIServices::is_full_service_laundry_exception_Set() const{
    return m_full_service_laundry_exception_isSet;
}

bool OAIServices::is_full_service_laundry_exception_Valid() const{
    return m_full_service_laundry_exception_isValid;
}

bool OAIServices::isGiftShop() const {
    return m_gift_shop;
}
void OAIServices::setGiftShop(const bool &gift_shop) {
    m_gift_shop = gift_shop;
    m_gift_shop_isSet = true;
}

bool OAIServices::is_gift_shop_Set() const{
    return m_gift_shop_isSet;
}

bool OAIServices::is_gift_shop_Valid() const{
    return m_gift_shop_isValid;
}

QString OAIServices::getGiftShopException() const {
    return m_gift_shop_exception;
}
void OAIServices::setGiftShopException(const QString &gift_shop_exception) {
    m_gift_shop_exception = gift_shop_exception;
    m_gift_shop_exception_isSet = true;
}

bool OAIServices::is_gift_shop_exception_Set() const{
    return m_gift_shop_exception_isSet;
}

bool OAIServices::is_gift_shop_exception_Valid() const{
    return m_gift_shop_exception_isValid;
}

QList<OAILanguageSpoken> OAIServices::getLanguagesSpoken() const {
    return m_languages_spoken;
}
void OAIServices::setLanguagesSpoken(const QList<OAILanguageSpoken> &languages_spoken) {
    m_languages_spoken = languages_spoken;
    m_languages_spoken_isSet = true;
}

bool OAIServices::is_languages_spoken_Set() const{
    return m_languages_spoken_isSet;
}

bool OAIServices::is_languages_spoken_Valid() const{
    return m_languages_spoken_isValid;
}

bool OAIServices::isSelfServiceLaundry() const {
    return m_self_service_laundry;
}
void OAIServices::setSelfServiceLaundry(const bool &self_service_laundry) {
    m_self_service_laundry = self_service_laundry;
    m_self_service_laundry_isSet = true;
}

bool OAIServices::is_self_service_laundry_Set() const{
    return m_self_service_laundry_isSet;
}

bool OAIServices::is_self_service_laundry_Valid() const{
    return m_self_service_laundry_isValid;
}

QString OAIServices::getSelfServiceLaundryException() const {
    return m_self_service_laundry_exception;
}
void OAIServices::setSelfServiceLaundryException(const QString &self_service_laundry_exception) {
    m_self_service_laundry_exception = self_service_laundry_exception;
    m_self_service_laundry_exception_isSet = true;
}

bool OAIServices::is_self_service_laundry_exception_Set() const{
    return m_self_service_laundry_exception_isSet;
}

bool OAIServices::is_self_service_laundry_exception_Valid() const{
    return m_self_service_laundry_exception_isValid;
}

bool OAIServices::isSocialHour() const {
    return m_social_hour;
}
void OAIServices::setSocialHour(const bool &social_hour) {
    m_social_hour = social_hour;
    m_social_hour_isSet = true;
}

bool OAIServices::is_social_hour_Set() const{
    return m_social_hour_isSet;
}

bool OAIServices::is_social_hour_Valid() const{
    return m_social_hour_isValid;
}

QString OAIServices::getSocialHourException() const {
    return m_social_hour_exception;
}
void OAIServices::setSocialHourException(const QString &social_hour_exception) {
    m_social_hour_exception = social_hour_exception;
    m_social_hour_exception_isSet = true;
}

bool OAIServices::is_social_hour_exception_Set() const{
    return m_social_hour_exception_isSet;
}

bool OAIServices::is_social_hour_exception_Valid() const{
    return m_social_hour_exception_isValid;
}

bool OAIServices::isTwentyFourHourFrontDesk() const {
    return m_twenty_four_hour_front_desk;
}
void OAIServices::setTwentyFourHourFrontDesk(const bool &twenty_four_hour_front_desk) {
    m_twenty_four_hour_front_desk = twenty_four_hour_front_desk;
    m_twenty_four_hour_front_desk_isSet = true;
}

bool OAIServices::is_twenty_four_hour_front_desk_Set() const{
    return m_twenty_four_hour_front_desk_isSet;
}

bool OAIServices::is_twenty_four_hour_front_desk_Valid() const{
    return m_twenty_four_hour_front_desk_isValid;
}

QString OAIServices::getTwentyFourHourFrontDeskException() const {
    return m_twenty_four_hour_front_desk_exception;
}
void OAIServices::setTwentyFourHourFrontDeskException(const QString &twenty_four_hour_front_desk_exception) {
    m_twenty_four_hour_front_desk_exception = twenty_four_hour_front_desk_exception;
    m_twenty_four_hour_front_desk_exception_isSet = true;
}

bool OAIServices::is_twenty_four_hour_front_desk_exception_Set() const{
    return m_twenty_four_hour_front_desk_exception_isSet;
}

bool OAIServices::is_twenty_four_hour_front_desk_exception_Valid() const{
    return m_twenty_four_hour_front_desk_exception_isValid;
}

bool OAIServices::isWakeUpCalls() const {
    return m_wake_up_calls;
}
void OAIServices::setWakeUpCalls(const bool &wake_up_calls) {
    m_wake_up_calls = wake_up_calls;
    m_wake_up_calls_isSet = true;
}

bool OAIServices::is_wake_up_calls_Set() const{
    return m_wake_up_calls_isSet;
}

bool OAIServices::is_wake_up_calls_Valid() const{
    return m_wake_up_calls_isValid;
}

QString OAIServices::getWakeUpCallsException() const {
    return m_wake_up_calls_exception;
}
void OAIServices::setWakeUpCallsException(const QString &wake_up_calls_exception) {
    m_wake_up_calls_exception = wake_up_calls_exception;
    m_wake_up_calls_exception_isSet = true;
}

bool OAIServices::is_wake_up_calls_exception_Set() const{
    return m_wake_up_calls_exception_isSet;
}

bool OAIServices::is_wake_up_calls_exception_Valid() const{
    return m_wake_up_calls_exception_isValid;
}

bool OAIServices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_baggage_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baggage_storage_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concierge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concierge_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convenience_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convenience_store_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_exchange_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevator_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_front_desk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_front_desk_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_service_laundry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_service_laundry_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_shop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_shop_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages_spoken.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_service_laundry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_service_laundry_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_hour_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twenty_four_hour_front_desk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twenty_four_hour_front_desk_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wake_up_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wake_up_calls_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServices::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
