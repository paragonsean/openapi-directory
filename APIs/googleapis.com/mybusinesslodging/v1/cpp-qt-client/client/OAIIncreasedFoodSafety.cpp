/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncreasedFoodSafety.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncreasedFoodSafety::OAIIncreasedFoodSafety(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncreasedFoodSafety::OAIIncreasedFoodSafety() {
    this->initializeModel();
}

OAIIncreasedFoodSafety::~OAIIncreasedFoodSafety() {}

void OAIIncreasedFoodSafety::initializeModel() {

    m_dining_areas_additional_sanitation_isSet = false;
    m_dining_areas_additional_sanitation_isValid = false;

    m_dining_areas_additional_sanitation_exception_isSet = false;
    m_dining_areas_additional_sanitation_exception_isValid = false;

    m_disposable_flatware_isSet = false;
    m_disposable_flatware_isValid = false;

    m_disposable_flatware_exception_isSet = false;
    m_disposable_flatware_exception_isValid = false;

    m_food_preparation_and_serving_additional_safety_isSet = false;
    m_food_preparation_and_serving_additional_safety_isValid = false;

    m_food_preparation_and_serving_additional_safety_exception_isSet = false;
    m_food_preparation_and_serving_additional_safety_exception_isValid = false;

    m_individual_packaged_meals_isSet = false;
    m_individual_packaged_meals_isValid = false;

    m_individual_packaged_meals_exception_isSet = false;
    m_individual_packaged_meals_exception_isValid = false;

    m_single_use_food_menus_isSet = false;
    m_single_use_food_menus_isValid = false;

    m_single_use_food_menus_exception_isSet = false;
    m_single_use_food_menus_exception_isValid = false;
}

void OAIIncreasedFoodSafety::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncreasedFoodSafety::fromJsonObject(QJsonObject json) {

    m_dining_areas_additional_sanitation_isValid = ::OpenAPI::fromJsonValue(m_dining_areas_additional_sanitation, json[QString("diningAreasAdditionalSanitation")]);
    m_dining_areas_additional_sanitation_isSet = !json[QString("diningAreasAdditionalSanitation")].isNull() && m_dining_areas_additional_sanitation_isValid;

    m_dining_areas_additional_sanitation_exception_isValid = ::OpenAPI::fromJsonValue(m_dining_areas_additional_sanitation_exception, json[QString("diningAreasAdditionalSanitationException")]);
    m_dining_areas_additional_sanitation_exception_isSet = !json[QString("diningAreasAdditionalSanitationException")].isNull() && m_dining_areas_additional_sanitation_exception_isValid;

    m_disposable_flatware_isValid = ::OpenAPI::fromJsonValue(m_disposable_flatware, json[QString("disposableFlatware")]);
    m_disposable_flatware_isSet = !json[QString("disposableFlatware")].isNull() && m_disposable_flatware_isValid;

    m_disposable_flatware_exception_isValid = ::OpenAPI::fromJsonValue(m_disposable_flatware_exception, json[QString("disposableFlatwareException")]);
    m_disposable_flatware_exception_isSet = !json[QString("disposableFlatwareException")].isNull() && m_disposable_flatware_exception_isValid;

    m_food_preparation_and_serving_additional_safety_isValid = ::OpenAPI::fromJsonValue(m_food_preparation_and_serving_additional_safety, json[QString("foodPreparationAndServingAdditionalSafety")]);
    m_food_preparation_and_serving_additional_safety_isSet = !json[QString("foodPreparationAndServingAdditionalSafety")].isNull() && m_food_preparation_and_serving_additional_safety_isValid;

    m_food_preparation_and_serving_additional_safety_exception_isValid = ::OpenAPI::fromJsonValue(m_food_preparation_and_serving_additional_safety_exception, json[QString("foodPreparationAndServingAdditionalSafetyException")]);
    m_food_preparation_and_serving_additional_safety_exception_isSet = !json[QString("foodPreparationAndServingAdditionalSafetyException")].isNull() && m_food_preparation_and_serving_additional_safety_exception_isValid;

    m_individual_packaged_meals_isValid = ::OpenAPI::fromJsonValue(m_individual_packaged_meals, json[QString("individualPackagedMeals")]);
    m_individual_packaged_meals_isSet = !json[QString("individualPackagedMeals")].isNull() && m_individual_packaged_meals_isValid;

    m_individual_packaged_meals_exception_isValid = ::OpenAPI::fromJsonValue(m_individual_packaged_meals_exception, json[QString("individualPackagedMealsException")]);
    m_individual_packaged_meals_exception_isSet = !json[QString("individualPackagedMealsException")].isNull() && m_individual_packaged_meals_exception_isValid;

    m_single_use_food_menus_isValid = ::OpenAPI::fromJsonValue(m_single_use_food_menus, json[QString("singleUseFoodMenus")]);
    m_single_use_food_menus_isSet = !json[QString("singleUseFoodMenus")].isNull() && m_single_use_food_menus_isValid;

    m_single_use_food_menus_exception_isValid = ::OpenAPI::fromJsonValue(m_single_use_food_menus_exception, json[QString("singleUseFoodMenusException")]);
    m_single_use_food_menus_exception_isSet = !json[QString("singleUseFoodMenusException")].isNull() && m_single_use_food_menus_exception_isValid;
}

QString OAIIncreasedFoodSafety::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncreasedFoodSafety::asJsonObject() const {
    QJsonObject obj;
    if (m_dining_areas_additional_sanitation_isSet) {
        obj.insert(QString("diningAreasAdditionalSanitation"), ::OpenAPI::toJsonValue(m_dining_areas_additional_sanitation));
    }
    if (m_dining_areas_additional_sanitation_exception_isSet) {
        obj.insert(QString("diningAreasAdditionalSanitationException"), ::OpenAPI::toJsonValue(m_dining_areas_additional_sanitation_exception));
    }
    if (m_disposable_flatware_isSet) {
        obj.insert(QString("disposableFlatware"), ::OpenAPI::toJsonValue(m_disposable_flatware));
    }
    if (m_disposable_flatware_exception_isSet) {
        obj.insert(QString("disposableFlatwareException"), ::OpenAPI::toJsonValue(m_disposable_flatware_exception));
    }
    if (m_food_preparation_and_serving_additional_safety_isSet) {
        obj.insert(QString("foodPreparationAndServingAdditionalSafety"), ::OpenAPI::toJsonValue(m_food_preparation_and_serving_additional_safety));
    }
    if (m_food_preparation_and_serving_additional_safety_exception_isSet) {
        obj.insert(QString("foodPreparationAndServingAdditionalSafetyException"), ::OpenAPI::toJsonValue(m_food_preparation_and_serving_additional_safety_exception));
    }
    if (m_individual_packaged_meals_isSet) {
        obj.insert(QString("individualPackagedMeals"), ::OpenAPI::toJsonValue(m_individual_packaged_meals));
    }
    if (m_individual_packaged_meals_exception_isSet) {
        obj.insert(QString("individualPackagedMealsException"), ::OpenAPI::toJsonValue(m_individual_packaged_meals_exception));
    }
    if (m_single_use_food_menus_isSet) {
        obj.insert(QString("singleUseFoodMenus"), ::OpenAPI::toJsonValue(m_single_use_food_menus));
    }
    if (m_single_use_food_menus_exception_isSet) {
        obj.insert(QString("singleUseFoodMenusException"), ::OpenAPI::toJsonValue(m_single_use_food_menus_exception));
    }
    return obj;
}

bool OAIIncreasedFoodSafety::isDiningAreasAdditionalSanitation() const {
    return m_dining_areas_additional_sanitation;
}
void OAIIncreasedFoodSafety::setDiningAreasAdditionalSanitation(const bool &dining_areas_additional_sanitation) {
    m_dining_areas_additional_sanitation = dining_areas_additional_sanitation;
    m_dining_areas_additional_sanitation_isSet = true;
}

bool OAIIncreasedFoodSafety::is_dining_areas_additional_sanitation_Set() const{
    return m_dining_areas_additional_sanitation_isSet;
}

bool OAIIncreasedFoodSafety::is_dining_areas_additional_sanitation_Valid() const{
    return m_dining_areas_additional_sanitation_isValid;
}

QString OAIIncreasedFoodSafety::getDiningAreasAdditionalSanitationException() const {
    return m_dining_areas_additional_sanitation_exception;
}
void OAIIncreasedFoodSafety::setDiningAreasAdditionalSanitationException(const QString &dining_areas_additional_sanitation_exception) {
    m_dining_areas_additional_sanitation_exception = dining_areas_additional_sanitation_exception;
    m_dining_areas_additional_sanitation_exception_isSet = true;
}

bool OAIIncreasedFoodSafety::is_dining_areas_additional_sanitation_exception_Set() const{
    return m_dining_areas_additional_sanitation_exception_isSet;
}

bool OAIIncreasedFoodSafety::is_dining_areas_additional_sanitation_exception_Valid() const{
    return m_dining_areas_additional_sanitation_exception_isValid;
}

bool OAIIncreasedFoodSafety::isDisposableFlatware() const {
    return m_disposable_flatware;
}
void OAIIncreasedFoodSafety::setDisposableFlatware(const bool &disposable_flatware) {
    m_disposable_flatware = disposable_flatware;
    m_disposable_flatware_isSet = true;
}

bool OAIIncreasedFoodSafety::is_disposable_flatware_Set() const{
    return m_disposable_flatware_isSet;
}

bool OAIIncreasedFoodSafety::is_disposable_flatware_Valid() const{
    return m_disposable_flatware_isValid;
}

QString OAIIncreasedFoodSafety::getDisposableFlatwareException() const {
    return m_disposable_flatware_exception;
}
void OAIIncreasedFoodSafety::setDisposableFlatwareException(const QString &disposable_flatware_exception) {
    m_disposable_flatware_exception = disposable_flatware_exception;
    m_disposable_flatware_exception_isSet = true;
}

bool OAIIncreasedFoodSafety::is_disposable_flatware_exception_Set() const{
    return m_disposable_flatware_exception_isSet;
}

bool OAIIncreasedFoodSafety::is_disposable_flatware_exception_Valid() const{
    return m_disposable_flatware_exception_isValid;
}

bool OAIIncreasedFoodSafety::isFoodPreparationAndServingAdditionalSafety() const {
    return m_food_preparation_and_serving_additional_safety;
}
void OAIIncreasedFoodSafety::setFoodPreparationAndServingAdditionalSafety(const bool &food_preparation_and_serving_additional_safety) {
    m_food_preparation_and_serving_additional_safety = food_preparation_and_serving_additional_safety;
    m_food_preparation_and_serving_additional_safety_isSet = true;
}

bool OAIIncreasedFoodSafety::is_food_preparation_and_serving_additional_safety_Set() const{
    return m_food_preparation_and_serving_additional_safety_isSet;
}

bool OAIIncreasedFoodSafety::is_food_preparation_and_serving_additional_safety_Valid() const{
    return m_food_preparation_and_serving_additional_safety_isValid;
}

QString OAIIncreasedFoodSafety::getFoodPreparationAndServingAdditionalSafetyException() const {
    return m_food_preparation_and_serving_additional_safety_exception;
}
void OAIIncreasedFoodSafety::setFoodPreparationAndServingAdditionalSafetyException(const QString &food_preparation_and_serving_additional_safety_exception) {
    m_food_preparation_and_serving_additional_safety_exception = food_preparation_and_serving_additional_safety_exception;
    m_food_preparation_and_serving_additional_safety_exception_isSet = true;
}

bool OAIIncreasedFoodSafety::is_food_preparation_and_serving_additional_safety_exception_Set() const{
    return m_food_preparation_and_serving_additional_safety_exception_isSet;
}

bool OAIIncreasedFoodSafety::is_food_preparation_and_serving_additional_safety_exception_Valid() const{
    return m_food_preparation_and_serving_additional_safety_exception_isValid;
}

bool OAIIncreasedFoodSafety::isIndividualPackagedMeals() const {
    return m_individual_packaged_meals;
}
void OAIIncreasedFoodSafety::setIndividualPackagedMeals(const bool &individual_packaged_meals) {
    m_individual_packaged_meals = individual_packaged_meals;
    m_individual_packaged_meals_isSet = true;
}

bool OAIIncreasedFoodSafety::is_individual_packaged_meals_Set() const{
    return m_individual_packaged_meals_isSet;
}

bool OAIIncreasedFoodSafety::is_individual_packaged_meals_Valid() const{
    return m_individual_packaged_meals_isValid;
}

QString OAIIncreasedFoodSafety::getIndividualPackagedMealsException() const {
    return m_individual_packaged_meals_exception;
}
void OAIIncreasedFoodSafety::setIndividualPackagedMealsException(const QString &individual_packaged_meals_exception) {
    m_individual_packaged_meals_exception = individual_packaged_meals_exception;
    m_individual_packaged_meals_exception_isSet = true;
}

bool OAIIncreasedFoodSafety::is_individual_packaged_meals_exception_Set() const{
    return m_individual_packaged_meals_exception_isSet;
}

bool OAIIncreasedFoodSafety::is_individual_packaged_meals_exception_Valid() const{
    return m_individual_packaged_meals_exception_isValid;
}

bool OAIIncreasedFoodSafety::isSingleUseFoodMenus() const {
    return m_single_use_food_menus;
}
void OAIIncreasedFoodSafety::setSingleUseFoodMenus(const bool &single_use_food_menus) {
    m_single_use_food_menus = single_use_food_menus;
    m_single_use_food_menus_isSet = true;
}

bool OAIIncreasedFoodSafety::is_single_use_food_menus_Set() const{
    return m_single_use_food_menus_isSet;
}

bool OAIIncreasedFoodSafety::is_single_use_food_menus_Valid() const{
    return m_single_use_food_menus_isValid;
}

QString OAIIncreasedFoodSafety::getSingleUseFoodMenusException() const {
    return m_single_use_food_menus_exception;
}
void OAIIncreasedFoodSafety::setSingleUseFoodMenusException(const QString &single_use_food_menus_exception) {
    m_single_use_food_menus_exception = single_use_food_menus_exception;
    m_single_use_food_menus_exception_isSet = true;
}

bool OAIIncreasedFoodSafety::is_single_use_food_menus_exception_Set() const{
    return m_single_use_food_menus_exception_isSet;
}

bool OAIIncreasedFoodSafety::is_single_use_food_menus_exception_Valid() const{
    return m_single_use_food_menus_exception_isValid;
}

bool OAIIncreasedFoodSafety::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dining_areas_additional_sanitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dining_areas_additional_sanitation_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposable_flatware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposable_flatware_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_preparation_and_serving_additional_safety_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_preparation_and_serving_additional_safety_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_packaged_meals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_packaged_meals_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use_food_menus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use_food_menus_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncreasedFoodSafety::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
