/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHousekeeping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHousekeeping::OAIHousekeeping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHousekeeping::OAIHousekeeping() {
    this->initializeModel();
}

OAIHousekeeping::~OAIHousekeeping() {}

void OAIHousekeeping::initializeModel() {

    m_daily_housekeeping_isSet = false;
    m_daily_housekeeping_isValid = false;

    m_daily_housekeeping_exception_isSet = false;
    m_daily_housekeeping_exception_isValid = false;

    m_housekeeping_available_isSet = false;
    m_housekeeping_available_isValid = false;

    m_housekeeping_available_exception_isSet = false;
    m_housekeeping_available_exception_isValid = false;

    m_turndown_service_isSet = false;
    m_turndown_service_isValid = false;

    m_turndown_service_exception_isSet = false;
    m_turndown_service_exception_isValid = false;
}

void OAIHousekeeping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHousekeeping::fromJsonObject(QJsonObject json) {

    m_daily_housekeeping_isValid = ::OpenAPI::fromJsonValue(m_daily_housekeeping, json[QString("dailyHousekeeping")]);
    m_daily_housekeeping_isSet = !json[QString("dailyHousekeeping")].isNull() && m_daily_housekeeping_isValid;

    m_daily_housekeeping_exception_isValid = ::OpenAPI::fromJsonValue(m_daily_housekeeping_exception, json[QString("dailyHousekeepingException")]);
    m_daily_housekeeping_exception_isSet = !json[QString("dailyHousekeepingException")].isNull() && m_daily_housekeeping_exception_isValid;

    m_housekeeping_available_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_available, json[QString("housekeepingAvailable")]);
    m_housekeeping_available_isSet = !json[QString("housekeepingAvailable")].isNull() && m_housekeeping_available_isValid;

    m_housekeeping_available_exception_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_available_exception, json[QString("housekeepingAvailableException")]);
    m_housekeeping_available_exception_isSet = !json[QString("housekeepingAvailableException")].isNull() && m_housekeeping_available_exception_isValid;

    m_turndown_service_isValid = ::OpenAPI::fromJsonValue(m_turndown_service, json[QString("turndownService")]);
    m_turndown_service_isSet = !json[QString("turndownService")].isNull() && m_turndown_service_isValid;

    m_turndown_service_exception_isValid = ::OpenAPI::fromJsonValue(m_turndown_service_exception, json[QString("turndownServiceException")]);
    m_turndown_service_exception_isSet = !json[QString("turndownServiceException")].isNull() && m_turndown_service_exception_isValid;
}

QString OAIHousekeeping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHousekeeping::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_housekeeping_isSet) {
        obj.insert(QString("dailyHousekeeping"), ::OpenAPI::toJsonValue(m_daily_housekeeping));
    }
    if (m_daily_housekeeping_exception_isSet) {
        obj.insert(QString("dailyHousekeepingException"), ::OpenAPI::toJsonValue(m_daily_housekeeping_exception));
    }
    if (m_housekeeping_available_isSet) {
        obj.insert(QString("housekeepingAvailable"), ::OpenAPI::toJsonValue(m_housekeeping_available));
    }
    if (m_housekeeping_available_exception_isSet) {
        obj.insert(QString("housekeepingAvailableException"), ::OpenAPI::toJsonValue(m_housekeeping_available_exception));
    }
    if (m_turndown_service_isSet) {
        obj.insert(QString("turndownService"), ::OpenAPI::toJsonValue(m_turndown_service));
    }
    if (m_turndown_service_exception_isSet) {
        obj.insert(QString("turndownServiceException"), ::OpenAPI::toJsonValue(m_turndown_service_exception));
    }
    return obj;
}

bool OAIHousekeeping::isDailyHousekeeping() const {
    return m_daily_housekeeping;
}
void OAIHousekeeping::setDailyHousekeeping(const bool &daily_housekeeping) {
    m_daily_housekeeping = daily_housekeeping;
    m_daily_housekeeping_isSet = true;
}

bool OAIHousekeeping::is_daily_housekeeping_Set() const{
    return m_daily_housekeeping_isSet;
}

bool OAIHousekeeping::is_daily_housekeeping_Valid() const{
    return m_daily_housekeeping_isValid;
}

QString OAIHousekeeping::getDailyHousekeepingException() const {
    return m_daily_housekeeping_exception;
}
void OAIHousekeeping::setDailyHousekeepingException(const QString &daily_housekeeping_exception) {
    m_daily_housekeeping_exception = daily_housekeeping_exception;
    m_daily_housekeeping_exception_isSet = true;
}

bool OAIHousekeeping::is_daily_housekeeping_exception_Set() const{
    return m_daily_housekeeping_exception_isSet;
}

bool OAIHousekeeping::is_daily_housekeeping_exception_Valid() const{
    return m_daily_housekeeping_exception_isValid;
}

bool OAIHousekeeping::isHousekeepingAvailable() const {
    return m_housekeeping_available;
}
void OAIHousekeeping::setHousekeepingAvailable(const bool &housekeeping_available) {
    m_housekeeping_available = housekeeping_available;
    m_housekeeping_available_isSet = true;
}

bool OAIHousekeeping::is_housekeeping_available_Set() const{
    return m_housekeeping_available_isSet;
}

bool OAIHousekeeping::is_housekeeping_available_Valid() const{
    return m_housekeeping_available_isValid;
}

QString OAIHousekeeping::getHousekeepingAvailableException() const {
    return m_housekeeping_available_exception;
}
void OAIHousekeeping::setHousekeepingAvailableException(const QString &housekeeping_available_exception) {
    m_housekeeping_available_exception = housekeeping_available_exception;
    m_housekeeping_available_exception_isSet = true;
}

bool OAIHousekeeping::is_housekeeping_available_exception_Set() const{
    return m_housekeeping_available_exception_isSet;
}

bool OAIHousekeeping::is_housekeeping_available_exception_Valid() const{
    return m_housekeeping_available_exception_isValid;
}

bool OAIHousekeeping::isTurndownService() const {
    return m_turndown_service;
}
void OAIHousekeeping::setTurndownService(const bool &turndown_service) {
    m_turndown_service = turndown_service;
    m_turndown_service_isSet = true;
}

bool OAIHousekeeping::is_turndown_service_Set() const{
    return m_turndown_service_isSet;
}

bool OAIHousekeeping::is_turndown_service_Valid() const{
    return m_turndown_service_isValid;
}

QString OAIHousekeeping::getTurndownServiceException() const {
    return m_turndown_service_exception;
}
void OAIHousekeeping::setTurndownServiceException(const QString &turndown_service_exception) {
    m_turndown_service_exception = turndown_service_exception;
    m_turndown_service_exception_isSet = true;
}

bool OAIHousekeeping::is_turndown_service_exception_Set() const{
    return m_turndown_service_exception_isSet;
}

bool OAIHousekeeping::is_turndown_service_exception_Valid() const{
    return m_turndown_service_exception_isValid;
}

bool OAIHousekeeping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_housekeeping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_housekeeping_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turndown_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turndown_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHousekeeping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
