/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISustainableSourcing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISustainableSourcing::OAISustainableSourcing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISustainableSourcing::OAISustainableSourcing() {
    this->initializeModel();
}

OAISustainableSourcing::~OAISustainableSourcing() {}

void OAISustainableSourcing::initializeModel() {

    m_eco_friendly_toiletries_isSet = false;
    m_eco_friendly_toiletries_isValid = false;

    m_eco_friendly_toiletries_exception_isSet = false;
    m_eco_friendly_toiletries_exception_isValid = false;

    m_locally_sourced_food_and_beverages_isSet = false;
    m_locally_sourced_food_and_beverages_isValid = false;

    m_locally_sourced_food_and_beverages_exception_isSet = false;
    m_locally_sourced_food_and_beverages_exception_isValid = false;

    m_organic_cage_free_eggs_isSet = false;
    m_organic_cage_free_eggs_isValid = false;

    m_organic_cage_free_eggs_exception_isSet = false;
    m_organic_cage_free_eggs_exception_isValid = false;

    m_organic_food_and_beverages_isSet = false;
    m_organic_food_and_beverages_isValid = false;

    m_organic_food_and_beverages_exception_isSet = false;
    m_organic_food_and_beverages_exception_isValid = false;

    m_responsible_purchasing_policy_isSet = false;
    m_responsible_purchasing_policy_isValid = false;

    m_responsible_purchasing_policy_exception_isSet = false;
    m_responsible_purchasing_policy_exception_isValid = false;

    m_responsibly_sources_seafood_isSet = false;
    m_responsibly_sources_seafood_isValid = false;

    m_responsibly_sources_seafood_exception_isSet = false;
    m_responsibly_sources_seafood_exception_isValid = false;

    m_vegan_meals_isSet = false;
    m_vegan_meals_isValid = false;

    m_vegan_meals_exception_isSet = false;
    m_vegan_meals_exception_isValid = false;

    m_vegetarian_meals_isSet = false;
    m_vegetarian_meals_isValid = false;

    m_vegetarian_meals_exception_isSet = false;
    m_vegetarian_meals_exception_isValid = false;
}

void OAISustainableSourcing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISustainableSourcing::fromJsonObject(QJsonObject json) {

    m_eco_friendly_toiletries_isValid = ::OpenAPI::fromJsonValue(m_eco_friendly_toiletries, json[QString("ecoFriendlyToiletries")]);
    m_eco_friendly_toiletries_isSet = !json[QString("ecoFriendlyToiletries")].isNull() && m_eco_friendly_toiletries_isValid;

    m_eco_friendly_toiletries_exception_isValid = ::OpenAPI::fromJsonValue(m_eco_friendly_toiletries_exception, json[QString("ecoFriendlyToiletriesException")]);
    m_eco_friendly_toiletries_exception_isSet = !json[QString("ecoFriendlyToiletriesException")].isNull() && m_eco_friendly_toiletries_exception_isValid;

    m_locally_sourced_food_and_beverages_isValid = ::OpenAPI::fromJsonValue(m_locally_sourced_food_and_beverages, json[QString("locallySourcedFoodAndBeverages")]);
    m_locally_sourced_food_and_beverages_isSet = !json[QString("locallySourcedFoodAndBeverages")].isNull() && m_locally_sourced_food_and_beverages_isValid;

    m_locally_sourced_food_and_beverages_exception_isValid = ::OpenAPI::fromJsonValue(m_locally_sourced_food_and_beverages_exception, json[QString("locallySourcedFoodAndBeveragesException")]);
    m_locally_sourced_food_and_beverages_exception_isSet = !json[QString("locallySourcedFoodAndBeveragesException")].isNull() && m_locally_sourced_food_and_beverages_exception_isValid;

    m_organic_cage_free_eggs_isValid = ::OpenAPI::fromJsonValue(m_organic_cage_free_eggs, json[QString("organicCageFreeEggs")]);
    m_organic_cage_free_eggs_isSet = !json[QString("organicCageFreeEggs")].isNull() && m_organic_cage_free_eggs_isValid;

    m_organic_cage_free_eggs_exception_isValid = ::OpenAPI::fromJsonValue(m_organic_cage_free_eggs_exception, json[QString("organicCageFreeEggsException")]);
    m_organic_cage_free_eggs_exception_isSet = !json[QString("organicCageFreeEggsException")].isNull() && m_organic_cage_free_eggs_exception_isValid;

    m_organic_food_and_beverages_isValid = ::OpenAPI::fromJsonValue(m_organic_food_and_beverages, json[QString("organicFoodAndBeverages")]);
    m_organic_food_and_beverages_isSet = !json[QString("organicFoodAndBeverages")].isNull() && m_organic_food_and_beverages_isValid;

    m_organic_food_and_beverages_exception_isValid = ::OpenAPI::fromJsonValue(m_organic_food_and_beverages_exception, json[QString("organicFoodAndBeveragesException")]);
    m_organic_food_and_beverages_exception_isSet = !json[QString("organicFoodAndBeveragesException")].isNull() && m_organic_food_and_beverages_exception_isValid;

    m_responsible_purchasing_policy_isValid = ::OpenAPI::fromJsonValue(m_responsible_purchasing_policy, json[QString("responsiblePurchasingPolicy")]);
    m_responsible_purchasing_policy_isSet = !json[QString("responsiblePurchasingPolicy")].isNull() && m_responsible_purchasing_policy_isValid;

    m_responsible_purchasing_policy_exception_isValid = ::OpenAPI::fromJsonValue(m_responsible_purchasing_policy_exception, json[QString("responsiblePurchasingPolicyException")]);
    m_responsible_purchasing_policy_exception_isSet = !json[QString("responsiblePurchasingPolicyException")].isNull() && m_responsible_purchasing_policy_exception_isValid;

    m_responsibly_sources_seafood_isValid = ::OpenAPI::fromJsonValue(m_responsibly_sources_seafood, json[QString("responsiblySourcesSeafood")]);
    m_responsibly_sources_seafood_isSet = !json[QString("responsiblySourcesSeafood")].isNull() && m_responsibly_sources_seafood_isValid;

    m_responsibly_sources_seafood_exception_isValid = ::OpenAPI::fromJsonValue(m_responsibly_sources_seafood_exception, json[QString("responsiblySourcesSeafoodException")]);
    m_responsibly_sources_seafood_exception_isSet = !json[QString("responsiblySourcesSeafoodException")].isNull() && m_responsibly_sources_seafood_exception_isValid;

    m_vegan_meals_isValid = ::OpenAPI::fromJsonValue(m_vegan_meals, json[QString("veganMeals")]);
    m_vegan_meals_isSet = !json[QString("veganMeals")].isNull() && m_vegan_meals_isValid;

    m_vegan_meals_exception_isValid = ::OpenAPI::fromJsonValue(m_vegan_meals_exception, json[QString("veganMealsException")]);
    m_vegan_meals_exception_isSet = !json[QString("veganMealsException")].isNull() && m_vegan_meals_exception_isValid;

    m_vegetarian_meals_isValid = ::OpenAPI::fromJsonValue(m_vegetarian_meals, json[QString("vegetarianMeals")]);
    m_vegetarian_meals_isSet = !json[QString("vegetarianMeals")].isNull() && m_vegetarian_meals_isValid;

    m_vegetarian_meals_exception_isValid = ::OpenAPI::fromJsonValue(m_vegetarian_meals_exception, json[QString("vegetarianMealsException")]);
    m_vegetarian_meals_exception_isSet = !json[QString("vegetarianMealsException")].isNull() && m_vegetarian_meals_exception_isValid;
}

QString OAISustainableSourcing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISustainableSourcing::asJsonObject() const {
    QJsonObject obj;
    if (m_eco_friendly_toiletries_isSet) {
        obj.insert(QString("ecoFriendlyToiletries"), ::OpenAPI::toJsonValue(m_eco_friendly_toiletries));
    }
    if (m_eco_friendly_toiletries_exception_isSet) {
        obj.insert(QString("ecoFriendlyToiletriesException"), ::OpenAPI::toJsonValue(m_eco_friendly_toiletries_exception));
    }
    if (m_locally_sourced_food_and_beverages_isSet) {
        obj.insert(QString("locallySourcedFoodAndBeverages"), ::OpenAPI::toJsonValue(m_locally_sourced_food_and_beverages));
    }
    if (m_locally_sourced_food_and_beverages_exception_isSet) {
        obj.insert(QString("locallySourcedFoodAndBeveragesException"), ::OpenAPI::toJsonValue(m_locally_sourced_food_and_beverages_exception));
    }
    if (m_organic_cage_free_eggs_isSet) {
        obj.insert(QString("organicCageFreeEggs"), ::OpenAPI::toJsonValue(m_organic_cage_free_eggs));
    }
    if (m_organic_cage_free_eggs_exception_isSet) {
        obj.insert(QString("organicCageFreeEggsException"), ::OpenAPI::toJsonValue(m_organic_cage_free_eggs_exception));
    }
    if (m_organic_food_and_beverages_isSet) {
        obj.insert(QString("organicFoodAndBeverages"), ::OpenAPI::toJsonValue(m_organic_food_and_beverages));
    }
    if (m_organic_food_and_beverages_exception_isSet) {
        obj.insert(QString("organicFoodAndBeveragesException"), ::OpenAPI::toJsonValue(m_organic_food_and_beverages_exception));
    }
    if (m_responsible_purchasing_policy_isSet) {
        obj.insert(QString("responsiblePurchasingPolicy"), ::OpenAPI::toJsonValue(m_responsible_purchasing_policy));
    }
    if (m_responsible_purchasing_policy_exception_isSet) {
        obj.insert(QString("responsiblePurchasingPolicyException"), ::OpenAPI::toJsonValue(m_responsible_purchasing_policy_exception));
    }
    if (m_responsibly_sources_seafood_isSet) {
        obj.insert(QString("responsiblySourcesSeafood"), ::OpenAPI::toJsonValue(m_responsibly_sources_seafood));
    }
    if (m_responsibly_sources_seafood_exception_isSet) {
        obj.insert(QString("responsiblySourcesSeafoodException"), ::OpenAPI::toJsonValue(m_responsibly_sources_seafood_exception));
    }
    if (m_vegan_meals_isSet) {
        obj.insert(QString("veganMeals"), ::OpenAPI::toJsonValue(m_vegan_meals));
    }
    if (m_vegan_meals_exception_isSet) {
        obj.insert(QString("veganMealsException"), ::OpenAPI::toJsonValue(m_vegan_meals_exception));
    }
    if (m_vegetarian_meals_isSet) {
        obj.insert(QString("vegetarianMeals"), ::OpenAPI::toJsonValue(m_vegetarian_meals));
    }
    if (m_vegetarian_meals_exception_isSet) {
        obj.insert(QString("vegetarianMealsException"), ::OpenAPI::toJsonValue(m_vegetarian_meals_exception));
    }
    return obj;
}

bool OAISustainableSourcing::isEcoFriendlyToiletries() const {
    return m_eco_friendly_toiletries;
}
void OAISustainableSourcing::setEcoFriendlyToiletries(const bool &eco_friendly_toiletries) {
    m_eco_friendly_toiletries = eco_friendly_toiletries;
    m_eco_friendly_toiletries_isSet = true;
}

bool OAISustainableSourcing::is_eco_friendly_toiletries_Set() const{
    return m_eco_friendly_toiletries_isSet;
}

bool OAISustainableSourcing::is_eco_friendly_toiletries_Valid() const{
    return m_eco_friendly_toiletries_isValid;
}

QString OAISustainableSourcing::getEcoFriendlyToiletriesException() const {
    return m_eco_friendly_toiletries_exception;
}
void OAISustainableSourcing::setEcoFriendlyToiletriesException(const QString &eco_friendly_toiletries_exception) {
    m_eco_friendly_toiletries_exception = eco_friendly_toiletries_exception;
    m_eco_friendly_toiletries_exception_isSet = true;
}

bool OAISustainableSourcing::is_eco_friendly_toiletries_exception_Set() const{
    return m_eco_friendly_toiletries_exception_isSet;
}

bool OAISustainableSourcing::is_eco_friendly_toiletries_exception_Valid() const{
    return m_eco_friendly_toiletries_exception_isValid;
}

bool OAISustainableSourcing::isLocallySourcedFoodAndBeverages() const {
    return m_locally_sourced_food_and_beverages;
}
void OAISustainableSourcing::setLocallySourcedFoodAndBeverages(const bool &locally_sourced_food_and_beverages) {
    m_locally_sourced_food_and_beverages = locally_sourced_food_and_beverages;
    m_locally_sourced_food_and_beverages_isSet = true;
}

bool OAISustainableSourcing::is_locally_sourced_food_and_beverages_Set() const{
    return m_locally_sourced_food_and_beverages_isSet;
}

bool OAISustainableSourcing::is_locally_sourced_food_and_beverages_Valid() const{
    return m_locally_sourced_food_and_beverages_isValid;
}

QString OAISustainableSourcing::getLocallySourcedFoodAndBeveragesException() const {
    return m_locally_sourced_food_and_beverages_exception;
}
void OAISustainableSourcing::setLocallySourcedFoodAndBeveragesException(const QString &locally_sourced_food_and_beverages_exception) {
    m_locally_sourced_food_and_beverages_exception = locally_sourced_food_and_beverages_exception;
    m_locally_sourced_food_and_beverages_exception_isSet = true;
}

bool OAISustainableSourcing::is_locally_sourced_food_and_beverages_exception_Set() const{
    return m_locally_sourced_food_and_beverages_exception_isSet;
}

bool OAISustainableSourcing::is_locally_sourced_food_and_beverages_exception_Valid() const{
    return m_locally_sourced_food_and_beverages_exception_isValid;
}

bool OAISustainableSourcing::isOrganicCageFreeEggs() const {
    return m_organic_cage_free_eggs;
}
void OAISustainableSourcing::setOrganicCageFreeEggs(const bool &organic_cage_free_eggs) {
    m_organic_cage_free_eggs = organic_cage_free_eggs;
    m_organic_cage_free_eggs_isSet = true;
}

bool OAISustainableSourcing::is_organic_cage_free_eggs_Set() const{
    return m_organic_cage_free_eggs_isSet;
}

bool OAISustainableSourcing::is_organic_cage_free_eggs_Valid() const{
    return m_organic_cage_free_eggs_isValid;
}

QString OAISustainableSourcing::getOrganicCageFreeEggsException() const {
    return m_organic_cage_free_eggs_exception;
}
void OAISustainableSourcing::setOrganicCageFreeEggsException(const QString &organic_cage_free_eggs_exception) {
    m_organic_cage_free_eggs_exception = organic_cage_free_eggs_exception;
    m_organic_cage_free_eggs_exception_isSet = true;
}

bool OAISustainableSourcing::is_organic_cage_free_eggs_exception_Set() const{
    return m_organic_cage_free_eggs_exception_isSet;
}

bool OAISustainableSourcing::is_organic_cage_free_eggs_exception_Valid() const{
    return m_organic_cage_free_eggs_exception_isValid;
}

bool OAISustainableSourcing::isOrganicFoodAndBeverages() const {
    return m_organic_food_and_beverages;
}
void OAISustainableSourcing::setOrganicFoodAndBeverages(const bool &organic_food_and_beverages) {
    m_organic_food_and_beverages = organic_food_and_beverages;
    m_organic_food_and_beverages_isSet = true;
}

bool OAISustainableSourcing::is_organic_food_and_beverages_Set() const{
    return m_organic_food_and_beverages_isSet;
}

bool OAISustainableSourcing::is_organic_food_and_beverages_Valid() const{
    return m_organic_food_and_beverages_isValid;
}

QString OAISustainableSourcing::getOrganicFoodAndBeveragesException() const {
    return m_organic_food_and_beverages_exception;
}
void OAISustainableSourcing::setOrganicFoodAndBeveragesException(const QString &organic_food_and_beverages_exception) {
    m_organic_food_and_beverages_exception = organic_food_and_beverages_exception;
    m_organic_food_and_beverages_exception_isSet = true;
}

bool OAISustainableSourcing::is_organic_food_and_beverages_exception_Set() const{
    return m_organic_food_and_beverages_exception_isSet;
}

bool OAISustainableSourcing::is_organic_food_and_beverages_exception_Valid() const{
    return m_organic_food_and_beverages_exception_isValid;
}

bool OAISustainableSourcing::isResponsiblePurchasingPolicy() const {
    return m_responsible_purchasing_policy;
}
void OAISustainableSourcing::setResponsiblePurchasingPolicy(const bool &responsible_purchasing_policy) {
    m_responsible_purchasing_policy = responsible_purchasing_policy;
    m_responsible_purchasing_policy_isSet = true;
}

bool OAISustainableSourcing::is_responsible_purchasing_policy_Set() const{
    return m_responsible_purchasing_policy_isSet;
}

bool OAISustainableSourcing::is_responsible_purchasing_policy_Valid() const{
    return m_responsible_purchasing_policy_isValid;
}

QString OAISustainableSourcing::getResponsiblePurchasingPolicyException() const {
    return m_responsible_purchasing_policy_exception;
}
void OAISustainableSourcing::setResponsiblePurchasingPolicyException(const QString &responsible_purchasing_policy_exception) {
    m_responsible_purchasing_policy_exception = responsible_purchasing_policy_exception;
    m_responsible_purchasing_policy_exception_isSet = true;
}

bool OAISustainableSourcing::is_responsible_purchasing_policy_exception_Set() const{
    return m_responsible_purchasing_policy_exception_isSet;
}

bool OAISustainableSourcing::is_responsible_purchasing_policy_exception_Valid() const{
    return m_responsible_purchasing_policy_exception_isValid;
}

bool OAISustainableSourcing::isResponsiblySourcesSeafood() const {
    return m_responsibly_sources_seafood;
}
void OAISustainableSourcing::setResponsiblySourcesSeafood(const bool &responsibly_sources_seafood) {
    m_responsibly_sources_seafood = responsibly_sources_seafood;
    m_responsibly_sources_seafood_isSet = true;
}

bool OAISustainableSourcing::is_responsibly_sources_seafood_Set() const{
    return m_responsibly_sources_seafood_isSet;
}

bool OAISustainableSourcing::is_responsibly_sources_seafood_Valid() const{
    return m_responsibly_sources_seafood_isValid;
}

QString OAISustainableSourcing::getResponsiblySourcesSeafoodException() const {
    return m_responsibly_sources_seafood_exception;
}
void OAISustainableSourcing::setResponsiblySourcesSeafoodException(const QString &responsibly_sources_seafood_exception) {
    m_responsibly_sources_seafood_exception = responsibly_sources_seafood_exception;
    m_responsibly_sources_seafood_exception_isSet = true;
}

bool OAISustainableSourcing::is_responsibly_sources_seafood_exception_Set() const{
    return m_responsibly_sources_seafood_exception_isSet;
}

bool OAISustainableSourcing::is_responsibly_sources_seafood_exception_Valid() const{
    return m_responsibly_sources_seafood_exception_isValid;
}

bool OAISustainableSourcing::isVeganMeals() const {
    return m_vegan_meals;
}
void OAISustainableSourcing::setVeganMeals(const bool &vegan_meals) {
    m_vegan_meals = vegan_meals;
    m_vegan_meals_isSet = true;
}

bool OAISustainableSourcing::is_vegan_meals_Set() const{
    return m_vegan_meals_isSet;
}

bool OAISustainableSourcing::is_vegan_meals_Valid() const{
    return m_vegan_meals_isValid;
}

QString OAISustainableSourcing::getVeganMealsException() const {
    return m_vegan_meals_exception;
}
void OAISustainableSourcing::setVeganMealsException(const QString &vegan_meals_exception) {
    m_vegan_meals_exception = vegan_meals_exception;
    m_vegan_meals_exception_isSet = true;
}

bool OAISustainableSourcing::is_vegan_meals_exception_Set() const{
    return m_vegan_meals_exception_isSet;
}

bool OAISustainableSourcing::is_vegan_meals_exception_Valid() const{
    return m_vegan_meals_exception_isValid;
}

bool OAISustainableSourcing::isVegetarianMeals() const {
    return m_vegetarian_meals;
}
void OAISustainableSourcing::setVegetarianMeals(const bool &vegetarian_meals) {
    m_vegetarian_meals = vegetarian_meals;
    m_vegetarian_meals_isSet = true;
}

bool OAISustainableSourcing::is_vegetarian_meals_Set() const{
    return m_vegetarian_meals_isSet;
}

bool OAISustainableSourcing::is_vegetarian_meals_Valid() const{
    return m_vegetarian_meals_isValid;
}

QString OAISustainableSourcing::getVegetarianMealsException() const {
    return m_vegetarian_meals_exception;
}
void OAISustainableSourcing::setVegetarianMealsException(const QString &vegetarian_meals_exception) {
    m_vegetarian_meals_exception = vegetarian_meals_exception;
    m_vegetarian_meals_exception_isSet = true;
}

bool OAISustainableSourcing::is_vegetarian_meals_exception_Set() const{
    return m_vegetarian_meals_exception_isSet;
}

bool OAISustainableSourcing::is_vegetarian_meals_exception_Valid() const{
    return m_vegetarian_meals_exception_isValid;
}

bool OAISustainableSourcing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eco_friendly_toiletries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_friendly_toiletries_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locally_sourced_food_and_beverages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locally_sourced_food_and_beverages_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_cage_free_eggs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_cage_free_eggs_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_food_and_beverages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organic_food_and_beverages_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_purchasing_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_purchasing_policy_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsibly_sources_seafood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsibly_sources_seafood_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegan_meals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegan_meals_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegetarian_meals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegetarian_meals_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISustainableSourcing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
