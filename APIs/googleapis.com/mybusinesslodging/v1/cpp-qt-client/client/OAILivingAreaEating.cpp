/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingAreaEating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingAreaEating::OAILivingAreaEating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingAreaEating::OAILivingAreaEating() {
    this->initializeModel();
}

OAILivingAreaEating::~OAILivingAreaEating() {}

void OAILivingAreaEating::initializeModel() {

    m_coffee_maker_isSet = false;
    m_coffee_maker_isValid = false;

    m_coffee_maker_exception_isSet = false;
    m_coffee_maker_exception_isValid = false;

    m_cookware_isSet = false;
    m_cookware_isValid = false;

    m_cookware_exception_isSet = false;
    m_cookware_exception_isValid = false;

    m_dishwasher_isSet = false;
    m_dishwasher_isValid = false;

    m_dishwasher_exception_isSet = false;
    m_dishwasher_exception_isValid = false;

    m_indoor_grill_isSet = false;
    m_indoor_grill_isValid = false;

    m_indoor_grill_exception_isSet = false;
    m_indoor_grill_exception_isValid = false;

    m_kettle_isSet = false;
    m_kettle_isValid = false;

    m_kettle_exception_isSet = false;
    m_kettle_exception_isValid = false;

    m_kitchen_available_isSet = false;
    m_kitchen_available_isValid = false;

    m_kitchen_available_exception_isSet = false;
    m_kitchen_available_exception_isValid = false;

    m_microwave_isSet = false;
    m_microwave_isValid = false;

    m_microwave_exception_isSet = false;
    m_microwave_exception_isValid = false;

    m_minibar_isSet = false;
    m_minibar_isValid = false;

    m_minibar_exception_isSet = false;
    m_minibar_exception_isValid = false;

    m_outdoor_grill_isSet = false;
    m_outdoor_grill_isValid = false;

    m_outdoor_grill_exception_isSet = false;
    m_outdoor_grill_exception_isValid = false;

    m_oven_isSet = false;
    m_oven_isValid = false;

    m_oven_exception_isSet = false;
    m_oven_exception_isValid = false;

    m_refrigerator_isSet = false;
    m_refrigerator_isValid = false;

    m_refrigerator_exception_isSet = false;
    m_refrigerator_exception_isValid = false;

    m_sink_isSet = false;
    m_sink_isValid = false;

    m_sink_exception_isSet = false;
    m_sink_exception_isValid = false;

    m_snackbar_isSet = false;
    m_snackbar_isValid = false;

    m_snackbar_exception_isSet = false;
    m_snackbar_exception_isValid = false;

    m_stove_isSet = false;
    m_stove_isValid = false;

    m_stove_exception_isSet = false;
    m_stove_exception_isValid = false;

    m_tea_station_isSet = false;
    m_tea_station_isValid = false;

    m_tea_station_exception_isSet = false;
    m_tea_station_exception_isValid = false;

    m_toaster_isSet = false;
    m_toaster_isValid = false;

    m_toaster_exception_isSet = false;
    m_toaster_exception_isValid = false;
}

void OAILivingAreaEating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingAreaEating::fromJsonObject(QJsonObject json) {

    m_coffee_maker_isValid = ::OpenAPI::fromJsonValue(m_coffee_maker, json[QString("coffeeMaker")]);
    m_coffee_maker_isSet = !json[QString("coffeeMaker")].isNull() && m_coffee_maker_isValid;

    m_coffee_maker_exception_isValid = ::OpenAPI::fromJsonValue(m_coffee_maker_exception, json[QString("coffeeMakerException")]);
    m_coffee_maker_exception_isSet = !json[QString("coffeeMakerException")].isNull() && m_coffee_maker_exception_isValid;

    m_cookware_isValid = ::OpenAPI::fromJsonValue(m_cookware, json[QString("cookware")]);
    m_cookware_isSet = !json[QString("cookware")].isNull() && m_cookware_isValid;

    m_cookware_exception_isValid = ::OpenAPI::fromJsonValue(m_cookware_exception, json[QString("cookwareException")]);
    m_cookware_exception_isSet = !json[QString("cookwareException")].isNull() && m_cookware_exception_isValid;

    m_dishwasher_isValid = ::OpenAPI::fromJsonValue(m_dishwasher, json[QString("dishwasher")]);
    m_dishwasher_isSet = !json[QString("dishwasher")].isNull() && m_dishwasher_isValid;

    m_dishwasher_exception_isValid = ::OpenAPI::fromJsonValue(m_dishwasher_exception, json[QString("dishwasherException")]);
    m_dishwasher_exception_isSet = !json[QString("dishwasherException")].isNull() && m_dishwasher_exception_isValid;

    m_indoor_grill_isValid = ::OpenAPI::fromJsonValue(m_indoor_grill, json[QString("indoorGrill")]);
    m_indoor_grill_isSet = !json[QString("indoorGrill")].isNull() && m_indoor_grill_isValid;

    m_indoor_grill_exception_isValid = ::OpenAPI::fromJsonValue(m_indoor_grill_exception, json[QString("indoorGrillException")]);
    m_indoor_grill_exception_isSet = !json[QString("indoorGrillException")].isNull() && m_indoor_grill_exception_isValid;

    m_kettle_isValid = ::OpenAPI::fromJsonValue(m_kettle, json[QString("kettle")]);
    m_kettle_isSet = !json[QString("kettle")].isNull() && m_kettle_isValid;

    m_kettle_exception_isValid = ::OpenAPI::fromJsonValue(m_kettle_exception, json[QString("kettleException")]);
    m_kettle_exception_isSet = !json[QString("kettleException")].isNull() && m_kettle_exception_isValid;

    m_kitchen_available_isValid = ::OpenAPI::fromJsonValue(m_kitchen_available, json[QString("kitchenAvailable")]);
    m_kitchen_available_isSet = !json[QString("kitchenAvailable")].isNull() && m_kitchen_available_isValid;

    m_kitchen_available_exception_isValid = ::OpenAPI::fromJsonValue(m_kitchen_available_exception, json[QString("kitchenAvailableException")]);
    m_kitchen_available_exception_isSet = !json[QString("kitchenAvailableException")].isNull() && m_kitchen_available_exception_isValid;

    m_microwave_isValid = ::OpenAPI::fromJsonValue(m_microwave, json[QString("microwave")]);
    m_microwave_isSet = !json[QString("microwave")].isNull() && m_microwave_isValid;

    m_microwave_exception_isValid = ::OpenAPI::fromJsonValue(m_microwave_exception, json[QString("microwaveException")]);
    m_microwave_exception_isSet = !json[QString("microwaveException")].isNull() && m_microwave_exception_isValid;

    m_minibar_isValid = ::OpenAPI::fromJsonValue(m_minibar, json[QString("minibar")]);
    m_minibar_isSet = !json[QString("minibar")].isNull() && m_minibar_isValid;

    m_minibar_exception_isValid = ::OpenAPI::fromJsonValue(m_minibar_exception, json[QString("minibarException")]);
    m_minibar_exception_isSet = !json[QString("minibarException")].isNull() && m_minibar_exception_isValid;

    m_outdoor_grill_isValid = ::OpenAPI::fromJsonValue(m_outdoor_grill, json[QString("outdoorGrill")]);
    m_outdoor_grill_isSet = !json[QString("outdoorGrill")].isNull() && m_outdoor_grill_isValid;

    m_outdoor_grill_exception_isValid = ::OpenAPI::fromJsonValue(m_outdoor_grill_exception, json[QString("outdoorGrillException")]);
    m_outdoor_grill_exception_isSet = !json[QString("outdoorGrillException")].isNull() && m_outdoor_grill_exception_isValid;

    m_oven_isValid = ::OpenAPI::fromJsonValue(m_oven, json[QString("oven")]);
    m_oven_isSet = !json[QString("oven")].isNull() && m_oven_isValid;

    m_oven_exception_isValid = ::OpenAPI::fromJsonValue(m_oven_exception, json[QString("ovenException")]);
    m_oven_exception_isSet = !json[QString("ovenException")].isNull() && m_oven_exception_isValid;

    m_refrigerator_isValid = ::OpenAPI::fromJsonValue(m_refrigerator, json[QString("refrigerator")]);
    m_refrigerator_isSet = !json[QString("refrigerator")].isNull() && m_refrigerator_isValid;

    m_refrigerator_exception_isValid = ::OpenAPI::fromJsonValue(m_refrigerator_exception, json[QString("refrigeratorException")]);
    m_refrigerator_exception_isSet = !json[QString("refrigeratorException")].isNull() && m_refrigerator_exception_isValid;

    m_sink_isValid = ::OpenAPI::fromJsonValue(m_sink, json[QString("sink")]);
    m_sink_isSet = !json[QString("sink")].isNull() && m_sink_isValid;

    m_sink_exception_isValid = ::OpenAPI::fromJsonValue(m_sink_exception, json[QString("sinkException")]);
    m_sink_exception_isSet = !json[QString("sinkException")].isNull() && m_sink_exception_isValid;

    m_snackbar_isValid = ::OpenAPI::fromJsonValue(m_snackbar, json[QString("snackbar")]);
    m_snackbar_isSet = !json[QString("snackbar")].isNull() && m_snackbar_isValid;

    m_snackbar_exception_isValid = ::OpenAPI::fromJsonValue(m_snackbar_exception, json[QString("snackbarException")]);
    m_snackbar_exception_isSet = !json[QString("snackbarException")].isNull() && m_snackbar_exception_isValid;

    m_stove_isValid = ::OpenAPI::fromJsonValue(m_stove, json[QString("stove")]);
    m_stove_isSet = !json[QString("stove")].isNull() && m_stove_isValid;

    m_stove_exception_isValid = ::OpenAPI::fromJsonValue(m_stove_exception, json[QString("stoveException")]);
    m_stove_exception_isSet = !json[QString("stoveException")].isNull() && m_stove_exception_isValid;

    m_tea_station_isValid = ::OpenAPI::fromJsonValue(m_tea_station, json[QString("teaStation")]);
    m_tea_station_isSet = !json[QString("teaStation")].isNull() && m_tea_station_isValid;

    m_tea_station_exception_isValid = ::OpenAPI::fromJsonValue(m_tea_station_exception, json[QString("teaStationException")]);
    m_tea_station_exception_isSet = !json[QString("teaStationException")].isNull() && m_tea_station_exception_isValid;

    m_toaster_isValid = ::OpenAPI::fromJsonValue(m_toaster, json[QString("toaster")]);
    m_toaster_isSet = !json[QString("toaster")].isNull() && m_toaster_isValid;

    m_toaster_exception_isValid = ::OpenAPI::fromJsonValue(m_toaster_exception, json[QString("toasterException")]);
    m_toaster_exception_isSet = !json[QString("toasterException")].isNull() && m_toaster_exception_isValid;
}

QString OAILivingAreaEating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingAreaEating::asJsonObject() const {
    QJsonObject obj;
    if (m_coffee_maker_isSet) {
        obj.insert(QString("coffeeMaker"), ::OpenAPI::toJsonValue(m_coffee_maker));
    }
    if (m_coffee_maker_exception_isSet) {
        obj.insert(QString("coffeeMakerException"), ::OpenAPI::toJsonValue(m_coffee_maker_exception));
    }
    if (m_cookware_isSet) {
        obj.insert(QString("cookware"), ::OpenAPI::toJsonValue(m_cookware));
    }
    if (m_cookware_exception_isSet) {
        obj.insert(QString("cookwareException"), ::OpenAPI::toJsonValue(m_cookware_exception));
    }
    if (m_dishwasher_isSet) {
        obj.insert(QString("dishwasher"), ::OpenAPI::toJsonValue(m_dishwasher));
    }
    if (m_dishwasher_exception_isSet) {
        obj.insert(QString("dishwasherException"), ::OpenAPI::toJsonValue(m_dishwasher_exception));
    }
    if (m_indoor_grill_isSet) {
        obj.insert(QString("indoorGrill"), ::OpenAPI::toJsonValue(m_indoor_grill));
    }
    if (m_indoor_grill_exception_isSet) {
        obj.insert(QString("indoorGrillException"), ::OpenAPI::toJsonValue(m_indoor_grill_exception));
    }
    if (m_kettle_isSet) {
        obj.insert(QString("kettle"), ::OpenAPI::toJsonValue(m_kettle));
    }
    if (m_kettle_exception_isSet) {
        obj.insert(QString("kettleException"), ::OpenAPI::toJsonValue(m_kettle_exception));
    }
    if (m_kitchen_available_isSet) {
        obj.insert(QString("kitchenAvailable"), ::OpenAPI::toJsonValue(m_kitchen_available));
    }
    if (m_kitchen_available_exception_isSet) {
        obj.insert(QString("kitchenAvailableException"), ::OpenAPI::toJsonValue(m_kitchen_available_exception));
    }
    if (m_microwave_isSet) {
        obj.insert(QString("microwave"), ::OpenAPI::toJsonValue(m_microwave));
    }
    if (m_microwave_exception_isSet) {
        obj.insert(QString("microwaveException"), ::OpenAPI::toJsonValue(m_microwave_exception));
    }
    if (m_minibar_isSet) {
        obj.insert(QString("minibar"), ::OpenAPI::toJsonValue(m_minibar));
    }
    if (m_minibar_exception_isSet) {
        obj.insert(QString("minibarException"), ::OpenAPI::toJsonValue(m_minibar_exception));
    }
    if (m_outdoor_grill_isSet) {
        obj.insert(QString("outdoorGrill"), ::OpenAPI::toJsonValue(m_outdoor_grill));
    }
    if (m_outdoor_grill_exception_isSet) {
        obj.insert(QString("outdoorGrillException"), ::OpenAPI::toJsonValue(m_outdoor_grill_exception));
    }
    if (m_oven_isSet) {
        obj.insert(QString("oven"), ::OpenAPI::toJsonValue(m_oven));
    }
    if (m_oven_exception_isSet) {
        obj.insert(QString("ovenException"), ::OpenAPI::toJsonValue(m_oven_exception));
    }
    if (m_refrigerator_isSet) {
        obj.insert(QString("refrigerator"), ::OpenAPI::toJsonValue(m_refrigerator));
    }
    if (m_refrigerator_exception_isSet) {
        obj.insert(QString("refrigeratorException"), ::OpenAPI::toJsonValue(m_refrigerator_exception));
    }
    if (m_sink_isSet) {
        obj.insert(QString("sink"), ::OpenAPI::toJsonValue(m_sink));
    }
    if (m_sink_exception_isSet) {
        obj.insert(QString("sinkException"), ::OpenAPI::toJsonValue(m_sink_exception));
    }
    if (m_snackbar_isSet) {
        obj.insert(QString("snackbar"), ::OpenAPI::toJsonValue(m_snackbar));
    }
    if (m_snackbar_exception_isSet) {
        obj.insert(QString("snackbarException"), ::OpenAPI::toJsonValue(m_snackbar_exception));
    }
    if (m_stove_isSet) {
        obj.insert(QString("stove"), ::OpenAPI::toJsonValue(m_stove));
    }
    if (m_stove_exception_isSet) {
        obj.insert(QString("stoveException"), ::OpenAPI::toJsonValue(m_stove_exception));
    }
    if (m_tea_station_isSet) {
        obj.insert(QString("teaStation"), ::OpenAPI::toJsonValue(m_tea_station));
    }
    if (m_tea_station_exception_isSet) {
        obj.insert(QString("teaStationException"), ::OpenAPI::toJsonValue(m_tea_station_exception));
    }
    if (m_toaster_isSet) {
        obj.insert(QString("toaster"), ::OpenAPI::toJsonValue(m_toaster));
    }
    if (m_toaster_exception_isSet) {
        obj.insert(QString("toasterException"), ::OpenAPI::toJsonValue(m_toaster_exception));
    }
    return obj;
}

bool OAILivingAreaEating::isCoffeeMaker() const {
    return m_coffee_maker;
}
void OAILivingAreaEating::setCoffeeMaker(const bool &coffee_maker) {
    m_coffee_maker = coffee_maker;
    m_coffee_maker_isSet = true;
}

bool OAILivingAreaEating::is_coffee_maker_Set() const{
    return m_coffee_maker_isSet;
}

bool OAILivingAreaEating::is_coffee_maker_Valid() const{
    return m_coffee_maker_isValid;
}

QString OAILivingAreaEating::getCoffeeMakerException() const {
    return m_coffee_maker_exception;
}
void OAILivingAreaEating::setCoffeeMakerException(const QString &coffee_maker_exception) {
    m_coffee_maker_exception = coffee_maker_exception;
    m_coffee_maker_exception_isSet = true;
}

bool OAILivingAreaEating::is_coffee_maker_exception_Set() const{
    return m_coffee_maker_exception_isSet;
}

bool OAILivingAreaEating::is_coffee_maker_exception_Valid() const{
    return m_coffee_maker_exception_isValid;
}

bool OAILivingAreaEating::isCookware() const {
    return m_cookware;
}
void OAILivingAreaEating::setCookware(const bool &cookware) {
    m_cookware = cookware;
    m_cookware_isSet = true;
}

bool OAILivingAreaEating::is_cookware_Set() const{
    return m_cookware_isSet;
}

bool OAILivingAreaEating::is_cookware_Valid() const{
    return m_cookware_isValid;
}

QString OAILivingAreaEating::getCookwareException() const {
    return m_cookware_exception;
}
void OAILivingAreaEating::setCookwareException(const QString &cookware_exception) {
    m_cookware_exception = cookware_exception;
    m_cookware_exception_isSet = true;
}

bool OAILivingAreaEating::is_cookware_exception_Set() const{
    return m_cookware_exception_isSet;
}

bool OAILivingAreaEating::is_cookware_exception_Valid() const{
    return m_cookware_exception_isValid;
}

bool OAILivingAreaEating::isDishwasher() const {
    return m_dishwasher;
}
void OAILivingAreaEating::setDishwasher(const bool &dishwasher) {
    m_dishwasher = dishwasher;
    m_dishwasher_isSet = true;
}

bool OAILivingAreaEating::is_dishwasher_Set() const{
    return m_dishwasher_isSet;
}

bool OAILivingAreaEating::is_dishwasher_Valid() const{
    return m_dishwasher_isValid;
}

QString OAILivingAreaEating::getDishwasherException() const {
    return m_dishwasher_exception;
}
void OAILivingAreaEating::setDishwasherException(const QString &dishwasher_exception) {
    m_dishwasher_exception = dishwasher_exception;
    m_dishwasher_exception_isSet = true;
}

bool OAILivingAreaEating::is_dishwasher_exception_Set() const{
    return m_dishwasher_exception_isSet;
}

bool OAILivingAreaEating::is_dishwasher_exception_Valid() const{
    return m_dishwasher_exception_isValid;
}

bool OAILivingAreaEating::isIndoorGrill() const {
    return m_indoor_grill;
}
void OAILivingAreaEating::setIndoorGrill(const bool &indoor_grill) {
    m_indoor_grill = indoor_grill;
    m_indoor_grill_isSet = true;
}

bool OAILivingAreaEating::is_indoor_grill_Set() const{
    return m_indoor_grill_isSet;
}

bool OAILivingAreaEating::is_indoor_grill_Valid() const{
    return m_indoor_grill_isValid;
}

QString OAILivingAreaEating::getIndoorGrillException() const {
    return m_indoor_grill_exception;
}
void OAILivingAreaEating::setIndoorGrillException(const QString &indoor_grill_exception) {
    m_indoor_grill_exception = indoor_grill_exception;
    m_indoor_grill_exception_isSet = true;
}

bool OAILivingAreaEating::is_indoor_grill_exception_Set() const{
    return m_indoor_grill_exception_isSet;
}

bool OAILivingAreaEating::is_indoor_grill_exception_Valid() const{
    return m_indoor_grill_exception_isValid;
}

bool OAILivingAreaEating::isKettle() const {
    return m_kettle;
}
void OAILivingAreaEating::setKettle(const bool &kettle) {
    m_kettle = kettle;
    m_kettle_isSet = true;
}

bool OAILivingAreaEating::is_kettle_Set() const{
    return m_kettle_isSet;
}

bool OAILivingAreaEating::is_kettle_Valid() const{
    return m_kettle_isValid;
}

QString OAILivingAreaEating::getKettleException() const {
    return m_kettle_exception;
}
void OAILivingAreaEating::setKettleException(const QString &kettle_exception) {
    m_kettle_exception = kettle_exception;
    m_kettle_exception_isSet = true;
}

bool OAILivingAreaEating::is_kettle_exception_Set() const{
    return m_kettle_exception_isSet;
}

bool OAILivingAreaEating::is_kettle_exception_Valid() const{
    return m_kettle_exception_isValid;
}

bool OAILivingAreaEating::isKitchenAvailable() const {
    return m_kitchen_available;
}
void OAILivingAreaEating::setKitchenAvailable(const bool &kitchen_available) {
    m_kitchen_available = kitchen_available;
    m_kitchen_available_isSet = true;
}

bool OAILivingAreaEating::is_kitchen_available_Set() const{
    return m_kitchen_available_isSet;
}

bool OAILivingAreaEating::is_kitchen_available_Valid() const{
    return m_kitchen_available_isValid;
}

QString OAILivingAreaEating::getKitchenAvailableException() const {
    return m_kitchen_available_exception;
}
void OAILivingAreaEating::setKitchenAvailableException(const QString &kitchen_available_exception) {
    m_kitchen_available_exception = kitchen_available_exception;
    m_kitchen_available_exception_isSet = true;
}

bool OAILivingAreaEating::is_kitchen_available_exception_Set() const{
    return m_kitchen_available_exception_isSet;
}

bool OAILivingAreaEating::is_kitchen_available_exception_Valid() const{
    return m_kitchen_available_exception_isValid;
}

bool OAILivingAreaEating::isMicrowave() const {
    return m_microwave;
}
void OAILivingAreaEating::setMicrowave(const bool &microwave) {
    m_microwave = microwave;
    m_microwave_isSet = true;
}

bool OAILivingAreaEating::is_microwave_Set() const{
    return m_microwave_isSet;
}

bool OAILivingAreaEating::is_microwave_Valid() const{
    return m_microwave_isValid;
}

QString OAILivingAreaEating::getMicrowaveException() const {
    return m_microwave_exception;
}
void OAILivingAreaEating::setMicrowaveException(const QString &microwave_exception) {
    m_microwave_exception = microwave_exception;
    m_microwave_exception_isSet = true;
}

bool OAILivingAreaEating::is_microwave_exception_Set() const{
    return m_microwave_exception_isSet;
}

bool OAILivingAreaEating::is_microwave_exception_Valid() const{
    return m_microwave_exception_isValid;
}

bool OAILivingAreaEating::isMinibar() const {
    return m_minibar;
}
void OAILivingAreaEating::setMinibar(const bool &minibar) {
    m_minibar = minibar;
    m_minibar_isSet = true;
}

bool OAILivingAreaEating::is_minibar_Set() const{
    return m_minibar_isSet;
}

bool OAILivingAreaEating::is_minibar_Valid() const{
    return m_minibar_isValid;
}

QString OAILivingAreaEating::getMinibarException() const {
    return m_minibar_exception;
}
void OAILivingAreaEating::setMinibarException(const QString &minibar_exception) {
    m_minibar_exception = minibar_exception;
    m_minibar_exception_isSet = true;
}

bool OAILivingAreaEating::is_minibar_exception_Set() const{
    return m_minibar_exception_isSet;
}

bool OAILivingAreaEating::is_minibar_exception_Valid() const{
    return m_minibar_exception_isValid;
}

bool OAILivingAreaEating::isOutdoorGrill() const {
    return m_outdoor_grill;
}
void OAILivingAreaEating::setOutdoorGrill(const bool &outdoor_grill) {
    m_outdoor_grill = outdoor_grill;
    m_outdoor_grill_isSet = true;
}

bool OAILivingAreaEating::is_outdoor_grill_Set() const{
    return m_outdoor_grill_isSet;
}

bool OAILivingAreaEating::is_outdoor_grill_Valid() const{
    return m_outdoor_grill_isValid;
}

QString OAILivingAreaEating::getOutdoorGrillException() const {
    return m_outdoor_grill_exception;
}
void OAILivingAreaEating::setOutdoorGrillException(const QString &outdoor_grill_exception) {
    m_outdoor_grill_exception = outdoor_grill_exception;
    m_outdoor_grill_exception_isSet = true;
}

bool OAILivingAreaEating::is_outdoor_grill_exception_Set() const{
    return m_outdoor_grill_exception_isSet;
}

bool OAILivingAreaEating::is_outdoor_grill_exception_Valid() const{
    return m_outdoor_grill_exception_isValid;
}

bool OAILivingAreaEating::isOven() const {
    return m_oven;
}
void OAILivingAreaEating::setOven(const bool &oven) {
    m_oven = oven;
    m_oven_isSet = true;
}

bool OAILivingAreaEating::is_oven_Set() const{
    return m_oven_isSet;
}

bool OAILivingAreaEating::is_oven_Valid() const{
    return m_oven_isValid;
}

QString OAILivingAreaEating::getOvenException() const {
    return m_oven_exception;
}
void OAILivingAreaEating::setOvenException(const QString &oven_exception) {
    m_oven_exception = oven_exception;
    m_oven_exception_isSet = true;
}

bool OAILivingAreaEating::is_oven_exception_Set() const{
    return m_oven_exception_isSet;
}

bool OAILivingAreaEating::is_oven_exception_Valid() const{
    return m_oven_exception_isValid;
}

bool OAILivingAreaEating::isRefrigerator() const {
    return m_refrigerator;
}
void OAILivingAreaEating::setRefrigerator(const bool &refrigerator) {
    m_refrigerator = refrigerator;
    m_refrigerator_isSet = true;
}

bool OAILivingAreaEating::is_refrigerator_Set() const{
    return m_refrigerator_isSet;
}

bool OAILivingAreaEating::is_refrigerator_Valid() const{
    return m_refrigerator_isValid;
}

QString OAILivingAreaEating::getRefrigeratorException() const {
    return m_refrigerator_exception;
}
void OAILivingAreaEating::setRefrigeratorException(const QString &refrigerator_exception) {
    m_refrigerator_exception = refrigerator_exception;
    m_refrigerator_exception_isSet = true;
}

bool OAILivingAreaEating::is_refrigerator_exception_Set() const{
    return m_refrigerator_exception_isSet;
}

bool OAILivingAreaEating::is_refrigerator_exception_Valid() const{
    return m_refrigerator_exception_isValid;
}

bool OAILivingAreaEating::isSink() const {
    return m_sink;
}
void OAILivingAreaEating::setSink(const bool &sink) {
    m_sink = sink;
    m_sink_isSet = true;
}

bool OAILivingAreaEating::is_sink_Set() const{
    return m_sink_isSet;
}

bool OAILivingAreaEating::is_sink_Valid() const{
    return m_sink_isValid;
}

QString OAILivingAreaEating::getSinkException() const {
    return m_sink_exception;
}
void OAILivingAreaEating::setSinkException(const QString &sink_exception) {
    m_sink_exception = sink_exception;
    m_sink_exception_isSet = true;
}

bool OAILivingAreaEating::is_sink_exception_Set() const{
    return m_sink_exception_isSet;
}

bool OAILivingAreaEating::is_sink_exception_Valid() const{
    return m_sink_exception_isValid;
}

bool OAILivingAreaEating::isSnackbar() const {
    return m_snackbar;
}
void OAILivingAreaEating::setSnackbar(const bool &snackbar) {
    m_snackbar = snackbar;
    m_snackbar_isSet = true;
}

bool OAILivingAreaEating::is_snackbar_Set() const{
    return m_snackbar_isSet;
}

bool OAILivingAreaEating::is_snackbar_Valid() const{
    return m_snackbar_isValid;
}

QString OAILivingAreaEating::getSnackbarException() const {
    return m_snackbar_exception;
}
void OAILivingAreaEating::setSnackbarException(const QString &snackbar_exception) {
    m_snackbar_exception = snackbar_exception;
    m_snackbar_exception_isSet = true;
}

bool OAILivingAreaEating::is_snackbar_exception_Set() const{
    return m_snackbar_exception_isSet;
}

bool OAILivingAreaEating::is_snackbar_exception_Valid() const{
    return m_snackbar_exception_isValid;
}

bool OAILivingAreaEating::isStove() const {
    return m_stove;
}
void OAILivingAreaEating::setStove(const bool &stove) {
    m_stove = stove;
    m_stove_isSet = true;
}

bool OAILivingAreaEating::is_stove_Set() const{
    return m_stove_isSet;
}

bool OAILivingAreaEating::is_stove_Valid() const{
    return m_stove_isValid;
}

QString OAILivingAreaEating::getStoveException() const {
    return m_stove_exception;
}
void OAILivingAreaEating::setStoveException(const QString &stove_exception) {
    m_stove_exception = stove_exception;
    m_stove_exception_isSet = true;
}

bool OAILivingAreaEating::is_stove_exception_Set() const{
    return m_stove_exception_isSet;
}

bool OAILivingAreaEating::is_stove_exception_Valid() const{
    return m_stove_exception_isValid;
}

bool OAILivingAreaEating::isTeaStation() const {
    return m_tea_station;
}
void OAILivingAreaEating::setTeaStation(const bool &tea_station) {
    m_tea_station = tea_station;
    m_tea_station_isSet = true;
}

bool OAILivingAreaEating::is_tea_station_Set() const{
    return m_tea_station_isSet;
}

bool OAILivingAreaEating::is_tea_station_Valid() const{
    return m_tea_station_isValid;
}

QString OAILivingAreaEating::getTeaStationException() const {
    return m_tea_station_exception;
}
void OAILivingAreaEating::setTeaStationException(const QString &tea_station_exception) {
    m_tea_station_exception = tea_station_exception;
    m_tea_station_exception_isSet = true;
}

bool OAILivingAreaEating::is_tea_station_exception_Set() const{
    return m_tea_station_exception_isSet;
}

bool OAILivingAreaEating::is_tea_station_exception_Valid() const{
    return m_tea_station_exception_isValid;
}

bool OAILivingAreaEating::isToaster() const {
    return m_toaster;
}
void OAILivingAreaEating::setToaster(const bool &toaster) {
    m_toaster = toaster;
    m_toaster_isSet = true;
}

bool OAILivingAreaEating::is_toaster_Set() const{
    return m_toaster_isSet;
}

bool OAILivingAreaEating::is_toaster_Valid() const{
    return m_toaster_isValid;
}

QString OAILivingAreaEating::getToasterException() const {
    return m_toaster_exception;
}
void OAILivingAreaEating::setToasterException(const QString &toaster_exception) {
    m_toaster_exception = toaster_exception;
    m_toaster_exception_isSet = true;
}

bool OAILivingAreaEating::is_toaster_exception_Set() const{
    return m_toaster_exception_isSet;
}

bool OAILivingAreaEating::is_toaster_exception_Valid() const{
    return m_toaster_exception_isValid;
}

bool OAILivingAreaEating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coffee_maker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coffee_maker_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookware_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dishwasher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dishwasher_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_grill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_grill_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kettle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kettle_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kitchen_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kitchen_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microwave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microwave_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minibar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minibar_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_grill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_grill_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oven_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oven_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refrigerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refrigerator_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snackbar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snackbar_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stove_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stove_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tea_station_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tea_station_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toaster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toaster_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingAreaEating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
