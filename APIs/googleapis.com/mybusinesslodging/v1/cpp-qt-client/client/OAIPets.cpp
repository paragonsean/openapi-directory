/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPets::OAIPets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPets::OAIPets() {
    this->initializeModel();
}

OAIPets::~OAIPets() {}

void OAIPets::initializeModel() {

    m_cats_allowed_isSet = false;
    m_cats_allowed_isValid = false;

    m_cats_allowed_exception_isSet = false;
    m_cats_allowed_exception_isValid = false;

    m_dogs_allowed_isSet = false;
    m_dogs_allowed_isValid = false;

    m_dogs_allowed_exception_isSet = false;
    m_dogs_allowed_exception_isValid = false;

    m_pets_allowed_isSet = false;
    m_pets_allowed_isValid = false;

    m_pets_allowed_exception_isSet = false;
    m_pets_allowed_exception_isValid = false;

    m_pets_allowed_free_isSet = false;
    m_pets_allowed_free_isValid = false;

    m_pets_allowed_free_exception_isSet = false;
    m_pets_allowed_free_exception_isValid = false;
}

void OAIPets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPets::fromJsonObject(QJsonObject json) {

    m_cats_allowed_isValid = ::OpenAPI::fromJsonValue(m_cats_allowed, json[QString("catsAllowed")]);
    m_cats_allowed_isSet = !json[QString("catsAllowed")].isNull() && m_cats_allowed_isValid;

    m_cats_allowed_exception_isValid = ::OpenAPI::fromJsonValue(m_cats_allowed_exception, json[QString("catsAllowedException")]);
    m_cats_allowed_exception_isSet = !json[QString("catsAllowedException")].isNull() && m_cats_allowed_exception_isValid;

    m_dogs_allowed_isValid = ::OpenAPI::fromJsonValue(m_dogs_allowed, json[QString("dogsAllowed")]);
    m_dogs_allowed_isSet = !json[QString("dogsAllowed")].isNull() && m_dogs_allowed_isValid;

    m_dogs_allowed_exception_isValid = ::OpenAPI::fromJsonValue(m_dogs_allowed_exception, json[QString("dogsAllowedException")]);
    m_dogs_allowed_exception_isSet = !json[QString("dogsAllowedException")].isNull() && m_dogs_allowed_exception_isValid;

    m_pets_allowed_isValid = ::OpenAPI::fromJsonValue(m_pets_allowed, json[QString("petsAllowed")]);
    m_pets_allowed_isSet = !json[QString("petsAllowed")].isNull() && m_pets_allowed_isValid;

    m_pets_allowed_exception_isValid = ::OpenAPI::fromJsonValue(m_pets_allowed_exception, json[QString("petsAllowedException")]);
    m_pets_allowed_exception_isSet = !json[QString("petsAllowedException")].isNull() && m_pets_allowed_exception_isValid;

    m_pets_allowed_free_isValid = ::OpenAPI::fromJsonValue(m_pets_allowed_free, json[QString("petsAllowedFree")]);
    m_pets_allowed_free_isSet = !json[QString("petsAllowedFree")].isNull() && m_pets_allowed_free_isValid;

    m_pets_allowed_free_exception_isValid = ::OpenAPI::fromJsonValue(m_pets_allowed_free_exception, json[QString("petsAllowedFreeException")]);
    m_pets_allowed_free_exception_isSet = !json[QString("petsAllowedFreeException")].isNull() && m_pets_allowed_free_exception_isValid;
}

QString OAIPets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPets::asJsonObject() const {
    QJsonObject obj;
    if (m_cats_allowed_isSet) {
        obj.insert(QString("catsAllowed"), ::OpenAPI::toJsonValue(m_cats_allowed));
    }
    if (m_cats_allowed_exception_isSet) {
        obj.insert(QString("catsAllowedException"), ::OpenAPI::toJsonValue(m_cats_allowed_exception));
    }
    if (m_dogs_allowed_isSet) {
        obj.insert(QString("dogsAllowed"), ::OpenAPI::toJsonValue(m_dogs_allowed));
    }
    if (m_dogs_allowed_exception_isSet) {
        obj.insert(QString("dogsAllowedException"), ::OpenAPI::toJsonValue(m_dogs_allowed_exception));
    }
    if (m_pets_allowed_isSet) {
        obj.insert(QString("petsAllowed"), ::OpenAPI::toJsonValue(m_pets_allowed));
    }
    if (m_pets_allowed_exception_isSet) {
        obj.insert(QString("petsAllowedException"), ::OpenAPI::toJsonValue(m_pets_allowed_exception));
    }
    if (m_pets_allowed_free_isSet) {
        obj.insert(QString("petsAllowedFree"), ::OpenAPI::toJsonValue(m_pets_allowed_free));
    }
    if (m_pets_allowed_free_exception_isSet) {
        obj.insert(QString("petsAllowedFreeException"), ::OpenAPI::toJsonValue(m_pets_allowed_free_exception));
    }
    return obj;
}

bool OAIPets::isCatsAllowed() const {
    return m_cats_allowed;
}
void OAIPets::setCatsAllowed(const bool &cats_allowed) {
    m_cats_allowed = cats_allowed;
    m_cats_allowed_isSet = true;
}

bool OAIPets::is_cats_allowed_Set() const{
    return m_cats_allowed_isSet;
}

bool OAIPets::is_cats_allowed_Valid() const{
    return m_cats_allowed_isValid;
}

QString OAIPets::getCatsAllowedException() const {
    return m_cats_allowed_exception;
}
void OAIPets::setCatsAllowedException(const QString &cats_allowed_exception) {
    m_cats_allowed_exception = cats_allowed_exception;
    m_cats_allowed_exception_isSet = true;
}

bool OAIPets::is_cats_allowed_exception_Set() const{
    return m_cats_allowed_exception_isSet;
}

bool OAIPets::is_cats_allowed_exception_Valid() const{
    return m_cats_allowed_exception_isValid;
}

bool OAIPets::isDogsAllowed() const {
    return m_dogs_allowed;
}
void OAIPets::setDogsAllowed(const bool &dogs_allowed) {
    m_dogs_allowed = dogs_allowed;
    m_dogs_allowed_isSet = true;
}

bool OAIPets::is_dogs_allowed_Set() const{
    return m_dogs_allowed_isSet;
}

bool OAIPets::is_dogs_allowed_Valid() const{
    return m_dogs_allowed_isValid;
}

QString OAIPets::getDogsAllowedException() const {
    return m_dogs_allowed_exception;
}
void OAIPets::setDogsAllowedException(const QString &dogs_allowed_exception) {
    m_dogs_allowed_exception = dogs_allowed_exception;
    m_dogs_allowed_exception_isSet = true;
}

bool OAIPets::is_dogs_allowed_exception_Set() const{
    return m_dogs_allowed_exception_isSet;
}

bool OAIPets::is_dogs_allowed_exception_Valid() const{
    return m_dogs_allowed_exception_isValid;
}

bool OAIPets::isPetsAllowed() const {
    return m_pets_allowed;
}
void OAIPets::setPetsAllowed(const bool &pets_allowed) {
    m_pets_allowed = pets_allowed;
    m_pets_allowed_isSet = true;
}

bool OAIPets::is_pets_allowed_Set() const{
    return m_pets_allowed_isSet;
}

bool OAIPets::is_pets_allowed_Valid() const{
    return m_pets_allowed_isValid;
}

QString OAIPets::getPetsAllowedException() const {
    return m_pets_allowed_exception;
}
void OAIPets::setPetsAllowedException(const QString &pets_allowed_exception) {
    m_pets_allowed_exception = pets_allowed_exception;
    m_pets_allowed_exception_isSet = true;
}

bool OAIPets::is_pets_allowed_exception_Set() const{
    return m_pets_allowed_exception_isSet;
}

bool OAIPets::is_pets_allowed_exception_Valid() const{
    return m_pets_allowed_exception_isValid;
}

bool OAIPets::isPetsAllowedFree() const {
    return m_pets_allowed_free;
}
void OAIPets::setPetsAllowedFree(const bool &pets_allowed_free) {
    m_pets_allowed_free = pets_allowed_free;
    m_pets_allowed_free_isSet = true;
}

bool OAIPets::is_pets_allowed_free_Set() const{
    return m_pets_allowed_free_isSet;
}

bool OAIPets::is_pets_allowed_free_Valid() const{
    return m_pets_allowed_free_isValid;
}

QString OAIPets::getPetsAllowedFreeException() const {
    return m_pets_allowed_free_exception;
}
void OAIPets::setPetsAllowedFreeException(const QString &pets_allowed_free_exception) {
    m_pets_allowed_free_exception = pets_allowed_free_exception;
    m_pets_allowed_free_exception_isSet = true;
}

bool OAIPets::is_pets_allowed_free_exception_Set() const{
    return m_pets_allowed_free_exception_isSet;
}

bool OAIPets::is_pets_allowed_free_exception_Valid() const{
    return m_pets_allowed_free_exception_isValid;
}

bool OAIPets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cats_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cats_allowed_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogs_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dogs_allowed_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pets_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pets_allowed_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pets_allowed_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pets_allowed_free_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
