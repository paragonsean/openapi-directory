/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMinimizedContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMinimizedContact::OAIMinimizedContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMinimizedContact::OAIMinimizedContact() {
    this->initializeModel();
}

OAIMinimizedContact::~OAIMinimizedContact() {}

void OAIMinimizedContact::initializeModel() {

    m_contactless_checkin_checkout_isSet = false;
    m_contactless_checkin_checkout_isValid = false;

    m_contactless_checkin_checkout_exception_isSet = false;
    m_contactless_checkin_checkout_exception_isValid = false;

    m_digital_guest_room_keys_isSet = false;
    m_digital_guest_room_keys_isValid = false;

    m_digital_guest_room_keys_exception_isSet = false;
    m_digital_guest_room_keys_exception_isValid = false;

    m_housekeeping_scheduled_request_only_isSet = false;
    m_housekeeping_scheduled_request_only_isValid = false;

    m_housekeeping_scheduled_request_only_exception_isSet = false;
    m_housekeeping_scheduled_request_only_exception_isValid = false;

    m_no_high_touch_items_common_areas_isSet = false;
    m_no_high_touch_items_common_areas_isValid = false;

    m_no_high_touch_items_common_areas_exception_isSet = false;
    m_no_high_touch_items_common_areas_exception_isValid = false;

    m_no_high_touch_items_guest_rooms_isSet = false;
    m_no_high_touch_items_guest_rooms_isValid = false;

    m_no_high_touch_items_guest_rooms_exception_isSet = false;
    m_no_high_touch_items_guest_rooms_exception_isValid = false;

    m_plastic_keycards_disinfected_isSet = false;
    m_plastic_keycards_disinfected_isValid = false;

    m_plastic_keycards_disinfected_exception_isSet = false;
    m_plastic_keycards_disinfected_exception_isValid = false;

    m_room_bookings_buffer_isSet = false;
    m_room_bookings_buffer_isValid = false;

    m_room_bookings_buffer_exception_isSet = false;
    m_room_bookings_buffer_exception_isValid = false;
}

void OAIMinimizedContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMinimizedContact::fromJsonObject(QJsonObject json) {

    m_contactless_checkin_checkout_isValid = ::OpenAPI::fromJsonValue(m_contactless_checkin_checkout, json[QString("contactlessCheckinCheckout")]);
    m_contactless_checkin_checkout_isSet = !json[QString("contactlessCheckinCheckout")].isNull() && m_contactless_checkin_checkout_isValid;

    m_contactless_checkin_checkout_exception_isValid = ::OpenAPI::fromJsonValue(m_contactless_checkin_checkout_exception, json[QString("contactlessCheckinCheckoutException")]);
    m_contactless_checkin_checkout_exception_isSet = !json[QString("contactlessCheckinCheckoutException")].isNull() && m_contactless_checkin_checkout_exception_isValid;

    m_digital_guest_room_keys_isValid = ::OpenAPI::fromJsonValue(m_digital_guest_room_keys, json[QString("digitalGuestRoomKeys")]);
    m_digital_guest_room_keys_isSet = !json[QString("digitalGuestRoomKeys")].isNull() && m_digital_guest_room_keys_isValid;

    m_digital_guest_room_keys_exception_isValid = ::OpenAPI::fromJsonValue(m_digital_guest_room_keys_exception, json[QString("digitalGuestRoomKeysException")]);
    m_digital_guest_room_keys_exception_isSet = !json[QString("digitalGuestRoomKeysException")].isNull() && m_digital_guest_room_keys_exception_isValid;

    m_housekeeping_scheduled_request_only_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_scheduled_request_only, json[QString("housekeepingScheduledRequestOnly")]);
    m_housekeeping_scheduled_request_only_isSet = !json[QString("housekeepingScheduledRequestOnly")].isNull() && m_housekeeping_scheduled_request_only_isValid;

    m_housekeeping_scheduled_request_only_exception_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_scheduled_request_only_exception, json[QString("housekeepingScheduledRequestOnlyException")]);
    m_housekeeping_scheduled_request_only_exception_isSet = !json[QString("housekeepingScheduledRequestOnlyException")].isNull() && m_housekeeping_scheduled_request_only_exception_isValid;

    m_no_high_touch_items_common_areas_isValid = ::OpenAPI::fromJsonValue(m_no_high_touch_items_common_areas, json[QString("noHighTouchItemsCommonAreas")]);
    m_no_high_touch_items_common_areas_isSet = !json[QString("noHighTouchItemsCommonAreas")].isNull() && m_no_high_touch_items_common_areas_isValid;

    m_no_high_touch_items_common_areas_exception_isValid = ::OpenAPI::fromJsonValue(m_no_high_touch_items_common_areas_exception, json[QString("noHighTouchItemsCommonAreasException")]);
    m_no_high_touch_items_common_areas_exception_isSet = !json[QString("noHighTouchItemsCommonAreasException")].isNull() && m_no_high_touch_items_common_areas_exception_isValid;

    m_no_high_touch_items_guest_rooms_isValid = ::OpenAPI::fromJsonValue(m_no_high_touch_items_guest_rooms, json[QString("noHighTouchItemsGuestRooms")]);
    m_no_high_touch_items_guest_rooms_isSet = !json[QString("noHighTouchItemsGuestRooms")].isNull() && m_no_high_touch_items_guest_rooms_isValid;

    m_no_high_touch_items_guest_rooms_exception_isValid = ::OpenAPI::fromJsonValue(m_no_high_touch_items_guest_rooms_exception, json[QString("noHighTouchItemsGuestRoomsException")]);
    m_no_high_touch_items_guest_rooms_exception_isSet = !json[QString("noHighTouchItemsGuestRoomsException")].isNull() && m_no_high_touch_items_guest_rooms_exception_isValid;

    m_plastic_keycards_disinfected_isValid = ::OpenAPI::fromJsonValue(m_plastic_keycards_disinfected, json[QString("plasticKeycardsDisinfected")]);
    m_plastic_keycards_disinfected_isSet = !json[QString("plasticKeycardsDisinfected")].isNull() && m_plastic_keycards_disinfected_isValid;

    m_plastic_keycards_disinfected_exception_isValid = ::OpenAPI::fromJsonValue(m_plastic_keycards_disinfected_exception, json[QString("plasticKeycardsDisinfectedException")]);
    m_plastic_keycards_disinfected_exception_isSet = !json[QString("plasticKeycardsDisinfectedException")].isNull() && m_plastic_keycards_disinfected_exception_isValid;

    m_room_bookings_buffer_isValid = ::OpenAPI::fromJsonValue(m_room_bookings_buffer, json[QString("roomBookingsBuffer")]);
    m_room_bookings_buffer_isSet = !json[QString("roomBookingsBuffer")].isNull() && m_room_bookings_buffer_isValid;

    m_room_bookings_buffer_exception_isValid = ::OpenAPI::fromJsonValue(m_room_bookings_buffer_exception, json[QString("roomBookingsBufferException")]);
    m_room_bookings_buffer_exception_isSet = !json[QString("roomBookingsBufferException")].isNull() && m_room_bookings_buffer_exception_isValid;
}

QString OAIMinimizedContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMinimizedContact::asJsonObject() const {
    QJsonObject obj;
    if (m_contactless_checkin_checkout_isSet) {
        obj.insert(QString("contactlessCheckinCheckout"), ::OpenAPI::toJsonValue(m_contactless_checkin_checkout));
    }
    if (m_contactless_checkin_checkout_exception_isSet) {
        obj.insert(QString("contactlessCheckinCheckoutException"), ::OpenAPI::toJsonValue(m_contactless_checkin_checkout_exception));
    }
    if (m_digital_guest_room_keys_isSet) {
        obj.insert(QString("digitalGuestRoomKeys"), ::OpenAPI::toJsonValue(m_digital_guest_room_keys));
    }
    if (m_digital_guest_room_keys_exception_isSet) {
        obj.insert(QString("digitalGuestRoomKeysException"), ::OpenAPI::toJsonValue(m_digital_guest_room_keys_exception));
    }
    if (m_housekeeping_scheduled_request_only_isSet) {
        obj.insert(QString("housekeepingScheduledRequestOnly"), ::OpenAPI::toJsonValue(m_housekeeping_scheduled_request_only));
    }
    if (m_housekeeping_scheduled_request_only_exception_isSet) {
        obj.insert(QString("housekeepingScheduledRequestOnlyException"), ::OpenAPI::toJsonValue(m_housekeeping_scheduled_request_only_exception));
    }
    if (m_no_high_touch_items_common_areas_isSet) {
        obj.insert(QString("noHighTouchItemsCommonAreas"), ::OpenAPI::toJsonValue(m_no_high_touch_items_common_areas));
    }
    if (m_no_high_touch_items_common_areas_exception_isSet) {
        obj.insert(QString("noHighTouchItemsCommonAreasException"), ::OpenAPI::toJsonValue(m_no_high_touch_items_common_areas_exception));
    }
    if (m_no_high_touch_items_guest_rooms_isSet) {
        obj.insert(QString("noHighTouchItemsGuestRooms"), ::OpenAPI::toJsonValue(m_no_high_touch_items_guest_rooms));
    }
    if (m_no_high_touch_items_guest_rooms_exception_isSet) {
        obj.insert(QString("noHighTouchItemsGuestRoomsException"), ::OpenAPI::toJsonValue(m_no_high_touch_items_guest_rooms_exception));
    }
    if (m_plastic_keycards_disinfected_isSet) {
        obj.insert(QString("plasticKeycardsDisinfected"), ::OpenAPI::toJsonValue(m_plastic_keycards_disinfected));
    }
    if (m_plastic_keycards_disinfected_exception_isSet) {
        obj.insert(QString("plasticKeycardsDisinfectedException"), ::OpenAPI::toJsonValue(m_plastic_keycards_disinfected_exception));
    }
    if (m_room_bookings_buffer_isSet) {
        obj.insert(QString("roomBookingsBuffer"), ::OpenAPI::toJsonValue(m_room_bookings_buffer));
    }
    if (m_room_bookings_buffer_exception_isSet) {
        obj.insert(QString("roomBookingsBufferException"), ::OpenAPI::toJsonValue(m_room_bookings_buffer_exception));
    }
    return obj;
}

bool OAIMinimizedContact::isContactlessCheckinCheckout() const {
    return m_contactless_checkin_checkout;
}
void OAIMinimizedContact::setContactlessCheckinCheckout(const bool &contactless_checkin_checkout) {
    m_contactless_checkin_checkout = contactless_checkin_checkout;
    m_contactless_checkin_checkout_isSet = true;
}

bool OAIMinimizedContact::is_contactless_checkin_checkout_Set() const{
    return m_contactless_checkin_checkout_isSet;
}

bool OAIMinimizedContact::is_contactless_checkin_checkout_Valid() const{
    return m_contactless_checkin_checkout_isValid;
}

QString OAIMinimizedContact::getContactlessCheckinCheckoutException() const {
    return m_contactless_checkin_checkout_exception;
}
void OAIMinimizedContact::setContactlessCheckinCheckoutException(const QString &contactless_checkin_checkout_exception) {
    m_contactless_checkin_checkout_exception = contactless_checkin_checkout_exception;
    m_contactless_checkin_checkout_exception_isSet = true;
}

bool OAIMinimizedContact::is_contactless_checkin_checkout_exception_Set() const{
    return m_contactless_checkin_checkout_exception_isSet;
}

bool OAIMinimizedContact::is_contactless_checkin_checkout_exception_Valid() const{
    return m_contactless_checkin_checkout_exception_isValid;
}

bool OAIMinimizedContact::isDigitalGuestRoomKeys() const {
    return m_digital_guest_room_keys;
}
void OAIMinimizedContact::setDigitalGuestRoomKeys(const bool &digital_guest_room_keys) {
    m_digital_guest_room_keys = digital_guest_room_keys;
    m_digital_guest_room_keys_isSet = true;
}

bool OAIMinimizedContact::is_digital_guest_room_keys_Set() const{
    return m_digital_guest_room_keys_isSet;
}

bool OAIMinimizedContact::is_digital_guest_room_keys_Valid() const{
    return m_digital_guest_room_keys_isValid;
}

QString OAIMinimizedContact::getDigitalGuestRoomKeysException() const {
    return m_digital_guest_room_keys_exception;
}
void OAIMinimizedContact::setDigitalGuestRoomKeysException(const QString &digital_guest_room_keys_exception) {
    m_digital_guest_room_keys_exception = digital_guest_room_keys_exception;
    m_digital_guest_room_keys_exception_isSet = true;
}

bool OAIMinimizedContact::is_digital_guest_room_keys_exception_Set() const{
    return m_digital_guest_room_keys_exception_isSet;
}

bool OAIMinimizedContact::is_digital_guest_room_keys_exception_Valid() const{
    return m_digital_guest_room_keys_exception_isValid;
}

bool OAIMinimizedContact::isHousekeepingScheduledRequestOnly() const {
    return m_housekeeping_scheduled_request_only;
}
void OAIMinimizedContact::setHousekeepingScheduledRequestOnly(const bool &housekeeping_scheduled_request_only) {
    m_housekeeping_scheduled_request_only = housekeeping_scheduled_request_only;
    m_housekeeping_scheduled_request_only_isSet = true;
}

bool OAIMinimizedContact::is_housekeeping_scheduled_request_only_Set() const{
    return m_housekeeping_scheduled_request_only_isSet;
}

bool OAIMinimizedContact::is_housekeeping_scheduled_request_only_Valid() const{
    return m_housekeeping_scheduled_request_only_isValid;
}

QString OAIMinimizedContact::getHousekeepingScheduledRequestOnlyException() const {
    return m_housekeeping_scheduled_request_only_exception;
}
void OAIMinimizedContact::setHousekeepingScheduledRequestOnlyException(const QString &housekeeping_scheduled_request_only_exception) {
    m_housekeeping_scheduled_request_only_exception = housekeeping_scheduled_request_only_exception;
    m_housekeeping_scheduled_request_only_exception_isSet = true;
}

bool OAIMinimizedContact::is_housekeeping_scheduled_request_only_exception_Set() const{
    return m_housekeeping_scheduled_request_only_exception_isSet;
}

bool OAIMinimizedContact::is_housekeeping_scheduled_request_only_exception_Valid() const{
    return m_housekeeping_scheduled_request_only_exception_isValid;
}

bool OAIMinimizedContact::isNoHighTouchItemsCommonAreas() const {
    return m_no_high_touch_items_common_areas;
}
void OAIMinimizedContact::setNoHighTouchItemsCommonAreas(const bool &no_high_touch_items_common_areas) {
    m_no_high_touch_items_common_areas = no_high_touch_items_common_areas;
    m_no_high_touch_items_common_areas_isSet = true;
}

bool OAIMinimizedContact::is_no_high_touch_items_common_areas_Set() const{
    return m_no_high_touch_items_common_areas_isSet;
}

bool OAIMinimizedContact::is_no_high_touch_items_common_areas_Valid() const{
    return m_no_high_touch_items_common_areas_isValid;
}

QString OAIMinimizedContact::getNoHighTouchItemsCommonAreasException() const {
    return m_no_high_touch_items_common_areas_exception;
}
void OAIMinimizedContact::setNoHighTouchItemsCommonAreasException(const QString &no_high_touch_items_common_areas_exception) {
    m_no_high_touch_items_common_areas_exception = no_high_touch_items_common_areas_exception;
    m_no_high_touch_items_common_areas_exception_isSet = true;
}

bool OAIMinimizedContact::is_no_high_touch_items_common_areas_exception_Set() const{
    return m_no_high_touch_items_common_areas_exception_isSet;
}

bool OAIMinimizedContact::is_no_high_touch_items_common_areas_exception_Valid() const{
    return m_no_high_touch_items_common_areas_exception_isValid;
}

bool OAIMinimizedContact::isNoHighTouchItemsGuestRooms() const {
    return m_no_high_touch_items_guest_rooms;
}
void OAIMinimizedContact::setNoHighTouchItemsGuestRooms(const bool &no_high_touch_items_guest_rooms) {
    m_no_high_touch_items_guest_rooms = no_high_touch_items_guest_rooms;
    m_no_high_touch_items_guest_rooms_isSet = true;
}

bool OAIMinimizedContact::is_no_high_touch_items_guest_rooms_Set() const{
    return m_no_high_touch_items_guest_rooms_isSet;
}

bool OAIMinimizedContact::is_no_high_touch_items_guest_rooms_Valid() const{
    return m_no_high_touch_items_guest_rooms_isValid;
}

QString OAIMinimizedContact::getNoHighTouchItemsGuestRoomsException() const {
    return m_no_high_touch_items_guest_rooms_exception;
}
void OAIMinimizedContact::setNoHighTouchItemsGuestRoomsException(const QString &no_high_touch_items_guest_rooms_exception) {
    m_no_high_touch_items_guest_rooms_exception = no_high_touch_items_guest_rooms_exception;
    m_no_high_touch_items_guest_rooms_exception_isSet = true;
}

bool OAIMinimizedContact::is_no_high_touch_items_guest_rooms_exception_Set() const{
    return m_no_high_touch_items_guest_rooms_exception_isSet;
}

bool OAIMinimizedContact::is_no_high_touch_items_guest_rooms_exception_Valid() const{
    return m_no_high_touch_items_guest_rooms_exception_isValid;
}

bool OAIMinimizedContact::isPlasticKeycardsDisinfected() const {
    return m_plastic_keycards_disinfected;
}
void OAIMinimizedContact::setPlasticKeycardsDisinfected(const bool &plastic_keycards_disinfected) {
    m_plastic_keycards_disinfected = plastic_keycards_disinfected;
    m_plastic_keycards_disinfected_isSet = true;
}

bool OAIMinimizedContact::is_plastic_keycards_disinfected_Set() const{
    return m_plastic_keycards_disinfected_isSet;
}

bool OAIMinimizedContact::is_plastic_keycards_disinfected_Valid() const{
    return m_plastic_keycards_disinfected_isValid;
}

QString OAIMinimizedContact::getPlasticKeycardsDisinfectedException() const {
    return m_plastic_keycards_disinfected_exception;
}
void OAIMinimizedContact::setPlasticKeycardsDisinfectedException(const QString &plastic_keycards_disinfected_exception) {
    m_plastic_keycards_disinfected_exception = plastic_keycards_disinfected_exception;
    m_plastic_keycards_disinfected_exception_isSet = true;
}

bool OAIMinimizedContact::is_plastic_keycards_disinfected_exception_Set() const{
    return m_plastic_keycards_disinfected_exception_isSet;
}

bool OAIMinimizedContact::is_plastic_keycards_disinfected_exception_Valid() const{
    return m_plastic_keycards_disinfected_exception_isValid;
}

bool OAIMinimizedContact::isRoomBookingsBuffer() const {
    return m_room_bookings_buffer;
}
void OAIMinimizedContact::setRoomBookingsBuffer(const bool &room_bookings_buffer) {
    m_room_bookings_buffer = room_bookings_buffer;
    m_room_bookings_buffer_isSet = true;
}

bool OAIMinimizedContact::is_room_bookings_buffer_Set() const{
    return m_room_bookings_buffer_isSet;
}

bool OAIMinimizedContact::is_room_bookings_buffer_Valid() const{
    return m_room_bookings_buffer_isValid;
}

QString OAIMinimizedContact::getRoomBookingsBufferException() const {
    return m_room_bookings_buffer_exception;
}
void OAIMinimizedContact::setRoomBookingsBufferException(const QString &room_bookings_buffer_exception) {
    m_room_bookings_buffer_exception = room_bookings_buffer_exception;
    m_room_bookings_buffer_exception_isSet = true;
}

bool OAIMinimizedContact::is_room_bookings_buffer_exception_Set() const{
    return m_room_bookings_buffer_exception_isSet;
}

bool OAIMinimizedContact::is_room_bookings_buffer_exception_Valid() const{
    return m_room_bookings_buffer_exception_isValid;
}

bool OAIMinimizedContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contactless_checkin_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contactless_checkin_checkout_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_guest_room_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_guest_room_keys_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_scheduled_request_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_scheduled_request_only_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_high_touch_items_common_areas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_high_touch_items_common_areas_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_high_touch_items_guest_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_high_touch_items_guest_rooms_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plastic_keycards_disinfected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plastic_keycards_disinfected_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_bookings_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_bookings_buffer_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMinimizedContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
