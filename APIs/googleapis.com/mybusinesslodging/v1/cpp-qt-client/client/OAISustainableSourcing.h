/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISustainableSourcing.h
 *
 * Sustainable sourcing practices implemented at the hotel.
 */

#ifndef OAISustainableSourcing_H
#define OAISustainableSourcing_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISustainableSourcing : public OAIObject {
public:
    OAISustainableSourcing();
    OAISustainableSourcing(QString json);
    ~OAISustainableSourcing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEcoFriendlyToiletries() const;
    void setEcoFriendlyToiletries(const bool &eco_friendly_toiletries);
    bool is_eco_friendly_toiletries_Set() const;
    bool is_eco_friendly_toiletries_Valid() const;

    QString getEcoFriendlyToiletriesException() const;
    void setEcoFriendlyToiletriesException(const QString &eco_friendly_toiletries_exception);
    bool is_eco_friendly_toiletries_exception_Set() const;
    bool is_eco_friendly_toiletries_exception_Valid() const;

    bool isLocallySourcedFoodAndBeverages() const;
    void setLocallySourcedFoodAndBeverages(const bool &locally_sourced_food_and_beverages);
    bool is_locally_sourced_food_and_beverages_Set() const;
    bool is_locally_sourced_food_and_beverages_Valid() const;

    QString getLocallySourcedFoodAndBeveragesException() const;
    void setLocallySourcedFoodAndBeveragesException(const QString &locally_sourced_food_and_beverages_exception);
    bool is_locally_sourced_food_and_beverages_exception_Set() const;
    bool is_locally_sourced_food_and_beverages_exception_Valid() const;

    bool isOrganicCageFreeEggs() const;
    void setOrganicCageFreeEggs(const bool &organic_cage_free_eggs);
    bool is_organic_cage_free_eggs_Set() const;
    bool is_organic_cage_free_eggs_Valid() const;

    QString getOrganicCageFreeEggsException() const;
    void setOrganicCageFreeEggsException(const QString &organic_cage_free_eggs_exception);
    bool is_organic_cage_free_eggs_exception_Set() const;
    bool is_organic_cage_free_eggs_exception_Valid() const;

    bool isOrganicFoodAndBeverages() const;
    void setOrganicFoodAndBeverages(const bool &organic_food_and_beverages);
    bool is_organic_food_and_beverages_Set() const;
    bool is_organic_food_and_beverages_Valid() const;

    QString getOrganicFoodAndBeveragesException() const;
    void setOrganicFoodAndBeveragesException(const QString &organic_food_and_beverages_exception);
    bool is_organic_food_and_beverages_exception_Set() const;
    bool is_organic_food_and_beverages_exception_Valid() const;

    bool isResponsiblePurchasingPolicy() const;
    void setResponsiblePurchasingPolicy(const bool &responsible_purchasing_policy);
    bool is_responsible_purchasing_policy_Set() const;
    bool is_responsible_purchasing_policy_Valid() const;

    QString getResponsiblePurchasingPolicyException() const;
    void setResponsiblePurchasingPolicyException(const QString &responsible_purchasing_policy_exception);
    bool is_responsible_purchasing_policy_exception_Set() const;
    bool is_responsible_purchasing_policy_exception_Valid() const;

    bool isResponsiblySourcesSeafood() const;
    void setResponsiblySourcesSeafood(const bool &responsibly_sources_seafood);
    bool is_responsibly_sources_seafood_Set() const;
    bool is_responsibly_sources_seafood_Valid() const;

    QString getResponsiblySourcesSeafoodException() const;
    void setResponsiblySourcesSeafoodException(const QString &responsibly_sources_seafood_exception);
    bool is_responsibly_sources_seafood_exception_Set() const;
    bool is_responsibly_sources_seafood_exception_Valid() const;

    bool isVeganMeals() const;
    void setVeganMeals(const bool &vegan_meals);
    bool is_vegan_meals_Set() const;
    bool is_vegan_meals_Valid() const;

    QString getVeganMealsException() const;
    void setVeganMealsException(const QString &vegan_meals_exception);
    bool is_vegan_meals_exception_Set() const;
    bool is_vegan_meals_exception_Valid() const;

    bool isVegetarianMeals() const;
    void setVegetarianMeals(const bool &vegetarian_meals);
    bool is_vegetarian_meals_Set() const;
    bool is_vegetarian_meals_Valid() const;

    QString getVegetarianMealsException() const;
    void setVegetarianMealsException(const QString &vegetarian_meals_exception);
    bool is_vegetarian_meals_exception_Set() const;
    bool is_vegetarian_meals_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_eco_friendly_toiletries;
    bool m_eco_friendly_toiletries_isSet;
    bool m_eco_friendly_toiletries_isValid;

    QString m_eco_friendly_toiletries_exception;
    bool m_eco_friendly_toiletries_exception_isSet;
    bool m_eco_friendly_toiletries_exception_isValid;

    bool m_locally_sourced_food_and_beverages;
    bool m_locally_sourced_food_and_beverages_isSet;
    bool m_locally_sourced_food_and_beverages_isValid;

    QString m_locally_sourced_food_and_beverages_exception;
    bool m_locally_sourced_food_and_beverages_exception_isSet;
    bool m_locally_sourced_food_and_beverages_exception_isValid;

    bool m_organic_cage_free_eggs;
    bool m_organic_cage_free_eggs_isSet;
    bool m_organic_cage_free_eggs_isValid;

    QString m_organic_cage_free_eggs_exception;
    bool m_organic_cage_free_eggs_exception_isSet;
    bool m_organic_cage_free_eggs_exception_isValid;

    bool m_organic_food_and_beverages;
    bool m_organic_food_and_beverages_isSet;
    bool m_organic_food_and_beverages_isValid;

    QString m_organic_food_and_beverages_exception;
    bool m_organic_food_and_beverages_exception_isSet;
    bool m_organic_food_and_beverages_exception_isValid;

    bool m_responsible_purchasing_policy;
    bool m_responsible_purchasing_policy_isSet;
    bool m_responsible_purchasing_policy_isValid;

    QString m_responsible_purchasing_policy_exception;
    bool m_responsible_purchasing_policy_exception_isSet;
    bool m_responsible_purchasing_policy_exception_isValid;

    bool m_responsibly_sources_seafood;
    bool m_responsibly_sources_seafood_isSet;
    bool m_responsibly_sources_seafood_isValid;

    QString m_responsibly_sources_seafood_exception;
    bool m_responsibly_sources_seafood_exception_isSet;
    bool m_responsibly_sources_seafood_exception_isValid;

    bool m_vegan_meals;
    bool m_vegan_meals_isSet;
    bool m_vegan_meals_isValid;

    QString m_vegan_meals_exception;
    bool m_vegan_meals_exception_isSet;
    bool m_vegan_meals_exception_isValid;

    bool m_vegetarian_meals;
    bool m_vegetarian_meals_isSet;
    bool m_vegetarian_meals_isValid;

    QString m_vegetarian_meals_exception;
    bool m_vegetarian_meals_exception_isSet;
    bool m_vegetarian_meals_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISustainableSourcing)

#endif // OAISustainableSourcing_H
