/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPools.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPools::OAIPools(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPools::OAIPools() {
    this->initializeModel();
}

OAIPools::~OAIPools() {}

void OAIPools::initializeModel() {

    m_adult_pool_isSet = false;
    m_adult_pool_isValid = false;

    m_adult_pool_exception_isSet = false;
    m_adult_pool_exception_isValid = false;

    m_hot_tub_isSet = false;
    m_hot_tub_isValid = false;

    m_hot_tub_exception_isSet = false;
    m_hot_tub_exception_isValid = false;

    m_indoor_pool_isSet = false;
    m_indoor_pool_isValid = false;

    m_indoor_pool_exception_isSet = false;
    m_indoor_pool_exception_isValid = false;

    m_indoor_pools_count_isSet = false;
    m_indoor_pools_count_isValid = false;

    m_indoor_pools_count_exception_isSet = false;
    m_indoor_pools_count_exception_isValid = false;

    m_lazy_river_isSet = false;
    m_lazy_river_isValid = false;

    m_lazy_river_exception_isSet = false;
    m_lazy_river_exception_isValid = false;

    m_lifeguard_isSet = false;
    m_lifeguard_isValid = false;

    m_lifeguard_exception_isSet = false;
    m_lifeguard_exception_isValid = false;

    m_outdoor_pool_isSet = false;
    m_outdoor_pool_isValid = false;

    m_outdoor_pool_exception_isSet = false;
    m_outdoor_pool_exception_isValid = false;

    m_outdoor_pools_count_isSet = false;
    m_outdoor_pools_count_isValid = false;

    m_outdoor_pools_count_exception_isSet = false;
    m_outdoor_pools_count_exception_isValid = false;

    m_pool_isSet = false;
    m_pool_isValid = false;

    m_pool_exception_isSet = false;
    m_pool_exception_isValid = false;

    m_pools_count_isSet = false;
    m_pools_count_isValid = false;

    m_pools_count_exception_isSet = false;
    m_pools_count_exception_isValid = false;

    m_wading_pool_isSet = false;
    m_wading_pool_isValid = false;

    m_wading_pool_exception_isSet = false;
    m_wading_pool_exception_isValid = false;

    m_water_park_isSet = false;
    m_water_park_isValid = false;

    m_water_park_exception_isSet = false;
    m_water_park_exception_isValid = false;

    m_waterslide_isSet = false;
    m_waterslide_isValid = false;

    m_waterslide_exception_isSet = false;
    m_waterslide_exception_isValid = false;

    m_wave_pool_isSet = false;
    m_wave_pool_isValid = false;

    m_wave_pool_exception_isSet = false;
    m_wave_pool_exception_isValid = false;
}

void OAIPools::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPools::fromJsonObject(QJsonObject json) {

    m_adult_pool_isValid = ::OpenAPI::fromJsonValue(m_adult_pool, json[QString("adultPool")]);
    m_adult_pool_isSet = !json[QString("adultPool")].isNull() && m_adult_pool_isValid;

    m_adult_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_adult_pool_exception, json[QString("adultPoolException")]);
    m_adult_pool_exception_isSet = !json[QString("adultPoolException")].isNull() && m_adult_pool_exception_isValid;

    m_hot_tub_isValid = ::OpenAPI::fromJsonValue(m_hot_tub, json[QString("hotTub")]);
    m_hot_tub_isSet = !json[QString("hotTub")].isNull() && m_hot_tub_isValid;

    m_hot_tub_exception_isValid = ::OpenAPI::fromJsonValue(m_hot_tub_exception, json[QString("hotTubException")]);
    m_hot_tub_exception_isSet = !json[QString("hotTubException")].isNull() && m_hot_tub_exception_isValid;

    m_indoor_pool_isValid = ::OpenAPI::fromJsonValue(m_indoor_pool, json[QString("indoorPool")]);
    m_indoor_pool_isSet = !json[QString("indoorPool")].isNull() && m_indoor_pool_isValid;

    m_indoor_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_indoor_pool_exception, json[QString("indoorPoolException")]);
    m_indoor_pool_exception_isSet = !json[QString("indoorPoolException")].isNull() && m_indoor_pool_exception_isValid;

    m_indoor_pools_count_isValid = ::OpenAPI::fromJsonValue(m_indoor_pools_count, json[QString("indoorPoolsCount")]);
    m_indoor_pools_count_isSet = !json[QString("indoorPoolsCount")].isNull() && m_indoor_pools_count_isValid;

    m_indoor_pools_count_exception_isValid = ::OpenAPI::fromJsonValue(m_indoor_pools_count_exception, json[QString("indoorPoolsCountException")]);
    m_indoor_pools_count_exception_isSet = !json[QString("indoorPoolsCountException")].isNull() && m_indoor_pools_count_exception_isValid;

    m_lazy_river_isValid = ::OpenAPI::fromJsonValue(m_lazy_river, json[QString("lazyRiver")]);
    m_lazy_river_isSet = !json[QString("lazyRiver")].isNull() && m_lazy_river_isValid;

    m_lazy_river_exception_isValid = ::OpenAPI::fromJsonValue(m_lazy_river_exception, json[QString("lazyRiverException")]);
    m_lazy_river_exception_isSet = !json[QString("lazyRiverException")].isNull() && m_lazy_river_exception_isValid;

    m_lifeguard_isValid = ::OpenAPI::fromJsonValue(m_lifeguard, json[QString("lifeguard")]);
    m_lifeguard_isSet = !json[QString("lifeguard")].isNull() && m_lifeguard_isValid;

    m_lifeguard_exception_isValid = ::OpenAPI::fromJsonValue(m_lifeguard_exception, json[QString("lifeguardException")]);
    m_lifeguard_exception_isSet = !json[QString("lifeguardException")].isNull() && m_lifeguard_exception_isValid;

    m_outdoor_pool_isValid = ::OpenAPI::fromJsonValue(m_outdoor_pool, json[QString("outdoorPool")]);
    m_outdoor_pool_isSet = !json[QString("outdoorPool")].isNull() && m_outdoor_pool_isValid;

    m_outdoor_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_outdoor_pool_exception, json[QString("outdoorPoolException")]);
    m_outdoor_pool_exception_isSet = !json[QString("outdoorPoolException")].isNull() && m_outdoor_pool_exception_isValid;

    m_outdoor_pools_count_isValid = ::OpenAPI::fromJsonValue(m_outdoor_pools_count, json[QString("outdoorPoolsCount")]);
    m_outdoor_pools_count_isSet = !json[QString("outdoorPoolsCount")].isNull() && m_outdoor_pools_count_isValid;

    m_outdoor_pools_count_exception_isValid = ::OpenAPI::fromJsonValue(m_outdoor_pools_count_exception, json[QString("outdoorPoolsCountException")]);
    m_outdoor_pools_count_exception_isSet = !json[QString("outdoorPoolsCountException")].isNull() && m_outdoor_pools_count_exception_isValid;

    m_pool_isValid = ::OpenAPI::fromJsonValue(m_pool, json[QString("pool")]);
    m_pool_isSet = !json[QString("pool")].isNull() && m_pool_isValid;

    m_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_pool_exception, json[QString("poolException")]);
    m_pool_exception_isSet = !json[QString("poolException")].isNull() && m_pool_exception_isValid;

    m_pools_count_isValid = ::OpenAPI::fromJsonValue(m_pools_count, json[QString("poolsCount")]);
    m_pools_count_isSet = !json[QString("poolsCount")].isNull() && m_pools_count_isValid;

    m_pools_count_exception_isValid = ::OpenAPI::fromJsonValue(m_pools_count_exception, json[QString("poolsCountException")]);
    m_pools_count_exception_isSet = !json[QString("poolsCountException")].isNull() && m_pools_count_exception_isValid;

    m_wading_pool_isValid = ::OpenAPI::fromJsonValue(m_wading_pool, json[QString("wadingPool")]);
    m_wading_pool_isSet = !json[QString("wadingPool")].isNull() && m_wading_pool_isValid;

    m_wading_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_wading_pool_exception, json[QString("wadingPoolException")]);
    m_wading_pool_exception_isSet = !json[QString("wadingPoolException")].isNull() && m_wading_pool_exception_isValid;

    m_water_park_isValid = ::OpenAPI::fromJsonValue(m_water_park, json[QString("waterPark")]);
    m_water_park_isSet = !json[QString("waterPark")].isNull() && m_water_park_isValid;

    m_water_park_exception_isValid = ::OpenAPI::fromJsonValue(m_water_park_exception, json[QString("waterParkException")]);
    m_water_park_exception_isSet = !json[QString("waterParkException")].isNull() && m_water_park_exception_isValid;

    m_waterslide_isValid = ::OpenAPI::fromJsonValue(m_waterslide, json[QString("waterslide")]);
    m_waterslide_isSet = !json[QString("waterslide")].isNull() && m_waterslide_isValid;

    m_waterslide_exception_isValid = ::OpenAPI::fromJsonValue(m_waterslide_exception, json[QString("waterslideException")]);
    m_waterslide_exception_isSet = !json[QString("waterslideException")].isNull() && m_waterslide_exception_isValid;

    m_wave_pool_isValid = ::OpenAPI::fromJsonValue(m_wave_pool, json[QString("wavePool")]);
    m_wave_pool_isSet = !json[QString("wavePool")].isNull() && m_wave_pool_isValid;

    m_wave_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_wave_pool_exception, json[QString("wavePoolException")]);
    m_wave_pool_exception_isSet = !json[QString("wavePoolException")].isNull() && m_wave_pool_exception_isValid;
}

QString OAIPools::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPools::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_pool_isSet) {
        obj.insert(QString("adultPool"), ::OpenAPI::toJsonValue(m_adult_pool));
    }
    if (m_adult_pool_exception_isSet) {
        obj.insert(QString("adultPoolException"), ::OpenAPI::toJsonValue(m_adult_pool_exception));
    }
    if (m_hot_tub_isSet) {
        obj.insert(QString("hotTub"), ::OpenAPI::toJsonValue(m_hot_tub));
    }
    if (m_hot_tub_exception_isSet) {
        obj.insert(QString("hotTubException"), ::OpenAPI::toJsonValue(m_hot_tub_exception));
    }
    if (m_indoor_pool_isSet) {
        obj.insert(QString("indoorPool"), ::OpenAPI::toJsonValue(m_indoor_pool));
    }
    if (m_indoor_pool_exception_isSet) {
        obj.insert(QString("indoorPoolException"), ::OpenAPI::toJsonValue(m_indoor_pool_exception));
    }
    if (m_indoor_pools_count_isSet) {
        obj.insert(QString("indoorPoolsCount"), ::OpenAPI::toJsonValue(m_indoor_pools_count));
    }
    if (m_indoor_pools_count_exception_isSet) {
        obj.insert(QString("indoorPoolsCountException"), ::OpenAPI::toJsonValue(m_indoor_pools_count_exception));
    }
    if (m_lazy_river_isSet) {
        obj.insert(QString("lazyRiver"), ::OpenAPI::toJsonValue(m_lazy_river));
    }
    if (m_lazy_river_exception_isSet) {
        obj.insert(QString("lazyRiverException"), ::OpenAPI::toJsonValue(m_lazy_river_exception));
    }
    if (m_lifeguard_isSet) {
        obj.insert(QString("lifeguard"), ::OpenAPI::toJsonValue(m_lifeguard));
    }
    if (m_lifeguard_exception_isSet) {
        obj.insert(QString("lifeguardException"), ::OpenAPI::toJsonValue(m_lifeguard_exception));
    }
    if (m_outdoor_pool_isSet) {
        obj.insert(QString("outdoorPool"), ::OpenAPI::toJsonValue(m_outdoor_pool));
    }
    if (m_outdoor_pool_exception_isSet) {
        obj.insert(QString("outdoorPoolException"), ::OpenAPI::toJsonValue(m_outdoor_pool_exception));
    }
    if (m_outdoor_pools_count_isSet) {
        obj.insert(QString("outdoorPoolsCount"), ::OpenAPI::toJsonValue(m_outdoor_pools_count));
    }
    if (m_outdoor_pools_count_exception_isSet) {
        obj.insert(QString("outdoorPoolsCountException"), ::OpenAPI::toJsonValue(m_outdoor_pools_count_exception));
    }
    if (m_pool_isSet) {
        obj.insert(QString("pool"), ::OpenAPI::toJsonValue(m_pool));
    }
    if (m_pool_exception_isSet) {
        obj.insert(QString("poolException"), ::OpenAPI::toJsonValue(m_pool_exception));
    }
    if (m_pools_count_isSet) {
        obj.insert(QString("poolsCount"), ::OpenAPI::toJsonValue(m_pools_count));
    }
    if (m_pools_count_exception_isSet) {
        obj.insert(QString("poolsCountException"), ::OpenAPI::toJsonValue(m_pools_count_exception));
    }
    if (m_wading_pool_isSet) {
        obj.insert(QString("wadingPool"), ::OpenAPI::toJsonValue(m_wading_pool));
    }
    if (m_wading_pool_exception_isSet) {
        obj.insert(QString("wadingPoolException"), ::OpenAPI::toJsonValue(m_wading_pool_exception));
    }
    if (m_water_park_isSet) {
        obj.insert(QString("waterPark"), ::OpenAPI::toJsonValue(m_water_park));
    }
    if (m_water_park_exception_isSet) {
        obj.insert(QString("waterParkException"), ::OpenAPI::toJsonValue(m_water_park_exception));
    }
    if (m_waterslide_isSet) {
        obj.insert(QString("waterslide"), ::OpenAPI::toJsonValue(m_waterslide));
    }
    if (m_waterslide_exception_isSet) {
        obj.insert(QString("waterslideException"), ::OpenAPI::toJsonValue(m_waterslide_exception));
    }
    if (m_wave_pool_isSet) {
        obj.insert(QString("wavePool"), ::OpenAPI::toJsonValue(m_wave_pool));
    }
    if (m_wave_pool_exception_isSet) {
        obj.insert(QString("wavePoolException"), ::OpenAPI::toJsonValue(m_wave_pool_exception));
    }
    return obj;
}

bool OAIPools::isAdultPool() const {
    return m_adult_pool;
}
void OAIPools::setAdultPool(const bool &adult_pool) {
    m_adult_pool = adult_pool;
    m_adult_pool_isSet = true;
}

bool OAIPools::is_adult_pool_Set() const{
    return m_adult_pool_isSet;
}

bool OAIPools::is_adult_pool_Valid() const{
    return m_adult_pool_isValid;
}

QString OAIPools::getAdultPoolException() const {
    return m_adult_pool_exception;
}
void OAIPools::setAdultPoolException(const QString &adult_pool_exception) {
    m_adult_pool_exception = adult_pool_exception;
    m_adult_pool_exception_isSet = true;
}

bool OAIPools::is_adult_pool_exception_Set() const{
    return m_adult_pool_exception_isSet;
}

bool OAIPools::is_adult_pool_exception_Valid() const{
    return m_adult_pool_exception_isValid;
}

bool OAIPools::isHotTub() const {
    return m_hot_tub;
}
void OAIPools::setHotTub(const bool &hot_tub) {
    m_hot_tub = hot_tub;
    m_hot_tub_isSet = true;
}

bool OAIPools::is_hot_tub_Set() const{
    return m_hot_tub_isSet;
}

bool OAIPools::is_hot_tub_Valid() const{
    return m_hot_tub_isValid;
}

QString OAIPools::getHotTubException() const {
    return m_hot_tub_exception;
}
void OAIPools::setHotTubException(const QString &hot_tub_exception) {
    m_hot_tub_exception = hot_tub_exception;
    m_hot_tub_exception_isSet = true;
}

bool OAIPools::is_hot_tub_exception_Set() const{
    return m_hot_tub_exception_isSet;
}

bool OAIPools::is_hot_tub_exception_Valid() const{
    return m_hot_tub_exception_isValid;
}

bool OAIPools::isIndoorPool() const {
    return m_indoor_pool;
}
void OAIPools::setIndoorPool(const bool &indoor_pool) {
    m_indoor_pool = indoor_pool;
    m_indoor_pool_isSet = true;
}

bool OAIPools::is_indoor_pool_Set() const{
    return m_indoor_pool_isSet;
}

bool OAIPools::is_indoor_pool_Valid() const{
    return m_indoor_pool_isValid;
}

QString OAIPools::getIndoorPoolException() const {
    return m_indoor_pool_exception;
}
void OAIPools::setIndoorPoolException(const QString &indoor_pool_exception) {
    m_indoor_pool_exception = indoor_pool_exception;
    m_indoor_pool_exception_isSet = true;
}

bool OAIPools::is_indoor_pool_exception_Set() const{
    return m_indoor_pool_exception_isSet;
}

bool OAIPools::is_indoor_pool_exception_Valid() const{
    return m_indoor_pool_exception_isValid;
}

qint32 OAIPools::getIndoorPoolsCount() const {
    return m_indoor_pools_count;
}
void OAIPools::setIndoorPoolsCount(const qint32 &indoor_pools_count) {
    m_indoor_pools_count = indoor_pools_count;
    m_indoor_pools_count_isSet = true;
}

bool OAIPools::is_indoor_pools_count_Set() const{
    return m_indoor_pools_count_isSet;
}

bool OAIPools::is_indoor_pools_count_Valid() const{
    return m_indoor_pools_count_isValid;
}

QString OAIPools::getIndoorPoolsCountException() const {
    return m_indoor_pools_count_exception;
}
void OAIPools::setIndoorPoolsCountException(const QString &indoor_pools_count_exception) {
    m_indoor_pools_count_exception = indoor_pools_count_exception;
    m_indoor_pools_count_exception_isSet = true;
}

bool OAIPools::is_indoor_pools_count_exception_Set() const{
    return m_indoor_pools_count_exception_isSet;
}

bool OAIPools::is_indoor_pools_count_exception_Valid() const{
    return m_indoor_pools_count_exception_isValid;
}

bool OAIPools::isLazyRiver() const {
    return m_lazy_river;
}
void OAIPools::setLazyRiver(const bool &lazy_river) {
    m_lazy_river = lazy_river;
    m_lazy_river_isSet = true;
}

bool OAIPools::is_lazy_river_Set() const{
    return m_lazy_river_isSet;
}

bool OAIPools::is_lazy_river_Valid() const{
    return m_lazy_river_isValid;
}

QString OAIPools::getLazyRiverException() const {
    return m_lazy_river_exception;
}
void OAIPools::setLazyRiverException(const QString &lazy_river_exception) {
    m_lazy_river_exception = lazy_river_exception;
    m_lazy_river_exception_isSet = true;
}

bool OAIPools::is_lazy_river_exception_Set() const{
    return m_lazy_river_exception_isSet;
}

bool OAIPools::is_lazy_river_exception_Valid() const{
    return m_lazy_river_exception_isValid;
}

bool OAIPools::isLifeguard() const {
    return m_lifeguard;
}
void OAIPools::setLifeguard(const bool &lifeguard) {
    m_lifeguard = lifeguard;
    m_lifeguard_isSet = true;
}

bool OAIPools::is_lifeguard_Set() const{
    return m_lifeguard_isSet;
}

bool OAIPools::is_lifeguard_Valid() const{
    return m_lifeguard_isValid;
}

QString OAIPools::getLifeguardException() const {
    return m_lifeguard_exception;
}
void OAIPools::setLifeguardException(const QString &lifeguard_exception) {
    m_lifeguard_exception = lifeguard_exception;
    m_lifeguard_exception_isSet = true;
}

bool OAIPools::is_lifeguard_exception_Set() const{
    return m_lifeguard_exception_isSet;
}

bool OAIPools::is_lifeguard_exception_Valid() const{
    return m_lifeguard_exception_isValid;
}

bool OAIPools::isOutdoorPool() const {
    return m_outdoor_pool;
}
void OAIPools::setOutdoorPool(const bool &outdoor_pool) {
    m_outdoor_pool = outdoor_pool;
    m_outdoor_pool_isSet = true;
}

bool OAIPools::is_outdoor_pool_Set() const{
    return m_outdoor_pool_isSet;
}

bool OAIPools::is_outdoor_pool_Valid() const{
    return m_outdoor_pool_isValid;
}

QString OAIPools::getOutdoorPoolException() const {
    return m_outdoor_pool_exception;
}
void OAIPools::setOutdoorPoolException(const QString &outdoor_pool_exception) {
    m_outdoor_pool_exception = outdoor_pool_exception;
    m_outdoor_pool_exception_isSet = true;
}

bool OAIPools::is_outdoor_pool_exception_Set() const{
    return m_outdoor_pool_exception_isSet;
}

bool OAIPools::is_outdoor_pool_exception_Valid() const{
    return m_outdoor_pool_exception_isValid;
}

qint32 OAIPools::getOutdoorPoolsCount() const {
    return m_outdoor_pools_count;
}
void OAIPools::setOutdoorPoolsCount(const qint32 &outdoor_pools_count) {
    m_outdoor_pools_count = outdoor_pools_count;
    m_outdoor_pools_count_isSet = true;
}

bool OAIPools::is_outdoor_pools_count_Set() const{
    return m_outdoor_pools_count_isSet;
}

bool OAIPools::is_outdoor_pools_count_Valid() const{
    return m_outdoor_pools_count_isValid;
}

QString OAIPools::getOutdoorPoolsCountException() const {
    return m_outdoor_pools_count_exception;
}
void OAIPools::setOutdoorPoolsCountException(const QString &outdoor_pools_count_exception) {
    m_outdoor_pools_count_exception = outdoor_pools_count_exception;
    m_outdoor_pools_count_exception_isSet = true;
}

bool OAIPools::is_outdoor_pools_count_exception_Set() const{
    return m_outdoor_pools_count_exception_isSet;
}

bool OAIPools::is_outdoor_pools_count_exception_Valid() const{
    return m_outdoor_pools_count_exception_isValid;
}

bool OAIPools::isPool() const {
    return m_pool;
}
void OAIPools::setPool(const bool &pool) {
    m_pool = pool;
    m_pool_isSet = true;
}

bool OAIPools::is_pool_Set() const{
    return m_pool_isSet;
}

bool OAIPools::is_pool_Valid() const{
    return m_pool_isValid;
}

QString OAIPools::getPoolException() const {
    return m_pool_exception;
}
void OAIPools::setPoolException(const QString &pool_exception) {
    m_pool_exception = pool_exception;
    m_pool_exception_isSet = true;
}

bool OAIPools::is_pool_exception_Set() const{
    return m_pool_exception_isSet;
}

bool OAIPools::is_pool_exception_Valid() const{
    return m_pool_exception_isValid;
}

qint32 OAIPools::getPoolsCount() const {
    return m_pools_count;
}
void OAIPools::setPoolsCount(const qint32 &pools_count) {
    m_pools_count = pools_count;
    m_pools_count_isSet = true;
}

bool OAIPools::is_pools_count_Set() const{
    return m_pools_count_isSet;
}

bool OAIPools::is_pools_count_Valid() const{
    return m_pools_count_isValid;
}

QString OAIPools::getPoolsCountException() const {
    return m_pools_count_exception;
}
void OAIPools::setPoolsCountException(const QString &pools_count_exception) {
    m_pools_count_exception = pools_count_exception;
    m_pools_count_exception_isSet = true;
}

bool OAIPools::is_pools_count_exception_Set() const{
    return m_pools_count_exception_isSet;
}

bool OAIPools::is_pools_count_exception_Valid() const{
    return m_pools_count_exception_isValid;
}

bool OAIPools::isWadingPool() const {
    return m_wading_pool;
}
void OAIPools::setWadingPool(const bool &wading_pool) {
    m_wading_pool = wading_pool;
    m_wading_pool_isSet = true;
}

bool OAIPools::is_wading_pool_Set() const{
    return m_wading_pool_isSet;
}

bool OAIPools::is_wading_pool_Valid() const{
    return m_wading_pool_isValid;
}

QString OAIPools::getWadingPoolException() const {
    return m_wading_pool_exception;
}
void OAIPools::setWadingPoolException(const QString &wading_pool_exception) {
    m_wading_pool_exception = wading_pool_exception;
    m_wading_pool_exception_isSet = true;
}

bool OAIPools::is_wading_pool_exception_Set() const{
    return m_wading_pool_exception_isSet;
}

bool OAIPools::is_wading_pool_exception_Valid() const{
    return m_wading_pool_exception_isValid;
}

bool OAIPools::isWaterPark() const {
    return m_water_park;
}
void OAIPools::setWaterPark(const bool &water_park) {
    m_water_park = water_park;
    m_water_park_isSet = true;
}

bool OAIPools::is_water_park_Set() const{
    return m_water_park_isSet;
}

bool OAIPools::is_water_park_Valid() const{
    return m_water_park_isValid;
}

QString OAIPools::getWaterParkException() const {
    return m_water_park_exception;
}
void OAIPools::setWaterParkException(const QString &water_park_exception) {
    m_water_park_exception = water_park_exception;
    m_water_park_exception_isSet = true;
}

bool OAIPools::is_water_park_exception_Set() const{
    return m_water_park_exception_isSet;
}

bool OAIPools::is_water_park_exception_Valid() const{
    return m_water_park_exception_isValid;
}

bool OAIPools::isWaterslide() const {
    return m_waterslide;
}
void OAIPools::setWaterslide(const bool &waterslide) {
    m_waterslide = waterslide;
    m_waterslide_isSet = true;
}

bool OAIPools::is_waterslide_Set() const{
    return m_waterslide_isSet;
}

bool OAIPools::is_waterslide_Valid() const{
    return m_waterslide_isValid;
}

QString OAIPools::getWaterslideException() const {
    return m_waterslide_exception;
}
void OAIPools::setWaterslideException(const QString &waterslide_exception) {
    m_waterslide_exception = waterslide_exception;
    m_waterslide_exception_isSet = true;
}

bool OAIPools::is_waterslide_exception_Set() const{
    return m_waterslide_exception_isSet;
}

bool OAIPools::is_waterslide_exception_Valid() const{
    return m_waterslide_exception_isValid;
}

bool OAIPools::isWavePool() const {
    return m_wave_pool;
}
void OAIPools::setWavePool(const bool &wave_pool) {
    m_wave_pool = wave_pool;
    m_wave_pool_isSet = true;
}

bool OAIPools::is_wave_pool_Set() const{
    return m_wave_pool_isSet;
}

bool OAIPools::is_wave_pool_Valid() const{
    return m_wave_pool_isValid;
}

QString OAIPools::getWavePoolException() const {
    return m_wave_pool_exception;
}
void OAIPools::setWavePoolException(const QString &wave_pool_exception) {
    m_wave_pool_exception = wave_pool_exception;
    m_wave_pool_exception_isSet = true;
}

bool OAIPools::is_wave_pool_exception_Set() const{
    return m_wave_pool_exception_isSet;
}

bool OAIPools::is_wave_pool_exception_Valid() const{
    return m_wave_pool_exception_isValid;
}

bool OAIPools::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adult_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_tub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_tub_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_pools_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_pools_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lazy_river_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lazy_river_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifeguard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifeguard_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_pools_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_pools_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pools_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pools_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wading_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wading_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_park_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_park_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waterslide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waterslide_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wave_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wave_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPools::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
