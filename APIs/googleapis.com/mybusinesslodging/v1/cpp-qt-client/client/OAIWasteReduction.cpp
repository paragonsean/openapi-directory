/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWasteReduction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWasteReduction::OAIWasteReduction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWasteReduction::OAIWasteReduction() {
    this->initializeModel();
}

OAIWasteReduction::~OAIWasteReduction() {}

void OAIWasteReduction::initializeModel() {

    m_compostable_food_containers_and_cutlery_isSet = false;
    m_compostable_food_containers_and_cutlery_isValid = false;

    m_compostable_food_containers_and_cutlery_exception_isSet = false;
    m_compostable_food_containers_and_cutlery_exception_isValid = false;

    m_composts_excess_food_isSet = false;
    m_composts_excess_food_isValid = false;

    m_composts_excess_food_exception_isSet = false;
    m_composts_excess_food_exception_isValid = false;

    m_donates_excess_food_isSet = false;
    m_donates_excess_food_isValid = false;

    m_donates_excess_food_exception_isSet = false;
    m_donates_excess_food_exception_isValid = false;

    m_food_waste_reduction_program_isSet = false;
    m_food_waste_reduction_program_isValid = false;

    m_food_waste_reduction_program_exception_isSet = false;
    m_food_waste_reduction_program_exception_isValid = false;

    m_no_single_use_plastic_straws_isSet = false;
    m_no_single_use_plastic_straws_isValid = false;

    m_no_single_use_plastic_straws_exception_isSet = false;
    m_no_single_use_plastic_straws_exception_isValid = false;

    m_no_single_use_plastic_water_bottles_isSet = false;
    m_no_single_use_plastic_water_bottles_isValid = false;

    m_no_single_use_plastic_water_bottles_exception_isSet = false;
    m_no_single_use_plastic_water_bottles_exception_isValid = false;

    m_no_styrofoam_food_containers_isSet = false;
    m_no_styrofoam_food_containers_isValid = false;

    m_no_styrofoam_food_containers_exception_isSet = false;
    m_no_styrofoam_food_containers_exception_isValid = false;

    m_recycling_program_isSet = false;
    m_recycling_program_isValid = false;

    m_recycling_program_exception_isSet = false;
    m_recycling_program_exception_isValid = false;

    m_refillable_toiletry_containers_isSet = false;
    m_refillable_toiletry_containers_isValid = false;

    m_refillable_toiletry_containers_exception_isSet = false;
    m_refillable_toiletry_containers_exception_isValid = false;

    m_safely_disposes_batteries_isSet = false;
    m_safely_disposes_batteries_isValid = false;

    m_safely_disposes_batteries_exception_isSet = false;
    m_safely_disposes_batteries_exception_isValid = false;

    m_safely_disposes_electronics_isSet = false;
    m_safely_disposes_electronics_isValid = false;

    m_safely_disposes_electronics_exception_isSet = false;
    m_safely_disposes_electronics_exception_isValid = false;

    m_safely_disposes_lightbulbs_isSet = false;
    m_safely_disposes_lightbulbs_isValid = false;

    m_safely_disposes_lightbulbs_exception_isSet = false;
    m_safely_disposes_lightbulbs_exception_isValid = false;

    m_safely_handles_hazardous_substances_isSet = false;
    m_safely_handles_hazardous_substances_isValid = false;

    m_safely_handles_hazardous_substances_exception_isSet = false;
    m_safely_handles_hazardous_substances_exception_isValid = false;

    m_soap_donation_program_isSet = false;
    m_soap_donation_program_isValid = false;

    m_soap_donation_program_exception_isSet = false;
    m_soap_donation_program_exception_isValid = false;

    m_toiletry_donation_program_isSet = false;
    m_toiletry_donation_program_isValid = false;

    m_toiletry_donation_program_exception_isSet = false;
    m_toiletry_donation_program_exception_isValid = false;

    m_water_bottle_filling_stations_isSet = false;
    m_water_bottle_filling_stations_isValid = false;

    m_water_bottle_filling_stations_exception_isSet = false;
    m_water_bottle_filling_stations_exception_isValid = false;
}

void OAIWasteReduction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWasteReduction::fromJsonObject(QJsonObject json) {

    m_compostable_food_containers_and_cutlery_isValid = ::OpenAPI::fromJsonValue(m_compostable_food_containers_and_cutlery, json[QString("compostableFoodContainersAndCutlery")]);
    m_compostable_food_containers_and_cutlery_isSet = !json[QString("compostableFoodContainersAndCutlery")].isNull() && m_compostable_food_containers_and_cutlery_isValid;

    m_compostable_food_containers_and_cutlery_exception_isValid = ::OpenAPI::fromJsonValue(m_compostable_food_containers_and_cutlery_exception, json[QString("compostableFoodContainersAndCutleryException")]);
    m_compostable_food_containers_and_cutlery_exception_isSet = !json[QString("compostableFoodContainersAndCutleryException")].isNull() && m_compostable_food_containers_and_cutlery_exception_isValid;

    m_composts_excess_food_isValid = ::OpenAPI::fromJsonValue(m_composts_excess_food, json[QString("compostsExcessFood")]);
    m_composts_excess_food_isSet = !json[QString("compostsExcessFood")].isNull() && m_composts_excess_food_isValid;

    m_composts_excess_food_exception_isValid = ::OpenAPI::fromJsonValue(m_composts_excess_food_exception, json[QString("compostsExcessFoodException")]);
    m_composts_excess_food_exception_isSet = !json[QString("compostsExcessFoodException")].isNull() && m_composts_excess_food_exception_isValid;

    m_donates_excess_food_isValid = ::OpenAPI::fromJsonValue(m_donates_excess_food, json[QString("donatesExcessFood")]);
    m_donates_excess_food_isSet = !json[QString("donatesExcessFood")].isNull() && m_donates_excess_food_isValid;

    m_donates_excess_food_exception_isValid = ::OpenAPI::fromJsonValue(m_donates_excess_food_exception, json[QString("donatesExcessFoodException")]);
    m_donates_excess_food_exception_isSet = !json[QString("donatesExcessFoodException")].isNull() && m_donates_excess_food_exception_isValid;

    m_food_waste_reduction_program_isValid = ::OpenAPI::fromJsonValue(m_food_waste_reduction_program, json[QString("foodWasteReductionProgram")]);
    m_food_waste_reduction_program_isSet = !json[QString("foodWasteReductionProgram")].isNull() && m_food_waste_reduction_program_isValid;

    m_food_waste_reduction_program_exception_isValid = ::OpenAPI::fromJsonValue(m_food_waste_reduction_program_exception, json[QString("foodWasteReductionProgramException")]);
    m_food_waste_reduction_program_exception_isSet = !json[QString("foodWasteReductionProgramException")].isNull() && m_food_waste_reduction_program_exception_isValid;

    m_no_single_use_plastic_straws_isValid = ::OpenAPI::fromJsonValue(m_no_single_use_plastic_straws, json[QString("noSingleUsePlasticStraws")]);
    m_no_single_use_plastic_straws_isSet = !json[QString("noSingleUsePlasticStraws")].isNull() && m_no_single_use_plastic_straws_isValid;

    m_no_single_use_plastic_straws_exception_isValid = ::OpenAPI::fromJsonValue(m_no_single_use_plastic_straws_exception, json[QString("noSingleUsePlasticStrawsException")]);
    m_no_single_use_plastic_straws_exception_isSet = !json[QString("noSingleUsePlasticStrawsException")].isNull() && m_no_single_use_plastic_straws_exception_isValid;

    m_no_single_use_plastic_water_bottles_isValid = ::OpenAPI::fromJsonValue(m_no_single_use_plastic_water_bottles, json[QString("noSingleUsePlasticWaterBottles")]);
    m_no_single_use_plastic_water_bottles_isSet = !json[QString("noSingleUsePlasticWaterBottles")].isNull() && m_no_single_use_plastic_water_bottles_isValid;

    m_no_single_use_plastic_water_bottles_exception_isValid = ::OpenAPI::fromJsonValue(m_no_single_use_plastic_water_bottles_exception, json[QString("noSingleUsePlasticWaterBottlesException")]);
    m_no_single_use_plastic_water_bottles_exception_isSet = !json[QString("noSingleUsePlasticWaterBottlesException")].isNull() && m_no_single_use_plastic_water_bottles_exception_isValid;

    m_no_styrofoam_food_containers_isValid = ::OpenAPI::fromJsonValue(m_no_styrofoam_food_containers, json[QString("noStyrofoamFoodContainers")]);
    m_no_styrofoam_food_containers_isSet = !json[QString("noStyrofoamFoodContainers")].isNull() && m_no_styrofoam_food_containers_isValid;

    m_no_styrofoam_food_containers_exception_isValid = ::OpenAPI::fromJsonValue(m_no_styrofoam_food_containers_exception, json[QString("noStyrofoamFoodContainersException")]);
    m_no_styrofoam_food_containers_exception_isSet = !json[QString("noStyrofoamFoodContainersException")].isNull() && m_no_styrofoam_food_containers_exception_isValid;

    m_recycling_program_isValid = ::OpenAPI::fromJsonValue(m_recycling_program, json[QString("recyclingProgram")]);
    m_recycling_program_isSet = !json[QString("recyclingProgram")].isNull() && m_recycling_program_isValid;

    m_recycling_program_exception_isValid = ::OpenAPI::fromJsonValue(m_recycling_program_exception, json[QString("recyclingProgramException")]);
    m_recycling_program_exception_isSet = !json[QString("recyclingProgramException")].isNull() && m_recycling_program_exception_isValid;

    m_refillable_toiletry_containers_isValid = ::OpenAPI::fromJsonValue(m_refillable_toiletry_containers, json[QString("refillableToiletryContainers")]);
    m_refillable_toiletry_containers_isSet = !json[QString("refillableToiletryContainers")].isNull() && m_refillable_toiletry_containers_isValid;

    m_refillable_toiletry_containers_exception_isValid = ::OpenAPI::fromJsonValue(m_refillable_toiletry_containers_exception, json[QString("refillableToiletryContainersException")]);
    m_refillable_toiletry_containers_exception_isSet = !json[QString("refillableToiletryContainersException")].isNull() && m_refillable_toiletry_containers_exception_isValid;

    m_safely_disposes_batteries_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_batteries, json[QString("safelyDisposesBatteries")]);
    m_safely_disposes_batteries_isSet = !json[QString("safelyDisposesBatteries")].isNull() && m_safely_disposes_batteries_isValid;

    m_safely_disposes_batteries_exception_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_batteries_exception, json[QString("safelyDisposesBatteriesException")]);
    m_safely_disposes_batteries_exception_isSet = !json[QString("safelyDisposesBatteriesException")].isNull() && m_safely_disposes_batteries_exception_isValid;

    m_safely_disposes_electronics_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_electronics, json[QString("safelyDisposesElectronics")]);
    m_safely_disposes_electronics_isSet = !json[QString("safelyDisposesElectronics")].isNull() && m_safely_disposes_electronics_isValid;

    m_safely_disposes_electronics_exception_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_electronics_exception, json[QString("safelyDisposesElectronicsException")]);
    m_safely_disposes_electronics_exception_isSet = !json[QString("safelyDisposesElectronicsException")].isNull() && m_safely_disposes_electronics_exception_isValid;

    m_safely_disposes_lightbulbs_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_lightbulbs, json[QString("safelyDisposesLightbulbs")]);
    m_safely_disposes_lightbulbs_isSet = !json[QString("safelyDisposesLightbulbs")].isNull() && m_safely_disposes_lightbulbs_isValid;

    m_safely_disposes_lightbulbs_exception_isValid = ::OpenAPI::fromJsonValue(m_safely_disposes_lightbulbs_exception, json[QString("safelyDisposesLightbulbsException")]);
    m_safely_disposes_lightbulbs_exception_isSet = !json[QString("safelyDisposesLightbulbsException")].isNull() && m_safely_disposes_lightbulbs_exception_isValid;

    m_safely_handles_hazardous_substances_isValid = ::OpenAPI::fromJsonValue(m_safely_handles_hazardous_substances, json[QString("safelyHandlesHazardousSubstances")]);
    m_safely_handles_hazardous_substances_isSet = !json[QString("safelyHandlesHazardousSubstances")].isNull() && m_safely_handles_hazardous_substances_isValid;

    m_safely_handles_hazardous_substances_exception_isValid = ::OpenAPI::fromJsonValue(m_safely_handles_hazardous_substances_exception, json[QString("safelyHandlesHazardousSubstancesException")]);
    m_safely_handles_hazardous_substances_exception_isSet = !json[QString("safelyHandlesHazardousSubstancesException")].isNull() && m_safely_handles_hazardous_substances_exception_isValid;

    m_soap_donation_program_isValid = ::OpenAPI::fromJsonValue(m_soap_donation_program, json[QString("soapDonationProgram")]);
    m_soap_donation_program_isSet = !json[QString("soapDonationProgram")].isNull() && m_soap_donation_program_isValid;

    m_soap_donation_program_exception_isValid = ::OpenAPI::fromJsonValue(m_soap_donation_program_exception, json[QString("soapDonationProgramException")]);
    m_soap_donation_program_exception_isSet = !json[QString("soapDonationProgramException")].isNull() && m_soap_donation_program_exception_isValid;

    m_toiletry_donation_program_isValid = ::OpenAPI::fromJsonValue(m_toiletry_donation_program, json[QString("toiletryDonationProgram")]);
    m_toiletry_donation_program_isSet = !json[QString("toiletryDonationProgram")].isNull() && m_toiletry_donation_program_isValid;

    m_toiletry_donation_program_exception_isValid = ::OpenAPI::fromJsonValue(m_toiletry_donation_program_exception, json[QString("toiletryDonationProgramException")]);
    m_toiletry_donation_program_exception_isSet = !json[QString("toiletryDonationProgramException")].isNull() && m_toiletry_donation_program_exception_isValid;

    m_water_bottle_filling_stations_isValid = ::OpenAPI::fromJsonValue(m_water_bottle_filling_stations, json[QString("waterBottleFillingStations")]);
    m_water_bottle_filling_stations_isSet = !json[QString("waterBottleFillingStations")].isNull() && m_water_bottle_filling_stations_isValid;

    m_water_bottle_filling_stations_exception_isValid = ::OpenAPI::fromJsonValue(m_water_bottle_filling_stations_exception, json[QString("waterBottleFillingStationsException")]);
    m_water_bottle_filling_stations_exception_isSet = !json[QString("waterBottleFillingStationsException")].isNull() && m_water_bottle_filling_stations_exception_isValid;
}

QString OAIWasteReduction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWasteReduction::asJsonObject() const {
    QJsonObject obj;
    if (m_compostable_food_containers_and_cutlery_isSet) {
        obj.insert(QString("compostableFoodContainersAndCutlery"), ::OpenAPI::toJsonValue(m_compostable_food_containers_and_cutlery));
    }
    if (m_compostable_food_containers_and_cutlery_exception_isSet) {
        obj.insert(QString("compostableFoodContainersAndCutleryException"), ::OpenAPI::toJsonValue(m_compostable_food_containers_and_cutlery_exception));
    }
    if (m_composts_excess_food_isSet) {
        obj.insert(QString("compostsExcessFood"), ::OpenAPI::toJsonValue(m_composts_excess_food));
    }
    if (m_composts_excess_food_exception_isSet) {
        obj.insert(QString("compostsExcessFoodException"), ::OpenAPI::toJsonValue(m_composts_excess_food_exception));
    }
    if (m_donates_excess_food_isSet) {
        obj.insert(QString("donatesExcessFood"), ::OpenAPI::toJsonValue(m_donates_excess_food));
    }
    if (m_donates_excess_food_exception_isSet) {
        obj.insert(QString("donatesExcessFoodException"), ::OpenAPI::toJsonValue(m_donates_excess_food_exception));
    }
    if (m_food_waste_reduction_program_isSet) {
        obj.insert(QString("foodWasteReductionProgram"), ::OpenAPI::toJsonValue(m_food_waste_reduction_program));
    }
    if (m_food_waste_reduction_program_exception_isSet) {
        obj.insert(QString("foodWasteReductionProgramException"), ::OpenAPI::toJsonValue(m_food_waste_reduction_program_exception));
    }
    if (m_no_single_use_plastic_straws_isSet) {
        obj.insert(QString("noSingleUsePlasticStraws"), ::OpenAPI::toJsonValue(m_no_single_use_plastic_straws));
    }
    if (m_no_single_use_plastic_straws_exception_isSet) {
        obj.insert(QString("noSingleUsePlasticStrawsException"), ::OpenAPI::toJsonValue(m_no_single_use_plastic_straws_exception));
    }
    if (m_no_single_use_plastic_water_bottles_isSet) {
        obj.insert(QString("noSingleUsePlasticWaterBottles"), ::OpenAPI::toJsonValue(m_no_single_use_plastic_water_bottles));
    }
    if (m_no_single_use_plastic_water_bottles_exception_isSet) {
        obj.insert(QString("noSingleUsePlasticWaterBottlesException"), ::OpenAPI::toJsonValue(m_no_single_use_plastic_water_bottles_exception));
    }
    if (m_no_styrofoam_food_containers_isSet) {
        obj.insert(QString("noStyrofoamFoodContainers"), ::OpenAPI::toJsonValue(m_no_styrofoam_food_containers));
    }
    if (m_no_styrofoam_food_containers_exception_isSet) {
        obj.insert(QString("noStyrofoamFoodContainersException"), ::OpenAPI::toJsonValue(m_no_styrofoam_food_containers_exception));
    }
    if (m_recycling_program_isSet) {
        obj.insert(QString("recyclingProgram"), ::OpenAPI::toJsonValue(m_recycling_program));
    }
    if (m_recycling_program_exception_isSet) {
        obj.insert(QString("recyclingProgramException"), ::OpenAPI::toJsonValue(m_recycling_program_exception));
    }
    if (m_refillable_toiletry_containers_isSet) {
        obj.insert(QString("refillableToiletryContainers"), ::OpenAPI::toJsonValue(m_refillable_toiletry_containers));
    }
    if (m_refillable_toiletry_containers_exception_isSet) {
        obj.insert(QString("refillableToiletryContainersException"), ::OpenAPI::toJsonValue(m_refillable_toiletry_containers_exception));
    }
    if (m_safely_disposes_batteries_isSet) {
        obj.insert(QString("safelyDisposesBatteries"), ::OpenAPI::toJsonValue(m_safely_disposes_batteries));
    }
    if (m_safely_disposes_batteries_exception_isSet) {
        obj.insert(QString("safelyDisposesBatteriesException"), ::OpenAPI::toJsonValue(m_safely_disposes_batteries_exception));
    }
    if (m_safely_disposes_electronics_isSet) {
        obj.insert(QString("safelyDisposesElectronics"), ::OpenAPI::toJsonValue(m_safely_disposes_electronics));
    }
    if (m_safely_disposes_electronics_exception_isSet) {
        obj.insert(QString("safelyDisposesElectronicsException"), ::OpenAPI::toJsonValue(m_safely_disposes_electronics_exception));
    }
    if (m_safely_disposes_lightbulbs_isSet) {
        obj.insert(QString("safelyDisposesLightbulbs"), ::OpenAPI::toJsonValue(m_safely_disposes_lightbulbs));
    }
    if (m_safely_disposes_lightbulbs_exception_isSet) {
        obj.insert(QString("safelyDisposesLightbulbsException"), ::OpenAPI::toJsonValue(m_safely_disposes_lightbulbs_exception));
    }
    if (m_safely_handles_hazardous_substances_isSet) {
        obj.insert(QString("safelyHandlesHazardousSubstances"), ::OpenAPI::toJsonValue(m_safely_handles_hazardous_substances));
    }
    if (m_safely_handles_hazardous_substances_exception_isSet) {
        obj.insert(QString("safelyHandlesHazardousSubstancesException"), ::OpenAPI::toJsonValue(m_safely_handles_hazardous_substances_exception));
    }
    if (m_soap_donation_program_isSet) {
        obj.insert(QString("soapDonationProgram"), ::OpenAPI::toJsonValue(m_soap_donation_program));
    }
    if (m_soap_donation_program_exception_isSet) {
        obj.insert(QString("soapDonationProgramException"), ::OpenAPI::toJsonValue(m_soap_donation_program_exception));
    }
    if (m_toiletry_donation_program_isSet) {
        obj.insert(QString("toiletryDonationProgram"), ::OpenAPI::toJsonValue(m_toiletry_donation_program));
    }
    if (m_toiletry_donation_program_exception_isSet) {
        obj.insert(QString("toiletryDonationProgramException"), ::OpenAPI::toJsonValue(m_toiletry_donation_program_exception));
    }
    if (m_water_bottle_filling_stations_isSet) {
        obj.insert(QString("waterBottleFillingStations"), ::OpenAPI::toJsonValue(m_water_bottle_filling_stations));
    }
    if (m_water_bottle_filling_stations_exception_isSet) {
        obj.insert(QString("waterBottleFillingStationsException"), ::OpenAPI::toJsonValue(m_water_bottle_filling_stations_exception));
    }
    return obj;
}

bool OAIWasteReduction::isCompostableFoodContainersAndCutlery() const {
    return m_compostable_food_containers_and_cutlery;
}
void OAIWasteReduction::setCompostableFoodContainersAndCutlery(const bool &compostable_food_containers_and_cutlery) {
    m_compostable_food_containers_and_cutlery = compostable_food_containers_and_cutlery;
    m_compostable_food_containers_and_cutlery_isSet = true;
}

bool OAIWasteReduction::is_compostable_food_containers_and_cutlery_Set() const{
    return m_compostable_food_containers_and_cutlery_isSet;
}

bool OAIWasteReduction::is_compostable_food_containers_and_cutlery_Valid() const{
    return m_compostable_food_containers_and_cutlery_isValid;
}

QString OAIWasteReduction::getCompostableFoodContainersAndCutleryException() const {
    return m_compostable_food_containers_and_cutlery_exception;
}
void OAIWasteReduction::setCompostableFoodContainersAndCutleryException(const QString &compostable_food_containers_and_cutlery_exception) {
    m_compostable_food_containers_and_cutlery_exception = compostable_food_containers_and_cutlery_exception;
    m_compostable_food_containers_and_cutlery_exception_isSet = true;
}

bool OAIWasteReduction::is_compostable_food_containers_and_cutlery_exception_Set() const{
    return m_compostable_food_containers_and_cutlery_exception_isSet;
}

bool OAIWasteReduction::is_compostable_food_containers_and_cutlery_exception_Valid() const{
    return m_compostable_food_containers_and_cutlery_exception_isValid;
}

bool OAIWasteReduction::isCompostsExcessFood() const {
    return m_composts_excess_food;
}
void OAIWasteReduction::setCompostsExcessFood(const bool &composts_excess_food) {
    m_composts_excess_food = composts_excess_food;
    m_composts_excess_food_isSet = true;
}

bool OAIWasteReduction::is_composts_excess_food_Set() const{
    return m_composts_excess_food_isSet;
}

bool OAIWasteReduction::is_composts_excess_food_Valid() const{
    return m_composts_excess_food_isValid;
}

QString OAIWasteReduction::getCompostsExcessFoodException() const {
    return m_composts_excess_food_exception;
}
void OAIWasteReduction::setCompostsExcessFoodException(const QString &composts_excess_food_exception) {
    m_composts_excess_food_exception = composts_excess_food_exception;
    m_composts_excess_food_exception_isSet = true;
}

bool OAIWasteReduction::is_composts_excess_food_exception_Set() const{
    return m_composts_excess_food_exception_isSet;
}

bool OAIWasteReduction::is_composts_excess_food_exception_Valid() const{
    return m_composts_excess_food_exception_isValid;
}

bool OAIWasteReduction::isDonatesExcessFood() const {
    return m_donates_excess_food;
}
void OAIWasteReduction::setDonatesExcessFood(const bool &donates_excess_food) {
    m_donates_excess_food = donates_excess_food;
    m_donates_excess_food_isSet = true;
}

bool OAIWasteReduction::is_donates_excess_food_Set() const{
    return m_donates_excess_food_isSet;
}

bool OAIWasteReduction::is_donates_excess_food_Valid() const{
    return m_donates_excess_food_isValid;
}

QString OAIWasteReduction::getDonatesExcessFoodException() const {
    return m_donates_excess_food_exception;
}
void OAIWasteReduction::setDonatesExcessFoodException(const QString &donates_excess_food_exception) {
    m_donates_excess_food_exception = donates_excess_food_exception;
    m_donates_excess_food_exception_isSet = true;
}

bool OAIWasteReduction::is_donates_excess_food_exception_Set() const{
    return m_donates_excess_food_exception_isSet;
}

bool OAIWasteReduction::is_donates_excess_food_exception_Valid() const{
    return m_donates_excess_food_exception_isValid;
}

bool OAIWasteReduction::isFoodWasteReductionProgram() const {
    return m_food_waste_reduction_program;
}
void OAIWasteReduction::setFoodWasteReductionProgram(const bool &food_waste_reduction_program) {
    m_food_waste_reduction_program = food_waste_reduction_program;
    m_food_waste_reduction_program_isSet = true;
}

bool OAIWasteReduction::is_food_waste_reduction_program_Set() const{
    return m_food_waste_reduction_program_isSet;
}

bool OAIWasteReduction::is_food_waste_reduction_program_Valid() const{
    return m_food_waste_reduction_program_isValid;
}

QString OAIWasteReduction::getFoodWasteReductionProgramException() const {
    return m_food_waste_reduction_program_exception;
}
void OAIWasteReduction::setFoodWasteReductionProgramException(const QString &food_waste_reduction_program_exception) {
    m_food_waste_reduction_program_exception = food_waste_reduction_program_exception;
    m_food_waste_reduction_program_exception_isSet = true;
}

bool OAIWasteReduction::is_food_waste_reduction_program_exception_Set() const{
    return m_food_waste_reduction_program_exception_isSet;
}

bool OAIWasteReduction::is_food_waste_reduction_program_exception_Valid() const{
    return m_food_waste_reduction_program_exception_isValid;
}

bool OAIWasteReduction::isNoSingleUsePlasticStraws() const {
    return m_no_single_use_plastic_straws;
}
void OAIWasteReduction::setNoSingleUsePlasticStraws(const bool &no_single_use_plastic_straws) {
    m_no_single_use_plastic_straws = no_single_use_plastic_straws;
    m_no_single_use_plastic_straws_isSet = true;
}

bool OAIWasteReduction::is_no_single_use_plastic_straws_Set() const{
    return m_no_single_use_plastic_straws_isSet;
}

bool OAIWasteReduction::is_no_single_use_plastic_straws_Valid() const{
    return m_no_single_use_plastic_straws_isValid;
}

QString OAIWasteReduction::getNoSingleUsePlasticStrawsException() const {
    return m_no_single_use_plastic_straws_exception;
}
void OAIWasteReduction::setNoSingleUsePlasticStrawsException(const QString &no_single_use_plastic_straws_exception) {
    m_no_single_use_plastic_straws_exception = no_single_use_plastic_straws_exception;
    m_no_single_use_plastic_straws_exception_isSet = true;
}

bool OAIWasteReduction::is_no_single_use_plastic_straws_exception_Set() const{
    return m_no_single_use_plastic_straws_exception_isSet;
}

bool OAIWasteReduction::is_no_single_use_plastic_straws_exception_Valid() const{
    return m_no_single_use_plastic_straws_exception_isValid;
}

bool OAIWasteReduction::isNoSingleUsePlasticWaterBottles() const {
    return m_no_single_use_plastic_water_bottles;
}
void OAIWasteReduction::setNoSingleUsePlasticWaterBottles(const bool &no_single_use_plastic_water_bottles) {
    m_no_single_use_plastic_water_bottles = no_single_use_plastic_water_bottles;
    m_no_single_use_plastic_water_bottles_isSet = true;
}

bool OAIWasteReduction::is_no_single_use_plastic_water_bottles_Set() const{
    return m_no_single_use_plastic_water_bottles_isSet;
}

bool OAIWasteReduction::is_no_single_use_plastic_water_bottles_Valid() const{
    return m_no_single_use_plastic_water_bottles_isValid;
}

QString OAIWasteReduction::getNoSingleUsePlasticWaterBottlesException() const {
    return m_no_single_use_plastic_water_bottles_exception;
}
void OAIWasteReduction::setNoSingleUsePlasticWaterBottlesException(const QString &no_single_use_plastic_water_bottles_exception) {
    m_no_single_use_plastic_water_bottles_exception = no_single_use_plastic_water_bottles_exception;
    m_no_single_use_plastic_water_bottles_exception_isSet = true;
}

bool OAIWasteReduction::is_no_single_use_plastic_water_bottles_exception_Set() const{
    return m_no_single_use_plastic_water_bottles_exception_isSet;
}

bool OAIWasteReduction::is_no_single_use_plastic_water_bottles_exception_Valid() const{
    return m_no_single_use_plastic_water_bottles_exception_isValid;
}

bool OAIWasteReduction::isNoStyrofoamFoodContainers() const {
    return m_no_styrofoam_food_containers;
}
void OAIWasteReduction::setNoStyrofoamFoodContainers(const bool &no_styrofoam_food_containers) {
    m_no_styrofoam_food_containers = no_styrofoam_food_containers;
    m_no_styrofoam_food_containers_isSet = true;
}

bool OAIWasteReduction::is_no_styrofoam_food_containers_Set() const{
    return m_no_styrofoam_food_containers_isSet;
}

bool OAIWasteReduction::is_no_styrofoam_food_containers_Valid() const{
    return m_no_styrofoam_food_containers_isValid;
}

QString OAIWasteReduction::getNoStyrofoamFoodContainersException() const {
    return m_no_styrofoam_food_containers_exception;
}
void OAIWasteReduction::setNoStyrofoamFoodContainersException(const QString &no_styrofoam_food_containers_exception) {
    m_no_styrofoam_food_containers_exception = no_styrofoam_food_containers_exception;
    m_no_styrofoam_food_containers_exception_isSet = true;
}

bool OAIWasteReduction::is_no_styrofoam_food_containers_exception_Set() const{
    return m_no_styrofoam_food_containers_exception_isSet;
}

bool OAIWasteReduction::is_no_styrofoam_food_containers_exception_Valid() const{
    return m_no_styrofoam_food_containers_exception_isValid;
}

bool OAIWasteReduction::isRecyclingProgram() const {
    return m_recycling_program;
}
void OAIWasteReduction::setRecyclingProgram(const bool &recycling_program) {
    m_recycling_program = recycling_program;
    m_recycling_program_isSet = true;
}

bool OAIWasteReduction::is_recycling_program_Set() const{
    return m_recycling_program_isSet;
}

bool OAIWasteReduction::is_recycling_program_Valid() const{
    return m_recycling_program_isValid;
}

QString OAIWasteReduction::getRecyclingProgramException() const {
    return m_recycling_program_exception;
}
void OAIWasteReduction::setRecyclingProgramException(const QString &recycling_program_exception) {
    m_recycling_program_exception = recycling_program_exception;
    m_recycling_program_exception_isSet = true;
}

bool OAIWasteReduction::is_recycling_program_exception_Set() const{
    return m_recycling_program_exception_isSet;
}

bool OAIWasteReduction::is_recycling_program_exception_Valid() const{
    return m_recycling_program_exception_isValid;
}

bool OAIWasteReduction::isRefillableToiletryContainers() const {
    return m_refillable_toiletry_containers;
}
void OAIWasteReduction::setRefillableToiletryContainers(const bool &refillable_toiletry_containers) {
    m_refillable_toiletry_containers = refillable_toiletry_containers;
    m_refillable_toiletry_containers_isSet = true;
}

bool OAIWasteReduction::is_refillable_toiletry_containers_Set() const{
    return m_refillable_toiletry_containers_isSet;
}

bool OAIWasteReduction::is_refillable_toiletry_containers_Valid() const{
    return m_refillable_toiletry_containers_isValid;
}

QString OAIWasteReduction::getRefillableToiletryContainersException() const {
    return m_refillable_toiletry_containers_exception;
}
void OAIWasteReduction::setRefillableToiletryContainersException(const QString &refillable_toiletry_containers_exception) {
    m_refillable_toiletry_containers_exception = refillable_toiletry_containers_exception;
    m_refillable_toiletry_containers_exception_isSet = true;
}

bool OAIWasteReduction::is_refillable_toiletry_containers_exception_Set() const{
    return m_refillable_toiletry_containers_exception_isSet;
}

bool OAIWasteReduction::is_refillable_toiletry_containers_exception_Valid() const{
    return m_refillable_toiletry_containers_exception_isValid;
}

bool OAIWasteReduction::isSafelyDisposesBatteries() const {
    return m_safely_disposes_batteries;
}
void OAIWasteReduction::setSafelyDisposesBatteries(const bool &safely_disposes_batteries) {
    m_safely_disposes_batteries = safely_disposes_batteries;
    m_safely_disposes_batteries_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_batteries_Set() const{
    return m_safely_disposes_batteries_isSet;
}

bool OAIWasteReduction::is_safely_disposes_batteries_Valid() const{
    return m_safely_disposes_batteries_isValid;
}

QString OAIWasteReduction::getSafelyDisposesBatteriesException() const {
    return m_safely_disposes_batteries_exception;
}
void OAIWasteReduction::setSafelyDisposesBatteriesException(const QString &safely_disposes_batteries_exception) {
    m_safely_disposes_batteries_exception = safely_disposes_batteries_exception;
    m_safely_disposes_batteries_exception_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_batteries_exception_Set() const{
    return m_safely_disposes_batteries_exception_isSet;
}

bool OAIWasteReduction::is_safely_disposes_batteries_exception_Valid() const{
    return m_safely_disposes_batteries_exception_isValid;
}

bool OAIWasteReduction::isSafelyDisposesElectronics() const {
    return m_safely_disposes_electronics;
}
void OAIWasteReduction::setSafelyDisposesElectronics(const bool &safely_disposes_electronics) {
    m_safely_disposes_electronics = safely_disposes_electronics;
    m_safely_disposes_electronics_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_electronics_Set() const{
    return m_safely_disposes_electronics_isSet;
}

bool OAIWasteReduction::is_safely_disposes_electronics_Valid() const{
    return m_safely_disposes_electronics_isValid;
}

QString OAIWasteReduction::getSafelyDisposesElectronicsException() const {
    return m_safely_disposes_electronics_exception;
}
void OAIWasteReduction::setSafelyDisposesElectronicsException(const QString &safely_disposes_electronics_exception) {
    m_safely_disposes_electronics_exception = safely_disposes_electronics_exception;
    m_safely_disposes_electronics_exception_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_electronics_exception_Set() const{
    return m_safely_disposes_electronics_exception_isSet;
}

bool OAIWasteReduction::is_safely_disposes_electronics_exception_Valid() const{
    return m_safely_disposes_electronics_exception_isValid;
}

bool OAIWasteReduction::isSafelyDisposesLightbulbs() const {
    return m_safely_disposes_lightbulbs;
}
void OAIWasteReduction::setSafelyDisposesLightbulbs(const bool &safely_disposes_lightbulbs) {
    m_safely_disposes_lightbulbs = safely_disposes_lightbulbs;
    m_safely_disposes_lightbulbs_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_lightbulbs_Set() const{
    return m_safely_disposes_lightbulbs_isSet;
}

bool OAIWasteReduction::is_safely_disposes_lightbulbs_Valid() const{
    return m_safely_disposes_lightbulbs_isValid;
}

QString OAIWasteReduction::getSafelyDisposesLightbulbsException() const {
    return m_safely_disposes_lightbulbs_exception;
}
void OAIWasteReduction::setSafelyDisposesLightbulbsException(const QString &safely_disposes_lightbulbs_exception) {
    m_safely_disposes_lightbulbs_exception = safely_disposes_lightbulbs_exception;
    m_safely_disposes_lightbulbs_exception_isSet = true;
}

bool OAIWasteReduction::is_safely_disposes_lightbulbs_exception_Set() const{
    return m_safely_disposes_lightbulbs_exception_isSet;
}

bool OAIWasteReduction::is_safely_disposes_lightbulbs_exception_Valid() const{
    return m_safely_disposes_lightbulbs_exception_isValid;
}

bool OAIWasteReduction::isSafelyHandlesHazardousSubstances() const {
    return m_safely_handles_hazardous_substances;
}
void OAIWasteReduction::setSafelyHandlesHazardousSubstances(const bool &safely_handles_hazardous_substances) {
    m_safely_handles_hazardous_substances = safely_handles_hazardous_substances;
    m_safely_handles_hazardous_substances_isSet = true;
}

bool OAIWasteReduction::is_safely_handles_hazardous_substances_Set() const{
    return m_safely_handles_hazardous_substances_isSet;
}

bool OAIWasteReduction::is_safely_handles_hazardous_substances_Valid() const{
    return m_safely_handles_hazardous_substances_isValid;
}

QString OAIWasteReduction::getSafelyHandlesHazardousSubstancesException() const {
    return m_safely_handles_hazardous_substances_exception;
}
void OAIWasteReduction::setSafelyHandlesHazardousSubstancesException(const QString &safely_handles_hazardous_substances_exception) {
    m_safely_handles_hazardous_substances_exception = safely_handles_hazardous_substances_exception;
    m_safely_handles_hazardous_substances_exception_isSet = true;
}

bool OAIWasteReduction::is_safely_handles_hazardous_substances_exception_Set() const{
    return m_safely_handles_hazardous_substances_exception_isSet;
}

bool OAIWasteReduction::is_safely_handles_hazardous_substances_exception_Valid() const{
    return m_safely_handles_hazardous_substances_exception_isValid;
}

bool OAIWasteReduction::isSoapDonationProgram() const {
    return m_soap_donation_program;
}
void OAIWasteReduction::setSoapDonationProgram(const bool &soap_donation_program) {
    m_soap_donation_program = soap_donation_program;
    m_soap_donation_program_isSet = true;
}

bool OAIWasteReduction::is_soap_donation_program_Set() const{
    return m_soap_donation_program_isSet;
}

bool OAIWasteReduction::is_soap_donation_program_Valid() const{
    return m_soap_donation_program_isValid;
}

QString OAIWasteReduction::getSoapDonationProgramException() const {
    return m_soap_donation_program_exception;
}
void OAIWasteReduction::setSoapDonationProgramException(const QString &soap_donation_program_exception) {
    m_soap_donation_program_exception = soap_donation_program_exception;
    m_soap_donation_program_exception_isSet = true;
}

bool OAIWasteReduction::is_soap_donation_program_exception_Set() const{
    return m_soap_donation_program_exception_isSet;
}

bool OAIWasteReduction::is_soap_donation_program_exception_Valid() const{
    return m_soap_donation_program_exception_isValid;
}

bool OAIWasteReduction::isToiletryDonationProgram() const {
    return m_toiletry_donation_program;
}
void OAIWasteReduction::setToiletryDonationProgram(const bool &toiletry_donation_program) {
    m_toiletry_donation_program = toiletry_donation_program;
    m_toiletry_donation_program_isSet = true;
}

bool OAIWasteReduction::is_toiletry_donation_program_Set() const{
    return m_toiletry_donation_program_isSet;
}

bool OAIWasteReduction::is_toiletry_donation_program_Valid() const{
    return m_toiletry_donation_program_isValid;
}

QString OAIWasteReduction::getToiletryDonationProgramException() const {
    return m_toiletry_donation_program_exception;
}
void OAIWasteReduction::setToiletryDonationProgramException(const QString &toiletry_donation_program_exception) {
    m_toiletry_donation_program_exception = toiletry_donation_program_exception;
    m_toiletry_donation_program_exception_isSet = true;
}

bool OAIWasteReduction::is_toiletry_donation_program_exception_Set() const{
    return m_toiletry_donation_program_exception_isSet;
}

bool OAIWasteReduction::is_toiletry_donation_program_exception_Valid() const{
    return m_toiletry_donation_program_exception_isValid;
}

bool OAIWasteReduction::isWaterBottleFillingStations() const {
    return m_water_bottle_filling_stations;
}
void OAIWasteReduction::setWaterBottleFillingStations(const bool &water_bottle_filling_stations) {
    m_water_bottle_filling_stations = water_bottle_filling_stations;
    m_water_bottle_filling_stations_isSet = true;
}

bool OAIWasteReduction::is_water_bottle_filling_stations_Set() const{
    return m_water_bottle_filling_stations_isSet;
}

bool OAIWasteReduction::is_water_bottle_filling_stations_Valid() const{
    return m_water_bottle_filling_stations_isValid;
}

QString OAIWasteReduction::getWaterBottleFillingStationsException() const {
    return m_water_bottle_filling_stations_exception;
}
void OAIWasteReduction::setWaterBottleFillingStationsException(const QString &water_bottle_filling_stations_exception) {
    m_water_bottle_filling_stations_exception = water_bottle_filling_stations_exception;
    m_water_bottle_filling_stations_exception_isSet = true;
}

bool OAIWasteReduction::is_water_bottle_filling_stations_exception_Set() const{
    return m_water_bottle_filling_stations_exception_isSet;
}

bool OAIWasteReduction::is_water_bottle_filling_stations_exception_Valid() const{
    return m_water_bottle_filling_stations_exception_isValid;
}

bool OAIWasteReduction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compostable_food_containers_and_cutlery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compostable_food_containers_and_cutlery_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composts_excess_food_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composts_excess_food_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donates_excess_food_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donates_excess_food_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_waste_reduction_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_waste_reduction_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_single_use_plastic_straws_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_single_use_plastic_straws_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_single_use_plastic_water_bottles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_single_use_plastic_water_bottles_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_styrofoam_food_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_styrofoam_food_containers_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recycling_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recycling_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refillable_toiletry_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refillable_toiletry_containers_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_batteries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_batteries_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_electronics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_electronics_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_lightbulbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_disposes_lightbulbs_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_handles_hazardous_substances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safely_handles_hazardous_substances_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soap_donation_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soap_donation_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toiletry_donation_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toiletry_donation_program_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_bottle_filling_stations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_bottle_filling_stations_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWasteReduction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
