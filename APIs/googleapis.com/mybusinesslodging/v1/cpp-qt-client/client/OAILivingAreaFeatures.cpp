/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingAreaFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingAreaFeatures::OAILivingAreaFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingAreaFeatures::OAILivingAreaFeatures() {
    this->initializeModel();
}

OAILivingAreaFeatures::~OAILivingAreaFeatures() {}

void OAILivingAreaFeatures::initializeModel() {

    m_air_conditioning_isSet = false;
    m_air_conditioning_isValid = false;

    m_air_conditioning_exception_isSet = false;
    m_air_conditioning_exception_isValid = false;

    m_bathtub_isSet = false;
    m_bathtub_isValid = false;

    m_bathtub_exception_isSet = false;
    m_bathtub_exception_isValid = false;

    m_bidet_isSet = false;
    m_bidet_isValid = false;

    m_bidet_exception_isSet = false;
    m_bidet_exception_isValid = false;

    m_dryer_isSet = false;
    m_dryer_isValid = false;

    m_dryer_exception_isSet = false;
    m_dryer_exception_isValid = false;

    m_electronic_room_key_isSet = false;
    m_electronic_room_key_isValid = false;

    m_electronic_room_key_exception_isSet = false;
    m_electronic_room_key_exception_isValid = false;

    m_fireplace_isSet = false;
    m_fireplace_isValid = false;

    m_fireplace_exception_isSet = false;
    m_fireplace_exception_isValid = false;

    m_hairdryer_isSet = false;
    m_hairdryer_isValid = false;

    m_hairdryer_exception_isSet = false;
    m_hairdryer_exception_isValid = false;

    m_heating_isSet = false;
    m_heating_isValid = false;

    m_heating_exception_isSet = false;
    m_heating_exception_isValid = false;

    m_inunit_safe_isSet = false;
    m_inunit_safe_isValid = false;

    m_inunit_safe_exception_isSet = false;
    m_inunit_safe_exception_isValid = false;

    m_inunit_wifi_available_isSet = false;
    m_inunit_wifi_available_isValid = false;

    m_inunit_wifi_available_exception_isSet = false;
    m_inunit_wifi_available_exception_isValid = false;

    m_ironing_equipment_isSet = false;
    m_ironing_equipment_isValid = false;

    m_ironing_equipment_exception_isSet = false;
    m_ironing_equipment_exception_isValid = false;

    m_pay_per_view_movies_isSet = false;
    m_pay_per_view_movies_isValid = false;

    m_pay_per_view_movies_exception_isSet = false;
    m_pay_per_view_movies_exception_isValid = false;

    m_private_bathroom_isSet = false;
    m_private_bathroom_isValid = false;

    m_private_bathroom_exception_isSet = false;
    m_private_bathroom_exception_isValid = false;

    m_shower_isSet = false;
    m_shower_isValid = false;

    m_shower_exception_isSet = false;
    m_shower_exception_isValid = false;

    m_toilet_isSet = false;
    m_toilet_isValid = false;

    m_toilet_exception_isSet = false;
    m_toilet_exception_isValid = false;

    m_tv_isSet = false;
    m_tv_isValid = false;

    m_tv_casting_isSet = false;
    m_tv_casting_isValid = false;

    m_tv_casting_exception_isSet = false;
    m_tv_casting_exception_isValid = false;

    m_tv_exception_isSet = false;
    m_tv_exception_isValid = false;

    m_tv_streaming_isSet = false;
    m_tv_streaming_isValid = false;

    m_tv_streaming_exception_isSet = false;
    m_tv_streaming_exception_isValid = false;

    m_universal_power_adapters_isSet = false;
    m_universal_power_adapters_isValid = false;

    m_universal_power_adapters_exception_isSet = false;
    m_universal_power_adapters_exception_isValid = false;

    m_washer_isSet = false;
    m_washer_isValid = false;

    m_washer_exception_isSet = false;
    m_washer_exception_isValid = false;
}

void OAILivingAreaFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingAreaFeatures::fromJsonObject(QJsonObject json) {

    m_air_conditioning_isValid = ::OpenAPI::fromJsonValue(m_air_conditioning, json[QString("airConditioning")]);
    m_air_conditioning_isSet = !json[QString("airConditioning")].isNull() && m_air_conditioning_isValid;

    m_air_conditioning_exception_isValid = ::OpenAPI::fromJsonValue(m_air_conditioning_exception, json[QString("airConditioningException")]);
    m_air_conditioning_exception_isSet = !json[QString("airConditioningException")].isNull() && m_air_conditioning_exception_isValid;

    m_bathtub_isValid = ::OpenAPI::fromJsonValue(m_bathtub, json[QString("bathtub")]);
    m_bathtub_isSet = !json[QString("bathtub")].isNull() && m_bathtub_isValid;

    m_bathtub_exception_isValid = ::OpenAPI::fromJsonValue(m_bathtub_exception, json[QString("bathtubException")]);
    m_bathtub_exception_isSet = !json[QString("bathtubException")].isNull() && m_bathtub_exception_isValid;

    m_bidet_isValid = ::OpenAPI::fromJsonValue(m_bidet, json[QString("bidet")]);
    m_bidet_isSet = !json[QString("bidet")].isNull() && m_bidet_isValid;

    m_bidet_exception_isValid = ::OpenAPI::fromJsonValue(m_bidet_exception, json[QString("bidetException")]);
    m_bidet_exception_isSet = !json[QString("bidetException")].isNull() && m_bidet_exception_isValid;

    m_dryer_isValid = ::OpenAPI::fromJsonValue(m_dryer, json[QString("dryer")]);
    m_dryer_isSet = !json[QString("dryer")].isNull() && m_dryer_isValid;

    m_dryer_exception_isValid = ::OpenAPI::fromJsonValue(m_dryer_exception, json[QString("dryerException")]);
    m_dryer_exception_isSet = !json[QString("dryerException")].isNull() && m_dryer_exception_isValid;

    m_electronic_room_key_isValid = ::OpenAPI::fromJsonValue(m_electronic_room_key, json[QString("electronicRoomKey")]);
    m_electronic_room_key_isSet = !json[QString("electronicRoomKey")].isNull() && m_electronic_room_key_isValid;

    m_electronic_room_key_exception_isValid = ::OpenAPI::fromJsonValue(m_electronic_room_key_exception, json[QString("electronicRoomKeyException")]);
    m_electronic_room_key_exception_isSet = !json[QString("electronicRoomKeyException")].isNull() && m_electronic_room_key_exception_isValid;

    m_fireplace_isValid = ::OpenAPI::fromJsonValue(m_fireplace, json[QString("fireplace")]);
    m_fireplace_isSet = !json[QString("fireplace")].isNull() && m_fireplace_isValid;

    m_fireplace_exception_isValid = ::OpenAPI::fromJsonValue(m_fireplace_exception, json[QString("fireplaceException")]);
    m_fireplace_exception_isSet = !json[QString("fireplaceException")].isNull() && m_fireplace_exception_isValid;

    m_hairdryer_isValid = ::OpenAPI::fromJsonValue(m_hairdryer, json[QString("hairdryer")]);
    m_hairdryer_isSet = !json[QString("hairdryer")].isNull() && m_hairdryer_isValid;

    m_hairdryer_exception_isValid = ::OpenAPI::fromJsonValue(m_hairdryer_exception, json[QString("hairdryerException")]);
    m_hairdryer_exception_isSet = !json[QString("hairdryerException")].isNull() && m_hairdryer_exception_isValid;

    m_heating_isValid = ::OpenAPI::fromJsonValue(m_heating, json[QString("heating")]);
    m_heating_isSet = !json[QString("heating")].isNull() && m_heating_isValid;

    m_heating_exception_isValid = ::OpenAPI::fromJsonValue(m_heating_exception, json[QString("heatingException")]);
    m_heating_exception_isSet = !json[QString("heatingException")].isNull() && m_heating_exception_isValid;

    m_inunit_safe_isValid = ::OpenAPI::fromJsonValue(m_inunit_safe, json[QString("inunitSafe")]);
    m_inunit_safe_isSet = !json[QString("inunitSafe")].isNull() && m_inunit_safe_isValid;

    m_inunit_safe_exception_isValid = ::OpenAPI::fromJsonValue(m_inunit_safe_exception, json[QString("inunitSafeException")]);
    m_inunit_safe_exception_isSet = !json[QString("inunitSafeException")].isNull() && m_inunit_safe_exception_isValid;

    m_inunit_wifi_available_isValid = ::OpenAPI::fromJsonValue(m_inunit_wifi_available, json[QString("inunitWifiAvailable")]);
    m_inunit_wifi_available_isSet = !json[QString("inunitWifiAvailable")].isNull() && m_inunit_wifi_available_isValid;

    m_inunit_wifi_available_exception_isValid = ::OpenAPI::fromJsonValue(m_inunit_wifi_available_exception, json[QString("inunitWifiAvailableException")]);
    m_inunit_wifi_available_exception_isSet = !json[QString("inunitWifiAvailableException")].isNull() && m_inunit_wifi_available_exception_isValid;

    m_ironing_equipment_isValid = ::OpenAPI::fromJsonValue(m_ironing_equipment, json[QString("ironingEquipment")]);
    m_ironing_equipment_isSet = !json[QString("ironingEquipment")].isNull() && m_ironing_equipment_isValid;

    m_ironing_equipment_exception_isValid = ::OpenAPI::fromJsonValue(m_ironing_equipment_exception, json[QString("ironingEquipmentException")]);
    m_ironing_equipment_exception_isSet = !json[QString("ironingEquipmentException")].isNull() && m_ironing_equipment_exception_isValid;

    m_pay_per_view_movies_isValid = ::OpenAPI::fromJsonValue(m_pay_per_view_movies, json[QString("payPerViewMovies")]);
    m_pay_per_view_movies_isSet = !json[QString("payPerViewMovies")].isNull() && m_pay_per_view_movies_isValid;

    m_pay_per_view_movies_exception_isValid = ::OpenAPI::fromJsonValue(m_pay_per_view_movies_exception, json[QString("payPerViewMoviesException")]);
    m_pay_per_view_movies_exception_isSet = !json[QString("payPerViewMoviesException")].isNull() && m_pay_per_view_movies_exception_isValid;

    m_private_bathroom_isValid = ::OpenAPI::fromJsonValue(m_private_bathroom, json[QString("privateBathroom")]);
    m_private_bathroom_isSet = !json[QString("privateBathroom")].isNull() && m_private_bathroom_isValid;

    m_private_bathroom_exception_isValid = ::OpenAPI::fromJsonValue(m_private_bathroom_exception, json[QString("privateBathroomException")]);
    m_private_bathroom_exception_isSet = !json[QString("privateBathroomException")].isNull() && m_private_bathroom_exception_isValid;

    m_shower_isValid = ::OpenAPI::fromJsonValue(m_shower, json[QString("shower")]);
    m_shower_isSet = !json[QString("shower")].isNull() && m_shower_isValid;

    m_shower_exception_isValid = ::OpenAPI::fromJsonValue(m_shower_exception, json[QString("showerException")]);
    m_shower_exception_isSet = !json[QString("showerException")].isNull() && m_shower_exception_isValid;

    m_toilet_isValid = ::OpenAPI::fromJsonValue(m_toilet, json[QString("toilet")]);
    m_toilet_isSet = !json[QString("toilet")].isNull() && m_toilet_isValid;

    m_toilet_exception_isValid = ::OpenAPI::fromJsonValue(m_toilet_exception, json[QString("toiletException")]);
    m_toilet_exception_isSet = !json[QString("toiletException")].isNull() && m_toilet_exception_isValid;

    m_tv_isValid = ::OpenAPI::fromJsonValue(m_tv, json[QString("tv")]);
    m_tv_isSet = !json[QString("tv")].isNull() && m_tv_isValid;

    m_tv_casting_isValid = ::OpenAPI::fromJsonValue(m_tv_casting, json[QString("tvCasting")]);
    m_tv_casting_isSet = !json[QString("tvCasting")].isNull() && m_tv_casting_isValid;

    m_tv_casting_exception_isValid = ::OpenAPI::fromJsonValue(m_tv_casting_exception, json[QString("tvCastingException")]);
    m_tv_casting_exception_isSet = !json[QString("tvCastingException")].isNull() && m_tv_casting_exception_isValid;

    m_tv_exception_isValid = ::OpenAPI::fromJsonValue(m_tv_exception, json[QString("tvException")]);
    m_tv_exception_isSet = !json[QString("tvException")].isNull() && m_tv_exception_isValid;

    m_tv_streaming_isValid = ::OpenAPI::fromJsonValue(m_tv_streaming, json[QString("tvStreaming")]);
    m_tv_streaming_isSet = !json[QString("tvStreaming")].isNull() && m_tv_streaming_isValid;

    m_tv_streaming_exception_isValid = ::OpenAPI::fromJsonValue(m_tv_streaming_exception, json[QString("tvStreamingException")]);
    m_tv_streaming_exception_isSet = !json[QString("tvStreamingException")].isNull() && m_tv_streaming_exception_isValid;

    m_universal_power_adapters_isValid = ::OpenAPI::fromJsonValue(m_universal_power_adapters, json[QString("universalPowerAdapters")]);
    m_universal_power_adapters_isSet = !json[QString("universalPowerAdapters")].isNull() && m_universal_power_adapters_isValid;

    m_universal_power_adapters_exception_isValid = ::OpenAPI::fromJsonValue(m_universal_power_adapters_exception, json[QString("universalPowerAdaptersException")]);
    m_universal_power_adapters_exception_isSet = !json[QString("universalPowerAdaptersException")].isNull() && m_universal_power_adapters_exception_isValid;

    m_washer_isValid = ::OpenAPI::fromJsonValue(m_washer, json[QString("washer")]);
    m_washer_isSet = !json[QString("washer")].isNull() && m_washer_isValid;

    m_washer_exception_isValid = ::OpenAPI::fromJsonValue(m_washer_exception, json[QString("washerException")]);
    m_washer_exception_isSet = !json[QString("washerException")].isNull() && m_washer_exception_isValid;
}

QString OAILivingAreaFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingAreaFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_air_conditioning_isSet) {
        obj.insert(QString("airConditioning"), ::OpenAPI::toJsonValue(m_air_conditioning));
    }
    if (m_air_conditioning_exception_isSet) {
        obj.insert(QString("airConditioningException"), ::OpenAPI::toJsonValue(m_air_conditioning_exception));
    }
    if (m_bathtub_isSet) {
        obj.insert(QString("bathtub"), ::OpenAPI::toJsonValue(m_bathtub));
    }
    if (m_bathtub_exception_isSet) {
        obj.insert(QString("bathtubException"), ::OpenAPI::toJsonValue(m_bathtub_exception));
    }
    if (m_bidet_isSet) {
        obj.insert(QString("bidet"), ::OpenAPI::toJsonValue(m_bidet));
    }
    if (m_bidet_exception_isSet) {
        obj.insert(QString("bidetException"), ::OpenAPI::toJsonValue(m_bidet_exception));
    }
    if (m_dryer_isSet) {
        obj.insert(QString("dryer"), ::OpenAPI::toJsonValue(m_dryer));
    }
    if (m_dryer_exception_isSet) {
        obj.insert(QString("dryerException"), ::OpenAPI::toJsonValue(m_dryer_exception));
    }
    if (m_electronic_room_key_isSet) {
        obj.insert(QString("electronicRoomKey"), ::OpenAPI::toJsonValue(m_electronic_room_key));
    }
    if (m_electronic_room_key_exception_isSet) {
        obj.insert(QString("electronicRoomKeyException"), ::OpenAPI::toJsonValue(m_electronic_room_key_exception));
    }
    if (m_fireplace_isSet) {
        obj.insert(QString("fireplace"), ::OpenAPI::toJsonValue(m_fireplace));
    }
    if (m_fireplace_exception_isSet) {
        obj.insert(QString("fireplaceException"), ::OpenAPI::toJsonValue(m_fireplace_exception));
    }
    if (m_hairdryer_isSet) {
        obj.insert(QString("hairdryer"), ::OpenAPI::toJsonValue(m_hairdryer));
    }
    if (m_hairdryer_exception_isSet) {
        obj.insert(QString("hairdryerException"), ::OpenAPI::toJsonValue(m_hairdryer_exception));
    }
    if (m_heating_isSet) {
        obj.insert(QString("heating"), ::OpenAPI::toJsonValue(m_heating));
    }
    if (m_heating_exception_isSet) {
        obj.insert(QString("heatingException"), ::OpenAPI::toJsonValue(m_heating_exception));
    }
    if (m_inunit_safe_isSet) {
        obj.insert(QString("inunitSafe"), ::OpenAPI::toJsonValue(m_inunit_safe));
    }
    if (m_inunit_safe_exception_isSet) {
        obj.insert(QString("inunitSafeException"), ::OpenAPI::toJsonValue(m_inunit_safe_exception));
    }
    if (m_inunit_wifi_available_isSet) {
        obj.insert(QString("inunitWifiAvailable"), ::OpenAPI::toJsonValue(m_inunit_wifi_available));
    }
    if (m_inunit_wifi_available_exception_isSet) {
        obj.insert(QString("inunitWifiAvailableException"), ::OpenAPI::toJsonValue(m_inunit_wifi_available_exception));
    }
    if (m_ironing_equipment_isSet) {
        obj.insert(QString("ironingEquipment"), ::OpenAPI::toJsonValue(m_ironing_equipment));
    }
    if (m_ironing_equipment_exception_isSet) {
        obj.insert(QString("ironingEquipmentException"), ::OpenAPI::toJsonValue(m_ironing_equipment_exception));
    }
    if (m_pay_per_view_movies_isSet) {
        obj.insert(QString("payPerViewMovies"), ::OpenAPI::toJsonValue(m_pay_per_view_movies));
    }
    if (m_pay_per_view_movies_exception_isSet) {
        obj.insert(QString("payPerViewMoviesException"), ::OpenAPI::toJsonValue(m_pay_per_view_movies_exception));
    }
    if (m_private_bathroom_isSet) {
        obj.insert(QString("privateBathroom"), ::OpenAPI::toJsonValue(m_private_bathroom));
    }
    if (m_private_bathroom_exception_isSet) {
        obj.insert(QString("privateBathroomException"), ::OpenAPI::toJsonValue(m_private_bathroom_exception));
    }
    if (m_shower_isSet) {
        obj.insert(QString("shower"), ::OpenAPI::toJsonValue(m_shower));
    }
    if (m_shower_exception_isSet) {
        obj.insert(QString("showerException"), ::OpenAPI::toJsonValue(m_shower_exception));
    }
    if (m_toilet_isSet) {
        obj.insert(QString("toilet"), ::OpenAPI::toJsonValue(m_toilet));
    }
    if (m_toilet_exception_isSet) {
        obj.insert(QString("toiletException"), ::OpenAPI::toJsonValue(m_toilet_exception));
    }
    if (m_tv_isSet) {
        obj.insert(QString("tv"), ::OpenAPI::toJsonValue(m_tv));
    }
    if (m_tv_casting_isSet) {
        obj.insert(QString("tvCasting"), ::OpenAPI::toJsonValue(m_tv_casting));
    }
    if (m_tv_casting_exception_isSet) {
        obj.insert(QString("tvCastingException"), ::OpenAPI::toJsonValue(m_tv_casting_exception));
    }
    if (m_tv_exception_isSet) {
        obj.insert(QString("tvException"), ::OpenAPI::toJsonValue(m_tv_exception));
    }
    if (m_tv_streaming_isSet) {
        obj.insert(QString("tvStreaming"), ::OpenAPI::toJsonValue(m_tv_streaming));
    }
    if (m_tv_streaming_exception_isSet) {
        obj.insert(QString("tvStreamingException"), ::OpenAPI::toJsonValue(m_tv_streaming_exception));
    }
    if (m_universal_power_adapters_isSet) {
        obj.insert(QString("universalPowerAdapters"), ::OpenAPI::toJsonValue(m_universal_power_adapters));
    }
    if (m_universal_power_adapters_exception_isSet) {
        obj.insert(QString("universalPowerAdaptersException"), ::OpenAPI::toJsonValue(m_universal_power_adapters_exception));
    }
    if (m_washer_isSet) {
        obj.insert(QString("washer"), ::OpenAPI::toJsonValue(m_washer));
    }
    if (m_washer_exception_isSet) {
        obj.insert(QString("washerException"), ::OpenAPI::toJsonValue(m_washer_exception));
    }
    return obj;
}

bool OAILivingAreaFeatures::isAirConditioning() const {
    return m_air_conditioning;
}
void OAILivingAreaFeatures::setAirConditioning(const bool &air_conditioning) {
    m_air_conditioning = air_conditioning;
    m_air_conditioning_isSet = true;
}

bool OAILivingAreaFeatures::is_air_conditioning_Set() const{
    return m_air_conditioning_isSet;
}

bool OAILivingAreaFeatures::is_air_conditioning_Valid() const{
    return m_air_conditioning_isValid;
}

QString OAILivingAreaFeatures::getAirConditioningException() const {
    return m_air_conditioning_exception;
}
void OAILivingAreaFeatures::setAirConditioningException(const QString &air_conditioning_exception) {
    m_air_conditioning_exception = air_conditioning_exception;
    m_air_conditioning_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_air_conditioning_exception_Set() const{
    return m_air_conditioning_exception_isSet;
}

bool OAILivingAreaFeatures::is_air_conditioning_exception_Valid() const{
    return m_air_conditioning_exception_isValid;
}

bool OAILivingAreaFeatures::isBathtub() const {
    return m_bathtub;
}
void OAILivingAreaFeatures::setBathtub(const bool &bathtub) {
    m_bathtub = bathtub;
    m_bathtub_isSet = true;
}

bool OAILivingAreaFeatures::is_bathtub_Set() const{
    return m_bathtub_isSet;
}

bool OAILivingAreaFeatures::is_bathtub_Valid() const{
    return m_bathtub_isValid;
}

QString OAILivingAreaFeatures::getBathtubException() const {
    return m_bathtub_exception;
}
void OAILivingAreaFeatures::setBathtubException(const QString &bathtub_exception) {
    m_bathtub_exception = bathtub_exception;
    m_bathtub_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_bathtub_exception_Set() const{
    return m_bathtub_exception_isSet;
}

bool OAILivingAreaFeatures::is_bathtub_exception_Valid() const{
    return m_bathtub_exception_isValid;
}

bool OAILivingAreaFeatures::isBidet() const {
    return m_bidet;
}
void OAILivingAreaFeatures::setBidet(const bool &bidet) {
    m_bidet = bidet;
    m_bidet_isSet = true;
}

bool OAILivingAreaFeatures::is_bidet_Set() const{
    return m_bidet_isSet;
}

bool OAILivingAreaFeatures::is_bidet_Valid() const{
    return m_bidet_isValid;
}

QString OAILivingAreaFeatures::getBidetException() const {
    return m_bidet_exception;
}
void OAILivingAreaFeatures::setBidetException(const QString &bidet_exception) {
    m_bidet_exception = bidet_exception;
    m_bidet_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_bidet_exception_Set() const{
    return m_bidet_exception_isSet;
}

bool OAILivingAreaFeatures::is_bidet_exception_Valid() const{
    return m_bidet_exception_isValid;
}

bool OAILivingAreaFeatures::isDryer() const {
    return m_dryer;
}
void OAILivingAreaFeatures::setDryer(const bool &dryer) {
    m_dryer = dryer;
    m_dryer_isSet = true;
}

bool OAILivingAreaFeatures::is_dryer_Set() const{
    return m_dryer_isSet;
}

bool OAILivingAreaFeatures::is_dryer_Valid() const{
    return m_dryer_isValid;
}

QString OAILivingAreaFeatures::getDryerException() const {
    return m_dryer_exception;
}
void OAILivingAreaFeatures::setDryerException(const QString &dryer_exception) {
    m_dryer_exception = dryer_exception;
    m_dryer_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_dryer_exception_Set() const{
    return m_dryer_exception_isSet;
}

bool OAILivingAreaFeatures::is_dryer_exception_Valid() const{
    return m_dryer_exception_isValid;
}

bool OAILivingAreaFeatures::isElectronicRoomKey() const {
    return m_electronic_room_key;
}
void OAILivingAreaFeatures::setElectronicRoomKey(const bool &electronic_room_key) {
    m_electronic_room_key = electronic_room_key;
    m_electronic_room_key_isSet = true;
}

bool OAILivingAreaFeatures::is_electronic_room_key_Set() const{
    return m_electronic_room_key_isSet;
}

bool OAILivingAreaFeatures::is_electronic_room_key_Valid() const{
    return m_electronic_room_key_isValid;
}

QString OAILivingAreaFeatures::getElectronicRoomKeyException() const {
    return m_electronic_room_key_exception;
}
void OAILivingAreaFeatures::setElectronicRoomKeyException(const QString &electronic_room_key_exception) {
    m_electronic_room_key_exception = electronic_room_key_exception;
    m_electronic_room_key_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_electronic_room_key_exception_Set() const{
    return m_electronic_room_key_exception_isSet;
}

bool OAILivingAreaFeatures::is_electronic_room_key_exception_Valid() const{
    return m_electronic_room_key_exception_isValid;
}

bool OAILivingAreaFeatures::isFireplace() const {
    return m_fireplace;
}
void OAILivingAreaFeatures::setFireplace(const bool &fireplace) {
    m_fireplace = fireplace;
    m_fireplace_isSet = true;
}

bool OAILivingAreaFeatures::is_fireplace_Set() const{
    return m_fireplace_isSet;
}

bool OAILivingAreaFeatures::is_fireplace_Valid() const{
    return m_fireplace_isValid;
}

QString OAILivingAreaFeatures::getFireplaceException() const {
    return m_fireplace_exception;
}
void OAILivingAreaFeatures::setFireplaceException(const QString &fireplace_exception) {
    m_fireplace_exception = fireplace_exception;
    m_fireplace_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_fireplace_exception_Set() const{
    return m_fireplace_exception_isSet;
}

bool OAILivingAreaFeatures::is_fireplace_exception_Valid() const{
    return m_fireplace_exception_isValid;
}

bool OAILivingAreaFeatures::isHairdryer() const {
    return m_hairdryer;
}
void OAILivingAreaFeatures::setHairdryer(const bool &hairdryer) {
    m_hairdryer = hairdryer;
    m_hairdryer_isSet = true;
}

bool OAILivingAreaFeatures::is_hairdryer_Set() const{
    return m_hairdryer_isSet;
}

bool OAILivingAreaFeatures::is_hairdryer_Valid() const{
    return m_hairdryer_isValid;
}

QString OAILivingAreaFeatures::getHairdryerException() const {
    return m_hairdryer_exception;
}
void OAILivingAreaFeatures::setHairdryerException(const QString &hairdryer_exception) {
    m_hairdryer_exception = hairdryer_exception;
    m_hairdryer_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_hairdryer_exception_Set() const{
    return m_hairdryer_exception_isSet;
}

bool OAILivingAreaFeatures::is_hairdryer_exception_Valid() const{
    return m_hairdryer_exception_isValid;
}

bool OAILivingAreaFeatures::isHeating() const {
    return m_heating;
}
void OAILivingAreaFeatures::setHeating(const bool &heating) {
    m_heating = heating;
    m_heating_isSet = true;
}

bool OAILivingAreaFeatures::is_heating_Set() const{
    return m_heating_isSet;
}

bool OAILivingAreaFeatures::is_heating_Valid() const{
    return m_heating_isValid;
}

QString OAILivingAreaFeatures::getHeatingException() const {
    return m_heating_exception;
}
void OAILivingAreaFeatures::setHeatingException(const QString &heating_exception) {
    m_heating_exception = heating_exception;
    m_heating_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_heating_exception_Set() const{
    return m_heating_exception_isSet;
}

bool OAILivingAreaFeatures::is_heating_exception_Valid() const{
    return m_heating_exception_isValid;
}

bool OAILivingAreaFeatures::isInunitSafe() const {
    return m_inunit_safe;
}
void OAILivingAreaFeatures::setInunitSafe(const bool &inunit_safe) {
    m_inunit_safe = inunit_safe;
    m_inunit_safe_isSet = true;
}

bool OAILivingAreaFeatures::is_inunit_safe_Set() const{
    return m_inunit_safe_isSet;
}

bool OAILivingAreaFeatures::is_inunit_safe_Valid() const{
    return m_inunit_safe_isValid;
}

QString OAILivingAreaFeatures::getInunitSafeException() const {
    return m_inunit_safe_exception;
}
void OAILivingAreaFeatures::setInunitSafeException(const QString &inunit_safe_exception) {
    m_inunit_safe_exception = inunit_safe_exception;
    m_inunit_safe_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_inunit_safe_exception_Set() const{
    return m_inunit_safe_exception_isSet;
}

bool OAILivingAreaFeatures::is_inunit_safe_exception_Valid() const{
    return m_inunit_safe_exception_isValid;
}

bool OAILivingAreaFeatures::isInunitWifiAvailable() const {
    return m_inunit_wifi_available;
}
void OAILivingAreaFeatures::setInunitWifiAvailable(const bool &inunit_wifi_available) {
    m_inunit_wifi_available = inunit_wifi_available;
    m_inunit_wifi_available_isSet = true;
}

bool OAILivingAreaFeatures::is_inunit_wifi_available_Set() const{
    return m_inunit_wifi_available_isSet;
}

bool OAILivingAreaFeatures::is_inunit_wifi_available_Valid() const{
    return m_inunit_wifi_available_isValid;
}

QString OAILivingAreaFeatures::getInunitWifiAvailableException() const {
    return m_inunit_wifi_available_exception;
}
void OAILivingAreaFeatures::setInunitWifiAvailableException(const QString &inunit_wifi_available_exception) {
    m_inunit_wifi_available_exception = inunit_wifi_available_exception;
    m_inunit_wifi_available_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_inunit_wifi_available_exception_Set() const{
    return m_inunit_wifi_available_exception_isSet;
}

bool OAILivingAreaFeatures::is_inunit_wifi_available_exception_Valid() const{
    return m_inunit_wifi_available_exception_isValid;
}

bool OAILivingAreaFeatures::isIroningEquipment() const {
    return m_ironing_equipment;
}
void OAILivingAreaFeatures::setIroningEquipment(const bool &ironing_equipment) {
    m_ironing_equipment = ironing_equipment;
    m_ironing_equipment_isSet = true;
}

bool OAILivingAreaFeatures::is_ironing_equipment_Set() const{
    return m_ironing_equipment_isSet;
}

bool OAILivingAreaFeatures::is_ironing_equipment_Valid() const{
    return m_ironing_equipment_isValid;
}

QString OAILivingAreaFeatures::getIroningEquipmentException() const {
    return m_ironing_equipment_exception;
}
void OAILivingAreaFeatures::setIroningEquipmentException(const QString &ironing_equipment_exception) {
    m_ironing_equipment_exception = ironing_equipment_exception;
    m_ironing_equipment_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_ironing_equipment_exception_Set() const{
    return m_ironing_equipment_exception_isSet;
}

bool OAILivingAreaFeatures::is_ironing_equipment_exception_Valid() const{
    return m_ironing_equipment_exception_isValid;
}

bool OAILivingAreaFeatures::isPayPerViewMovies() const {
    return m_pay_per_view_movies;
}
void OAILivingAreaFeatures::setPayPerViewMovies(const bool &pay_per_view_movies) {
    m_pay_per_view_movies = pay_per_view_movies;
    m_pay_per_view_movies_isSet = true;
}

bool OAILivingAreaFeatures::is_pay_per_view_movies_Set() const{
    return m_pay_per_view_movies_isSet;
}

bool OAILivingAreaFeatures::is_pay_per_view_movies_Valid() const{
    return m_pay_per_view_movies_isValid;
}

QString OAILivingAreaFeatures::getPayPerViewMoviesException() const {
    return m_pay_per_view_movies_exception;
}
void OAILivingAreaFeatures::setPayPerViewMoviesException(const QString &pay_per_view_movies_exception) {
    m_pay_per_view_movies_exception = pay_per_view_movies_exception;
    m_pay_per_view_movies_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_pay_per_view_movies_exception_Set() const{
    return m_pay_per_view_movies_exception_isSet;
}

bool OAILivingAreaFeatures::is_pay_per_view_movies_exception_Valid() const{
    return m_pay_per_view_movies_exception_isValid;
}

bool OAILivingAreaFeatures::isPrivateBathroom() const {
    return m_private_bathroom;
}
void OAILivingAreaFeatures::setPrivateBathroom(const bool &private_bathroom) {
    m_private_bathroom = private_bathroom;
    m_private_bathroom_isSet = true;
}

bool OAILivingAreaFeatures::is_private_bathroom_Set() const{
    return m_private_bathroom_isSet;
}

bool OAILivingAreaFeatures::is_private_bathroom_Valid() const{
    return m_private_bathroom_isValid;
}

QString OAILivingAreaFeatures::getPrivateBathroomException() const {
    return m_private_bathroom_exception;
}
void OAILivingAreaFeatures::setPrivateBathroomException(const QString &private_bathroom_exception) {
    m_private_bathroom_exception = private_bathroom_exception;
    m_private_bathroom_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_private_bathroom_exception_Set() const{
    return m_private_bathroom_exception_isSet;
}

bool OAILivingAreaFeatures::is_private_bathroom_exception_Valid() const{
    return m_private_bathroom_exception_isValid;
}

bool OAILivingAreaFeatures::isShower() const {
    return m_shower;
}
void OAILivingAreaFeatures::setShower(const bool &shower) {
    m_shower = shower;
    m_shower_isSet = true;
}

bool OAILivingAreaFeatures::is_shower_Set() const{
    return m_shower_isSet;
}

bool OAILivingAreaFeatures::is_shower_Valid() const{
    return m_shower_isValid;
}

QString OAILivingAreaFeatures::getShowerException() const {
    return m_shower_exception;
}
void OAILivingAreaFeatures::setShowerException(const QString &shower_exception) {
    m_shower_exception = shower_exception;
    m_shower_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_shower_exception_Set() const{
    return m_shower_exception_isSet;
}

bool OAILivingAreaFeatures::is_shower_exception_Valid() const{
    return m_shower_exception_isValid;
}

bool OAILivingAreaFeatures::isToilet() const {
    return m_toilet;
}
void OAILivingAreaFeatures::setToilet(const bool &toilet) {
    m_toilet = toilet;
    m_toilet_isSet = true;
}

bool OAILivingAreaFeatures::is_toilet_Set() const{
    return m_toilet_isSet;
}

bool OAILivingAreaFeatures::is_toilet_Valid() const{
    return m_toilet_isValid;
}

QString OAILivingAreaFeatures::getToiletException() const {
    return m_toilet_exception;
}
void OAILivingAreaFeatures::setToiletException(const QString &toilet_exception) {
    m_toilet_exception = toilet_exception;
    m_toilet_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_toilet_exception_Set() const{
    return m_toilet_exception_isSet;
}

bool OAILivingAreaFeatures::is_toilet_exception_Valid() const{
    return m_toilet_exception_isValid;
}

bool OAILivingAreaFeatures::isTv() const {
    return m_tv;
}
void OAILivingAreaFeatures::setTv(const bool &tv) {
    m_tv = tv;
    m_tv_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_Set() const{
    return m_tv_isSet;
}

bool OAILivingAreaFeatures::is_tv_Valid() const{
    return m_tv_isValid;
}

bool OAILivingAreaFeatures::isTvCasting() const {
    return m_tv_casting;
}
void OAILivingAreaFeatures::setTvCasting(const bool &tv_casting) {
    m_tv_casting = tv_casting;
    m_tv_casting_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_casting_Set() const{
    return m_tv_casting_isSet;
}

bool OAILivingAreaFeatures::is_tv_casting_Valid() const{
    return m_tv_casting_isValid;
}

QString OAILivingAreaFeatures::getTvCastingException() const {
    return m_tv_casting_exception;
}
void OAILivingAreaFeatures::setTvCastingException(const QString &tv_casting_exception) {
    m_tv_casting_exception = tv_casting_exception;
    m_tv_casting_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_casting_exception_Set() const{
    return m_tv_casting_exception_isSet;
}

bool OAILivingAreaFeatures::is_tv_casting_exception_Valid() const{
    return m_tv_casting_exception_isValid;
}

QString OAILivingAreaFeatures::getTvException() const {
    return m_tv_exception;
}
void OAILivingAreaFeatures::setTvException(const QString &tv_exception) {
    m_tv_exception = tv_exception;
    m_tv_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_exception_Set() const{
    return m_tv_exception_isSet;
}

bool OAILivingAreaFeatures::is_tv_exception_Valid() const{
    return m_tv_exception_isValid;
}

bool OAILivingAreaFeatures::isTvStreaming() const {
    return m_tv_streaming;
}
void OAILivingAreaFeatures::setTvStreaming(const bool &tv_streaming) {
    m_tv_streaming = tv_streaming;
    m_tv_streaming_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_streaming_Set() const{
    return m_tv_streaming_isSet;
}

bool OAILivingAreaFeatures::is_tv_streaming_Valid() const{
    return m_tv_streaming_isValid;
}

QString OAILivingAreaFeatures::getTvStreamingException() const {
    return m_tv_streaming_exception;
}
void OAILivingAreaFeatures::setTvStreamingException(const QString &tv_streaming_exception) {
    m_tv_streaming_exception = tv_streaming_exception;
    m_tv_streaming_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_tv_streaming_exception_Set() const{
    return m_tv_streaming_exception_isSet;
}

bool OAILivingAreaFeatures::is_tv_streaming_exception_Valid() const{
    return m_tv_streaming_exception_isValid;
}

bool OAILivingAreaFeatures::isUniversalPowerAdapters() const {
    return m_universal_power_adapters;
}
void OAILivingAreaFeatures::setUniversalPowerAdapters(const bool &universal_power_adapters) {
    m_universal_power_adapters = universal_power_adapters;
    m_universal_power_adapters_isSet = true;
}

bool OAILivingAreaFeatures::is_universal_power_adapters_Set() const{
    return m_universal_power_adapters_isSet;
}

bool OAILivingAreaFeatures::is_universal_power_adapters_Valid() const{
    return m_universal_power_adapters_isValid;
}

QString OAILivingAreaFeatures::getUniversalPowerAdaptersException() const {
    return m_universal_power_adapters_exception;
}
void OAILivingAreaFeatures::setUniversalPowerAdaptersException(const QString &universal_power_adapters_exception) {
    m_universal_power_adapters_exception = universal_power_adapters_exception;
    m_universal_power_adapters_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_universal_power_adapters_exception_Set() const{
    return m_universal_power_adapters_exception_isSet;
}

bool OAILivingAreaFeatures::is_universal_power_adapters_exception_Valid() const{
    return m_universal_power_adapters_exception_isValid;
}

bool OAILivingAreaFeatures::isWasher() const {
    return m_washer;
}
void OAILivingAreaFeatures::setWasher(const bool &washer) {
    m_washer = washer;
    m_washer_isSet = true;
}

bool OAILivingAreaFeatures::is_washer_Set() const{
    return m_washer_isSet;
}

bool OAILivingAreaFeatures::is_washer_Valid() const{
    return m_washer_isValid;
}

QString OAILivingAreaFeatures::getWasherException() const {
    return m_washer_exception;
}
void OAILivingAreaFeatures::setWasherException(const QString &washer_exception) {
    m_washer_exception = washer_exception;
    m_washer_exception_isSet = true;
}

bool OAILivingAreaFeatures::is_washer_exception_Set() const{
    return m_washer_exception_isSet;
}

bool OAILivingAreaFeatures::is_washer_exception_Valid() const{
    return m_washer_exception_isValid;
}

bool OAILivingAreaFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_conditioning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_conditioning_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathtub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathtub_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dryer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dryer_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_room_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_room_key_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireplace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireplace_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hairdryer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hairdryer_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inunit_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inunit_safe_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inunit_wifi_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inunit_wifi_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ironing_equipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ironing_equipment_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_per_view_movies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_per_view_movies_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_bathroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_bathroom_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shower_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toilet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toilet_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_casting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_casting_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_streaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_streaming_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_power_adapters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_power_adapters_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_washer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_washer_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingAreaFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
