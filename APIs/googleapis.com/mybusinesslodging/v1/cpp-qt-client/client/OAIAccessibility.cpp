/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessibility::OAIAccessibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessibility::OAIAccessibility() {
    this->initializeModel();
}

OAIAccessibility::~OAIAccessibility() {}

void OAIAccessibility::initializeModel() {

    m_mobility_accessible_isSet = false;
    m_mobility_accessible_isValid = false;

    m_mobility_accessible_elevator_isSet = false;
    m_mobility_accessible_elevator_isValid = false;

    m_mobility_accessible_elevator_exception_isSet = false;
    m_mobility_accessible_elevator_exception_isValid = false;

    m_mobility_accessible_exception_isSet = false;
    m_mobility_accessible_exception_isValid = false;

    m_mobility_accessible_parking_isSet = false;
    m_mobility_accessible_parking_isValid = false;

    m_mobility_accessible_parking_exception_isSet = false;
    m_mobility_accessible_parking_exception_isValid = false;

    m_mobility_accessible_pool_isSet = false;
    m_mobility_accessible_pool_isValid = false;

    m_mobility_accessible_pool_exception_isSet = false;
    m_mobility_accessible_pool_exception_isValid = false;
}

void OAIAccessibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessibility::fromJsonObject(QJsonObject json) {

    m_mobility_accessible_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible, json[QString("mobilityAccessible")]);
    m_mobility_accessible_isSet = !json[QString("mobilityAccessible")].isNull() && m_mobility_accessible_isValid;

    m_mobility_accessible_elevator_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_elevator, json[QString("mobilityAccessibleElevator")]);
    m_mobility_accessible_elevator_isSet = !json[QString("mobilityAccessibleElevator")].isNull() && m_mobility_accessible_elevator_isValid;

    m_mobility_accessible_elevator_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_elevator_exception, json[QString("mobilityAccessibleElevatorException")]);
    m_mobility_accessible_elevator_exception_isSet = !json[QString("mobilityAccessibleElevatorException")].isNull() && m_mobility_accessible_elevator_exception_isValid;

    m_mobility_accessible_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_exception, json[QString("mobilityAccessibleException")]);
    m_mobility_accessible_exception_isSet = !json[QString("mobilityAccessibleException")].isNull() && m_mobility_accessible_exception_isValid;

    m_mobility_accessible_parking_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_parking, json[QString("mobilityAccessibleParking")]);
    m_mobility_accessible_parking_isSet = !json[QString("mobilityAccessibleParking")].isNull() && m_mobility_accessible_parking_isValid;

    m_mobility_accessible_parking_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_parking_exception, json[QString("mobilityAccessibleParkingException")]);
    m_mobility_accessible_parking_exception_isSet = !json[QString("mobilityAccessibleParkingException")].isNull() && m_mobility_accessible_parking_exception_isValid;

    m_mobility_accessible_pool_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_pool, json[QString("mobilityAccessiblePool")]);
    m_mobility_accessible_pool_isSet = !json[QString("mobilityAccessiblePool")].isNull() && m_mobility_accessible_pool_isValid;

    m_mobility_accessible_pool_exception_isValid = ::OpenAPI::fromJsonValue(m_mobility_accessible_pool_exception, json[QString("mobilityAccessiblePoolException")]);
    m_mobility_accessible_pool_exception_isSet = !json[QString("mobilityAccessiblePoolException")].isNull() && m_mobility_accessible_pool_exception_isValid;
}

QString OAIAccessibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessibility::asJsonObject() const {
    QJsonObject obj;
    if (m_mobility_accessible_isSet) {
        obj.insert(QString("mobilityAccessible"), ::OpenAPI::toJsonValue(m_mobility_accessible));
    }
    if (m_mobility_accessible_elevator_isSet) {
        obj.insert(QString("mobilityAccessibleElevator"), ::OpenAPI::toJsonValue(m_mobility_accessible_elevator));
    }
    if (m_mobility_accessible_elevator_exception_isSet) {
        obj.insert(QString("mobilityAccessibleElevatorException"), ::OpenAPI::toJsonValue(m_mobility_accessible_elevator_exception));
    }
    if (m_mobility_accessible_exception_isSet) {
        obj.insert(QString("mobilityAccessibleException"), ::OpenAPI::toJsonValue(m_mobility_accessible_exception));
    }
    if (m_mobility_accessible_parking_isSet) {
        obj.insert(QString("mobilityAccessibleParking"), ::OpenAPI::toJsonValue(m_mobility_accessible_parking));
    }
    if (m_mobility_accessible_parking_exception_isSet) {
        obj.insert(QString("mobilityAccessibleParkingException"), ::OpenAPI::toJsonValue(m_mobility_accessible_parking_exception));
    }
    if (m_mobility_accessible_pool_isSet) {
        obj.insert(QString("mobilityAccessiblePool"), ::OpenAPI::toJsonValue(m_mobility_accessible_pool));
    }
    if (m_mobility_accessible_pool_exception_isSet) {
        obj.insert(QString("mobilityAccessiblePoolException"), ::OpenAPI::toJsonValue(m_mobility_accessible_pool_exception));
    }
    return obj;
}

bool OAIAccessibility::isMobilityAccessible() const {
    return m_mobility_accessible;
}
void OAIAccessibility::setMobilityAccessible(const bool &mobility_accessible) {
    m_mobility_accessible = mobility_accessible;
    m_mobility_accessible_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_Set() const{
    return m_mobility_accessible_isSet;
}

bool OAIAccessibility::is_mobility_accessible_Valid() const{
    return m_mobility_accessible_isValid;
}

bool OAIAccessibility::isMobilityAccessibleElevator() const {
    return m_mobility_accessible_elevator;
}
void OAIAccessibility::setMobilityAccessibleElevator(const bool &mobility_accessible_elevator) {
    m_mobility_accessible_elevator = mobility_accessible_elevator;
    m_mobility_accessible_elevator_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_elevator_Set() const{
    return m_mobility_accessible_elevator_isSet;
}

bool OAIAccessibility::is_mobility_accessible_elevator_Valid() const{
    return m_mobility_accessible_elevator_isValid;
}

QString OAIAccessibility::getMobilityAccessibleElevatorException() const {
    return m_mobility_accessible_elevator_exception;
}
void OAIAccessibility::setMobilityAccessibleElevatorException(const QString &mobility_accessible_elevator_exception) {
    m_mobility_accessible_elevator_exception = mobility_accessible_elevator_exception;
    m_mobility_accessible_elevator_exception_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_elevator_exception_Set() const{
    return m_mobility_accessible_elevator_exception_isSet;
}

bool OAIAccessibility::is_mobility_accessible_elevator_exception_Valid() const{
    return m_mobility_accessible_elevator_exception_isValid;
}

QString OAIAccessibility::getMobilityAccessibleException() const {
    return m_mobility_accessible_exception;
}
void OAIAccessibility::setMobilityAccessibleException(const QString &mobility_accessible_exception) {
    m_mobility_accessible_exception = mobility_accessible_exception;
    m_mobility_accessible_exception_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_exception_Set() const{
    return m_mobility_accessible_exception_isSet;
}

bool OAIAccessibility::is_mobility_accessible_exception_Valid() const{
    return m_mobility_accessible_exception_isValid;
}

bool OAIAccessibility::isMobilityAccessibleParking() const {
    return m_mobility_accessible_parking;
}
void OAIAccessibility::setMobilityAccessibleParking(const bool &mobility_accessible_parking) {
    m_mobility_accessible_parking = mobility_accessible_parking;
    m_mobility_accessible_parking_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_parking_Set() const{
    return m_mobility_accessible_parking_isSet;
}

bool OAIAccessibility::is_mobility_accessible_parking_Valid() const{
    return m_mobility_accessible_parking_isValid;
}

QString OAIAccessibility::getMobilityAccessibleParkingException() const {
    return m_mobility_accessible_parking_exception;
}
void OAIAccessibility::setMobilityAccessibleParkingException(const QString &mobility_accessible_parking_exception) {
    m_mobility_accessible_parking_exception = mobility_accessible_parking_exception;
    m_mobility_accessible_parking_exception_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_parking_exception_Set() const{
    return m_mobility_accessible_parking_exception_isSet;
}

bool OAIAccessibility::is_mobility_accessible_parking_exception_Valid() const{
    return m_mobility_accessible_parking_exception_isValid;
}

bool OAIAccessibility::isMobilityAccessiblePool() const {
    return m_mobility_accessible_pool;
}
void OAIAccessibility::setMobilityAccessiblePool(const bool &mobility_accessible_pool) {
    m_mobility_accessible_pool = mobility_accessible_pool;
    m_mobility_accessible_pool_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_pool_Set() const{
    return m_mobility_accessible_pool_isSet;
}

bool OAIAccessibility::is_mobility_accessible_pool_Valid() const{
    return m_mobility_accessible_pool_isValid;
}

QString OAIAccessibility::getMobilityAccessiblePoolException() const {
    return m_mobility_accessible_pool_exception;
}
void OAIAccessibility::setMobilityAccessiblePoolException(const QString &mobility_accessible_pool_exception) {
    m_mobility_accessible_pool_exception = mobility_accessible_pool_exception;
    m_mobility_accessible_pool_exception_isSet = true;
}

bool OAIAccessibility::is_mobility_accessible_pool_exception_Set() const{
    return m_mobility_accessible_pool_exception_isSet;
}

bool OAIAccessibility::is_mobility_accessible_pool_exception_Valid() const{
    return m_mobility_accessible_pool_exception_isValid;
}

bool OAIAccessibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mobility_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_elevator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_elevator_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_parking_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobility_accessible_pool_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
