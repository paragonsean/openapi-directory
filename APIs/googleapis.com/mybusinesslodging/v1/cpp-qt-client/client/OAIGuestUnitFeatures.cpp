/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestUnitFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestUnitFeatures::OAIGuestUnitFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestUnitFeatures::OAIGuestUnitFeatures() {
    this->initializeModel();
}

OAIGuestUnitFeatures::~OAIGuestUnitFeatures() {}

void OAIGuestUnitFeatures::initializeModel() {

    m_bungalow_or_villa_isSet = false;
    m_bungalow_or_villa_isValid = false;

    m_bungalow_or_villa_exception_isSet = false;
    m_bungalow_or_villa_exception_isValid = false;

    m_connecting_unit_available_isSet = false;
    m_connecting_unit_available_isValid = false;

    m_connecting_unit_available_exception_isSet = false;
    m_connecting_unit_available_exception_isValid = false;

    m_executive_floor_isSet = false;
    m_executive_floor_isValid = false;

    m_executive_floor_exception_isSet = false;
    m_executive_floor_exception_isValid = false;

    m_max_adult_occupants_count_isSet = false;
    m_max_adult_occupants_count_isValid = false;

    m_max_adult_occupants_count_exception_isSet = false;
    m_max_adult_occupants_count_exception_isValid = false;

    m_max_child_occupants_count_isSet = false;
    m_max_child_occupants_count_isValid = false;

    m_max_child_occupants_count_exception_isSet = false;
    m_max_child_occupants_count_exception_isValid = false;

    m_max_occupants_count_isSet = false;
    m_max_occupants_count_isValid = false;

    m_max_occupants_count_exception_isSet = false;
    m_max_occupants_count_exception_isValid = false;

    m_private_home_isSet = false;
    m_private_home_isValid = false;

    m_private_home_exception_isSet = false;
    m_private_home_exception_isValid = false;

    m_suite_isSet = false;
    m_suite_isValid = false;

    m_suite_exception_isSet = false;
    m_suite_exception_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_tier_exception_isSet = false;
    m_tier_exception_isValid = false;

    m_total_living_areas_isSet = false;
    m_total_living_areas_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIGuestUnitFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestUnitFeatures::fromJsonObject(QJsonObject json) {

    m_bungalow_or_villa_isValid = ::OpenAPI::fromJsonValue(m_bungalow_or_villa, json[QString("bungalowOrVilla")]);
    m_bungalow_or_villa_isSet = !json[QString("bungalowOrVilla")].isNull() && m_bungalow_or_villa_isValid;

    m_bungalow_or_villa_exception_isValid = ::OpenAPI::fromJsonValue(m_bungalow_or_villa_exception, json[QString("bungalowOrVillaException")]);
    m_bungalow_or_villa_exception_isSet = !json[QString("bungalowOrVillaException")].isNull() && m_bungalow_or_villa_exception_isValid;

    m_connecting_unit_available_isValid = ::OpenAPI::fromJsonValue(m_connecting_unit_available, json[QString("connectingUnitAvailable")]);
    m_connecting_unit_available_isSet = !json[QString("connectingUnitAvailable")].isNull() && m_connecting_unit_available_isValid;

    m_connecting_unit_available_exception_isValid = ::OpenAPI::fromJsonValue(m_connecting_unit_available_exception, json[QString("connectingUnitAvailableException")]);
    m_connecting_unit_available_exception_isSet = !json[QString("connectingUnitAvailableException")].isNull() && m_connecting_unit_available_exception_isValid;

    m_executive_floor_isValid = ::OpenAPI::fromJsonValue(m_executive_floor, json[QString("executiveFloor")]);
    m_executive_floor_isSet = !json[QString("executiveFloor")].isNull() && m_executive_floor_isValid;

    m_executive_floor_exception_isValid = ::OpenAPI::fromJsonValue(m_executive_floor_exception, json[QString("executiveFloorException")]);
    m_executive_floor_exception_isSet = !json[QString("executiveFloorException")].isNull() && m_executive_floor_exception_isValid;

    m_max_adult_occupants_count_isValid = ::OpenAPI::fromJsonValue(m_max_adult_occupants_count, json[QString("maxAdultOccupantsCount")]);
    m_max_adult_occupants_count_isSet = !json[QString("maxAdultOccupantsCount")].isNull() && m_max_adult_occupants_count_isValid;

    m_max_adult_occupants_count_exception_isValid = ::OpenAPI::fromJsonValue(m_max_adult_occupants_count_exception, json[QString("maxAdultOccupantsCountException")]);
    m_max_adult_occupants_count_exception_isSet = !json[QString("maxAdultOccupantsCountException")].isNull() && m_max_adult_occupants_count_exception_isValid;

    m_max_child_occupants_count_isValid = ::OpenAPI::fromJsonValue(m_max_child_occupants_count, json[QString("maxChildOccupantsCount")]);
    m_max_child_occupants_count_isSet = !json[QString("maxChildOccupantsCount")].isNull() && m_max_child_occupants_count_isValid;

    m_max_child_occupants_count_exception_isValid = ::OpenAPI::fromJsonValue(m_max_child_occupants_count_exception, json[QString("maxChildOccupantsCountException")]);
    m_max_child_occupants_count_exception_isSet = !json[QString("maxChildOccupantsCountException")].isNull() && m_max_child_occupants_count_exception_isValid;

    m_max_occupants_count_isValid = ::OpenAPI::fromJsonValue(m_max_occupants_count, json[QString("maxOccupantsCount")]);
    m_max_occupants_count_isSet = !json[QString("maxOccupantsCount")].isNull() && m_max_occupants_count_isValid;

    m_max_occupants_count_exception_isValid = ::OpenAPI::fromJsonValue(m_max_occupants_count_exception, json[QString("maxOccupantsCountException")]);
    m_max_occupants_count_exception_isSet = !json[QString("maxOccupantsCountException")].isNull() && m_max_occupants_count_exception_isValid;

    m_private_home_isValid = ::OpenAPI::fromJsonValue(m_private_home, json[QString("privateHome")]);
    m_private_home_isSet = !json[QString("privateHome")].isNull() && m_private_home_isValid;

    m_private_home_exception_isValid = ::OpenAPI::fromJsonValue(m_private_home_exception, json[QString("privateHomeException")]);
    m_private_home_exception_isSet = !json[QString("privateHomeException")].isNull() && m_private_home_exception_isValid;

    m_suite_isValid = ::OpenAPI::fromJsonValue(m_suite, json[QString("suite")]);
    m_suite_isSet = !json[QString("suite")].isNull() && m_suite_isValid;

    m_suite_exception_isValid = ::OpenAPI::fromJsonValue(m_suite_exception, json[QString("suiteException")]);
    m_suite_exception_isSet = !json[QString("suiteException")].isNull() && m_suite_exception_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_tier_exception_isValid = ::OpenAPI::fromJsonValue(m_tier_exception, json[QString("tierException")]);
    m_tier_exception_isSet = !json[QString("tierException")].isNull() && m_tier_exception_isValid;

    m_total_living_areas_isValid = ::OpenAPI::fromJsonValue(m_total_living_areas, json[QString("totalLivingAreas")]);
    m_total_living_areas_isSet = !json[QString("totalLivingAreas")].isNull() && m_total_living_areas_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIGuestUnitFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestUnitFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_bungalow_or_villa_isSet) {
        obj.insert(QString("bungalowOrVilla"), ::OpenAPI::toJsonValue(m_bungalow_or_villa));
    }
    if (m_bungalow_or_villa_exception_isSet) {
        obj.insert(QString("bungalowOrVillaException"), ::OpenAPI::toJsonValue(m_bungalow_or_villa_exception));
    }
    if (m_connecting_unit_available_isSet) {
        obj.insert(QString("connectingUnitAvailable"), ::OpenAPI::toJsonValue(m_connecting_unit_available));
    }
    if (m_connecting_unit_available_exception_isSet) {
        obj.insert(QString("connectingUnitAvailableException"), ::OpenAPI::toJsonValue(m_connecting_unit_available_exception));
    }
    if (m_executive_floor_isSet) {
        obj.insert(QString("executiveFloor"), ::OpenAPI::toJsonValue(m_executive_floor));
    }
    if (m_executive_floor_exception_isSet) {
        obj.insert(QString("executiveFloorException"), ::OpenAPI::toJsonValue(m_executive_floor_exception));
    }
    if (m_max_adult_occupants_count_isSet) {
        obj.insert(QString("maxAdultOccupantsCount"), ::OpenAPI::toJsonValue(m_max_adult_occupants_count));
    }
    if (m_max_adult_occupants_count_exception_isSet) {
        obj.insert(QString("maxAdultOccupantsCountException"), ::OpenAPI::toJsonValue(m_max_adult_occupants_count_exception));
    }
    if (m_max_child_occupants_count_isSet) {
        obj.insert(QString("maxChildOccupantsCount"), ::OpenAPI::toJsonValue(m_max_child_occupants_count));
    }
    if (m_max_child_occupants_count_exception_isSet) {
        obj.insert(QString("maxChildOccupantsCountException"), ::OpenAPI::toJsonValue(m_max_child_occupants_count_exception));
    }
    if (m_max_occupants_count_isSet) {
        obj.insert(QString("maxOccupantsCount"), ::OpenAPI::toJsonValue(m_max_occupants_count));
    }
    if (m_max_occupants_count_exception_isSet) {
        obj.insert(QString("maxOccupantsCountException"), ::OpenAPI::toJsonValue(m_max_occupants_count_exception));
    }
    if (m_private_home_isSet) {
        obj.insert(QString("privateHome"), ::OpenAPI::toJsonValue(m_private_home));
    }
    if (m_private_home_exception_isSet) {
        obj.insert(QString("privateHomeException"), ::OpenAPI::toJsonValue(m_private_home_exception));
    }
    if (m_suite_isSet) {
        obj.insert(QString("suite"), ::OpenAPI::toJsonValue(m_suite));
    }
    if (m_suite_exception_isSet) {
        obj.insert(QString("suiteException"), ::OpenAPI::toJsonValue(m_suite_exception));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_tier_exception_isSet) {
        obj.insert(QString("tierException"), ::OpenAPI::toJsonValue(m_tier_exception));
    }
    if (m_total_living_areas.isSet()) {
        obj.insert(QString("totalLivingAreas"), ::OpenAPI::toJsonValue(m_total_living_areas));
    }
    if (m_views.isSet()) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

bool OAIGuestUnitFeatures::isBungalowOrVilla() const {
    return m_bungalow_or_villa;
}
void OAIGuestUnitFeatures::setBungalowOrVilla(const bool &bungalow_or_villa) {
    m_bungalow_or_villa = bungalow_or_villa;
    m_bungalow_or_villa_isSet = true;
}

bool OAIGuestUnitFeatures::is_bungalow_or_villa_Set() const{
    return m_bungalow_or_villa_isSet;
}

bool OAIGuestUnitFeatures::is_bungalow_or_villa_Valid() const{
    return m_bungalow_or_villa_isValid;
}

QString OAIGuestUnitFeatures::getBungalowOrVillaException() const {
    return m_bungalow_or_villa_exception;
}
void OAIGuestUnitFeatures::setBungalowOrVillaException(const QString &bungalow_or_villa_exception) {
    m_bungalow_or_villa_exception = bungalow_or_villa_exception;
    m_bungalow_or_villa_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_bungalow_or_villa_exception_Set() const{
    return m_bungalow_or_villa_exception_isSet;
}

bool OAIGuestUnitFeatures::is_bungalow_or_villa_exception_Valid() const{
    return m_bungalow_or_villa_exception_isValid;
}

bool OAIGuestUnitFeatures::isConnectingUnitAvailable() const {
    return m_connecting_unit_available;
}
void OAIGuestUnitFeatures::setConnectingUnitAvailable(const bool &connecting_unit_available) {
    m_connecting_unit_available = connecting_unit_available;
    m_connecting_unit_available_isSet = true;
}

bool OAIGuestUnitFeatures::is_connecting_unit_available_Set() const{
    return m_connecting_unit_available_isSet;
}

bool OAIGuestUnitFeatures::is_connecting_unit_available_Valid() const{
    return m_connecting_unit_available_isValid;
}

QString OAIGuestUnitFeatures::getConnectingUnitAvailableException() const {
    return m_connecting_unit_available_exception;
}
void OAIGuestUnitFeatures::setConnectingUnitAvailableException(const QString &connecting_unit_available_exception) {
    m_connecting_unit_available_exception = connecting_unit_available_exception;
    m_connecting_unit_available_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_connecting_unit_available_exception_Set() const{
    return m_connecting_unit_available_exception_isSet;
}

bool OAIGuestUnitFeatures::is_connecting_unit_available_exception_Valid() const{
    return m_connecting_unit_available_exception_isValid;
}

bool OAIGuestUnitFeatures::isExecutiveFloor() const {
    return m_executive_floor;
}
void OAIGuestUnitFeatures::setExecutiveFloor(const bool &executive_floor) {
    m_executive_floor = executive_floor;
    m_executive_floor_isSet = true;
}

bool OAIGuestUnitFeatures::is_executive_floor_Set() const{
    return m_executive_floor_isSet;
}

bool OAIGuestUnitFeatures::is_executive_floor_Valid() const{
    return m_executive_floor_isValid;
}

QString OAIGuestUnitFeatures::getExecutiveFloorException() const {
    return m_executive_floor_exception;
}
void OAIGuestUnitFeatures::setExecutiveFloorException(const QString &executive_floor_exception) {
    m_executive_floor_exception = executive_floor_exception;
    m_executive_floor_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_executive_floor_exception_Set() const{
    return m_executive_floor_exception_isSet;
}

bool OAIGuestUnitFeatures::is_executive_floor_exception_Valid() const{
    return m_executive_floor_exception_isValid;
}

qint32 OAIGuestUnitFeatures::getMaxAdultOccupantsCount() const {
    return m_max_adult_occupants_count;
}
void OAIGuestUnitFeatures::setMaxAdultOccupantsCount(const qint32 &max_adult_occupants_count) {
    m_max_adult_occupants_count = max_adult_occupants_count;
    m_max_adult_occupants_count_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_adult_occupants_count_Set() const{
    return m_max_adult_occupants_count_isSet;
}

bool OAIGuestUnitFeatures::is_max_adult_occupants_count_Valid() const{
    return m_max_adult_occupants_count_isValid;
}

QString OAIGuestUnitFeatures::getMaxAdultOccupantsCountException() const {
    return m_max_adult_occupants_count_exception;
}
void OAIGuestUnitFeatures::setMaxAdultOccupantsCountException(const QString &max_adult_occupants_count_exception) {
    m_max_adult_occupants_count_exception = max_adult_occupants_count_exception;
    m_max_adult_occupants_count_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_adult_occupants_count_exception_Set() const{
    return m_max_adult_occupants_count_exception_isSet;
}

bool OAIGuestUnitFeatures::is_max_adult_occupants_count_exception_Valid() const{
    return m_max_adult_occupants_count_exception_isValid;
}

qint32 OAIGuestUnitFeatures::getMaxChildOccupantsCount() const {
    return m_max_child_occupants_count;
}
void OAIGuestUnitFeatures::setMaxChildOccupantsCount(const qint32 &max_child_occupants_count) {
    m_max_child_occupants_count = max_child_occupants_count;
    m_max_child_occupants_count_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_child_occupants_count_Set() const{
    return m_max_child_occupants_count_isSet;
}

bool OAIGuestUnitFeatures::is_max_child_occupants_count_Valid() const{
    return m_max_child_occupants_count_isValid;
}

QString OAIGuestUnitFeatures::getMaxChildOccupantsCountException() const {
    return m_max_child_occupants_count_exception;
}
void OAIGuestUnitFeatures::setMaxChildOccupantsCountException(const QString &max_child_occupants_count_exception) {
    m_max_child_occupants_count_exception = max_child_occupants_count_exception;
    m_max_child_occupants_count_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_child_occupants_count_exception_Set() const{
    return m_max_child_occupants_count_exception_isSet;
}

bool OAIGuestUnitFeatures::is_max_child_occupants_count_exception_Valid() const{
    return m_max_child_occupants_count_exception_isValid;
}

qint32 OAIGuestUnitFeatures::getMaxOccupantsCount() const {
    return m_max_occupants_count;
}
void OAIGuestUnitFeatures::setMaxOccupantsCount(const qint32 &max_occupants_count) {
    m_max_occupants_count = max_occupants_count;
    m_max_occupants_count_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_occupants_count_Set() const{
    return m_max_occupants_count_isSet;
}

bool OAIGuestUnitFeatures::is_max_occupants_count_Valid() const{
    return m_max_occupants_count_isValid;
}

QString OAIGuestUnitFeatures::getMaxOccupantsCountException() const {
    return m_max_occupants_count_exception;
}
void OAIGuestUnitFeatures::setMaxOccupantsCountException(const QString &max_occupants_count_exception) {
    m_max_occupants_count_exception = max_occupants_count_exception;
    m_max_occupants_count_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_max_occupants_count_exception_Set() const{
    return m_max_occupants_count_exception_isSet;
}

bool OAIGuestUnitFeatures::is_max_occupants_count_exception_Valid() const{
    return m_max_occupants_count_exception_isValid;
}

bool OAIGuestUnitFeatures::isPrivateHome() const {
    return m_private_home;
}
void OAIGuestUnitFeatures::setPrivateHome(const bool &private_home) {
    m_private_home = private_home;
    m_private_home_isSet = true;
}

bool OAIGuestUnitFeatures::is_private_home_Set() const{
    return m_private_home_isSet;
}

bool OAIGuestUnitFeatures::is_private_home_Valid() const{
    return m_private_home_isValid;
}

QString OAIGuestUnitFeatures::getPrivateHomeException() const {
    return m_private_home_exception;
}
void OAIGuestUnitFeatures::setPrivateHomeException(const QString &private_home_exception) {
    m_private_home_exception = private_home_exception;
    m_private_home_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_private_home_exception_Set() const{
    return m_private_home_exception_isSet;
}

bool OAIGuestUnitFeatures::is_private_home_exception_Valid() const{
    return m_private_home_exception_isValid;
}

bool OAIGuestUnitFeatures::isSuite() const {
    return m_suite;
}
void OAIGuestUnitFeatures::setSuite(const bool &suite) {
    m_suite = suite;
    m_suite_isSet = true;
}

bool OAIGuestUnitFeatures::is_suite_Set() const{
    return m_suite_isSet;
}

bool OAIGuestUnitFeatures::is_suite_Valid() const{
    return m_suite_isValid;
}

QString OAIGuestUnitFeatures::getSuiteException() const {
    return m_suite_exception;
}
void OAIGuestUnitFeatures::setSuiteException(const QString &suite_exception) {
    m_suite_exception = suite_exception;
    m_suite_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_suite_exception_Set() const{
    return m_suite_exception_isSet;
}

bool OAIGuestUnitFeatures::is_suite_exception_Valid() const{
    return m_suite_exception_isValid;
}

QString OAIGuestUnitFeatures::getTier() const {
    return m_tier;
}
void OAIGuestUnitFeatures::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIGuestUnitFeatures::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIGuestUnitFeatures::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAIGuestUnitFeatures::getTierException() const {
    return m_tier_exception;
}
void OAIGuestUnitFeatures::setTierException(const QString &tier_exception) {
    m_tier_exception = tier_exception;
    m_tier_exception_isSet = true;
}

bool OAIGuestUnitFeatures::is_tier_exception_Set() const{
    return m_tier_exception_isSet;
}

bool OAIGuestUnitFeatures::is_tier_exception_Valid() const{
    return m_tier_exception_isValid;
}

OAILivingArea OAIGuestUnitFeatures::getTotalLivingAreas() const {
    return m_total_living_areas;
}
void OAIGuestUnitFeatures::setTotalLivingAreas(const OAILivingArea &total_living_areas) {
    m_total_living_areas = total_living_areas;
    m_total_living_areas_isSet = true;
}

bool OAIGuestUnitFeatures::is_total_living_areas_Set() const{
    return m_total_living_areas_isSet;
}

bool OAIGuestUnitFeatures::is_total_living_areas_Valid() const{
    return m_total_living_areas_isValid;
}

OAIViewsFromUnit OAIGuestUnitFeatures::getViews() const {
    return m_views;
}
void OAIGuestUnitFeatures::setViews(const OAIViewsFromUnit &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIGuestUnitFeatures::is_views_Set() const{
    return m_views_isSet;
}

bool OAIGuestUnitFeatures::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIGuestUnitFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bungalow_or_villa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bungalow_or_villa_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connecting_unit_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connecting_unit_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executive_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executive_floor_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_adult_occupants_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_adult_occupants_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_child_occupants_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_child_occupants_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occupants_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occupants_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_home_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_living_areas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestUnitFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
