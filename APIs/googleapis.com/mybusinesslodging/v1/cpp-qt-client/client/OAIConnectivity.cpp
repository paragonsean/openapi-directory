/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivity::OAIConnectivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivity::OAIConnectivity() {
    this->initializeModel();
}

OAIConnectivity::~OAIConnectivity() {}

void OAIConnectivity::initializeModel() {

    m_free_wifi_isSet = false;
    m_free_wifi_isValid = false;

    m_free_wifi_exception_isSet = false;
    m_free_wifi_exception_isValid = false;

    m_public_area_wifi_available_isSet = false;
    m_public_area_wifi_available_isValid = false;

    m_public_area_wifi_available_exception_isSet = false;
    m_public_area_wifi_available_exception_isValid = false;

    m_public_internet_terminal_isSet = false;
    m_public_internet_terminal_isValid = false;

    m_public_internet_terminal_exception_isSet = false;
    m_public_internet_terminal_exception_isValid = false;

    m_wifi_available_isSet = false;
    m_wifi_available_isValid = false;

    m_wifi_available_exception_isSet = false;
    m_wifi_available_exception_isValid = false;
}

void OAIConnectivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivity::fromJsonObject(QJsonObject json) {

    m_free_wifi_isValid = ::OpenAPI::fromJsonValue(m_free_wifi, json[QString("freeWifi")]);
    m_free_wifi_isSet = !json[QString("freeWifi")].isNull() && m_free_wifi_isValid;

    m_free_wifi_exception_isValid = ::OpenAPI::fromJsonValue(m_free_wifi_exception, json[QString("freeWifiException")]);
    m_free_wifi_exception_isSet = !json[QString("freeWifiException")].isNull() && m_free_wifi_exception_isValid;

    m_public_area_wifi_available_isValid = ::OpenAPI::fromJsonValue(m_public_area_wifi_available, json[QString("publicAreaWifiAvailable")]);
    m_public_area_wifi_available_isSet = !json[QString("publicAreaWifiAvailable")].isNull() && m_public_area_wifi_available_isValid;

    m_public_area_wifi_available_exception_isValid = ::OpenAPI::fromJsonValue(m_public_area_wifi_available_exception, json[QString("publicAreaWifiAvailableException")]);
    m_public_area_wifi_available_exception_isSet = !json[QString("publicAreaWifiAvailableException")].isNull() && m_public_area_wifi_available_exception_isValid;

    m_public_internet_terminal_isValid = ::OpenAPI::fromJsonValue(m_public_internet_terminal, json[QString("publicInternetTerminal")]);
    m_public_internet_terminal_isSet = !json[QString("publicInternetTerminal")].isNull() && m_public_internet_terminal_isValid;

    m_public_internet_terminal_exception_isValid = ::OpenAPI::fromJsonValue(m_public_internet_terminal_exception, json[QString("publicInternetTerminalException")]);
    m_public_internet_terminal_exception_isSet = !json[QString("publicInternetTerminalException")].isNull() && m_public_internet_terminal_exception_isValid;

    m_wifi_available_isValid = ::OpenAPI::fromJsonValue(m_wifi_available, json[QString("wifiAvailable")]);
    m_wifi_available_isSet = !json[QString("wifiAvailable")].isNull() && m_wifi_available_isValid;

    m_wifi_available_exception_isValid = ::OpenAPI::fromJsonValue(m_wifi_available_exception, json[QString("wifiAvailableException")]);
    m_wifi_available_exception_isSet = !json[QString("wifiAvailableException")].isNull() && m_wifi_available_exception_isValid;
}

QString OAIConnectivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivity::asJsonObject() const {
    QJsonObject obj;
    if (m_free_wifi_isSet) {
        obj.insert(QString("freeWifi"), ::OpenAPI::toJsonValue(m_free_wifi));
    }
    if (m_free_wifi_exception_isSet) {
        obj.insert(QString("freeWifiException"), ::OpenAPI::toJsonValue(m_free_wifi_exception));
    }
    if (m_public_area_wifi_available_isSet) {
        obj.insert(QString("publicAreaWifiAvailable"), ::OpenAPI::toJsonValue(m_public_area_wifi_available));
    }
    if (m_public_area_wifi_available_exception_isSet) {
        obj.insert(QString("publicAreaWifiAvailableException"), ::OpenAPI::toJsonValue(m_public_area_wifi_available_exception));
    }
    if (m_public_internet_terminal_isSet) {
        obj.insert(QString("publicInternetTerminal"), ::OpenAPI::toJsonValue(m_public_internet_terminal));
    }
    if (m_public_internet_terminal_exception_isSet) {
        obj.insert(QString("publicInternetTerminalException"), ::OpenAPI::toJsonValue(m_public_internet_terminal_exception));
    }
    if (m_wifi_available_isSet) {
        obj.insert(QString("wifiAvailable"), ::OpenAPI::toJsonValue(m_wifi_available));
    }
    if (m_wifi_available_exception_isSet) {
        obj.insert(QString("wifiAvailableException"), ::OpenAPI::toJsonValue(m_wifi_available_exception));
    }
    return obj;
}

bool OAIConnectivity::isFreeWifi() const {
    return m_free_wifi;
}
void OAIConnectivity::setFreeWifi(const bool &free_wifi) {
    m_free_wifi = free_wifi;
    m_free_wifi_isSet = true;
}

bool OAIConnectivity::is_free_wifi_Set() const{
    return m_free_wifi_isSet;
}

bool OAIConnectivity::is_free_wifi_Valid() const{
    return m_free_wifi_isValid;
}

QString OAIConnectivity::getFreeWifiException() const {
    return m_free_wifi_exception;
}
void OAIConnectivity::setFreeWifiException(const QString &free_wifi_exception) {
    m_free_wifi_exception = free_wifi_exception;
    m_free_wifi_exception_isSet = true;
}

bool OAIConnectivity::is_free_wifi_exception_Set() const{
    return m_free_wifi_exception_isSet;
}

bool OAIConnectivity::is_free_wifi_exception_Valid() const{
    return m_free_wifi_exception_isValid;
}

bool OAIConnectivity::isPublicAreaWifiAvailable() const {
    return m_public_area_wifi_available;
}
void OAIConnectivity::setPublicAreaWifiAvailable(const bool &public_area_wifi_available) {
    m_public_area_wifi_available = public_area_wifi_available;
    m_public_area_wifi_available_isSet = true;
}

bool OAIConnectivity::is_public_area_wifi_available_Set() const{
    return m_public_area_wifi_available_isSet;
}

bool OAIConnectivity::is_public_area_wifi_available_Valid() const{
    return m_public_area_wifi_available_isValid;
}

QString OAIConnectivity::getPublicAreaWifiAvailableException() const {
    return m_public_area_wifi_available_exception;
}
void OAIConnectivity::setPublicAreaWifiAvailableException(const QString &public_area_wifi_available_exception) {
    m_public_area_wifi_available_exception = public_area_wifi_available_exception;
    m_public_area_wifi_available_exception_isSet = true;
}

bool OAIConnectivity::is_public_area_wifi_available_exception_Set() const{
    return m_public_area_wifi_available_exception_isSet;
}

bool OAIConnectivity::is_public_area_wifi_available_exception_Valid() const{
    return m_public_area_wifi_available_exception_isValid;
}

bool OAIConnectivity::isPublicInternetTerminal() const {
    return m_public_internet_terminal;
}
void OAIConnectivity::setPublicInternetTerminal(const bool &public_internet_terminal) {
    m_public_internet_terminal = public_internet_terminal;
    m_public_internet_terminal_isSet = true;
}

bool OAIConnectivity::is_public_internet_terminal_Set() const{
    return m_public_internet_terminal_isSet;
}

bool OAIConnectivity::is_public_internet_terminal_Valid() const{
    return m_public_internet_terminal_isValid;
}

QString OAIConnectivity::getPublicInternetTerminalException() const {
    return m_public_internet_terminal_exception;
}
void OAIConnectivity::setPublicInternetTerminalException(const QString &public_internet_terminal_exception) {
    m_public_internet_terminal_exception = public_internet_terminal_exception;
    m_public_internet_terminal_exception_isSet = true;
}

bool OAIConnectivity::is_public_internet_terminal_exception_Set() const{
    return m_public_internet_terminal_exception_isSet;
}

bool OAIConnectivity::is_public_internet_terminal_exception_Valid() const{
    return m_public_internet_terminal_exception_isValid;
}

bool OAIConnectivity::isWifiAvailable() const {
    return m_wifi_available;
}
void OAIConnectivity::setWifiAvailable(const bool &wifi_available) {
    m_wifi_available = wifi_available;
    m_wifi_available_isSet = true;
}

bool OAIConnectivity::is_wifi_available_Set() const{
    return m_wifi_available_isSet;
}

bool OAIConnectivity::is_wifi_available_Valid() const{
    return m_wifi_available_isValid;
}

QString OAIConnectivity::getWifiAvailableException() const {
    return m_wifi_available_exception;
}
void OAIConnectivity::setWifiAvailableException(const QString &wifi_available_exception) {
    m_wifi_available_exception = wifi_available_exception;
    m_wifi_available_exception_isSet = true;
}

bool OAIConnectivity::is_wifi_available_exception_Set() const{
    return m_wifi_available_exception_isSet;
}

bool OAIConnectivity::is_wifi_available_exception_Valid() const{
    return m_wifi_available_exception_isValid;
}

bool OAIConnectivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_wifi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_wifi_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_area_wifi_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_area_wifi_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_internet_terminal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_internet_terminal_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
