/**
 * My Business Lodging API
 * The My Business Lodging API enables managing lodging business information on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicies::OAIPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicies::OAIPolicies() {
    this->initializeModel();
}

OAIPolicies::~OAIPolicies() {}

void OAIPolicies::initializeModel() {

    m_all_inclusive_available_isSet = false;
    m_all_inclusive_available_isValid = false;

    m_all_inclusive_available_exception_isSet = false;
    m_all_inclusive_available_exception_isValid = false;

    m_all_inclusive_only_isSet = false;
    m_all_inclusive_only_isValid = false;

    m_all_inclusive_only_exception_isSet = false;
    m_all_inclusive_only_exception_isValid = false;

    m_checkin_time_isSet = false;
    m_checkin_time_isValid = false;

    m_checkin_time_exception_isSet = false;
    m_checkin_time_exception_isValid = false;

    m_checkout_time_isSet = false;
    m_checkout_time_isValid = false;

    m_checkout_time_exception_isSet = false;
    m_checkout_time_exception_isValid = false;

    m_kids_stay_free_isSet = false;
    m_kids_stay_free_isValid = false;

    m_kids_stay_free_exception_isSet = false;
    m_kids_stay_free_exception_isValid = false;

    m_max_child_age_isSet = false;
    m_max_child_age_isValid = false;

    m_max_child_age_exception_isSet = false;
    m_max_child_age_exception_isValid = false;

    m_max_kids_stay_free_count_isSet = false;
    m_max_kids_stay_free_count_isValid = false;

    m_max_kids_stay_free_count_exception_isSet = false;
    m_max_kids_stay_free_count_exception_isValid = false;

    m_payment_options_isSet = false;
    m_payment_options_isValid = false;

    m_smoke_free_property_isSet = false;
    m_smoke_free_property_isValid = false;

    m_smoke_free_property_exception_isSet = false;
    m_smoke_free_property_exception_isValid = false;
}

void OAIPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicies::fromJsonObject(QJsonObject json) {

    m_all_inclusive_available_isValid = ::OpenAPI::fromJsonValue(m_all_inclusive_available, json[QString("allInclusiveAvailable")]);
    m_all_inclusive_available_isSet = !json[QString("allInclusiveAvailable")].isNull() && m_all_inclusive_available_isValid;

    m_all_inclusive_available_exception_isValid = ::OpenAPI::fromJsonValue(m_all_inclusive_available_exception, json[QString("allInclusiveAvailableException")]);
    m_all_inclusive_available_exception_isSet = !json[QString("allInclusiveAvailableException")].isNull() && m_all_inclusive_available_exception_isValid;

    m_all_inclusive_only_isValid = ::OpenAPI::fromJsonValue(m_all_inclusive_only, json[QString("allInclusiveOnly")]);
    m_all_inclusive_only_isSet = !json[QString("allInclusiveOnly")].isNull() && m_all_inclusive_only_isValid;

    m_all_inclusive_only_exception_isValid = ::OpenAPI::fromJsonValue(m_all_inclusive_only_exception, json[QString("allInclusiveOnlyException")]);
    m_all_inclusive_only_exception_isSet = !json[QString("allInclusiveOnlyException")].isNull() && m_all_inclusive_only_exception_isValid;

    m_checkin_time_isValid = ::OpenAPI::fromJsonValue(m_checkin_time, json[QString("checkinTime")]);
    m_checkin_time_isSet = !json[QString("checkinTime")].isNull() && m_checkin_time_isValid;

    m_checkin_time_exception_isValid = ::OpenAPI::fromJsonValue(m_checkin_time_exception, json[QString("checkinTimeException")]);
    m_checkin_time_exception_isSet = !json[QString("checkinTimeException")].isNull() && m_checkin_time_exception_isValid;

    m_checkout_time_isValid = ::OpenAPI::fromJsonValue(m_checkout_time, json[QString("checkoutTime")]);
    m_checkout_time_isSet = !json[QString("checkoutTime")].isNull() && m_checkout_time_isValid;

    m_checkout_time_exception_isValid = ::OpenAPI::fromJsonValue(m_checkout_time_exception, json[QString("checkoutTimeException")]);
    m_checkout_time_exception_isSet = !json[QString("checkoutTimeException")].isNull() && m_checkout_time_exception_isValid;

    m_kids_stay_free_isValid = ::OpenAPI::fromJsonValue(m_kids_stay_free, json[QString("kidsStayFree")]);
    m_kids_stay_free_isSet = !json[QString("kidsStayFree")].isNull() && m_kids_stay_free_isValid;

    m_kids_stay_free_exception_isValid = ::OpenAPI::fromJsonValue(m_kids_stay_free_exception, json[QString("kidsStayFreeException")]);
    m_kids_stay_free_exception_isSet = !json[QString("kidsStayFreeException")].isNull() && m_kids_stay_free_exception_isValid;

    m_max_child_age_isValid = ::OpenAPI::fromJsonValue(m_max_child_age, json[QString("maxChildAge")]);
    m_max_child_age_isSet = !json[QString("maxChildAge")].isNull() && m_max_child_age_isValid;

    m_max_child_age_exception_isValid = ::OpenAPI::fromJsonValue(m_max_child_age_exception, json[QString("maxChildAgeException")]);
    m_max_child_age_exception_isSet = !json[QString("maxChildAgeException")].isNull() && m_max_child_age_exception_isValid;

    m_max_kids_stay_free_count_isValid = ::OpenAPI::fromJsonValue(m_max_kids_stay_free_count, json[QString("maxKidsStayFreeCount")]);
    m_max_kids_stay_free_count_isSet = !json[QString("maxKidsStayFreeCount")].isNull() && m_max_kids_stay_free_count_isValid;

    m_max_kids_stay_free_count_exception_isValid = ::OpenAPI::fromJsonValue(m_max_kids_stay_free_count_exception, json[QString("maxKidsStayFreeCountException")]);
    m_max_kids_stay_free_count_exception_isSet = !json[QString("maxKidsStayFreeCountException")].isNull() && m_max_kids_stay_free_count_exception_isValid;

    m_payment_options_isValid = ::OpenAPI::fromJsonValue(m_payment_options, json[QString("paymentOptions")]);
    m_payment_options_isSet = !json[QString("paymentOptions")].isNull() && m_payment_options_isValid;

    m_smoke_free_property_isValid = ::OpenAPI::fromJsonValue(m_smoke_free_property, json[QString("smokeFreeProperty")]);
    m_smoke_free_property_isSet = !json[QString("smokeFreeProperty")].isNull() && m_smoke_free_property_isValid;

    m_smoke_free_property_exception_isValid = ::OpenAPI::fromJsonValue(m_smoke_free_property_exception, json[QString("smokeFreePropertyException")]);
    m_smoke_free_property_exception_isSet = !json[QString("smokeFreePropertyException")].isNull() && m_smoke_free_property_exception_isValid;
}

QString OAIPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_all_inclusive_available_isSet) {
        obj.insert(QString("allInclusiveAvailable"), ::OpenAPI::toJsonValue(m_all_inclusive_available));
    }
    if (m_all_inclusive_available_exception_isSet) {
        obj.insert(QString("allInclusiveAvailableException"), ::OpenAPI::toJsonValue(m_all_inclusive_available_exception));
    }
    if (m_all_inclusive_only_isSet) {
        obj.insert(QString("allInclusiveOnly"), ::OpenAPI::toJsonValue(m_all_inclusive_only));
    }
    if (m_all_inclusive_only_exception_isSet) {
        obj.insert(QString("allInclusiveOnlyException"), ::OpenAPI::toJsonValue(m_all_inclusive_only_exception));
    }
    if (m_checkin_time.isSet()) {
        obj.insert(QString("checkinTime"), ::OpenAPI::toJsonValue(m_checkin_time));
    }
    if (m_checkin_time_exception_isSet) {
        obj.insert(QString("checkinTimeException"), ::OpenAPI::toJsonValue(m_checkin_time_exception));
    }
    if (m_checkout_time.isSet()) {
        obj.insert(QString("checkoutTime"), ::OpenAPI::toJsonValue(m_checkout_time));
    }
    if (m_checkout_time_exception_isSet) {
        obj.insert(QString("checkoutTimeException"), ::OpenAPI::toJsonValue(m_checkout_time_exception));
    }
    if (m_kids_stay_free_isSet) {
        obj.insert(QString("kidsStayFree"), ::OpenAPI::toJsonValue(m_kids_stay_free));
    }
    if (m_kids_stay_free_exception_isSet) {
        obj.insert(QString("kidsStayFreeException"), ::OpenAPI::toJsonValue(m_kids_stay_free_exception));
    }
    if (m_max_child_age_isSet) {
        obj.insert(QString("maxChildAge"), ::OpenAPI::toJsonValue(m_max_child_age));
    }
    if (m_max_child_age_exception_isSet) {
        obj.insert(QString("maxChildAgeException"), ::OpenAPI::toJsonValue(m_max_child_age_exception));
    }
    if (m_max_kids_stay_free_count_isSet) {
        obj.insert(QString("maxKidsStayFreeCount"), ::OpenAPI::toJsonValue(m_max_kids_stay_free_count));
    }
    if (m_max_kids_stay_free_count_exception_isSet) {
        obj.insert(QString("maxKidsStayFreeCountException"), ::OpenAPI::toJsonValue(m_max_kids_stay_free_count_exception));
    }
    if (m_payment_options.isSet()) {
        obj.insert(QString("paymentOptions"), ::OpenAPI::toJsonValue(m_payment_options));
    }
    if (m_smoke_free_property_isSet) {
        obj.insert(QString("smokeFreeProperty"), ::OpenAPI::toJsonValue(m_smoke_free_property));
    }
    if (m_smoke_free_property_exception_isSet) {
        obj.insert(QString("smokeFreePropertyException"), ::OpenAPI::toJsonValue(m_smoke_free_property_exception));
    }
    return obj;
}

bool OAIPolicies::isAllInclusiveAvailable() const {
    return m_all_inclusive_available;
}
void OAIPolicies::setAllInclusiveAvailable(const bool &all_inclusive_available) {
    m_all_inclusive_available = all_inclusive_available;
    m_all_inclusive_available_isSet = true;
}

bool OAIPolicies::is_all_inclusive_available_Set() const{
    return m_all_inclusive_available_isSet;
}

bool OAIPolicies::is_all_inclusive_available_Valid() const{
    return m_all_inclusive_available_isValid;
}

QString OAIPolicies::getAllInclusiveAvailableException() const {
    return m_all_inclusive_available_exception;
}
void OAIPolicies::setAllInclusiveAvailableException(const QString &all_inclusive_available_exception) {
    m_all_inclusive_available_exception = all_inclusive_available_exception;
    m_all_inclusive_available_exception_isSet = true;
}

bool OAIPolicies::is_all_inclusive_available_exception_Set() const{
    return m_all_inclusive_available_exception_isSet;
}

bool OAIPolicies::is_all_inclusive_available_exception_Valid() const{
    return m_all_inclusive_available_exception_isValid;
}

bool OAIPolicies::isAllInclusiveOnly() const {
    return m_all_inclusive_only;
}
void OAIPolicies::setAllInclusiveOnly(const bool &all_inclusive_only) {
    m_all_inclusive_only = all_inclusive_only;
    m_all_inclusive_only_isSet = true;
}

bool OAIPolicies::is_all_inclusive_only_Set() const{
    return m_all_inclusive_only_isSet;
}

bool OAIPolicies::is_all_inclusive_only_Valid() const{
    return m_all_inclusive_only_isValid;
}

QString OAIPolicies::getAllInclusiveOnlyException() const {
    return m_all_inclusive_only_exception;
}
void OAIPolicies::setAllInclusiveOnlyException(const QString &all_inclusive_only_exception) {
    m_all_inclusive_only_exception = all_inclusive_only_exception;
    m_all_inclusive_only_exception_isSet = true;
}

bool OAIPolicies::is_all_inclusive_only_exception_Set() const{
    return m_all_inclusive_only_exception_isSet;
}

bool OAIPolicies::is_all_inclusive_only_exception_Valid() const{
    return m_all_inclusive_only_exception_isValid;
}

OAITimeOfDay OAIPolicies::getCheckinTime() const {
    return m_checkin_time;
}
void OAIPolicies::setCheckinTime(const OAITimeOfDay &checkin_time) {
    m_checkin_time = checkin_time;
    m_checkin_time_isSet = true;
}

bool OAIPolicies::is_checkin_time_Set() const{
    return m_checkin_time_isSet;
}

bool OAIPolicies::is_checkin_time_Valid() const{
    return m_checkin_time_isValid;
}

QString OAIPolicies::getCheckinTimeException() const {
    return m_checkin_time_exception;
}
void OAIPolicies::setCheckinTimeException(const QString &checkin_time_exception) {
    m_checkin_time_exception = checkin_time_exception;
    m_checkin_time_exception_isSet = true;
}

bool OAIPolicies::is_checkin_time_exception_Set() const{
    return m_checkin_time_exception_isSet;
}

bool OAIPolicies::is_checkin_time_exception_Valid() const{
    return m_checkin_time_exception_isValid;
}

OAITimeOfDay OAIPolicies::getCheckoutTime() const {
    return m_checkout_time;
}
void OAIPolicies::setCheckoutTime(const OAITimeOfDay &checkout_time) {
    m_checkout_time = checkout_time;
    m_checkout_time_isSet = true;
}

bool OAIPolicies::is_checkout_time_Set() const{
    return m_checkout_time_isSet;
}

bool OAIPolicies::is_checkout_time_Valid() const{
    return m_checkout_time_isValid;
}

QString OAIPolicies::getCheckoutTimeException() const {
    return m_checkout_time_exception;
}
void OAIPolicies::setCheckoutTimeException(const QString &checkout_time_exception) {
    m_checkout_time_exception = checkout_time_exception;
    m_checkout_time_exception_isSet = true;
}

bool OAIPolicies::is_checkout_time_exception_Set() const{
    return m_checkout_time_exception_isSet;
}

bool OAIPolicies::is_checkout_time_exception_Valid() const{
    return m_checkout_time_exception_isValid;
}

bool OAIPolicies::isKidsStayFree() const {
    return m_kids_stay_free;
}
void OAIPolicies::setKidsStayFree(const bool &kids_stay_free) {
    m_kids_stay_free = kids_stay_free;
    m_kids_stay_free_isSet = true;
}

bool OAIPolicies::is_kids_stay_free_Set() const{
    return m_kids_stay_free_isSet;
}

bool OAIPolicies::is_kids_stay_free_Valid() const{
    return m_kids_stay_free_isValid;
}

QString OAIPolicies::getKidsStayFreeException() const {
    return m_kids_stay_free_exception;
}
void OAIPolicies::setKidsStayFreeException(const QString &kids_stay_free_exception) {
    m_kids_stay_free_exception = kids_stay_free_exception;
    m_kids_stay_free_exception_isSet = true;
}

bool OAIPolicies::is_kids_stay_free_exception_Set() const{
    return m_kids_stay_free_exception_isSet;
}

bool OAIPolicies::is_kids_stay_free_exception_Valid() const{
    return m_kids_stay_free_exception_isValid;
}

qint32 OAIPolicies::getMaxChildAge() const {
    return m_max_child_age;
}
void OAIPolicies::setMaxChildAge(const qint32 &max_child_age) {
    m_max_child_age = max_child_age;
    m_max_child_age_isSet = true;
}

bool OAIPolicies::is_max_child_age_Set() const{
    return m_max_child_age_isSet;
}

bool OAIPolicies::is_max_child_age_Valid() const{
    return m_max_child_age_isValid;
}

QString OAIPolicies::getMaxChildAgeException() const {
    return m_max_child_age_exception;
}
void OAIPolicies::setMaxChildAgeException(const QString &max_child_age_exception) {
    m_max_child_age_exception = max_child_age_exception;
    m_max_child_age_exception_isSet = true;
}

bool OAIPolicies::is_max_child_age_exception_Set() const{
    return m_max_child_age_exception_isSet;
}

bool OAIPolicies::is_max_child_age_exception_Valid() const{
    return m_max_child_age_exception_isValid;
}

qint32 OAIPolicies::getMaxKidsStayFreeCount() const {
    return m_max_kids_stay_free_count;
}
void OAIPolicies::setMaxKidsStayFreeCount(const qint32 &max_kids_stay_free_count) {
    m_max_kids_stay_free_count = max_kids_stay_free_count;
    m_max_kids_stay_free_count_isSet = true;
}

bool OAIPolicies::is_max_kids_stay_free_count_Set() const{
    return m_max_kids_stay_free_count_isSet;
}

bool OAIPolicies::is_max_kids_stay_free_count_Valid() const{
    return m_max_kids_stay_free_count_isValid;
}

QString OAIPolicies::getMaxKidsStayFreeCountException() const {
    return m_max_kids_stay_free_count_exception;
}
void OAIPolicies::setMaxKidsStayFreeCountException(const QString &max_kids_stay_free_count_exception) {
    m_max_kids_stay_free_count_exception = max_kids_stay_free_count_exception;
    m_max_kids_stay_free_count_exception_isSet = true;
}

bool OAIPolicies::is_max_kids_stay_free_count_exception_Set() const{
    return m_max_kids_stay_free_count_exception_isSet;
}

bool OAIPolicies::is_max_kids_stay_free_count_exception_Valid() const{
    return m_max_kids_stay_free_count_exception_isValid;
}

OAIPaymentOptions OAIPolicies::getPaymentOptions() const {
    return m_payment_options;
}
void OAIPolicies::setPaymentOptions(const OAIPaymentOptions &payment_options) {
    m_payment_options = payment_options;
    m_payment_options_isSet = true;
}

bool OAIPolicies::is_payment_options_Set() const{
    return m_payment_options_isSet;
}

bool OAIPolicies::is_payment_options_Valid() const{
    return m_payment_options_isValid;
}

bool OAIPolicies::isSmokeFreeProperty() const {
    return m_smoke_free_property;
}
void OAIPolicies::setSmokeFreeProperty(const bool &smoke_free_property) {
    m_smoke_free_property = smoke_free_property;
    m_smoke_free_property_isSet = true;
}

bool OAIPolicies::is_smoke_free_property_Set() const{
    return m_smoke_free_property_isSet;
}

bool OAIPolicies::is_smoke_free_property_Valid() const{
    return m_smoke_free_property_isValid;
}

QString OAIPolicies::getSmokeFreePropertyException() const {
    return m_smoke_free_property_exception;
}
void OAIPolicies::setSmokeFreePropertyException(const QString &smoke_free_property_exception) {
    m_smoke_free_property_exception = smoke_free_property_exception;
    m_smoke_free_property_exception_isSet = true;
}

bool OAIPolicies::is_smoke_free_property_exception_Set() const{
    return m_smoke_free_property_exception_isSet;
}

bool OAIPolicies::is_smoke_free_property_exception_Valid() const{
    return m_smoke_free_property_exception_isValid;
}

bool OAIPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_inclusive_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_inclusive_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_inclusive_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_inclusive_only_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkin_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkin_time_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_time_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kids_stay_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kids_stay_free_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_child_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_child_age_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_kids_stay_free_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_kids_stay_free_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smoke_free_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smoke_free_property_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
