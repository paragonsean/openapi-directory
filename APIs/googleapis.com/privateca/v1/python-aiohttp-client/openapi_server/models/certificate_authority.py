# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_urls import AccessUrls
from openapi_server.models.certificate_config import CertificateConfig
from openapi_server.models.certificate_description import CertificateDescription
from openapi_server.models.key_version_spec import KeyVersionSpec
from openapi_server.models.subordinate_config import SubordinateConfig
from openapi_server import util


class CertificateAuthority(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_urls: AccessUrls=None, ca_certificate_descriptions: List[CertificateDescription]=None, config: CertificateConfig=None, create_time: str=None, delete_time: str=None, expire_time: str=None, gcs_bucket: str=None, key_spec: KeyVersionSpec=None, labels: Dict[str, str]=None, lifetime: str=None, name: str=None, pem_ca_certificates: List[str]=None, state: str=None, subordinate_config: SubordinateConfig=None, tier: str=None, type: str=None, update_time: str=None):
        """CertificateAuthority - a model defined in OpenAPI

        :param access_urls: The access_urls of this CertificateAuthority.
        :param ca_certificate_descriptions: The ca_certificate_descriptions of this CertificateAuthority.
        :param config: The config of this CertificateAuthority.
        :param create_time: The create_time of this CertificateAuthority.
        :param delete_time: The delete_time of this CertificateAuthority.
        :param expire_time: The expire_time of this CertificateAuthority.
        :param gcs_bucket: The gcs_bucket of this CertificateAuthority.
        :param key_spec: The key_spec of this CertificateAuthority.
        :param labels: The labels of this CertificateAuthority.
        :param lifetime: The lifetime of this CertificateAuthority.
        :param name: The name of this CertificateAuthority.
        :param pem_ca_certificates: The pem_ca_certificates of this CertificateAuthority.
        :param state: The state of this CertificateAuthority.
        :param subordinate_config: The subordinate_config of this CertificateAuthority.
        :param tier: The tier of this CertificateAuthority.
        :param type: The type of this CertificateAuthority.
        :param update_time: The update_time of this CertificateAuthority.
        """
        self.openapi_types = {
            'access_urls': AccessUrls,
            'ca_certificate_descriptions': List[CertificateDescription],
            'config': CertificateConfig,
            'create_time': str,
            'delete_time': str,
            'expire_time': str,
            'gcs_bucket': str,
            'key_spec': KeyVersionSpec,
            'labels': Dict[str, str],
            'lifetime': str,
            'name': str,
            'pem_ca_certificates': List[str],
            'state': str,
            'subordinate_config': SubordinateConfig,
            'tier': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'access_urls': 'accessUrls',
            'ca_certificate_descriptions': 'caCertificateDescriptions',
            'config': 'config',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'expire_time': 'expireTime',
            'gcs_bucket': 'gcsBucket',
            'key_spec': 'keySpec',
            'labels': 'labels',
            'lifetime': 'lifetime',
            'name': 'name',
            'pem_ca_certificates': 'pemCaCertificates',
            'state': 'state',
            'subordinate_config': 'subordinateConfig',
            'tier': 'tier',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._access_urls = access_urls
        self._ca_certificate_descriptions = ca_certificate_descriptions
        self._config = config
        self._create_time = create_time
        self._delete_time = delete_time
        self._expire_time = expire_time
        self._gcs_bucket = gcs_bucket
        self._key_spec = key_spec
        self._labels = labels
        self._lifetime = lifetime
        self._name = name
        self._pem_ca_certificates = pem_ca_certificates
        self._state = state
        self._subordinate_config = subordinate_config
        self._tier = tier
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateAuthority':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateAuthority of this CertificateAuthority.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_urls(self):
        """Gets the access_urls of this CertificateAuthority.


        :return: The access_urls of this CertificateAuthority.
        :rtype: AccessUrls
        """
        return self._access_urls

    @access_urls.setter
    def access_urls(self, access_urls):
        """Sets the access_urls of this CertificateAuthority.


        :param access_urls: The access_urls of this CertificateAuthority.
        :type access_urls: AccessUrls
        """

        self._access_urls = access_urls

    @property
    def ca_certificate_descriptions(self):
        """Gets the ca_certificate_descriptions of this CertificateAuthority.

        Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.

        :return: The ca_certificate_descriptions of this CertificateAuthority.
        :rtype: List[CertificateDescription]
        """
        return self._ca_certificate_descriptions

    @ca_certificate_descriptions.setter
    def ca_certificate_descriptions(self, ca_certificate_descriptions):
        """Sets the ca_certificate_descriptions of this CertificateAuthority.

        Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.

        :param ca_certificate_descriptions: The ca_certificate_descriptions of this CertificateAuthority.
        :type ca_certificate_descriptions: List[CertificateDescription]
        """

        self._ca_certificate_descriptions = ca_certificate_descriptions

    @property
    def config(self):
        """Gets the config of this CertificateAuthority.


        :return: The config of this CertificateAuthority.
        :rtype: CertificateConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this CertificateAuthority.


        :param config: The config of this CertificateAuthority.
        :type config: CertificateConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was created.

        :return: The create_time of this CertificateAuthority.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was created.

        :param create_time: The create_time of this CertificateAuthority.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.

        :return: The delete_time of this CertificateAuthority.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.

        :param delete_time: The delete_time of this CertificateAuthority.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def expire_time(self):
        """Gets the expire_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.

        :return: The expire_time of this CertificateAuthority.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.

        :param expire_time: The expire_time of this CertificateAuthority.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def gcs_bucket(self):
        """Gets the gcs_bucket of this CertificateAuthority.

        Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.

        :return: The gcs_bucket of this CertificateAuthority.
        :rtype: str
        """
        return self._gcs_bucket

    @gcs_bucket.setter
    def gcs_bucket(self, gcs_bucket):
        """Sets the gcs_bucket of this CertificateAuthority.

        Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.

        :param gcs_bucket: The gcs_bucket of this CertificateAuthority.
        :type gcs_bucket: str
        """

        self._gcs_bucket = gcs_bucket

    @property
    def key_spec(self):
        """Gets the key_spec of this CertificateAuthority.


        :return: The key_spec of this CertificateAuthority.
        :rtype: KeyVersionSpec
        """
        return self._key_spec

    @key_spec.setter
    def key_spec(self, key_spec):
        """Sets the key_spec of this CertificateAuthority.


        :param key_spec: The key_spec of this CertificateAuthority.
        :type key_spec: KeyVersionSpec
        """

        self._key_spec = key_spec

    @property
    def labels(self):
        """Gets the labels of this CertificateAuthority.

        Optional. Labels with user-defined metadata.

        :return: The labels of this CertificateAuthority.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CertificateAuthority.

        Optional. Labels with user-defined metadata.

        :param labels: The labels of this CertificateAuthority.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lifetime(self):
        """Gets the lifetime of this CertificateAuthority.

        Required. Immutable. The desired lifetime of the CA certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate.

        :return: The lifetime of this CertificateAuthority.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this CertificateAuthority.

        Required. Immutable. The desired lifetime of the CA certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate.

        :param lifetime: The lifetime of this CertificateAuthority.
        :type lifetime: str
        """

        self._lifetime = lifetime

    @property
    def name(self):
        """Gets the name of this CertificateAuthority.

        Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.

        :return: The name of this CertificateAuthority.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateAuthority.

        Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.

        :param name: The name of this CertificateAuthority.
        :type name: str
        """

        self._name = name

    @property
    def pem_ca_certificates(self):
        """Gets the pem_ca_certificates of this CertificateAuthority.

        Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.

        :return: The pem_ca_certificates of this CertificateAuthority.
        :rtype: List[str]
        """
        return self._pem_ca_certificates

    @pem_ca_certificates.setter
    def pem_ca_certificates(self, pem_ca_certificates):
        """Sets the pem_ca_certificates of this CertificateAuthority.

        Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.

        :param pem_ca_certificates: The pem_ca_certificates of this CertificateAuthority.
        :type pem_ca_certificates: List[str]
        """

        self._pem_ca_certificates = pem_ca_certificates

    @property
    def state(self):
        """Gets the state of this CertificateAuthority.

        Output only. The State for this CertificateAuthority.

        :return: The state of this CertificateAuthority.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CertificateAuthority.

        Output only. The State for this CertificateAuthority.

        :param state: The state of this CertificateAuthority.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "DISABLED", "STAGED", "AWAITING_USER_ACTIVATION", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subordinate_config(self):
        """Gets the subordinate_config of this CertificateAuthority.


        :return: The subordinate_config of this CertificateAuthority.
        :rtype: SubordinateConfig
        """
        return self._subordinate_config

    @subordinate_config.setter
    def subordinate_config(self, subordinate_config):
        """Sets the subordinate_config of this CertificateAuthority.


        :param subordinate_config: The subordinate_config of this CertificateAuthority.
        :type subordinate_config: SubordinateConfig
        """

        self._subordinate_config = subordinate_config

    @property
    def tier(self):
        """Gets the tier of this CertificateAuthority.

        Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.

        :return: The tier of this CertificateAuthority.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CertificateAuthority.

        Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.

        :param tier: The tier of this CertificateAuthority.
        :type tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "ENTERPRISE", "DEVOPS"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier

    @property
    def type(self):
        """Gets the type of this CertificateAuthority.

        Required. Immutable. The Type of this CertificateAuthority.

        :return: The type of this CertificateAuthority.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CertificateAuthority.

        Required. Immutable. The Type of this CertificateAuthority.

        :param type: The type of this CertificateAuthority.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "SELF_SIGNED", "SUBORDINATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was last updated.

        :return: The update_time of this CertificateAuthority.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CertificateAuthority.

        Output only. The time at which this CertificateAuthority was last updated.

        :param update_time: The update_time of this CertificateAuthority.
        :type update_time: str
        """

        self._update_time = update_time
