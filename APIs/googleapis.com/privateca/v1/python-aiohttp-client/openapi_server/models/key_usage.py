# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_key_usage_options import ExtendedKeyUsageOptions
from openapi_server.models.key_usage_options import KeyUsageOptions
from openapi_server.models.object_id import ObjectId
from openapi_server import util


class KeyUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_key_usage: KeyUsageOptions=None, extended_key_usage: ExtendedKeyUsageOptions=None, unknown_extended_key_usages: List[ObjectId]=None):
        """KeyUsage - a model defined in OpenAPI

        :param base_key_usage: The base_key_usage of this KeyUsage.
        :param extended_key_usage: The extended_key_usage of this KeyUsage.
        :param unknown_extended_key_usages: The unknown_extended_key_usages of this KeyUsage.
        """
        self.openapi_types = {
            'base_key_usage': KeyUsageOptions,
            'extended_key_usage': ExtendedKeyUsageOptions,
            'unknown_extended_key_usages': List[ObjectId]
        }

        self.attribute_map = {
            'base_key_usage': 'baseKeyUsage',
            'extended_key_usage': 'extendedKeyUsage',
            'unknown_extended_key_usages': 'unknownExtendedKeyUsages'
        }

        self._base_key_usage = base_key_usage
        self._extended_key_usage = extended_key_usage
        self._unknown_extended_key_usages = unknown_extended_key_usages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyUsage of this KeyUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_key_usage(self):
        """Gets the base_key_usage of this KeyUsage.


        :return: The base_key_usage of this KeyUsage.
        :rtype: KeyUsageOptions
        """
        return self._base_key_usage

    @base_key_usage.setter
    def base_key_usage(self, base_key_usage):
        """Sets the base_key_usage of this KeyUsage.


        :param base_key_usage: The base_key_usage of this KeyUsage.
        :type base_key_usage: KeyUsageOptions
        """

        self._base_key_usage = base_key_usage

    @property
    def extended_key_usage(self):
        """Gets the extended_key_usage of this KeyUsage.


        :return: The extended_key_usage of this KeyUsage.
        :rtype: ExtendedKeyUsageOptions
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage):
        """Sets the extended_key_usage of this KeyUsage.


        :param extended_key_usage: The extended_key_usage of this KeyUsage.
        :type extended_key_usage: ExtendedKeyUsageOptions
        """

        self._extended_key_usage = extended_key_usage

    @property
    def unknown_extended_key_usages(self):
        """Gets the unknown_extended_key_usages of this KeyUsage.

        Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.

        :return: The unknown_extended_key_usages of this KeyUsage.
        :rtype: List[ObjectId]
        """
        return self._unknown_extended_key_usages

    @unknown_extended_key_usages.setter
    def unknown_extended_key_usages(self, unknown_extended_key_usages):
        """Sets the unknown_extended_key_usages of this KeyUsage.

        Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.

        :param unknown_extended_key_usages: The unknown_extended_key_usages of this KeyUsage.
        :type unknown_extended_key_usages: List[ObjectId]
        """

        self._unknown_extended_key_usages = unknown_extended_key_usages
