# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.x509_extension import X509Extension
from openapi_server import util


class SubjectAltNames(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_sans: List[X509Extension]=None, dns_names: List[str]=None, email_addresses: List[str]=None, ip_addresses: List[str]=None, uris: List[str]=None):
        """SubjectAltNames - a model defined in OpenAPI

        :param custom_sans: The custom_sans of this SubjectAltNames.
        :param dns_names: The dns_names of this SubjectAltNames.
        :param email_addresses: The email_addresses of this SubjectAltNames.
        :param ip_addresses: The ip_addresses of this SubjectAltNames.
        :param uris: The uris of this SubjectAltNames.
        """
        self.openapi_types = {
            'custom_sans': List[X509Extension],
            'dns_names': List[str],
            'email_addresses': List[str],
            'ip_addresses': List[str],
            'uris': List[str]
        }

        self.attribute_map = {
            'custom_sans': 'customSans',
            'dns_names': 'dnsNames',
            'email_addresses': 'emailAddresses',
            'ip_addresses': 'ipAddresses',
            'uris': 'uris'
        }

        self._custom_sans = custom_sans
        self._dns_names = dns_names
        self._email_addresses = email_addresses
        self._ip_addresses = ip_addresses
        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubjectAltNames':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubjectAltNames of this SubjectAltNames.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_sans(self):
        """Gets the custom_sans of this SubjectAltNames.

        Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.

        :return: The custom_sans of this SubjectAltNames.
        :rtype: List[X509Extension]
        """
        return self._custom_sans

    @custom_sans.setter
    def custom_sans(self, custom_sans):
        """Sets the custom_sans of this SubjectAltNames.

        Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.

        :param custom_sans: The custom_sans of this SubjectAltNames.
        :type custom_sans: List[X509Extension]
        """

        self._custom_sans = custom_sans

    @property
    def dns_names(self):
        """Gets the dns_names of this SubjectAltNames.

        Contains only valid, fully-qualified host names.

        :return: The dns_names of this SubjectAltNames.
        :rtype: List[str]
        """
        return self._dns_names

    @dns_names.setter
    def dns_names(self, dns_names):
        """Sets the dns_names of this SubjectAltNames.

        Contains only valid, fully-qualified host names.

        :param dns_names: The dns_names of this SubjectAltNames.
        :type dns_names: List[str]
        """

        self._dns_names = dns_names

    @property
    def email_addresses(self):
        """Gets the email_addresses of this SubjectAltNames.

        Contains only valid RFC 2822 E-mail addresses.

        :return: The email_addresses of this SubjectAltNames.
        :rtype: List[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this SubjectAltNames.

        Contains only valid RFC 2822 E-mail addresses.

        :param email_addresses: The email_addresses of this SubjectAltNames.
        :type email_addresses: List[str]
        """

        self._email_addresses = email_addresses

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this SubjectAltNames.

        Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.

        :return: The ip_addresses of this SubjectAltNames.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this SubjectAltNames.

        Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.

        :param ip_addresses: The ip_addresses of this SubjectAltNames.
        :type ip_addresses: List[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def uris(self):
        """Gets the uris of this SubjectAltNames.

        Contains only valid RFC 3986 URIs.

        :return: The uris of this SubjectAltNames.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this SubjectAltNames.

        Contains only valid RFC 3986 URIs.

        :param uris: The uris of this SubjectAltNames.
        :type uris: List[str]
        """

        self._uris = uris
