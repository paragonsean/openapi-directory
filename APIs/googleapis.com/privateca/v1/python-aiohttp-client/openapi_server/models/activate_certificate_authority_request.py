# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subordinate_config import SubordinateConfig
from openapi_server import util


class ActivateCertificateAuthorityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pem_ca_certificate: str=None, request_id: str=None, subordinate_config: SubordinateConfig=None):
        """ActivateCertificateAuthorityRequest - a model defined in OpenAPI

        :param pem_ca_certificate: The pem_ca_certificate of this ActivateCertificateAuthorityRequest.
        :param request_id: The request_id of this ActivateCertificateAuthorityRequest.
        :param subordinate_config: The subordinate_config of this ActivateCertificateAuthorityRequest.
        """
        self.openapi_types = {
            'pem_ca_certificate': str,
            'request_id': str,
            'subordinate_config': SubordinateConfig
        }

        self.attribute_map = {
            'pem_ca_certificate': 'pemCaCertificate',
            'request_id': 'requestId',
            'subordinate_config': 'subordinateConfig'
        }

        self._pem_ca_certificate = pem_ca_certificate
        self._request_id = request_id
        self._subordinate_config = subordinate_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivateCertificateAuthorityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivateCertificateAuthorityRequest of this ActivateCertificateAuthorityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pem_ca_certificate(self):
        """Gets the pem_ca_certificate of this ActivateCertificateAuthorityRequest.

        Required. The signed CA certificate issued from FetchCertificateAuthorityCsrResponse.pem_csr.

        :return: The pem_ca_certificate of this ActivateCertificateAuthorityRequest.
        :rtype: str
        """
        return self._pem_ca_certificate

    @pem_ca_certificate.setter
    def pem_ca_certificate(self, pem_ca_certificate):
        """Sets the pem_ca_certificate of this ActivateCertificateAuthorityRequest.

        Required. The signed CA certificate issued from FetchCertificateAuthorityCsrResponse.pem_csr.

        :param pem_ca_certificate: The pem_ca_certificate of this ActivateCertificateAuthorityRequest.
        :type pem_ca_certificate: str
        """

        self._pem_ca_certificate = pem_ca_certificate

    @property
    def request_id(self):
        """Gets the request_id of this ActivateCertificateAuthorityRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this ActivateCertificateAuthorityRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ActivateCertificateAuthorityRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this ActivateCertificateAuthorityRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def subordinate_config(self):
        """Gets the subordinate_config of this ActivateCertificateAuthorityRequest.


        :return: The subordinate_config of this ActivateCertificateAuthorityRequest.
        :rtype: SubordinateConfig
        """
        return self._subordinate_config

    @subordinate_config.setter
    def subordinate_config(self, subordinate_config):
        """Sets the subordinate_config of this ActivateCertificateAuthorityRequest.


        :param subordinate_config: The subordinate_config of this ActivateCertificateAuthorityRequest.
        :type subordinate_config: SubordinateConfig
        """

        self._subordinate_config = subordinate_config
