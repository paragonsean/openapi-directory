# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expr import Expr
from openapi_server import util


class CertificateIdentityConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_subject_alt_names_passthrough: bool=None, allow_subject_passthrough: bool=None, cel_expression: Expr=None):
        """CertificateIdentityConstraints - a model defined in OpenAPI

        :param allow_subject_alt_names_passthrough: The allow_subject_alt_names_passthrough of this CertificateIdentityConstraints.
        :param allow_subject_passthrough: The allow_subject_passthrough of this CertificateIdentityConstraints.
        :param cel_expression: The cel_expression of this CertificateIdentityConstraints.
        """
        self.openapi_types = {
            'allow_subject_alt_names_passthrough': bool,
            'allow_subject_passthrough': bool,
            'cel_expression': Expr
        }

        self.attribute_map = {
            'allow_subject_alt_names_passthrough': 'allowSubjectAltNamesPassthrough',
            'allow_subject_passthrough': 'allowSubjectPassthrough',
            'cel_expression': 'celExpression'
        }

        self._allow_subject_alt_names_passthrough = allow_subject_alt_names_passthrough
        self._allow_subject_passthrough = allow_subject_passthrough
        self._cel_expression = cel_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateIdentityConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateIdentityConstraints of this CertificateIdentityConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_subject_alt_names_passthrough(self):
        """Gets the allow_subject_alt_names_passthrough of this CertificateIdentityConstraints.

        Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.

        :return: The allow_subject_alt_names_passthrough of this CertificateIdentityConstraints.
        :rtype: bool
        """
        return self._allow_subject_alt_names_passthrough

    @allow_subject_alt_names_passthrough.setter
    def allow_subject_alt_names_passthrough(self, allow_subject_alt_names_passthrough):
        """Sets the allow_subject_alt_names_passthrough of this CertificateIdentityConstraints.

        Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.

        :param allow_subject_alt_names_passthrough: The allow_subject_alt_names_passthrough of this CertificateIdentityConstraints.
        :type allow_subject_alt_names_passthrough: bool
        """

        self._allow_subject_alt_names_passthrough = allow_subject_alt_names_passthrough

    @property
    def allow_subject_passthrough(self):
        """Gets the allow_subject_passthrough of this CertificateIdentityConstraints.

        Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.

        :return: The allow_subject_passthrough of this CertificateIdentityConstraints.
        :rtype: bool
        """
        return self._allow_subject_passthrough

    @allow_subject_passthrough.setter
    def allow_subject_passthrough(self, allow_subject_passthrough):
        """Sets the allow_subject_passthrough of this CertificateIdentityConstraints.

        Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.

        :param allow_subject_passthrough: The allow_subject_passthrough of this CertificateIdentityConstraints.
        :type allow_subject_passthrough: bool
        """

        self._allow_subject_passthrough = allow_subject_passthrough

    @property
    def cel_expression(self):
        """Gets the cel_expression of this CertificateIdentityConstraints.


        :return: The cel_expression of this CertificateIdentityConstraints.
        :rtype: Expr
        """
        return self._cel_expression

    @cel_expression.setter
    def cel_expression(self, cel_expression):
        """Sets the cel_expression of this CertificateIdentityConstraints.


        :param cel_expression: The cel_expression of this CertificateIdentityConstraints.
        :type cel_expression: Expr
        """

        self._cel_expression = cel_expression
