# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_id import ObjectId
from openapi_server import util


class X509Extension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, critical: bool=None, object_id: ObjectId=None, value: str=None):
        """X509Extension - a model defined in OpenAPI

        :param critical: The critical of this X509Extension.
        :param object_id: The object_id of this X509Extension.
        :param value: The value of this X509Extension.
        """
        self.openapi_types = {
            'critical': bool,
            'object_id': ObjectId,
            'value': str
        }

        self.attribute_map = {
            'critical': 'critical',
            'object_id': 'objectId',
            'value': 'value'
        }

        self._critical = critical
        self._object_id = object_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X509Extension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X509Extension of this X509Extension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def critical(self):
        """Gets the critical of this X509Extension.

        Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).

        :return: The critical of this X509Extension.
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this X509Extension.

        Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).

        :param critical: The critical of this X509Extension.
        :type critical: bool
        """

        self._critical = critical

    @property
    def object_id(self):
        """Gets the object_id of this X509Extension.


        :return: The object_id of this X509Extension.
        :rtype: ObjectId
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this X509Extension.


        :param object_id: The object_id of this X509Extension.
        :type object_id: ObjectId
        """

        self._object_id = object_id

    @property
    def value(self):
        """Gets the value of this X509Extension.

        Required. The value of this X.509 extension.

        :return: The value of this X509Extension.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this X509Extension.

        Required. The value of this X.509 extension.

        :param value: The value of this X509Extension.
        :type value: str
        """

        self._value = value
