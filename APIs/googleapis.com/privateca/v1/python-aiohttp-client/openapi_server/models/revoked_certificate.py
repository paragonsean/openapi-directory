# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RevokedCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, hex_serial_number: str=None, revocation_reason: str=None):
        """RevokedCertificate - a model defined in OpenAPI

        :param certificate: The certificate of this RevokedCertificate.
        :param hex_serial_number: The hex_serial_number of this RevokedCertificate.
        :param revocation_reason: The revocation_reason of this RevokedCertificate.
        """
        self.openapi_types = {
            'certificate': str,
            'hex_serial_number': str,
            'revocation_reason': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'hex_serial_number': 'hexSerialNumber',
            'revocation_reason': 'revocationReason'
        }

        self._certificate = certificate
        self._hex_serial_number = hex_serial_number
        self._revocation_reason = revocation_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokedCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokedCertificate of this RevokedCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this RevokedCertificate.

        The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.

        :return: The certificate of this RevokedCertificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this RevokedCertificate.

        The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.

        :param certificate: The certificate of this RevokedCertificate.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def hex_serial_number(self):
        """Gets the hex_serial_number of this RevokedCertificate.

        The serial number of the Certificate.

        :return: The hex_serial_number of this RevokedCertificate.
        :rtype: str
        """
        return self._hex_serial_number

    @hex_serial_number.setter
    def hex_serial_number(self, hex_serial_number):
        """Sets the hex_serial_number of this RevokedCertificate.

        The serial number of the Certificate.

        :param hex_serial_number: The hex_serial_number of this RevokedCertificate.
        :type hex_serial_number: str
        """

        self._hex_serial_number = hex_serial_number

    @property
    def revocation_reason(self):
        """Gets the revocation_reason of this RevokedCertificate.

        The reason the Certificate was revoked.

        :return: The revocation_reason of this RevokedCertificate.
        :rtype: str
        """
        return self._revocation_reason

    @revocation_reason.setter
    def revocation_reason(self, revocation_reason):
        """Sets the revocation_reason of this RevokedCertificate.

        The reason the Certificate was revoked.

        :param revocation_reason: The revocation_reason of this RevokedCertificate.
        :type revocation_reason: str
        """
        allowed_values = ["REVOCATION_REASON_UNSPECIFIED", "KEY_COMPROMISE", "CERTIFICATE_AUTHORITY_COMPROMISE", "AFFILIATION_CHANGED", "SUPERSEDED", "CESSATION_OF_OPERATION", "CERTIFICATE_HOLD", "PRIVILEGE_WITHDRAWN", "ATTRIBUTE_AUTHORITY_COMPROMISE"]  # noqa: E501
        if revocation_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `revocation_reason` ({0}), must be one of {1}"
                .format(revocation_reason, allowed_values)
            )

        self._revocation_reason = revocation_reason
