# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyUsageOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_sign: bool=None, content_commitment: bool=None, crl_sign: bool=None, data_encipherment: bool=None, decipher_only: bool=None, digital_signature: bool=None, encipher_only: bool=None, key_agreement: bool=None, key_encipherment: bool=None):
        """KeyUsageOptions - a model defined in OpenAPI

        :param cert_sign: The cert_sign of this KeyUsageOptions.
        :param content_commitment: The content_commitment of this KeyUsageOptions.
        :param crl_sign: The crl_sign of this KeyUsageOptions.
        :param data_encipherment: The data_encipherment of this KeyUsageOptions.
        :param decipher_only: The decipher_only of this KeyUsageOptions.
        :param digital_signature: The digital_signature of this KeyUsageOptions.
        :param encipher_only: The encipher_only of this KeyUsageOptions.
        :param key_agreement: The key_agreement of this KeyUsageOptions.
        :param key_encipherment: The key_encipherment of this KeyUsageOptions.
        """
        self.openapi_types = {
            'cert_sign': bool,
            'content_commitment': bool,
            'crl_sign': bool,
            'data_encipherment': bool,
            'decipher_only': bool,
            'digital_signature': bool,
            'encipher_only': bool,
            'key_agreement': bool,
            'key_encipherment': bool
        }

        self.attribute_map = {
            'cert_sign': 'certSign',
            'content_commitment': 'contentCommitment',
            'crl_sign': 'crlSign',
            'data_encipherment': 'dataEncipherment',
            'decipher_only': 'decipherOnly',
            'digital_signature': 'digitalSignature',
            'encipher_only': 'encipherOnly',
            'key_agreement': 'keyAgreement',
            'key_encipherment': 'keyEncipherment'
        }

        self._cert_sign = cert_sign
        self._content_commitment = content_commitment
        self._crl_sign = crl_sign
        self._data_encipherment = data_encipherment
        self._decipher_only = decipher_only
        self._digital_signature = digital_signature
        self._encipher_only = encipher_only
        self._key_agreement = key_agreement
        self._key_encipherment = key_encipherment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyUsageOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyUsageOptions of this KeyUsageOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_sign(self):
        """Gets the cert_sign of this KeyUsageOptions.

        The key may be used to sign certificates.

        :return: The cert_sign of this KeyUsageOptions.
        :rtype: bool
        """
        return self._cert_sign

    @cert_sign.setter
    def cert_sign(self, cert_sign):
        """Sets the cert_sign of this KeyUsageOptions.

        The key may be used to sign certificates.

        :param cert_sign: The cert_sign of this KeyUsageOptions.
        :type cert_sign: bool
        """

        self._cert_sign = cert_sign

    @property
    def content_commitment(self):
        """Gets the content_commitment of this KeyUsageOptions.

        The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".

        :return: The content_commitment of this KeyUsageOptions.
        :rtype: bool
        """
        return self._content_commitment

    @content_commitment.setter
    def content_commitment(self, content_commitment):
        """Sets the content_commitment of this KeyUsageOptions.

        The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".

        :param content_commitment: The content_commitment of this KeyUsageOptions.
        :type content_commitment: bool
        """

        self._content_commitment = content_commitment

    @property
    def crl_sign(self):
        """Gets the crl_sign of this KeyUsageOptions.

        The key may be used sign certificate revocation lists.

        :return: The crl_sign of this KeyUsageOptions.
        :rtype: bool
        """
        return self._crl_sign

    @crl_sign.setter
    def crl_sign(self, crl_sign):
        """Sets the crl_sign of this KeyUsageOptions.

        The key may be used sign certificate revocation lists.

        :param crl_sign: The crl_sign of this KeyUsageOptions.
        :type crl_sign: bool
        """

        self._crl_sign = crl_sign

    @property
    def data_encipherment(self):
        """Gets the data_encipherment of this KeyUsageOptions.

        The key may be used to encipher data.

        :return: The data_encipherment of this KeyUsageOptions.
        :rtype: bool
        """
        return self._data_encipherment

    @data_encipherment.setter
    def data_encipherment(self, data_encipherment):
        """Sets the data_encipherment of this KeyUsageOptions.

        The key may be used to encipher data.

        :param data_encipherment: The data_encipherment of this KeyUsageOptions.
        :type data_encipherment: bool
        """

        self._data_encipherment = data_encipherment

    @property
    def decipher_only(self):
        """Gets the decipher_only of this KeyUsageOptions.

        The key may be used to decipher only.

        :return: The decipher_only of this KeyUsageOptions.
        :rtype: bool
        """
        return self._decipher_only

    @decipher_only.setter
    def decipher_only(self, decipher_only):
        """Sets the decipher_only of this KeyUsageOptions.

        The key may be used to decipher only.

        :param decipher_only: The decipher_only of this KeyUsageOptions.
        :type decipher_only: bool
        """

        self._decipher_only = decipher_only

    @property
    def digital_signature(self):
        """Gets the digital_signature of this KeyUsageOptions.

        The key may be used for digital signatures.

        :return: The digital_signature of this KeyUsageOptions.
        :rtype: bool
        """
        return self._digital_signature

    @digital_signature.setter
    def digital_signature(self, digital_signature):
        """Sets the digital_signature of this KeyUsageOptions.

        The key may be used for digital signatures.

        :param digital_signature: The digital_signature of this KeyUsageOptions.
        :type digital_signature: bool
        """

        self._digital_signature = digital_signature

    @property
    def encipher_only(self):
        """Gets the encipher_only of this KeyUsageOptions.

        The key may be used to encipher only.

        :return: The encipher_only of this KeyUsageOptions.
        :rtype: bool
        """
        return self._encipher_only

    @encipher_only.setter
    def encipher_only(self, encipher_only):
        """Sets the encipher_only of this KeyUsageOptions.

        The key may be used to encipher only.

        :param encipher_only: The encipher_only of this KeyUsageOptions.
        :type encipher_only: bool
        """

        self._encipher_only = encipher_only

    @property
    def key_agreement(self):
        """Gets the key_agreement of this KeyUsageOptions.

        The key may be used in a key agreement protocol.

        :return: The key_agreement of this KeyUsageOptions.
        :rtype: bool
        """
        return self._key_agreement

    @key_agreement.setter
    def key_agreement(self, key_agreement):
        """Sets the key_agreement of this KeyUsageOptions.

        The key may be used in a key agreement protocol.

        :param key_agreement: The key_agreement of this KeyUsageOptions.
        :type key_agreement: bool
        """

        self._key_agreement = key_agreement

    @property
    def key_encipherment(self):
        """Gets the key_encipherment of this KeyUsageOptions.

        The key may be used to encipher other keys.

        :return: The key_encipherment of this KeyUsageOptions.
        :rtype: bool
        """
        return self._key_encipherment

    @key_encipherment.setter
    def key_encipherment(self, key_encipherment):
        """Sets the key_encipherment of this KeyUsageOptions.

        The key may be used to encipher other keys.

        :param key_encipherment: The key_encipherment of this KeyUsageOptions.
        :type key_encipherment: bool
        """

        self._key_encipherment = key_encipherment
