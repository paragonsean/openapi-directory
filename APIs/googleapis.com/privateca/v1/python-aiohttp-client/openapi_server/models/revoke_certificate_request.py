# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RevokeCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: str=None, request_id: str=None):
        """RevokeCertificateRequest - a model defined in OpenAPI

        :param reason: The reason of this RevokeCertificateRequest.
        :param request_id: The request_id of this RevokeCertificateRequest.
        """
        self.openapi_types = {
            'reason': str,
            'request_id': str
        }

        self.attribute_map = {
            'reason': 'reason',
            'request_id': 'requestId'
        }

        self._reason = reason
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeCertificateRequest of this RevokeCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this RevokeCertificateRequest.

        Required. The RevocationReason for revoking this certificate.

        :return: The reason of this RevokeCertificateRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RevokeCertificateRequest.

        Required. The RevocationReason for revoking this certificate.

        :param reason: The reason of this RevokeCertificateRequest.
        :type reason: str
        """
        allowed_values = ["REVOCATION_REASON_UNSPECIFIED", "KEY_COMPROMISE", "CERTIFICATE_AUTHORITY_COMPROMISE", "AFFILIATION_CHANGED", "SUPERSEDED", "CESSATION_OF_OPERATION", "CERTIFICATE_HOLD", "PRIVILEGE_WITHDRAWN", "ATTRIBUTE_AUTHORITY_COMPROMISE"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def request_id(self):
        """Gets the request_id of this RevokeCertificateRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this RevokeCertificateRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RevokeCertificateRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this RevokeCertificateRequest.
        :type request_id: str
        """

        self._request_id = request_id
