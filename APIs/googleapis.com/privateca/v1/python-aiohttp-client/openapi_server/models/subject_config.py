# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subject import Subject
from openapi_server.models.subject_alt_names import SubjectAltNames
from openapi_server import util


class SubjectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: Subject=None, subject_alt_name: SubjectAltNames=None):
        """SubjectConfig - a model defined in OpenAPI

        :param subject: The subject of this SubjectConfig.
        :param subject_alt_name: The subject_alt_name of this SubjectConfig.
        """
        self.openapi_types = {
            'subject': Subject,
            'subject_alt_name': SubjectAltNames
        }

        self.attribute_map = {
            'subject': 'subject',
            'subject_alt_name': 'subjectAltName'
        }

        self._subject = subject
        self._subject_alt_name = subject_alt_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubjectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubjectConfig of this SubjectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this SubjectConfig.


        :return: The subject of this SubjectConfig.
        :rtype: Subject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SubjectConfig.


        :param subject: The subject of this SubjectConfig.
        :type subject: Subject
        """

        self._subject = subject

    @property
    def subject_alt_name(self):
        """Gets the subject_alt_name of this SubjectConfig.


        :return: The subject_alt_name of this SubjectConfig.
        :rtype: SubjectAltNames
        """
        return self._subject_alt_name

    @subject_alt_name.setter
    def subject_alt_name(self, subject_alt_name):
        """Sets the subject_alt_name of this SubjectConfig.


        :param subject_alt_name: The subject_alt_name of this SubjectConfig.
        :type subject_alt_name: SubjectAltNames
        """

        self._subject_alt_name = subject_alt_name
