# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issuance_policy import IssuancePolicy
from openapi_server.models.publishing_options import PublishingOptions
from openapi_server import util


class CaPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuance_policy: IssuancePolicy=None, labels: Dict[str, str]=None, name: str=None, publishing_options: PublishingOptions=None, tier: str=None):
        """CaPool - a model defined in OpenAPI

        :param issuance_policy: The issuance_policy of this CaPool.
        :param labels: The labels of this CaPool.
        :param name: The name of this CaPool.
        :param publishing_options: The publishing_options of this CaPool.
        :param tier: The tier of this CaPool.
        """
        self.openapi_types = {
            'issuance_policy': IssuancePolicy,
            'labels': Dict[str, str],
            'name': str,
            'publishing_options': PublishingOptions,
            'tier': str
        }

        self.attribute_map = {
            'issuance_policy': 'issuancePolicy',
            'labels': 'labels',
            'name': 'name',
            'publishing_options': 'publishingOptions',
            'tier': 'tier'
        }

        self._issuance_policy = issuance_policy
        self._labels = labels
        self._name = name
        self._publishing_options = publishing_options
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaPool of this CaPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuance_policy(self):
        """Gets the issuance_policy of this CaPool.


        :return: The issuance_policy of this CaPool.
        :rtype: IssuancePolicy
        """
        return self._issuance_policy

    @issuance_policy.setter
    def issuance_policy(self, issuance_policy):
        """Sets the issuance_policy of this CaPool.


        :param issuance_policy: The issuance_policy of this CaPool.
        :type issuance_policy: IssuancePolicy
        """

        self._issuance_policy = issuance_policy

    @property
    def labels(self):
        """Gets the labels of this CaPool.

        Optional. Labels with user-defined metadata.

        :return: The labels of this CaPool.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CaPool.

        Optional. Labels with user-defined metadata.

        :param labels: The labels of this CaPool.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CaPool.

        Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.

        :return: The name of this CaPool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaPool.

        Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.

        :param name: The name of this CaPool.
        :type name: str
        """

        self._name = name

    @property
    def publishing_options(self):
        """Gets the publishing_options of this CaPool.


        :return: The publishing_options of this CaPool.
        :rtype: PublishingOptions
        """
        return self._publishing_options

    @publishing_options.setter
    def publishing_options(self, publishing_options):
        """Sets the publishing_options of this CaPool.


        :param publishing_options: The publishing_options of this CaPool.
        :type publishing_options: PublishingOptions
        """

        self._publishing_options = publishing_options

    @property
    def tier(self):
        """Gets the tier of this CaPool.

        Required. Immutable. The Tier of this CaPool.

        :return: The tier of this CaPool.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CaPool.

        Required. Immutable. The Tier of this CaPool.

        :param tier: The tier of this CaPool.
        :type tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "ENTERPRISE", "DEVOPS"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
