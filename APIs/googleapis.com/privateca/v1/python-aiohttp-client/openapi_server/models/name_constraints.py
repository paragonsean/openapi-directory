# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NameConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, critical: bool=None, excluded_dns_names: List[str]=None, excluded_email_addresses: List[str]=None, excluded_ip_ranges: List[str]=None, excluded_uris: List[str]=None, permitted_dns_names: List[str]=None, permitted_email_addresses: List[str]=None, permitted_ip_ranges: List[str]=None, permitted_uris: List[str]=None):
        """NameConstraints - a model defined in OpenAPI

        :param critical: The critical of this NameConstraints.
        :param excluded_dns_names: The excluded_dns_names of this NameConstraints.
        :param excluded_email_addresses: The excluded_email_addresses of this NameConstraints.
        :param excluded_ip_ranges: The excluded_ip_ranges of this NameConstraints.
        :param excluded_uris: The excluded_uris of this NameConstraints.
        :param permitted_dns_names: The permitted_dns_names of this NameConstraints.
        :param permitted_email_addresses: The permitted_email_addresses of this NameConstraints.
        :param permitted_ip_ranges: The permitted_ip_ranges of this NameConstraints.
        :param permitted_uris: The permitted_uris of this NameConstraints.
        """
        self.openapi_types = {
            'critical': bool,
            'excluded_dns_names': List[str],
            'excluded_email_addresses': List[str],
            'excluded_ip_ranges': List[str],
            'excluded_uris': List[str],
            'permitted_dns_names': List[str],
            'permitted_email_addresses': List[str],
            'permitted_ip_ranges': List[str],
            'permitted_uris': List[str]
        }

        self.attribute_map = {
            'critical': 'critical',
            'excluded_dns_names': 'excludedDnsNames',
            'excluded_email_addresses': 'excludedEmailAddresses',
            'excluded_ip_ranges': 'excludedIpRanges',
            'excluded_uris': 'excludedUris',
            'permitted_dns_names': 'permittedDnsNames',
            'permitted_email_addresses': 'permittedEmailAddresses',
            'permitted_ip_ranges': 'permittedIpRanges',
            'permitted_uris': 'permittedUris'
        }

        self._critical = critical
        self._excluded_dns_names = excluded_dns_names
        self._excluded_email_addresses = excluded_email_addresses
        self._excluded_ip_ranges = excluded_ip_ranges
        self._excluded_uris = excluded_uris
        self._permitted_dns_names = permitted_dns_names
        self._permitted_email_addresses = permitted_email_addresses
        self._permitted_ip_ranges = permitted_ip_ranges
        self._permitted_uris = permitted_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NameConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NameConstraints of this NameConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def critical(self):
        """Gets the critical of this NameConstraints.

        Indicates whether or not the name constraints are marked critical.

        :return: The critical of this NameConstraints.
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this NameConstraints.

        Indicates whether or not the name constraints are marked critical.

        :param critical: The critical of this NameConstraints.
        :type critical: bool
        """

        self._critical = critical

    @property
    def excluded_dns_names(self):
        """Gets the excluded_dns_names of this NameConstraints.

        Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.

        :return: The excluded_dns_names of this NameConstraints.
        :rtype: List[str]
        """
        return self._excluded_dns_names

    @excluded_dns_names.setter
    def excluded_dns_names(self, excluded_dns_names):
        """Sets the excluded_dns_names of this NameConstraints.

        Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.

        :param excluded_dns_names: The excluded_dns_names of this NameConstraints.
        :type excluded_dns_names: List[str]
        """

        self._excluded_dns_names = excluded_dns_names

    @property
    def excluded_email_addresses(self):
        """Gets the excluded_email_addresses of this NameConstraints.

        Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.

        :return: The excluded_email_addresses of this NameConstraints.
        :rtype: List[str]
        """
        return self._excluded_email_addresses

    @excluded_email_addresses.setter
    def excluded_email_addresses(self, excluded_email_addresses):
        """Sets the excluded_email_addresses of this NameConstraints.

        Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.

        :param excluded_email_addresses: The excluded_email_addresses of this NameConstraints.
        :type excluded_email_addresses: List[str]
        """

        self._excluded_email_addresses = excluded_email_addresses

    @property
    def excluded_ip_ranges(self):
        """Gets the excluded_ip_ranges of this NameConstraints.

        Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.

        :return: The excluded_ip_ranges of this NameConstraints.
        :rtype: List[str]
        """
        return self._excluded_ip_ranges

    @excluded_ip_ranges.setter
    def excluded_ip_ranges(self, excluded_ip_ranges):
        """Sets the excluded_ip_ranges of this NameConstraints.

        Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.

        :param excluded_ip_ranges: The excluded_ip_ranges of this NameConstraints.
        :type excluded_ip_ranges: List[str]
        """

        self._excluded_ip_ranges = excluded_ip_ranges

    @property
    def excluded_uris(self):
        """Gets the excluded_uris of this NameConstraints.

        Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)

        :return: The excluded_uris of this NameConstraints.
        :rtype: List[str]
        """
        return self._excluded_uris

    @excluded_uris.setter
    def excluded_uris(self, excluded_uris):
        """Sets the excluded_uris of this NameConstraints.

        Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)

        :param excluded_uris: The excluded_uris of this NameConstraints.
        :type excluded_uris: List[str]
        """

        self._excluded_uris = excluded_uris

    @property
    def permitted_dns_names(self):
        """Gets the permitted_dns_names of this NameConstraints.

        Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.

        :return: The permitted_dns_names of this NameConstraints.
        :rtype: List[str]
        """
        return self._permitted_dns_names

    @permitted_dns_names.setter
    def permitted_dns_names(self, permitted_dns_names):
        """Sets the permitted_dns_names of this NameConstraints.

        Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.

        :param permitted_dns_names: The permitted_dns_names of this NameConstraints.
        :type permitted_dns_names: List[str]
        """

        self._permitted_dns_names = permitted_dns_names

    @property
    def permitted_email_addresses(self):
        """Gets the permitted_email_addresses of this NameConstraints.

        Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.

        :return: The permitted_email_addresses of this NameConstraints.
        :rtype: List[str]
        """
        return self._permitted_email_addresses

    @permitted_email_addresses.setter
    def permitted_email_addresses(self, permitted_email_addresses):
        """Sets the permitted_email_addresses of this NameConstraints.

        Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.

        :param permitted_email_addresses: The permitted_email_addresses of this NameConstraints.
        :type permitted_email_addresses: List[str]
        """

        self._permitted_email_addresses = permitted_email_addresses

    @property
    def permitted_ip_ranges(self):
        """Gets the permitted_ip_ranges of this NameConstraints.

        Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.

        :return: The permitted_ip_ranges of this NameConstraints.
        :rtype: List[str]
        """
        return self._permitted_ip_ranges

    @permitted_ip_ranges.setter
    def permitted_ip_ranges(self, permitted_ip_ranges):
        """Sets the permitted_ip_ranges of this NameConstraints.

        Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.

        :param permitted_ip_ranges: The permitted_ip_ranges of this NameConstraints.
        :type permitted_ip_ranges: List[str]
        """

        self._permitted_ip_ranges = permitted_ip_ranges

    @property
    def permitted_uris(self):
        """Gets the permitted_uris of this NameConstraints.

        Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)

        :return: The permitted_uris of this NameConstraints.
        :rtype: List[str]
        """
        return self._permitted_uris

    @permitted_uris.setter
    def permitted_uris(self, permitted_uris):
        """Sets the permitted_uris of this NameConstraints.

        Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)

        :param permitted_uris: The permitted_uris of this NameConstraints.
        :type permitted_uris: List[str]
        """

        self._permitted_uris = permitted_uris
