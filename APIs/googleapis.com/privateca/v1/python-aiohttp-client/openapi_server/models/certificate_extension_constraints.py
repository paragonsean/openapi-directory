# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_id import ObjectId
from openapi_server import util


class CertificateExtensionConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_extensions: List[ObjectId]=None, known_extensions: List[str]=None):
        """CertificateExtensionConstraints - a model defined in OpenAPI

        :param additional_extensions: The additional_extensions of this CertificateExtensionConstraints.
        :param known_extensions: The known_extensions of this CertificateExtensionConstraints.
        """
        self.openapi_types = {
            'additional_extensions': List[ObjectId],
            'known_extensions': List[str]
        }

        self.attribute_map = {
            'additional_extensions': 'additionalExtensions',
            'known_extensions': 'knownExtensions'
        }

        self._additional_extensions = additional_extensions
        self._known_extensions = known_extensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateExtensionConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateExtensionConstraints of this CertificateExtensionConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_extensions(self):
        """Gets the additional_extensions of this CertificateExtensionConstraints.

        Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.

        :return: The additional_extensions of this CertificateExtensionConstraints.
        :rtype: List[ObjectId]
        """
        return self._additional_extensions

    @additional_extensions.setter
    def additional_extensions(self, additional_extensions):
        """Sets the additional_extensions of this CertificateExtensionConstraints.

        Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.

        :param additional_extensions: The additional_extensions of this CertificateExtensionConstraints.
        :type additional_extensions: List[ObjectId]
        """

        self._additional_extensions = additional_extensions

    @property
    def known_extensions(self):
        """Gets the known_extensions of this CertificateExtensionConstraints.

        Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.

        :return: The known_extensions of this CertificateExtensionConstraints.
        :rtype: List[str]
        """
        return self._known_extensions

    @known_extensions.setter
    def known_extensions(self, known_extensions):
        """Sets the known_extensions of this CertificateExtensionConstraints.

        Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.

        :param known_extensions: The known_extensions of this CertificateExtensionConstraints.
        :type known_extensions: List[str]
        """
        allowed_values = ["KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED", "BASE_KEY_USAGE", "EXTENDED_KEY_USAGE", "CA_OPTIONS", "POLICY_IDS", "AIA_OCSP_SERVERS", "NAME_CONSTRAINTS"]  # noqa: E501
        if not set(known_extensions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `known_extensions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(known_extensions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._known_extensions = known_extensions
