# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding_format: str=None, publish_ca_cert: bool=None, publish_crl: bool=None):
        """PublishingOptions - a model defined in OpenAPI

        :param encoding_format: The encoding_format of this PublishingOptions.
        :param publish_ca_cert: The publish_ca_cert of this PublishingOptions.
        :param publish_crl: The publish_crl of this PublishingOptions.
        """
        self.openapi_types = {
            'encoding_format': str,
            'publish_ca_cert': bool,
            'publish_crl': bool
        }

        self.attribute_map = {
            'encoding_format': 'encodingFormat',
            'publish_ca_cert': 'publishCaCert',
            'publish_crl': 'publishCrl'
        }

        self._encoding_format = encoding_format
        self._publish_ca_cert = publish_ca_cert
        self._publish_crl = publish_crl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishingOptions of this PublishingOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding_format(self):
        """Gets the encoding_format of this PublishingOptions.

        Optional. Specifies the encoding format of each CertificateAuthority's CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.

        :return: The encoding_format of this PublishingOptions.
        :rtype: str
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this PublishingOptions.

        Optional. Specifies the encoding format of each CertificateAuthority's CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.

        :param encoding_format: The encoding_format of this PublishingOptions.
        :type encoding_format: str
        """
        allowed_values = ["ENCODING_FORMAT_UNSPECIFIED", "PEM", "DER"]  # noqa: E501
        if encoding_format not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_format` ({0}), must be one of {1}"
                .format(encoding_format, allowed_values)
            )

        self._encoding_format = encoding_format

    @property
    def publish_ca_cert(self):
        """Gets the publish_ca_cert of this PublishingOptions.

        Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the \"Authority Information Access\" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.

        :return: The publish_ca_cert of this PublishingOptions.
        :rtype: bool
        """
        return self._publish_ca_cert

    @publish_ca_cert.setter
    def publish_ca_cert(self, publish_ca_cert):
        """Sets the publish_ca_cert of this PublishingOptions.

        Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the \"Authority Information Access\" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.

        :param publish_ca_cert: The publish_ca_cert of this PublishingOptions.
        :type publish_ca_cert: bool
        """

        self._publish_ca_cert = publish_ca_cert

    @property
    def publish_crl(self):
        """Gets the publish_crl of this PublishingOptions.

        Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the \"CRL Distribution Points\" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.

        :return: The publish_crl of this PublishingOptions.
        :rtype: bool
        """
        return self._publish_crl

    @publish_crl.setter
    def publish_crl(self, publish_crl):
        """Sets the publish_crl of this PublishingOptions.

        Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the \"CRL Distribution Points\" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.

        :param publish_crl: The publish_crl of this PublishingOptions.
        :type publish_crl: bool
        """

        self._publish_crl = publish_crl
