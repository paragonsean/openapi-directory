# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_key_type import AllowedKeyType
from openapi_server.models.certificate_extension_constraints import CertificateExtensionConstraints
from openapi_server.models.certificate_identity_constraints import CertificateIdentityConstraints
from openapi_server.models.issuance_modes import IssuanceModes
from openapi_server.models.x509_parameters import X509Parameters
from openapi_server import util


class IssuancePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_issuance_modes: IssuanceModes=None, allowed_key_types: List[AllowedKeyType]=None, baseline_values: X509Parameters=None, identity_constraints: CertificateIdentityConstraints=None, maximum_lifetime: str=None, passthrough_extensions: CertificateExtensionConstraints=None):
        """IssuancePolicy - a model defined in OpenAPI

        :param allowed_issuance_modes: The allowed_issuance_modes of this IssuancePolicy.
        :param allowed_key_types: The allowed_key_types of this IssuancePolicy.
        :param baseline_values: The baseline_values of this IssuancePolicy.
        :param identity_constraints: The identity_constraints of this IssuancePolicy.
        :param maximum_lifetime: The maximum_lifetime of this IssuancePolicy.
        :param passthrough_extensions: The passthrough_extensions of this IssuancePolicy.
        """
        self.openapi_types = {
            'allowed_issuance_modes': IssuanceModes,
            'allowed_key_types': List[AllowedKeyType],
            'baseline_values': X509Parameters,
            'identity_constraints': CertificateIdentityConstraints,
            'maximum_lifetime': str,
            'passthrough_extensions': CertificateExtensionConstraints
        }

        self.attribute_map = {
            'allowed_issuance_modes': 'allowedIssuanceModes',
            'allowed_key_types': 'allowedKeyTypes',
            'baseline_values': 'baselineValues',
            'identity_constraints': 'identityConstraints',
            'maximum_lifetime': 'maximumLifetime',
            'passthrough_extensions': 'passthroughExtensions'
        }

        self._allowed_issuance_modes = allowed_issuance_modes
        self._allowed_key_types = allowed_key_types
        self._baseline_values = baseline_values
        self._identity_constraints = identity_constraints
        self._maximum_lifetime = maximum_lifetime
        self._passthrough_extensions = passthrough_extensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuancePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuancePolicy of this IssuancePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_issuance_modes(self):
        """Gets the allowed_issuance_modes of this IssuancePolicy.


        :return: The allowed_issuance_modes of this IssuancePolicy.
        :rtype: IssuanceModes
        """
        return self._allowed_issuance_modes

    @allowed_issuance_modes.setter
    def allowed_issuance_modes(self, allowed_issuance_modes):
        """Sets the allowed_issuance_modes of this IssuancePolicy.


        :param allowed_issuance_modes: The allowed_issuance_modes of this IssuancePolicy.
        :type allowed_issuance_modes: IssuanceModes
        """

        self._allowed_issuance_modes = allowed_issuance_modes

    @property
    def allowed_key_types(self):
        """Gets the allowed_key_types of this IssuancePolicy.

        Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.

        :return: The allowed_key_types of this IssuancePolicy.
        :rtype: List[AllowedKeyType]
        """
        return self._allowed_key_types

    @allowed_key_types.setter
    def allowed_key_types(self, allowed_key_types):
        """Sets the allowed_key_types of this IssuancePolicy.

        Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.

        :param allowed_key_types: The allowed_key_types of this IssuancePolicy.
        :type allowed_key_types: List[AllowedKeyType]
        """

        self._allowed_key_types = allowed_key_types

    @property
    def baseline_values(self):
        """Gets the baseline_values of this IssuancePolicy.


        :return: The baseline_values of this IssuancePolicy.
        :rtype: X509Parameters
        """
        return self._baseline_values

    @baseline_values.setter
    def baseline_values(self, baseline_values):
        """Sets the baseline_values of this IssuancePolicy.


        :param baseline_values: The baseline_values of this IssuancePolicy.
        :type baseline_values: X509Parameters
        """

        self._baseline_values = baseline_values

    @property
    def identity_constraints(self):
        """Gets the identity_constraints of this IssuancePolicy.


        :return: The identity_constraints of this IssuancePolicy.
        :rtype: CertificateIdentityConstraints
        """
        return self._identity_constraints

    @identity_constraints.setter
    def identity_constraints(self, identity_constraints):
        """Sets the identity_constraints of this IssuancePolicy.


        :param identity_constraints: The identity_constraints of this IssuancePolicy.
        :type identity_constraints: CertificateIdentityConstraints
        """

        self._identity_constraints = identity_constraints

    @property
    def maximum_lifetime(self):
        """Gets the maximum_lifetime of this IssuancePolicy.

        Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.

        :return: The maximum_lifetime of this IssuancePolicy.
        :rtype: str
        """
        return self._maximum_lifetime

    @maximum_lifetime.setter
    def maximum_lifetime(self, maximum_lifetime):
        """Sets the maximum_lifetime of this IssuancePolicy.

        Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.

        :param maximum_lifetime: The maximum_lifetime of this IssuancePolicy.
        :type maximum_lifetime: str
        """

        self._maximum_lifetime = maximum_lifetime

    @property
    def passthrough_extensions(self):
        """Gets the passthrough_extensions of this IssuancePolicy.


        :return: The passthrough_extensions of this IssuancePolicy.
        :rtype: CertificateExtensionConstraints
        """
        return self._passthrough_extensions

    @passthrough_extensions.setter
    def passthrough_extensions(self, passthrough_extensions):
        """Sets the passthrough_extensions of this IssuancePolicy.


        :param passthrough_extensions: The passthrough_extensions of this IssuancePolicy.
        :type passthrough_extensions: CertificateExtensionConstraints
        """

        self._passthrough_extensions = passthrough_extensions
