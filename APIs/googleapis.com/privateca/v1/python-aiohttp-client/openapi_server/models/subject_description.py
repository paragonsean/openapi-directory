# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subject import Subject
from openapi_server.models.subject_alt_names import SubjectAltNames
from openapi_server import util


class SubjectDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hex_serial_number: str=None, lifetime: str=None, not_after_time: str=None, not_before_time: str=None, subject: Subject=None, subject_alt_name: SubjectAltNames=None):
        """SubjectDescription - a model defined in OpenAPI

        :param hex_serial_number: The hex_serial_number of this SubjectDescription.
        :param lifetime: The lifetime of this SubjectDescription.
        :param not_after_time: The not_after_time of this SubjectDescription.
        :param not_before_time: The not_before_time of this SubjectDescription.
        :param subject: The subject of this SubjectDescription.
        :param subject_alt_name: The subject_alt_name of this SubjectDescription.
        """
        self.openapi_types = {
            'hex_serial_number': str,
            'lifetime': str,
            'not_after_time': str,
            'not_before_time': str,
            'subject': Subject,
            'subject_alt_name': SubjectAltNames
        }

        self.attribute_map = {
            'hex_serial_number': 'hexSerialNumber',
            'lifetime': 'lifetime',
            'not_after_time': 'notAfterTime',
            'not_before_time': 'notBeforeTime',
            'subject': 'subject',
            'subject_alt_name': 'subjectAltName'
        }

        self._hex_serial_number = hex_serial_number
        self._lifetime = lifetime
        self._not_after_time = not_after_time
        self._not_before_time = not_before_time
        self._subject = subject
        self._subject_alt_name = subject_alt_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubjectDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubjectDescription of this SubjectDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hex_serial_number(self):
        """Gets the hex_serial_number of this SubjectDescription.

        The serial number encoded in lowercase hexadecimal.

        :return: The hex_serial_number of this SubjectDescription.
        :rtype: str
        """
        return self._hex_serial_number

    @hex_serial_number.setter
    def hex_serial_number(self, hex_serial_number):
        """Sets the hex_serial_number of this SubjectDescription.

        The serial number encoded in lowercase hexadecimal.

        :param hex_serial_number: The hex_serial_number of this SubjectDescription.
        :type hex_serial_number: str
        """

        self._hex_serial_number = hex_serial_number

    @property
    def lifetime(self):
        """Gets the lifetime of this SubjectDescription.

        For convenience, the actual lifetime of an issued certificate.

        :return: The lifetime of this SubjectDescription.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this SubjectDescription.

        For convenience, the actual lifetime of an issued certificate.

        :param lifetime: The lifetime of this SubjectDescription.
        :type lifetime: str
        """

        self._lifetime = lifetime

    @property
    def not_after_time(self):
        """Gets the not_after_time of this SubjectDescription.

        The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.

        :return: The not_after_time of this SubjectDescription.
        :rtype: str
        """
        return self._not_after_time

    @not_after_time.setter
    def not_after_time(self, not_after_time):
        """Sets the not_after_time of this SubjectDescription.

        The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.

        :param not_after_time: The not_after_time of this SubjectDescription.
        :type not_after_time: str
        """

        self._not_after_time = not_after_time

    @property
    def not_before_time(self):
        """Gets the not_before_time of this SubjectDescription.

        The time at which the certificate becomes valid.

        :return: The not_before_time of this SubjectDescription.
        :rtype: str
        """
        return self._not_before_time

    @not_before_time.setter
    def not_before_time(self, not_before_time):
        """Sets the not_before_time of this SubjectDescription.

        The time at which the certificate becomes valid.

        :param not_before_time: The not_before_time of this SubjectDescription.
        :type not_before_time: str
        """

        self._not_before_time = not_before_time

    @property
    def subject(self):
        """Gets the subject of this SubjectDescription.


        :return: The subject of this SubjectDescription.
        :rtype: Subject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SubjectDescription.


        :param subject: The subject of this SubjectDescription.
        :type subject: Subject
        """

        self._subject = subject

    @property
    def subject_alt_name(self):
        """Gets the subject_alt_name of this SubjectDescription.


        :return: The subject_alt_name of this SubjectDescription.
        :rtype: SubjectAltNames
        """
        return self._subject_alt_name

    @subject_alt_name.setter
    def subject_alt_name(self, subject_alt_name):
        """Sets the subject_alt_name of this SubjectDescription.


        :param subject_alt_name: The subject_alt_name of this SubjectDescription.
        :type subject_alt_name: SubjectAltNames
        """

        self._subject_alt_name = subject_alt_name
