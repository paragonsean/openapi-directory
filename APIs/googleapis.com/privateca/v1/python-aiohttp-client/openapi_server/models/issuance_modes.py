# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuanceModes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_config_based_issuance: bool=None, allow_csr_based_issuance: bool=None):
        """IssuanceModes - a model defined in OpenAPI

        :param allow_config_based_issuance: The allow_config_based_issuance of this IssuanceModes.
        :param allow_csr_based_issuance: The allow_csr_based_issuance of this IssuanceModes.
        """
        self.openapi_types = {
            'allow_config_based_issuance': bool,
            'allow_csr_based_issuance': bool
        }

        self.attribute_map = {
            'allow_config_based_issuance': 'allowConfigBasedIssuance',
            'allow_csr_based_issuance': 'allowCsrBasedIssuance'
        }

        self._allow_config_based_issuance = allow_config_based_issuance
        self._allow_csr_based_issuance = allow_csr_based_issuance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuanceModes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuanceModes of this IssuanceModes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_config_based_issuance(self):
        """Gets the allow_config_based_issuance of this IssuanceModes.

        Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.

        :return: The allow_config_based_issuance of this IssuanceModes.
        :rtype: bool
        """
        return self._allow_config_based_issuance

    @allow_config_based_issuance.setter
    def allow_config_based_issuance(self, allow_config_based_issuance):
        """Sets the allow_config_based_issuance of this IssuanceModes.

        Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.

        :param allow_config_based_issuance: The allow_config_based_issuance of this IssuanceModes.
        :type allow_config_based_issuance: bool
        """

        self._allow_config_based_issuance = allow_config_based_issuance

    @property
    def allow_csr_based_issuance(self):
        """Gets the allow_csr_based_issuance of this IssuanceModes.

        Optional. When true, allows callers to create Certificates by specifying a CSR.

        :return: The allow_csr_based_issuance of this IssuanceModes.
        :rtype: bool
        """
        return self._allow_csr_based_issuance

    @allow_csr_based_issuance.setter
    def allow_csr_based_issuance(self, allow_csr_based_issuance):
        """Sets the allow_csr_based_issuance of this IssuanceModes.

        Optional. When true, allows callers to create Certificates by specifying a CSR.

        :param allow_csr_based_issuance: The allow_csr_based_issuance of this IssuanceModes.
        :type allow_csr_based_issuance: bool
        """

        self._allow_csr_based_issuance = allow_csr_based_issuance
