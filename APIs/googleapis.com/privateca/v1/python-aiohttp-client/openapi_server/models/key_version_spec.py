# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyVersionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, cloud_kms_key_version: str=None):
        """KeyVersionSpec - a model defined in OpenAPI

        :param algorithm: The algorithm of this KeyVersionSpec.
        :param cloud_kms_key_version: The cloud_kms_key_version of this KeyVersionSpec.
        """
        self.openapi_types = {
            'algorithm': str,
            'cloud_kms_key_version': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'cloud_kms_key_version': 'cloudKmsKeyVersion'
        }

        self._algorithm = algorithm
        self._cloud_kms_key_version = cloud_kms_key_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVersionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVersionSpec of this KeyVersionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this KeyVersionSpec.

        The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.

        :return: The algorithm of this KeyVersionSpec.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this KeyVersionSpec.

        The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.

        :param algorithm: The algorithm of this KeyVersionSpec.
        :type algorithm: str
        """
        allowed_values = ["SIGN_HASH_ALGORITHM_UNSPECIFIED", "RSA_PSS_2048_SHA256", "RSA_PSS_3072_SHA256", "RSA_PSS_4096_SHA256", "RSA_PKCS1_2048_SHA256", "RSA_PKCS1_3072_SHA256", "RSA_PKCS1_4096_SHA256", "EC_P256_SHA256", "EC_P384_SHA384"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def cloud_kms_key_version(self):
        """Gets the cloud_kms_key_version of this KeyVersionSpec.

        The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.

        :return: The cloud_kms_key_version of this KeyVersionSpec.
        :rtype: str
        """
        return self._cloud_kms_key_version

    @cloud_kms_key_version.setter
    def cloud_kms_key_version(self, cloud_kms_key_version):
        """Sets the cloud_kms_key_version of this KeyVersionSpec.

        The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.

        :param cloud_kms_key_version: The cloud_kms_key_version of this KeyVersionSpec.
        :type cloud_kms_key_version: str
        """

        self._cloud_kms_key_version = cloud_kms_key_version
