# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_name: str=None, country_code: str=None, locality: str=None, organization: str=None, organizational_unit: str=None, postal_code: str=None, province: str=None, street_address: str=None):
        """Subject - a model defined in OpenAPI

        :param common_name: The common_name of this Subject.
        :param country_code: The country_code of this Subject.
        :param locality: The locality of this Subject.
        :param organization: The organization of this Subject.
        :param organizational_unit: The organizational_unit of this Subject.
        :param postal_code: The postal_code of this Subject.
        :param province: The province of this Subject.
        :param street_address: The street_address of this Subject.
        """
        self.openapi_types = {
            'common_name': str,
            'country_code': str,
            'locality': str,
            'organization': str,
            'organizational_unit': str,
            'postal_code': str,
            'province': str,
            'street_address': str
        }

        self.attribute_map = {
            'common_name': 'commonName',
            'country_code': 'countryCode',
            'locality': 'locality',
            'organization': 'organization',
            'organizational_unit': 'organizationalUnit',
            'postal_code': 'postalCode',
            'province': 'province',
            'street_address': 'streetAddress'
        }

        self._common_name = common_name
        self._country_code = country_code
        self._locality = locality
        self._organization = organization
        self._organizational_unit = organizational_unit
        self._postal_code = postal_code
        self._province = province
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subject of this Subject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_name(self):
        """Gets the common_name of this Subject.

        The \"common name\" of the subject.

        :return: The common_name of this Subject.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this Subject.

        The \"common name\" of the subject.

        :param common_name: The common_name of this Subject.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def country_code(self):
        """Gets the country_code of this Subject.

        The country code of the subject.

        :return: The country_code of this Subject.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Subject.

        The country code of the subject.

        :param country_code: The country_code of this Subject.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def locality(self):
        """Gets the locality of this Subject.

        The locality or city of the subject.

        :return: The locality of this Subject.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Subject.

        The locality or city of the subject.

        :param locality: The locality of this Subject.
        :type locality: str
        """

        self._locality = locality

    @property
    def organization(self):
        """Gets the organization of this Subject.

        The organization of the subject.

        :return: The organization of this Subject.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Subject.

        The organization of the subject.

        :param organization: The organization of this Subject.
        :type organization: str
        """

        self._organization = organization

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this Subject.

        The organizational_unit of the subject.

        :return: The organizational_unit of this Subject.
        :rtype: str
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this Subject.

        The organizational_unit of the subject.

        :param organizational_unit: The organizational_unit of this Subject.
        :type organizational_unit: str
        """

        self._organizational_unit = organizational_unit

    @property
    def postal_code(self):
        """Gets the postal_code of this Subject.

        The postal code of the subject.

        :return: The postal_code of this Subject.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Subject.

        The postal code of the subject.

        :param postal_code: The postal_code of this Subject.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def province(self):
        """Gets the province of this Subject.

        The province, territory, or regional state of the subject.

        :return: The province of this Subject.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Subject.

        The province, territory, or regional state of the subject.

        :param province: The province of this Subject.
        :type province: str
        """

        self._province = province

    @property
    def street_address(self):
        """Gets the street_address of this Subject.

        The street address of the subject.

        :return: The street_address of this Subject.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Subject.

        The street address of the subject.

        :param street_address: The street_address of this Subject.
        :type street_address: str
        """

        self._street_address = street_address
