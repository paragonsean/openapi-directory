# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_extension_constraints import CertificateExtensionConstraints
from openapi_server.models.certificate_identity_constraints import CertificateIdentityConstraints
from openapi_server.models.x509_parameters import X509Parameters
from openapi_server import util


class CertificateTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, identity_constraints: CertificateIdentityConstraints=None, labels: Dict[str, str]=None, maximum_lifetime: str=None, name: str=None, passthrough_extensions: CertificateExtensionConstraints=None, predefined_values: X509Parameters=None, update_time: str=None):
        """CertificateTemplate - a model defined in OpenAPI

        :param create_time: The create_time of this CertificateTemplate.
        :param description: The description of this CertificateTemplate.
        :param identity_constraints: The identity_constraints of this CertificateTemplate.
        :param labels: The labels of this CertificateTemplate.
        :param maximum_lifetime: The maximum_lifetime of this CertificateTemplate.
        :param name: The name of this CertificateTemplate.
        :param passthrough_extensions: The passthrough_extensions of this CertificateTemplate.
        :param predefined_values: The predefined_values of this CertificateTemplate.
        :param update_time: The update_time of this CertificateTemplate.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'identity_constraints': CertificateIdentityConstraints,
            'labels': Dict[str, str],
            'maximum_lifetime': str,
            'name': str,
            'passthrough_extensions': CertificateExtensionConstraints,
            'predefined_values': X509Parameters,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'identity_constraints': 'identityConstraints',
            'labels': 'labels',
            'maximum_lifetime': 'maximumLifetime',
            'name': 'name',
            'passthrough_extensions': 'passthroughExtensions',
            'predefined_values': 'predefinedValues',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._identity_constraints = identity_constraints
        self._labels = labels
        self._maximum_lifetime = maximum_lifetime
        self._name = name
        self._passthrough_extensions = passthrough_extensions
        self._predefined_values = predefined_values
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateTemplate of this CertificateTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this CertificateTemplate.

        Output only. The time at which this CertificateTemplate was created.

        :return: The create_time of this CertificateTemplate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CertificateTemplate.

        Output only. The time at which this CertificateTemplate was created.

        :param create_time: The create_time of this CertificateTemplate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this CertificateTemplate.

        Optional. A human-readable description of scenarios this template is intended for.

        :return: The description of this CertificateTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateTemplate.

        Optional. A human-readable description of scenarios this template is intended for.

        :param description: The description of this CertificateTemplate.
        :type description: str
        """

        self._description = description

    @property
    def identity_constraints(self):
        """Gets the identity_constraints of this CertificateTemplate.


        :return: The identity_constraints of this CertificateTemplate.
        :rtype: CertificateIdentityConstraints
        """
        return self._identity_constraints

    @identity_constraints.setter
    def identity_constraints(self, identity_constraints):
        """Sets the identity_constraints of this CertificateTemplate.


        :param identity_constraints: The identity_constraints of this CertificateTemplate.
        :type identity_constraints: CertificateIdentityConstraints
        """

        self._identity_constraints = identity_constraints

    @property
    def labels(self):
        """Gets the labels of this CertificateTemplate.

        Optional. Labels with user-defined metadata.

        :return: The labels of this CertificateTemplate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CertificateTemplate.

        Optional. Labels with user-defined metadata.

        :param labels: The labels of this CertificateTemplate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def maximum_lifetime(self):
        """Gets the maximum_lifetime of this CertificateTemplate.

        Optional. The maximum lifetime allowed for issued Certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum_lifetime the minimum of the two durations will be the maximum lifetime for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.

        :return: The maximum_lifetime of this CertificateTemplate.
        :rtype: str
        """
        return self._maximum_lifetime

    @maximum_lifetime.setter
    def maximum_lifetime(self, maximum_lifetime):
        """Sets the maximum_lifetime of this CertificateTemplate.

        Optional. The maximum lifetime allowed for issued Certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum_lifetime the minimum of the two durations will be the maximum lifetime for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.

        :param maximum_lifetime: The maximum_lifetime of this CertificateTemplate.
        :type maximum_lifetime: str
        """

        self._maximum_lifetime = maximum_lifetime

    @property
    def name(self):
        """Gets the name of this CertificateTemplate.

        Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.

        :return: The name of this CertificateTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateTemplate.

        Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.

        :param name: The name of this CertificateTemplate.
        :type name: str
        """

        self._name = name

    @property
    def passthrough_extensions(self):
        """Gets the passthrough_extensions of this CertificateTemplate.


        :return: The passthrough_extensions of this CertificateTemplate.
        :rtype: CertificateExtensionConstraints
        """
        return self._passthrough_extensions

    @passthrough_extensions.setter
    def passthrough_extensions(self, passthrough_extensions):
        """Sets the passthrough_extensions of this CertificateTemplate.


        :param passthrough_extensions: The passthrough_extensions of this CertificateTemplate.
        :type passthrough_extensions: CertificateExtensionConstraints
        """

        self._passthrough_extensions = passthrough_extensions

    @property
    def predefined_values(self):
        """Gets the predefined_values of this CertificateTemplate.


        :return: The predefined_values of this CertificateTemplate.
        :rtype: X509Parameters
        """
        return self._predefined_values

    @predefined_values.setter
    def predefined_values(self, predefined_values):
        """Sets the predefined_values of this CertificateTemplate.


        :param predefined_values: The predefined_values of this CertificateTemplate.
        :type predefined_values: X509Parameters
        """

        self._predefined_values = predefined_values

    @property
    def update_time(self):
        """Gets the update_time of this CertificateTemplate.

        Output only. The time at which this CertificateTemplate was updated.

        :return: The update_time of this CertificateTemplate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CertificateTemplate.

        Output only. The time at which this CertificateTemplate was updated.

        :param update_time: The update_time of this CertificateTemplate.
        :type update_time: str
        """

        self._update_time = update_time
