# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisableCertificateAuthorityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_dependent_resources: bool=None, request_id: str=None):
        """DisableCertificateAuthorityRequest - a model defined in OpenAPI

        :param ignore_dependent_resources: The ignore_dependent_resources of this DisableCertificateAuthorityRequest.
        :param request_id: The request_id of this DisableCertificateAuthorityRequest.
        """
        self.openapi_types = {
            'ignore_dependent_resources': bool,
            'request_id': str
        }

        self.attribute_map = {
            'ignore_dependent_resources': 'ignoreDependentResources',
            'request_id': 'requestId'
        }

        self._ignore_dependent_resources = ignore_dependent_resources
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisableCertificateAuthorityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisableCertificateAuthorityRequest of this DisableCertificateAuthorityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_dependent_resources(self):
        """Gets the ignore_dependent_resources of this DisableCertificateAuthorityRequest.

        Optional. This field allows this CA to be disabled even if it's being depended on by another resource. However, doing so may result in unintended and unrecoverable effects on any dependent resource(s) since the CA will no longer be able to issue certificates.

        :return: The ignore_dependent_resources of this DisableCertificateAuthorityRequest.
        :rtype: bool
        """
        return self._ignore_dependent_resources

    @ignore_dependent_resources.setter
    def ignore_dependent_resources(self, ignore_dependent_resources):
        """Sets the ignore_dependent_resources of this DisableCertificateAuthorityRequest.

        Optional. This field allows this CA to be disabled even if it's being depended on by another resource. However, doing so may result in unintended and unrecoverable effects on any dependent resource(s) since the CA will no longer be able to issue certificates.

        :param ignore_dependent_resources: The ignore_dependent_resources of this DisableCertificateAuthorityRequest.
        :type ignore_dependent_resources: bool
        """

        self._ignore_dependent_resources = ignore_dependent_resources

    @property
    def request_id(self):
        """Gets the request_id of this DisableCertificateAuthorityRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this DisableCertificateAuthorityRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DisableCertificateAuthorityRequest.

        Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this DisableCertificateAuthorityRequest.
        :type request_id: str
        """

        self._request_id = request_id
