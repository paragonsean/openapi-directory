# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_config import CertificateConfig
from openapi_server.models.certificate_description import CertificateDescription
from openapi_server.models.revocation_details import RevocationDetails
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_description: CertificateDescription=None, certificate_template: str=None, config: CertificateConfig=None, create_time: str=None, issuer_certificate_authority: str=None, labels: Dict[str, str]=None, lifetime: str=None, name: str=None, pem_certificate: str=None, pem_certificate_chain: List[str]=None, pem_csr: str=None, revocation_details: RevocationDetails=None, subject_mode: str=None, update_time: str=None):
        """Certificate - a model defined in OpenAPI

        :param certificate_description: The certificate_description of this Certificate.
        :param certificate_template: The certificate_template of this Certificate.
        :param config: The config of this Certificate.
        :param create_time: The create_time of this Certificate.
        :param issuer_certificate_authority: The issuer_certificate_authority of this Certificate.
        :param labels: The labels of this Certificate.
        :param lifetime: The lifetime of this Certificate.
        :param name: The name of this Certificate.
        :param pem_certificate: The pem_certificate of this Certificate.
        :param pem_certificate_chain: The pem_certificate_chain of this Certificate.
        :param pem_csr: The pem_csr of this Certificate.
        :param revocation_details: The revocation_details of this Certificate.
        :param subject_mode: The subject_mode of this Certificate.
        :param update_time: The update_time of this Certificate.
        """
        self.openapi_types = {
            'certificate_description': CertificateDescription,
            'certificate_template': str,
            'config': CertificateConfig,
            'create_time': str,
            'issuer_certificate_authority': str,
            'labels': Dict[str, str],
            'lifetime': str,
            'name': str,
            'pem_certificate': str,
            'pem_certificate_chain': List[str],
            'pem_csr': str,
            'revocation_details': RevocationDetails,
            'subject_mode': str,
            'update_time': str
        }

        self.attribute_map = {
            'certificate_description': 'certificateDescription',
            'certificate_template': 'certificateTemplate',
            'config': 'config',
            'create_time': 'createTime',
            'issuer_certificate_authority': 'issuerCertificateAuthority',
            'labels': 'labels',
            'lifetime': 'lifetime',
            'name': 'name',
            'pem_certificate': 'pemCertificate',
            'pem_certificate_chain': 'pemCertificateChain',
            'pem_csr': 'pemCsr',
            'revocation_details': 'revocationDetails',
            'subject_mode': 'subjectMode',
            'update_time': 'updateTime'
        }

        self._certificate_description = certificate_description
        self._certificate_template = certificate_template
        self._config = config
        self._create_time = create_time
        self._issuer_certificate_authority = issuer_certificate_authority
        self._labels = labels
        self._lifetime = lifetime
        self._name = name
        self._pem_certificate = pem_certificate
        self._pem_certificate_chain = pem_certificate_chain
        self._pem_csr = pem_csr
        self._revocation_details = revocation_details
        self._subject_mode = subject_mode
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_description(self):
        """Gets the certificate_description of this Certificate.


        :return: The certificate_description of this Certificate.
        :rtype: CertificateDescription
        """
        return self._certificate_description

    @certificate_description.setter
    def certificate_description(self, certificate_description):
        """Sets the certificate_description of this Certificate.


        :param certificate_description: The certificate_description of this Certificate.
        :type certificate_description: CertificateDescription
        """

        self._certificate_description = certificate_description

    @property
    def certificate_template(self):
        """Gets the certificate_template of this Certificate.

        Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.

        :return: The certificate_template of this Certificate.
        :rtype: str
        """
        return self._certificate_template

    @certificate_template.setter
    def certificate_template(self, certificate_template):
        """Sets the certificate_template of this Certificate.

        Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.

        :param certificate_template: The certificate_template of this Certificate.
        :type certificate_template: str
        """

        self._certificate_template = certificate_template

    @property
    def config(self):
        """Gets the config of this Certificate.


        :return: The config of this Certificate.
        :rtype: CertificateConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Certificate.


        :param config: The config of this Certificate.
        :type config: CertificateConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Certificate.

        Output only. The time at which this Certificate was created.

        :return: The create_time of this Certificate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Certificate.

        Output only. The time at which this Certificate was created.

        :param create_time: The create_time of this Certificate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def issuer_certificate_authority(self):
        """Gets the issuer_certificate_authority of this Certificate.

        Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.

        :return: The issuer_certificate_authority of this Certificate.
        :rtype: str
        """
        return self._issuer_certificate_authority

    @issuer_certificate_authority.setter
    def issuer_certificate_authority(self, issuer_certificate_authority):
        """Sets the issuer_certificate_authority of this Certificate.

        Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.

        :param issuer_certificate_authority: The issuer_certificate_authority of this Certificate.
        :type issuer_certificate_authority: str
        """

        self._issuer_certificate_authority = issuer_certificate_authority

    @property
    def labels(self):
        """Gets the labels of this Certificate.

        Optional. Labels with user-defined metadata.

        :return: The labels of this Certificate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Certificate.

        Optional. Labels with user-defined metadata.

        :param labels: The labels of this Certificate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lifetime(self):
        """Gets the lifetime of this Certificate.

        Required. Immutable. The desired lifetime of a certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.

        :return: The lifetime of this Certificate.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this Certificate.

        Required. Immutable. The desired lifetime of a certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.

        :param lifetime: The lifetime of this Certificate.
        :type lifetime: str
        """

        self._lifetime = lifetime

    @property
    def name(self):
        """Gets the name of this Certificate.

        Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.

        :return: The name of this Certificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.

        Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.

        :param name: The name of this Certificate.
        :type name: str
        """

        self._name = name

    @property
    def pem_certificate(self):
        """Gets the pem_certificate of this Certificate.

        Output only. The pem-encoded, signed X.509 certificate.

        :return: The pem_certificate of this Certificate.
        :rtype: str
        """
        return self._pem_certificate

    @pem_certificate.setter
    def pem_certificate(self, pem_certificate):
        """Sets the pem_certificate of this Certificate.

        Output only. The pem-encoded, signed X.509 certificate.

        :param pem_certificate: The pem_certificate of this Certificate.
        :type pem_certificate: str
        """

        self._pem_certificate = pem_certificate

    @property
    def pem_certificate_chain(self):
        """Gets the pem_certificate_chain of this Certificate.

        Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.

        :return: The pem_certificate_chain of this Certificate.
        :rtype: List[str]
        """
        return self._pem_certificate_chain

    @pem_certificate_chain.setter
    def pem_certificate_chain(self, pem_certificate_chain):
        """Sets the pem_certificate_chain of this Certificate.

        Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.

        :param pem_certificate_chain: The pem_certificate_chain of this Certificate.
        :type pem_certificate_chain: List[str]
        """

        self._pem_certificate_chain = pem_certificate_chain

    @property
    def pem_csr(self):
        """Gets the pem_csr of this Certificate.

        Immutable. A pem-encoded X.509 certificate signing request (CSR).

        :return: The pem_csr of this Certificate.
        :rtype: str
        """
        return self._pem_csr

    @pem_csr.setter
    def pem_csr(self, pem_csr):
        """Sets the pem_csr of this Certificate.

        Immutable. A pem-encoded X.509 certificate signing request (CSR).

        :param pem_csr: The pem_csr of this Certificate.
        :type pem_csr: str
        """

        self._pem_csr = pem_csr

    @property
    def revocation_details(self):
        """Gets the revocation_details of this Certificate.


        :return: The revocation_details of this Certificate.
        :rtype: RevocationDetails
        """
        return self._revocation_details

    @revocation_details.setter
    def revocation_details(self, revocation_details):
        """Sets the revocation_details of this Certificate.


        :param revocation_details: The revocation_details of this Certificate.
        :type revocation_details: RevocationDetails
        """

        self._revocation_details = revocation_details

    @property
    def subject_mode(self):
        """Gets the subject_mode of this Certificate.

        Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.

        :return: The subject_mode of this Certificate.
        :rtype: str
        """
        return self._subject_mode

    @subject_mode.setter
    def subject_mode(self, subject_mode):
        """Sets the subject_mode of this Certificate.

        Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.

        :param subject_mode: The subject_mode of this Certificate.
        :type subject_mode: str
        """
        allowed_values = ["SUBJECT_REQUEST_MODE_UNSPECIFIED", "DEFAULT", "REFLECTED_SPIFFE"]  # noqa: E501
        if subject_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `subject_mode` ({0}), must be one of {1}"
                .format(subject_mode, allowed_values)
            )

        self._subject_mode = subject_mode

    @property
    def update_time(self):
        """Gets the update_time of this Certificate.

        Output only. The time at which this Certificate was updated.

        :return: The update_time of this Certificate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Certificate.

        Output only. The time at which this Certificate was updated.

        :param update_time: The update_time of this Certificate.
        :type update_time: str
        """

        self._update_time = update_time
