# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ca_options import CaOptions
from openapi_server.models.key_usage import KeyUsage
from openapi_server.models.name_constraints import NameConstraints
from openapi_server.models.object_id import ObjectId
from openapi_server.models.x509_extension import X509Extension
from openapi_server import util


class X509Parameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_extensions: List[X509Extension]=None, aia_ocsp_servers: List[str]=None, ca_options: CaOptions=None, key_usage: KeyUsage=None, name_constraints: NameConstraints=None, policy_ids: List[ObjectId]=None):
        """X509Parameters - a model defined in OpenAPI

        :param additional_extensions: The additional_extensions of this X509Parameters.
        :param aia_ocsp_servers: The aia_ocsp_servers of this X509Parameters.
        :param ca_options: The ca_options of this X509Parameters.
        :param key_usage: The key_usage of this X509Parameters.
        :param name_constraints: The name_constraints of this X509Parameters.
        :param policy_ids: The policy_ids of this X509Parameters.
        """
        self.openapi_types = {
            'additional_extensions': List[X509Extension],
            'aia_ocsp_servers': List[str],
            'ca_options': CaOptions,
            'key_usage': KeyUsage,
            'name_constraints': NameConstraints,
            'policy_ids': List[ObjectId]
        }

        self.attribute_map = {
            'additional_extensions': 'additionalExtensions',
            'aia_ocsp_servers': 'aiaOcspServers',
            'ca_options': 'caOptions',
            'key_usage': 'keyUsage',
            'name_constraints': 'nameConstraints',
            'policy_ids': 'policyIds'
        }

        self._additional_extensions = additional_extensions
        self._aia_ocsp_servers = aia_ocsp_servers
        self._ca_options = ca_options
        self._key_usage = key_usage
        self._name_constraints = name_constraints
        self._policy_ids = policy_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X509Parameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X509Parameters of this X509Parameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_extensions(self):
        """Gets the additional_extensions of this X509Parameters.

        Optional. Describes custom X.509 extensions.

        :return: The additional_extensions of this X509Parameters.
        :rtype: List[X509Extension]
        """
        return self._additional_extensions

    @additional_extensions.setter
    def additional_extensions(self, additional_extensions):
        """Sets the additional_extensions of this X509Parameters.

        Optional. Describes custom X.509 extensions.

        :param additional_extensions: The additional_extensions of this X509Parameters.
        :type additional_extensions: List[X509Extension]
        """

        self._additional_extensions = additional_extensions

    @property
    def aia_ocsp_servers(self):
        """Gets the aia_ocsp_servers of this X509Parameters.

        Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.

        :return: The aia_ocsp_servers of this X509Parameters.
        :rtype: List[str]
        """
        return self._aia_ocsp_servers

    @aia_ocsp_servers.setter
    def aia_ocsp_servers(self, aia_ocsp_servers):
        """Sets the aia_ocsp_servers of this X509Parameters.

        Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.

        :param aia_ocsp_servers: The aia_ocsp_servers of this X509Parameters.
        :type aia_ocsp_servers: List[str]
        """

        self._aia_ocsp_servers = aia_ocsp_servers

    @property
    def ca_options(self):
        """Gets the ca_options of this X509Parameters.


        :return: The ca_options of this X509Parameters.
        :rtype: CaOptions
        """
        return self._ca_options

    @ca_options.setter
    def ca_options(self, ca_options):
        """Sets the ca_options of this X509Parameters.


        :param ca_options: The ca_options of this X509Parameters.
        :type ca_options: CaOptions
        """

        self._ca_options = ca_options

    @property
    def key_usage(self):
        """Gets the key_usage of this X509Parameters.


        :return: The key_usage of this X509Parameters.
        :rtype: KeyUsage
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage):
        """Sets the key_usage of this X509Parameters.


        :param key_usage: The key_usage of this X509Parameters.
        :type key_usage: KeyUsage
        """

        self._key_usage = key_usage

    @property
    def name_constraints(self):
        """Gets the name_constraints of this X509Parameters.


        :return: The name_constraints of this X509Parameters.
        :rtype: NameConstraints
        """
        return self._name_constraints

    @name_constraints.setter
    def name_constraints(self, name_constraints):
        """Sets the name_constraints of this X509Parameters.


        :param name_constraints: The name_constraints of this X509Parameters.
        :type name_constraints: NameConstraints
        """

        self._name_constraints = name_constraints

    @property
    def policy_ids(self):
        """Gets the policy_ids of this X509Parameters.

        Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.

        :return: The policy_ids of this X509Parameters.
        :rtype: List[ObjectId]
        """
        return self._policy_ids

    @policy_ids.setter
    def policy_ids(self, policy_ids):
        """Sets the policy_ids of this X509Parameters.

        Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.

        :param policy_ids: The policy_ids of this X509Parameters.
        :type policy_ids: List[ObjectId]
        """

        self._policy_ids = policy_ids
