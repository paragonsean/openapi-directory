/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an RSA key that may be used in a Certificate issued from a CaPool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RsaKeyType {
  public static final String SERIALIZED_NAME_MAX_MODULUS_SIZE = "maxModulusSize";
  @SerializedName(SERIALIZED_NAME_MAX_MODULUS_SIZE)
  private String maxModulusSize;

  public static final String SERIALIZED_NAME_MIN_MODULUS_SIZE = "minModulusSize";
  @SerializedName(SERIALIZED_NAME_MIN_MODULUS_SIZE)
  private String minModulusSize;

  public RsaKeyType() {
  }

  public RsaKeyType maxModulusSize(String maxModulusSize) {
    this.maxModulusSize = maxModulusSize;
    return this;
  }

  /**
   * Optional. The maximum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
   * @return maxModulusSize
   */
  @javax.annotation.Nullable
  public String getMaxModulusSize() {
    return maxModulusSize;
  }

  public void setMaxModulusSize(String maxModulusSize) {
    this.maxModulusSize = maxModulusSize;
  }


  public RsaKeyType minModulusSize(String minModulusSize) {
    this.minModulusSize = minModulusSize;
    return this;
  }

  /**
   * Optional. The minimum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
   * @return minModulusSize
   */
  @javax.annotation.Nullable
  public String getMinModulusSize() {
    return minModulusSize;
  }

  public void setMinModulusSize(String minModulusSize) {
    this.minModulusSize = minModulusSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RsaKeyType rsaKeyType = (RsaKeyType) o;
    return Objects.equals(this.maxModulusSize, rsaKeyType.maxModulusSize) &&
        Objects.equals(this.minModulusSize, rsaKeyType.minModulusSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxModulusSize, minModulusSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RsaKeyType {\n");
    sb.append("    maxModulusSize: ").append(toIndentedString(maxModulusSize)).append("\n");
    sb.append("    minModulusSize: ").append(toIndentedString(minModulusSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxModulusSize");
    openapiFields.add("minModulusSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RsaKeyType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RsaKeyType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RsaKeyType is not found in the empty JSON string", RsaKeyType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RsaKeyType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RsaKeyType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxModulusSize") != null && !jsonObj.get("maxModulusSize").isJsonNull()) && !jsonObj.get("maxModulusSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxModulusSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxModulusSize").toString()));
      }
      if ((jsonObj.get("minModulusSize") != null && !jsonObj.get("minModulusSize").isJsonNull()) && !jsonObj.get("minModulusSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minModulusSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minModulusSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RsaKeyType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RsaKeyType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RsaKeyType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RsaKeyType.class));

       return (TypeAdapter<T>) new TypeAdapter<RsaKeyType>() {
           @Override
           public void write(JsonWriter out, RsaKeyType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RsaKeyType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RsaKeyType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RsaKeyType
   * @throws IOException if the JSON string is invalid with respect to RsaKeyType
   */
  public static RsaKeyType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RsaKeyType.class);
  }

  /**
   * Convert an instance of RsaKeyType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

