/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CaOptions;
import org.openapitools.client.model.KeyUsage;
import org.openapitools.client.model.NameConstraints;
import org.openapitools.client.model.ObjectId;
import org.openapitools.client.model.X509Extension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X509Parameters {
  public static final String SERIALIZED_NAME_ADDITIONAL_EXTENSIONS = "additionalExtensions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXTENSIONS)
  private List<X509Extension> additionalExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AIA_OCSP_SERVERS = "aiaOcspServers";
  @SerializedName(SERIALIZED_NAME_AIA_OCSP_SERVERS)
  private List<String> aiaOcspServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CA_OPTIONS = "caOptions";
  @SerializedName(SERIALIZED_NAME_CA_OPTIONS)
  private CaOptions caOptions;

  public static final String SERIALIZED_NAME_KEY_USAGE = "keyUsage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  private KeyUsage keyUsage;

  public static final String SERIALIZED_NAME_NAME_CONSTRAINTS = "nameConstraints";
  @SerializedName(SERIALIZED_NAME_NAME_CONSTRAINTS)
  private NameConstraints nameConstraints;

  public static final String SERIALIZED_NAME_POLICY_IDS = "policyIds";
  @SerializedName(SERIALIZED_NAME_POLICY_IDS)
  private List<ObjectId> policyIds = new ArrayList<>();

  public X509Parameters() {
  }

  public X509Parameters additionalExtensions(List<X509Extension> additionalExtensions) {
    this.additionalExtensions = additionalExtensions;
    return this;
  }

  public X509Parameters addAdditionalExtensionsItem(X509Extension additionalExtensionsItem) {
    if (this.additionalExtensions == null) {
      this.additionalExtensions = new ArrayList<>();
    }
    this.additionalExtensions.add(additionalExtensionsItem);
    return this;
  }

  /**
   * Optional. Describes custom X.509 extensions.
   * @return additionalExtensions
   */
  @javax.annotation.Nullable
  public List<X509Extension> getAdditionalExtensions() {
    return additionalExtensions;
  }

  public void setAdditionalExtensions(List<X509Extension> additionalExtensions) {
    this.additionalExtensions = additionalExtensions;
  }


  public X509Parameters aiaOcspServers(List<String> aiaOcspServers) {
    this.aiaOcspServers = aiaOcspServers;
    return this;
  }

  public X509Parameters addAiaOcspServersItem(String aiaOcspServersItem) {
    if (this.aiaOcspServers == null) {
      this.aiaOcspServers = new ArrayList<>();
    }
    this.aiaOcspServers.add(aiaOcspServersItem);
    return this;
  }

  /**
   * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \&quot;Authority Information Access\&quot; extension in the certificate.
   * @return aiaOcspServers
   */
  @javax.annotation.Nullable
  public List<String> getAiaOcspServers() {
    return aiaOcspServers;
  }

  public void setAiaOcspServers(List<String> aiaOcspServers) {
    this.aiaOcspServers = aiaOcspServers;
  }


  public X509Parameters caOptions(CaOptions caOptions) {
    this.caOptions = caOptions;
    return this;
  }

  /**
   * Get caOptions
   * @return caOptions
   */
  @javax.annotation.Nullable
  public CaOptions getCaOptions() {
    return caOptions;
  }

  public void setCaOptions(CaOptions caOptions) {
    this.caOptions = caOptions;
  }


  public X509Parameters keyUsage(KeyUsage keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  /**
   * Get keyUsage
   * @return keyUsage
   */
  @javax.annotation.Nullable
  public KeyUsage getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(KeyUsage keyUsage) {
    this.keyUsage = keyUsage;
  }


  public X509Parameters nameConstraints(NameConstraints nameConstraints) {
    this.nameConstraints = nameConstraints;
    return this;
  }

  /**
   * Get nameConstraints
   * @return nameConstraints
   */
  @javax.annotation.Nullable
  public NameConstraints getNameConstraints() {
    return nameConstraints;
  }

  public void setNameConstraints(NameConstraints nameConstraints) {
    this.nameConstraints = nameConstraints;
  }


  public X509Parameters policyIds(List<ObjectId> policyIds) {
    this.policyIds = policyIds;
    return this;
  }

  public X509Parameters addPolicyIdsItem(ObjectId policyIdsItem) {
    if (this.policyIds == null) {
      this.policyIds = new ArrayList<>();
    }
    this.policyIds.add(policyIdsItem);
    return this;
  }

  /**
   * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
   * @return policyIds
   */
  @javax.annotation.Nullable
  public List<ObjectId> getPolicyIds() {
    return policyIds;
  }

  public void setPolicyIds(List<ObjectId> policyIds) {
    this.policyIds = policyIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X509Parameters x509Parameters = (X509Parameters) o;
    return Objects.equals(this.additionalExtensions, x509Parameters.additionalExtensions) &&
        Objects.equals(this.aiaOcspServers, x509Parameters.aiaOcspServers) &&
        Objects.equals(this.caOptions, x509Parameters.caOptions) &&
        Objects.equals(this.keyUsage, x509Parameters.keyUsage) &&
        Objects.equals(this.nameConstraints, x509Parameters.nameConstraints) &&
        Objects.equals(this.policyIds, x509Parameters.policyIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalExtensions, aiaOcspServers, caOptions, keyUsage, nameConstraints, policyIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X509Parameters {\n");
    sb.append("    additionalExtensions: ").append(toIndentedString(additionalExtensions)).append("\n");
    sb.append("    aiaOcspServers: ").append(toIndentedString(aiaOcspServers)).append("\n");
    sb.append("    caOptions: ").append(toIndentedString(caOptions)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    nameConstraints: ").append(toIndentedString(nameConstraints)).append("\n");
    sb.append("    policyIds: ").append(toIndentedString(policyIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalExtensions");
    openapiFields.add("aiaOcspServers");
    openapiFields.add("caOptions");
    openapiFields.add("keyUsage");
    openapiFields.add("nameConstraints");
    openapiFields.add("policyIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X509Parameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X509Parameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X509Parameters is not found in the empty JSON string", X509Parameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X509Parameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X509Parameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalExtensions") != null && !jsonObj.get("additionalExtensions").isJsonNull()) {
        JsonArray jsonArrayadditionalExtensions = jsonObj.getAsJsonArray("additionalExtensions");
        if (jsonArrayadditionalExtensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalExtensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalExtensions").toString()));
          }

          // validate the optional field `additionalExtensions` (array)
          for (int i = 0; i < jsonArrayadditionalExtensions.size(); i++) {
            X509Extension.validateJsonElement(jsonArrayadditionalExtensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aiaOcspServers") != null && !jsonObj.get("aiaOcspServers").isJsonNull() && !jsonObj.get("aiaOcspServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiaOcspServers` to be an array in the JSON string but got `%s`", jsonObj.get("aiaOcspServers").toString()));
      }
      // validate the optional field `caOptions`
      if (jsonObj.get("caOptions") != null && !jsonObj.get("caOptions").isJsonNull()) {
        CaOptions.validateJsonElement(jsonObj.get("caOptions"));
      }
      // validate the optional field `keyUsage`
      if (jsonObj.get("keyUsage") != null && !jsonObj.get("keyUsage").isJsonNull()) {
        KeyUsage.validateJsonElement(jsonObj.get("keyUsage"));
      }
      // validate the optional field `nameConstraints`
      if (jsonObj.get("nameConstraints") != null && !jsonObj.get("nameConstraints").isJsonNull()) {
        NameConstraints.validateJsonElement(jsonObj.get("nameConstraints"));
      }
      if (jsonObj.get("policyIds") != null && !jsonObj.get("policyIds").isJsonNull()) {
        JsonArray jsonArraypolicyIds = jsonObj.getAsJsonArray("policyIds");
        if (jsonArraypolicyIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyIds` to be an array in the JSON string but got `%s`", jsonObj.get("policyIds").toString()));
          }

          // validate the optional field `policyIds` (array)
          for (int i = 0; i < jsonArraypolicyIds.size(); i++) {
            ObjectId.validateJsonElement(jsonArraypolicyIds.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X509Parameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X509Parameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X509Parameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X509Parameters.class));

       return (TypeAdapter<T>) new TypeAdapter<X509Parameters>() {
           @Override
           public void write(JsonWriter out, X509Parameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X509Parameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X509Parameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X509Parameters
   * @throws IOException if the JSON string is invalid with respect to X509Parameters
   */
  public static X509Parameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X509Parameters.class);
  }

  /**
   * Convert an instance of X509Parameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

