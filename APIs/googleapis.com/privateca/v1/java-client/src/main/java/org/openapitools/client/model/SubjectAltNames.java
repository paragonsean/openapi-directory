/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.X509Extension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \&quot;common name\&quot; in the distinguished name).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubjectAltNames {
  public static final String SERIALIZED_NAME_CUSTOM_SANS = "customSans";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SANS)
  private List<X509Extension> customSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_NAMES = "dnsNames";
  @SerializedName(SERIALIZED_NAME_DNS_NAMES)
  private List<String> dnsNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_ADDRESSES = "emailAddresses";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESSES)
  private List<String> emailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ipAddresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<String> ipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_URIS = "uris";
  @SerializedName(SERIALIZED_NAME_URIS)
  private List<String> uris = new ArrayList<>();

  public SubjectAltNames() {
  }

  public SubjectAltNames customSans(List<X509Extension> customSans) {
    this.customSans = customSans;
    return this;
  }

  public SubjectAltNames addCustomSansItem(X509Extension customSansItem) {
    if (this.customSans == null) {
      this.customSans = new ArrayList<>();
    }
    this.customSans.add(customSansItem);
    return this;
  }

  /**
   * Contains additional subject alternative name values. For each custom_san, the &#x60;value&#x60; field must contain an ASN.1 encoded UTF8String.
   * @return customSans
   */
  @javax.annotation.Nullable
  public List<X509Extension> getCustomSans() {
    return customSans;
  }

  public void setCustomSans(List<X509Extension> customSans) {
    this.customSans = customSans;
  }


  public SubjectAltNames dnsNames(List<String> dnsNames) {
    this.dnsNames = dnsNames;
    return this;
  }

  public SubjectAltNames addDnsNamesItem(String dnsNamesItem) {
    if (this.dnsNames == null) {
      this.dnsNames = new ArrayList<>();
    }
    this.dnsNames.add(dnsNamesItem);
    return this;
  }

  /**
   * Contains only valid, fully-qualified host names.
   * @return dnsNames
   */
  @javax.annotation.Nullable
  public List<String> getDnsNames() {
    return dnsNames;
  }

  public void setDnsNames(List<String> dnsNames) {
    this.dnsNames = dnsNames;
  }


  public SubjectAltNames emailAddresses(List<String> emailAddresses) {
    this.emailAddresses = emailAddresses;
    return this;
  }

  public SubjectAltNames addEmailAddressesItem(String emailAddressesItem) {
    if (this.emailAddresses == null) {
      this.emailAddresses = new ArrayList<>();
    }
    this.emailAddresses.add(emailAddressesItem);
    return this;
  }

  /**
   * Contains only valid RFC 2822 E-mail addresses.
   * @return emailAddresses
   */
  @javax.annotation.Nullable
  public List<String> getEmailAddresses() {
    return emailAddresses;
  }

  public void setEmailAddresses(List<String> emailAddresses) {
    this.emailAddresses = emailAddresses;
  }


  public SubjectAltNames ipAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public SubjectAltNames addIpAddressesItem(String ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

  /**
   * Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
   * @return ipAddresses
   */
  @javax.annotation.Nullable
  public List<String> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public SubjectAltNames uris(List<String> uris) {
    this.uris = uris;
    return this;
  }

  public SubjectAltNames addUrisItem(String urisItem) {
    if (this.uris == null) {
      this.uris = new ArrayList<>();
    }
    this.uris.add(urisItem);
    return this;
  }

  /**
   * Contains only valid RFC 3986 URIs.
   * @return uris
   */
  @javax.annotation.Nullable
  public List<String> getUris() {
    return uris;
  }

  public void setUris(List<String> uris) {
    this.uris = uris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectAltNames subjectAltNames = (SubjectAltNames) o;
    return Objects.equals(this.customSans, subjectAltNames.customSans) &&
        Objects.equals(this.dnsNames, subjectAltNames.dnsNames) &&
        Objects.equals(this.emailAddresses, subjectAltNames.emailAddresses) &&
        Objects.equals(this.ipAddresses, subjectAltNames.ipAddresses) &&
        Objects.equals(this.uris, subjectAltNames.uris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customSans, dnsNames, emailAddresses, ipAddresses, uris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectAltNames {\n");
    sb.append("    customSans: ").append(toIndentedString(customSans)).append("\n");
    sb.append("    dnsNames: ").append(toIndentedString(dnsNames)).append("\n");
    sb.append("    emailAddresses: ").append(toIndentedString(emailAddresses)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    uris: ").append(toIndentedString(uris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customSans");
    openapiFields.add("dnsNames");
    openapiFields.add("emailAddresses");
    openapiFields.add("ipAddresses");
    openapiFields.add("uris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubjectAltNames
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubjectAltNames.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubjectAltNames is not found in the empty JSON string", SubjectAltNames.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubjectAltNames.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubjectAltNames` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customSans") != null && !jsonObj.get("customSans").isJsonNull()) {
        JsonArray jsonArraycustomSans = jsonObj.getAsJsonArray("customSans");
        if (jsonArraycustomSans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customSans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customSans` to be an array in the JSON string but got `%s`", jsonObj.get("customSans").toString()));
          }

          // validate the optional field `customSans` (array)
          for (int i = 0; i < jsonArraycustomSans.size(); i++) {
            X509Extension.validateJsonElement(jsonArraycustomSans.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsNames") != null && !jsonObj.get("dnsNames").isJsonNull() && !jsonObj.get("dnsNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsNames` to be an array in the JSON string but got `%s`", jsonObj.get("dnsNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddresses") != null && !jsonObj.get("emailAddresses").isJsonNull() && !jsonObj.get("emailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipAddresses") != null && !jsonObj.get("ipAddresses").isJsonNull() && !jsonObj.get("ipAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipAddresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uris") != null && !jsonObj.get("uris").isJsonNull() && !jsonObj.get("uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uris` to be an array in the JSON string but got `%s`", jsonObj.get("uris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubjectAltNames.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubjectAltNames' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubjectAltNames> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubjectAltNames.class));

       return (TypeAdapter<T>) new TypeAdapter<SubjectAltNames>() {
           @Override
           public void write(JsonWriter out, SubjectAltNames value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubjectAltNames read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubjectAltNames given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubjectAltNames
   * @throws IOException if the JSON string is invalid with respect to SubjectAltNames
   */
  public static SubjectAltNames fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubjectAltNames.class);
  }

  /**
   * Convert an instance of SubjectAltNames to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

