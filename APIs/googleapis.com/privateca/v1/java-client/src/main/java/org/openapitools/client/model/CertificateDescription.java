/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateFingerprint;
import org.openapitools.client.model.KeyId;
import org.openapitools.client.model.PublicKey;
import org.openapitools.client.model.SubjectDescription;
import org.openapitools.client.model.X509Parameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateDescription {
  public static final String SERIALIZED_NAME_AIA_ISSUING_CERTIFICATE_URLS = "aiaIssuingCertificateUrls";
  @SerializedName(SERIALIZED_NAME_AIA_ISSUING_CERTIFICATE_URLS)
  private List<String> aiaIssuingCertificateUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORITY_KEY_ID = "authorityKeyId";
  @SerializedName(SERIALIZED_NAME_AUTHORITY_KEY_ID)
  private KeyId authorityKeyId;

  public static final String SERIALIZED_NAME_CERT_FINGERPRINT = "certFingerprint";
  @SerializedName(SERIALIZED_NAME_CERT_FINGERPRINT)
  private CertificateFingerprint certFingerprint;

  public static final String SERIALIZED_NAME_CRL_DISTRIBUTION_POINTS = "crlDistributionPoints";
  @SerializedName(SERIALIZED_NAME_CRL_DISTRIBUTION_POINTS)
  private List<String> crlDistributionPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private PublicKey publicKey;

  public static final String SERIALIZED_NAME_SUBJECT_DESCRIPTION = "subjectDescription";
  @SerializedName(SERIALIZED_NAME_SUBJECT_DESCRIPTION)
  private SubjectDescription subjectDescription;

  public static final String SERIALIZED_NAME_SUBJECT_KEY_ID = "subjectKeyId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY_ID)
  private KeyId subjectKeyId;

  public static final String SERIALIZED_NAME_X509_DESCRIPTION = "x509Description";
  @SerializedName(SERIALIZED_NAME_X509_DESCRIPTION)
  private X509Parameters x509Description;

  public CertificateDescription() {
  }

  public CertificateDescription aiaIssuingCertificateUrls(List<String> aiaIssuingCertificateUrls) {
    this.aiaIssuingCertificateUrls = aiaIssuingCertificateUrls;
    return this;
  }

  public CertificateDescription addAiaIssuingCertificateUrlsItem(String aiaIssuingCertificateUrlsItem) {
    if (this.aiaIssuingCertificateUrls == null) {
      this.aiaIssuingCertificateUrls = new ArrayList<>();
    }
    this.aiaIssuingCertificateUrls.add(aiaIssuingCertificateUrlsItem);
    return this;
  }

  /**
   * Describes lists of issuer CA certificate URLs that appear in the \&quot;Authority Information Access\&quot; extension in the certificate.
   * @return aiaIssuingCertificateUrls
   */
  @javax.annotation.Nullable
  public List<String> getAiaIssuingCertificateUrls() {
    return aiaIssuingCertificateUrls;
  }

  public void setAiaIssuingCertificateUrls(List<String> aiaIssuingCertificateUrls) {
    this.aiaIssuingCertificateUrls = aiaIssuingCertificateUrls;
  }


  public CertificateDescription authorityKeyId(KeyId authorityKeyId) {
    this.authorityKeyId = authorityKeyId;
    return this;
  }

  /**
   * Get authorityKeyId
   * @return authorityKeyId
   */
  @javax.annotation.Nullable
  public KeyId getAuthorityKeyId() {
    return authorityKeyId;
  }

  public void setAuthorityKeyId(KeyId authorityKeyId) {
    this.authorityKeyId = authorityKeyId;
  }


  public CertificateDescription certFingerprint(CertificateFingerprint certFingerprint) {
    this.certFingerprint = certFingerprint;
    return this;
  }

  /**
   * Get certFingerprint
   * @return certFingerprint
   */
  @javax.annotation.Nullable
  public CertificateFingerprint getCertFingerprint() {
    return certFingerprint;
  }

  public void setCertFingerprint(CertificateFingerprint certFingerprint) {
    this.certFingerprint = certFingerprint;
  }


  public CertificateDescription crlDistributionPoints(List<String> crlDistributionPoints) {
    this.crlDistributionPoints = crlDistributionPoints;
    return this;
  }

  public CertificateDescription addCrlDistributionPointsItem(String crlDistributionPointsItem) {
    if (this.crlDistributionPoints == null) {
      this.crlDistributionPoints = new ArrayList<>();
    }
    this.crlDistributionPoints.add(crlDistributionPointsItem);
    return this;
  }

  /**
   * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
   * @return crlDistributionPoints
   */
  @javax.annotation.Nullable
  public List<String> getCrlDistributionPoints() {
    return crlDistributionPoints;
  }

  public void setCrlDistributionPoints(List<String> crlDistributionPoints) {
    this.crlDistributionPoints = crlDistributionPoints;
  }


  public CertificateDescription publicKey(PublicKey publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public PublicKey getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(PublicKey publicKey) {
    this.publicKey = publicKey;
  }


  public CertificateDescription subjectDescription(SubjectDescription subjectDescription) {
    this.subjectDescription = subjectDescription;
    return this;
  }

  /**
   * Get subjectDescription
   * @return subjectDescription
   */
  @javax.annotation.Nullable
  public SubjectDescription getSubjectDescription() {
    return subjectDescription;
  }

  public void setSubjectDescription(SubjectDescription subjectDescription) {
    this.subjectDescription = subjectDescription;
  }


  public CertificateDescription subjectKeyId(KeyId subjectKeyId) {
    this.subjectKeyId = subjectKeyId;
    return this;
  }

  /**
   * Get subjectKeyId
   * @return subjectKeyId
   */
  @javax.annotation.Nullable
  public KeyId getSubjectKeyId() {
    return subjectKeyId;
  }

  public void setSubjectKeyId(KeyId subjectKeyId) {
    this.subjectKeyId = subjectKeyId;
  }


  public CertificateDescription x509Description(X509Parameters x509Description) {
    this.x509Description = x509Description;
    return this;
  }

  /**
   * Get x509Description
   * @return x509Description
   */
  @javax.annotation.Nullable
  public X509Parameters getX509Description() {
    return x509Description;
  }

  public void setX509Description(X509Parameters x509Description) {
    this.x509Description = x509Description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateDescription certificateDescription = (CertificateDescription) o;
    return Objects.equals(this.aiaIssuingCertificateUrls, certificateDescription.aiaIssuingCertificateUrls) &&
        Objects.equals(this.authorityKeyId, certificateDescription.authorityKeyId) &&
        Objects.equals(this.certFingerprint, certificateDescription.certFingerprint) &&
        Objects.equals(this.crlDistributionPoints, certificateDescription.crlDistributionPoints) &&
        Objects.equals(this.publicKey, certificateDescription.publicKey) &&
        Objects.equals(this.subjectDescription, certificateDescription.subjectDescription) &&
        Objects.equals(this.subjectKeyId, certificateDescription.subjectKeyId) &&
        Objects.equals(this.x509Description, certificateDescription.x509Description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiaIssuingCertificateUrls, authorityKeyId, certFingerprint, crlDistributionPoints, publicKey, subjectDescription, subjectKeyId, x509Description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateDescription {\n");
    sb.append("    aiaIssuingCertificateUrls: ").append(toIndentedString(aiaIssuingCertificateUrls)).append("\n");
    sb.append("    authorityKeyId: ").append(toIndentedString(authorityKeyId)).append("\n");
    sb.append("    certFingerprint: ").append(toIndentedString(certFingerprint)).append("\n");
    sb.append("    crlDistributionPoints: ").append(toIndentedString(crlDistributionPoints)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    subjectDescription: ").append(toIndentedString(subjectDescription)).append("\n");
    sb.append("    subjectKeyId: ").append(toIndentedString(subjectKeyId)).append("\n");
    sb.append("    x509Description: ").append(toIndentedString(x509Description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aiaIssuingCertificateUrls");
    openapiFields.add("authorityKeyId");
    openapiFields.add("certFingerprint");
    openapiFields.add("crlDistributionPoints");
    openapiFields.add("publicKey");
    openapiFields.add("subjectDescription");
    openapiFields.add("subjectKeyId");
    openapiFields.add("x509Description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateDescription is not found in the empty JSON string", CertificateDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("aiaIssuingCertificateUrls") != null && !jsonObj.get("aiaIssuingCertificateUrls").isJsonNull() && !jsonObj.get("aiaIssuingCertificateUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiaIssuingCertificateUrls` to be an array in the JSON string but got `%s`", jsonObj.get("aiaIssuingCertificateUrls").toString()));
      }
      // validate the optional field `authorityKeyId`
      if (jsonObj.get("authorityKeyId") != null && !jsonObj.get("authorityKeyId").isJsonNull()) {
        KeyId.validateJsonElement(jsonObj.get("authorityKeyId"));
      }
      // validate the optional field `certFingerprint`
      if (jsonObj.get("certFingerprint") != null && !jsonObj.get("certFingerprint").isJsonNull()) {
        CertificateFingerprint.validateJsonElement(jsonObj.get("certFingerprint"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("crlDistributionPoints") != null && !jsonObj.get("crlDistributionPoints").isJsonNull() && !jsonObj.get("crlDistributionPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `crlDistributionPoints` to be an array in the JSON string but got `%s`", jsonObj.get("crlDistributionPoints").toString()));
      }
      // validate the optional field `publicKey`
      if (jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) {
        PublicKey.validateJsonElement(jsonObj.get("publicKey"));
      }
      // validate the optional field `subjectDescription`
      if (jsonObj.get("subjectDescription") != null && !jsonObj.get("subjectDescription").isJsonNull()) {
        SubjectDescription.validateJsonElement(jsonObj.get("subjectDescription"));
      }
      // validate the optional field `subjectKeyId`
      if (jsonObj.get("subjectKeyId") != null && !jsonObj.get("subjectKeyId").isJsonNull()) {
        KeyId.validateJsonElement(jsonObj.get("subjectKeyId"));
      }
      // validate the optional field `x509Description`
      if (jsonObj.get("x509Description") != null && !jsonObj.get("x509Description").isJsonNull()) {
        X509Parameters.validateJsonElement(jsonObj.get("x509Description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateDescription>() {
           @Override
           public void write(JsonWriter out, CertificateDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateDescription
   * @throws IOException if the JSON string is invalid with respect to CertificateDescription
   */
  public static CertificateDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateDescription.class);
  }

  /**
   * Convert an instance of CertificateDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

