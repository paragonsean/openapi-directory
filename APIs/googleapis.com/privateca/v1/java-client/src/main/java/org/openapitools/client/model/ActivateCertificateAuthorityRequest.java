/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubordinateConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for CertificateAuthorityService.ActivateCertificateAuthority.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivateCertificateAuthorityRequest {
  public static final String SERIALIZED_NAME_PEM_CA_CERTIFICATE = "pemCaCertificate";
  @SerializedName(SERIALIZED_NAME_PEM_CA_CERTIFICATE)
  private String pemCaCertificate;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SUBORDINATE_CONFIG = "subordinateConfig";
  @SerializedName(SERIALIZED_NAME_SUBORDINATE_CONFIG)
  private SubordinateConfig subordinateConfig;

  public ActivateCertificateAuthorityRequest() {
  }

  public ActivateCertificateAuthorityRequest pemCaCertificate(String pemCaCertificate) {
    this.pemCaCertificate = pemCaCertificate;
    return this;
  }

  /**
   * Required. The signed CA certificate issued from FetchCertificateAuthorityCsrResponse.pem_csr.
   * @return pemCaCertificate
   */
  @javax.annotation.Nullable
  public String getPemCaCertificate() {
    return pemCaCertificate;
  }

  public void setPemCaCertificate(String pemCaCertificate) {
    this.pemCaCertificate = pemCaCertificate;
  }


  public ActivateCertificateAuthorityRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public ActivateCertificateAuthorityRequest subordinateConfig(SubordinateConfig subordinateConfig) {
    this.subordinateConfig = subordinateConfig;
    return this;
  }

  /**
   * Get subordinateConfig
   * @return subordinateConfig
   */
  @javax.annotation.Nullable
  public SubordinateConfig getSubordinateConfig() {
    return subordinateConfig;
  }

  public void setSubordinateConfig(SubordinateConfig subordinateConfig) {
    this.subordinateConfig = subordinateConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivateCertificateAuthorityRequest activateCertificateAuthorityRequest = (ActivateCertificateAuthorityRequest) o;
    return Objects.equals(this.pemCaCertificate, activateCertificateAuthorityRequest.pemCaCertificate) &&
        Objects.equals(this.requestId, activateCertificateAuthorityRequest.requestId) &&
        Objects.equals(this.subordinateConfig, activateCertificateAuthorityRequest.subordinateConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pemCaCertificate, requestId, subordinateConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivateCertificateAuthorityRequest {\n");
    sb.append("    pemCaCertificate: ").append(toIndentedString(pemCaCertificate)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    subordinateConfig: ").append(toIndentedString(subordinateConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pemCaCertificate");
    openapiFields.add("requestId");
    openapiFields.add("subordinateConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivateCertificateAuthorityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivateCertificateAuthorityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivateCertificateAuthorityRequest is not found in the empty JSON string", ActivateCertificateAuthorityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivateCertificateAuthorityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivateCertificateAuthorityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pemCaCertificate") != null && !jsonObj.get("pemCaCertificate").isJsonNull()) && !jsonObj.get("pemCaCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pemCaCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pemCaCertificate").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `subordinateConfig`
      if (jsonObj.get("subordinateConfig") != null && !jsonObj.get("subordinateConfig").isJsonNull()) {
        SubordinateConfig.validateJsonElement(jsonObj.get("subordinateConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivateCertificateAuthorityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivateCertificateAuthorityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivateCertificateAuthorityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivateCertificateAuthorityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivateCertificateAuthorityRequest>() {
           @Override
           public void write(JsonWriter out, ActivateCertificateAuthorityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivateCertificateAuthorityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivateCertificateAuthorityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivateCertificateAuthorityRequest
   * @throws IOException if the JSON string is invalid with respect to ActivateCertificateAuthorityRequest
   */
  public static ActivateCertificateAuthorityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivateCertificateAuthorityRequest.class);
  }

  /**
   * Convert an instance of ActivateCertificateAuthorityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

