/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a revoked Certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RevokedCertificate {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_HEX_SERIAL_NUMBER = "hexSerialNumber";
  @SerializedName(SERIALIZED_NAME_HEX_SERIAL_NUMBER)
  private String hexSerialNumber;

  /**
   * The reason the Certificate was revoked.
   */
  @JsonAdapter(RevocationReasonEnum.Adapter.class)
  public enum RevocationReasonEnum {
    REVOCATION_REASON_UNSPECIFIED("REVOCATION_REASON_UNSPECIFIED"),
    
    KEY_COMPROMISE("KEY_COMPROMISE"),
    
    CERTIFICATE_AUTHORITY_COMPROMISE("CERTIFICATE_AUTHORITY_COMPROMISE"),
    
    AFFILIATION_CHANGED("AFFILIATION_CHANGED"),
    
    SUPERSEDED("SUPERSEDED"),
    
    CESSATION_OF_OPERATION("CESSATION_OF_OPERATION"),
    
    CERTIFICATE_HOLD("CERTIFICATE_HOLD"),
    
    PRIVILEGE_WITHDRAWN("PRIVILEGE_WITHDRAWN"),
    
    ATTRIBUTE_AUTHORITY_COMPROMISE("ATTRIBUTE_AUTHORITY_COMPROMISE");

    private String value;

    RevocationReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevocationReasonEnum fromValue(String value) {
      for (RevocationReasonEnum b : RevocationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevocationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevocationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevocationReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RevocationReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RevocationReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVOCATION_REASON = "revocationReason";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REASON)
  private RevocationReasonEnum revocationReason;

  public RevokedCertificate() {
  }

  public RevokedCertificate certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * The resource name for the Certificate in the format &#x60;projects/_*_/locations/_*_/caPools/_*_/certificates/_*&#x60;.
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public RevokedCertificate hexSerialNumber(String hexSerialNumber) {
    this.hexSerialNumber = hexSerialNumber;
    return this;
  }

  /**
   * The serial number of the Certificate.
   * @return hexSerialNumber
   */
  @javax.annotation.Nullable
  public String getHexSerialNumber() {
    return hexSerialNumber;
  }

  public void setHexSerialNumber(String hexSerialNumber) {
    this.hexSerialNumber = hexSerialNumber;
  }


  public RevokedCertificate revocationReason(RevocationReasonEnum revocationReason) {
    this.revocationReason = revocationReason;
    return this;
  }

  /**
   * The reason the Certificate was revoked.
   * @return revocationReason
   */
  @javax.annotation.Nullable
  public RevocationReasonEnum getRevocationReason() {
    return revocationReason;
  }

  public void setRevocationReason(RevocationReasonEnum revocationReason) {
    this.revocationReason = revocationReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RevokedCertificate revokedCertificate = (RevokedCertificate) o;
    return Objects.equals(this.certificate, revokedCertificate.certificate) &&
        Objects.equals(this.hexSerialNumber, revokedCertificate.hexSerialNumber) &&
        Objects.equals(this.revocationReason, revokedCertificate.revocationReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, hexSerialNumber, revocationReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RevokedCertificate {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    hexSerialNumber: ").append(toIndentedString(hexSerialNumber)).append("\n");
    sb.append("    revocationReason: ").append(toIndentedString(revocationReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("hexSerialNumber");
    openapiFields.add("revocationReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RevokedCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RevokedCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RevokedCertificate is not found in the empty JSON string", RevokedCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RevokedCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RevokedCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("hexSerialNumber") != null && !jsonObj.get("hexSerialNumber").isJsonNull()) && !jsonObj.get("hexSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexSerialNumber").toString()));
      }
      if ((jsonObj.get("revocationReason") != null && !jsonObj.get("revocationReason").isJsonNull()) && !jsonObj.get("revocationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocationReason").toString()));
      }
      // validate the optional field `revocationReason`
      if (jsonObj.get("revocationReason") != null && !jsonObj.get("revocationReason").isJsonNull()) {
        RevocationReasonEnum.validateJsonElement(jsonObj.get("revocationReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RevokedCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RevokedCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RevokedCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RevokedCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<RevokedCertificate>() {
           @Override
           public void write(JsonWriter out, RevokedCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RevokedCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RevokedCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RevokedCertificate
   * @throws IOException if the JSON string is invalid with respect to RevokedCertificate
   */
  public static RevokedCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RevokedCertificate.class);
  }

  /**
   * Convert an instance of RevokedCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

