/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllowedKeyType;
import org.openapitools.client.model.CertificateExtensionConstraints;
import org.openapitools.client.model.CertificateIdentityConstraints;
import org.openapitools.client.model.IssuanceModes;
import org.openapitools.client.model.X509Parameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines controls over all certificate issuance within a CaPool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssuancePolicy {
  public static final String SERIALIZED_NAME_ALLOWED_ISSUANCE_MODES = "allowedIssuanceModes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ISSUANCE_MODES)
  private IssuanceModes allowedIssuanceModes;

  public static final String SERIALIZED_NAME_ALLOWED_KEY_TYPES = "allowedKeyTypes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_KEY_TYPES)
  private List<AllowedKeyType> allowedKeyTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASELINE_VALUES = "baselineValues";
  @SerializedName(SERIALIZED_NAME_BASELINE_VALUES)
  private X509Parameters baselineValues;

  public static final String SERIALIZED_NAME_IDENTITY_CONSTRAINTS = "identityConstraints";
  @SerializedName(SERIALIZED_NAME_IDENTITY_CONSTRAINTS)
  private CertificateIdentityConstraints identityConstraints;

  public static final String SERIALIZED_NAME_MAXIMUM_LIFETIME = "maximumLifetime";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_LIFETIME)
  private String maximumLifetime;

  public static final String SERIALIZED_NAME_PASSTHROUGH_EXTENSIONS = "passthroughExtensions";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_EXTENSIONS)
  private CertificateExtensionConstraints passthroughExtensions;

  public IssuancePolicy() {
  }

  public IssuancePolicy allowedIssuanceModes(IssuanceModes allowedIssuanceModes) {
    this.allowedIssuanceModes = allowedIssuanceModes;
    return this;
  }

  /**
   * Get allowedIssuanceModes
   * @return allowedIssuanceModes
   */
  @javax.annotation.Nullable
  public IssuanceModes getAllowedIssuanceModes() {
    return allowedIssuanceModes;
  }

  public void setAllowedIssuanceModes(IssuanceModes allowedIssuanceModes) {
    this.allowedIssuanceModes = allowedIssuanceModes;
  }


  public IssuancePolicy allowedKeyTypes(List<AllowedKeyType> allowedKeyTypes) {
    this.allowedKeyTypes = allowedKeyTypes;
    return this;
  }

  public IssuancePolicy addAllowedKeyTypesItem(AllowedKeyType allowedKeyTypesItem) {
    if (this.allowedKeyTypes == null) {
      this.allowedKeyTypes = new ArrayList<>();
    }
    this.allowedKeyTypes.add(allowedKeyTypesItem);
    return this;
  }

  /**
   * Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
   * @return allowedKeyTypes
   */
  @javax.annotation.Nullable
  public List<AllowedKeyType> getAllowedKeyTypes() {
    return allowedKeyTypes;
  }

  public void setAllowedKeyTypes(List<AllowedKeyType> allowedKeyTypes) {
    this.allowedKeyTypes = allowedKeyTypes;
  }


  public IssuancePolicy baselineValues(X509Parameters baselineValues) {
    this.baselineValues = baselineValues;
    return this;
  }

  /**
   * Get baselineValues
   * @return baselineValues
   */
  @javax.annotation.Nullable
  public X509Parameters getBaselineValues() {
    return baselineValues;
  }

  public void setBaselineValues(X509Parameters baselineValues) {
    this.baselineValues = baselineValues;
  }


  public IssuancePolicy identityConstraints(CertificateIdentityConstraints identityConstraints) {
    this.identityConstraints = identityConstraints;
    return this;
  }

  /**
   * Get identityConstraints
   * @return identityConstraints
   */
  @javax.annotation.Nullable
  public CertificateIdentityConstraints getIdentityConstraints() {
    return identityConstraints;
  }

  public void setIdentityConstraints(CertificateIdentityConstraints identityConstraints) {
    this.identityConstraints = identityConstraints;
  }


  public IssuancePolicy maximumLifetime(String maximumLifetime) {
    this.maximumLifetime = maximumLifetime;
    return this;
  }

  /**
   * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
   * @return maximumLifetime
   */
  @javax.annotation.Nullable
  public String getMaximumLifetime() {
    return maximumLifetime;
  }

  public void setMaximumLifetime(String maximumLifetime) {
    this.maximumLifetime = maximumLifetime;
  }


  public IssuancePolicy passthroughExtensions(CertificateExtensionConstraints passthroughExtensions) {
    this.passthroughExtensions = passthroughExtensions;
    return this;
  }

  /**
   * Get passthroughExtensions
   * @return passthroughExtensions
   */
  @javax.annotation.Nullable
  public CertificateExtensionConstraints getPassthroughExtensions() {
    return passthroughExtensions;
  }

  public void setPassthroughExtensions(CertificateExtensionConstraints passthroughExtensions) {
    this.passthroughExtensions = passthroughExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuancePolicy issuancePolicy = (IssuancePolicy) o;
    return Objects.equals(this.allowedIssuanceModes, issuancePolicy.allowedIssuanceModes) &&
        Objects.equals(this.allowedKeyTypes, issuancePolicy.allowedKeyTypes) &&
        Objects.equals(this.baselineValues, issuancePolicy.baselineValues) &&
        Objects.equals(this.identityConstraints, issuancePolicy.identityConstraints) &&
        Objects.equals(this.maximumLifetime, issuancePolicy.maximumLifetime) &&
        Objects.equals(this.passthroughExtensions, issuancePolicy.passthroughExtensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedIssuanceModes, allowedKeyTypes, baselineValues, identityConstraints, maximumLifetime, passthroughExtensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuancePolicy {\n");
    sb.append("    allowedIssuanceModes: ").append(toIndentedString(allowedIssuanceModes)).append("\n");
    sb.append("    allowedKeyTypes: ").append(toIndentedString(allowedKeyTypes)).append("\n");
    sb.append("    baselineValues: ").append(toIndentedString(baselineValues)).append("\n");
    sb.append("    identityConstraints: ").append(toIndentedString(identityConstraints)).append("\n");
    sb.append("    maximumLifetime: ").append(toIndentedString(maximumLifetime)).append("\n");
    sb.append("    passthroughExtensions: ").append(toIndentedString(passthroughExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedIssuanceModes");
    openapiFields.add("allowedKeyTypes");
    openapiFields.add("baselineValues");
    openapiFields.add("identityConstraints");
    openapiFields.add("maximumLifetime");
    openapiFields.add("passthroughExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssuancePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssuancePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuancePolicy is not found in the empty JSON string", IssuancePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssuancePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuancePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowedIssuanceModes`
      if (jsonObj.get("allowedIssuanceModes") != null && !jsonObj.get("allowedIssuanceModes").isJsonNull()) {
        IssuanceModes.validateJsonElement(jsonObj.get("allowedIssuanceModes"));
      }
      if (jsonObj.get("allowedKeyTypes") != null && !jsonObj.get("allowedKeyTypes").isJsonNull()) {
        JsonArray jsonArrayallowedKeyTypes = jsonObj.getAsJsonArray("allowedKeyTypes");
        if (jsonArrayallowedKeyTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedKeyTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedKeyTypes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedKeyTypes").toString()));
          }

          // validate the optional field `allowedKeyTypes` (array)
          for (int i = 0; i < jsonArrayallowedKeyTypes.size(); i++) {
            AllowedKeyType.validateJsonElement(jsonArrayallowedKeyTypes.get(i));
          };
        }
      }
      // validate the optional field `baselineValues`
      if (jsonObj.get("baselineValues") != null && !jsonObj.get("baselineValues").isJsonNull()) {
        X509Parameters.validateJsonElement(jsonObj.get("baselineValues"));
      }
      // validate the optional field `identityConstraints`
      if (jsonObj.get("identityConstraints") != null && !jsonObj.get("identityConstraints").isJsonNull()) {
        CertificateIdentityConstraints.validateJsonElement(jsonObj.get("identityConstraints"));
      }
      if ((jsonObj.get("maximumLifetime") != null && !jsonObj.get("maximumLifetime").isJsonNull()) && !jsonObj.get("maximumLifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumLifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumLifetime").toString()));
      }
      // validate the optional field `passthroughExtensions`
      if (jsonObj.get("passthroughExtensions") != null && !jsonObj.get("passthroughExtensions").isJsonNull()) {
        CertificateExtensionConstraints.validateJsonElement(jsonObj.get("passthroughExtensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuancePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuancePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuancePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuancePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuancePolicy>() {
           @Override
           public void write(JsonWriter out, IssuancePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuancePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssuancePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssuancePolicy
   * @throws IOException if the JSON string is invalid with respect to IssuancePolicy
   */
  public static IssuancePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuancePolicy.class);
  }

  /**
   * Convert an instance of IssuancePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

