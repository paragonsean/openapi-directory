/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.IssuancePolicy;
import org.openapitools.client.model.PublishingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaPool {
  public static final String SERIALIZED_NAME_ISSUANCE_POLICY = "issuancePolicy";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_POLICY)
  private IssuancePolicy issuancePolicy;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHING_OPTIONS = "publishingOptions";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_OPTIONS)
  private PublishingOptions publishingOptions;

  /**
   * Required. Immutable. The Tier of this CaPool.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    ENTERPRISE("ENTERPRISE"),
    
    DEVOPS("DEVOPS");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public CaPool() {
  }

  public CaPool(
     String name
  ) {
    this();
    this.name = name;
  }

  public CaPool issuancePolicy(IssuancePolicy issuancePolicy) {
    this.issuancePolicy = issuancePolicy;
    return this;
  }

  /**
   * Get issuancePolicy
   * @return issuancePolicy
   */
  @javax.annotation.Nullable
  public IssuancePolicy getIssuancePolicy() {
    return issuancePolicy;
  }

  public void setIssuancePolicy(IssuancePolicy issuancePolicy) {
    this.issuancePolicy = issuancePolicy;
  }


  public CaPool labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CaPool putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels with user-defined metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The resource name for this CaPool in the format &#x60;projects/_*_/locations/_*_/caPools/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public CaPool publishingOptions(PublishingOptions publishingOptions) {
    this.publishingOptions = publishingOptions;
    return this;
  }

  /**
   * Get publishingOptions
   * @return publishingOptions
   */
  @javax.annotation.Nullable
  public PublishingOptions getPublishingOptions() {
    return publishingOptions;
  }

  public void setPublishingOptions(PublishingOptions publishingOptions) {
    this.publishingOptions = publishingOptions;
  }


  public CaPool tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Required. Immutable. The Tier of this CaPool.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaPool caPool = (CaPool) o;
    return Objects.equals(this.issuancePolicy, caPool.issuancePolicy) &&
        Objects.equals(this.labels, caPool.labels) &&
        Objects.equals(this.name, caPool.name) &&
        Objects.equals(this.publishingOptions, caPool.publishingOptions) &&
        Objects.equals(this.tier, caPool.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuancePolicy, labels, name, publishingOptions, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaPool {\n");
    sb.append("    issuancePolicy: ").append(toIndentedString(issuancePolicy)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publishingOptions: ").append(toIndentedString(publishingOptions)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuancePolicy");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("publishingOptions");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaPool is not found in the empty JSON string", CaPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `issuancePolicy`
      if (jsonObj.get("issuancePolicy") != null && !jsonObj.get("issuancePolicy").isJsonNull()) {
        IssuancePolicy.validateJsonElement(jsonObj.get("issuancePolicy"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `publishingOptions`
      if (jsonObj.get("publishingOptions") != null && !jsonObj.get("publishingOptions").isJsonNull()) {
        PublishingOptions.validateJsonElement(jsonObj.get("publishingOptions"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaPool.class));

       return (TypeAdapter<T>) new TypeAdapter<CaPool>() {
           @Override
           public void write(JsonWriter out, CaPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaPool
   * @throws IOException if the JSON string is invalid with respect to CaPool
   */
  public static CaPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaPool.class);
  }

  /**
   * Convert an instance of CaPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

