/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a set of X.509 extensions that may be part of some certificate issuance controls.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateExtensionConstraints {
  public static final String SERIALIZED_NAME_ADDITIONAL_EXTENSIONS = "additionalExtensions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXTENSIONS)
  private List<ObjectId> additionalExtensions = new ArrayList<>();

  /**
   * Gets or Sets knownExtensions
   */
  @JsonAdapter(KnownExtensionsEnum.Adapter.class)
  public enum KnownExtensionsEnum {
    KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED("KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED"),
    
    BASE_KEY_USAGE("BASE_KEY_USAGE"),
    
    EXTENDED_KEY_USAGE("EXTENDED_KEY_USAGE"),
    
    CA_OPTIONS("CA_OPTIONS"),
    
    POLICY_IDS("POLICY_IDS"),
    
    AIA_OCSP_SERVERS("AIA_OCSP_SERVERS"),
    
    NAME_CONSTRAINTS("NAME_CONSTRAINTS");

    private String value;

    KnownExtensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KnownExtensionsEnum fromValue(String value) {
      for (KnownExtensionsEnum b : KnownExtensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KnownExtensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KnownExtensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KnownExtensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KnownExtensionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KnownExtensionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KNOWN_EXTENSIONS = "knownExtensions";
  @SerializedName(SERIALIZED_NAME_KNOWN_EXTENSIONS)
  private List<KnownExtensionsEnum> knownExtensions = new ArrayList<>();

  public CertificateExtensionConstraints() {
  }

  public CertificateExtensionConstraints additionalExtensions(List<ObjectId> additionalExtensions) {
    this.additionalExtensions = additionalExtensions;
    return this;
  }

  public CertificateExtensionConstraints addAdditionalExtensionsItem(ObjectId additionalExtensionsItem) {
    if (this.additionalExtensions == null) {
      this.additionalExtensions = new ArrayList<>();
    }
    this.additionalExtensions.add(additionalExtensionsItem);
    return this;
  }

  /**
   * Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
   * @return additionalExtensions
   */
  @javax.annotation.Nullable
  public List<ObjectId> getAdditionalExtensions() {
    return additionalExtensions;
  }

  public void setAdditionalExtensions(List<ObjectId> additionalExtensions) {
    this.additionalExtensions = additionalExtensions;
  }


  public CertificateExtensionConstraints knownExtensions(List<KnownExtensionsEnum> knownExtensions) {
    this.knownExtensions = knownExtensions;
    return this;
  }

  public CertificateExtensionConstraints addKnownExtensionsItem(KnownExtensionsEnum knownExtensionsItem) {
    if (this.knownExtensions == null) {
      this.knownExtensions = new ArrayList<>();
    }
    this.knownExtensions.add(knownExtensionsItem);
    return this;
  }

  /**
   * Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
   * @return knownExtensions
   */
  @javax.annotation.Nullable
  public List<KnownExtensionsEnum> getKnownExtensions() {
    return knownExtensions;
  }

  public void setKnownExtensions(List<KnownExtensionsEnum> knownExtensions) {
    this.knownExtensions = knownExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateExtensionConstraints certificateExtensionConstraints = (CertificateExtensionConstraints) o;
    return Objects.equals(this.additionalExtensions, certificateExtensionConstraints.additionalExtensions) &&
        Objects.equals(this.knownExtensions, certificateExtensionConstraints.knownExtensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalExtensions, knownExtensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateExtensionConstraints {\n");
    sb.append("    additionalExtensions: ").append(toIndentedString(additionalExtensions)).append("\n");
    sb.append("    knownExtensions: ").append(toIndentedString(knownExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalExtensions");
    openapiFields.add("knownExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateExtensionConstraints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateExtensionConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateExtensionConstraints is not found in the empty JSON string", CertificateExtensionConstraints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateExtensionConstraints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateExtensionConstraints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalExtensions") != null && !jsonObj.get("additionalExtensions").isJsonNull()) {
        JsonArray jsonArrayadditionalExtensions = jsonObj.getAsJsonArray("additionalExtensions");
        if (jsonArrayadditionalExtensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalExtensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalExtensions").toString()));
          }

          // validate the optional field `additionalExtensions` (array)
          for (int i = 0; i < jsonArrayadditionalExtensions.size(); i++) {
            ObjectId.validateJsonElement(jsonArrayadditionalExtensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("knownExtensions") != null && !jsonObj.get("knownExtensions").isJsonNull() && !jsonObj.get("knownExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("knownExtensions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateExtensionConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateExtensionConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateExtensionConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateExtensionConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateExtensionConstraints>() {
           @Override
           public void write(JsonWriter out, CertificateExtensionConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateExtensionConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateExtensionConstraints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateExtensionConstraints
   * @throws IOException if the JSON string is invalid with respect to CertificateExtensionConstraints
   */
  public static CertificateExtensionConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateExtensionConstraints.class);
  }

  /**
   * Convert an instance of CertificateExtensionConstraints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

