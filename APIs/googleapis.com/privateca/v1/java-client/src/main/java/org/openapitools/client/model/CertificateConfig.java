/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateConfigKeyId;
import org.openapitools.client.model.PublicKey;
import org.openapitools.client.model.SubjectConfig;
import org.openapitools.client.model.X509Parameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateConfig {
  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private PublicKey publicKey;

  public static final String SERIALIZED_NAME_SUBJECT_CONFIG = "subjectConfig";
  @SerializedName(SERIALIZED_NAME_SUBJECT_CONFIG)
  private SubjectConfig subjectConfig;

  public static final String SERIALIZED_NAME_SUBJECT_KEY_ID = "subjectKeyId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY_ID)
  private CertificateConfigKeyId subjectKeyId;

  public static final String SERIALIZED_NAME_X509_CONFIG = "x509Config";
  @SerializedName(SERIALIZED_NAME_X509_CONFIG)
  private X509Parameters x509Config;

  public CertificateConfig() {
  }

  public CertificateConfig publicKey(PublicKey publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public PublicKey getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(PublicKey publicKey) {
    this.publicKey = publicKey;
  }


  public CertificateConfig subjectConfig(SubjectConfig subjectConfig) {
    this.subjectConfig = subjectConfig;
    return this;
  }

  /**
   * Get subjectConfig
   * @return subjectConfig
   */
  @javax.annotation.Nullable
  public SubjectConfig getSubjectConfig() {
    return subjectConfig;
  }

  public void setSubjectConfig(SubjectConfig subjectConfig) {
    this.subjectConfig = subjectConfig;
  }


  public CertificateConfig subjectKeyId(CertificateConfigKeyId subjectKeyId) {
    this.subjectKeyId = subjectKeyId;
    return this;
  }

  /**
   * Get subjectKeyId
   * @return subjectKeyId
   */
  @javax.annotation.Nullable
  public CertificateConfigKeyId getSubjectKeyId() {
    return subjectKeyId;
  }

  public void setSubjectKeyId(CertificateConfigKeyId subjectKeyId) {
    this.subjectKeyId = subjectKeyId;
  }


  public CertificateConfig x509Config(X509Parameters x509Config) {
    this.x509Config = x509Config;
    return this;
  }

  /**
   * Get x509Config
   * @return x509Config
   */
  @javax.annotation.Nullable
  public X509Parameters getX509Config() {
    return x509Config;
  }

  public void setX509Config(X509Parameters x509Config) {
    this.x509Config = x509Config;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateConfig certificateConfig = (CertificateConfig) o;
    return Objects.equals(this.publicKey, certificateConfig.publicKey) &&
        Objects.equals(this.subjectConfig, certificateConfig.subjectConfig) &&
        Objects.equals(this.subjectKeyId, certificateConfig.subjectKeyId) &&
        Objects.equals(this.x509Config, certificateConfig.x509Config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicKey, subjectConfig, subjectKeyId, x509Config);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateConfig {\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    subjectConfig: ").append(toIndentedString(subjectConfig)).append("\n");
    sb.append("    subjectKeyId: ").append(toIndentedString(subjectKeyId)).append("\n");
    sb.append("    x509Config: ").append(toIndentedString(x509Config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publicKey");
    openapiFields.add("subjectConfig");
    openapiFields.add("subjectKeyId");
    openapiFields.add("x509Config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateConfig is not found in the empty JSON string", CertificateConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `publicKey`
      if (jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) {
        PublicKey.validateJsonElement(jsonObj.get("publicKey"));
      }
      // validate the optional field `subjectConfig`
      if (jsonObj.get("subjectConfig") != null && !jsonObj.get("subjectConfig").isJsonNull()) {
        SubjectConfig.validateJsonElement(jsonObj.get("subjectConfig"));
      }
      // validate the optional field `subjectKeyId`
      if (jsonObj.get("subjectKeyId") != null && !jsonObj.get("subjectKeyId").isJsonNull()) {
        CertificateConfigKeyId.validateJsonElement(jsonObj.get("subjectKeyId"));
      }
      // validate the optional field `x509Config`
      if (jsonObj.get("x509Config") != null && !jsonObj.get("x509Config").isJsonNull()) {
        X509Parameters.validateJsonElement(jsonObj.get("x509Config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateConfig>() {
           @Override
           public void write(JsonWriter out, CertificateConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateConfig
   * @throws IOException if the JSON string is invalid with respect to CertificateConfig
   */
  public static CertificateConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateConfig.class);
  }

  /**
   * Convert an instance of CertificateConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

