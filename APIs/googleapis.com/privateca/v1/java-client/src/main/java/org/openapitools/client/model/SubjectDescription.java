/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Subject;
import org.openapitools.client.model.SubjectAltNames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubjectDescription {
  public static final String SERIALIZED_NAME_HEX_SERIAL_NUMBER = "hexSerialNumber";
  @SerializedName(SERIALIZED_NAME_HEX_SERIAL_NUMBER)
  private String hexSerialNumber;

  public static final String SERIALIZED_NAME_LIFETIME = "lifetime";
  @SerializedName(SERIALIZED_NAME_LIFETIME)
  private String lifetime;

  public static final String SERIALIZED_NAME_NOT_AFTER_TIME = "notAfterTime";
  @SerializedName(SERIALIZED_NAME_NOT_AFTER_TIME)
  private String notAfterTime;

  public static final String SERIALIZED_NAME_NOT_BEFORE_TIME = "notBeforeTime";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE_TIME)
  private String notBeforeTime;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private Subject subject;

  public static final String SERIALIZED_NAME_SUBJECT_ALT_NAME = "subjectAltName";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALT_NAME)
  private SubjectAltNames subjectAltName;

  public SubjectDescription() {
  }

  public SubjectDescription hexSerialNumber(String hexSerialNumber) {
    this.hexSerialNumber = hexSerialNumber;
    return this;
  }

  /**
   * The serial number encoded in lowercase hexadecimal.
   * @return hexSerialNumber
   */
  @javax.annotation.Nullable
  public String getHexSerialNumber() {
    return hexSerialNumber;
  }

  public void setHexSerialNumber(String hexSerialNumber) {
    this.hexSerialNumber = hexSerialNumber;
  }


  public SubjectDescription lifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * For convenience, the actual lifetime of an issued certificate.
   * @return lifetime
   */
  @javax.annotation.Nullable
  public String getLifetime() {
    return lifetime;
  }

  public void setLifetime(String lifetime) {
    this.lifetime = lifetime;
  }


  public SubjectDescription notAfterTime(String notAfterTime) {
    this.notAfterTime = notAfterTime;
    return this;
  }

  /**
   * The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to &#39;not_before_time&#39; + &#39;lifetime&#39; - 1 second.
   * @return notAfterTime
   */
  @javax.annotation.Nullable
  public String getNotAfterTime() {
    return notAfterTime;
  }

  public void setNotAfterTime(String notAfterTime) {
    this.notAfterTime = notAfterTime;
  }


  public SubjectDescription notBeforeTime(String notBeforeTime) {
    this.notBeforeTime = notBeforeTime;
    return this;
  }

  /**
   * The time at which the certificate becomes valid.
   * @return notBeforeTime
   */
  @javax.annotation.Nullable
  public String getNotBeforeTime() {
    return notBeforeTime;
  }

  public void setNotBeforeTime(String notBeforeTime) {
    this.notBeforeTime = notBeforeTime;
  }


  public SubjectDescription subject(Subject subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public Subject getSubject() {
    return subject;
  }

  public void setSubject(Subject subject) {
    this.subject = subject;
  }


  public SubjectDescription subjectAltName(SubjectAltNames subjectAltName) {
    this.subjectAltName = subjectAltName;
    return this;
  }

  /**
   * Get subjectAltName
   * @return subjectAltName
   */
  @javax.annotation.Nullable
  public SubjectAltNames getSubjectAltName() {
    return subjectAltName;
  }

  public void setSubjectAltName(SubjectAltNames subjectAltName) {
    this.subjectAltName = subjectAltName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectDescription subjectDescription = (SubjectDescription) o;
    return Objects.equals(this.hexSerialNumber, subjectDescription.hexSerialNumber) &&
        Objects.equals(this.lifetime, subjectDescription.lifetime) &&
        Objects.equals(this.notAfterTime, subjectDescription.notAfterTime) &&
        Objects.equals(this.notBeforeTime, subjectDescription.notBeforeTime) &&
        Objects.equals(this.subject, subjectDescription.subject) &&
        Objects.equals(this.subjectAltName, subjectDescription.subjectAltName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hexSerialNumber, lifetime, notAfterTime, notBeforeTime, subject, subjectAltName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectDescription {\n");
    sb.append("    hexSerialNumber: ").append(toIndentedString(hexSerialNumber)).append("\n");
    sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
    sb.append("    notAfterTime: ").append(toIndentedString(notAfterTime)).append("\n");
    sb.append("    notBeforeTime: ").append(toIndentedString(notBeforeTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectAltName: ").append(toIndentedString(subjectAltName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hexSerialNumber");
    openapiFields.add("lifetime");
    openapiFields.add("notAfterTime");
    openapiFields.add("notBeforeTime");
    openapiFields.add("subject");
    openapiFields.add("subjectAltName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubjectDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubjectDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubjectDescription is not found in the empty JSON string", SubjectDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubjectDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubjectDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hexSerialNumber") != null && !jsonObj.get("hexSerialNumber").isJsonNull()) && !jsonObj.get("hexSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexSerialNumber").toString()));
      }
      if ((jsonObj.get("lifetime") != null && !jsonObj.get("lifetime").isJsonNull()) && !jsonObj.get("lifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifetime").toString()));
      }
      if ((jsonObj.get("notAfterTime") != null && !jsonObj.get("notAfterTime").isJsonNull()) && !jsonObj.get("notAfterTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAfterTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notAfterTime").toString()));
      }
      if ((jsonObj.get("notBeforeTime") != null && !jsonObj.get("notBeforeTime").isJsonNull()) && !jsonObj.get("notBeforeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notBeforeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notBeforeTime").toString()));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        Subject.validateJsonElement(jsonObj.get("subject"));
      }
      // validate the optional field `subjectAltName`
      if (jsonObj.get("subjectAltName") != null && !jsonObj.get("subjectAltName").isJsonNull()) {
        SubjectAltNames.validateJsonElement(jsonObj.get("subjectAltName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubjectDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubjectDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubjectDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubjectDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<SubjectDescription>() {
           @Override
           public void write(JsonWriter out, SubjectDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubjectDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubjectDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubjectDescription
   * @throws IOException if the JSON string is invalid with respect to SubjectDescription
   */
  public static SubjectDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubjectDescription.class);
  }

  /**
   * Convert an instance of SubjectDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

