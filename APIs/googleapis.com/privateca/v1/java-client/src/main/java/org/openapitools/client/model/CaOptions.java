/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes values that are relevant in a CA certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaOptions {
  public static final String SERIALIZED_NAME_IS_CA = "isCa";
  @SerializedName(SERIALIZED_NAME_IS_CA)
  private Boolean isCa;

  public static final String SERIALIZED_NAME_MAX_ISSUER_PATH_LENGTH = "maxIssuerPathLength";
  @SerializedName(SERIALIZED_NAME_MAX_ISSUER_PATH_LENGTH)
  private Integer maxIssuerPathLength;

  public CaOptions() {
  }

  public CaOptions isCa(Boolean isCa) {
    this.isCa = isCa;
    return this;
  }

  /**
   * Optional. Refers to the \&quot;CA\&quot; X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
   * @return isCa
   */
  @javax.annotation.Nullable
  public Boolean getIsCa() {
    return isCa;
  }

  public void setIsCa(Boolean isCa) {
    this.isCa = isCa;
  }


  public CaOptions maxIssuerPathLength(Integer maxIssuerPathLength) {
    this.maxIssuerPathLength = maxIssuerPathLength;
    return this;
  }

  /**
   * Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
   * @return maxIssuerPathLength
   */
  @javax.annotation.Nullable
  public Integer getMaxIssuerPathLength() {
    return maxIssuerPathLength;
  }

  public void setMaxIssuerPathLength(Integer maxIssuerPathLength) {
    this.maxIssuerPathLength = maxIssuerPathLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaOptions caOptions = (CaOptions) o;
    return Objects.equals(this.isCa, caOptions.isCa) &&
        Objects.equals(this.maxIssuerPathLength, caOptions.maxIssuerPathLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isCa, maxIssuerPathLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaOptions {\n");
    sb.append("    isCa: ").append(toIndentedString(isCa)).append("\n");
    sb.append("    maxIssuerPathLength: ").append(toIndentedString(maxIssuerPathLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isCa");
    openapiFields.add("maxIssuerPathLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaOptions is not found in the empty JSON string", CaOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CaOptions>() {
           @Override
           public void write(JsonWriter out, CaOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaOptions
   * @throws IOException if the JSON string is invalid with respect to CaOptions
   */
  public static CaOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaOptions.class);
  }

  /**
   * Convert an instance of CaOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

