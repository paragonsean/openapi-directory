/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedKeyUsageOptions {
  public static final String SERIALIZED_NAME_CLIENT_AUTH = "clientAuth";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTH)
  private Boolean clientAuth;

  public static final String SERIALIZED_NAME_CODE_SIGNING = "codeSigning";
  @SerializedName(SERIALIZED_NAME_CODE_SIGNING)
  private Boolean codeSigning;

  public static final String SERIALIZED_NAME_EMAIL_PROTECTION = "emailProtection";
  @SerializedName(SERIALIZED_NAME_EMAIL_PROTECTION)
  private Boolean emailProtection;

  public static final String SERIALIZED_NAME_OCSP_SIGNING = "ocspSigning";
  @SerializedName(SERIALIZED_NAME_OCSP_SIGNING)
  private Boolean ocspSigning;

  public static final String SERIALIZED_NAME_SERVER_AUTH = "serverAuth";
  @SerializedName(SERIALIZED_NAME_SERVER_AUTH)
  private Boolean serverAuth;

  public static final String SERIALIZED_NAME_TIME_STAMPING = "timeStamping";
  @SerializedName(SERIALIZED_NAME_TIME_STAMPING)
  private Boolean timeStamping;

  public ExtendedKeyUsageOptions() {
  }

  public ExtendedKeyUsageOptions clientAuth(Boolean clientAuth) {
    this.clientAuth = clientAuth;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \&quot;TLS WWW client authentication\&quot;, though regularly used for non-WWW TLS.
   * @return clientAuth
   */
  @javax.annotation.Nullable
  public Boolean getClientAuth() {
    return clientAuth;
  }

  public void setClientAuth(Boolean clientAuth) {
    this.clientAuth = clientAuth;
  }


  public ExtendedKeyUsageOptions codeSigning(Boolean codeSigning) {
    this.codeSigning = codeSigning;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \&quot;Signing of downloadable executable code client authentication\&quot;.
   * @return codeSigning
   */
  @javax.annotation.Nullable
  public Boolean getCodeSigning() {
    return codeSigning;
  }

  public void setCodeSigning(Boolean codeSigning) {
    this.codeSigning = codeSigning;
  }


  public ExtendedKeyUsageOptions emailProtection(Boolean emailProtection) {
    this.emailProtection = emailProtection;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \&quot;Email protection\&quot;.
   * @return emailProtection
   */
  @javax.annotation.Nullable
  public Boolean getEmailProtection() {
    return emailProtection;
  }

  public void setEmailProtection(Boolean emailProtection) {
    this.emailProtection = emailProtection;
  }


  public ExtendedKeyUsageOptions ocspSigning(Boolean ocspSigning) {
    this.ocspSigning = ocspSigning;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \&quot;Signing OCSP responses\&quot;.
   * @return ocspSigning
   */
  @javax.annotation.Nullable
  public Boolean getOcspSigning() {
    return ocspSigning;
  }

  public void setOcspSigning(Boolean ocspSigning) {
    this.ocspSigning = ocspSigning;
  }


  public ExtendedKeyUsageOptions serverAuth(Boolean serverAuth) {
    this.serverAuth = serverAuth;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \&quot;TLS WWW server authentication\&quot;, though regularly used for non-WWW TLS.
   * @return serverAuth
   */
  @javax.annotation.Nullable
  public Boolean getServerAuth() {
    return serverAuth;
  }

  public void setServerAuth(Boolean serverAuth) {
    this.serverAuth = serverAuth;
  }


  public ExtendedKeyUsageOptions timeStamping(Boolean timeStamping) {
    this.timeStamping = timeStamping;
    return this;
  }

  /**
   * Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \&quot;Binding the hash of an object to a time\&quot;.
   * @return timeStamping
   */
  @javax.annotation.Nullable
  public Boolean getTimeStamping() {
    return timeStamping;
  }

  public void setTimeStamping(Boolean timeStamping) {
    this.timeStamping = timeStamping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedKeyUsageOptions extendedKeyUsageOptions = (ExtendedKeyUsageOptions) o;
    return Objects.equals(this.clientAuth, extendedKeyUsageOptions.clientAuth) &&
        Objects.equals(this.codeSigning, extendedKeyUsageOptions.codeSigning) &&
        Objects.equals(this.emailProtection, extendedKeyUsageOptions.emailProtection) &&
        Objects.equals(this.ocspSigning, extendedKeyUsageOptions.ocspSigning) &&
        Objects.equals(this.serverAuth, extendedKeyUsageOptions.serverAuth) &&
        Objects.equals(this.timeStamping, extendedKeyUsageOptions.timeStamping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAuth, codeSigning, emailProtection, ocspSigning, serverAuth, timeStamping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedKeyUsageOptions {\n");
    sb.append("    clientAuth: ").append(toIndentedString(clientAuth)).append("\n");
    sb.append("    codeSigning: ").append(toIndentedString(codeSigning)).append("\n");
    sb.append("    emailProtection: ").append(toIndentedString(emailProtection)).append("\n");
    sb.append("    ocspSigning: ").append(toIndentedString(ocspSigning)).append("\n");
    sb.append("    serverAuth: ").append(toIndentedString(serverAuth)).append("\n");
    sb.append("    timeStamping: ").append(toIndentedString(timeStamping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientAuth");
    openapiFields.add("codeSigning");
    openapiFields.add("emailProtection");
    openapiFields.add("ocspSigning");
    openapiFields.add("serverAuth");
    openapiFields.add("timeStamping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedKeyUsageOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedKeyUsageOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedKeyUsageOptions is not found in the empty JSON string", ExtendedKeyUsageOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedKeyUsageOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedKeyUsageOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedKeyUsageOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedKeyUsageOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedKeyUsageOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedKeyUsageOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedKeyUsageOptions>() {
           @Override
           public void write(JsonWriter out, ExtendedKeyUsageOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedKeyUsageOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedKeyUsageOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedKeyUsageOptions
   * @throws IOException if the JSON string is invalid with respect to ExtendedKeyUsageOptions
   */
  public static ExtendedKeyUsageOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedKeyUsageOptions.class);
  }

  /**
   * Convert an instance of ExtendedKeyUsageOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

