/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RevokedCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CertificateRevocationList corresponds to a signed X.509 certificate Revocation List (CRL). A CRL contains the serial numbers of certificates that should no longer be trusted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateRevocationList {
  public static final String SERIALIZED_NAME_ACCESS_URL = "accessUrl";
  @SerializedName(SERIALIZED_NAME_ACCESS_URL)
  private String accessUrl;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEM_CRL = "pemCrl";
  @SerializedName(SERIALIZED_NAME_PEM_CRL)
  private String pemCrl;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_REVOKED_CERTIFICATES = "revokedCertificates";
  @SerializedName(SERIALIZED_NAME_REVOKED_CERTIFICATES)
  private List<RevokedCertificate> revokedCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  /**
   * Output only. The State for this CertificateRevocationList.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    SUPERSEDED("SUPERSEDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CertificateRevocationList() {
  }

  public CertificateRevocationList(
     String accessUrl, 
     String createTime, 
     String name, 
     String pemCrl, 
     String revisionId, 
     List<RevokedCertificate> revokedCertificates, 
     String sequenceNumber, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.accessUrl = accessUrl;
    this.createTime = createTime;
    this.name = name;
    this.pemCrl = pemCrl;
    this.revisionId = revisionId;
    this.revokedCertificates = revokedCertificates;
    this.sequenceNumber = sequenceNumber;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The location where &#39;pem_crl&#39; can be accessed.
   * @return accessUrl
   */
  @javax.annotation.Nullable
  public String getAccessUrl() {
    return accessUrl;
  }



  /**
   * Output only. The time at which this CertificateRevocationList was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public CertificateRevocationList labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CertificateRevocationList putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels with user-defined metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The resource name for this CertificateRevocationList in the format &#x60;projects/_*_/locations/_*_/caPools/_*certificateAuthorities/_*_/ certificateRevocationLists/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The PEM-encoded X.509 CRL.
   * @return pemCrl
   */
  @javax.annotation.Nullable
  public String getPemCrl() {
    return pemCrl;
  }



  /**
   * Output only. The revision ID of this CertificateRevocationList. A new revision is committed whenever a new CRL is published. The format is an 8-character hexadecimal string.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  /**
   * Output only. The revoked serial numbers that appear in pem_crl.
   * @return revokedCertificates
   */
  @javax.annotation.Nullable
  public List<RevokedCertificate> getRevokedCertificates() {
    return revokedCertificates;
  }



  /**
   * Output only. The CRL sequence number that appears in pem_crl.
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public String getSequenceNumber() {
    return sequenceNumber;
  }



  /**
   * Output only. The State for this CertificateRevocationList.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The time at which this CertificateRevocationList was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateRevocationList certificateRevocationList = (CertificateRevocationList) o;
    return Objects.equals(this.accessUrl, certificateRevocationList.accessUrl) &&
        Objects.equals(this.createTime, certificateRevocationList.createTime) &&
        Objects.equals(this.labels, certificateRevocationList.labels) &&
        Objects.equals(this.name, certificateRevocationList.name) &&
        Objects.equals(this.pemCrl, certificateRevocationList.pemCrl) &&
        Objects.equals(this.revisionId, certificateRevocationList.revisionId) &&
        Objects.equals(this.revokedCertificates, certificateRevocationList.revokedCertificates) &&
        Objects.equals(this.sequenceNumber, certificateRevocationList.sequenceNumber) &&
        Objects.equals(this.state, certificateRevocationList.state) &&
        Objects.equals(this.updateTime, certificateRevocationList.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessUrl, createTime, labels, name, pemCrl, revisionId, revokedCertificates, sequenceNumber, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateRevocationList {\n");
    sb.append("    accessUrl: ").append(toIndentedString(accessUrl)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pemCrl: ").append(toIndentedString(pemCrl)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    revokedCertificates: ").append(toIndentedString(revokedCertificates)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessUrl");
    openapiFields.add("createTime");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("pemCrl");
    openapiFields.add("revisionId");
    openapiFields.add("revokedCertificates");
    openapiFields.add("sequenceNumber");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateRevocationList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateRevocationList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateRevocationList is not found in the empty JSON string", CertificateRevocationList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateRevocationList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateRevocationList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessUrl") != null && !jsonObj.get("accessUrl").isJsonNull()) && !jsonObj.get("accessUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessUrl").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pemCrl") != null && !jsonObj.get("pemCrl").isJsonNull()) && !jsonObj.get("pemCrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pemCrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pemCrl").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      if (jsonObj.get("revokedCertificates") != null && !jsonObj.get("revokedCertificates").isJsonNull()) {
        JsonArray jsonArrayrevokedCertificates = jsonObj.getAsJsonArray("revokedCertificates");
        if (jsonArrayrevokedCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("revokedCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `revokedCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("revokedCertificates").toString()));
          }

          // validate the optional field `revokedCertificates` (array)
          for (int i = 0; i < jsonArrayrevokedCertificates.size(); i++) {
            RevokedCertificate.validateJsonElement(jsonArrayrevokedCertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("sequenceNumber") != null && !jsonObj.get("sequenceNumber").isJsonNull()) && !jsonObj.get("sequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceNumber").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateRevocationList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateRevocationList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateRevocationList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateRevocationList.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateRevocationList>() {
           @Override
           public void write(JsonWriter out, CertificateRevocationList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateRevocationList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateRevocationList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateRevocationList
   * @throws IOException if the JSON string is invalid with respect to CertificateRevocationList
   */
  public static CertificateRevocationList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateRevocationList.class);
  }

  /**
   * Convert an instance of CertificateRevocationList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

