/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccessUrls;
import org.openapitools.client.model.CertificateConfig;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.KeyVersionSpec;
import org.openapitools.client.model.SubordinateConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.257139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateAuthority {
  public static final String SERIALIZED_NAME_ACCESS_URLS = "accessUrls";
  @SerializedName(SERIALIZED_NAME_ACCESS_URLS)
  private AccessUrls accessUrls;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_DESCRIPTIONS = "caCertificateDescriptions";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_DESCRIPTIONS)
  private List<CertificateDescription> caCertificateDescriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private CertificateConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_GCS_BUCKET = "gcsBucket";
  @SerializedName(SERIALIZED_NAME_GCS_BUCKET)
  private String gcsBucket;

  public static final String SERIALIZED_NAME_KEY_SPEC = "keySpec";
  @SerializedName(SERIALIZED_NAME_KEY_SPEC)
  private KeyVersionSpec keySpec;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LIFETIME = "lifetime";
  @SerializedName(SERIALIZED_NAME_LIFETIME)
  private String lifetime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEM_CA_CERTIFICATES = "pemCaCertificates";
  @SerializedName(SERIALIZED_NAME_PEM_CA_CERTIFICATES)
  private List<String> pemCaCertificates = new ArrayList<>();

  /**
   * Output only. The State for this CertificateAuthority.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    STAGED("STAGED"),
    
    AWAITING_USER_ACTIVATION("AWAITING_USER_ACTIVATION"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBORDINATE_CONFIG = "subordinateConfig";
  @SerializedName(SERIALIZED_NAME_SUBORDINATE_CONFIG)
  private SubordinateConfig subordinateConfig;

  /**
   * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    ENTERPRISE("ENTERPRISE"),
    
    DEVOPS("DEVOPS");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  /**
   * Required. Immutable. The Type of this CertificateAuthority.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    SELF_SIGNED("SELF_SIGNED"),
    
    SUBORDINATE("SUBORDINATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CertificateAuthority() {
  }

  public CertificateAuthority(
     List<CertificateDescription> caCertificateDescriptions, 
     String createTime, 
     String deleteTime, 
     String expireTime, 
     String name, 
     List<String> pemCaCertificates, 
     StateEnum state, 
     TierEnum tier, 
     String updateTime
  ) {
    this();
    this.caCertificateDescriptions = caCertificateDescriptions;
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.expireTime = expireTime;
    this.name = name;
    this.pemCaCertificates = pemCaCertificates;
    this.state = state;
    this.tier = tier;
    this.updateTime = updateTime;
  }

  public CertificateAuthority accessUrls(AccessUrls accessUrls) {
    this.accessUrls = accessUrls;
    return this;
  }

  /**
   * Get accessUrls
   * @return accessUrls
   */
  @javax.annotation.Nullable
  public AccessUrls getAccessUrls() {
    return accessUrls;
  }

  public void setAccessUrls(AccessUrls accessUrls) {
    this.accessUrls = accessUrls;
  }


  /**
   * Output only. A structured description of this CertificateAuthority&#39;s CA certificate and its issuers. Ordered as self-to-root.
   * @return caCertificateDescriptions
   */
  @javax.annotation.Nullable
  public List<CertificateDescription> getCaCertificateDescriptions() {
    return caCertificateDescriptions;
  }



  public CertificateAuthority config(CertificateConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public CertificateConfig getConfig() {
    return config;
  }

  public void setConfig(CertificateConfig config) {
    this.config = config;
  }


  /**
   * Output only. The time at which this CertificateAuthority was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  /**
   * Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  public CertificateAuthority gcsBucket(String gcsBucket) {
    this.gcsBucket = gcsBucket;
    return this;
  }

  /**
   * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as &#x60;gs://&#x60;) or suffixes (such as &#x60;.googleapis.com&#x60;). For example, to use a bucket named &#x60;my-bucket&#x60;, you would simply specify &#x60;my-bucket&#x60;. If not specified, a managed bucket will be created.
   * @return gcsBucket
   */
  @javax.annotation.Nullable
  public String getGcsBucket() {
    return gcsBucket;
  }

  public void setGcsBucket(String gcsBucket) {
    this.gcsBucket = gcsBucket;
  }


  public CertificateAuthority keySpec(KeyVersionSpec keySpec) {
    this.keySpec = keySpec;
    return this;
  }

  /**
   * Get keySpec
   * @return keySpec
   */
  @javax.annotation.Nullable
  public KeyVersionSpec getKeySpec() {
    return keySpec;
  }

  public void setKeySpec(KeyVersionSpec keySpec) {
    this.keySpec = keySpec;
  }


  public CertificateAuthority labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CertificateAuthority putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels with user-defined metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CertificateAuthority lifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * Required. Immutable. The desired lifetime of the CA certificate. Used to create the \&quot;not_before_time\&quot; and \&quot;not_after_time\&quot; fields inside an X.509 certificate.
   * @return lifetime
   */
  @javax.annotation.Nullable
  public String getLifetime() {
    return lifetime;
  }

  public void setLifetime(String lifetime) {
    this.lifetime = lifetime;
  }


  /**
   * Output only. The resource name for this CertificateAuthority in the format &#x60;projects/_*_/locations/_*_/caPools/_*_/certificateAuthorities/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. This CertificateAuthority&#39;s certificate chain, including the current CertificateAuthority&#39;s certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority&#39;s certificate.
   * @return pemCaCertificates
   */
  @javax.annotation.Nullable
  public List<String> getPemCaCertificates() {
    return pemCaCertificates;
  }



  /**
   * Output only. The State for this CertificateAuthority.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public CertificateAuthority subordinateConfig(SubordinateConfig subordinateConfig) {
    this.subordinateConfig = subordinateConfig;
    return this;
  }

  /**
   * Get subordinateConfig
   * @return subordinateConfig
   */
  @javax.annotation.Nullable
  public SubordinateConfig getSubordinateConfig() {
    return subordinateConfig;
  }

  public void setSubordinateConfig(SubordinateConfig subordinateConfig) {
    this.subordinateConfig = subordinateConfig;
  }


  /**
   * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }



  public CertificateAuthority type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Immutable. The Type of this CertificateAuthority.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The time at which this CertificateAuthority was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAuthority certificateAuthority = (CertificateAuthority) o;
    return Objects.equals(this.accessUrls, certificateAuthority.accessUrls) &&
        Objects.equals(this.caCertificateDescriptions, certificateAuthority.caCertificateDescriptions) &&
        Objects.equals(this.config, certificateAuthority.config) &&
        Objects.equals(this.createTime, certificateAuthority.createTime) &&
        Objects.equals(this.deleteTime, certificateAuthority.deleteTime) &&
        Objects.equals(this.expireTime, certificateAuthority.expireTime) &&
        Objects.equals(this.gcsBucket, certificateAuthority.gcsBucket) &&
        Objects.equals(this.keySpec, certificateAuthority.keySpec) &&
        Objects.equals(this.labels, certificateAuthority.labels) &&
        Objects.equals(this.lifetime, certificateAuthority.lifetime) &&
        Objects.equals(this.name, certificateAuthority.name) &&
        Objects.equals(this.pemCaCertificates, certificateAuthority.pemCaCertificates) &&
        Objects.equals(this.state, certificateAuthority.state) &&
        Objects.equals(this.subordinateConfig, certificateAuthority.subordinateConfig) &&
        Objects.equals(this.tier, certificateAuthority.tier) &&
        Objects.equals(this.type, certificateAuthority.type) &&
        Objects.equals(this.updateTime, certificateAuthority.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessUrls, caCertificateDescriptions, config, createTime, deleteTime, expireTime, gcsBucket, keySpec, labels, lifetime, name, pemCaCertificates, state, subordinateConfig, tier, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAuthority {\n");
    sb.append("    accessUrls: ").append(toIndentedString(accessUrls)).append("\n");
    sb.append("    caCertificateDescriptions: ").append(toIndentedString(caCertificateDescriptions)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    gcsBucket: ").append(toIndentedString(gcsBucket)).append("\n");
    sb.append("    keySpec: ").append(toIndentedString(keySpec)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pemCaCertificates: ").append(toIndentedString(pemCaCertificates)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subordinateConfig: ").append(toIndentedString(subordinateConfig)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessUrls");
    openapiFields.add("caCertificateDescriptions");
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("expireTime");
    openapiFields.add("gcsBucket");
    openapiFields.add("keySpec");
    openapiFields.add("labels");
    openapiFields.add("lifetime");
    openapiFields.add("name");
    openapiFields.add("pemCaCertificates");
    openapiFields.add("state");
    openapiFields.add("subordinateConfig");
    openapiFields.add("tier");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateAuthority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateAuthority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateAuthority is not found in the empty JSON string", CertificateAuthority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateAuthority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateAuthority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessUrls`
      if (jsonObj.get("accessUrls") != null && !jsonObj.get("accessUrls").isJsonNull()) {
        AccessUrls.validateJsonElement(jsonObj.get("accessUrls"));
      }
      if (jsonObj.get("caCertificateDescriptions") != null && !jsonObj.get("caCertificateDescriptions").isJsonNull()) {
        JsonArray jsonArraycaCertificateDescriptions = jsonObj.getAsJsonArray("caCertificateDescriptions");
        if (jsonArraycaCertificateDescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caCertificateDescriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caCertificateDescriptions` to be an array in the JSON string but got `%s`", jsonObj.get("caCertificateDescriptions").toString()));
          }

          // validate the optional field `caCertificateDescriptions` (array)
          for (int i = 0; i < jsonArraycaCertificateDescriptions.size(); i++) {
            CertificateDescription.validateJsonElement(jsonArraycaCertificateDescriptions.get(i));
          };
        }
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        CertificateConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("gcsBucket") != null && !jsonObj.get("gcsBucket").isJsonNull()) && !jsonObj.get("gcsBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsBucket").toString()));
      }
      // validate the optional field `keySpec`
      if (jsonObj.get("keySpec") != null && !jsonObj.get("keySpec").isJsonNull()) {
        KeyVersionSpec.validateJsonElement(jsonObj.get("keySpec"));
      }
      if ((jsonObj.get("lifetime") != null && !jsonObj.get("lifetime").isJsonNull()) && !jsonObj.get("lifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifetime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pemCaCertificates") != null && !jsonObj.get("pemCaCertificates").isJsonNull() && !jsonObj.get("pemCaCertificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pemCaCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("pemCaCertificates").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `subordinateConfig`
      if (jsonObj.get("subordinateConfig") != null && !jsonObj.get("subordinateConfig").isJsonNull()) {
        SubordinateConfig.validateJsonElement(jsonObj.get("subordinateConfig"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateAuthority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateAuthority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateAuthority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateAuthority.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateAuthority>() {
           @Override
           public void write(JsonWriter out, CertificateAuthority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateAuthority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateAuthority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateAuthority
   * @throws IOException if the JSON string is invalid with respect to CertificateAuthority
   */
  public static CertificateAuthority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateAuthority.class);
  }

  /**
   * Convert an instance of CertificateAuthority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

