/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevocationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevocationDetails::OAIRevocationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevocationDetails::OAIRevocationDetails() {
    this->initializeModel();
}

OAIRevocationDetails::~OAIRevocationDetails() {}

void OAIRevocationDetails::initializeModel() {

    m_revocation_state_isSet = false;
    m_revocation_state_isValid = false;

    m_revocation_time_isSet = false;
    m_revocation_time_isValid = false;
}

void OAIRevocationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevocationDetails::fromJsonObject(QJsonObject json) {

    m_revocation_state_isValid = ::OpenAPI::fromJsonValue(m_revocation_state, json[QString("revocationState")]);
    m_revocation_state_isSet = !json[QString("revocationState")].isNull() && m_revocation_state_isValid;

    m_revocation_time_isValid = ::OpenAPI::fromJsonValue(m_revocation_time, json[QString("revocationTime")]);
    m_revocation_time_isSet = !json[QString("revocationTime")].isNull() && m_revocation_time_isValid;
}

QString OAIRevocationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevocationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_revocation_state_isSet) {
        obj.insert(QString("revocationState"), ::OpenAPI::toJsonValue(m_revocation_state));
    }
    if (m_revocation_time_isSet) {
        obj.insert(QString("revocationTime"), ::OpenAPI::toJsonValue(m_revocation_time));
    }
    return obj;
}

QString OAIRevocationDetails::getRevocationState() const {
    return m_revocation_state;
}
void OAIRevocationDetails::setRevocationState(const QString &revocation_state) {
    m_revocation_state = revocation_state;
    m_revocation_state_isSet = true;
}

bool OAIRevocationDetails::is_revocation_state_Set() const{
    return m_revocation_state_isSet;
}

bool OAIRevocationDetails::is_revocation_state_Valid() const{
    return m_revocation_state_isValid;
}

QString OAIRevocationDetails::getRevocationTime() const {
    return m_revocation_time;
}
void OAIRevocationDetails::setRevocationTime(const QString &revocation_time) {
    m_revocation_time = revocation_time;
    m_revocation_time_isSet = true;
}

bool OAIRevocationDetails::is_revocation_time_Set() const{
    return m_revocation_time_isSet;
}

bool OAIRevocationDetails::is_revocation_time_Valid() const{
    return m_revocation_time_isValid;
}

bool OAIRevocationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revocation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevocationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
