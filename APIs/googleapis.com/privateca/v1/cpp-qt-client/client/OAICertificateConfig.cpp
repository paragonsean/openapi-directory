/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateConfig::OAICertificateConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateConfig::OAICertificateConfig() {
    this->initializeModel();
}

OAICertificateConfig::~OAICertificateConfig() {}

void OAICertificateConfig::initializeModel() {

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_subject_config_isSet = false;
    m_subject_config_isValid = false;

    m_subject_key_id_isSet = false;
    m_subject_key_id_isValid = false;

    m_x509_config_isSet = false;
    m_x509_config_isValid = false;
}

void OAICertificateConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateConfig::fromJsonObject(QJsonObject json) {

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_subject_config_isValid = ::OpenAPI::fromJsonValue(m_subject_config, json[QString("subjectConfig")]);
    m_subject_config_isSet = !json[QString("subjectConfig")].isNull() && m_subject_config_isValid;

    m_subject_key_id_isValid = ::OpenAPI::fromJsonValue(m_subject_key_id, json[QString("subjectKeyId")]);
    m_subject_key_id_isSet = !json[QString("subjectKeyId")].isNull() && m_subject_key_id_isValid;

    m_x509_config_isValid = ::OpenAPI::fromJsonValue(m_x509_config, json[QString("x509Config")]);
    m_x509_config_isSet = !json[QString("x509Config")].isNull() && m_x509_config_isValid;
}

QString OAICertificateConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_public_key.isSet()) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_subject_config.isSet()) {
        obj.insert(QString("subjectConfig"), ::OpenAPI::toJsonValue(m_subject_config));
    }
    if (m_subject_key_id.isSet()) {
        obj.insert(QString("subjectKeyId"), ::OpenAPI::toJsonValue(m_subject_key_id));
    }
    if (m_x509_config.isSet()) {
        obj.insert(QString("x509Config"), ::OpenAPI::toJsonValue(m_x509_config));
    }
    return obj;
}

OAIPublicKey OAICertificateConfig::getPublicKey() const {
    return m_public_key;
}
void OAICertificateConfig::setPublicKey(const OAIPublicKey &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAICertificateConfig::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAICertificateConfig::is_public_key_Valid() const{
    return m_public_key_isValid;
}

OAISubjectConfig OAICertificateConfig::getSubjectConfig() const {
    return m_subject_config;
}
void OAICertificateConfig::setSubjectConfig(const OAISubjectConfig &subject_config) {
    m_subject_config = subject_config;
    m_subject_config_isSet = true;
}

bool OAICertificateConfig::is_subject_config_Set() const{
    return m_subject_config_isSet;
}

bool OAICertificateConfig::is_subject_config_Valid() const{
    return m_subject_config_isValid;
}

OAICertificateConfigKeyId OAICertificateConfig::getSubjectKeyId() const {
    return m_subject_key_id;
}
void OAICertificateConfig::setSubjectKeyId(const OAICertificateConfigKeyId &subject_key_id) {
    m_subject_key_id = subject_key_id;
    m_subject_key_id_isSet = true;
}

bool OAICertificateConfig::is_subject_key_id_Set() const{
    return m_subject_key_id_isSet;
}

bool OAICertificateConfig::is_subject_key_id_Valid() const{
    return m_subject_key_id_isValid;
}

OAIX509Parameters OAICertificateConfig::getX509Config() const {
    return m_x509_config;
}
void OAICertificateConfig::setX509Config(const OAIX509Parameters &x509_config) {
    m_x509_config = x509_config;
    m_x509_config_isSet = true;
}

bool OAICertificateConfig::is_x509_config_Set() const{
    return m_x509_config_isSet;
}

bool OAICertificateConfig::is_x509_config_Valid() const{
    return m_x509_config_isValid;
}

bool OAICertificateConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x509_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
