/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameConstraints::OAINameConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameConstraints::OAINameConstraints() {
    this->initializeModel();
}

OAINameConstraints::~OAINameConstraints() {}

void OAINameConstraints::initializeModel() {

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_excluded_dns_names_isSet = false;
    m_excluded_dns_names_isValid = false;

    m_excluded_email_addresses_isSet = false;
    m_excluded_email_addresses_isValid = false;

    m_excluded_ip_ranges_isSet = false;
    m_excluded_ip_ranges_isValid = false;

    m_excluded_uris_isSet = false;
    m_excluded_uris_isValid = false;

    m_permitted_dns_names_isSet = false;
    m_permitted_dns_names_isValid = false;

    m_permitted_email_addresses_isSet = false;
    m_permitted_email_addresses_isValid = false;

    m_permitted_ip_ranges_isSet = false;
    m_permitted_ip_ranges_isValid = false;

    m_permitted_uris_isSet = false;
    m_permitted_uris_isValid = false;
}

void OAINameConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINameConstraints::fromJsonObject(QJsonObject json) {

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_excluded_dns_names_isValid = ::OpenAPI::fromJsonValue(m_excluded_dns_names, json[QString("excludedDnsNames")]);
    m_excluded_dns_names_isSet = !json[QString("excludedDnsNames")].isNull() && m_excluded_dns_names_isValid;

    m_excluded_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_excluded_email_addresses, json[QString("excludedEmailAddresses")]);
    m_excluded_email_addresses_isSet = !json[QString("excludedEmailAddresses")].isNull() && m_excluded_email_addresses_isValid;

    m_excluded_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_excluded_ip_ranges, json[QString("excludedIpRanges")]);
    m_excluded_ip_ranges_isSet = !json[QString("excludedIpRanges")].isNull() && m_excluded_ip_ranges_isValid;

    m_excluded_uris_isValid = ::OpenAPI::fromJsonValue(m_excluded_uris, json[QString("excludedUris")]);
    m_excluded_uris_isSet = !json[QString("excludedUris")].isNull() && m_excluded_uris_isValid;

    m_permitted_dns_names_isValid = ::OpenAPI::fromJsonValue(m_permitted_dns_names, json[QString("permittedDnsNames")]);
    m_permitted_dns_names_isSet = !json[QString("permittedDnsNames")].isNull() && m_permitted_dns_names_isValid;

    m_permitted_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_permitted_email_addresses, json[QString("permittedEmailAddresses")]);
    m_permitted_email_addresses_isSet = !json[QString("permittedEmailAddresses")].isNull() && m_permitted_email_addresses_isValid;

    m_permitted_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_permitted_ip_ranges, json[QString("permittedIpRanges")]);
    m_permitted_ip_ranges_isSet = !json[QString("permittedIpRanges")].isNull() && m_permitted_ip_ranges_isValid;

    m_permitted_uris_isValid = ::OpenAPI::fromJsonValue(m_permitted_uris, json[QString("permittedUris")]);
    m_permitted_uris_isSet = !json[QString("permittedUris")].isNull() && m_permitted_uris_isValid;
}

QString OAINameConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINameConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_excluded_dns_names.size() > 0) {
        obj.insert(QString("excludedDnsNames"), ::OpenAPI::toJsonValue(m_excluded_dns_names));
    }
    if (m_excluded_email_addresses.size() > 0) {
        obj.insert(QString("excludedEmailAddresses"), ::OpenAPI::toJsonValue(m_excluded_email_addresses));
    }
    if (m_excluded_ip_ranges.size() > 0) {
        obj.insert(QString("excludedIpRanges"), ::OpenAPI::toJsonValue(m_excluded_ip_ranges));
    }
    if (m_excluded_uris.size() > 0) {
        obj.insert(QString("excludedUris"), ::OpenAPI::toJsonValue(m_excluded_uris));
    }
    if (m_permitted_dns_names.size() > 0) {
        obj.insert(QString("permittedDnsNames"), ::OpenAPI::toJsonValue(m_permitted_dns_names));
    }
    if (m_permitted_email_addresses.size() > 0) {
        obj.insert(QString("permittedEmailAddresses"), ::OpenAPI::toJsonValue(m_permitted_email_addresses));
    }
    if (m_permitted_ip_ranges.size() > 0) {
        obj.insert(QString("permittedIpRanges"), ::OpenAPI::toJsonValue(m_permitted_ip_ranges));
    }
    if (m_permitted_uris.size() > 0) {
        obj.insert(QString("permittedUris"), ::OpenAPI::toJsonValue(m_permitted_uris));
    }
    return obj;
}

bool OAINameConstraints::isCritical() const {
    return m_critical;
}
void OAINameConstraints::setCritical(const bool &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAINameConstraints::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAINameConstraints::is_critical_Valid() const{
    return m_critical_isValid;
}

QList<QString> OAINameConstraints::getExcludedDnsNames() const {
    return m_excluded_dns_names;
}
void OAINameConstraints::setExcludedDnsNames(const QList<QString> &excluded_dns_names) {
    m_excluded_dns_names = excluded_dns_names;
    m_excluded_dns_names_isSet = true;
}

bool OAINameConstraints::is_excluded_dns_names_Set() const{
    return m_excluded_dns_names_isSet;
}

bool OAINameConstraints::is_excluded_dns_names_Valid() const{
    return m_excluded_dns_names_isValid;
}

QList<QString> OAINameConstraints::getExcludedEmailAddresses() const {
    return m_excluded_email_addresses;
}
void OAINameConstraints::setExcludedEmailAddresses(const QList<QString> &excluded_email_addresses) {
    m_excluded_email_addresses = excluded_email_addresses;
    m_excluded_email_addresses_isSet = true;
}

bool OAINameConstraints::is_excluded_email_addresses_Set() const{
    return m_excluded_email_addresses_isSet;
}

bool OAINameConstraints::is_excluded_email_addresses_Valid() const{
    return m_excluded_email_addresses_isValid;
}

QList<QString> OAINameConstraints::getExcludedIpRanges() const {
    return m_excluded_ip_ranges;
}
void OAINameConstraints::setExcludedIpRanges(const QList<QString> &excluded_ip_ranges) {
    m_excluded_ip_ranges = excluded_ip_ranges;
    m_excluded_ip_ranges_isSet = true;
}

bool OAINameConstraints::is_excluded_ip_ranges_Set() const{
    return m_excluded_ip_ranges_isSet;
}

bool OAINameConstraints::is_excluded_ip_ranges_Valid() const{
    return m_excluded_ip_ranges_isValid;
}

QList<QString> OAINameConstraints::getExcludedUris() const {
    return m_excluded_uris;
}
void OAINameConstraints::setExcludedUris(const QList<QString> &excluded_uris) {
    m_excluded_uris = excluded_uris;
    m_excluded_uris_isSet = true;
}

bool OAINameConstraints::is_excluded_uris_Set() const{
    return m_excluded_uris_isSet;
}

bool OAINameConstraints::is_excluded_uris_Valid() const{
    return m_excluded_uris_isValid;
}

QList<QString> OAINameConstraints::getPermittedDnsNames() const {
    return m_permitted_dns_names;
}
void OAINameConstraints::setPermittedDnsNames(const QList<QString> &permitted_dns_names) {
    m_permitted_dns_names = permitted_dns_names;
    m_permitted_dns_names_isSet = true;
}

bool OAINameConstraints::is_permitted_dns_names_Set() const{
    return m_permitted_dns_names_isSet;
}

bool OAINameConstraints::is_permitted_dns_names_Valid() const{
    return m_permitted_dns_names_isValid;
}

QList<QString> OAINameConstraints::getPermittedEmailAddresses() const {
    return m_permitted_email_addresses;
}
void OAINameConstraints::setPermittedEmailAddresses(const QList<QString> &permitted_email_addresses) {
    m_permitted_email_addresses = permitted_email_addresses;
    m_permitted_email_addresses_isSet = true;
}

bool OAINameConstraints::is_permitted_email_addresses_Set() const{
    return m_permitted_email_addresses_isSet;
}

bool OAINameConstraints::is_permitted_email_addresses_Valid() const{
    return m_permitted_email_addresses_isValid;
}

QList<QString> OAINameConstraints::getPermittedIpRanges() const {
    return m_permitted_ip_ranges;
}
void OAINameConstraints::setPermittedIpRanges(const QList<QString> &permitted_ip_ranges) {
    m_permitted_ip_ranges = permitted_ip_ranges;
    m_permitted_ip_ranges_isSet = true;
}

bool OAINameConstraints::is_permitted_ip_ranges_Set() const{
    return m_permitted_ip_ranges_isSet;
}

bool OAINameConstraints::is_permitted_ip_ranges_Valid() const{
    return m_permitted_ip_ranges_isValid;
}

QList<QString> OAINameConstraints::getPermittedUris() const {
    return m_permitted_uris;
}
void OAINameConstraints::setPermittedUris(const QList<QString> &permitted_uris) {
    m_permitted_uris = permitted_uris;
    m_permitted_uris_isSet = true;
}

bool OAINameConstraints::is_permitted_uris_Set() const{
    return m_permitted_uris_isSet;
}

bool OAINameConstraints::is_permitted_uris_Valid() const{
    return m_permitted_uris_isValid;
}

bool OAINameConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitted_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitted_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitted_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitted_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINameConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
