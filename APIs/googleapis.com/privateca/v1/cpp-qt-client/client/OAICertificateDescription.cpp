/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateDescription::OAICertificateDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateDescription::OAICertificateDescription() {
    this->initializeModel();
}

OAICertificateDescription::~OAICertificateDescription() {}

void OAICertificateDescription::initializeModel() {

    m_aia_issuing_certificate_urls_isSet = false;
    m_aia_issuing_certificate_urls_isValid = false;

    m_authority_key_id_isSet = false;
    m_authority_key_id_isValid = false;

    m_cert_fingerprint_isSet = false;
    m_cert_fingerprint_isValid = false;

    m_crl_distribution_points_isSet = false;
    m_crl_distribution_points_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_subject_description_isSet = false;
    m_subject_description_isValid = false;

    m_subject_key_id_isSet = false;
    m_subject_key_id_isValid = false;

    m_x509_description_isSet = false;
    m_x509_description_isValid = false;
}

void OAICertificateDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateDescription::fromJsonObject(QJsonObject json) {

    m_aia_issuing_certificate_urls_isValid = ::OpenAPI::fromJsonValue(m_aia_issuing_certificate_urls, json[QString("aiaIssuingCertificateUrls")]);
    m_aia_issuing_certificate_urls_isSet = !json[QString("aiaIssuingCertificateUrls")].isNull() && m_aia_issuing_certificate_urls_isValid;

    m_authority_key_id_isValid = ::OpenAPI::fromJsonValue(m_authority_key_id, json[QString("authorityKeyId")]);
    m_authority_key_id_isSet = !json[QString("authorityKeyId")].isNull() && m_authority_key_id_isValid;

    m_cert_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_cert_fingerprint, json[QString("certFingerprint")]);
    m_cert_fingerprint_isSet = !json[QString("certFingerprint")].isNull() && m_cert_fingerprint_isValid;

    m_crl_distribution_points_isValid = ::OpenAPI::fromJsonValue(m_crl_distribution_points, json[QString("crlDistributionPoints")]);
    m_crl_distribution_points_isSet = !json[QString("crlDistributionPoints")].isNull() && m_crl_distribution_points_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_subject_description_isValid = ::OpenAPI::fromJsonValue(m_subject_description, json[QString("subjectDescription")]);
    m_subject_description_isSet = !json[QString("subjectDescription")].isNull() && m_subject_description_isValid;

    m_subject_key_id_isValid = ::OpenAPI::fromJsonValue(m_subject_key_id, json[QString("subjectKeyId")]);
    m_subject_key_id_isSet = !json[QString("subjectKeyId")].isNull() && m_subject_key_id_isValid;

    m_x509_description_isValid = ::OpenAPI::fromJsonValue(m_x509_description, json[QString("x509Description")]);
    m_x509_description_isSet = !json[QString("x509Description")].isNull() && m_x509_description_isValid;
}

QString OAICertificateDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_aia_issuing_certificate_urls.size() > 0) {
        obj.insert(QString("aiaIssuingCertificateUrls"), ::OpenAPI::toJsonValue(m_aia_issuing_certificate_urls));
    }
    if (m_authority_key_id.isSet()) {
        obj.insert(QString("authorityKeyId"), ::OpenAPI::toJsonValue(m_authority_key_id));
    }
    if (m_cert_fingerprint.isSet()) {
        obj.insert(QString("certFingerprint"), ::OpenAPI::toJsonValue(m_cert_fingerprint));
    }
    if (m_crl_distribution_points.size() > 0) {
        obj.insert(QString("crlDistributionPoints"), ::OpenAPI::toJsonValue(m_crl_distribution_points));
    }
    if (m_public_key.isSet()) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_subject_description.isSet()) {
        obj.insert(QString("subjectDescription"), ::OpenAPI::toJsonValue(m_subject_description));
    }
    if (m_subject_key_id.isSet()) {
        obj.insert(QString("subjectKeyId"), ::OpenAPI::toJsonValue(m_subject_key_id));
    }
    if (m_x509_description.isSet()) {
        obj.insert(QString("x509Description"), ::OpenAPI::toJsonValue(m_x509_description));
    }
    return obj;
}

QList<QString> OAICertificateDescription::getAiaIssuingCertificateUrls() const {
    return m_aia_issuing_certificate_urls;
}
void OAICertificateDescription::setAiaIssuingCertificateUrls(const QList<QString> &aia_issuing_certificate_urls) {
    m_aia_issuing_certificate_urls = aia_issuing_certificate_urls;
    m_aia_issuing_certificate_urls_isSet = true;
}

bool OAICertificateDescription::is_aia_issuing_certificate_urls_Set() const{
    return m_aia_issuing_certificate_urls_isSet;
}

bool OAICertificateDescription::is_aia_issuing_certificate_urls_Valid() const{
    return m_aia_issuing_certificate_urls_isValid;
}

OAIKeyId OAICertificateDescription::getAuthorityKeyId() const {
    return m_authority_key_id;
}
void OAICertificateDescription::setAuthorityKeyId(const OAIKeyId &authority_key_id) {
    m_authority_key_id = authority_key_id;
    m_authority_key_id_isSet = true;
}

bool OAICertificateDescription::is_authority_key_id_Set() const{
    return m_authority_key_id_isSet;
}

bool OAICertificateDescription::is_authority_key_id_Valid() const{
    return m_authority_key_id_isValid;
}

OAICertificateFingerprint OAICertificateDescription::getCertFingerprint() const {
    return m_cert_fingerprint;
}
void OAICertificateDescription::setCertFingerprint(const OAICertificateFingerprint &cert_fingerprint) {
    m_cert_fingerprint = cert_fingerprint;
    m_cert_fingerprint_isSet = true;
}

bool OAICertificateDescription::is_cert_fingerprint_Set() const{
    return m_cert_fingerprint_isSet;
}

bool OAICertificateDescription::is_cert_fingerprint_Valid() const{
    return m_cert_fingerprint_isValid;
}

QList<QString> OAICertificateDescription::getCrlDistributionPoints() const {
    return m_crl_distribution_points;
}
void OAICertificateDescription::setCrlDistributionPoints(const QList<QString> &crl_distribution_points) {
    m_crl_distribution_points = crl_distribution_points;
    m_crl_distribution_points_isSet = true;
}

bool OAICertificateDescription::is_crl_distribution_points_Set() const{
    return m_crl_distribution_points_isSet;
}

bool OAICertificateDescription::is_crl_distribution_points_Valid() const{
    return m_crl_distribution_points_isValid;
}

OAIPublicKey OAICertificateDescription::getPublicKey() const {
    return m_public_key;
}
void OAICertificateDescription::setPublicKey(const OAIPublicKey &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAICertificateDescription::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAICertificateDescription::is_public_key_Valid() const{
    return m_public_key_isValid;
}

OAISubjectDescription OAICertificateDescription::getSubjectDescription() const {
    return m_subject_description;
}
void OAICertificateDescription::setSubjectDescription(const OAISubjectDescription &subject_description) {
    m_subject_description = subject_description;
    m_subject_description_isSet = true;
}

bool OAICertificateDescription::is_subject_description_Set() const{
    return m_subject_description_isSet;
}

bool OAICertificateDescription::is_subject_description_Valid() const{
    return m_subject_description_isValid;
}

OAIKeyId OAICertificateDescription::getSubjectKeyId() const {
    return m_subject_key_id;
}
void OAICertificateDescription::setSubjectKeyId(const OAIKeyId &subject_key_id) {
    m_subject_key_id = subject_key_id;
    m_subject_key_id_isSet = true;
}

bool OAICertificateDescription::is_subject_key_id_Set() const{
    return m_subject_key_id_isSet;
}

bool OAICertificateDescription::is_subject_key_id_Valid() const{
    return m_subject_key_id_isValid;
}

OAIX509Parameters OAICertificateDescription::getX509Description() const {
    return m_x509_description;
}
void OAICertificateDescription::setX509Description(const OAIX509Parameters &x509_description) {
    m_x509_description = x509_description;
    m_x509_description_isSet = true;
}

bool OAICertificateDescription::is_x509_description_Set() const{
    return m_x509_description_isSet;
}

bool OAICertificateDescription::is_x509_description_Valid() const{
    return m_x509_description_isValid;
}

bool OAICertificateDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aia_issuing_certificate_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_key_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_fingerprint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crl_distribution_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x509_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
