/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaOptions::OAICaOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaOptions::OAICaOptions() {
    this->initializeModel();
}

OAICaOptions::~OAICaOptions() {}

void OAICaOptions::initializeModel() {

    m_is_ca_isSet = false;
    m_is_ca_isValid = false;

    m_max_issuer_path_length_isSet = false;
    m_max_issuer_path_length_isValid = false;
}

void OAICaOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaOptions::fromJsonObject(QJsonObject json) {

    m_is_ca_isValid = ::OpenAPI::fromJsonValue(m_is_ca, json[QString("isCa")]);
    m_is_ca_isSet = !json[QString("isCa")].isNull() && m_is_ca_isValid;

    m_max_issuer_path_length_isValid = ::OpenAPI::fromJsonValue(m_max_issuer_path_length, json[QString("maxIssuerPathLength")]);
    m_max_issuer_path_length_isSet = !json[QString("maxIssuerPathLength")].isNull() && m_max_issuer_path_length_isValid;
}

QString OAICaOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_is_ca_isSet) {
        obj.insert(QString("isCa"), ::OpenAPI::toJsonValue(m_is_ca));
    }
    if (m_max_issuer_path_length_isSet) {
        obj.insert(QString("maxIssuerPathLength"), ::OpenAPI::toJsonValue(m_max_issuer_path_length));
    }
    return obj;
}

bool OAICaOptions::isIsCa() const {
    return m_is_ca;
}
void OAICaOptions::setIsCa(const bool &is_ca) {
    m_is_ca = is_ca;
    m_is_ca_isSet = true;
}

bool OAICaOptions::is_is_ca_Set() const{
    return m_is_ca_isSet;
}

bool OAICaOptions::is_is_ca_Valid() const{
    return m_is_ca_isValid;
}

qint32 OAICaOptions::getMaxIssuerPathLength() const {
    return m_max_issuer_path_length;
}
void OAICaOptions::setMaxIssuerPathLength(const qint32 &max_issuer_path_length) {
    m_max_issuer_path_length = max_issuer_path_length;
    m_max_issuer_path_length_isSet = true;
}

bool OAICaOptions::is_max_issuer_path_length_Set() const{
    return m_max_issuer_path_length_isSet;
}

bool OAICaOptions::is_max_issuer_path_length_Valid() const{
    return m_max_issuer_path_length_isValid;
}

bool OAICaOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_ca_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_issuer_path_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
