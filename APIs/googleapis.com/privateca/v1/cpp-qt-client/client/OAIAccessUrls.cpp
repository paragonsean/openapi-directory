/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessUrls::OAIAccessUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessUrls::OAIAccessUrls() {
    this->initializeModel();
}

OAIAccessUrls::~OAIAccessUrls() {}

void OAIAccessUrls::initializeModel() {

    m_ca_certificate_access_url_isSet = false;
    m_ca_certificate_access_url_isValid = false;

    m_crl_access_urls_isSet = false;
    m_crl_access_urls_isValid = false;
}

void OAIAccessUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessUrls::fromJsonObject(QJsonObject json) {

    m_ca_certificate_access_url_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_access_url, json[QString("caCertificateAccessUrl")]);
    m_ca_certificate_access_url_isSet = !json[QString("caCertificateAccessUrl")].isNull() && m_ca_certificate_access_url_isValid;

    m_crl_access_urls_isValid = ::OpenAPI::fromJsonValue(m_crl_access_urls, json[QString("crlAccessUrls")]);
    m_crl_access_urls_isSet = !json[QString("crlAccessUrls")].isNull() && m_crl_access_urls_isValid;
}

QString OAIAccessUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_access_url_isSet) {
        obj.insert(QString("caCertificateAccessUrl"), ::OpenAPI::toJsonValue(m_ca_certificate_access_url));
    }
    if (m_crl_access_urls.size() > 0) {
        obj.insert(QString("crlAccessUrls"), ::OpenAPI::toJsonValue(m_crl_access_urls));
    }
    return obj;
}

QString OAIAccessUrls::getCaCertificateAccessUrl() const {
    return m_ca_certificate_access_url;
}
void OAIAccessUrls::setCaCertificateAccessUrl(const QString &ca_certificate_access_url) {
    m_ca_certificate_access_url = ca_certificate_access_url;
    m_ca_certificate_access_url_isSet = true;
}

bool OAIAccessUrls::is_ca_certificate_access_url_Set() const{
    return m_ca_certificate_access_url_isSet;
}

bool OAIAccessUrls::is_ca_certificate_access_url_Valid() const{
    return m_ca_certificate_access_url_isValid;
}

QList<QString> OAIAccessUrls::getCrlAccessUrls() const {
    return m_crl_access_urls;
}
void OAIAccessUrls::setCrlAccessUrls(const QList<QString> &crl_access_urls) {
    m_crl_access_urls = crl_access_urls;
    m_crl_access_urls_isSet = true;
}

bool OAIAccessUrls::is_crl_access_urls_Set() const{
    return m_crl_access_urls_isSet;
}

bool OAIAccessUrls::is_crl_access_urls_Valid() const{
    return m_crl_access_urls_isValid;
}

bool OAIAccessUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_access_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crl_access_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
