/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaPool::OAICaPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaPool::OAICaPool() {
    this->initializeModel();
}

OAICaPool::~OAICaPool() {}

void OAICaPool::initializeModel() {

    m_issuance_policy_isSet = false;
    m_issuance_policy_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publishing_options_isSet = false;
    m_publishing_options_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAICaPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaPool::fromJsonObject(QJsonObject json) {

    m_issuance_policy_isValid = ::OpenAPI::fromJsonValue(m_issuance_policy, json[QString("issuancePolicy")]);
    m_issuance_policy_isSet = !json[QString("issuancePolicy")].isNull() && m_issuance_policy_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_publishing_options, json[QString("publishingOptions")]);
    m_publishing_options_isSet = !json[QString("publishingOptions")].isNull() && m_publishing_options_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAICaPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaPool::asJsonObject() const {
    QJsonObject obj;
    if (m_issuance_policy.isSet()) {
        obj.insert(QString("issuancePolicy"), ::OpenAPI::toJsonValue(m_issuance_policy));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publishing_options.isSet()) {
        obj.insert(QString("publishingOptions"), ::OpenAPI::toJsonValue(m_publishing_options));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

OAIIssuancePolicy OAICaPool::getIssuancePolicy() const {
    return m_issuance_policy;
}
void OAICaPool::setIssuancePolicy(const OAIIssuancePolicy &issuance_policy) {
    m_issuance_policy = issuance_policy;
    m_issuance_policy_isSet = true;
}

bool OAICaPool::is_issuance_policy_Set() const{
    return m_issuance_policy_isSet;
}

bool OAICaPool::is_issuance_policy_Valid() const{
    return m_issuance_policy_isValid;
}

QMap<QString, QString> OAICaPool::getLabels() const {
    return m_labels;
}
void OAICaPool::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICaPool::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICaPool::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICaPool::getName() const {
    return m_name;
}
void OAICaPool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICaPool::is_name_Set() const{
    return m_name_isSet;
}

bool OAICaPool::is_name_Valid() const{
    return m_name_isValid;
}

OAIPublishingOptions OAICaPool::getPublishingOptions() const {
    return m_publishing_options;
}
void OAICaPool::setPublishingOptions(const OAIPublishingOptions &publishing_options) {
    m_publishing_options = publishing_options;
    m_publishing_options_isSet = true;
}

bool OAICaPool::is_publishing_options_Set() const{
    return m_publishing_options_isSet;
}

bool OAICaPool::is_publishing_options_Valid() const{
    return m_publishing_options_isValid;
}

QString OAICaPool::getTier() const {
    return m_tier;
}
void OAICaPool::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICaPool::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICaPool::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAICaPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuance_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
