/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubjectConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubjectConfig::OAISubjectConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubjectConfig::OAISubjectConfig() {
    this->initializeModel();
}

OAISubjectConfig::~OAISubjectConfig() {}

void OAISubjectConfig::initializeModel() {

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subject_alt_name_isSet = false;
    m_subject_alt_name_isValid = false;
}

void OAISubjectConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubjectConfig::fromJsonObject(QJsonObject json) {

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subject_alt_name_isValid = ::OpenAPI::fromJsonValue(m_subject_alt_name, json[QString("subjectAltName")]);
    m_subject_alt_name_isSet = !json[QString("subjectAltName")].isNull() && m_subject_alt_name_isValid;
}

QString OAISubjectConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubjectConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subject_alt_name.isSet()) {
        obj.insert(QString("subjectAltName"), ::OpenAPI::toJsonValue(m_subject_alt_name));
    }
    return obj;
}

OAISubject OAISubjectConfig::getSubject() const {
    return m_subject;
}
void OAISubjectConfig::setSubject(const OAISubject &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISubjectConfig::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISubjectConfig::is_subject_Valid() const{
    return m_subject_isValid;
}

OAISubjectAltNames OAISubjectConfig::getSubjectAltName() const {
    return m_subject_alt_name;
}
void OAISubjectConfig::setSubjectAltName(const OAISubjectAltNames &subject_alt_name) {
    m_subject_alt_name = subject_alt_name;
    m_subject_alt_name_isSet = true;
}

bool OAISubjectConfig::is_subject_alt_name_Set() const{
    return m_subject_alt_name_isSet;
}

bool OAISubjectConfig::is_subject_alt_name_Valid() const{
    return m_subject_alt_name_isValid;
}

bool OAISubjectConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alt_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubjectConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
