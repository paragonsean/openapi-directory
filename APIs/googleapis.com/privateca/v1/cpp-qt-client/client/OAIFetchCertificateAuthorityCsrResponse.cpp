/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchCertificateAuthorityCsrResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchCertificateAuthorityCsrResponse::OAIFetchCertificateAuthorityCsrResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchCertificateAuthorityCsrResponse::OAIFetchCertificateAuthorityCsrResponse() {
    this->initializeModel();
}

OAIFetchCertificateAuthorityCsrResponse::~OAIFetchCertificateAuthorityCsrResponse() {}

void OAIFetchCertificateAuthorityCsrResponse::initializeModel() {

    m_pem_csr_isSet = false;
    m_pem_csr_isValid = false;
}

void OAIFetchCertificateAuthorityCsrResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchCertificateAuthorityCsrResponse::fromJsonObject(QJsonObject json) {

    m_pem_csr_isValid = ::OpenAPI::fromJsonValue(m_pem_csr, json[QString("pemCsr")]);
    m_pem_csr_isSet = !json[QString("pemCsr")].isNull() && m_pem_csr_isValid;
}

QString OAIFetchCertificateAuthorityCsrResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchCertificateAuthorityCsrResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_pem_csr_isSet) {
        obj.insert(QString("pemCsr"), ::OpenAPI::toJsonValue(m_pem_csr));
    }
    return obj;
}

QString OAIFetchCertificateAuthorityCsrResponse::getPemCsr() const {
    return m_pem_csr;
}
void OAIFetchCertificateAuthorityCsrResponse::setPemCsr(const QString &pem_csr) {
    m_pem_csr = pem_csr;
    m_pem_csr_isSet = true;
}

bool OAIFetchCertificateAuthorityCsrResponse::is_pem_csr_Set() const{
    return m_pem_csr_isSet;
}

bool OAIFetchCertificateAuthorityCsrResponse::is_pem_csr_Valid() const{
    return m_pem_csr_isValid;
}

bool OAIFetchCertificateAuthorityCsrResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pem_csr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchCertificateAuthorityCsrResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
