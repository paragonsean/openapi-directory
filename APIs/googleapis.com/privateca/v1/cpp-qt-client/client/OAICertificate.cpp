/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_certificate_description_isSet = false;
    m_certificate_description_isValid = false;

    m_certificate_template_isSet = false;
    m_certificate_template_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_issuer_certificate_authority_isSet = false;
    m_issuer_certificate_authority_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lifetime_isSet = false;
    m_lifetime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pem_certificate_isSet = false;
    m_pem_certificate_isValid = false;

    m_pem_certificate_chain_isSet = false;
    m_pem_certificate_chain_isValid = false;

    m_pem_csr_isSet = false;
    m_pem_csr_isValid = false;

    m_revocation_details_isSet = false;
    m_revocation_details_isValid = false;

    m_subject_mode_isSet = false;
    m_subject_mode_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_certificate_description_isValid = ::OpenAPI::fromJsonValue(m_certificate_description, json[QString("certificateDescription")]);
    m_certificate_description_isSet = !json[QString("certificateDescription")].isNull() && m_certificate_description_isValid;

    m_certificate_template_isValid = ::OpenAPI::fromJsonValue(m_certificate_template, json[QString("certificateTemplate")]);
    m_certificate_template_isSet = !json[QString("certificateTemplate")].isNull() && m_certificate_template_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_issuer_certificate_authority_isValid = ::OpenAPI::fromJsonValue(m_issuer_certificate_authority, json[QString("issuerCertificateAuthority")]);
    m_issuer_certificate_authority_isSet = !json[QString("issuerCertificateAuthority")].isNull() && m_issuer_certificate_authority_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lifetime_isValid = ::OpenAPI::fromJsonValue(m_lifetime, json[QString("lifetime")]);
    m_lifetime_isSet = !json[QString("lifetime")].isNull() && m_lifetime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pem_certificate_isValid = ::OpenAPI::fromJsonValue(m_pem_certificate, json[QString("pemCertificate")]);
    m_pem_certificate_isSet = !json[QString("pemCertificate")].isNull() && m_pem_certificate_isValid;

    m_pem_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_pem_certificate_chain, json[QString("pemCertificateChain")]);
    m_pem_certificate_chain_isSet = !json[QString("pemCertificateChain")].isNull() && m_pem_certificate_chain_isValid;

    m_pem_csr_isValid = ::OpenAPI::fromJsonValue(m_pem_csr, json[QString("pemCsr")]);
    m_pem_csr_isSet = !json[QString("pemCsr")].isNull() && m_pem_csr_isValid;

    m_revocation_details_isValid = ::OpenAPI::fromJsonValue(m_revocation_details, json[QString("revocationDetails")]);
    m_revocation_details_isSet = !json[QString("revocationDetails")].isNull() && m_revocation_details_isValid;

    m_subject_mode_isValid = ::OpenAPI::fromJsonValue(m_subject_mode, json[QString("subjectMode")]);
    m_subject_mode_isSet = !json[QString("subjectMode")].isNull() && m_subject_mode_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_description.isSet()) {
        obj.insert(QString("certificateDescription"), ::OpenAPI::toJsonValue(m_certificate_description));
    }
    if (m_certificate_template_isSet) {
        obj.insert(QString("certificateTemplate"), ::OpenAPI::toJsonValue(m_certificate_template));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_issuer_certificate_authority_isSet) {
        obj.insert(QString("issuerCertificateAuthority"), ::OpenAPI::toJsonValue(m_issuer_certificate_authority));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lifetime_isSet) {
        obj.insert(QString("lifetime"), ::OpenAPI::toJsonValue(m_lifetime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pem_certificate_isSet) {
        obj.insert(QString("pemCertificate"), ::OpenAPI::toJsonValue(m_pem_certificate));
    }
    if (m_pem_certificate_chain.size() > 0) {
        obj.insert(QString("pemCertificateChain"), ::OpenAPI::toJsonValue(m_pem_certificate_chain));
    }
    if (m_pem_csr_isSet) {
        obj.insert(QString("pemCsr"), ::OpenAPI::toJsonValue(m_pem_csr));
    }
    if (m_revocation_details.isSet()) {
        obj.insert(QString("revocationDetails"), ::OpenAPI::toJsonValue(m_revocation_details));
    }
    if (m_subject_mode_isSet) {
        obj.insert(QString("subjectMode"), ::OpenAPI::toJsonValue(m_subject_mode));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAICertificateDescription OAICertificate::getCertificateDescription() const {
    return m_certificate_description;
}
void OAICertificate::setCertificateDescription(const OAICertificateDescription &certificate_description) {
    m_certificate_description = certificate_description;
    m_certificate_description_isSet = true;
}

bool OAICertificate::is_certificate_description_Set() const{
    return m_certificate_description_isSet;
}

bool OAICertificate::is_certificate_description_Valid() const{
    return m_certificate_description_isValid;
}

QString OAICertificate::getCertificateTemplate() const {
    return m_certificate_template;
}
void OAICertificate::setCertificateTemplate(const QString &certificate_template) {
    m_certificate_template = certificate_template;
    m_certificate_template_isSet = true;
}

bool OAICertificate::is_certificate_template_Set() const{
    return m_certificate_template_isSet;
}

bool OAICertificate::is_certificate_template_Valid() const{
    return m_certificate_template_isValid;
}

OAICertificateConfig OAICertificate::getConfig() const {
    return m_config;
}
void OAICertificate::setConfig(const OAICertificateConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAICertificate::is_config_Set() const{
    return m_config_isSet;
}

bool OAICertificate::is_config_Valid() const{
    return m_config_isValid;
}

QString OAICertificate::getCreateTime() const {
    return m_create_time;
}
void OAICertificate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificate::getIssuerCertificateAuthority() const {
    return m_issuer_certificate_authority;
}
void OAICertificate::setIssuerCertificateAuthority(const QString &issuer_certificate_authority) {
    m_issuer_certificate_authority = issuer_certificate_authority;
    m_issuer_certificate_authority_isSet = true;
}

bool OAICertificate::is_issuer_certificate_authority_Set() const{
    return m_issuer_certificate_authority_isSet;
}

bool OAICertificate::is_issuer_certificate_authority_Valid() const{
    return m_issuer_certificate_authority_isValid;
}

QMap<QString, QString> OAICertificate::getLabels() const {
    return m_labels;
}
void OAICertificate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificate::getLifetime() const {
    return m_lifetime;
}
void OAICertificate::setLifetime(const QString &lifetime) {
    m_lifetime = lifetime;
    m_lifetime_isSet = true;
}

bool OAICertificate::is_lifetime_Set() const{
    return m_lifetime_isSet;
}

bool OAICertificate::is_lifetime_Valid() const{
    return m_lifetime_isValid;
}

QString OAICertificate::getName() const {
    return m_name;
}
void OAICertificate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICertificate::getPemCertificate() const {
    return m_pem_certificate;
}
void OAICertificate::setPemCertificate(const QString &pem_certificate) {
    m_pem_certificate = pem_certificate;
    m_pem_certificate_isSet = true;
}

bool OAICertificate::is_pem_certificate_Set() const{
    return m_pem_certificate_isSet;
}

bool OAICertificate::is_pem_certificate_Valid() const{
    return m_pem_certificate_isValid;
}

QList<QString> OAICertificate::getPemCertificateChain() const {
    return m_pem_certificate_chain;
}
void OAICertificate::setPemCertificateChain(const QList<QString> &pem_certificate_chain) {
    m_pem_certificate_chain = pem_certificate_chain;
    m_pem_certificate_chain_isSet = true;
}

bool OAICertificate::is_pem_certificate_chain_Set() const{
    return m_pem_certificate_chain_isSet;
}

bool OAICertificate::is_pem_certificate_chain_Valid() const{
    return m_pem_certificate_chain_isValid;
}

QString OAICertificate::getPemCsr() const {
    return m_pem_csr;
}
void OAICertificate::setPemCsr(const QString &pem_csr) {
    m_pem_csr = pem_csr;
    m_pem_csr_isSet = true;
}

bool OAICertificate::is_pem_csr_Set() const{
    return m_pem_csr_isSet;
}

bool OAICertificate::is_pem_csr_Valid() const{
    return m_pem_csr_isValid;
}

OAIRevocationDetails OAICertificate::getRevocationDetails() const {
    return m_revocation_details;
}
void OAICertificate::setRevocationDetails(const OAIRevocationDetails &revocation_details) {
    m_revocation_details = revocation_details;
    m_revocation_details_isSet = true;
}

bool OAICertificate::is_revocation_details_Set() const{
    return m_revocation_details_isSet;
}

bool OAICertificate::is_revocation_details_Valid() const{
    return m_revocation_details_isValid;
}

QString OAICertificate::getSubjectMode() const {
    return m_subject_mode;
}
void OAICertificate::setSubjectMode(const QString &subject_mode) {
    m_subject_mode = subject_mode;
    m_subject_mode_isSet = true;
}

bool OAICertificate::is_subject_mode_Set() const{
    return m_subject_mode_isSet;
}

bool OAICertificate::is_subject_mode_Valid() const{
    return m_subject_mode_isValid;
}

QString OAICertificate::getUpdateTime() const {
    return m_update_time;
}
void OAICertificate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_certificate_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_certificate_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_csr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
