/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedKeyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedKeyType::OAIAllowedKeyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedKeyType::OAIAllowedKeyType() {
    this->initializeModel();
}

OAIAllowedKeyType::~OAIAllowedKeyType() {}

void OAIAllowedKeyType::initializeModel() {

    m_elliptic_curve_isSet = false;
    m_elliptic_curve_isValid = false;

    m_rsa_isSet = false;
    m_rsa_isValid = false;
}

void OAIAllowedKeyType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowedKeyType::fromJsonObject(QJsonObject json) {

    m_elliptic_curve_isValid = ::OpenAPI::fromJsonValue(m_elliptic_curve, json[QString("ellipticCurve")]);
    m_elliptic_curve_isSet = !json[QString("ellipticCurve")].isNull() && m_elliptic_curve_isValid;

    m_rsa_isValid = ::OpenAPI::fromJsonValue(m_rsa, json[QString("rsa")]);
    m_rsa_isSet = !json[QString("rsa")].isNull() && m_rsa_isValid;
}

QString OAIAllowedKeyType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowedKeyType::asJsonObject() const {
    QJsonObject obj;
    if (m_elliptic_curve.isSet()) {
        obj.insert(QString("ellipticCurve"), ::OpenAPI::toJsonValue(m_elliptic_curve));
    }
    if (m_rsa.isSet()) {
        obj.insert(QString("rsa"), ::OpenAPI::toJsonValue(m_rsa));
    }
    return obj;
}

OAIEcKeyType OAIAllowedKeyType::getEllipticCurve() const {
    return m_elliptic_curve;
}
void OAIAllowedKeyType::setEllipticCurve(const OAIEcKeyType &elliptic_curve) {
    m_elliptic_curve = elliptic_curve;
    m_elliptic_curve_isSet = true;
}

bool OAIAllowedKeyType::is_elliptic_curve_Set() const{
    return m_elliptic_curve_isSet;
}

bool OAIAllowedKeyType::is_elliptic_curve_Valid() const{
    return m_elliptic_curve_isValid;
}

OAIRsaKeyType OAIAllowedKeyType::getRsa() const {
    return m_rsa;
}
void OAIAllowedKeyType::setRsa(const OAIRsaKeyType &rsa) {
    m_rsa = rsa;
    m_rsa_isSet = true;
}

bool OAIAllowedKeyType::is_rsa_Set() const{
    return m_rsa_isSet;
}

bool OAIAllowedKeyType::is_rsa_Valid() const{
    return m_rsa_isValid;
}

bool OAIAllowedKeyType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elliptic_curve.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowedKeyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
