/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIX509Parameters.h
 *
 * An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
 */

#ifndef OAIX509Parameters_H
#define OAIX509Parameters_H

#include <QJsonObject>

#include "OAICaOptions.h"
#include "OAIKeyUsage.h"
#include "OAINameConstraints.h"
#include "OAIObjectId.h"
#include "OAIX509Extension.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIX509Extension;
class OAICaOptions;
class OAIKeyUsage;
class OAINameConstraints;
class OAIObjectId;

class OAIX509Parameters : public OAIObject {
public:
    OAIX509Parameters();
    OAIX509Parameters(QString json);
    ~OAIX509Parameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIX509Extension> getAdditionalExtensions() const;
    void setAdditionalExtensions(const QList<OAIX509Extension> &additional_extensions);
    bool is_additional_extensions_Set() const;
    bool is_additional_extensions_Valid() const;

    QList<QString> getAiaOcspServers() const;
    void setAiaOcspServers(const QList<QString> &aia_ocsp_servers);
    bool is_aia_ocsp_servers_Set() const;
    bool is_aia_ocsp_servers_Valid() const;

    OAICaOptions getCaOptions() const;
    void setCaOptions(const OAICaOptions &ca_options);
    bool is_ca_options_Set() const;
    bool is_ca_options_Valid() const;

    OAIKeyUsage getKeyUsage() const;
    void setKeyUsage(const OAIKeyUsage &key_usage);
    bool is_key_usage_Set() const;
    bool is_key_usage_Valid() const;

    OAINameConstraints getNameConstraints() const;
    void setNameConstraints(const OAINameConstraints &name_constraints);
    bool is_name_constraints_Set() const;
    bool is_name_constraints_Valid() const;

    QList<OAIObjectId> getPolicyIds() const;
    void setPolicyIds(const QList<OAIObjectId> &policy_ids);
    bool is_policy_ids_Set() const;
    bool is_policy_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIX509Extension> m_additional_extensions;
    bool m_additional_extensions_isSet;
    bool m_additional_extensions_isValid;

    QList<QString> m_aia_ocsp_servers;
    bool m_aia_ocsp_servers_isSet;
    bool m_aia_ocsp_servers_isValid;

    OAICaOptions m_ca_options;
    bool m_ca_options_isSet;
    bool m_ca_options_isValid;

    OAIKeyUsage m_key_usage;
    bool m_key_usage_isSet;
    bool m_key_usage_isValid;

    OAINameConstraints m_name_constraints;
    bool m_name_constraints_isSet;
    bool m_name_constraints_isValid;

    QList<OAIObjectId> m_policy_ids;
    bool m_policy_ids_isSet;
    bool m_policy_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIX509Parameters)

#endif // OAIX509Parameters_H
