/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX509Extension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX509Extension::OAIX509Extension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX509Extension::OAIX509Extension() {
    this->initializeModel();
}

OAIX509Extension::~OAIX509Extension() {}

void OAIX509Extension::initializeModel() {

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIX509Extension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX509Extension::fromJsonObject(QJsonObject json) {

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIX509Extension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX509Extension::asJsonObject() const {
    QJsonObject obj;
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_object_id.isSet()) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIX509Extension::isCritical() const {
    return m_critical;
}
void OAIX509Extension::setCritical(const bool &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAIX509Extension::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAIX509Extension::is_critical_Valid() const{
    return m_critical_isValid;
}

OAIObjectId OAIX509Extension::getObjectId() const {
    return m_object_id;
}
void OAIX509Extension::setObjectId(const OAIObjectId &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIX509Extension::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIX509Extension::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QByteArray OAIX509Extension::getValue() const {
    return m_value;
}
void OAIX509Extension::setValue(const QByteArray &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIX509Extension::is_value_Set() const{
    return m_value_isSet;
}

bool OAIX509Extension::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIX509Extension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX509Extension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
