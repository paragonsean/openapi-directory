/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINameConstraints.h
 *
 * Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10
 */

#ifndef OAINameConstraints_H
#define OAINameConstraints_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINameConstraints : public OAIObject {
public:
    OAINameConstraints();
    OAINameConstraints(QString json);
    ~OAINameConstraints() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCritical() const;
    void setCritical(const bool &critical);
    bool is_critical_Set() const;
    bool is_critical_Valid() const;

    QList<QString> getExcludedDnsNames() const;
    void setExcludedDnsNames(const QList<QString> &excluded_dns_names);
    bool is_excluded_dns_names_Set() const;
    bool is_excluded_dns_names_Valid() const;

    QList<QString> getExcludedEmailAddresses() const;
    void setExcludedEmailAddresses(const QList<QString> &excluded_email_addresses);
    bool is_excluded_email_addresses_Set() const;
    bool is_excluded_email_addresses_Valid() const;

    QList<QString> getExcludedIpRanges() const;
    void setExcludedIpRanges(const QList<QString> &excluded_ip_ranges);
    bool is_excluded_ip_ranges_Set() const;
    bool is_excluded_ip_ranges_Valid() const;

    QList<QString> getExcludedUris() const;
    void setExcludedUris(const QList<QString> &excluded_uris);
    bool is_excluded_uris_Set() const;
    bool is_excluded_uris_Valid() const;

    QList<QString> getPermittedDnsNames() const;
    void setPermittedDnsNames(const QList<QString> &permitted_dns_names);
    bool is_permitted_dns_names_Set() const;
    bool is_permitted_dns_names_Valid() const;

    QList<QString> getPermittedEmailAddresses() const;
    void setPermittedEmailAddresses(const QList<QString> &permitted_email_addresses);
    bool is_permitted_email_addresses_Set() const;
    bool is_permitted_email_addresses_Valid() const;

    QList<QString> getPermittedIpRanges() const;
    void setPermittedIpRanges(const QList<QString> &permitted_ip_ranges);
    bool is_permitted_ip_ranges_Set() const;
    bool is_permitted_ip_ranges_Valid() const;

    QList<QString> getPermittedUris() const;
    void setPermittedUris(const QList<QString> &permitted_uris);
    bool is_permitted_uris_Set() const;
    bool is_permitted_uris_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_critical;
    bool m_critical_isSet;
    bool m_critical_isValid;

    QList<QString> m_excluded_dns_names;
    bool m_excluded_dns_names_isSet;
    bool m_excluded_dns_names_isValid;

    QList<QString> m_excluded_email_addresses;
    bool m_excluded_email_addresses_isSet;
    bool m_excluded_email_addresses_isValid;

    QList<QString> m_excluded_ip_ranges;
    bool m_excluded_ip_ranges_isSet;
    bool m_excluded_ip_ranges_isValid;

    QList<QString> m_excluded_uris;
    bool m_excluded_uris_isSet;
    bool m_excluded_uris_isValid;

    QList<QString> m_permitted_dns_names;
    bool m_permitted_dns_names_isSet;
    bool m_permitted_dns_names_isValid;

    QList<QString> m_permitted_email_addresses;
    bool m_permitted_email_addresses_isSet;
    bool m_permitted_email_addresses_isValid;

    QList<QString> m_permitted_ip_ranges;
    bool m_permitted_ip_ranges_isSet;
    bool m_permitted_ip_ranges_isValid;

    QList<QString> m_permitted_uris;
    bool m_permitted_uris_isSet;
    bool m_permitted_uris_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINameConstraints)

#endif // OAINameConstraints_H
