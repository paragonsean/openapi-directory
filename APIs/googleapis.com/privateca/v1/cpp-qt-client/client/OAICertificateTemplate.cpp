/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateTemplate::OAICertificateTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateTemplate::OAICertificateTemplate() {
    this->initializeModel();
}

OAICertificateTemplate::~OAICertificateTemplate() {}

void OAICertificateTemplate::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_identity_constraints_isSet = false;
    m_identity_constraints_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_maximum_lifetime_isSet = false;
    m_maximum_lifetime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_passthrough_extensions_isSet = false;
    m_passthrough_extensions_isValid = false;

    m_predefined_values_isSet = false;
    m_predefined_values_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificateTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateTemplate::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_identity_constraints_isValid = ::OpenAPI::fromJsonValue(m_identity_constraints, json[QString("identityConstraints")]);
    m_identity_constraints_isSet = !json[QString("identityConstraints")].isNull() && m_identity_constraints_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_maximum_lifetime_isValid = ::OpenAPI::fromJsonValue(m_maximum_lifetime, json[QString("maximumLifetime")]);
    m_maximum_lifetime_isSet = !json[QString("maximumLifetime")].isNull() && m_maximum_lifetime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_passthrough_extensions_isValid = ::OpenAPI::fromJsonValue(m_passthrough_extensions, json[QString("passthroughExtensions")]);
    m_passthrough_extensions_isSet = !json[QString("passthroughExtensions")].isNull() && m_passthrough_extensions_isValid;

    m_predefined_values_isValid = ::OpenAPI::fromJsonValue(m_predefined_values, json[QString("predefinedValues")]);
    m_predefined_values_isSet = !json[QString("predefinedValues")].isNull() && m_predefined_values_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificateTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_identity_constraints.isSet()) {
        obj.insert(QString("identityConstraints"), ::OpenAPI::toJsonValue(m_identity_constraints));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_maximum_lifetime_isSet) {
        obj.insert(QString("maximumLifetime"), ::OpenAPI::toJsonValue(m_maximum_lifetime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_passthrough_extensions.isSet()) {
        obj.insert(QString("passthroughExtensions"), ::OpenAPI::toJsonValue(m_passthrough_extensions));
    }
    if (m_predefined_values.isSet()) {
        obj.insert(QString("predefinedValues"), ::OpenAPI::toJsonValue(m_predefined_values));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICertificateTemplate::getCreateTime() const {
    return m_create_time;
}
void OAICertificateTemplate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificateTemplate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificateTemplate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificateTemplate::getDescription() const {
    return m_description;
}
void OAICertificateTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICertificateTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAICertificateTemplate::is_description_Valid() const{
    return m_description_isValid;
}

OAICertificateIdentityConstraints OAICertificateTemplate::getIdentityConstraints() const {
    return m_identity_constraints;
}
void OAICertificateTemplate::setIdentityConstraints(const OAICertificateIdentityConstraints &identity_constraints) {
    m_identity_constraints = identity_constraints;
    m_identity_constraints_isSet = true;
}

bool OAICertificateTemplate::is_identity_constraints_Set() const{
    return m_identity_constraints_isSet;
}

bool OAICertificateTemplate::is_identity_constraints_Valid() const{
    return m_identity_constraints_isValid;
}

QMap<QString, QString> OAICertificateTemplate::getLabels() const {
    return m_labels;
}
void OAICertificateTemplate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificateTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificateTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificateTemplate::getMaximumLifetime() const {
    return m_maximum_lifetime;
}
void OAICertificateTemplate::setMaximumLifetime(const QString &maximum_lifetime) {
    m_maximum_lifetime = maximum_lifetime;
    m_maximum_lifetime_isSet = true;
}

bool OAICertificateTemplate::is_maximum_lifetime_Set() const{
    return m_maximum_lifetime_isSet;
}

bool OAICertificateTemplate::is_maximum_lifetime_Valid() const{
    return m_maximum_lifetime_isValid;
}

QString OAICertificateTemplate::getName() const {
    return m_name;
}
void OAICertificateTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateTemplate::is_name_Valid() const{
    return m_name_isValid;
}

OAICertificateExtensionConstraints OAICertificateTemplate::getPassthroughExtensions() const {
    return m_passthrough_extensions;
}
void OAICertificateTemplate::setPassthroughExtensions(const OAICertificateExtensionConstraints &passthrough_extensions) {
    m_passthrough_extensions = passthrough_extensions;
    m_passthrough_extensions_isSet = true;
}

bool OAICertificateTemplate::is_passthrough_extensions_Set() const{
    return m_passthrough_extensions_isSet;
}

bool OAICertificateTemplate::is_passthrough_extensions_Valid() const{
    return m_passthrough_extensions_isValid;
}

OAIX509Parameters OAICertificateTemplate::getPredefinedValues() const {
    return m_predefined_values;
}
void OAICertificateTemplate::setPredefinedValues(const OAIX509Parameters &predefined_values) {
    m_predefined_values = predefined_values;
    m_predefined_values_isSet = true;
}

bool OAICertificateTemplate::is_predefined_values_Set() const{
    return m_predefined_values_isSet;
}

bool OAICertificateTemplate::is_predefined_values_Valid() const{
    return m_predefined_values_isValid;
}

QString OAICertificateTemplate::getUpdateTime() const {
    return m_update_time;
}
void OAICertificateTemplate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificateTemplate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificateTemplate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificateTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
