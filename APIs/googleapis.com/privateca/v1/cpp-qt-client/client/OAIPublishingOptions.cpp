/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishingOptions::OAIPublishingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishingOptions::OAIPublishingOptions() {
    this->initializeModel();
}

OAIPublishingOptions::~OAIPublishingOptions() {}

void OAIPublishingOptions::initializeModel() {

    m_encoding_format_isSet = false;
    m_encoding_format_isValid = false;

    m_publish_ca_cert_isSet = false;
    m_publish_ca_cert_isValid = false;

    m_publish_crl_isSet = false;
    m_publish_crl_isValid = false;
}

void OAIPublishingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishingOptions::fromJsonObject(QJsonObject json) {

    m_encoding_format_isValid = ::OpenAPI::fromJsonValue(m_encoding_format, json[QString("encodingFormat")]);
    m_encoding_format_isSet = !json[QString("encodingFormat")].isNull() && m_encoding_format_isValid;

    m_publish_ca_cert_isValid = ::OpenAPI::fromJsonValue(m_publish_ca_cert, json[QString("publishCaCert")]);
    m_publish_ca_cert_isSet = !json[QString("publishCaCert")].isNull() && m_publish_ca_cert_isValid;

    m_publish_crl_isValid = ::OpenAPI::fromJsonValue(m_publish_crl, json[QString("publishCrl")]);
    m_publish_crl_isSet = !json[QString("publishCrl")].isNull() && m_publish_crl_isValid;
}

QString OAIPublishingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_format_isSet) {
        obj.insert(QString("encodingFormat"), ::OpenAPI::toJsonValue(m_encoding_format));
    }
    if (m_publish_ca_cert_isSet) {
        obj.insert(QString("publishCaCert"), ::OpenAPI::toJsonValue(m_publish_ca_cert));
    }
    if (m_publish_crl_isSet) {
        obj.insert(QString("publishCrl"), ::OpenAPI::toJsonValue(m_publish_crl));
    }
    return obj;
}

QString OAIPublishingOptions::getEncodingFormat() const {
    return m_encoding_format;
}
void OAIPublishingOptions::setEncodingFormat(const QString &encoding_format) {
    m_encoding_format = encoding_format;
    m_encoding_format_isSet = true;
}

bool OAIPublishingOptions::is_encoding_format_Set() const{
    return m_encoding_format_isSet;
}

bool OAIPublishingOptions::is_encoding_format_Valid() const{
    return m_encoding_format_isValid;
}

bool OAIPublishingOptions::isPublishCaCert() const {
    return m_publish_ca_cert;
}
void OAIPublishingOptions::setPublishCaCert(const bool &publish_ca_cert) {
    m_publish_ca_cert = publish_ca_cert;
    m_publish_ca_cert_isSet = true;
}

bool OAIPublishingOptions::is_publish_ca_cert_Set() const{
    return m_publish_ca_cert_isSet;
}

bool OAIPublishingOptions::is_publish_ca_cert_Valid() const{
    return m_publish_ca_cert_isValid;
}

bool OAIPublishingOptions::isPublishCrl() const {
    return m_publish_crl;
}
void OAIPublishingOptions::setPublishCrl(const bool &publish_crl) {
    m_publish_crl = publish_crl;
    m_publish_crl_isSet = true;
}

bool OAIPublishingOptions::is_publish_crl_Set() const{
    return m_publish_crl_isSet;
}

bool OAIPublishingOptions::is_publish_crl_Valid() const{
    return m_publish_crl_isValid;
}

bool OAIPublishingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_ca_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_crl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
