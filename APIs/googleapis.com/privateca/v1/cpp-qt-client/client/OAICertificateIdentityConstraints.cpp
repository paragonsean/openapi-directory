/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateIdentityConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateIdentityConstraints::OAICertificateIdentityConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateIdentityConstraints::OAICertificateIdentityConstraints() {
    this->initializeModel();
}

OAICertificateIdentityConstraints::~OAICertificateIdentityConstraints() {}

void OAICertificateIdentityConstraints::initializeModel() {

    m_allow_subject_alt_names_passthrough_isSet = false;
    m_allow_subject_alt_names_passthrough_isValid = false;

    m_allow_subject_passthrough_isSet = false;
    m_allow_subject_passthrough_isValid = false;

    m_cel_expression_isSet = false;
    m_cel_expression_isValid = false;
}

void OAICertificateIdentityConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateIdentityConstraints::fromJsonObject(QJsonObject json) {

    m_allow_subject_alt_names_passthrough_isValid = ::OpenAPI::fromJsonValue(m_allow_subject_alt_names_passthrough, json[QString("allowSubjectAltNamesPassthrough")]);
    m_allow_subject_alt_names_passthrough_isSet = !json[QString("allowSubjectAltNamesPassthrough")].isNull() && m_allow_subject_alt_names_passthrough_isValid;

    m_allow_subject_passthrough_isValid = ::OpenAPI::fromJsonValue(m_allow_subject_passthrough, json[QString("allowSubjectPassthrough")]);
    m_allow_subject_passthrough_isSet = !json[QString("allowSubjectPassthrough")].isNull() && m_allow_subject_passthrough_isValid;

    m_cel_expression_isValid = ::OpenAPI::fromJsonValue(m_cel_expression, json[QString("celExpression")]);
    m_cel_expression_isSet = !json[QString("celExpression")].isNull() && m_cel_expression_isValid;
}

QString OAICertificateIdentityConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateIdentityConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_subject_alt_names_passthrough_isSet) {
        obj.insert(QString("allowSubjectAltNamesPassthrough"), ::OpenAPI::toJsonValue(m_allow_subject_alt_names_passthrough));
    }
    if (m_allow_subject_passthrough_isSet) {
        obj.insert(QString("allowSubjectPassthrough"), ::OpenAPI::toJsonValue(m_allow_subject_passthrough));
    }
    if (m_cel_expression.isSet()) {
        obj.insert(QString("celExpression"), ::OpenAPI::toJsonValue(m_cel_expression));
    }
    return obj;
}

bool OAICertificateIdentityConstraints::isAllowSubjectAltNamesPassthrough() const {
    return m_allow_subject_alt_names_passthrough;
}
void OAICertificateIdentityConstraints::setAllowSubjectAltNamesPassthrough(const bool &allow_subject_alt_names_passthrough) {
    m_allow_subject_alt_names_passthrough = allow_subject_alt_names_passthrough;
    m_allow_subject_alt_names_passthrough_isSet = true;
}

bool OAICertificateIdentityConstraints::is_allow_subject_alt_names_passthrough_Set() const{
    return m_allow_subject_alt_names_passthrough_isSet;
}

bool OAICertificateIdentityConstraints::is_allow_subject_alt_names_passthrough_Valid() const{
    return m_allow_subject_alt_names_passthrough_isValid;
}

bool OAICertificateIdentityConstraints::isAllowSubjectPassthrough() const {
    return m_allow_subject_passthrough;
}
void OAICertificateIdentityConstraints::setAllowSubjectPassthrough(const bool &allow_subject_passthrough) {
    m_allow_subject_passthrough = allow_subject_passthrough;
    m_allow_subject_passthrough_isSet = true;
}

bool OAICertificateIdentityConstraints::is_allow_subject_passthrough_Set() const{
    return m_allow_subject_passthrough_isSet;
}

bool OAICertificateIdentityConstraints::is_allow_subject_passthrough_Valid() const{
    return m_allow_subject_passthrough_isValid;
}

OAIExpr OAICertificateIdentityConstraints::getCelExpression() const {
    return m_cel_expression;
}
void OAICertificateIdentityConstraints::setCelExpression(const OAIExpr &cel_expression) {
    m_cel_expression = cel_expression;
    m_cel_expression_isSet = true;
}

bool OAICertificateIdentityConstraints::is_cel_expression_Set() const{
    return m_cel_expression_isSet;
}

bool OAICertificateIdentityConstraints::is_cel_expression_Valid() const{
    return m_cel_expression_isValid;
}

bool OAICertificateIdentityConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_subject_alt_names_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_subject_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cel_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateIdentityConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
