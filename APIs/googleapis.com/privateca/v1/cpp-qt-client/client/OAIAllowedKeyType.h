/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAllowedKeyType.h
 *
 * Describes a \&quot;type\&quot; of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
 */

#ifndef OAIAllowedKeyType_H
#define OAIAllowedKeyType_H

#include <QJsonObject>

#include "OAIEcKeyType.h"
#include "OAIRsaKeyType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEcKeyType;
class OAIRsaKeyType;

class OAIAllowedKeyType : public OAIObject {
public:
    OAIAllowedKeyType();
    OAIAllowedKeyType(QString json);
    ~OAIAllowedKeyType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEcKeyType getEllipticCurve() const;
    void setEllipticCurve(const OAIEcKeyType &elliptic_curve);
    bool is_elliptic_curve_Set() const;
    bool is_elliptic_curve_Valid() const;

    OAIRsaKeyType getRsa() const;
    void setRsa(const OAIRsaKeyType &rsa);
    bool is_rsa_Set() const;
    bool is_rsa_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEcKeyType m_elliptic_curve;
    bool m_elliptic_curve_isSet;
    bool m_elliptic_curve_isValid;

    OAIRsaKeyType m_rsa;
    bool m_rsa_isSet;
    bool m_rsa_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAllowedKeyType)

#endif // OAIAllowedKeyType_H
