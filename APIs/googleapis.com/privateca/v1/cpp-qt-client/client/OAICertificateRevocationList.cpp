/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateRevocationList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateRevocationList::OAICertificateRevocationList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateRevocationList::OAICertificateRevocationList() {
    this->initializeModel();
}

OAICertificateRevocationList::~OAICertificateRevocationList() {}

void OAICertificateRevocationList::initializeModel() {

    m_access_url_isSet = false;
    m_access_url_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pem_crl_isSet = false;
    m_pem_crl_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_revoked_certificates_isSet = false;
    m_revoked_certificates_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificateRevocationList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateRevocationList::fromJsonObject(QJsonObject json) {

    m_access_url_isValid = ::OpenAPI::fromJsonValue(m_access_url, json[QString("accessUrl")]);
    m_access_url_isSet = !json[QString("accessUrl")].isNull() && m_access_url_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pem_crl_isValid = ::OpenAPI::fromJsonValue(m_pem_crl, json[QString("pemCrl")]);
    m_pem_crl_isSet = !json[QString("pemCrl")].isNull() && m_pem_crl_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_revoked_certificates_isValid = ::OpenAPI::fromJsonValue(m_revoked_certificates, json[QString("revokedCertificates")]);
    m_revoked_certificates_isSet = !json[QString("revokedCertificates")].isNull() && m_revoked_certificates_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequenceNumber")]);
    m_sequence_number_isSet = !json[QString("sequenceNumber")].isNull() && m_sequence_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificateRevocationList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateRevocationList::asJsonObject() const {
    QJsonObject obj;
    if (m_access_url_isSet) {
        obj.insert(QString("accessUrl"), ::OpenAPI::toJsonValue(m_access_url));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pem_crl_isSet) {
        obj.insert(QString("pemCrl"), ::OpenAPI::toJsonValue(m_pem_crl));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_revoked_certificates.size() > 0) {
        obj.insert(QString("revokedCertificates"), ::OpenAPI::toJsonValue(m_revoked_certificates));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICertificateRevocationList::getAccessUrl() const {
    return m_access_url;
}
void OAICertificateRevocationList::setAccessUrl(const QString &access_url) {
    m_access_url = access_url;
    m_access_url_isSet = true;
}

bool OAICertificateRevocationList::is_access_url_Set() const{
    return m_access_url_isSet;
}

bool OAICertificateRevocationList::is_access_url_Valid() const{
    return m_access_url_isValid;
}

QString OAICertificateRevocationList::getCreateTime() const {
    return m_create_time;
}
void OAICertificateRevocationList::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificateRevocationList::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificateRevocationList::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QMap<QString, QString> OAICertificateRevocationList::getLabels() const {
    return m_labels;
}
void OAICertificateRevocationList::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificateRevocationList::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificateRevocationList::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificateRevocationList::getName() const {
    return m_name;
}
void OAICertificateRevocationList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateRevocationList::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateRevocationList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICertificateRevocationList::getPemCrl() const {
    return m_pem_crl;
}
void OAICertificateRevocationList::setPemCrl(const QString &pem_crl) {
    m_pem_crl = pem_crl;
    m_pem_crl_isSet = true;
}

bool OAICertificateRevocationList::is_pem_crl_Set() const{
    return m_pem_crl_isSet;
}

bool OAICertificateRevocationList::is_pem_crl_Valid() const{
    return m_pem_crl_isValid;
}

QString OAICertificateRevocationList::getRevisionId() const {
    return m_revision_id;
}
void OAICertificateRevocationList::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAICertificateRevocationList::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAICertificateRevocationList::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QList<OAIRevokedCertificate> OAICertificateRevocationList::getRevokedCertificates() const {
    return m_revoked_certificates;
}
void OAICertificateRevocationList::setRevokedCertificates(const QList<OAIRevokedCertificate> &revoked_certificates) {
    m_revoked_certificates = revoked_certificates;
    m_revoked_certificates_isSet = true;
}

bool OAICertificateRevocationList::is_revoked_certificates_Set() const{
    return m_revoked_certificates_isSet;
}

bool OAICertificateRevocationList::is_revoked_certificates_Valid() const{
    return m_revoked_certificates_isValid;
}

QString OAICertificateRevocationList::getSequenceNumber() const {
    return m_sequence_number;
}
void OAICertificateRevocationList::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAICertificateRevocationList::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAICertificateRevocationList::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

QString OAICertificateRevocationList::getState() const {
    return m_state;
}
void OAICertificateRevocationList::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificateRevocationList::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificateRevocationList::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICertificateRevocationList::getUpdateTime() const {
    return m_update_time;
}
void OAICertificateRevocationList::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificateRevocationList::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificateRevocationList::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificateRevocationList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_crl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateRevocationList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
