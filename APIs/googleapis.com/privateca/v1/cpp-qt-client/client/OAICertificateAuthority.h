/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificateAuthority.h
 *
 * A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 */

#ifndef OAICertificateAuthority_H
#define OAICertificateAuthority_H

#include <QJsonObject>

#include "OAIAccessUrls.h"
#include "OAICertificateConfig.h"
#include "OAICertificateDescription.h"
#include "OAIKeyVersionSpec.h"
#include "OAISubordinateConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessUrls;
class OAICertificateDescription;
class OAICertificateConfig;
class OAIKeyVersionSpec;
class OAISubordinateConfig;

class OAICertificateAuthority : public OAIObject {
public:
    OAICertificateAuthority();
    OAICertificateAuthority(QString json);
    ~OAICertificateAuthority() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessUrls getAccessUrls() const;
    void setAccessUrls(const OAIAccessUrls &access_urls);
    bool is_access_urls_Set() const;
    bool is_access_urls_Valid() const;

    QList<OAICertificateDescription> getCaCertificateDescriptions() const;
    void setCaCertificateDescriptions(const QList<OAICertificateDescription> &ca_certificate_descriptions);
    bool is_ca_certificate_descriptions_Set() const;
    bool is_ca_certificate_descriptions_Valid() const;

    OAICertificateConfig getConfig() const;
    void setConfig(const OAICertificateConfig &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getGcsBucket() const;
    void setGcsBucket(const QString &gcs_bucket);
    bool is_gcs_bucket_Set() const;
    bool is_gcs_bucket_Valid() const;

    OAIKeyVersionSpec getKeySpec() const;
    void setKeySpec(const OAIKeyVersionSpec &key_spec);
    bool is_key_spec_Set() const;
    bool is_key_spec_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLifetime() const;
    void setLifetime(const QString &lifetime);
    bool is_lifetime_Set() const;
    bool is_lifetime_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getPemCaCertificates() const;
    void setPemCaCertificates(const QList<QString> &pem_ca_certificates);
    bool is_pem_ca_certificates_Set() const;
    bool is_pem_ca_certificates_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAISubordinateConfig getSubordinateConfig() const;
    void setSubordinateConfig(const OAISubordinateConfig &subordinate_config);
    bool is_subordinate_config_Set() const;
    bool is_subordinate_config_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessUrls m_access_urls;
    bool m_access_urls_isSet;
    bool m_access_urls_isValid;

    QList<OAICertificateDescription> m_ca_certificate_descriptions;
    bool m_ca_certificate_descriptions_isSet;
    bool m_ca_certificate_descriptions_isValid;

    OAICertificateConfig m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_gcs_bucket;
    bool m_gcs_bucket_isSet;
    bool m_gcs_bucket_isValid;

    OAIKeyVersionSpec m_key_spec;
    bool m_key_spec_isSet;
    bool m_key_spec_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_lifetime;
    bool m_lifetime_isSet;
    bool m_lifetime_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_pem_ca_certificates;
    bool m_pem_ca_certificates_isSet;
    bool m_pem_ca_certificates_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAISubordinateConfig m_subordinate_config;
    bool m_subordinate_config_isSet;
    bool m_subordinate_config_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificateAuthority)

#endif // OAICertificateAuthority_H
