/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssuancePolicy.h
 *
 * Defines controls over all certificate issuance within a CaPool.
 */

#ifndef OAIIssuancePolicy_H
#define OAIIssuancePolicy_H

#include <QJsonObject>

#include "OAIAllowedKeyType.h"
#include "OAICertificateExtensionConstraints.h"
#include "OAICertificateIdentityConstraints.h"
#include "OAIIssuanceModes.h"
#include "OAIX509Parameters.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIssuanceModes;
class OAIAllowedKeyType;
class OAIX509Parameters;
class OAICertificateIdentityConstraints;
class OAICertificateExtensionConstraints;

class OAIIssuancePolicy : public OAIObject {
public:
    OAIIssuancePolicy();
    OAIIssuancePolicy(QString json);
    ~OAIIssuancePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIssuanceModes getAllowedIssuanceModes() const;
    void setAllowedIssuanceModes(const OAIIssuanceModes &allowed_issuance_modes);
    bool is_allowed_issuance_modes_Set() const;
    bool is_allowed_issuance_modes_Valid() const;

    QList<OAIAllowedKeyType> getAllowedKeyTypes() const;
    void setAllowedKeyTypes(const QList<OAIAllowedKeyType> &allowed_key_types);
    bool is_allowed_key_types_Set() const;
    bool is_allowed_key_types_Valid() const;

    OAIX509Parameters getBaselineValues() const;
    void setBaselineValues(const OAIX509Parameters &baseline_values);
    bool is_baseline_values_Set() const;
    bool is_baseline_values_Valid() const;

    OAICertificateIdentityConstraints getIdentityConstraints() const;
    void setIdentityConstraints(const OAICertificateIdentityConstraints &identity_constraints);
    bool is_identity_constraints_Set() const;
    bool is_identity_constraints_Valid() const;

    QString getMaximumLifetime() const;
    void setMaximumLifetime(const QString &maximum_lifetime);
    bool is_maximum_lifetime_Set() const;
    bool is_maximum_lifetime_Valid() const;

    OAICertificateExtensionConstraints getPassthroughExtensions() const;
    void setPassthroughExtensions(const OAICertificateExtensionConstraints &passthrough_extensions);
    bool is_passthrough_extensions_Set() const;
    bool is_passthrough_extensions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIssuanceModes m_allowed_issuance_modes;
    bool m_allowed_issuance_modes_isSet;
    bool m_allowed_issuance_modes_isValid;

    QList<OAIAllowedKeyType> m_allowed_key_types;
    bool m_allowed_key_types_isSet;
    bool m_allowed_key_types_isValid;

    OAIX509Parameters m_baseline_values;
    bool m_baseline_values_isSet;
    bool m_baseline_values_isValid;

    OAICertificateIdentityConstraints m_identity_constraints;
    bool m_identity_constraints_isSet;
    bool m_identity_constraints_isValid;

    QString m_maximum_lifetime;
    bool m_maximum_lifetime_isSet;
    bool m_maximum_lifetime_isValid;

    OAICertificateExtensionConstraints m_passthrough_extensions;
    bool m_passthrough_extensions_isSet;
    bool m_passthrough_extensions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssuancePolicy)

#endif // OAIIssuancePolicy_H
