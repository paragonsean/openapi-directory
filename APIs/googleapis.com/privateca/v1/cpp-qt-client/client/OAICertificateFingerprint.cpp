/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateFingerprint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateFingerprint::OAICertificateFingerprint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateFingerprint::OAICertificateFingerprint() {
    this->initializeModel();
}

OAICertificateFingerprint::~OAICertificateFingerprint() {}

void OAICertificateFingerprint::initializeModel() {

    m_sha256_hash_isSet = false;
    m_sha256_hash_isValid = false;
}

void OAICertificateFingerprint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateFingerprint::fromJsonObject(QJsonObject json) {

    m_sha256_hash_isValid = ::OpenAPI::fromJsonValue(m_sha256_hash, json[QString("sha256Hash")]);
    m_sha256_hash_isSet = !json[QString("sha256Hash")].isNull() && m_sha256_hash_isValid;
}

QString OAICertificateFingerprint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateFingerprint::asJsonObject() const {
    QJsonObject obj;
    if (m_sha256_hash_isSet) {
        obj.insert(QString("sha256Hash"), ::OpenAPI::toJsonValue(m_sha256_hash));
    }
    return obj;
}

QString OAICertificateFingerprint::getSha256Hash() const {
    return m_sha256_hash;
}
void OAICertificateFingerprint::setSha256Hash(const QString &sha256_hash) {
    m_sha256_hash = sha256_hash;
    m_sha256_hash_isSet = true;
}

bool OAICertificateFingerprint::is_sha256_hash_Set() const{
    return m_sha256_hash_isSet;
}

bool OAICertificateFingerprint::is_sha256_hash_Valid() const{
    return m_sha256_hash_isValid;
}

bool OAICertificateFingerprint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha256_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateFingerprint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
