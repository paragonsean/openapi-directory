/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyUsage::OAIKeyUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyUsage::OAIKeyUsage() {
    this->initializeModel();
}

OAIKeyUsage::~OAIKeyUsage() {}

void OAIKeyUsage::initializeModel() {

    m_base_key_usage_isSet = false;
    m_base_key_usage_isValid = false;

    m_extended_key_usage_isSet = false;
    m_extended_key_usage_isValid = false;

    m_unknown_extended_key_usages_isSet = false;
    m_unknown_extended_key_usages_isValid = false;
}

void OAIKeyUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyUsage::fromJsonObject(QJsonObject json) {

    m_base_key_usage_isValid = ::OpenAPI::fromJsonValue(m_base_key_usage, json[QString("baseKeyUsage")]);
    m_base_key_usage_isSet = !json[QString("baseKeyUsage")].isNull() && m_base_key_usage_isValid;

    m_extended_key_usage_isValid = ::OpenAPI::fromJsonValue(m_extended_key_usage, json[QString("extendedKeyUsage")]);
    m_extended_key_usage_isSet = !json[QString("extendedKeyUsage")].isNull() && m_extended_key_usage_isValid;

    m_unknown_extended_key_usages_isValid = ::OpenAPI::fromJsonValue(m_unknown_extended_key_usages, json[QString("unknownExtendedKeyUsages")]);
    m_unknown_extended_key_usages_isSet = !json[QString("unknownExtendedKeyUsages")].isNull() && m_unknown_extended_key_usages_isValid;
}

QString OAIKeyUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_base_key_usage.isSet()) {
        obj.insert(QString("baseKeyUsage"), ::OpenAPI::toJsonValue(m_base_key_usage));
    }
    if (m_extended_key_usage.isSet()) {
        obj.insert(QString("extendedKeyUsage"), ::OpenAPI::toJsonValue(m_extended_key_usage));
    }
    if (m_unknown_extended_key_usages.size() > 0) {
        obj.insert(QString("unknownExtendedKeyUsages"), ::OpenAPI::toJsonValue(m_unknown_extended_key_usages));
    }
    return obj;
}

OAIKeyUsageOptions OAIKeyUsage::getBaseKeyUsage() const {
    return m_base_key_usage;
}
void OAIKeyUsage::setBaseKeyUsage(const OAIKeyUsageOptions &base_key_usage) {
    m_base_key_usage = base_key_usage;
    m_base_key_usage_isSet = true;
}

bool OAIKeyUsage::is_base_key_usage_Set() const{
    return m_base_key_usage_isSet;
}

bool OAIKeyUsage::is_base_key_usage_Valid() const{
    return m_base_key_usage_isValid;
}

OAIExtendedKeyUsageOptions OAIKeyUsage::getExtendedKeyUsage() const {
    return m_extended_key_usage;
}
void OAIKeyUsage::setExtendedKeyUsage(const OAIExtendedKeyUsageOptions &extended_key_usage) {
    m_extended_key_usage = extended_key_usage;
    m_extended_key_usage_isSet = true;
}

bool OAIKeyUsage::is_extended_key_usage_Set() const{
    return m_extended_key_usage_isSet;
}

bool OAIKeyUsage::is_extended_key_usage_Valid() const{
    return m_extended_key_usage_isValid;
}

QList<OAIObjectId> OAIKeyUsage::getUnknownExtendedKeyUsages() const {
    return m_unknown_extended_key_usages;
}
void OAIKeyUsage::setUnknownExtendedKeyUsages(const QList<OAIObjectId> &unknown_extended_key_usages) {
    m_unknown_extended_key_usages = unknown_extended_key_usages;
    m_unknown_extended_key_usages_isSet = true;
}

bool OAIKeyUsage::is_unknown_extended_key_usages_Set() const{
    return m_unknown_extended_key_usages_isSet;
}

bool OAIKeyUsage::is_unknown_extended_key_usages_Valid() const{
    return m_unknown_extended_key_usages_isValid;
}

bool OAIKeyUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_extended_key_usages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
