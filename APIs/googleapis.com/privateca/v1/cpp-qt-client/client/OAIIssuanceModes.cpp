/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuanceModes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuanceModes::OAIIssuanceModes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuanceModes::OAIIssuanceModes() {
    this->initializeModel();
}

OAIIssuanceModes::~OAIIssuanceModes() {}

void OAIIssuanceModes::initializeModel() {

    m_allow_config_based_issuance_isSet = false;
    m_allow_config_based_issuance_isValid = false;

    m_allow_csr_based_issuance_isSet = false;
    m_allow_csr_based_issuance_isValid = false;
}

void OAIIssuanceModes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuanceModes::fromJsonObject(QJsonObject json) {

    m_allow_config_based_issuance_isValid = ::OpenAPI::fromJsonValue(m_allow_config_based_issuance, json[QString("allowConfigBasedIssuance")]);
    m_allow_config_based_issuance_isSet = !json[QString("allowConfigBasedIssuance")].isNull() && m_allow_config_based_issuance_isValid;

    m_allow_csr_based_issuance_isValid = ::OpenAPI::fromJsonValue(m_allow_csr_based_issuance, json[QString("allowCsrBasedIssuance")]);
    m_allow_csr_based_issuance_isSet = !json[QString("allowCsrBasedIssuance")].isNull() && m_allow_csr_based_issuance_isValid;
}

QString OAIIssuanceModes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuanceModes::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_config_based_issuance_isSet) {
        obj.insert(QString("allowConfigBasedIssuance"), ::OpenAPI::toJsonValue(m_allow_config_based_issuance));
    }
    if (m_allow_csr_based_issuance_isSet) {
        obj.insert(QString("allowCsrBasedIssuance"), ::OpenAPI::toJsonValue(m_allow_csr_based_issuance));
    }
    return obj;
}

bool OAIIssuanceModes::isAllowConfigBasedIssuance() const {
    return m_allow_config_based_issuance;
}
void OAIIssuanceModes::setAllowConfigBasedIssuance(const bool &allow_config_based_issuance) {
    m_allow_config_based_issuance = allow_config_based_issuance;
    m_allow_config_based_issuance_isSet = true;
}

bool OAIIssuanceModes::is_allow_config_based_issuance_Set() const{
    return m_allow_config_based_issuance_isSet;
}

bool OAIIssuanceModes::is_allow_config_based_issuance_Valid() const{
    return m_allow_config_based_issuance_isValid;
}

bool OAIIssuanceModes::isAllowCsrBasedIssuance() const {
    return m_allow_csr_based_issuance;
}
void OAIIssuanceModes::setAllowCsrBasedIssuance(const bool &allow_csr_based_issuance) {
    m_allow_csr_based_issuance = allow_csr_based_issuance;
    m_allow_csr_based_issuance_isSet = true;
}

bool OAIIssuanceModes::is_allow_csr_based_issuance_Set() const{
    return m_allow_csr_based_issuance_isSet;
}

bool OAIIssuanceModes::is_allow_csr_based_issuance_Valid() const{
    return m_allow_csr_based_issuance_isValid;
}

bool OAIIssuanceModes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_config_based_issuance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_csr_based_issuance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuanceModes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
