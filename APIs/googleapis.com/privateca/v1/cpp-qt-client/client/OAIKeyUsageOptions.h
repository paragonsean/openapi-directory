/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKeyUsageOptions.h
 *
 * KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 */

#ifndef OAIKeyUsageOptions_H
#define OAIKeyUsageOptions_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIKeyUsageOptions : public OAIObject {
public:
    OAIKeyUsageOptions();
    OAIKeyUsageOptions(QString json);
    ~OAIKeyUsageOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCertSign() const;
    void setCertSign(const bool &cert_sign);
    bool is_cert_sign_Set() const;
    bool is_cert_sign_Valid() const;

    bool isContentCommitment() const;
    void setContentCommitment(const bool &content_commitment);
    bool is_content_commitment_Set() const;
    bool is_content_commitment_Valid() const;

    bool isCrlSign() const;
    void setCrlSign(const bool &crl_sign);
    bool is_crl_sign_Set() const;
    bool is_crl_sign_Valid() const;

    bool isDataEncipherment() const;
    void setDataEncipherment(const bool &data_encipherment);
    bool is_data_encipherment_Set() const;
    bool is_data_encipherment_Valid() const;

    bool isDecipherOnly() const;
    void setDecipherOnly(const bool &decipher_only);
    bool is_decipher_only_Set() const;
    bool is_decipher_only_Valid() const;

    bool isDigitalSignature() const;
    void setDigitalSignature(const bool &digital_signature);
    bool is_digital_signature_Set() const;
    bool is_digital_signature_Valid() const;

    bool isEncipherOnly() const;
    void setEncipherOnly(const bool &encipher_only);
    bool is_encipher_only_Set() const;
    bool is_encipher_only_Valid() const;

    bool isKeyAgreement() const;
    void setKeyAgreement(const bool &key_agreement);
    bool is_key_agreement_Set() const;
    bool is_key_agreement_Valid() const;

    bool isKeyEncipherment() const;
    void setKeyEncipherment(const bool &key_encipherment);
    bool is_key_encipherment_Set() const;
    bool is_key_encipherment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cert_sign;
    bool m_cert_sign_isSet;
    bool m_cert_sign_isValid;

    bool m_content_commitment;
    bool m_content_commitment_isSet;
    bool m_content_commitment_isValid;

    bool m_crl_sign;
    bool m_crl_sign_isSet;
    bool m_crl_sign_isValid;

    bool m_data_encipherment;
    bool m_data_encipherment_isSet;
    bool m_data_encipherment_isValid;

    bool m_decipher_only;
    bool m_decipher_only_isSet;
    bool m_decipher_only_isValid;

    bool m_digital_signature;
    bool m_digital_signature_isSet;
    bool m_digital_signature_isValid;

    bool m_encipher_only;
    bool m_encipher_only_isSet;
    bool m_encipher_only_isValid;

    bool m_key_agreement;
    bool m_key_agreement_isSet;
    bool m_key_agreement_isValid;

    bool m_key_encipherment;
    bool m_key_encipherment_isSet;
    bool m_key_encipherment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKeyUsageOptions)

#endif // OAIKeyUsageOptions_H
