/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokedCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokedCertificate::OAIRevokedCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokedCertificate::OAIRevokedCertificate() {
    this->initializeModel();
}

OAIRevokedCertificate::~OAIRevokedCertificate() {}

void OAIRevokedCertificate::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_hex_serial_number_isSet = false;
    m_hex_serial_number_isValid = false;

    m_revocation_reason_isSet = false;
    m_revocation_reason_isValid = false;
}

void OAIRevokedCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokedCertificate::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_hex_serial_number_isValid = ::OpenAPI::fromJsonValue(m_hex_serial_number, json[QString("hexSerialNumber")]);
    m_hex_serial_number_isSet = !json[QString("hexSerialNumber")].isNull() && m_hex_serial_number_isValid;

    m_revocation_reason_isValid = ::OpenAPI::fromJsonValue(m_revocation_reason, json[QString("revocationReason")]);
    m_revocation_reason_isSet = !json[QString("revocationReason")].isNull() && m_revocation_reason_isValid;
}

QString OAIRevokedCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokedCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_hex_serial_number_isSet) {
        obj.insert(QString("hexSerialNumber"), ::OpenAPI::toJsonValue(m_hex_serial_number));
    }
    if (m_revocation_reason_isSet) {
        obj.insert(QString("revocationReason"), ::OpenAPI::toJsonValue(m_revocation_reason));
    }
    return obj;
}

QString OAIRevokedCertificate::getCertificate() const {
    return m_certificate;
}
void OAIRevokedCertificate::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIRevokedCertificate::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIRevokedCertificate::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIRevokedCertificate::getHexSerialNumber() const {
    return m_hex_serial_number;
}
void OAIRevokedCertificate::setHexSerialNumber(const QString &hex_serial_number) {
    m_hex_serial_number = hex_serial_number;
    m_hex_serial_number_isSet = true;
}

bool OAIRevokedCertificate::is_hex_serial_number_Set() const{
    return m_hex_serial_number_isSet;
}

bool OAIRevokedCertificate::is_hex_serial_number_Valid() const{
    return m_hex_serial_number_isValid;
}

QString OAIRevokedCertificate::getRevocationReason() const {
    return m_revocation_reason;
}
void OAIRevokedCertificate::setRevocationReason(const QString &revocation_reason) {
    m_revocation_reason = revocation_reason;
    m_revocation_reason_isSet = true;
}

bool OAIRevokedCertificate::is_revocation_reason_Set() const{
    return m_revocation_reason_isSet;
}

bool OAIRevokedCertificate::is_revocation_reason_Valid() const{
    return m_revocation_reason_isValid;
}

bool OAIRevokedCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokedCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
