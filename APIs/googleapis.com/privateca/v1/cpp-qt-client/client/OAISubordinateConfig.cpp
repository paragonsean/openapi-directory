/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubordinateConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubordinateConfig::OAISubordinateConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubordinateConfig::OAISubordinateConfig() {
    this->initializeModel();
}

OAISubordinateConfig::~OAISubordinateConfig() {}

void OAISubordinateConfig::initializeModel() {

    m_certificate_authority_isSet = false;
    m_certificate_authority_isValid = false;

    m_pem_issuer_chain_isSet = false;
    m_pem_issuer_chain_isValid = false;
}

void OAISubordinateConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubordinateConfig::fromJsonObject(QJsonObject json) {

    m_certificate_authority_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority, json[QString("certificateAuthority")]);
    m_certificate_authority_isSet = !json[QString("certificateAuthority")].isNull() && m_certificate_authority_isValid;

    m_pem_issuer_chain_isValid = ::OpenAPI::fromJsonValue(m_pem_issuer_chain, json[QString("pemIssuerChain")]);
    m_pem_issuer_chain_isSet = !json[QString("pemIssuerChain")].isNull() && m_pem_issuer_chain_isValid;
}

QString OAISubordinateConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubordinateConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_authority_isSet) {
        obj.insert(QString("certificateAuthority"), ::OpenAPI::toJsonValue(m_certificate_authority));
    }
    if (m_pem_issuer_chain.isSet()) {
        obj.insert(QString("pemIssuerChain"), ::OpenAPI::toJsonValue(m_pem_issuer_chain));
    }
    return obj;
}

QString OAISubordinateConfig::getCertificateAuthority() const {
    return m_certificate_authority;
}
void OAISubordinateConfig::setCertificateAuthority(const QString &certificate_authority) {
    m_certificate_authority = certificate_authority;
    m_certificate_authority_isSet = true;
}

bool OAISubordinateConfig::is_certificate_authority_Set() const{
    return m_certificate_authority_isSet;
}

bool OAISubordinateConfig::is_certificate_authority_Valid() const{
    return m_certificate_authority_isValid;
}

OAISubordinateConfigChain OAISubordinateConfig::getPemIssuerChain() const {
    return m_pem_issuer_chain;
}
void OAISubordinateConfig::setPemIssuerChain(const OAISubordinateConfigChain &pem_issuer_chain) {
    m_pem_issuer_chain = pem_issuer_chain;
    m_pem_issuer_chain_isSet = true;
}

bool OAISubordinateConfig::is_pem_issuer_chain_Set() const{
    return m_pem_issuer_chain_isSet;
}

bool OAISubordinateConfig::is_pem_issuer_chain_Valid() const{
    return m_pem_issuer_chain_isValid;
}

bool OAISubordinateConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_issuer_chain.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubordinateConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
