/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateCertificateAuthorityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateCertificateAuthorityRequest::OAIActivateCertificateAuthorityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateCertificateAuthorityRequest::OAIActivateCertificateAuthorityRequest() {
    this->initializeModel();
}

OAIActivateCertificateAuthorityRequest::~OAIActivateCertificateAuthorityRequest() {}

void OAIActivateCertificateAuthorityRequest::initializeModel() {

    m_pem_ca_certificate_isSet = false;
    m_pem_ca_certificate_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_subordinate_config_isSet = false;
    m_subordinate_config_isValid = false;
}

void OAIActivateCertificateAuthorityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateCertificateAuthorityRequest::fromJsonObject(QJsonObject json) {

    m_pem_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_pem_ca_certificate, json[QString("pemCaCertificate")]);
    m_pem_ca_certificate_isSet = !json[QString("pemCaCertificate")].isNull() && m_pem_ca_certificate_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_subordinate_config_isValid = ::OpenAPI::fromJsonValue(m_subordinate_config, json[QString("subordinateConfig")]);
    m_subordinate_config_isSet = !json[QString("subordinateConfig")].isNull() && m_subordinate_config_isValid;
}

QString OAIActivateCertificateAuthorityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateCertificateAuthorityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_pem_ca_certificate_isSet) {
        obj.insert(QString("pemCaCertificate"), ::OpenAPI::toJsonValue(m_pem_ca_certificate));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_subordinate_config.isSet()) {
        obj.insert(QString("subordinateConfig"), ::OpenAPI::toJsonValue(m_subordinate_config));
    }
    return obj;
}

QString OAIActivateCertificateAuthorityRequest::getPemCaCertificate() const {
    return m_pem_ca_certificate;
}
void OAIActivateCertificateAuthorityRequest::setPemCaCertificate(const QString &pem_ca_certificate) {
    m_pem_ca_certificate = pem_ca_certificate;
    m_pem_ca_certificate_isSet = true;
}

bool OAIActivateCertificateAuthorityRequest::is_pem_ca_certificate_Set() const{
    return m_pem_ca_certificate_isSet;
}

bool OAIActivateCertificateAuthorityRequest::is_pem_ca_certificate_Valid() const{
    return m_pem_ca_certificate_isValid;
}

QString OAIActivateCertificateAuthorityRequest::getRequestId() const {
    return m_request_id;
}
void OAIActivateCertificateAuthorityRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIActivateCertificateAuthorityRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIActivateCertificateAuthorityRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAISubordinateConfig OAIActivateCertificateAuthorityRequest::getSubordinateConfig() const {
    return m_subordinate_config;
}
void OAIActivateCertificateAuthorityRequest::setSubordinateConfig(const OAISubordinateConfig &subordinate_config) {
    m_subordinate_config = subordinate_config;
    m_subordinate_config_isSet = true;
}

bool OAIActivateCertificateAuthorityRequest::is_subordinate_config_Set() const{
    return m_subordinate_config_isSet;
}

bool OAIActivateCertificateAuthorityRequest::is_subordinate_config_Valid() const{
    return m_subordinate_config_isValid;
}

bool OAIActivateCertificateAuthorityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pem_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subordinate_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateCertificateAuthorityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
