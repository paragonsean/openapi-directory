/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateExtensionConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateExtensionConstraints::OAICertificateExtensionConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateExtensionConstraints::OAICertificateExtensionConstraints() {
    this->initializeModel();
}

OAICertificateExtensionConstraints::~OAICertificateExtensionConstraints() {}

void OAICertificateExtensionConstraints::initializeModel() {

    m_additional_extensions_isSet = false;
    m_additional_extensions_isValid = false;

    m_known_extensions_isSet = false;
    m_known_extensions_isValid = false;
}

void OAICertificateExtensionConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateExtensionConstraints::fromJsonObject(QJsonObject json) {

    m_additional_extensions_isValid = ::OpenAPI::fromJsonValue(m_additional_extensions, json[QString("additionalExtensions")]);
    m_additional_extensions_isSet = !json[QString("additionalExtensions")].isNull() && m_additional_extensions_isValid;

    m_known_extensions_isValid = ::OpenAPI::fromJsonValue(m_known_extensions, json[QString("knownExtensions")]);
    m_known_extensions_isSet = !json[QString("knownExtensions")].isNull() && m_known_extensions_isValid;
}

QString OAICertificateExtensionConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateExtensionConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_extensions.size() > 0) {
        obj.insert(QString("additionalExtensions"), ::OpenAPI::toJsonValue(m_additional_extensions));
    }
    if (m_known_extensions.size() > 0) {
        obj.insert(QString("knownExtensions"), ::OpenAPI::toJsonValue(m_known_extensions));
    }
    return obj;
}

QList<OAIObjectId> OAICertificateExtensionConstraints::getAdditionalExtensions() const {
    return m_additional_extensions;
}
void OAICertificateExtensionConstraints::setAdditionalExtensions(const QList<OAIObjectId> &additional_extensions) {
    m_additional_extensions = additional_extensions;
    m_additional_extensions_isSet = true;
}

bool OAICertificateExtensionConstraints::is_additional_extensions_Set() const{
    return m_additional_extensions_isSet;
}

bool OAICertificateExtensionConstraints::is_additional_extensions_Valid() const{
    return m_additional_extensions_isValid;
}

QList<QString> OAICertificateExtensionConstraints::getKnownExtensions() const {
    return m_known_extensions;
}
void OAICertificateExtensionConstraints::setKnownExtensions(const QList<QString> &known_extensions) {
    m_known_extensions = known_extensions;
    m_known_extensions_isSet = true;
}

bool OAICertificateExtensionConstraints::is_known_extensions_Set() const{
    return m_known_extensions_isSet;
}

bool OAICertificateExtensionConstraints::is_known_extensions_Valid() const{
    return m_known_extensions_isValid;
}

bool OAICertificateExtensionConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateExtensionConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
