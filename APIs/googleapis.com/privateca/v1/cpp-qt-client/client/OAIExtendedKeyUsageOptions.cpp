/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedKeyUsageOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedKeyUsageOptions::OAIExtendedKeyUsageOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedKeyUsageOptions::OAIExtendedKeyUsageOptions() {
    this->initializeModel();
}

OAIExtendedKeyUsageOptions::~OAIExtendedKeyUsageOptions() {}

void OAIExtendedKeyUsageOptions::initializeModel() {

    m_client_auth_isSet = false;
    m_client_auth_isValid = false;

    m_code_signing_isSet = false;
    m_code_signing_isValid = false;

    m_email_protection_isSet = false;
    m_email_protection_isValid = false;

    m_ocsp_signing_isSet = false;
    m_ocsp_signing_isValid = false;

    m_server_auth_isSet = false;
    m_server_auth_isValid = false;

    m_time_stamping_isSet = false;
    m_time_stamping_isValid = false;
}

void OAIExtendedKeyUsageOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedKeyUsageOptions::fromJsonObject(QJsonObject json) {

    m_client_auth_isValid = ::OpenAPI::fromJsonValue(m_client_auth, json[QString("clientAuth")]);
    m_client_auth_isSet = !json[QString("clientAuth")].isNull() && m_client_auth_isValid;

    m_code_signing_isValid = ::OpenAPI::fromJsonValue(m_code_signing, json[QString("codeSigning")]);
    m_code_signing_isSet = !json[QString("codeSigning")].isNull() && m_code_signing_isValid;

    m_email_protection_isValid = ::OpenAPI::fromJsonValue(m_email_protection, json[QString("emailProtection")]);
    m_email_protection_isSet = !json[QString("emailProtection")].isNull() && m_email_protection_isValid;

    m_ocsp_signing_isValid = ::OpenAPI::fromJsonValue(m_ocsp_signing, json[QString("ocspSigning")]);
    m_ocsp_signing_isSet = !json[QString("ocspSigning")].isNull() && m_ocsp_signing_isValid;

    m_server_auth_isValid = ::OpenAPI::fromJsonValue(m_server_auth, json[QString("serverAuth")]);
    m_server_auth_isSet = !json[QString("serverAuth")].isNull() && m_server_auth_isValid;

    m_time_stamping_isValid = ::OpenAPI::fromJsonValue(m_time_stamping, json[QString("timeStamping")]);
    m_time_stamping_isSet = !json[QString("timeStamping")].isNull() && m_time_stamping_isValid;
}

QString OAIExtendedKeyUsageOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedKeyUsageOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_client_auth_isSet) {
        obj.insert(QString("clientAuth"), ::OpenAPI::toJsonValue(m_client_auth));
    }
    if (m_code_signing_isSet) {
        obj.insert(QString("codeSigning"), ::OpenAPI::toJsonValue(m_code_signing));
    }
    if (m_email_protection_isSet) {
        obj.insert(QString("emailProtection"), ::OpenAPI::toJsonValue(m_email_protection));
    }
    if (m_ocsp_signing_isSet) {
        obj.insert(QString("ocspSigning"), ::OpenAPI::toJsonValue(m_ocsp_signing));
    }
    if (m_server_auth_isSet) {
        obj.insert(QString("serverAuth"), ::OpenAPI::toJsonValue(m_server_auth));
    }
    if (m_time_stamping_isSet) {
        obj.insert(QString("timeStamping"), ::OpenAPI::toJsonValue(m_time_stamping));
    }
    return obj;
}

bool OAIExtendedKeyUsageOptions::isClientAuth() const {
    return m_client_auth;
}
void OAIExtendedKeyUsageOptions::setClientAuth(const bool &client_auth) {
    m_client_auth = client_auth;
    m_client_auth_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_client_auth_Set() const{
    return m_client_auth_isSet;
}

bool OAIExtendedKeyUsageOptions::is_client_auth_Valid() const{
    return m_client_auth_isValid;
}

bool OAIExtendedKeyUsageOptions::isCodeSigning() const {
    return m_code_signing;
}
void OAIExtendedKeyUsageOptions::setCodeSigning(const bool &code_signing) {
    m_code_signing = code_signing;
    m_code_signing_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_code_signing_Set() const{
    return m_code_signing_isSet;
}

bool OAIExtendedKeyUsageOptions::is_code_signing_Valid() const{
    return m_code_signing_isValid;
}

bool OAIExtendedKeyUsageOptions::isEmailProtection() const {
    return m_email_protection;
}
void OAIExtendedKeyUsageOptions::setEmailProtection(const bool &email_protection) {
    m_email_protection = email_protection;
    m_email_protection_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_email_protection_Set() const{
    return m_email_protection_isSet;
}

bool OAIExtendedKeyUsageOptions::is_email_protection_Valid() const{
    return m_email_protection_isValid;
}

bool OAIExtendedKeyUsageOptions::isOcspSigning() const {
    return m_ocsp_signing;
}
void OAIExtendedKeyUsageOptions::setOcspSigning(const bool &ocsp_signing) {
    m_ocsp_signing = ocsp_signing;
    m_ocsp_signing_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_ocsp_signing_Set() const{
    return m_ocsp_signing_isSet;
}

bool OAIExtendedKeyUsageOptions::is_ocsp_signing_Valid() const{
    return m_ocsp_signing_isValid;
}

bool OAIExtendedKeyUsageOptions::isServerAuth() const {
    return m_server_auth;
}
void OAIExtendedKeyUsageOptions::setServerAuth(const bool &server_auth) {
    m_server_auth = server_auth;
    m_server_auth_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_server_auth_Set() const{
    return m_server_auth_isSet;
}

bool OAIExtendedKeyUsageOptions::is_server_auth_Valid() const{
    return m_server_auth_isValid;
}

bool OAIExtendedKeyUsageOptions::isTimeStamping() const {
    return m_time_stamping;
}
void OAIExtendedKeyUsageOptions::setTimeStamping(const bool &time_stamping) {
    m_time_stamping = time_stamping;
    m_time_stamping_isSet = true;
}

bool OAIExtendedKeyUsageOptions::is_time_stamping_Set() const{
    return m_time_stamping_isSet;
}

bool OAIExtendedKeyUsageOptions::is_time_stamping_Valid() const{
    return m_time_stamping_isValid;
}

bool OAIExtendedKeyUsageOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_signing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ocsp_signing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamping_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedKeyUsageOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
