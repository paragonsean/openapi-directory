/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX509Parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX509Parameters::OAIX509Parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX509Parameters::OAIX509Parameters() {
    this->initializeModel();
}

OAIX509Parameters::~OAIX509Parameters() {}

void OAIX509Parameters::initializeModel() {

    m_additional_extensions_isSet = false;
    m_additional_extensions_isValid = false;

    m_aia_ocsp_servers_isSet = false;
    m_aia_ocsp_servers_isValid = false;

    m_ca_options_isSet = false;
    m_ca_options_isValid = false;

    m_key_usage_isSet = false;
    m_key_usage_isValid = false;

    m_name_constraints_isSet = false;
    m_name_constraints_isValid = false;

    m_policy_ids_isSet = false;
    m_policy_ids_isValid = false;
}

void OAIX509Parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX509Parameters::fromJsonObject(QJsonObject json) {

    m_additional_extensions_isValid = ::OpenAPI::fromJsonValue(m_additional_extensions, json[QString("additionalExtensions")]);
    m_additional_extensions_isSet = !json[QString("additionalExtensions")].isNull() && m_additional_extensions_isValid;

    m_aia_ocsp_servers_isValid = ::OpenAPI::fromJsonValue(m_aia_ocsp_servers, json[QString("aiaOcspServers")]);
    m_aia_ocsp_servers_isSet = !json[QString("aiaOcspServers")].isNull() && m_aia_ocsp_servers_isValid;

    m_ca_options_isValid = ::OpenAPI::fromJsonValue(m_ca_options, json[QString("caOptions")]);
    m_ca_options_isSet = !json[QString("caOptions")].isNull() && m_ca_options_isValid;

    m_key_usage_isValid = ::OpenAPI::fromJsonValue(m_key_usage, json[QString("keyUsage")]);
    m_key_usage_isSet = !json[QString("keyUsage")].isNull() && m_key_usage_isValid;

    m_name_constraints_isValid = ::OpenAPI::fromJsonValue(m_name_constraints, json[QString("nameConstraints")]);
    m_name_constraints_isSet = !json[QString("nameConstraints")].isNull() && m_name_constraints_isValid;

    m_policy_ids_isValid = ::OpenAPI::fromJsonValue(m_policy_ids, json[QString("policyIds")]);
    m_policy_ids_isSet = !json[QString("policyIds")].isNull() && m_policy_ids_isValid;
}

QString OAIX509Parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX509Parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_extensions.size() > 0) {
        obj.insert(QString("additionalExtensions"), ::OpenAPI::toJsonValue(m_additional_extensions));
    }
    if (m_aia_ocsp_servers.size() > 0) {
        obj.insert(QString("aiaOcspServers"), ::OpenAPI::toJsonValue(m_aia_ocsp_servers));
    }
    if (m_ca_options.isSet()) {
        obj.insert(QString("caOptions"), ::OpenAPI::toJsonValue(m_ca_options));
    }
    if (m_key_usage.isSet()) {
        obj.insert(QString("keyUsage"), ::OpenAPI::toJsonValue(m_key_usage));
    }
    if (m_name_constraints.isSet()) {
        obj.insert(QString("nameConstraints"), ::OpenAPI::toJsonValue(m_name_constraints));
    }
    if (m_policy_ids.size() > 0) {
        obj.insert(QString("policyIds"), ::OpenAPI::toJsonValue(m_policy_ids));
    }
    return obj;
}

QList<OAIX509Extension> OAIX509Parameters::getAdditionalExtensions() const {
    return m_additional_extensions;
}
void OAIX509Parameters::setAdditionalExtensions(const QList<OAIX509Extension> &additional_extensions) {
    m_additional_extensions = additional_extensions;
    m_additional_extensions_isSet = true;
}

bool OAIX509Parameters::is_additional_extensions_Set() const{
    return m_additional_extensions_isSet;
}

bool OAIX509Parameters::is_additional_extensions_Valid() const{
    return m_additional_extensions_isValid;
}

QList<QString> OAIX509Parameters::getAiaOcspServers() const {
    return m_aia_ocsp_servers;
}
void OAIX509Parameters::setAiaOcspServers(const QList<QString> &aia_ocsp_servers) {
    m_aia_ocsp_servers = aia_ocsp_servers;
    m_aia_ocsp_servers_isSet = true;
}

bool OAIX509Parameters::is_aia_ocsp_servers_Set() const{
    return m_aia_ocsp_servers_isSet;
}

bool OAIX509Parameters::is_aia_ocsp_servers_Valid() const{
    return m_aia_ocsp_servers_isValid;
}

OAICaOptions OAIX509Parameters::getCaOptions() const {
    return m_ca_options;
}
void OAIX509Parameters::setCaOptions(const OAICaOptions &ca_options) {
    m_ca_options = ca_options;
    m_ca_options_isSet = true;
}

bool OAIX509Parameters::is_ca_options_Set() const{
    return m_ca_options_isSet;
}

bool OAIX509Parameters::is_ca_options_Valid() const{
    return m_ca_options_isValid;
}

OAIKeyUsage OAIX509Parameters::getKeyUsage() const {
    return m_key_usage;
}
void OAIX509Parameters::setKeyUsage(const OAIKeyUsage &key_usage) {
    m_key_usage = key_usage;
    m_key_usage_isSet = true;
}

bool OAIX509Parameters::is_key_usage_Set() const{
    return m_key_usage_isSet;
}

bool OAIX509Parameters::is_key_usage_Valid() const{
    return m_key_usage_isValid;
}

OAINameConstraints OAIX509Parameters::getNameConstraints() const {
    return m_name_constraints;
}
void OAIX509Parameters::setNameConstraints(const OAINameConstraints &name_constraints) {
    m_name_constraints = name_constraints;
    m_name_constraints_isSet = true;
}

bool OAIX509Parameters::is_name_constraints_Set() const{
    return m_name_constraints_isSet;
}

bool OAIX509Parameters::is_name_constraints_Valid() const{
    return m_name_constraints_isValid;
}

QList<OAIObjectId> OAIX509Parameters::getPolicyIds() const {
    return m_policy_ids;
}
void OAIX509Parameters::setPolicyIds(const QList<OAIObjectId> &policy_ids) {
    m_policy_ids = policy_ids;
    m_policy_ids_isSet = true;
}

bool OAIX509Parameters::is_policy_ids_Set() const{
    return m_policy_ids_isSet;
}

bool OAIX509Parameters::is_policy_ids_Valid() const{
    return m_policy_ids_isValid;
}

bool OAIX509Parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aia_ocsp_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX509Parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
