/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubject::OAISubject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubject::OAISubject() {
    this->initializeModel();
}

OAISubject::~OAISubject() {}

void OAISubject::initializeModel() {

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_organizational_unit_isSet = false;
    m_organizational_unit_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;
}

void OAISubject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubject::fromJsonObject(QJsonObject json) {

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_organizational_unit_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit, json[QString("organizationalUnit")]);
    m_organizational_unit_isSet = !json[QString("organizationalUnit")].isNull() && m_organizational_unit_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_province_isValid = ::OpenAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("streetAddress")]);
    m_street_address_isSet = !json[QString("streetAddress")].isNull() && m_street_address_isValid;
}

QString OAISubject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubject::asJsonObject() const {
    QJsonObject obj;
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_locality_isSet) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_organizational_unit_isSet) {
        obj.insert(QString("organizationalUnit"), ::OpenAPI::toJsonValue(m_organizational_unit));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_province_isSet) {
        obj.insert(QString("province"), ::OpenAPI::toJsonValue(m_province));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(m_street_address));
    }
    return obj;
}

QString OAISubject::getCommonName() const {
    return m_common_name;
}
void OAISubject::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAISubject::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAISubject::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAISubject::getCountryCode() const {
    return m_country_code;
}
void OAISubject::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAISubject::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAISubject::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAISubject::getLocality() const {
    return m_locality;
}
void OAISubject::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAISubject::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAISubject::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAISubject::getOrganization() const {
    return m_organization;
}
void OAISubject::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAISubject::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAISubject::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAISubject::getOrganizationalUnit() const {
    return m_organizational_unit;
}
void OAISubject::setOrganizationalUnit(const QString &organizational_unit) {
    m_organizational_unit = organizational_unit;
    m_organizational_unit_isSet = true;
}

bool OAISubject::is_organizational_unit_Set() const{
    return m_organizational_unit_isSet;
}

bool OAISubject::is_organizational_unit_Valid() const{
    return m_organizational_unit_isValid;
}

QString OAISubject::getPostalCode() const {
    return m_postal_code;
}
void OAISubject::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAISubject::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAISubject::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAISubject::getProvince() const {
    return m_province;
}
void OAISubject::setProvince(const QString &province) {
    m_province = province;
    m_province_isSet = true;
}

bool OAISubject::is_province_Set() const{
    return m_province_isSet;
}

bool OAISubject::is_province_Valid() const{
    return m_province_isValid;
}

QString OAISubject::getStreetAddress() const {
    return m_street_address;
}
void OAISubject::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAISubject::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAISubject::is_street_address_Valid() const{
    return m_street_address_isValid;
}

bool OAISubject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
