/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateAuthority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateAuthority::OAICertificateAuthority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateAuthority::OAICertificateAuthority() {
    this->initializeModel();
}

OAICertificateAuthority::~OAICertificateAuthority() {}

void OAICertificateAuthority::initializeModel() {

    m_access_urls_isSet = false;
    m_access_urls_isValid = false;

    m_ca_certificate_descriptions_isSet = false;
    m_ca_certificate_descriptions_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_gcs_bucket_isSet = false;
    m_gcs_bucket_isValid = false;

    m_key_spec_isSet = false;
    m_key_spec_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lifetime_isSet = false;
    m_lifetime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pem_ca_certificates_isSet = false;
    m_pem_ca_certificates_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subordinate_config_isSet = false;
    m_subordinate_config_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificateAuthority::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateAuthority::fromJsonObject(QJsonObject json) {

    m_access_urls_isValid = ::OpenAPI::fromJsonValue(m_access_urls, json[QString("accessUrls")]);
    m_access_urls_isSet = !json[QString("accessUrls")].isNull() && m_access_urls_isValid;

    m_ca_certificate_descriptions_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_descriptions, json[QString("caCertificateDescriptions")]);
    m_ca_certificate_descriptions_isSet = !json[QString("caCertificateDescriptions")].isNull() && m_ca_certificate_descriptions_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_gcs_bucket_isValid = ::OpenAPI::fromJsonValue(m_gcs_bucket, json[QString("gcsBucket")]);
    m_gcs_bucket_isSet = !json[QString("gcsBucket")].isNull() && m_gcs_bucket_isValid;

    m_key_spec_isValid = ::OpenAPI::fromJsonValue(m_key_spec, json[QString("keySpec")]);
    m_key_spec_isSet = !json[QString("keySpec")].isNull() && m_key_spec_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lifetime_isValid = ::OpenAPI::fromJsonValue(m_lifetime, json[QString("lifetime")]);
    m_lifetime_isSet = !json[QString("lifetime")].isNull() && m_lifetime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pem_ca_certificates_isValid = ::OpenAPI::fromJsonValue(m_pem_ca_certificates, json[QString("pemCaCertificates")]);
    m_pem_ca_certificates_isSet = !json[QString("pemCaCertificates")].isNull() && m_pem_ca_certificates_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subordinate_config_isValid = ::OpenAPI::fromJsonValue(m_subordinate_config, json[QString("subordinateConfig")]);
    m_subordinate_config_isSet = !json[QString("subordinateConfig")].isNull() && m_subordinate_config_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificateAuthority::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateAuthority::asJsonObject() const {
    QJsonObject obj;
    if (m_access_urls.isSet()) {
        obj.insert(QString("accessUrls"), ::OpenAPI::toJsonValue(m_access_urls));
    }
    if (m_ca_certificate_descriptions.size() > 0) {
        obj.insert(QString("caCertificateDescriptions"), ::OpenAPI::toJsonValue(m_ca_certificate_descriptions));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_gcs_bucket_isSet) {
        obj.insert(QString("gcsBucket"), ::OpenAPI::toJsonValue(m_gcs_bucket));
    }
    if (m_key_spec.isSet()) {
        obj.insert(QString("keySpec"), ::OpenAPI::toJsonValue(m_key_spec));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lifetime_isSet) {
        obj.insert(QString("lifetime"), ::OpenAPI::toJsonValue(m_lifetime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pem_ca_certificates.size() > 0) {
        obj.insert(QString("pemCaCertificates"), ::OpenAPI::toJsonValue(m_pem_ca_certificates));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subordinate_config.isSet()) {
        obj.insert(QString("subordinateConfig"), ::OpenAPI::toJsonValue(m_subordinate_config));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAccessUrls OAICertificateAuthority::getAccessUrls() const {
    return m_access_urls;
}
void OAICertificateAuthority::setAccessUrls(const OAIAccessUrls &access_urls) {
    m_access_urls = access_urls;
    m_access_urls_isSet = true;
}

bool OAICertificateAuthority::is_access_urls_Set() const{
    return m_access_urls_isSet;
}

bool OAICertificateAuthority::is_access_urls_Valid() const{
    return m_access_urls_isValid;
}

QList<OAICertificateDescription> OAICertificateAuthority::getCaCertificateDescriptions() const {
    return m_ca_certificate_descriptions;
}
void OAICertificateAuthority::setCaCertificateDescriptions(const QList<OAICertificateDescription> &ca_certificate_descriptions) {
    m_ca_certificate_descriptions = ca_certificate_descriptions;
    m_ca_certificate_descriptions_isSet = true;
}

bool OAICertificateAuthority::is_ca_certificate_descriptions_Set() const{
    return m_ca_certificate_descriptions_isSet;
}

bool OAICertificateAuthority::is_ca_certificate_descriptions_Valid() const{
    return m_ca_certificate_descriptions_isValid;
}

OAICertificateConfig OAICertificateAuthority::getConfig() const {
    return m_config;
}
void OAICertificateAuthority::setConfig(const OAICertificateConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAICertificateAuthority::is_config_Set() const{
    return m_config_isSet;
}

bool OAICertificateAuthority::is_config_Valid() const{
    return m_config_isValid;
}

QString OAICertificateAuthority::getCreateTime() const {
    return m_create_time;
}
void OAICertificateAuthority::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificateAuthority::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificateAuthority::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificateAuthority::getDeleteTime() const {
    return m_delete_time;
}
void OAICertificateAuthority::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAICertificateAuthority::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAICertificateAuthority::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAICertificateAuthority::getExpireTime() const {
    return m_expire_time;
}
void OAICertificateAuthority::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICertificateAuthority::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICertificateAuthority::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAICertificateAuthority::getGcsBucket() const {
    return m_gcs_bucket;
}
void OAICertificateAuthority::setGcsBucket(const QString &gcs_bucket) {
    m_gcs_bucket = gcs_bucket;
    m_gcs_bucket_isSet = true;
}

bool OAICertificateAuthority::is_gcs_bucket_Set() const{
    return m_gcs_bucket_isSet;
}

bool OAICertificateAuthority::is_gcs_bucket_Valid() const{
    return m_gcs_bucket_isValid;
}

OAIKeyVersionSpec OAICertificateAuthority::getKeySpec() const {
    return m_key_spec;
}
void OAICertificateAuthority::setKeySpec(const OAIKeyVersionSpec &key_spec) {
    m_key_spec = key_spec;
    m_key_spec_isSet = true;
}

bool OAICertificateAuthority::is_key_spec_Set() const{
    return m_key_spec_isSet;
}

bool OAICertificateAuthority::is_key_spec_Valid() const{
    return m_key_spec_isValid;
}

QMap<QString, QString> OAICertificateAuthority::getLabels() const {
    return m_labels;
}
void OAICertificateAuthority::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificateAuthority::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificateAuthority::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificateAuthority::getLifetime() const {
    return m_lifetime;
}
void OAICertificateAuthority::setLifetime(const QString &lifetime) {
    m_lifetime = lifetime;
    m_lifetime_isSet = true;
}

bool OAICertificateAuthority::is_lifetime_Set() const{
    return m_lifetime_isSet;
}

bool OAICertificateAuthority::is_lifetime_Valid() const{
    return m_lifetime_isValid;
}

QString OAICertificateAuthority::getName() const {
    return m_name;
}
void OAICertificateAuthority::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateAuthority::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateAuthority::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICertificateAuthority::getPemCaCertificates() const {
    return m_pem_ca_certificates;
}
void OAICertificateAuthority::setPemCaCertificates(const QList<QString> &pem_ca_certificates) {
    m_pem_ca_certificates = pem_ca_certificates;
    m_pem_ca_certificates_isSet = true;
}

bool OAICertificateAuthority::is_pem_ca_certificates_Set() const{
    return m_pem_ca_certificates_isSet;
}

bool OAICertificateAuthority::is_pem_ca_certificates_Valid() const{
    return m_pem_ca_certificates_isValid;
}

QString OAICertificateAuthority::getState() const {
    return m_state;
}
void OAICertificateAuthority::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificateAuthority::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificateAuthority::is_state_Valid() const{
    return m_state_isValid;
}

OAISubordinateConfig OAICertificateAuthority::getSubordinateConfig() const {
    return m_subordinate_config;
}
void OAICertificateAuthority::setSubordinateConfig(const OAISubordinateConfig &subordinate_config) {
    m_subordinate_config = subordinate_config;
    m_subordinate_config_isSet = true;
}

bool OAICertificateAuthority::is_subordinate_config_Set() const{
    return m_subordinate_config_isSet;
}

bool OAICertificateAuthority::is_subordinate_config_Valid() const{
    return m_subordinate_config_isValid;
}

QString OAICertificateAuthority::getTier() const {
    return m_tier;
}
void OAICertificateAuthority::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICertificateAuthority::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICertificateAuthority::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAICertificateAuthority::getType() const {
    return m_type;
}
void OAICertificateAuthority::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificateAuthority::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificateAuthority::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICertificateAuthority::getUpdateTime() const {
    return m_update_time;
}
void OAICertificateAuthority::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificateAuthority::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificateAuthority::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificateAuthority::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_ca_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subordinate_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateAuthority::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
