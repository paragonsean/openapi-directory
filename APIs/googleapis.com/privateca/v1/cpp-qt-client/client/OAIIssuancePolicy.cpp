/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuancePolicy::OAIIssuancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuancePolicy::OAIIssuancePolicy() {
    this->initializeModel();
}

OAIIssuancePolicy::~OAIIssuancePolicy() {}

void OAIIssuancePolicy::initializeModel() {

    m_allowed_issuance_modes_isSet = false;
    m_allowed_issuance_modes_isValid = false;

    m_allowed_key_types_isSet = false;
    m_allowed_key_types_isValid = false;

    m_baseline_values_isSet = false;
    m_baseline_values_isValid = false;

    m_identity_constraints_isSet = false;
    m_identity_constraints_isValid = false;

    m_maximum_lifetime_isSet = false;
    m_maximum_lifetime_isValid = false;

    m_passthrough_extensions_isSet = false;
    m_passthrough_extensions_isValid = false;
}

void OAIIssuancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuancePolicy::fromJsonObject(QJsonObject json) {

    m_allowed_issuance_modes_isValid = ::OpenAPI::fromJsonValue(m_allowed_issuance_modes, json[QString("allowedIssuanceModes")]);
    m_allowed_issuance_modes_isSet = !json[QString("allowedIssuanceModes")].isNull() && m_allowed_issuance_modes_isValid;

    m_allowed_key_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_key_types, json[QString("allowedKeyTypes")]);
    m_allowed_key_types_isSet = !json[QString("allowedKeyTypes")].isNull() && m_allowed_key_types_isValid;

    m_baseline_values_isValid = ::OpenAPI::fromJsonValue(m_baseline_values, json[QString("baselineValues")]);
    m_baseline_values_isSet = !json[QString("baselineValues")].isNull() && m_baseline_values_isValid;

    m_identity_constraints_isValid = ::OpenAPI::fromJsonValue(m_identity_constraints, json[QString("identityConstraints")]);
    m_identity_constraints_isSet = !json[QString("identityConstraints")].isNull() && m_identity_constraints_isValid;

    m_maximum_lifetime_isValid = ::OpenAPI::fromJsonValue(m_maximum_lifetime, json[QString("maximumLifetime")]);
    m_maximum_lifetime_isSet = !json[QString("maximumLifetime")].isNull() && m_maximum_lifetime_isValid;

    m_passthrough_extensions_isValid = ::OpenAPI::fromJsonValue(m_passthrough_extensions, json[QString("passthroughExtensions")]);
    m_passthrough_extensions_isSet = !json[QString("passthroughExtensions")].isNull() && m_passthrough_extensions_isValid;
}

QString OAIIssuancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_issuance_modes.isSet()) {
        obj.insert(QString("allowedIssuanceModes"), ::OpenAPI::toJsonValue(m_allowed_issuance_modes));
    }
    if (m_allowed_key_types.size() > 0) {
        obj.insert(QString("allowedKeyTypes"), ::OpenAPI::toJsonValue(m_allowed_key_types));
    }
    if (m_baseline_values.isSet()) {
        obj.insert(QString("baselineValues"), ::OpenAPI::toJsonValue(m_baseline_values));
    }
    if (m_identity_constraints.isSet()) {
        obj.insert(QString("identityConstraints"), ::OpenAPI::toJsonValue(m_identity_constraints));
    }
    if (m_maximum_lifetime_isSet) {
        obj.insert(QString("maximumLifetime"), ::OpenAPI::toJsonValue(m_maximum_lifetime));
    }
    if (m_passthrough_extensions.isSet()) {
        obj.insert(QString("passthroughExtensions"), ::OpenAPI::toJsonValue(m_passthrough_extensions));
    }
    return obj;
}

OAIIssuanceModes OAIIssuancePolicy::getAllowedIssuanceModes() const {
    return m_allowed_issuance_modes;
}
void OAIIssuancePolicy::setAllowedIssuanceModes(const OAIIssuanceModes &allowed_issuance_modes) {
    m_allowed_issuance_modes = allowed_issuance_modes;
    m_allowed_issuance_modes_isSet = true;
}

bool OAIIssuancePolicy::is_allowed_issuance_modes_Set() const{
    return m_allowed_issuance_modes_isSet;
}

bool OAIIssuancePolicy::is_allowed_issuance_modes_Valid() const{
    return m_allowed_issuance_modes_isValid;
}

QList<OAIAllowedKeyType> OAIIssuancePolicy::getAllowedKeyTypes() const {
    return m_allowed_key_types;
}
void OAIIssuancePolicy::setAllowedKeyTypes(const QList<OAIAllowedKeyType> &allowed_key_types) {
    m_allowed_key_types = allowed_key_types;
    m_allowed_key_types_isSet = true;
}

bool OAIIssuancePolicy::is_allowed_key_types_Set() const{
    return m_allowed_key_types_isSet;
}

bool OAIIssuancePolicy::is_allowed_key_types_Valid() const{
    return m_allowed_key_types_isValid;
}

OAIX509Parameters OAIIssuancePolicy::getBaselineValues() const {
    return m_baseline_values;
}
void OAIIssuancePolicy::setBaselineValues(const OAIX509Parameters &baseline_values) {
    m_baseline_values = baseline_values;
    m_baseline_values_isSet = true;
}

bool OAIIssuancePolicy::is_baseline_values_Set() const{
    return m_baseline_values_isSet;
}

bool OAIIssuancePolicy::is_baseline_values_Valid() const{
    return m_baseline_values_isValid;
}

OAICertificateIdentityConstraints OAIIssuancePolicy::getIdentityConstraints() const {
    return m_identity_constraints;
}
void OAIIssuancePolicy::setIdentityConstraints(const OAICertificateIdentityConstraints &identity_constraints) {
    m_identity_constraints = identity_constraints;
    m_identity_constraints_isSet = true;
}

bool OAIIssuancePolicy::is_identity_constraints_Set() const{
    return m_identity_constraints_isSet;
}

bool OAIIssuancePolicy::is_identity_constraints_Valid() const{
    return m_identity_constraints_isValid;
}

QString OAIIssuancePolicy::getMaximumLifetime() const {
    return m_maximum_lifetime;
}
void OAIIssuancePolicy::setMaximumLifetime(const QString &maximum_lifetime) {
    m_maximum_lifetime = maximum_lifetime;
    m_maximum_lifetime_isSet = true;
}

bool OAIIssuancePolicy::is_maximum_lifetime_Set() const{
    return m_maximum_lifetime_isSet;
}

bool OAIIssuancePolicy::is_maximum_lifetime_Valid() const{
    return m_maximum_lifetime_isValid;
}

OAICertificateExtensionConstraints OAIIssuancePolicy::getPassthroughExtensions() const {
    return m_passthrough_extensions;
}
void OAIIssuancePolicy::setPassthroughExtensions(const OAICertificateExtensionConstraints &passthrough_extensions) {
    m_passthrough_extensions = passthrough_extensions;
    m_passthrough_extensions_isSet = true;
}

bool OAIIssuancePolicy::is_passthrough_extensions_Set() const{
    return m_passthrough_extensions_isSet;
}

bool OAIIssuancePolicy::is_passthrough_extensions_Valid() const{
    return m_passthrough_extensions_isValid;
}

bool OAIIssuancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_issuance_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_key_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
