/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubjectAltNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubjectAltNames::OAISubjectAltNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubjectAltNames::OAISubjectAltNames() {
    this->initializeModel();
}

OAISubjectAltNames::~OAISubjectAltNames() {}

void OAISubjectAltNames::initializeModel() {

    m_custom_sans_isSet = false;
    m_custom_sans_isValid = false;

    m_dns_names_isSet = false;
    m_dns_names_isValid = false;

    m_email_addresses_isSet = false;
    m_email_addresses_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;
}

void OAISubjectAltNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubjectAltNames::fromJsonObject(QJsonObject json) {

    m_custom_sans_isValid = ::OpenAPI::fromJsonValue(m_custom_sans, json[QString("customSans")]);
    m_custom_sans_isSet = !json[QString("customSans")].isNull() && m_custom_sans_isValid;

    m_dns_names_isValid = ::OpenAPI::fromJsonValue(m_dns_names, json[QString("dnsNames")]);
    m_dns_names_isSet = !json[QString("dnsNames")].isNull() && m_dns_names_isValid;

    m_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_email_addresses, json[QString("emailAddresses")]);
    m_email_addresses_isSet = !json[QString("emailAddresses")].isNull() && m_email_addresses_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;
}

QString OAISubjectAltNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubjectAltNames::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_sans.size() > 0) {
        obj.insert(QString("customSans"), ::OpenAPI::toJsonValue(m_custom_sans));
    }
    if (m_dns_names.size() > 0) {
        obj.insert(QString("dnsNames"), ::OpenAPI::toJsonValue(m_dns_names));
    }
    if (m_email_addresses.size() > 0) {
        obj.insert(QString("emailAddresses"), ::OpenAPI::toJsonValue(m_email_addresses));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    return obj;
}

QList<OAIX509Extension> OAISubjectAltNames::getCustomSans() const {
    return m_custom_sans;
}
void OAISubjectAltNames::setCustomSans(const QList<OAIX509Extension> &custom_sans) {
    m_custom_sans = custom_sans;
    m_custom_sans_isSet = true;
}

bool OAISubjectAltNames::is_custom_sans_Set() const{
    return m_custom_sans_isSet;
}

bool OAISubjectAltNames::is_custom_sans_Valid() const{
    return m_custom_sans_isValid;
}

QList<QString> OAISubjectAltNames::getDnsNames() const {
    return m_dns_names;
}
void OAISubjectAltNames::setDnsNames(const QList<QString> &dns_names) {
    m_dns_names = dns_names;
    m_dns_names_isSet = true;
}

bool OAISubjectAltNames::is_dns_names_Set() const{
    return m_dns_names_isSet;
}

bool OAISubjectAltNames::is_dns_names_Valid() const{
    return m_dns_names_isValid;
}

QList<QString> OAISubjectAltNames::getEmailAddresses() const {
    return m_email_addresses;
}
void OAISubjectAltNames::setEmailAddresses(const QList<QString> &email_addresses) {
    m_email_addresses = email_addresses;
    m_email_addresses_isSet = true;
}

bool OAISubjectAltNames::is_email_addresses_Set() const{
    return m_email_addresses_isSet;
}

bool OAISubjectAltNames::is_email_addresses_Valid() const{
    return m_email_addresses_isValid;
}

QList<QString> OAISubjectAltNames::getIpAddresses() const {
    return m_ip_addresses;
}
void OAISubjectAltNames::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAISubjectAltNames::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAISubjectAltNames::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList<QString> OAISubjectAltNames::getUris() const {
    return m_uris;
}
void OAISubjectAltNames::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAISubjectAltNames::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAISubjectAltNames::is_uris_Valid() const{
    return m_uris_isValid;
}

bool OAISubjectAltNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_sans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubjectAltNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
