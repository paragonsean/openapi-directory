/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateFingerprint from './CertificateFingerprint';
import KeyId from './KeyId';
import PublicKey from './PublicKey';
import SubjectDescription from './SubjectDescription';
import X509Parameters from './X509Parameters';

/**
 * The CertificateDescription model module.
 * @module model/CertificateDescription
 * @version v1
 */
class CertificateDescription {
    /**
     * Constructs a new <code>CertificateDescription</code>.
     * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
     * @alias module:model/CertificateDescription
     */
    constructor() { 
        
        CertificateDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateDescription} obj Optional instance to populate.
     * @return {module:model/CertificateDescription} The populated <code>CertificateDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateDescription();

            if (data.hasOwnProperty('aiaIssuingCertificateUrls')) {
                obj['aiaIssuingCertificateUrls'] = ApiClient.convertToType(data['aiaIssuingCertificateUrls'], ['String']);
            }
            if (data.hasOwnProperty('authorityKeyId')) {
                obj['authorityKeyId'] = KeyId.constructFromObject(data['authorityKeyId']);
            }
            if (data.hasOwnProperty('certFingerprint')) {
                obj['certFingerprint'] = CertificateFingerprint.constructFromObject(data['certFingerprint']);
            }
            if (data.hasOwnProperty('crlDistributionPoints')) {
                obj['crlDistributionPoints'] = ApiClient.convertToType(data['crlDistributionPoints'], ['String']);
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = PublicKey.constructFromObject(data['publicKey']);
            }
            if (data.hasOwnProperty('subjectDescription')) {
                obj['subjectDescription'] = SubjectDescription.constructFromObject(data['subjectDescription']);
            }
            if (data.hasOwnProperty('subjectKeyId')) {
                obj['subjectKeyId'] = KeyId.constructFromObject(data['subjectKeyId']);
            }
            if (data.hasOwnProperty('x509Description')) {
                obj['x509Description'] = X509Parameters.constructFromObject(data['x509Description']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['aiaIssuingCertificateUrls'])) {
            throw new Error("Expected the field `aiaIssuingCertificateUrls` to be an array in the JSON data but got " + data['aiaIssuingCertificateUrls']);
        }
        // validate the optional field `authorityKeyId`
        if (data['authorityKeyId']) { // data not null
          KeyId.validateJSON(data['authorityKeyId']);
        }
        // validate the optional field `certFingerprint`
        if (data['certFingerprint']) { // data not null
          CertificateFingerprint.validateJSON(data['certFingerprint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['crlDistributionPoints'])) {
            throw new Error("Expected the field `crlDistributionPoints` to be an array in the JSON data but got " + data['crlDistributionPoints']);
        }
        // validate the optional field `publicKey`
        if (data['publicKey']) { // data not null
          PublicKey.validateJSON(data['publicKey']);
        }
        // validate the optional field `subjectDescription`
        if (data['subjectDescription']) { // data not null
          SubjectDescription.validateJSON(data['subjectDescription']);
        }
        // validate the optional field `subjectKeyId`
        if (data['subjectKeyId']) { // data not null
          KeyId.validateJSON(data['subjectKeyId']);
        }
        // validate the optional field `x509Description`
        if (data['x509Description']) { // data not null
          X509Parameters.validateJSON(data['x509Description']);
        }

        return true;
    }


}



/**
 * Describes lists of issuer CA certificate URLs that appear in the \"Authority Information Access\" extension in the certificate.
 * @member {Array.<String>} aiaIssuingCertificateUrls
 */
CertificateDescription.prototype['aiaIssuingCertificateUrls'] = undefined;

/**
 * @member {module:model/KeyId} authorityKeyId
 */
CertificateDescription.prototype['authorityKeyId'] = undefined;

/**
 * @member {module:model/CertificateFingerprint} certFingerprint
 */
CertificateDescription.prototype['certFingerprint'] = undefined;

/**
 * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
 * @member {Array.<String>} crlDistributionPoints
 */
CertificateDescription.prototype['crlDistributionPoints'] = undefined;

/**
 * @member {module:model/PublicKey} publicKey
 */
CertificateDescription.prototype['publicKey'] = undefined;

/**
 * @member {module:model/SubjectDescription} subjectDescription
 */
CertificateDescription.prototype['subjectDescription'] = undefined;

/**
 * @member {module:model/KeyId} subjectKeyId
 */
CertificateDescription.prototype['subjectKeyId'] = undefined;

/**
 * @member {module:model/X509Parameters} x509Description
 */
CertificateDescription.prototype['x509Description'] = undefined;






export default CertificateDescription;

