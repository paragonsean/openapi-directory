/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubordinateConfigChain from './SubordinateConfigChain';

/**
 * The SubordinateConfig model module.
 * @module model/SubordinateConfig
 * @version v1
 */
class SubordinateConfig {
    /**
     * Constructs a new <code>SubordinateConfig</code>.
     * Describes a subordinate CA&#39;s issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
     * @alias module:model/SubordinateConfig
     */
    constructor() { 
        
        SubordinateConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubordinateConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubordinateConfig} obj Optional instance to populate.
     * @return {module:model/SubordinateConfig} The populated <code>SubordinateConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubordinateConfig();

            if (data.hasOwnProperty('certificateAuthority')) {
                obj['certificateAuthority'] = ApiClient.convertToType(data['certificateAuthority'], 'String');
            }
            if (data.hasOwnProperty('pemIssuerChain')) {
                obj['pemIssuerChain'] = SubordinateConfigChain.constructFromObject(data['pemIssuerChain']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubordinateConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubordinateConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificateAuthority'] && !(typeof data['certificateAuthority'] === 'string' || data['certificateAuthority'] instanceof String)) {
            throw new Error("Expected the field `certificateAuthority` to be a primitive type in the JSON string but got " + data['certificateAuthority']);
        }
        // validate the optional field `pemIssuerChain`
        if (data['pemIssuerChain']) { // data not null
          SubordinateConfigChain.validateJSON(data['pemIssuerChain']);
        }

        return true;
    }


}



/**
 * Required. This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/_*_/locations/_*_/caPools/_*_/certificateAuthorities/_*`.
 * @member {String} certificateAuthority
 */
SubordinateConfig.prototype['certificateAuthority'] = undefined;

/**
 * @member {module:model/SubordinateConfigChain} pemIssuerChain
 */
SubordinateConfig.prototype['pemIssuerChain'] = undefined;






export default SubordinateConfig;

