/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyUsageOptions model module.
 * @module model/KeyUsageOptions
 * @version v1
 */
class KeyUsageOptions {
    /**
     * Constructs a new <code>KeyUsageOptions</code>.
     * KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
     * @alias module:model/KeyUsageOptions
     */
    constructor() { 
        
        KeyUsageOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyUsageOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyUsageOptions} obj Optional instance to populate.
     * @return {module:model/KeyUsageOptions} The populated <code>KeyUsageOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyUsageOptions();

            if (data.hasOwnProperty('certSign')) {
                obj['certSign'] = ApiClient.convertToType(data['certSign'], 'Boolean');
            }
            if (data.hasOwnProperty('contentCommitment')) {
                obj['contentCommitment'] = ApiClient.convertToType(data['contentCommitment'], 'Boolean');
            }
            if (data.hasOwnProperty('crlSign')) {
                obj['crlSign'] = ApiClient.convertToType(data['crlSign'], 'Boolean');
            }
            if (data.hasOwnProperty('dataEncipherment')) {
                obj['dataEncipherment'] = ApiClient.convertToType(data['dataEncipherment'], 'Boolean');
            }
            if (data.hasOwnProperty('decipherOnly')) {
                obj['decipherOnly'] = ApiClient.convertToType(data['decipherOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('digitalSignature')) {
                obj['digitalSignature'] = ApiClient.convertToType(data['digitalSignature'], 'Boolean');
            }
            if (data.hasOwnProperty('encipherOnly')) {
                obj['encipherOnly'] = ApiClient.convertToType(data['encipherOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('keyAgreement')) {
                obj['keyAgreement'] = ApiClient.convertToType(data['keyAgreement'], 'Boolean');
            }
            if (data.hasOwnProperty('keyEncipherment')) {
                obj['keyEncipherment'] = ApiClient.convertToType(data['keyEncipherment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyUsageOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyUsageOptions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The key may be used to sign certificates.
 * @member {Boolean} certSign
 */
KeyUsageOptions.prototype['certSign'] = undefined;

/**
 * The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".
 * @member {Boolean} contentCommitment
 */
KeyUsageOptions.prototype['contentCommitment'] = undefined;

/**
 * The key may be used sign certificate revocation lists.
 * @member {Boolean} crlSign
 */
KeyUsageOptions.prototype['crlSign'] = undefined;

/**
 * The key may be used to encipher data.
 * @member {Boolean} dataEncipherment
 */
KeyUsageOptions.prototype['dataEncipherment'] = undefined;

/**
 * The key may be used to decipher only.
 * @member {Boolean} decipherOnly
 */
KeyUsageOptions.prototype['decipherOnly'] = undefined;

/**
 * The key may be used for digital signatures.
 * @member {Boolean} digitalSignature
 */
KeyUsageOptions.prototype['digitalSignature'] = undefined;

/**
 * The key may be used to encipher only.
 * @member {Boolean} encipherOnly
 */
KeyUsageOptions.prototype['encipherOnly'] = undefined;

/**
 * The key may be used in a key agreement protocol.
 * @member {Boolean} keyAgreement
 */
KeyUsageOptions.prototype['keyAgreement'] = undefined;

/**
 * The key may be used to encipher other keys.
 * @member {Boolean} keyEncipherment
 */
KeyUsageOptions.prototype['keyEncipherment'] = undefined;






export default KeyUsageOptions;

