/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateConfigKeyId from './CertificateConfigKeyId';
import PublicKey from './PublicKey';
import SubjectConfig from './SubjectConfig';
import X509Parameters from './X509Parameters';

/**
 * The CertificateConfig model module.
 * @module model/CertificateConfig
 * @version v1
 */
class CertificateConfig {
    /**
     * Constructs a new <code>CertificateConfig</code>.
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     * @alias module:model/CertificateConfig
     */
    constructor() { 
        
        CertificateConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateConfig} obj Optional instance to populate.
     * @return {module:model/CertificateConfig} The populated <code>CertificateConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateConfig();

            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = PublicKey.constructFromObject(data['publicKey']);
            }
            if (data.hasOwnProperty('subjectConfig')) {
                obj['subjectConfig'] = SubjectConfig.constructFromObject(data['subjectConfig']);
            }
            if (data.hasOwnProperty('subjectKeyId')) {
                obj['subjectKeyId'] = CertificateConfigKeyId.constructFromObject(data['subjectKeyId']);
            }
            if (data.hasOwnProperty('x509Config')) {
                obj['x509Config'] = X509Parameters.constructFromObject(data['x509Config']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `publicKey`
        if (data['publicKey']) { // data not null
          PublicKey.validateJSON(data['publicKey']);
        }
        // validate the optional field `subjectConfig`
        if (data['subjectConfig']) { // data not null
          SubjectConfig.validateJSON(data['subjectConfig']);
        }
        // validate the optional field `subjectKeyId`
        if (data['subjectKeyId']) { // data not null
          CertificateConfigKeyId.validateJSON(data['subjectKeyId']);
        }
        // validate the optional field `x509Config`
        if (data['x509Config']) { // data not null
          X509Parameters.validateJSON(data['x509Config']);
        }

        return true;
    }


}



/**
 * @member {module:model/PublicKey} publicKey
 */
CertificateConfig.prototype['publicKey'] = undefined;

/**
 * @member {module:model/SubjectConfig} subjectConfig
 */
CertificateConfig.prototype['subjectConfig'] = undefined;

/**
 * @member {module:model/CertificateConfigKeyId} subjectKeyId
 */
CertificateConfig.prototype['subjectKeyId'] = undefined;

/**
 * @member {module:model/X509Parameters} x509Config
 */
CertificateConfig.prototype['x509Config'] = undefined;






export default CertificateConfig;

