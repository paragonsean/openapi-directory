/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RevokedCertificate model module.
 * @module model/RevokedCertificate
 * @version v1
 */
class RevokedCertificate {
    /**
     * Constructs a new <code>RevokedCertificate</code>.
     * Describes a revoked Certificate.
     * @alias module:model/RevokedCertificate
     */
    constructor() { 
        
        RevokedCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RevokedCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RevokedCertificate} obj Optional instance to populate.
     * @return {module:model/RevokedCertificate} The populated <code>RevokedCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RevokedCertificate();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('hexSerialNumber')) {
                obj['hexSerialNumber'] = ApiClient.convertToType(data['hexSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('revocationReason')) {
                obj['revocationReason'] = ApiClient.convertToType(data['revocationReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RevokedCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RevokedCertificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['hexSerialNumber'] && !(typeof data['hexSerialNumber'] === 'string' || data['hexSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `hexSerialNumber` to be a primitive type in the JSON string but got " + data['hexSerialNumber']);
        }
        // ensure the json data is a string
        if (data['revocationReason'] && !(typeof data['revocationReason'] === 'string' || data['revocationReason'] instanceof String)) {
            throw new Error("Expected the field `revocationReason` to be a primitive type in the JSON string but got " + data['revocationReason']);
        }

        return true;
    }


}



/**
 * The resource name for the Certificate in the format `projects/_*_/locations/_*_/caPools/_*_/certificates/_*`.
 * @member {String} certificate
 */
RevokedCertificate.prototype['certificate'] = undefined;

/**
 * The serial number of the Certificate.
 * @member {String} hexSerialNumber
 */
RevokedCertificate.prototype['hexSerialNumber'] = undefined;

/**
 * The reason the Certificate was revoked.
 * @member {module:model/RevokedCertificate.RevocationReasonEnum} revocationReason
 */
RevokedCertificate.prototype['revocationReason'] = undefined;





/**
 * Allowed values for the <code>revocationReason</code> property.
 * @enum {String}
 * @readonly
 */
RevokedCertificate['RevocationReasonEnum'] = {

    /**
     * value: "REVOCATION_REASON_UNSPECIFIED"
     * @const
     */
    "REVOCATION_REASON_UNSPECIFIED": "REVOCATION_REASON_UNSPECIFIED",

    /**
     * value: "KEY_COMPROMISE"
     * @const
     */
    "KEY_COMPROMISE": "KEY_COMPROMISE",

    /**
     * value: "CERTIFICATE_AUTHORITY_COMPROMISE"
     * @const
     */
    "CERTIFICATE_AUTHORITY_COMPROMISE": "CERTIFICATE_AUTHORITY_COMPROMISE",

    /**
     * value: "AFFILIATION_CHANGED"
     * @const
     */
    "AFFILIATION_CHANGED": "AFFILIATION_CHANGED",

    /**
     * value: "SUPERSEDED"
     * @const
     */
    "SUPERSEDED": "SUPERSEDED",

    /**
     * value: "CESSATION_OF_OPERATION"
     * @const
     */
    "CESSATION_OF_OPERATION": "CESSATION_OF_OPERATION",

    /**
     * value: "CERTIFICATE_HOLD"
     * @const
     */
    "CERTIFICATE_HOLD": "CERTIFICATE_HOLD",

    /**
     * value: "PRIVILEGE_WITHDRAWN"
     * @const
     */
    "PRIVILEGE_WITHDRAWN": "PRIVILEGE_WITHDRAWN",

    /**
     * value: "ATTRIBUTE_AUTHORITY_COMPROMISE"
     * @const
     */
    "ATTRIBUTE_AUTHORITY_COMPROMISE": "ATTRIBUTE_AUTHORITY_COMPROMISE"
};



export default RevokedCertificate;

