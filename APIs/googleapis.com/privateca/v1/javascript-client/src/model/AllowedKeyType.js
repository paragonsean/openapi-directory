/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EcKeyType from './EcKeyType';
import RsaKeyType from './RsaKeyType';

/**
 * The AllowedKeyType model module.
 * @module model/AllowedKeyType
 * @version v1
 */
class AllowedKeyType {
    /**
     * Constructs a new <code>AllowedKeyType</code>.
     * Describes a \&quot;type\&quot; of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
     * @alias module:model/AllowedKeyType
     */
    constructor() { 
        
        AllowedKeyType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllowedKeyType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllowedKeyType} obj Optional instance to populate.
     * @return {module:model/AllowedKeyType} The populated <code>AllowedKeyType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllowedKeyType();

            if (data.hasOwnProperty('ellipticCurve')) {
                obj['ellipticCurve'] = EcKeyType.constructFromObject(data['ellipticCurve']);
            }
            if (data.hasOwnProperty('rsa')) {
                obj['rsa'] = RsaKeyType.constructFromObject(data['rsa']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllowedKeyType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllowedKeyType</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ellipticCurve`
        if (data['ellipticCurve']) { // data not null
          EcKeyType.validateJSON(data['ellipticCurve']);
        }
        // validate the optional field `rsa`
        if (data['rsa']) { // data not null
          RsaKeyType.validateJSON(data['rsa']);
        }

        return true;
    }


}



/**
 * @member {module:model/EcKeyType} ellipticCurve
 */
AllowedKeyType.prototype['ellipticCurve'] = undefined;

/**
 * @member {module:model/RsaKeyType} rsa
 */
AllowedKeyType.prototype['rsa'] = undefined;






export default AllowedKeyType;

