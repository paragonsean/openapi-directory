/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NameConstraints model module.
 * @module model/NameConstraints
 * @version v1
 */
class NameConstraints {
    /**
     * Constructs a new <code>NameConstraints</code>.
     * Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10
     * @alias module:model/NameConstraints
     */
    constructor() { 
        
        NameConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NameConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NameConstraints} obj Optional instance to populate.
     * @return {module:model/NameConstraints} The populated <code>NameConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NameConstraints();

            if (data.hasOwnProperty('critical')) {
                obj['critical'] = ApiClient.convertToType(data['critical'], 'Boolean');
            }
            if (data.hasOwnProperty('excludedDnsNames')) {
                obj['excludedDnsNames'] = ApiClient.convertToType(data['excludedDnsNames'], ['String']);
            }
            if (data.hasOwnProperty('excludedEmailAddresses')) {
                obj['excludedEmailAddresses'] = ApiClient.convertToType(data['excludedEmailAddresses'], ['String']);
            }
            if (data.hasOwnProperty('excludedIpRanges')) {
                obj['excludedIpRanges'] = ApiClient.convertToType(data['excludedIpRanges'], ['String']);
            }
            if (data.hasOwnProperty('excludedUris')) {
                obj['excludedUris'] = ApiClient.convertToType(data['excludedUris'], ['String']);
            }
            if (data.hasOwnProperty('permittedDnsNames')) {
                obj['permittedDnsNames'] = ApiClient.convertToType(data['permittedDnsNames'], ['String']);
            }
            if (data.hasOwnProperty('permittedEmailAddresses')) {
                obj['permittedEmailAddresses'] = ApiClient.convertToType(data['permittedEmailAddresses'], ['String']);
            }
            if (data.hasOwnProperty('permittedIpRanges')) {
                obj['permittedIpRanges'] = ApiClient.convertToType(data['permittedIpRanges'], ['String']);
            }
            if (data.hasOwnProperty('permittedUris')) {
                obj['permittedUris'] = ApiClient.convertToType(data['permittedUris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NameConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NameConstraints</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['excludedDnsNames'])) {
            throw new Error("Expected the field `excludedDnsNames` to be an array in the JSON data but got " + data['excludedDnsNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedEmailAddresses'])) {
            throw new Error("Expected the field `excludedEmailAddresses` to be an array in the JSON data but got " + data['excludedEmailAddresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedIpRanges'])) {
            throw new Error("Expected the field `excludedIpRanges` to be an array in the JSON data but got " + data['excludedIpRanges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedUris'])) {
            throw new Error("Expected the field `excludedUris` to be an array in the JSON data but got " + data['excludedUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permittedDnsNames'])) {
            throw new Error("Expected the field `permittedDnsNames` to be an array in the JSON data but got " + data['permittedDnsNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permittedEmailAddresses'])) {
            throw new Error("Expected the field `permittedEmailAddresses` to be an array in the JSON data but got " + data['permittedEmailAddresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permittedIpRanges'])) {
            throw new Error("Expected the field `permittedIpRanges` to be an array in the JSON data but got " + data['permittedIpRanges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permittedUris'])) {
            throw new Error("Expected the field `permittedUris` to be an array in the JSON data but got " + data['permittedUris']);
        }

        return true;
    }


}



/**
 * Indicates whether or not the name constraints are marked critical.
 * @member {Boolean} critical
 */
NameConstraints.prototype['critical'] = undefined;

/**
 * Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.
 * @member {Array.<String>} excludedDnsNames
 */
NameConstraints.prototype['excludedDnsNames'] = undefined;

/**
 * Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.
 * @member {Array.<String>} excludedEmailAddresses
 */
NameConstraints.prototype['excludedEmailAddresses'] = undefined;

/**
 * Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.
 * @member {Array.<String>} excludedIpRanges
 */
NameConstraints.prototype['excludedIpRanges'] = undefined;

/**
 * Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
 * @member {Array.<String>} excludedUris
 */
NameConstraints.prototype['excludedUris'] = undefined;

/**
 * Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.
 * @member {Array.<String>} permittedDnsNames
 */
NameConstraints.prototype['permittedDnsNames'] = undefined;

/**
 * Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.
 * @member {Array.<String>} permittedEmailAddresses
 */
NameConstraints.prototype['permittedEmailAddresses'] = undefined;

/**
 * Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.
 * @member {Array.<String>} permittedIpRanges
 */
NameConstraints.prototype['permittedIpRanges'] = undefined;

/**
 * Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
 * @member {Array.<String>} permittedUris
 */
NameConstraints.prototype['permittedUris'] = undefined;






export default NameConstraints;

