/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import X509Extension from './X509Extension';

/**
 * The SubjectAltNames model module.
 * @module model/SubjectAltNames
 * @version v1
 */
class SubjectAltNames {
    /**
     * Constructs a new <code>SubjectAltNames</code>.
     * SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \&quot;common name\&quot; in the distinguished name).
     * @alias module:model/SubjectAltNames
     */
    constructor() { 
        
        SubjectAltNames.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubjectAltNames</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectAltNames} obj Optional instance to populate.
     * @return {module:model/SubjectAltNames} The populated <code>SubjectAltNames</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectAltNames();

            if (data.hasOwnProperty('customSans')) {
                obj['customSans'] = ApiClient.convertToType(data['customSans'], [X509Extension]);
            }
            if (data.hasOwnProperty('dnsNames')) {
                obj['dnsNames'] = ApiClient.convertToType(data['dnsNames'], ['String']);
            }
            if (data.hasOwnProperty('emailAddresses')) {
                obj['emailAddresses'] = ApiClient.convertToType(data['emailAddresses'], ['String']);
            }
            if (data.hasOwnProperty('ipAddresses')) {
                obj['ipAddresses'] = ApiClient.convertToType(data['ipAddresses'], ['String']);
            }
            if (data.hasOwnProperty('uris')) {
                obj['uris'] = ApiClient.convertToType(data['uris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubjectAltNames</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubjectAltNames</code>.
     */
    static validateJSON(data) {
        if (data['customSans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customSans'])) {
                throw new Error("Expected the field `customSans` to be an array in the JSON data but got " + data['customSans']);
            }
            // validate the optional field `customSans` (array)
            for (const item of data['customSans']) {
                X509Extension.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dnsNames'])) {
            throw new Error("Expected the field `dnsNames` to be an array in the JSON data but got " + data['dnsNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emailAddresses'])) {
            throw new Error("Expected the field `emailAddresses` to be an array in the JSON data but got " + data['emailAddresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipAddresses'])) {
            throw new Error("Expected the field `ipAddresses` to be an array in the JSON data but got " + data['ipAddresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uris'])) {
            throw new Error("Expected the field `uris` to be an array in the JSON data but got " + data['uris']);
        }

        return true;
    }


}



/**
 * Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.
 * @member {Array.<module:model/X509Extension>} customSans
 */
SubjectAltNames.prototype['customSans'] = undefined;

/**
 * Contains only valid, fully-qualified host names.
 * @member {Array.<String>} dnsNames
 */
SubjectAltNames.prototype['dnsNames'] = undefined;

/**
 * Contains only valid RFC 2822 E-mail addresses.
 * @member {Array.<String>} emailAddresses
 */
SubjectAltNames.prototype['emailAddresses'] = undefined;

/**
 * Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
 * @member {Array.<String>} ipAddresses
 */
SubjectAltNames.prototype['ipAddresses'] = undefined;

/**
 * Contains only valid RFC 3986 URIs.
 * @member {Array.<String>} uris
 */
SubjectAltNames.prototype['uris'] = undefined;






export default SubjectAltNames;

