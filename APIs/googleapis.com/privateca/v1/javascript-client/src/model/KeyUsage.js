/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedKeyUsageOptions from './ExtendedKeyUsageOptions';
import KeyUsageOptions from './KeyUsageOptions';
import ObjectId from './ObjectId';

/**
 * The KeyUsage model module.
 * @module model/KeyUsage
 * @version v1
 */
class KeyUsage {
    /**
     * Constructs a new <code>KeyUsage</code>.
     * A KeyUsage describes key usage values that may appear in an X.509 certificate.
     * @alias module:model/KeyUsage
     */
    constructor() { 
        
        KeyUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyUsage} obj Optional instance to populate.
     * @return {module:model/KeyUsage} The populated <code>KeyUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyUsage();

            if (data.hasOwnProperty('baseKeyUsage')) {
                obj['baseKeyUsage'] = KeyUsageOptions.constructFromObject(data['baseKeyUsage']);
            }
            if (data.hasOwnProperty('extendedKeyUsage')) {
                obj['extendedKeyUsage'] = ExtendedKeyUsageOptions.constructFromObject(data['extendedKeyUsage']);
            }
            if (data.hasOwnProperty('unknownExtendedKeyUsages')) {
                obj['unknownExtendedKeyUsages'] = ApiClient.convertToType(data['unknownExtendedKeyUsages'], [ObjectId]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyUsage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `baseKeyUsage`
        if (data['baseKeyUsage']) { // data not null
          KeyUsageOptions.validateJSON(data['baseKeyUsage']);
        }
        // validate the optional field `extendedKeyUsage`
        if (data['extendedKeyUsage']) { // data not null
          ExtendedKeyUsageOptions.validateJSON(data['extendedKeyUsage']);
        }
        if (data['unknownExtendedKeyUsages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unknownExtendedKeyUsages'])) {
                throw new Error("Expected the field `unknownExtendedKeyUsages` to be an array in the JSON data but got " + data['unknownExtendedKeyUsages']);
            }
            // validate the optional field `unknownExtendedKeyUsages` (array)
            for (const item of data['unknownExtendedKeyUsages']) {
                ObjectId.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/KeyUsageOptions} baseKeyUsage
 */
KeyUsage.prototype['baseKeyUsage'] = undefined;

/**
 * @member {module:model/ExtendedKeyUsageOptions} extendedKeyUsage
 */
KeyUsage.prototype['extendedKeyUsage'] = undefined;

/**
 * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
 * @member {Array.<module:model/ObjectId>} unknownExtendedKeyUsages
 */
KeyUsage.prototype['unknownExtendedKeyUsages'] = undefined;






export default KeyUsage;

