/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessUrls from './AccessUrls';
import CertificateConfig from './CertificateConfig';
import CertificateDescription from './CertificateDescription';
import KeyVersionSpec from './KeyVersionSpec';
import SubordinateConfig from './SubordinateConfig';

/**
 * The CertificateAuthority model module.
 * @module model/CertificateAuthority
 * @version v1
 */
class CertificateAuthority {
    /**
     * Constructs a new <code>CertificateAuthority</code>.
     * A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
     * @alias module:model/CertificateAuthority
     */
    constructor() { 
        
        CertificateAuthority.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateAuthority</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateAuthority} obj Optional instance to populate.
     * @return {module:model/CertificateAuthority} The populated <code>CertificateAuthority</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateAuthority();

            if (data.hasOwnProperty('accessUrls')) {
                obj['accessUrls'] = AccessUrls.constructFromObject(data['accessUrls']);
            }
            if (data.hasOwnProperty('caCertificateDescriptions')) {
                obj['caCertificateDescriptions'] = ApiClient.convertToType(data['caCertificateDescriptions'], [CertificateDescription]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = CertificateConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('gcsBucket')) {
                obj['gcsBucket'] = ApiClient.convertToType(data['gcsBucket'], 'String');
            }
            if (data.hasOwnProperty('keySpec')) {
                obj['keySpec'] = KeyVersionSpec.constructFromObject(data['keySpec']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lifetime')) {
                obj['lifetime'] = ApiClient.convertToType(data['lifetime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pemCaCertificates')) {
                obj['pemCaCertificates'] = ApiClient.convertToType(data['pemCaCertificates'], ['String']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subordinateConfig')) {
                obj['subordinateConfig'] = SubordinateConfig.constructFromObject(data['subordinateConfig']);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateAuthority</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateAuthority</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessUrls`
        if (data['accessUrls']) { // data not null
          AccessUrls.validateJSON(data['accessUrls']);
        }
        if (data['caCertificateDescriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caCertificateDescriptions'])) {
                throw new Error("Expected the field `caCertificateDescriptions` to be an array in the JSON data but got " + data['caCertificateDescriptions']);
            }
            // validate the optional field `caCertificateDescriptions` (array)
            for (const item of data['caCertificateDescriptions']) {
                CertificateDescription.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          CertificateConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['gcsBucket'] && !(typeof data['gcsBucket'] === 'string' || data['gcsBucket'] instanceof String)) {
            throw new Error("Expected the field `gcsBucket` to be a primitive type in the JSON string but got " + data['gcsBucket']);
        }
        // validate the optional field `keySpec`
        if (data['keySpec']) { // data not null
          KeyVersionSpec.validateJSON(data['keySpec']);
        }
        // ensure the json data is a string
        if (data['lifetime'] && !(typeof data['lifetime'] === 'string' || data['lifetime'] instanceof String)) {
            throw new Error("Expected the field `lifetime` to be a primitive type in the JSON string but got " + data['lifetime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pemCaCertificates'])) {
            throw new Error("Expected the field `pemCaCertificates` to be an array in the JSON data but got " + data['pemCaCertificates']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `subordinateConfig`
        if (data['subordinateConfig']) { // data not null
          SubordinateConfig.validateJSON(data['subordinateConfig']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccessUrls} accessUrls
 */
CertificateAuthority.prototype['accessUrls'] = undefined;

/**
 * Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
 * @member {Array.<module:model/CertificateDescription>} caCertificateDescriptions
 */
CertificateAuthority.prototype['caCertificateDescriptions'] = undefined;

/**
 * @member {module:model/CertificateConfig} config
 */
CertificateAuthority.prototype['config'] = undefined;

/**
 * Output only. The time at which this CertificateAuthority was created.
 * @member {String} createTime
 */
CertificateAuthority.prototype['createTime'] = undefined;

/**
 * Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
 * @member {String} deleteTime
 */
CertificateAuthority.prototype['deleteTime'] = undefined;

/**
 * Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
 * @member {String} expireTime
 */
CertificateAuthority.prototype['expireTime'] = undefined;

/**
 * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
 * @member {String} gcsBucket
 */
CertificateAuthority.prototype['gcsBucket'] = undefined;

/**
 * @member {module:model/KeyVersionSpec} keySpec
 */
CertificateAuthority.prototype['keySpec'] = undefined;

/**
 * Optional. Labels with user-defined metadata.
 * @member {Object.<String, String>} labels
 */
CertificateAuthority.prototype['labels'] = undefined;

/**
 * Required. Immutable. The desired lifetime of the CA certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate.
 * @member {String} lifetime
 */
CertificateAuthority.prototype['lifetime'] = undefined;

/**
 * Output only. The resource name for this CertificateAuthority in the format `projects/_*_/locations/_*_/caPools/_*_/certificateAuthorities/_*`.
 * @member {String} name
 */
CertificateAuthority.prototype['name'] = undefined;

/**
 * Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
 * @member {Array.<String>} pemCaCertificates
 */
CertificateAuthority.prototype['pemCaCertificates'] = undefined;

/**
 * Output only. The State for this CertificateAuthority.
 * @member {module:model/CertificateAuthority.StateEnum} state
 */
CertificateAuthority.prototype['state'] = undefined;

/**
 * @member {module:model/SubordinateConfig} subordinateConfig
 */
CertificateAuthority.prototype['subordinateConfig'] = undefined;

/**
 * Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
 * @member {module:model/CertificateAuthority.TierEnum} tier
 */
CertificateAuthority.prototype['tier'] = undefined;

/**
 * Required. Immutable. The Type of this CertificateAuthority.
 * @member {module:model/CertificateAuthority.TypeEnum} type
 */
CertificateAuthority.prototype['type'] = undefined;

/**
 * Output only. The time at which this CertificateAuthority was last updated.
 * @member {String} updateTime
 */
CertificateAuthority.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAuthority['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "STAGED"
     * @const
     */
    "STAGED": "STAGED",

    /**
     * value: "AWAITING_USER_ACTIVATION"
     * @const
     */
    "AWAITING_USER_ACTIVATION": "AWAITING_USER_ACTIVATION",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAuthority['TierEnum'] = {

    /**
     * value: "TIER_UNSPECIFIED"
     * @const
     */
    "TIER_UNSPECIFIED": "TIER_UNSPECIFIED",

    /**
     * value: "ENTERPRISE"
     * @const
     */
    "ENTERPRISE": "ENTERPRISE",

    /**
     * value: "DEVOPS"
     * @const
     */
    "DEVOPS": "DEVOPS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAuthority['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "SELF_SIGNED"
     * @const
     */
    "SELF_SIGNED": "SELF_SIGNED",

    /**
     * value: "SUBORDINATE"
     * @const
     */
    "SUBORDINATE": "SUBORDINATE"
};



export default CertificateAuthority;

