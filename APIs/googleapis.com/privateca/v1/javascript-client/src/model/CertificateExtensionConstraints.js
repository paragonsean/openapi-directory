/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectId from './ObjectId';

/**
 * The CertificateExtensionConstraints model module.
 * @module model/CertificateExtensionConstraints
 * @version v1
 */
class CertificateExtensionConstraints {
    /**
     * Constructs a new <code>CertificateExtensionConstraints</code>.
     * Describes a set of X.509 extensions that may be part of some certificate issuance controls.
     * @alias module:model/CertificateExtensionConstraints
     */
    constructor() { 
        
        CertificateExtensionConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateExtensionConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateExtensionConstraints} obj Optional instance to populate.
     * @return {module:model/CertificateExtensionConstraints} The populated <code>CertificateExtensionConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateExtensionConstraints();

            if (data.hasOwnProperty('additionalExtensions')) {
                obj['additionalExtensions'] = ApiClient.convertToType(data['additionalExtensions'], [ObjectId]);
            }
            if (data.hasOwnProperty('knownExtensions')) {
                obj['knownExtensions'] = ApiClient.convertToType(data['knownExtensions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateExtensionConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateExtensionConstraints</code>.
     */
    static validateJSON(data) {
        if (data['additionalExtensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalExtensions'])) {
                throw new Error("Expected the field `additionalExtensions` to be an array in the JSON data but got " + data['additionalExtensions']);
            }
            // validate the optional field `additionalExtensions` (array)
            for (const item of data['additionalExtensions']) {
                ObjectId.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['knownExtensions'])) {
            throw new Error("Expected the field `knownExtensions` to be an array in the JSON data but got " + data['knownExtensions']);
        }

        return true;
    }


}



/**
 * Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
 * @member {Array.<module:model/ObjectId>} additionalExtensions
 */
CertificateExtensionConstraints.prototype['additionalExtensions'] = undefined;

/**
 * Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
 * @member {Array.<module:model/CertificateExtensionConstraints.KnownExtensionsEnum>} knownExtensions
 */
CertificateExtensionConstraints.prototype['knownExtensions'] = undefined;





/**
 * Allowed values for the <code>knownExtensions</code> property.
 * @enum {String}
 * @readonly
 */
CertificateExtensionConstraints['KnownExtensionsEnum'] = {

    /**
     * value: "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED"
     * @const
     */
    "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED": "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED",

    /**
     * value: "BASE_KEY_USAGE"
     * @const
     */
    "BASE_KEY_USAGE": "BASE_KEY_USAGE",

    /**
     * value: "EXTENDED_KEY_USAGE"
     * @const
     */
    "EXTENDED_KEY_USAGE": "EXTENDED_KEY_USAGE",

    /**
     * value: "CA_OPTIONS"
     * @const
     */
    "CA_OPTIONS": "CA_OPTIONS",

    /**
     * value: "POLICY_IDS"
     * @const
     */
    "POLICY_IDS": "POLICY_IDS",

    /**
     * value: "AIA_OCSP_SERVERS"
     * @const
     */
    "AIA_OCSP_SERVERS": "AIA_OCSP_SERVERS",

    /**
     * value: "NAME_CONSTRAINTS"
     * @const
     */
    "NAME_CONSTRAINTS": "NAME_CONSTRAINTS"
};



export default CertificateExtensionConstraints;

