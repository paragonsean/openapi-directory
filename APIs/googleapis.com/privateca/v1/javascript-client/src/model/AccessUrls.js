/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessUrls model module.
 * @module model/AccessUrls
 * @version v1
 */
class AccessUrls {
    /**
     * Constructs a new <code>AccessUrls</code>.
     * URLs where a CertificateAuthority will publish content.
     * @alias module:model/AccessUrls
     */
    constructor() { 
        
        AccessUrls.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccessUrls</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessUrls} obj Optional instance to populate.
     * @return {module:model/AccessUrls} The populated <code>AccessUrls</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessUrls();

            if (data.hasOwnProperty('caCertificateAccessUrl')) {
                obj['caCertificateAccessUrl'] = ApiClient.convertToType(data['caCertificateAccessUrl'], 'String');
            }
            if (data.hasOwnProperty('crlAccessUrls')) {
                obj['crlAccessUrls'] = ApiClient.convertToType(data['crlAccessUrls'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessUrls</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessUrls</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caCertificateAccessUrl'] && !(typeof data['caCertificateAccessUrl'] === 'string' || data['caCertificateAccessUrl'] instanceof String)) {
            throw new Error("Expected the field `caCertificateAccessUrl` to be a primitive type in the JSON string but got " + data['caCertificateAccessUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['crlAccessUrls'])) {
            throw new Error("Expected the field `crlAccessUrls` to be an array in the JSON data but got " + data['crlAccessUrls']);
        }

        return true;
    }


}



/**
 * The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
 * @member {String} caCertificateAccessUrl
 */
AccessUrls.prototype['caCertificateAccessUrl'] = undefined;

/**
 * The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
 * @member {Array.<String>} crlAccessUrls
 */
AccessUrls.prototype['crlAccessUrls'] = undefined;






export default AccessUrls;

