/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateConfig from './CertificateConfig';
import CertificateDescription from './CertificateDescription';
import RevocationDetails from './RevocationDetails';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version v1
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
     * @alias module:model/Certificate
     */
    constructor() { 
        
        Certificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('certificateDescription')) {
                obj['certificateDescription'] = CertificateDescription.constructFromObject(data['certificateDescription']);
            }
            if (data.hasOwnProperty('certificateTemplate')) {
                obj['certificateTemplate'] = ApiClient.convertToType(data['certificateTemplate'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = CertificateConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('issuerCertificateAuthority')) {
                obj['issuerCertificateAuthority'] = ApiClient.convertToType(data['issuerCertificateAuthority'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lifetime')) {
                obj['lifetime'] = ApiClient.convertToType(data['lifetime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pemCertificate')) {
                obj['pemCertificate'] = ApiClient.convertToType(data['pemCertificate'], 'String');
            }
            if (data.hasOwnProperty('pemCertificateChain')) {
                obj['pemCertificateChain'] = ApiClient.convertToType(data['pemCertificateChain'], ['String']);
            }
            if (data.hasOwnProperty('pemCsr')) {
                obj['pemCsr'] = ApiClient.convertToType(data['pemCsr'], 'String');
            }
            if (data.hasOwnProperty('revocationDetails')) {
                obj['revocationDetails'] = RevocationDetails.constructFromObject(data['revocationDetails']);
            }
            if (data.hasOwnProperty('subjectMode')) {
                obj['subjectMode'] = ApiClient.convertToType(data['subjectMode'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `certificateDescription`
        if (data['certificateDescription']) { // data not null
          CertificateDescription.validateJSON(data['certificateDescription']);
        }
        // ensure the json data is a string
        if (data['certificateTemplate'] && !(typeof data['certificateTemplate'] === 'string' || data['certificateTemplate'] instanceof String)) {
            throw new Error("Expected the field `certificateTemplate` to be a primitive type in the JSON string but got " + data['certificateTemplate']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          CertificateConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['issuerCertificateAuthority'] && !(typeof data['issuerCertificateAuthority'] === 'string' || data['issuerCertificateAuthority'] instanceof String)) {
            throw new Error("Expected the field `issuerCertificateAuthority` to be a primitive type in the JSON string but got " + data['issuerCertificateAuthority']);
        }
        // ensure the json data is a string
        if (data['lifetime'] && !(typeof data['lifetime'] === 'string' || data['lifetime'] instanceof String)) {
            throw new Error("Expected the field `lifetime` to be a primitive type in the JSON string but got " + data['lifetime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pemCertificate'] && !(typeof data['pemCertificate'] === 'string' || data['pemCertificate'] instanceof String)) {
            throw new Error("Expected the field `pemCertificate` to be a primitive type in the JSON string but got " + data['pemCertificate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pemCertificateChain'])) {
            throw new Error("Expected the field `pemCertificateChain` to be an array in the JSON data but got " + data['pemCertificateChain']);
        }
        // ensure the json data is a string
        if (data['pemCsr'] && !(typeof data['pemCsr'] === 'string' || data['pemCsr'] instanceof String)) {
            throw new Error("Expected the field `pemCsr` to be a primitive type in the JSON string but got " + data['pemCsr']);
        }
        // validate the optional field `revocationDetails`
        if (data['revocationDetails']) { // data not null
          RevocationDetails.validateJSON(data['revocationDetails']);
        }
        // ensure the json data is a string
        if (data['subjectMode'] && !(typeof data['subjectMode'] === 'string' || data['subjectMode'] instanceof String)) {
            throw new Error("Expected the field `subjectMode` to be a primitive type in the JSON string but got " + data['subjectMode']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateDescription} certificateDescription
 */
Certificate.prototype['certificateDescription'] = undefined;

/**
 * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/_*_/locations/_*_/certificateTemplates/_*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
 * @member {String} certificateTemplate
 */
Certificate.prototype['certificateTemplate'] = undefined;

/**
 * @member {module:model/CertificateConfig} config
 */
Certificate.prototype['config'] = undefined;

/**
 * Output only. The time at which this Certificate was created.
 * @member {String} createTime
 */
Certificate.prototype['createTime'] = undefined;

/**
 * Output only. The resource name of the issuing CertificateAuthority in the format `projects/_*_/locations/_*_/caPools/_*_/certificateAuthorities/_*`.
 * @member {String} issuerCertificateAuthority
 */
Certificate.prototype['issuerCertificateAuthority'] = undefined;

/**
 * Optional. Labels with user-defined metadata.
 * @member {Object.<String, String>} labels
 */
Certificate.prototype['labels'] = undefined;

/**
 * Required. Immutable. The desired lifetime of a certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
 * @member {String} lifetime
 */
Certificate.prototype['lifetime'] = undefined;

/**
 * Output only. The resource name for this Certificate in the format `projects/_*_/locations/_*_/caPools/_*_/certificates/_*`.
 * @member {String} name
 */
Certificate.prototype['name'] = undefined;

/**
 * Output only. The pem-encoded, signed X.509 certificate.
 * @member {String} pemCertificate
 */
Certificate.prototype['pemCertificate'] = undefined;

/**
 * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
 * @member {Array.<String>} pemCertificateChain
 */
Certificate.prototype['pemCertificateChain'] = undefined;

/**
 * Immutable. A pem-encoded X.509 certificate signing request (CSR).
 * @member {String} pemCsr
 */
Certificate.prototype['pemCsr'] = undefined;

/**
 * @member {module:model/RevocationDetails} revocationDetails
 */
Certificate.prototype['revocationDetails'] = undefined;

/**
 * Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
 * @member {module:model/Certificate.SubjectModeEnum} subjectMode
 */
Certificate.prototype['subjectMode'] = undefined;

/**
 * Output only. The time at which this Certificate was updated.
 * @member {String} updateTime
 */
Certificate.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>subjectMode</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['SubjectModeEnum'] = {

    /**
     * value: "SUBJECT_REQUEST_MODE_UNSPECIFIED"
     * @const
     */
    "SUBJECT_REQUEST_MODE_UNSPECIFIED": "SUBJECT_REQUEST_MODE_UNSPECIFIED",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "REFLECTED_SPIFFE"
     * @const
     */
    "REFLECTED_SPIFFE": "REFLECTED_SPIFFE"
};



export default Certificate;

