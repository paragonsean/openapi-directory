/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublishingOptions model module.
 * @module model/PublishingOptions
 * @version v1
 */
class PublishingOptions {
    /**
     * Constructs a new <code>PublishingOptions</code>.
     * Options relating to the publication of each CertificateAuthority&#39;s CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
     * @alias module:model/PublishingOptions
     */
    constructor() { 
        
        PublishingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishingOptions} obj Optional instance to populate.
     * @return {module:model/PublishingOptions} The populated <code>PublishingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishingOptions();

            if (data.hasOwnProperty('encodingFormat')) {
                obj['encodingFormat'] = ApiClient.convertToType(data['encodingFormat'], 'String');
            }
            if (data.hasOwnProperty('publishCaCert')) {
                obj['publishCaCert'] = ApiClient.convertToType(data['publishCaCert'], 'Boolean');
            }
            if (data.hasOwnProperty('publishCrl')) {
                obj['publishCrl'] = ApiClient.convertToType(data['publishCrl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encodingFormat'] && !(typeof data['encodingFormat'] === 'string' || data['encodingFormat'] instanceof String)) {
            throw new Error("Expected the field `encodingFormat` to be a primitive type in the JSON string but got " + data['encodingFormat']);
        }

        return true;
    }


}



/**
 * Optional. Specifies the encoding format of each CertificateAuthority's CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.
 * @member {module:model/PublishingOptions.EncodingFormatEnum} encodingFormat
 */
PublishingOptions.prototype['encodingFormat'] = undefined;

/**
 * Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the \"Authority Information Access\" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
 * @member {Boolean} publishCaCert
 */
PublishingOptions.prototype['publishCaCert'] = undefined;

/**
 * Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the \"CRL Distribution Points\" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
 * @member {Boolean} publishCrl
 */
PublishingOptions.prototype['publishCrl'] = undefined;





/**
 * Allowed values for the <code>encodingFormat</code> property.
 * @enum {String}
 * @readonly
 */
PublishingOptions['EncodingFormatEnum'] = {

    /**
     * value: "ENCODING_FORMAT_UNSPECIFIED"
     * @const
     */
    "ENCODING_FORMAT_UNSPECIFIED": "ENCODING_FORMAT_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM",

    /**
     * value: "DER"
     * @const
     */
    "DER": "DER"
};



export default PublishingOptions;

