/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectId model module.
 * @module model/ObjectId
 * @version v1
 */
class ObjectId {
    /**
     * Constructs a new <code>ObjectId</code>.
     * An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
     * @alias module:model/ObjectId
     */
    constructor() { 
        
        ObjectId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectId} obj Optional instance to populate.
     * @return {module:model/ObjectId} The populated <code>ObjectId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectId();

            if (data.hasOwnProperty('objectIdPath')) {
                obj['objectIdPath'] = ApiClient.convertToType(data['objectIdPath'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['objectIdPath'])) {
            throw new Error("Expected the field `objectIdPath` to be an array in the JSON data but got " + data['objectIdPath']);
        }

        return true;
    }


}



/**
 * Required. The parts of an OID path. The most significant parts of the path come first.
 * @member {Array.<Number>} objectIdPath
 */
ObjectId.prototype['objectIdPath'] = undefined;






export default ObjectId;

