/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertChain from './CertChain';

/**
 * The FetchCaCertsResponse model module.
 * @module model/FetchCaCertsResponse
 * @version v1
 */
class FetchCaCertsResponse {
    /**
     * Constructs a new <code>FetchCaCertsResponse</code>.
     * Response message for CertificateAuthorityService.FetchCaCerts.
     * @alias module:model/FetchCaCertsResponse
     */
    constructor() { 
        
        FetchCaCertsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FetchCaCertsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchCaCertsResponse} obj Optional instance to populate.
     * @return {module:model/FetchCaCertsResponse} The populated <code>FetchCaCertsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchCaCertsResponse();

            if (data.hasOwnProperty('caCerts')) {
                obj['caCerts'] = ApiClient.convertToType(data['caCerts'], [CertChain]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FetchCaCertsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FetchCaCertsResponse</code>.
     */
    static validateJSON(data) {
        if (data['caCerts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caCerts'])) {
                throw new Error("Expected the field `caCerts` to be an array in the JSON data but got " + data['caCerts']);
            }
            // validate the optional field `caCerts` (array)
            for (const item of data['caCerts']) {
                CertChain.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The PEM encoded CA certificate chains of all Certificate Authorities in this CaPool in the ENABLED, DISABLED, or STAGED states.
 * @member {Array.<module:model/CertChain>} caCerts
 */
FetchCaCertsResponse.prototype['caCerts'] = undefined;






export default FetchCaCertsResponse;

