/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaOptions from './CaOptions';
import KeyUsage from './KeyUsage';
import NameConstraints from './NameConstraints';
import ObjectId from './ObjectId';
import X509Extension from './X509Extension';

/**
 * The X509Parameters model module.
 * @module model/X509Parameters
 * @version v1
 */
class X509Parameters {
    /**
     * Constructs a new <code>X509Parameters</code>.
     * An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
     * @alias module:model/X509Parameters
     */
    constructor() { 
        
        X509Parameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>X509Parameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X509Parameters} obj Optional instance to populate.
     * @return {module:model/X509Parameters} The populated <code>X509Parameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X509Parameters();

            if (data.hasOwnProperty('additionalExtensions')) {
                obj['additionalExtensions'] = ApiClient.convertToType(data['additionalExtensions'], [X509Extension]);
            }
            if (data.hasOwnProperty('aiaOcspServers')) {
                obj['aiaOcspServers'] = ApiClient.convertToType(data['aiaOcspServers'], ['String']);
            }
            if (data.hasOwnProperty('caOptions')) {
                obj['caOptions'] = CaOptions.constructFromObject(data['caOptions']);
            }
            if (data.hasOwnProperty('keyUsage')) {
                obj['keyUsage'] = KeyUsage.constructFromObject(data['keyUsage']);
            }
            if (data.hasOwnProperty('nameConstraints')) {
                obj['nameConstraints'] = NameConstraints.constructFromObject(data['nameConstraints']);
            }
            if (data.hasOwnProperty('policyIds')) {
                obj['policyIds'] = ApiClient.convertToType(data['policyIds'], [ObjectId]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X509Parameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X509Parameters</code>.
     */
    static validateJSON(data) {
        if (data['additionalExtensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalExtensions'])) {
                throw new Error("Expected the field `additionalExtensions` to be an array in the JSON data but got " + data['additionalExtensions']);
            }
            // validate the optional field `additionalExtensions` (array)
            for (const item of data['additionalExtensions']) {
                X509Extension.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aiaOcspServers'])) {
            throw new Error("Expected the field `aiaOcspServers` to be an array in the JSON data but got " + data['aiaOcspServers']);
        }
        // validate the optional field `caOptions`
        if (data['caOptions']) { // data not null
          CaOptions.validateJSON(data['caOptions']);
        }
        // validate the optional field `keyUsage`
        if (data['keyUsage']) { // data not null
          KeyUsage.validateJSON(data['keyUsage']);
        }
        // validate the optional field `nameConstraints`
        if (data['nameConstraints']) { // data not null
          NameConstraints.validateJSON(data['nameConstraints']);
        }
        if (data['policyIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyIds'])) {
                throw new Error("Expected the field `policyIds` to be an array in the JSON data but got " + data['policyIds']);
            }
            // validate the optional field `policyIds` (array)
            for (const item of data['policyIds']) {
                ObjectId.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. Describes custom X.509 extensions.
 * @member {Array.<module:model/X509Extension>} additionalExtensions
 */
X509Parameters.prototype['additionalExtensions'] = undefined;

/**
 * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.
 * @member {Array.<String>} aiaOcspServers
 */
X509Parameters.prototype['aiaOcspServers'] = undefined;

/**
 * @member {module:model/CaOptions} caOptions
 */
X509Parameters.prototype['caOptions'] = undefined;

/**
 * @member {module:model/KeyUsage} keyUsage
 */
X509Parameters.prototype['keyUsage'] = undefined;

/**
 * @member {module:model/NameConstraints} nameConstraints
 */
X509Parameters.prototype['nameConstraints'] = undefined;

/**
 * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
 * @member {Array.<module:model/ObjectId>} policyIds
 */
X509Parameters.prototype['policyIds'] = undefined;






export default X509Parameters;

