/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateExtensionConstraints from './CertificateExtensionConstraints';
import CertificateIdentityConstraints from './CertificateIdentityConstraints';
import X509Parameters from './X509Parameters';

/**
 * The CertificateTemplate model module.
 * @module model/CertificateTemplate
 * @version v1
 */
class CertificateTemplate {
    /**
     * Constructs a new <code>CertificateTemplate</code>.
     * A CertificateTemplate refers to a managed template for certificate issuance.
     * @alias module:model/CertificateTemplate
     */
    constructor() { 
        
        CertificateTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateTemplate} obj Optional instance to populate.
     * @return {module:model/CertificateTemplate} The populated <code>CertificateTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateTemplate();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('identityConstraints')) {
                obj['identityConstraints'] = CertificateIdentityConstraints.constructFromObject(data['identityConstraints']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('maximumLifetime')) {
                obj['maximumLifetime'] = ApiClient.convertToType(data['maximumLifetime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('passthroughExtensions')) {
                obj['passthroughExtensions'] = CertificateExtensionConstraints.constructFromObject(data['passthroughExtensions']);
            }
            if (data.hasOwnProperty('predefinedValues')) {
                obj['predefinedValues'] = X509Parameters.constructFromObject(data['predefinedValues']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `identityConstraints`
        if (data['identityConstraints']) { // data not null
          CertificateIdentityConstraints.validateJSON(data['identityConstraints']);
        }
        // ensure the json data is a string
        if (data['maximumLifetime'] && !(typeof data['maximumLifetime'] === 'string' || data['maximumLifetime'] instanceof String)) {
            throw new Error("Expected the field `maximumLifetime` to be a primitive type in the JSON string but got " + data['maximumLifetime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `passthroughExtensions`
        if (data['passthroughExtensions']) { // data not null
          CertificateExtensionConstraints.validateJSON(data['passthroughExtensions']);
        }
        // validate the optional field `predefinedValues`
        if (data['predefinedValues']) { // data not null
          X509Parameters.validateJSON(data['predefinedValues']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time at which this CertificateTemplate was created.
 * @member {String} createTime
 */
CertificateTemplate.prototype['createTime'] = undefined;

/**
 * Optional. A human-readable description of scenarios this template is intended for.
 * @member {String} description
 */
CertificateTemplate.prototype['description'] = undefined;

/**
 * @member {module:model/CertificateIdentityConstraints} identityConstraints
 */
CertificateTemplate.prototype['identityConstraints'] = undefined;

/**
 * Optional. Labels with user-defined metadata.
 * @member {Object.<String, String>} labels
 */
CertificateTemplate.prototype['labels'] = undefined;

/**
 * Optional. The maximum lifetime allowed for issued Certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum_lifetime the minimum of the two durations will be the maximum lifetime for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
 * @member {String} maximumLifetime
 */
CertificateTemplate.prototype['maximumLifetime'] = undefined;

/**
 * Output only. The resource name for this CertificateTemplate in the format `projects/_*_/locations/_*_/certificateTemplates/_*`.
 * @member {String} name
 */
CertificateTemplate.prototype['name'] = undefined;

/**
 * @member {module:model/CertificateExtensionConstraints} passthroughExtensions
 */
CertificateTemplate.prototype['passthroughExtensions'] = undefined;

/**
 * @member {module:model/X509Parameters} predefinedValues
 */
CertificateTemplate.prototype['predefinedValues'] = undefined;

/**
 * Output only. The time at which this CertificateTemplate was updated.
 * @member {String} updateTime
 */
CertificateTemplate.prototype['updateTime'] = undefined;






export default CertificateTemplate;

