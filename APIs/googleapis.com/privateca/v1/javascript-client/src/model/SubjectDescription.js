/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subject from './Subject';
import SubjectAltNames from './SubjectAltNames';

/**
 * The SubjectDescription model module.
 * @module model/SubjectDescription
 * @version v1
 */
class SubjectDescription {
    /**
     * Constructs a new <code>SubjectDescription</code>.
     * These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
     * @alias module:model/SubjectDescription
     */
    constructor() { 
        
        SubjectDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubjectDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectDescription} obj Optional instance to populate.
     * @return {module:model/SubjectDescription} The populated <code>SubjectDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectDescription();

            if (data.hasOwnProperty('hexSerialNumber')) {
                obj['hexSerialNumber'] = ApiClient.convertToType(data['hexSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('lifetime')) {
                obj['lifetime'] = ApiClient.convertToType(data['lifetime'], 'String');
            }
            if (data.hasOwnProperty('notAfterTime')) {
                obj['notAfterTime'] = ApiClient.convertToType(data['notAfterTime'], 'String');
            }
            if (data.hasOwnProperty('notBeforeTime')) {
                obj['notBeforeTime'] = ApiClient.convertToType(data['notBeforeTime'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = Subject.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('subjectAltName')) {
                obj['subjectAltName'] = SubjectAltNames.constructFromObject(data['subjectAltName']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubjectDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubjectDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hexSerialNumber'] && !(typeof data['hexSerialNumber'] === 'string' || data['hexSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `hexSerialNumber` to be a primitive type in the JSON string but got " + data['hexSerialNumber']);
        }
        // ensure the json data is a string
        if (data['lifetime'] && !(typeof data['lifetime'] === 'string' || data['lifetime'] instanceof String)) {
            throw new Error("Expected the field `lifetime` to be a primitive type in the JSON string but got " + data['lifetime']);
        }
        // ensure the json data is a string
        if (data['notAfterTime'] && !(typeof data['notAfterTime'] === 'string' || data['notAfterTime'] instanceof String)) {
            throw new Error("Expected the field `notAfterTime` to be a primitive type in the JSON string but got " + data['notAfterTime']);
        }
        // ensure the json data is a string
        if (data['notBeforeTime'] && !(typeof data['notBeforeTime'] === 'string' || data['notBeforeTime'] instanceof String)) {
            throw new Error("Expected the field `notBeforeTime` to be a primitive type in the JSON string but got " + data['notBeforeTime']);
        }
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          Subject.validateJSON(data['subject']);
        }
        // validate the optional field `subjectAltName`
        if (data['subjectAltName']) { // data not null
          SubjectAltNames.validateJSON(data['subjectAltName']);
        }

        return true;
    }


}



/**
 * The serial number encoded in lowercase hexadecimal.
 * @member {String} hexSerialNumber
 */
SubjectDescription.prototype['hexSerialNumber'] = undefined;

/**
 * For convenience, the actual lifetime of an issued certificate.
 * @member {String} lifetime
 */
SubjectDescription.prototype['lifetime'] = undefined;

/**
 * The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
 * @member {String} notAfterTime
 */
SubjectDescription.prototype['notAfterTime'] = undefined;

/**
 * The time at which the certificate becomes valid.
 * @member {String} notBeforeTime
 */
SubjectDescription.prototype['notBeforeTime'] = undefined;

/**
 * @member {module:model/Subject} subject
 */
SubjectDescription.prototype['subject'] = undefined;

/**
 * @member {module:model/SubjectAltNames} subjectAltName
 */
SubjectDescription.prototype['subjectAltName'] = undefined;






export default SubjectDescription;

