/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowedKeyType from './AllowedKeyType';
import CertificateExtensionConstraints from './CertificateExtensionConstraints';
import CertificateIdentityConstraints from './CertificateIdentityConstraints';
import IssuanceModes from './IssuanceModes';
import X509Parameters from './X509Parameters';

/**
 * The IssuancePolicy model module.
 * @module model/IssuancePolicy
 * @version v1
 */
class IssuancePolicy {
    /**
     * Constructs a new <code>IssuancePolicy</code>.
     * Defines controls over all certificate issuance within a CaPool.
     * @alias module:model/IssuancePolicy
     */
    constructor() { 
        
        IssuancePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuancePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuancePolicy} obj Optional instance to populate.
     * @return {module:model/IssuancePolicy} The populated <code>IssuancePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuancePolicy();

            if (data.hasOwnProperty('allowedIssuanceModes')) {
                obj['allowedIssuanceModes'] = IssuanceModes.constructFromObject(data['allowedIssuanceModes']);
            }
            if (data.hasOwnProperty('allowedKeyTypes')) {
                obj['allowedKeyTypes'] = ApiClient.convertToType(data['allowedKeyTypes'], [AllowedKeyType]);
            }
            if (data.hasOwnProperty('baselineValues')) {
                obj['baselineValues'] = X509Parameters.constructFromObject(data['baselineValues']);
            }
            if (data.hasOwnProperty('identityConstraints')) {
                obj['identityConstraints'] = CertificateIdentityConstraints.constructFromObject(data['identityConstraints']);
            }
            if (data.hasOwnProperty('maximumLifetime')) {
                obj['maximumLifetime'] = ApiClient.convertToType(data['maximumLifetime'], 'String');
            }
            if (data.hasOwnProperty('passthroughExtensions')) {
                obj['passthroughExtensions'] = CertificateExtensionConstraints.constructFromObject(data['passthroughExtensions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuancePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuancePolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `allowedIssuanceModes`
        if (data['allowedIssuanceModes']) { // data not null
          IssuanceModes.validateJSON(data['allowedIssuanceModes']);
        }
        if (data['allowedKeyTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedKeyTypes'])) {
                throw new Error("Expected the field `allowedKeyTypes` to be an array in the JSON data but got " + data['allowedKeyTypes']);
            }
            // validate the optional field `allowedKeyTypes` (array)
            for (const item of data['allowedKeyTypes']) {
                AllowedKeyType.validateJSON(item);
            };
        }
        // validate the optional field `baselineValues`
        if (data['baselineValues']) { // data not null
          X509Parameters.validateJSON(data['baselineValues']);
        }
        // validate the optional field `identityConstraints`
        if (data['identityConstraints']) { // data not null
          CertificateIdentityConstraints.validateJSON(data['identityConstraints']);
        }
        // ensure the json data is a string
        if (data['maximumLifetime'] && !(typeof data['maximumLifetime'] === 'string' || data['maximumLifetime'] instanceof String)) {
            throw new Error("Expected the field `maximumLifetime` to be a primitive type in the JSON string but got " + data['maximumLifetime']);
        }
        // validate the optional field `passthroughExtensions`
        if (data['passthroughExtensions']) { // data not null
          CertificateExtensionConstraints.validateJSON(data['passthroughExtensions']);
        }

        return true;
    }


}



/**
 * @member {module:model/IssuanceModes} allowedIssuanceModes
 */
IssuancePolicy.prototype['allowedIssuanceModes'] = undefined;

/**
 * Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
 * @member {Array.<module:model/AllowedKeyType>} allowedKeyTypes
 */
IssuancePolicy.prototype['allowedKeyTypes'] = undefined;

/**
 * @member {module:model/X509Parameters} baselineValues
 */
IssuancePolicy.prototype['baselineValues'] = undefined;

/**
 * @member {module:model/CertificateIdentityConstraints} identityConstraints
 */
IssuancePolicy.prototype['identityConstraints'] = undefined;

/**
 * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
 * @member {String} maximumLifetime
 */
IssuancePolicy.prototype['maximumLifetime'] = undefined;

/**
 * @member {module:model/CertificateExtensionConstraints} passthroughExtensions
 */
IssuancePolicy.prototype['passthroughExtensions'] = undefined;






export default IssuancePolicy;

