/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcKeyType model module.
 * @module model/EcKeyType
 * @version v1
 */
class EcKeyType {
    /**
     * Constructs a new <code>EcKeyType</code>.
     * Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
     * @alias module:model/EcKeyType
     */
    constructor() { 
        
        EcKeyType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcKeyType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcKeyType} obj Optional instance to populate.
     * @return {module:model/EcKeyType} The populated <code>EcKeyType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcKeyType();

            if (data.hasOwnProperty('signatureAlgorithm')) {
                obj['signatureAlgorithm'] = ApiClient.convertToType(data['signatureAlgorithm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcKeyType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcKeyType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['signatureAlgorithm'] && !(typeof data['signatureAlgorithm'] === 'string' || data['signatureAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `signatureAlgorithm` to be a primitive type in the JSON string but got " + data['signatureAlgorithm']);
        }

        return true;
    }


}



/**
 * Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
 * @member {module:model/EcKeyType.SignatureAlgorithmEnum} signatureAlgorithm
 */
EcKeyType.prototype['signatureAlgorithm'] = undefined;





/**
 * Allowed values for the <code>signatureAlgorithm</code> property.
 * @enum {String}
 * @readonly
 */
EcKeyType['SignatureAlgorithmEnum'] = {

    /**
     * value: "EC_SIGNATURE_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "EC_SIGNATURE_ALGORITHM_UNSPECIFIED": "EC_SIGNATURE_ALGORITHM_UNSPECIFIED",

    /**
     * value: "ECDSA_P256"
     * @const
     */
    "ECDSA_P256": "ECDSA_P256",

    /**
     * value: "ECDSA_P384"
     * @const
     */
    "ECDSA_P384": "ECDSA_P384",

    /**
     * value: "EDDSA_25519"
     * @const
     */
    "EDDSA_25519": "EDDSA_25519"
};



export default EcKeyType;

