/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Subject model module.
 * @module model/Subject
 * @version v1
 */
class Subject {
    /**
     * Constructs a new <code>Subject</code>.
     * Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
     * @alias module:model/Subject
     */
    constructor() { 
        
        Subject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subject} obj Optional instance to populate.
     * @return {module:model/Subject} The populated <code>Subject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subject();

            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('organizationalUnit')) {
                obj['organizationalUnit'] = ApiClient.convertToType(data['organizationalUnit'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], 'String');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['organizationalUnit'] && !(typeof data['organizationalUnit'] === 'string' || data['organizationalUnit'] instanceof String)) {
            throw new Error("Expected the field `organizationalUnit` to be a primitive type in the JSON string but got " + data['organizationalUnit']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['province'] && !(typeof data['province'] === 'string' || data['province'] instanceof String)) {
            throw new Error("Expected the field `province` to be a primitive type in the JSON string but got " + data['province']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }

        return true;
    }


}



/**
 * The \"common name\" of the subject.
 * @member {String} commonName
 */
Subject.prototype['commonName'] = undefined;

/**
 * The country code of the subject.
 * @member {String} countryCode
 */
Subject.prototype['countryCode'] = undefined;

/**
 * The locality or city of the subject.
 * @member {String} locality
 */
Subject.prototype['locality'] = undefined;

/**
 * The organization of the subject.
 * @member {String} organization
 */
Subject.prototype['organization'] = undefined;

/**
 * The organizational_unit of the subject.
 * @member {String} organizationalUnit
 */
Subject.prototype['organizationalUnit'] = undefined;

/**
 * The postal code of the subject.
 * @member {String} postalCode
 */
Subject.prototype['postalCode'] = undefined;

/**
 * The province, territory, or regional state of the subject.
 * @member {String} province
 */
Subject.prototype['province'] = undefined;

/**
 * The street address of the subject.
 * @member {String} streetAddress
 */
Subject.prototype['streetAddress'] = undefined;






export default Subject;

