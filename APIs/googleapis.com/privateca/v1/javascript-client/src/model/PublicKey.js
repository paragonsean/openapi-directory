/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicKey model module.
 * @module model/PublicKey
 * @version v1
 */
class PublicKey {
    /**
     * Constructs a new <code>PublicKey</code>.
     * A PublicKey describes a public key.
     * @alias module:model/PublicKey
     */
    constructor() { 
        
        PublicKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicKey} obj Optional instance to populate.
     * @return {module:model/PublicKey} The populated <code>PublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicKey();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }

        return true;
    }


}



/**
 * Required. The format of the public key.
 * @member {module:model/PublicKey.FormatEnum} format
 */
PublicKey.prototype['format'] = undefined;

/**
 * Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
 * @member {Blob} key
 */
PublicKey.prototype['key'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
PublicKey['FormatEnum'] = {

    /**
     * value: "KEY_FORMAT_UNSPECIFIED"
     * @const
     */
    "KEY_FORMAT_UNSPECIFIED": "KEY_FORMAT_UNSPECIFIED",

    /**
     * value: "PEM"
     * @const
     */
    "PEM": "PEM"
};



export default PublicKey;

