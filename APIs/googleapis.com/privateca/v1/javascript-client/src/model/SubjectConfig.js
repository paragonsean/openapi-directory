/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subject from './Subject';
import SubjectAltNames from './SubjectAltNames';

/**
 * The SubjectConfig model module.
 * @module model/SubjectConfig
 * @version v1
 */
class SubjectConfig {
    /**
     * Constructs a new <code>SubjectConfig</code>.
     * These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
     * @alias module:model/SubjectConfig
     */
    constructor() { 
        
        SubjectConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubjectConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectConfig} obj Optional instance to populate.
     * @return {module:model/SubjectConfig} The populated <code>SubjectConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectConfig();

            if (data.hasOwnProperty('subject')) {
                obj['subject'] = Subject.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('subjectAltName')) {
                obj['subjectAltName'] = SubjectAltNames.constructFromObject(data['subjectAltName']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubjectConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubjectConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          Subject.validateJSON(data['subject']);
        }
        // validate the optional field `subjectAltName`
        if (data['subjectAltName']) { // data not null
          SubjectAltNames.validateJSON(data['subjectAltName']);
        }

        return true;
    }


}



/**
 * @member {module:model/Subject} subject
 */
SubjectConfig.prototype['subject'] = undefined;

/**
 * @member {module:model/SubjectAltNames} subjectAltName
 */
SubjectConfig.prototype['subjectAltName'] = undefined;






export default SubjectConfig;

