/**
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReconciliationOperationMetadata model module.
 * @module model/ReconciliationOperationMetadata
 * @version v1beta1
 */
class ReconciliationOperationMetadata {
    /**
     * Constructs a new <code>ReconciliationOperationMetadata</code>.
     * Operation metadata returned by the CLH during resource state reconciliation.
     * @alias module:model/ReconciliationOperationMetadata
     */
    constructor() { 
        
        ReconciliationOperationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReconciliationOperationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReconciliationOperationMetadata} obj Optional instance to populate.
     * @return {module:model/ReconciliationOperationMetadata} The populated <code>ReconciliationOperationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReconciliationOperationMetadata();

            if (data.hasOwnProperty('deleteResource')) {
                obj['deleteResource'] = ApiClient.convertToType(data['deleteResource'], 'Boolean');
            }
            if (data.hasOwnProperty('exclusiveAction')) {
                obj['exclusiveAction'] = ApiClient.convertToType(data['exclusiveAction'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReconciliationOperationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReconciliationOperationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exclusiveAction'] && !(typeof data['exclusiveAction'] === 'string' || data['exclusiveAction'] instanceof String)) {
            throw new Error("Expected the field `exclusiveAction` to be a primitive type in the JSON string but got " + data['exclusiveAction']);
        }

        return true;
    }


}



/**
 * DEPRECATED. Use exclusive_action instead.
 * @member {Boolean} deleteResource
 */
ReconciliationOperationMetadata.prototype['deleteResource'] = undefined;

/**
 * Excluisive action returned by the CLH.
 * @member {module:model/ReconciliationOperationMetadata.ExclusiveActionEnum} exclusiveAction
 */
ReconciliationOperationMetadata.prototype['exclusiveAction'] = undefined;





/**
 * Allowed values for the <code>exclusiveAction</code> property.
 * @enum {String}
 * @readonly
 */
ReconciliationOperationMetadata['ExclusiveActionEnum'] = {

    /**
     * value: "UNKNOWN_REPAIR_ACTION"
     * @const
     */
    "UNKNOWN_REPAIR_ACTION": "UNKNOWN_REPAIR_ACTION",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "RETRY"
     * @const
     */
    "RETRY": "RETRY"
};



export default ReconciliationOperationMetadata;

