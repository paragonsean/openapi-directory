/*
 * Certificate Authority API
 * The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operation metadata returned by the CLH during resource state reconciliation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.613954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReconciliationOperationMetadata {
  public static final String SERIALIZED_NAME_DELETE_RESOURCE = "deleteResource";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DELETE_RESOURCE)
  private Boolean deleteResource;

  /**
   * Excluisive action returned by the CLH.
   */
  @JsonAdapter(ExclusiveActionEnum.Adapter.class)
  public enum ExclusiveActionEnum {
    UNKNOWN_REPAIR_ACTION("UNKNOWN_REPAIR_ACTION"),
    
    DELETE("DELETE"),
    
    RETRY("RETRY");

    private String value;

    ExclusiveActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExclusiveActionEnum fromValue(String value) {
      for (ExclusiveActionEnum b : ExclusiveActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExclusiveActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExclusiveActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExclusiveActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExclusiveActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExclusiveActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUSIVE_ACTION = "exclusiveAction";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_ACTION)
  private ExclusiveActionEnum exclusiveAction;

  public ReconciliationOperationMetadata() {
  }

  @Deprecated
  public ReconciliationOperationMetadata deleteResource(Boolean deleteResource) {
    this.deleteResource = deleteResource;
    return this;
  }

  /**
   * DEPRECATED. Use exclusive_action instead.
   * @return deleteResource
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getDeleteResource() {
    return deleteResource;
  }

  @Deprecated
  public void setDeleteResource(Boolean deleteResource) {
    this.deleteResource = deleteResource;
  }


  public ReconciliationOperationMetadata exclusiveAction(ExclusiveActionEnum exclusiveAction) {
    this.exclusiveAction = exclusiveAction;
    return this;
  }

  /**
   * Excluisive action returned by the CLH.
   * @return exclusiveAction
   */
  @javax.annotation.Nullable
  public ExclusiveActionEnum getExclusiveAction() {
    return exclusiveAction;
  }

  public void setExclusiveAction(ExclusiveActionEnum exclusiveAction) {
    this.exclusiveAction = exclusiveAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationOperationMetadata reconciliationOperationMetadata = (ReconciliationOperationMetadata) o;
    return Objects.equals(this.deleteResource, reconciliationOperationMetadata.deleteResource) &&
        Objects.equals(this.exclusiveAction, reconciliationOperationMetadata.exclusiveAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteResource, exclusiveAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationOperationMetadata {\n");
    sb.append("    deleteResource: ").append(toIndentedString(deleteResource)).append("\n");
    sb.append("    exclusiveAction: ").append(toIndentedString(exclusiveAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleteResource");
    openapiFields.add("exclusiveAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReconciliationOperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReconciliationOperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationOperationMetadata is not found in the empty JSON string", ReconciliationOperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationOperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationOperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exclusiveAction") != null && !jsonObj.get("exclusiveAction").isJsonNull()) && !jsonObj.get("exclusiveAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusiveAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusiveAction").toString()));
      }
      // validate the optional field `exclusiveAction`
      if (jsonObj.get("exclusiveAction") != null && !jsonObj.get("exclusiveAction").isJsonNull()) {
        ExclusiveActionEnum.validateJsonElement(jsonObj.get("exclusiveAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationOperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationOperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationOperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationOperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationOperationMetadata>() {
           @Override
           public void write(JsonWriter out, ReconciliationOperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationOperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReconciliationOperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReconciliationOperationMetadata
   * @throws IOException if the JSON string is invalid with respect to ReconciliationOperationMetadata
   */
  public static ReconciliationOperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationOperationMetadata.class);
  }

  /**
   * Convert an instance of ReconciliationOperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

