/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchGitAheadBehindResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchGitAheadBehindResponse::OAIFetchGitAheadBehindResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchGitAheadBehindResponse::OAIFetchGitAheadBehindResponse() {
    this->initializeModel();
}

OAIFetchGitAheadBehindResponse::~OAIFetchGitAheadBehindResponse() {}

void OAIFetchGitAheadBehindResponse::initializeModel() {

    m_commits_ahead_isSet = false;
    m_commits_ahead_isValid = false;

    m_commits_behind_isSet = false;
    m_commits_behind_isValid = false;
}

void OAIFetchGitAheadBehindResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchGitAheadBehindResponse::fromJsonObject(QJsonObject json) {

    m_commits_ahead_isValid = ::OpenAPI::fromJsonValue(m_commits_ahead, json[QString("commitsAhead")]);
    m_commits_ahead_isSet = !json[QString("commitsAhead")].isNull() && m_commits_ahead_isValid;

    m_commits_behind_isValid = ::OpenAPI::fromJsonValue(m_commits_behind, json[QString("commitsBehind")]);
    m_commits_behind_isSet = !json[QString("commitsBehind")].isNull() && m_commits_behind_isValid;
}

QString OAIFetchGitAheadBehindResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchGitAheadBehindResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_commits_ahead_isSet) {
        obj.insert(QString("commitsAhead"), ::OpenAPI::toJsonValue(m_commits_ahead));
    }
    if (m_commits_behind_isSet) {
        obj.insert(QString("commitsBehind"), ::OpenAPI::toJsonValue(m_commits_behind));
    }
    return obj;
}

qint32 OAIFetchGitAheadBehindResponse::getCommitsAhead() const {
    return m_commits_ahead;
}
void OAIFetchGitAheadBehindResponse::setCommitsAhead(const qint32 &commits_ahead) {
    m_commits_ahead = commits_ahead;
    m_commits_ahead_isSet = true;
}

bool OAIFetchGitAheadBehindResponse::is_commits_ahead_Set() const{
    return m_commits_ahead_isSet;
}

bool OAIFetchGitAheadBehindResponse::is_commits_ahead_Valid() const{
    return m_commits_ahead_isValid;
}

qint32 OAIFetchGitAheadBehindResponse::getCommitsBehind() const {
    return m_commits_behind;
}
void OAIFetchGitAheadBehindResponse::setCommitsBehind(const qint32 &commits_behind) {
    m_commits_behind = commits_behind;
    m_commits_behind_isSet = true;
}

bool OAIFetchGitAheadBehindResponse::is_commits_behind_Set() const{
    return m_commits_behind_isSet;
}

bool OAIFetchGitAheadBehindResponse::is_commits_behind_Valid() const{
    return m_commits_behind_isValid;
}

bool OAIFetchGitAheadBehindResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commits_ahead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_behind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchGitAheadBehindResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
