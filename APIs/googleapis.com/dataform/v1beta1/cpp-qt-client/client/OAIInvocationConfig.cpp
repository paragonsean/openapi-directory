/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvocationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvocationConfig::OAIInvocationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvocationConfig::OAIInvocationConfig() {
    this->initializeModel();
}

OAIInvocationConfig::~OAIInvocationConfig() {}

void OAIInvocationConfig::initializeModel() {

    m_fully_refresh_incremental_tables_enabled_isSet = false;
    m_fully_refresh_incremental_tables_enabled_isValid = false;

    m_included_tags_isSet = false;
    m_included_tags_isValid = false;

    m_included_targets_isSet = false;
    m_included_targets_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_transitive_dependencies_included_isSet = false;
    m_transitive_dependencies_included_isValid = false;

    m_transitive_dependents_included_isSet = false;
    m_transitive_dependents_included_isValid = false;
}

void OAIInvocationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvocationConfig::fromJsonObject(QJsonObject json) {

    m_fully_refresh_incremental_tables_enabled_isValid = ::OpenAPI::fromJsonValue(m_fully_refresh_incremental_tables_enabled, json[QString("fullyRefreshIncrementalTablesEnabled")]);
    m_fully_refresh_incremental_tables_enabled_isSet = !json[QString("fullyRefreshIncrementalTablesEnabled")].isNull() && m_fully_refresh_incremental_tables_enabled_isValid;

    m_included_tags_isValid = ::OpenAPI::fromJsonValue(m_included_tags, json[QString("includedTags")]);
    m_included_tags_isSet = !json[QString("includedTags")].isNull() && m_included_tags_isValid;

    m_included_targets_isValid = ::OpenAPI::fromJsonValue(m_included_targets, json[QString("includedTargets")]);
    m_included_targets_isSet = !json[QString("includedTargets")].isNull() && m_included_targets_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_transitive_dependencies_included_isValid = ::OpenAPI::fromJsonValue(m_transitive_dependencies_included, json[QString("transitiveDependenciesIncluded")]);
    m_transitive_dependencies_included_isSet = !json[QString("transitiveDependenciesIncluded")].isNull() && m_transitive_dependencies_included_isValid;

    m_transitive_dependents_included_isValid = ::OpenAPI::fromJsonValue(m_transitive_dependents_included, json[QString("transitiveDependentsIncluded")]);
    m_transitive_dependents_included_isSet = !json[QString("transitiveDependentsIncluded")].isNull() && m_transitive_dependents_included_isValid;
}

QString OAIInvocationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvocationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_fully_refresh_incremental_tables_enabled_isSet) {
        obj.insert(QString("fullyRefreshIncrementalTablesEnabled"), ::OpenAPI::toJsonValue(m_fully_refresh_incremental_tables_enabled));
    }
    if (m_included_tags.size() > 0) {
        obj.insert(QString("includedTags"), ::OpenAPI::toJsonValue(m_included_tags));
    }
    if (m_included_targets.size() > 0) {
        obj.insert(QString("includedTargets"), ::OpenAPI::toJsonValue(m_included_targets));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_transitive_dependencies_included_isSet) {
        obj.insert(QString("transitiveDependenciesIncluded"), ::OpenAPI::toJsonValue(m_transitive_dependencies_included));
    }
    if (m_transitive_dependents_included_isSet) {
        obj.insert(QString("transitiveDependentsIncluded"), ::OpenAPI::toJsonValue(m_transitive_dependents_included));
    }
    return obj;
}

bool OAIInvocationConfig::isFullyRefreshIncrementalTablesEnabled() const {
    return m_fully_refresh_incremental_tables_enabled;
}
void OAIInvocationConfig::setFullyRefreshIncrementalTablesEnabled(const bool &fully_refresh_incremental_tables_enabled) {
    m_fully_refresh_incremental_tables_enabled = fully_refresh_incremental_tables_enabled;
    m_fully_refresh_incremental_tables_enabled_isSet = true;
}

bool OAIInvocationConfig::is_fully_refresh_incremental_tables_enabled_Set() const{
    return m_fully_refresh_incremental_tables_enabled_isSet;
}

bool OAIInvocationConfig::is_fully_refresh_incremental_tables_enabled_Valid() const{
    return m_fully_refresh_incremental_tables_enabled_isValid;
}

QList<QString> OAIInvocationConfig::getIncludedTags() const {
    return m_included_tags;
}
void OAIInvocationConfig::setIncludedTags(const QList<QString> &included_tags) {
    m_included_tags = included_tags;
    m_included_tags_isSet = true;
}

bool OAIInvocationConfig::is_included_tags_Set() const{
    return m_included_tags_isSet;
}

bool OAIInvocationConfig::is_included_tags_Valid() const{
    return m_included_tags_isValid;
}

QList<OAITarget> OAIInvocationConfig::getIncludedTargets() const {
    return m_included_targets;
}
void OAIInvocationConfig::setIncludedTargets(const QList<OAITarget> &included_targets) {
    m_included_targets = included_targets;
    m_included_targets_isSet = true;
}

bool OAIInvocationConfig::is_included_targets_Set() const{
    return m_included_targets_isSet;
}

bool OAIInvocationConfig::is_included_targets_Valid() const{
    return m_included_targets_isValid;
}

QString OAIInvocationConfig::getServiceAccount() const {
    return m_service_account;
}
void OAIInvocationConfig::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIInvocationConfig::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIInvocationConfig::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIInvocationConfig::isTransitiveDependenciesIncluded() const {
    return m_transitive_dependencies_included;
}
void OAIInvocationConfig::setTransitiveDependenciesIncluded(const bool &transitive_dependencies_included) {
    m_transitive_dependencies_included = transitive_dependencies_included;
    m_transitive_dependencies_included_isSet = true;
}

bool OAIInvocationConfig::is_transitive_dependencies_included_Set() const{
    return m_transitive_dependencies_included_isSet;
}

bool OAIInvocationConfig::is_transitive_dependencies_included_Valid() const{
    return m_transitive_dependencies_included_isValid;
}

bool OAIInvocationConfig::isTransitiveDependentsIncluded() const {
    return m_transitive_dependents_included;
}
void OAIInvocationConfig::setTransitiveDependentsIncluded(const bool &transitive_dependents_included) {
    m_transitive_dependents_included = transitive_dependents_included;
    m_transitive_dependents_included_isSet = true;
}

bool OAIInvocationConfig::is_transitive_dependents_included_Set() const{
    return m_transitive_dependents_included_isSet;
}

bool OAIInvocationConfig::is_transitive_dependents_included_Valid() const{
    return m_transitive_dependents_included_isValid;
}

bool OAIInvocationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fully_refresh_incremental_tables_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitive_dependencies_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitive_dependents_included_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvocationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
