/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowConfig::OAIWorkflowConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowConfig::OAIWorkflowConfig() {
    this->initializeModel();
}

OAIWorkflowConfig::~OAIWorkflowConfig() {}

void OAIWorkflowConfig::initializeModel() {

    m_cron_schedule_isSet = false;
    m_cron_schedule_isValid = false;

    m_invocation_config_isSet = false;
    m_invocation_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recent_scheduled_execution_records_isSet = false;
    m_recent_scheduled_execution_records_isValid = false;

    m_release_config_isSet = false;
    m_release_config_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIWorkflowConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowConfig::fromJsonObject(QJsonObject json) {

    m_cron_schedule_isValid = ::OpenAPI::fromJsonValue(m_cron_schedule, json[QString("cronSchedule")]);
    m_cron_schedule_isSet = !json[QString("cronSchedule")].isNull() && m_cron_schedule_isValid;

    m_invocation_config_isValid = ::OpenAPI::fromJsonValue(m_invocation_config, json[QString("invocationConfig")]);
    m_invocation_config_isSet = !json[QString("invocationConfig")].isNull() && m_invocation_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recent_scheduled_execution_records_isValid = ::OpenAPI::fromJsonValue(m_recent_scheduled_execution_records, json[QString("recentScheduledExecutionRecords")]);
    m_recent_scheduled_execution_records_isSet = !json[QString("recentScheduledExecutionRecords")].isNull() && m_recent_scheduled_execution_records_isValid;

    m_release_config_isValid = ::OpenAPI::fromJsonValue(m_release_config, json[QString("releaseConfig")]);
    m_release_config_isSet = !json[QString("releaseConfig")].isNull() && m_release_config_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIWorkflowConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cron_schedule_isSet) {
        obj.insert(QString("cronSchedule"), ::OpenAPI::toJsonValue(m_cron_schedule));
    }
    if (m_invocation_config.isSet()) {
        obj.insert(QString("invocationConfig"), ::OpenAPI::toJsonValue(m_invocation_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recent_scheduled_execution_records.size() > 0) {
        obj.insert(QString("recentScheduledExecutionRecords"), ::OpenAPI::toJsonValue(m_recent_scheduled_execution_records));
    }
    if (m_release_config_isSet) {
        obj.insert(QString("releaseConfig"), ::OpenAPI::toJsonValue(m_release_config));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIWorkflowConfig::getCronSchedule() const {
    return m_cron_schedule;
}
void OAIWorkflowConfig::setCronSchedule(const QString &cron_schedule) {
    m_cron_schedule = cron_schedule;
    m_cron_schedule_isSet = true;
}

bool OAIWorkflowConfig::is_cron_schedule_Set() const{
    return m_cron_schedule_isSet;
}

bool OAIWorkflowConfig::is_cron_schedule_Valid() const{
    return m_cron_schedule_isValid;
}

OAIInvocationConfig OAIWorkflowConfig::getInvocationConfig() const {
    return m_invocation_config;
}
void OAIWorkflowConfig::setInvocationConfig(const OAIInvocationConfig &invocation_config) {
    m_invocation_config = invocation_config;
    m_invocation_config_isSet = true;
}

bool OAIWorkflowConfig::is_invocation_config_Set() const{
    return m_invocation_config_isSet;
}

bool OAIWorkflowConfig::is_invocation_config_Valid() const{
    return m_invocation_config_isValid;
}

QString OAIWorkflowConfig::getName() const {
    return m_name;
}
void OAIWorkflowConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIScheduledExecutionRecord> OAIWorkflowConfig::getRecentScheduledExecutionRecords() const {
    return m_recent_scheduled_execution_records;
}
void OAIWorkflowConfig::setRecentScheduledExecutionRecords(const QList<OAIScheduledExecutionRecord> &recent_scheduled_execution_records) {
    m_recent_scheduled_execution_records = recent_scheduled_execution_records;
    m_recent_scheduled_execution_records_isSet = true;
}

bool OAIWorkflowConfig::is_recent_scheduled_execution_records_Set() const{
    return m_recent_scheduled_execution_records_isSet;
}

bool OAIWorkflowConfig::is_recent_scheduled_execution_records_Valid() const{
    return m_recent_scheduled_execution_records_isValid;
}

QString OAIWorkflowConfig::getReleaseConfig() const {
    return m_release_config;
}
void OAIWorkflowConfig::setReleaseConfig(const QString &release_config) {
    m_release_config = release_config;
    m_release_config_isSet = true;
}

bool OAIWorkflowConfig::is_release_config_Set() const{
    return m_release_config_isSet;
}

bool OAIWorkflowConfig::is_release_config_Valid() const{
    return m_release_config_isValid;
}

QString OAIWorkflowConfig::getTimeZone() const {
    return m_time_zone;
}
void OAIWorkflowConfig::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIWorkflowConfig::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIWorkflowConfig::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIWorkflowConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cron_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_scheduled_execution_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
