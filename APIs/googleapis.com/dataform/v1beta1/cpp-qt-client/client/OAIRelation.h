/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRelation.h
 *
 * Represents a database relation.
 */

#ifndef OAIRelation_H
#define OAIRelation_H

#include <QJsonObject>

#include "OAIIncrementalTableConfig.h"
#include "OAIRelationDescriptor.h"
#include "OAITarget.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITarget;
class OAIIncrementalTableConfig;
class OAIRelationDescriptor;

class OAIRelation : public OAIObject {
public:
    OAIRelation();
    OAIRelation(QString json);
    ~OAIRelation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAdditionalOptions() const;
    void setAdditionalOptions(const QMap<QString, QString> &additional_options);
    bool is_additional_options_Set() const;
    bool is_additional_options_Valid() const;

    QList<QString> getClusterExpressions() const;
    void setClusterExpressions(const QList<QString> &cluster_expressions);
    bool is_cluster_expressions_Set() const;
    bool is_cluster_expressions_Valid() const;

    QList<OAITarget> getDependencyTargets() const;
    void setDependencyTargets(const QList<OAITarget> &dependency_targets);
    bool is_dependency_targets_Set() const;
    bool is_dependency_targets_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    OAIIncrementalTableConfig getIncrementalTableConfig() const;
    void setIncrementalTableConfig(const OAIIncrementalTableConfig &incremental_table_config);
    bool is_incremental_table_config_Set() const;
    bool is_incremental_table_config_Valid() const;

    qint32 getPartitionExpirationDays() const;
    void setPartitionExpirationDays(const qint32 &partition_expiration_days);
    bool is_partition_expiration_days_Set() const;
    bool is_partition_expiration_days_Valid() const;

    QString getPartitionExpression() const;
    void setPartitionExpression(const QString &partition_expression);
    bool is_partition_expression_Set() const;
    bool is_partition_expression_Valid() const;

    QList<QString> getPostOperations() const;
    void setPostOperations(const QList<QString> &post_operations);
    bool is_post_operations_Set() const;
    bool is_post_operations_Valid() const;

    QList<QString> getPreOperations() const;
    void setPreOperations(const QList<QString> &pre_operations);
    bool is_pre_operations_Set() const;
    bool is_pre_operations_Valid() const;

    OAIRelationDescriptor getRelationDescriptor() const;
    void setRelationDescriptor(const OAIRelationDescriptor &relation_descriptor);
    bool is_relation_descriptor_Set() const;
    bool is_relation_descriptor_Valid() const;

    QString getRelationType() const;
    void setRelationType(const QString &relation_type);
    bool is_relation_type_Set() const;
    bool is_relation_type_Valid() const;

    bool isRequirePartitionFilter() const;
    void setRequirePartitionFilter(const bool &require_partition_filter);
    bool is_require_partition_filter_Set() const;
    bool is_require_partition_filter_Valid() const;

    QString getSelectQuery() const;
    void setSelectQuery(const QString &select_query);
    bool is_select_query_Set() const;
    bool is_select_query_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_additional_options;
    bool m_additional_options_isSet;
    bool m_additional_options_isValid;

    QList<QString> m_cluster_expressions;
    bool m_cluster_expressions_isSet;
    bool m_cluster_expressions_isValid;

    QList<OAITarget> m_dependency_targets;
    bool m_dependency_targets_isSet;
    bool m_dependency_targets_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    OAIIncrementalTableConfig m_incremental_table_config;
    bool m_incremental_table_config_isSet;
    bool m_incremental_table_config_isValid;

    qint32 m_partition_expiration_days;
    bool m_partition_expiration_days_isSet;
    bool m_partition_expiration_days_isValid;

    QString m_partition_expression;
    bool m_partition_expression_isSet;
    bool m_partition_expression_isValid;

    QList<QString> m_post_operations;
    bool m_post_operations_isSet;
    bool m_post_operations_isValid;

    QList<QString> m_pre_operations;
    bool m_pre_operations_isSet;
    bool m_pre_operations_isValid;

    OAIRelationDescriptor m_relation_descriptor;
    bool m_relation_descriptor_isSet;
    bool m_relation_descriptor_isValid;

    QString m_relation_type;
    bool m_relation_type_isSet;
    bool m_relation_type_isValid;

    bool m_require_partition_filter;
    bool m_require_partition_filter_isSet;
    bool m_require_partition_filter_isValid;

    QString m_select_query;
    bool m_select_query_isSet;
    bool m_select_query_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRelation)

#endif // OAIRelation_H
