/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompilationResultAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompilationResultAction::OAICompilationResultAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompilationResultAction::OAICompilationResultAction() {
    this->initializeModel();
}

OAICompilationResultAction::~OAICompilationResultAction() {}

void OAICompilationResultAction::initializeModel() {

    m_assertion_isSet = false;
    m_assertion_isValid = false;

    m_canonical_target_isSet = false;
    m_canonical_target_isValid = false;

    m_declaration_isSet = false;
    m_declaration_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAICompilationResultAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompilationResultAction::fromJsonObject(QJsonObject json) {

    m_assertion_isValid = ::OpenAPI::fromJsonValue(m_assertion, json[QString("assertion")]);
    m_assertion_isSet = !json[QString("assertion")].isNull() && m_assertion_isValid;

    m_canonical_target_isValid = ::OpenAPI::fromJsonValue(m_canonical_target, json[QString("canonicalTarget")]);
    m_canonical_target_isSet = !json[QString("canonicalTarget")].isNull() && m_canonical_target_isValid;

    m_declaration_isValid = ::OpenAPI::fromJsonValue(m_declaration, json[QString("declaration")]);
    m_declaration_isSet = !json[QString("declaration")].isNull() && m_declaration_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAICompilationResultAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompilationResultAction::asJsonObject() const {
    QJsonObject obj;
    if (m_assertion.isSet()) {
        obj.insert(QString("assertion"), ::OpenAPI::toJsonValue(m_assertion));
    }
    if (m_canonical_target.isSet()) {
        obj.insert(QString("canonicalTarget"), ::OpenAPI::toJsonValue(m_canonical_target));
    }
    if (m_declaration.isSet()) {
        obj.insert(QString("declaration"), ::OpenAPI::toJsonValue(m_declaration));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_operations.isSet()) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_relation.isSet()) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIAssertion OAICompilationResultAction::getAssertion() const {
    return m_assertion;
}
void OAICompilationResultAction::setAssertion(const OAIAssertion &assertion) {
    m_assertion = assertion;
    m_assertion_isSet = true;
}

bool OAICompilationResultAction::is_assertion_Set() const{
    return m_assertion_isSet;
}

bool OAICompilationResultAction::is_assertion_Valid() const{
    return m_assertion_isValid;
}

OAITarget OAICompilationResultAction::getCanonicalTarget() const {
    return m_canonical_target;
}
void OAICompilationResultAction::setCanonicalTarget(const OAITarget &canonical_target) {
    m_canonical_target = canonical_target;
    m_canonical_target_isSet = true;
}

bool OAICompilationResultAction::is_canonical_target_Set() const{
    return m_canonical_target_isSet;
}

bool OAICompilationResultAction::is_canonical_target_Valid() const{
    return m_canonical_target_isValid;
}

OAIDeclaration OAICompilationResultAction::getDeclaration() const {
    return m_declaration;
}
void OAICompilationResultAction::setDeclaration(const OAIDeclaration &declaration) {
    m_declaration = declaration;
    m_declaration_isSet = true;
}

bool OAICompilationResultAction::is_declaration_Set() const{
    return m_declaration_isSet;
}

bool OAICompilationResultAction::is_declaration_Valid() const{
    return m_declaration_isValid;
}

QString OAICompilationResultAction::getFilePath() const {
    return m_file_path;
}
void OAICompilationResultAction::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAICompilationResultAction::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAICompilationResultAction::is_file_path_Valid() const{
    return m_file_path_isValid;
}

OAIOperations OAICompilationResultAction::getOperations() const {
    return m_operations;
}
void OAICompilationResultAction::setOperations(const OAIOperations &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAICompilationResultAction::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAICompilationResultAction::is_operations_Valid() const{
    return m_operations_isValid;
}

OAIRelation OAICompilationResultAction::getRelation() const {
    return m_relation;
}
void OAICompilationResultAction::setRelation(const OAIRelation &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAICompilationResultAction::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAICompilationResultAction::is_relation_Valid() const{
    return m_relation_isValid;
}

OAITarget OAICompilationResultAction::getTarget() const {
    return m_target;
}
void OAICompilationResultAction::setTarget(const OAITarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICompilationResultAction::is_target_Set() const{
    return m_target_isSet;
}

bool OAICompilationResultAction::is_target_Valid() const{
    return m_target_isValid;
}

bool OAICompilationResultAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assertion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompilationResultAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
