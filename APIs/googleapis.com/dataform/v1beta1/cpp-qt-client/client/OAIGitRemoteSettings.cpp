/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitRemoteSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitRemoteSettings::OAIGitRemoteSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitRemoteSettings::OAIGitRemoteSettings() {
    this->initializeModel();
}

OAIGitRemoteSettings::~OAIGitRemoteSettings() {}

void OAIGitRemoteSettings::initializeModel() {

    m_authentication_token_secret_version_isSet = false;
    m_authentication_token_secret_version_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_ssh_authentication_config_isSet = false;
    m_ssh_authentication_config_isValid = false;

    m_token_status_isSet = false;
    m_token_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGitRemoteSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitRemoteSettings::fromJsonObject(QJsonObject json) {

    m_authentication_token_secret_version_isValid = ::OpenAPI::fromJsonValue(m_authentication_token_secret_version, json[QString("authenticationTokenSecretVersion")]);
    m_authentication_token_secret_version_isSet = !json[QString("authenticationTokenSecretVersion")].isNull() && m_authentication_token_secret_version_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("defaultBranch")]);
    m_default_branch_isSet = !json[QString("defaultBranch")].isNull() && m_default_branch_isValid;

    m_ssh_authentication_config_isValid = ::OpenAPI::fromJsonValue(m_ssh_authentication_config, json[QString("sshAuthenticationConfig")]);
    m_ssh_authentication_config_isSet = !json[QString("sshAuthenticationConfig")].isNull() && m_ssh_authentication_config_isValid;

    m_token_status_isValid = ::OpenAPI::fromJsonValue(m_token_status, json[QString("tokenStatus")]);
    m_token_status_isSet = !json[QString("tokenStatus")].isNull() && m_token_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGitRemoteSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitRemoteSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_token_secret_version_isSet) {
        obj.insert(QString("authenticationTokenSecretVersion"), ::OpenAPI::toJsonValue(m_authentication_token_secret_version));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("defaultBranch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_ssh_authentication_config.isSet()) {
        obj.insert(QString("sshAuthenticationConfig"), ::OpenAPI::toJsonValue(m_ssh_authentication_config));
    }
    if (m_token_status_isSet) {
        obj.insert(QString("tokenStatus"), ::OpenAPI::toJsonValue(m_token_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGitRemoteSettings::getAuthenticationTokenSecretVersion() const {
    return m_authentication_token_secret_version;
}
void OAIGitRemoteSettings::setAuthenticationTokenSecretVersion(const QString &authentication_token_secret_version) {
    m_authentication_token_secret_version = authentication_token_secret_version;
    m_authentication_token_secret_version_isSet = true;
}

bool OAIGitRemoteSettings::is_authentication_token_secret_version_Set() const{
    return m_authentication_token_secret_version_isSet;
}

bool OAIGitRemoteSettings::is_authentication_token_secret_version_Valid() const{
    return m_authentication_token_secret_version_isValid;
}

QString OAIGitRemoteSettings::getDefaultBranch() const {
    return m_default_branch;
}
void OAIGitRemoteSettings::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIGitRemoteSettings::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIGitRemoteSettings::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

OAISshAuthenticationConfig OAIGitRemoteSettings::getSshAuthenticationConfig() const {
    return m_ssh_authentication_config;
}
void OAIGitRemoteSettings::setSshAuthenticationConfig(const OAISshAuthenticationConfig &ssh_authentication_config) {
    m_ssh_authentication_config = ssh_authentication_config;
    m_ssh_authentication_config_isSet = true;
}

bool OAIGitRemoteSettings::is_ssh_authentication_config_Set() const{
    return m_ssh_authentication_config_isSet;
}

bool OAIGitRemoteSettings::is_ssh_authentication_config_Valid() const{
    return m_ssh_authentication_config_isValid;
}

QString OAIGitRemoteSettings::getTokenStatus() const {
    return m_token_status;
}
void OAIGitRemoteSettings::setTokenStatus(const QString &token_status) {
    m_token_status = token_status;
    m_token_status_isSet = true;
}

bool OAIGitRemoteSettings::is_token_status_Set() const{
    return m_token_status_isSet;
}

bool OAIGitRemoteSettings::is_token_status_Valid() const{
    return m_token_status_isValid;
}

QString OAIGitRemoteSettings::getUrl() const {
    return m_url;
}
void OAIGitRemoteSettings::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGitRemoteSettings::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGitRemoteSettings::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGitRemoteSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_token_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_authentication_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitRemoteSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
