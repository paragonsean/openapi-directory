/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseConfig::OAIReleaseConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseConfig::OAIReleaseConfig() {
    this->initializeModel();
}

OAIReleaseConfig::~OAIReleaseConfig() {}

void OAIReleaseConfig::initializeModel() {

    m_code_compilation_config_isSet = false;
    m_code_compilation_config_isValid = false;

    m_cron_schedule_isSet = false;
    m_cron_schedule_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_git_commitish_isSet = false;
    m_git_commitish_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recent_scheduled_release_records_isSet = false;
    m_recent_scheduled_release_records_isValid = false;

    m_release_compilation_result_isSet = false;
    m_release_compilation_result_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIReleaseConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseConfig::fromJsonObject(QJsonObject json) {

    m_code_compilation_config_isValid = ::OpenAPI::fromJsonValue(m_code_compilation_config, json[QString("codeCompilationConfig")]);
    m_code_compilation_config_isSet = !json[QString("codeCompilationConfig")].isNull() && m_code_compilation_config_isValid;

    m_cron_schedule_isValid = ::OpenAPI::fromJsonValue(m_cron_schedule, json[QString("cronSchedule")]);
    m_cron_schedule_isSet = !json[QString("cronSchedule")].isNull() && m_cron_schedule_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_git_commitish_isValid = ::OpenAPI::fromJsonValue(m_git_commitish, json[QString("gitCommitish")]);
    m_git_commitish_isSet = !json[QString("gitCommitish")].isNull() && m_git_commitish_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recent_scheduled_release_records_isValid = ::OpenAPI::fromJsonValue(m_recent_scheduled_release_records, json[QString("recentScheduledReleaseRecords")]);
    m_recent_scheduled_release_records_isSet = !json[QString("recentScheduledReleaseRecords")].isNull() && m_recent_scheduled_release_records_isValid;

    m_release_compilation_result_isValid = ::OpenAPI::fromJsonValue(m_release_compilation_result, json[QString("releaseCompilationResult")]);
    m_release_compilation_result_isSet = !json[QString("releaseCompilationResult")].isNull() && m_release_compilation_result_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIReleaseConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_code_compilation_config.isSet()) {
        obj.insert(QString("codeCompilationConfig"), ::OpenAPI::toJsonValue(m_code_compilation_config));
    }
    if (m_cron_schedule_isSet) {
        obj.insert(QString("cronSchedule"), ::OpenAPI::toJsonValue(m_cron_schedule));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_git_commitish_isSet) {
        obj.insert(QString("gitCommitish"), ::OpenAPI::toJsonValue(m_git_commitish));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recent_scheduled_release_records.size() > 0) {
        obj.insert(QString("recentScheduledReleaseRecords"), ::OpenAPI::toJsonValue(m_recent_scheduled_release_records));
    }
    if (m_release_compilation_result_isSet) {
        obj.insert(QString("releaseCompilationResult"), ::OpenAPI::toJsonValue(m_release_compilation_result));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAICodeCompilationConfig OAIReleaseConfig::getCodeCompilationConfig() const {
    return m_code_compilation_config;
}
void OAIReleaseConfig::setCodeCompilationConfig(const OAICodeCompilationConfig &code_compilation_config) {
    m_code_compilation_config = code_compilation_config;
    m_code_compilation_config_isSet = true;
}

bool OAIReleaseConfig::is_code_compilation_config_Set() const{
    return m_code_compilation_config_isSet;
}

bool OAIReleaseConfig::is_code_compilation_config_Valid() const{
    return m_code_compilation_config_isValid;
}

QString OAIReleaseConfig::getCronSchedule() const {
    return m_cron_schedule;
}
void OAIReleaseConfig::setCronSchedule(const QString &cron_schedule) {
    m_cron_schedule = cron_schedule;
    m_cron_schedule_isSet = true;
}

bool OAIReleaseConfig::is_cron_schedule_Set() const{
    return m_cron_schedule_isSet;
}

bool OAIReleaseConfig::is_cron_schedule_Valid() const{
    return m_cron_schedule_isValid;
}

bool OAIReleaseConfig::isDisabled() const {
    return m_disabled;
}
void OAIReleaseConfig::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIReleaseConfig::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIReleaseConfig::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIReleaseConfig::getGitCommitish() const {
    return m_git_commitish;
}
void OAIReleaseConfig::setGitCommitish(const QString &git_commitish) {
    m_git_commitish = git_commitish;
    m_git_commitish_isSet = true;
}

bool OAIReleaseConfig::is_git_commitish_Set() const{
    return m_git_commitish_isSet;
}

bool OAIReleaseConfig::is_git_commitish_Valid() const{
    return m_git_commitish_isValid;
}

QString OAIReleaseConfig::getName() const {
    return m_name;
}
void OAIReleaseConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReleaseConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReleaseConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIScheduledReleaseRecord> OAIReleaseConfig::getRecentScheduledReleaseRecords() const {
    return m_recent_scheduled_release_records;
}
void OAIReleaseConfig::setRecentScheduledReleaseRecords(const QList<OAIScheduledReleaseRecord> &recent_scheduled_release_records) {
    m_recent_scheduled_release_records = recent_scheduled_release_records;
    m_recent_scheduled_release_records_isSet = true;
}

bool OAIReleaseConfig::is_recent_scheduled_release_records_Set() const{
    return m_recent_scheduled_release_records_isSet;
}

bool OAIReleaseConfig::is_recent_scheduled_release_records_Valid() const{
    return m_recent_scheduled_release_records_isValid;
}

QString OAIReleaseConfig::getReleaseCompilationResult() const {
    return m_release_compilation_result;
}
void OAIReleaseConfig::setReleaseCompilationResult(const QString &release_compilation_result) {
    m_release_compilation_result = release_compilation_result;
    m_release_compilation_result_isSet = true;
}

bool OAIReleaseConfig::is_release_compilation_result_Set() const{
    return m_release_compilation_result_isSet;
}

bool OAIReleaseConfig::is_release_compilation_result_Valid() const{
    return m_release_compilation_result_isValid;
}

QString OAIReleaseConfig::getTimeZone() const {
    return m_time_zone;
}
void OAIReleaseConfig::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIReleaseConfig::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIReleaseConfig::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIReleaseConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_compilation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cron_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commitish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_scheduled_release_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_compilation_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
