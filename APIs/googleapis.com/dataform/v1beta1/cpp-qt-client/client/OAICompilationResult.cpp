/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompilationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompilationResult::OAICompilationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompilationResult::OAICompilationResult() {
    this->initializeModel();
}

OAICompilationResult::~OAICompilationResult() {}

void OAICompilationResult::initializeModel() {

    m_code_compilation_config_isSet = false;
    m_code_compilation_config_isValid = false;

    m_compilation_errors_isSet = false;
    m_compilation_errors_isValid = false;

    m_dataform_core_version_isSet = false;
    m_dataform_core_version_isValid = false;

    m_git_commitish_isSet = false;
    m_git_commitish_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_config_isSet = false;
    m_release_config_isValid = false;

    m_resolved_git_commit_sha_isSet = false;
    m_resolved_git_commit_sha_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAICompilationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompilationResult::fromJsonObject(QJsonObject json) {

    m_code_compilation_config_isValid = ::OpenAPI::fromJsonValue(m_code_compilation_config, json[QString("codeCompilationConfig")]);
    m_code_compilation_config_isSet = !json[QString("codeCompilationConfig")].isNull() && m_code_compilation_config_isValid;

    m_compilation_errors_isValid = ::OpenAPI::fromJsonValue(m_compilation_errors, json[QString("compilationErrors")]);
    m_compilation_errors_isSet = !json[QString("compilationErrors")].isNull() && m_compilation_errors_isValid;

    m_dataform_core_version_isValid = ::OpenAPI::fromJsonValue(m_dataform_core_version, json[QString("dataformCoreVersion")]);
    m_dataform_core_version_isSet = !json[QString("dataformCoreVersion")].isNull() && m_dataform_core_version_isValid;

    m_git_commitish_isValid = ::OpenAPI::fromJsonValue(m_git_commitish, json[QString("gitCommitish")]);
    m_git_commitish_isSet = !json[QString("gitCommitish")].isNull() && m_git_commitish_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_config_isValid = ::OpenAPI::fromJsonValue(m_release_config, json[QString("releaseConfig")]);
    m_release_config_isSet = !json[QString("releaseConfig")].isNull() && m_release_config_isValid;

    m_resolved_git_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_resolved_git_commit_sha, json[QString("resolvedGitCommitSha")]);
    m_resolved_git_commit_sha_isSet = !json[QString("resolvedGitCommitSha")].isNull() && m_resolved_git_commit_sha_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAICompilationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompilationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_code_compilation_config.isSet()) {
        obj.insert(QString("codeCompilationConfig"), ::OpenAPI::toJsonValue(m_code_compilation_config));
    }
    if (m_compilation_errors.size() > 0) {
        obj.insert(QString("compilationErrors"), ::OpenAPI::toJsonValue(m_compilation_errors));
    }
    if (m_dataform_core_version_isSet) {
        obj.insert(QString("dataformCoreVersion"), ::OpenAPI::toJsonValue(m_dataform_core_version));
    }
    if (m_git_commitish_isSet) {
        obj.insert(QString("gitCommitish"), ::OpenAPI::toJsonValue(m_git_commitish));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_config_isSet) {
        obj.insert(QString("releaseConfig"), ::OpenAPI::toJsonValue(m_release_config));
    }
    if (m_resolved_git_commit_sha_isSet) {
        obj.insert(QString("resolvedGitCommitSha"), ::OpenAPI::toJsonValue(m_resolved_git_commit_sha));
    }
    if (m_workspace_isSet) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

OAICodeCompilationConfig OAICompilationResult::getCodeCompilationConfig() const {
    return m_code_compilation_config;
}
void OAICompilationResult::setCodeCompilationConfig(const OAICodeCompilationConfig &code_compilation_config) {
    m_code_compilation_config = code_compilation_config;
    m_code_compilation_config_isSet = true;
}

bool OAICompilationResult::is_code_compilation_config_Set() const{
    return m_code_compilation_config_isSet;
}

bool OAICompilationResult::is_code_compilation_config_Valid() const{
    return m_code_compilation_config_isValid;
}

QList<OAICompilationError> OAICompilationResult::getCompilationErrors() const {
    return m_compilation_errors;
}
void OAICompilationResult::setCompilationErrors(const QList<OAICompilationError> &compilation_errors) {
    m_compilation_errors = compilation_errors;
    m_compilation_errors_isSet = true;
}

bool OAICompilationResult::is_compilation_errors_Set() const{
    return m_compilation_errors_isSet;
}

bool OAICompilationResult::is_compilation_errors_Valid() const{
    return m_compilation_errors_isValid;
}

QString OAICompilationResult::getDataformCoreVersion() const {
    return m_dataform_core_version;
}
void OAICompilationResult::setDataformCoreVersion(const QString &dataform_core_version) {
    m_dataform_core_version = dataform_core_version;
    m_dataform_core_version_isSet = true;
}

bool OAICompilationResult::is_dataform_core_version_Set() const{
    return m_dataform_core_version_isSet;
}

bool OAICompilationResult::is_dataform_core_version_Valid() const{
    return m_dataform_core_version_isValid;
}

QString OAICompilationResult::getGitCommitish() const {
    return m_git_commitish;
}
void OAICompilationResult::setGitCommitish(const QString &git_commitish) {
    m_git_commitish = git_commitish;
    m_git_commitish_isSet = true;
}

bool OAICompilationResult::is_git_commitish_Set() const{
    return m_git_commitish_isSet;
}

bool OAICompilationResult::is_git_commitish_Valid() const{
    return m_git_commitish_isValid;
}

QString OAICompilationResult::getName() const {
    return m_name;
}
void OAICompilationResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompilationResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompilationResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompilationResult::getReleaseConfig() const {
    return m_release_config;
}
void OAICompilationResult::setReleaseConfig(const QString &release_config) {
    m_release_config = release_config;
    m_release_config_isSet = true;
}

bool OAICompilationResult::is_release_config_Set() const{
    return m_release_config_isSet;
}

bool OAICompilationResult::is_release_config_Valid() const{
    return m_release_config_isValid;
}

QString OAICompilationResult::getResolvedGitCommitSha() const {
    return m_resolved_git_commit_sha;
}
void OAICompilationResult::setResolvedGitCommitSha(const QString &resolved_git_commit_sha) {
    m_resolved_git_commit_sha = resolved_git_commit_sha;
    m_resolved_git_commit_sha_isSet = true;
}

bool OAICompilationResult::is_resolved_git_commit_sha_Set() const{
    return m_resolved_git_commit_sha_isSet;
}

bool OAICompilationResult::is_resolved_git_commit_sha_Valid() const{
    return m_resolved_git_commit_sha_isValid;
}

QString OAICompilationResult::getWorkspace() const {
    return m_workspace;
}
void OAICompilationResult::setWorkspace(const QString &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAICompilationResult::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAICompilationResult::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAICompilationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_compilation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataform_core_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commitish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_git_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompilationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
