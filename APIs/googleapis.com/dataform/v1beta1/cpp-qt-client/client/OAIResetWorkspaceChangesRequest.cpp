/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetWorkspaceChangesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetWorkspaceChangesRequest::OAIResetWorkspaceChangesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetWorkspaceChangesRequest::OAIResetWorkspaceChangesRequest() {
    this->initializeModel();
}

OAIResetWorkspaceChangesRequest::~OAIResetWorkspaceChangesRequest() {}

void OAIResetWorkspaceChangesRequest::initializeModel() {

    m_clean_isSet = false;
    m_clean_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;
}

void OAIResetWorkspaceChangesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetWorkspaceChangesRequest::fromJsonObject(QJsonObject json) {

    m_clean_isValid = ::OpenAPI::fromJsonValue(m_clean, json[QString("clean")]);
    m_clean_isSet = !json[QString("clean")].isNull() && m_clean_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;
}

QString OAIResetWorkspaceChangesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetWorkspaceChangesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_clean_isSet) {
        obj.insert(QString("clean"), ::OpenAPI::toJsonValue(m_clean));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    return obj;
}

bool OAIResetWorkspaceChangesRequest::isClean() const {
    return m_clean;
}
void OAIResetWorkspaceChangesRequest::setClean(const bool &clean) {
    m_clean = clean;
    m_clean_isSet = true;
}

bool OAIResetWorkspaceChangesRequest::is_clean_Set() const{
    return m_clean_isSet;
}

bool OAIResetWorkspaceChangesRequest::is_clean_Valid() const{
    return m_clean_isValid;
}

QList<QString> OAIResetWorkspaceChangesRequest::getPaths() const {
    return m_paths;
}
void OAIResetWorkspaceChangesRequest::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIResetWorkspaceChangesRequest::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIResetWorkspaceChangesRequest::is_paths_Valid() const{
    return m_paths_isValid;
}

bool OAIResetWorkspaceChangesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetWorkspaceChangesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
