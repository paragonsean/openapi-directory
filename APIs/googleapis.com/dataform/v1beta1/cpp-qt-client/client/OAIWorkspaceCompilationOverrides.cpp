/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceCompilationOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceCompilationOverrides::OAIWorkspaceCompilationOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceCompilationOverrides::OAIWorkspaceCompilationOverrides() {
    this->initializeModel();
}

OAIWorkspaceCompilationOverrides::~OAIWorkspaceCompilationOverrides() {}

void OAIWorkspaceCompilationOverrides::initializeModel() {

    m_default_database_isSet = false;
    m_default_database_isValid = false;

    m_schema_suffix_isSet = false;
    m_schema_suffix_isValid = false;

    m_table_prefix_isSet = false;
    m_table_prefix_isValid = false;
}

void OAIWorkspaceCompilationOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceCompilationOverrides::fromJsonObject(QJsonObject json) {

    m_default_database_isValid = ::OpenAPI::fromJsonValue(m_default_database, json[QString("defaultDatabase")]);
    m_default_database_isSet = !json[QString("defaultDatabase")].isNull() && m_default_database_isValid;

    m_schema_suffix_isValid = ::OpenAPI::fromJsonValue(m_schema_suffix, json[QString("schemaSuffix")]);
    m_schema_suffix_isSet = !json[QString("schemaSuffix")].isNull() && m_schema_suffix_isValid;

    m_table_prefix_isValid = ::OpenAPI::fromJsonValue(m_table_prefix, json[QString("tablePrefix")]);
    m_table_prefix_isSet = !json[QString("tablePrefix")].isNull() && m_table_prefix_isValid;
}

QString OAIWorkspaceCompilationOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceCompilationOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_default_database_isSet) {
        obj.insert(QString("defaultDatabase"), ::OpenAPI::toJsonValue(m_default_database));
    }
    if (m_schema_suffix_isSet) {
        obj.insert(QString("schemaSuffix"), ::OpenAPI::toJsonValue(m_schema_suffix));
    }
    if (m_table_prefix_isSet) {
        obj.insert(QString("tablePrefix"), ::OpenAPI::toJsonValue(m_table_prefix));
    }
    return obj;
}

QString OAIWorkspaceCompilationOverrides::getDefaultDatabase() const {
    return m_default_database;
}
void OAIWorkspaceCompilationOverrides::setDefaultDatabase(const QString &default_database) {
    m_default_database = default_database;
    m_default_database_isSet = true;
}

bool OAIWorkspaceCompilationOverrides::is_default_database_Set() const{
    return m_default_database_isSet;
}

bool OAIWorkspaceCompilationOverrides::is_default_database_Valid() const{
    return m_default_database_isValid;
}

QString OAIWorkspaceCompilationOverrides::getSchemaSuffix() const {
    return m_schema_suffix;
}
void OAIWorkspaceCompilationOverrides::setSchemaSuffix(const QString &schema_suffix) {
    m_schema_suffix = schema_suffix;
    m_schema_suffix_isSet = true;
}

bool OAIWorkspaceCompilationOverrides::is_schema_suffix_Set() const{
    return m_schema_suffix_isSet;
}

bool OAIWorkspaceCompilationOverrides::is_schema_suffix_Valid() const{
    return m_schema_suffix_isValid;
}

QString OAIWorkspaceCompilationOverrides::getTablePrefix() const {
    return m_table_prefix;
}
void OAIWorkspaceCompilationOverrides::setTablePrefix(const QString &table_prefix) {
    m_table_prefix = table_prefix;
    m_table_prefix_isSet = true;
}

bool OAIWorkspaceCompilationOverrides::is_table_prefix_Set() const{
    return m_table_prefix_isSet;
}

bool OAIWorkspaceCompilationOverrides::is_table_prefix_Valid() const{
    return m_table_prefix_isValid;
}

bool OAIWorkspaceCompilationOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceCompilationOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
