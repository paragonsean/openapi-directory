/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowInvocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowInvocation::OAIWorkflowInvocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowInvocation::OAIWorkflowInvocation() {
    this->initializeModel();
}

OAIWorkflowInvocation::~OAIWorkflowInvocation() {}

void OAIWorkflowInvocation::initializeModel() {

    m_compilation_result_isSet = false;
    m_compilation_result_isValid = false;

    m_invocation_config_isSet = false;
    m_invocation_config_isValid = false;

    m_invocation_timing_isSet = false;
    m_invocation_timing_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resolved_compilation_result_isSet = false;
    m_resolved_compilation_result_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_workflow_config_isSet = false;
    m_workflow_config_isValid = false;
}

void OAIWorkflowInvocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowInvocation::fromJsonObject(QJsonObject json) {

    m_compilation_result_isValid = ::OpenAPI::fromJsonValue(m_compilation_result, json[QString("compilationResult")]);
    m_compilation_result_isSet = !json[QString("compilationResult")].isNull() && m_compilation_result_isValid;

    m_invocation_config_isValid = ::OpenAPI::fromJsonValue(m_invocation_config, json[QString("invocationConfig")]);
    m_invocation_config_isSet = !json[QString("invocationConfig")].isNull() && m_invocation_config_isValid;

    m_invocation_timing_isValid = ::OpenAPI::fromJsonValue(m_invocation_timing, json[QString("invocationTiming")]);
    m_invocation_timing_isSet = !json[QString("invocationTiming")].isNull() && m_invocation_timing_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resolved_compilation_result_isValid = ::OpenAPI::fromJsonValue(m_resolved_compilation_result, json[QString("resolvedCompilationResult")]);
    m_resolved_compilation_result_isSet = !json[QString("resolvedCompilationResult")].isNull() && m_resolved_compilation_result_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_workflow_config_isValid = ::OpenAPI::fromJsonValue(m_workflow_config, json[QString("workflowConfig")]);
    m_workflow_config_isSet = !json[QString("workflowConfig")].isNull() && m_workflow_config_isValid;
}

QString OAIWorkflowInvocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowInvocation::asJsonObject() const {
    QJsonObject obj;
    if (m_compilation_result_isSet) {
        obj.insert(QString("compilationResult"), ::OpenAPI::toJsonValue(m_compilation_result));
    }
    if (m_invocation_config.isSet()) {
        obj.insert(QString("invocationConfig"), ::OpenAPI::toJsonValue(m_invocation_config));
    }
    if (m_invocation_timing.isSet()) {
        obj.insert(QString("invocationTiming"), ::OpenAPI::toJsonValue(m_invocation_timing));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resolved_compilation_result_isSet) {
        obj.insert(QString("resolvedCompilationResult"), ::OpenAPI::toJsonValue(m_resolved_compilation_result));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_workflow_config_isSet) {
        obj.insert(QString("workflowConfig"), ::OpenAPI::toJsonValue(m_workflow_config));
    }
    return obj;
}

QString OAIWorkflowInvocation::getCompilationResult() const {
    return m_compilation_result;
}
void OAIWorkflowInvocation::setCompilationResult(const QString &compilation_result) {
    m_compilation_result = compilation_result;
    m_compilation_result_isSet = true;
}

bool OAIWorkflowInvocation::is_compilation_result_Set() const{
    return m_compilation_result_isSet;
}

bool OAIWorkflowInvocation::is_compilation_result_Valid() const{
    return m_compilation_result_isValid;
}

OAIInvocationConfig OAIWorkflowInvocation::getInvocationConfig() const {
    return m_invocation_config;
}
void OAIWorkflowInvocation::setInvocationConfig(const OAIInvocationConfig &invocation_config) {
    m_invocation_config = invocation_config;
    m_invocation_config_isSet = true;
}

bool OAIWorkflowInvocation::is_invocation_config_Set() const{
    return m_invocation_config_isSet;
}

bool OAIWorkflowInvocation::is_invocation_config_Valid() const{
    return m_invocation_config_isValid;
}

OAIInterval OAIWorkflowInvocation::getInvocationTiming() const {
    return m_invocation_timing;
}
void OAIWorkflowInvocation::setInvocationTiming(const OAIInterval &invocation_timing) {
    m_invocation_timing = invocation_timing;
    m_invocation_timing_isSet = true;
}

bool OAIWorkflowInvocation::is_invocation_timing_Set() const{
    return m_invocation_timing_isSet;
}

bool OAIWorkflowInvocation::is_invocation_timing_Valid() const{
    return m_invocation_timing_isValid;
}

QString OAIWorkflowInvocation::getName() const {
    return m_name;
}
void OAIWorkflowInvocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowInvocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowInvocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflowInvocation::getResolvedCompilationResult() const {
    return m_resolved_compilation_result;
}
void OAIWorkflowInvocation::setResolvedCompilationResult(const QString &resolved_compilation_result) {
    m_resolved_compilation_result = resolved_compilation_result;
    m_resolved_compilation_result_isSet = true;
}

bool OAIWorkflowInvocation::is_resolved_compilation_result_Set() const{
    return m_resolved_compilation_result_isSet;
}

bool OAIWorkflowInvocation::is_resolved_compilation_result_Valid() const{
    return m_resolved_compilation_result_isValid;
}

QString OAIWorkflowInvocation::getState() const {
    return m_state;
}
void OAIWorkflowInvocation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowInvocation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowInvocation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkflowInvocation::getWorkflowConfig() const {
    return m_workflow_config;
}
void OAIWorkflowInvocation::setWorkflowConfig(const QString &workflow_config) {
    m_workflow_config = workflow_config;
    m_workflow_config_isSet = true;
}

bool OAIWorkflowInvocation::is_workflow_config_Set() const{
    return m_workflow_config_isSet;
}

bool OAIWorkflowInvocation::is_workflow_config_Valid() const{
    return m_workflow_config_isValid;
}

bool OAIWorkflowInvocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compilation_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_compilation_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowInvocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
