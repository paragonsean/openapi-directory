/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowInvocationAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowInvocationAction::OAIWorkflowInvocationAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowInvocationAction::OAIWorkflowInvocationAction() {
    this->initializeModel();
}

OAIWorkflowInvocationAction::~OAIWorkflowInvocationAction() {}

void OAIWorkflowInvocationAction::initializeModel() {

    m_bigquery_action_isSet = false;
    m_bigquery_action_isValid = false;

    m_canonical_target_isSet = false;
    m_canonical_target_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_invocation_timing_isSet = false;
    m_invocation_timing_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIWorkflowInvocationAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowInvocationAction::fromJsonObject(QJsonObject json) {

    m_bigquery_action_isValid = ::OpenAPI::fromJsonValue(m_bigquery_action, json[QString("bigqueryAction")]);
    m_bigquery_action_isSet = !json[QString("bigqueryAction")].isNull() && m_bigquery_action_isValid;

    m_canonical_target_isValid = ::OpenAPI::fromJsonValue(m_canonical_target, json[QString("canonicalTarget")]);
    m_canonical_target_isSet = !json[QString("canonicalTarget")].isNull() && m_canonical_target_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_invocation_timing_isValid = ::OpenAPI::fromJsonValue(m_invocation_timing, json[QString("invocationTiming")]);
    m_invocation_timing_isSet = !json[QString("invocationTiming")].isNull() && m_invocation_timing_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIWorkflowInvocationAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowInvocationAction::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_action.isSet()) {
        obj.insert(QString("bigqueryAction"), ::OpenAPI::toJsonValue(m_bigquery_action));
    }
    if (m_canonical_target.isSet()) {
        obj.insert(QString("canonicalTarget"), ::OpenAPI::toJsonValue(m_canonical_target));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_invocation_timing.isSet()) {
        obj.insert(QString("invocationTiming"), ::OpenAPI::toJsonValue(m_invocation_timing));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIBigQueryAction OAIWorkflowInvocationAction::getBigqueryAction() const {
    return m_bigquery_action;
}
void OAIWorkflowInvocationAction::setBigqueryAction(const OAIBigQueryAction &bigquery_action) {
    m_bigquery_action = bigquery_action;
    m_bigquery_action_isSet = true;
}

bool OAIWorkflowInvocationAction::is_bigquery_action_Set() const{
    return m_bigquery_action_isSet;
}

bool OAIWorkflowInvocationAction::is_bigquery_action_Valid() const{
    return m_bigquery_action_isValid;
}

OAITarget OAIWorkflowInvocationAction::getCanonicalTarget() const {
    return m_canonical_target;
}
void OAIWorkflowInvocationAction::setCanonicalTarget(const OAITarget &canonical_target) {
    m_canonical_target = canonical_target;
    m_canonical_target_isSet = true;
}

bool OAIWorkflowInvocationAction::is_canonical_target_Set() const{
    return m_canonical_target_isSet;
}

bool OAIWorkflowInvocationAction::is_canonical_target_Valid() const{
    return m_canonical_target_isValid;
}

QString OAIWorkflowInvocationAction::getFailureReason() const {
    return m_failure_reason;
}
void OAIWorkflowInvocationAction::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIWorkflowInvocationAction::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIWorkflowInvocationAction::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIInterval OAIWorkflowInvocationAction::getInvocationTiming() const {
    return m_invocation_timing;
}
void OAIWorkflowInvocationAction::setInvocationTiming(const OAIInterval &invocation_timing) {
    m_invocation_timing = invocation_timing;
    m_invocation_timing_isSet = true;
}

bool OAIWorkflowInvocationAction::is_invocation_timing_Set() const{
    return m_invocation_timing_isSet;
}

bool OAIWorkflowInvocationAction::is_invocation_timing_Valid() const{
    return m_invocation_timing_isValid;
}

QString OAIWorkflowInvocationAction::getState() const {
    return m_state;
}
void OAIWorkflowInvocationAction::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowInvocationAction::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowInvocationAction::is_state_Valid() const{
    return m_state_isValid;
}

OAITarget OAIWorkflowInvocationAction::getTarget() const {
    return m_target;
}
void OAIWorkflowInvocationAction::setTarget(const OAITarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIWorkflowInvocationAction::is_target_Set() const{
    return m_target_isSet;
}

bool OAIWorkflowInvocationAction::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIWorkflowInvocationAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowInvocationAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
