/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUncommittedFileChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUncommittedFileChange::OAIUncommittedFileChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUncommittedFileChange::OAIUncommittedFileChange() {
    this->initializeModel();
}

OAIUncommittedFileChange::~OAIUncommittedFileChange() {}

void OAIUncommittedFileChange::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUncommittedFileChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUncommittedFileChange::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUncommittedFileChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUncommittedFileChange::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUncommittedFileChange::getPath() const {
    return m_path;
}
void OAIUncommittedFileChange::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIUncommittedFileChange::is_path_Set() const{
    return m_path_isSet;
}

bool OAIUncommittedFileChange::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIUncommittedFileChange::getState() const {
    return m_state;
}
void OAIUncommittedFileChange::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUncommittedFileChange::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUncommittedFileChange::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUncommittedFileChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUncommittedFileChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
