/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkflowInvocationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkflowInvocationsResponse::OAIListWorkflowInvocationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkflowInvocationsResponse::OAIListWorkflowInvocationsResponse() {
    this->initializeModel();
}

OAIListWorkflowInvocationsResponse::~OAIListWorkflowInvocationsResponse() {}

void OAIListWorkflowInvocationsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;

    m_workflow_invocations_isSet = false;
    m_workflow_invocations_isValid = false;
}

void OAIListWorkflowInvocationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkflowInvocationsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;

    m_workflow_invocations_isValid = ::OpenAPI::fromJsonValue(m_workflow_invocations, json[QString("workflowInvocations")]);
    m_workflow_invocations_isSet = !json[QString("workflowInvocations")].isNull() && m_workflow_invocations_isValid;
}

QString OAIListWorkflowInvocationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkflowInvocationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    if (m_workflow_invocations.size() > 0) {
        obj.insert(QString("workflowInvocations"), ::OpenAPI::toJsonValue(m_workflow_invocations));
    }
    return obj;
}

QString OAIListWorkflowInvocationsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListWorkflowInvocationsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListWorkflowInvocationsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListWorkflowInvocationsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QString> OAIListWorkflowInvocationsResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIListWorkflowInvocationsResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIListWorkflowInvocationsResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIListWorkflowInvocationsResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

QList<OAIWorkflowInvocation> OAIListWorkflowInvocationsResponse::getWorkflowInvocations() const {
    return m_workflow_invocations;
}
void OAIListWorkflowInvocationsResponse::setWorkflowInvocations(const QList<OAIWorkflowInvocation> &workflow_invocations) {
    m_workflow_invocations = workflow_invocations;
    m_workflow_invocations_isSet = true;
}

bool OAIListWorkflowInvocationsResponse::is_workflow_invocations_Set() const{
    return m_workflow_invocations_isSet;
}

bool OAIListWorkflowInvocationsResponse::is_workflow_invocations_Valid() const{
    return m_workflow_invocations_isValid;
}

bool OAIListWorkflowInvocationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_invocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkflowInvocationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
