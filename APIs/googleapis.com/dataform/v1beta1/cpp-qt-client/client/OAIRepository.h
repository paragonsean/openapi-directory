/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepository.h
 *
 * Represents a Dataform Git repository.
 */

#ifndef OAIRepository_H
#define OAIRepository_H

#include <QJsonObject>

#include "OAIGitRemoteSettings.h"
#include "OAIWorkspaceCompilationOverrides.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGitRemoteSettings;
class OAIWorkspaceCompilationOverrides;

class OAIRepository : public OAIObject {
public:
    OAIRepository();
    OAIRepository(QString json);
    ~OAIRepository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIGitRemoteSettings getGitRemoteSettings() const;
    void setGitRemoteSettings(const OAIGitRemoteSettings &git_remote_settings);
    bool is_git_remote_settings_Set() const;
    bool is_git_remote_settings_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNpmrcEnvironmentVariablesSecretVersion() const;
    void setNpmrcEnvironmentVariablesSecretVersion(const QString &npmrc_environment_variables_secret_version);
    bool is_npmrc_environment_variables_secret_version_Set() const;
    bool is_npmrc_environment_variables_secret_version_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    bool isSetAuthenticatedUserAdmin() const;
    void setSetAuthenticatedUserAdmin(const bool &set_authenticated_user_admin);
    bool is_set_authenticated_user_admin_Set() const;
    bool is_set_authenticated_user_admin_Valid() const;

    OAIWorkspaceCompilationOverrides getWorkspaceCompilationOverrides() const;
    void setWorkspaceCompilationOverrides(const OAIWorkspaceCompilationOverrides &workspace_compilation_overrides);
    bool is_workspace_compilation_overrides_Set() const;
    bool is_workspace_compilation_overrides_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIGitRemoteSettings m_git_remote_settings;
    bool m_git_remote_settings_isSet;
    bool m_git_remote_settings_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_npmrc_environment_variables_secret_version;
    bool m_npmrc_environment_variables_secret_version_isSet;
    bool m_npmrc_environment_variables_secret_version_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    bool m_set_authenticated_user_admin;
    bool m_set_authenticated_user_admin_isSet;
    bool m_set_authenticated_user_admin_isValid;

    OAIWorkspaceCompilationOverrides m_workspace_compilation_overrides;
    bool m_workspace_compilation_overrides_isSet;
    bool m_workspace_compilation_overrides_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepository)

#endif // OAIRepository_H
