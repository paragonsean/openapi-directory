/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeclaration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeclaration::OAIDeclaration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeclaration::OAIDeclaration() {
    this->initializeModel();
}

OAIDeclaration::~OAIDeclaration() {}

void OAIDeclaration::initializeModel() {

    m_relation_descriptor_isSet = false;
    m_relation_descriptor_isValid = false;
}

void OAIDeclaration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeclaration::fromJsonObject(QJsonObject json) {

    m_relation_descriptor_isValid = ::OpenAPI::fromJsonValue(m_relation_descriptor, json[QString("relationDescriptor")]);
    m_relation_descriptor_isSet = !json[QString("relationDescriptor")].isNull() && m_relation_descriptor_isValid;
}

QString OAIDeclaration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeclaration::asJsonObject() const {
    QJsonObject obj;
    if (m_relation_descriptor.isSet()) {
        obj.insert(QString("relationDescriptor"), ::OpenAPI::toJsonValue(m_relation_descriptor));
    }
    return obj;
}

OAIRelationDescriptor OAIDeclaration::getRelationDescriptor() const {
    return m_relation_descriptor;
}
void OAIDeclaration::setRelationDescriptor(const OAIRelationDescriptor &relation_descriptor) {
    m_relation_descriptor = relation_descriptor;
    m_relation_descriptor_isSet = true;
}

bool OAIDeclaration::is_relation_descriptor_Set() const{
    return m_relation_descriptor_isSet;
}

bool OAIDeclaration::is_relation_descriptor_Valid() const{
    return m_relation_descriptor_isValid;
}

bool OAIDeclaration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relation_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeclaration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
