/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitWorkspaceChangesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitWorkspaceChangesRequest::OAICommitWorkspaceChangesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitWorkspaceChangesRequest::OAICommitWorkspaceChangesRequest() {
    this->initializeModel();
}

OAICommitWorkspaceChangesRequest::~OAICommitWorkspaceChangesRequest() {}

void OAICommitWorkspaceChangesRequest::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_commit_message_isSet = false;
    m_commit_message_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;
}

void OAICommitWorkspaceChangesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitWorkspaceChangesRequest::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_commit_message_isValid = ::OpenAPI::fromJsonValue(m_commit_message, json[QString("commitMessage")]);
    m_commit_message_isSet = !json[QString("commitMessage")].isNull() && m_commit_message_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;
}

QString OAICommitWorkspaceChangesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitWorkspaceChangesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_commit_message_isSet) {
        obj.insert(QString("commitMessage"), ::OpenAPI::toJsonValue(m_commit_message));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    return obj;
}

OAICommitAuthor OAICommitWorkspaceChangesRequest::getAuthor() const {
    return m_author;
}
void OAICommitWorkspaceChangesRequest::setAuthor(const OAICommitAuthor &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommitWorkspaceChangesRequest::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommitWorkspaceChangesRequest::is_author_Valid() const{
    return m_author_isValid;
}

QString OAICommitWorkspaceChangesRequest::getCommitMessage() const {
    return m_commit_message;
}
void OAICommitWorkspaceChangesRequest::setCommitMessage(const QString &commit_message) {
    m_commit_message = commit_message;
    m_commit_message_isSet = true;
}

bool OAICommitWorkspaceChangesRequest::is_commit_message_Set() const{
    return m_commit_message_isSet;
}

bool OAICommitWorkspaceChangesRequest::is_commit_message_Valid() const{
    return m_commit_message_isValid;
}

QList<QString> OAICommitWorkspaceChangesRequest::getPaths() const {
    return m_paths;
}
void OAICommitWorkspaceChangesRequest::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAICommitWorkspaceChangesRequest::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAICommitWorkspaceChangesRequest::is_paths_Valid() const{
    return m_paths_isValid;
}

bool OAICommitWorkspaceChangesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitWorkspaceChangesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
