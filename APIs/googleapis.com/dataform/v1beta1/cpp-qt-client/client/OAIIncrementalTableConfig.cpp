/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncrementalTableConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncrementalTableConfig::OAIIncrementalTableConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncrementalTableConfig::OAIIncrementalTableConfig() {
    this->initializeModel();
}

OAIIncrementalTableConfig::~OAIIncrementalTableConfig() {}

void OAIIncrementalTableConfig::initializeModel() {

    m_incremental_post_operations_isSet = false;
    m_incremental_post_operations_isValid = false;

    m_incremental_pre_operations_isSet = false;
    m_incremental_pre_operations_isValid = false;

    m_incremental_select_query_isSet = false;
    m_incremental_select_query_isValid = false;

    m_refresh_disabled_isSet = false;
    m_refresh_disabled_isValid = false;

    m_unique_key_parts_isSet = false;
    m_unique_key_parts_isValid = false;

    m_update_partition_filter_isSet = false;
    m_update_partition_filter_isValid = false;
}

void OAIIncrementalTableConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncrementalTableConfig::fromJsonObject(QJsonObject json) {

    m_incremental_post_operations_isValid = ::OpenAPI::fromJsonValue(m_incremental_post_operations, json[QString("incrementalPostOperations")]);
    m_incremental_post_operations_isSet = !json[QString("incrementalPostOperations")].isNull() && m_incremental_post_operations_isValid;

    m_incremental_pre_operations_isValid = ::OpenAPI::fromJsonValue(m_incremental_pre_operations, json[QString("incrementalPreOperations")]);
    m_incremental_pre_operations_isSet = !json[QString("incrementalPreOperations")].isNull() && m_incremental_pre_operations_isValid;

    m_incremental_select_query_isValid = ::OpenAPI::fromJsonValue(m_incremental_select_query, json[QString("incrementalSelectQuery")]);
    m_incremental_select_query_isSet = !json[QString("incrementalSelectQuery")].isNull() && m_incremental_select_query_isValid;

    m_refresh_disabled_isValid = ::OpenAPI::fromJsonValue(m_refresh_disabled, json[QString("refreshDisabled")]);
    m_refresh_disabled_isSet = !json[QString("refreshDisabled")].isNull() && m_refresh_disabled_isValid;

    m_unique_key_parts_isValid = ::OpenAPI::fromJsonValue(m_unique_key_parts, json[QString("uniqueKeyParts")]);
    m_unique_key_parts_isSet = !json[QString("uniqueKeyParts")].isNull() && m_unique_key_parts_isValid;

    m_update_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_update_partition_filter, json[QString("updatePartitionFilter")]);
    m_update_partition_filter_isSet = !json[QString("updatePartitionFilter")].isNull() && m_update_partition_filter_isValid;
}

QString OAIIncrementalTableConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncrementalTableConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_incremental_post_operations.size() > 0) {
        obj.insert(QString("incrementalPostOperations"), ::OpenAPI::toJsonValue(m_incremental_post_operations));
    }
    if (m_incremental_pre_operations.size() > 0) {
        obj.insert(QString("incrementalPreOperations"), ::OpenAPI::toJsonValue(m_incremental_pre_operations));
    }
    if (m_incremental_select_query_isSet) {
        obj.insert(QString("incrementalSelectQuery"), ::OpenAPI::toJsonValue(m_incremental_select_query));
    }
    if (m_refresh_disabled_isSet) {
        obj.insert(QString("refreshDisabled"), ::OpenAPI::toJsonValue(m_refresh_disabled));
    }
    if (m_unique_key_parts.size() > 0) {
        obj.insert(QString("uniqueKeyParts"), ::OpenAPI::toJsonValue(m_unique_key_parts));
    }
    if (m_update_partition_filter_isSet) {
        obj.insert(QString("updatePartitionFilter"), ::OpenAPI::toJsonValue(m_update_partition_filter));
    }
    return obj;
}

QList<QString> OAIIncrementalTableConfig::getIncrementalPostOperations() const {
    return m_incremental_post_operations;
}
void OAIIncrementalTableConfig::setIncrementalPostOperations(const QList<QString> &incremental_post_operations) {
    m_incremental_post_operations = incremental_post_operations;
    m_incremental_post_operations_isSet = true;
}

bool OAIIncrementalTableConfig::is_incremental_post_operations_Set() const{
    return m_incremental_post_operations_isSet;
}

bool OAIIncrementalTableConfig::is_incremental_post_operations_Valid() const{
    return m_incremental_post_operations_isValid;
}

QList<QString> OAIIncrementalTableConfig::getIncrementalPreOperations() const {
    return m_incremental_pre_operations;
}
void OAIIncrementalTableConfig::setIncrementalPreOperations(const QList<QString> &incremental_pre_operations) {
    m_incremental_pre_operations = incremental_pre_operations;
    m_incremental_pre_operations_isSet = true;
}

bool OAIIncrementalTableConfig::is_incremental_pre_operations_Set() const{
    return m_incremental_pre_operations_isSet;
}

bool OAIIncrementalTableConfig::is_incremental_pre_operations_Valid() const{
    return m_incremental_pre_operations_isValid;
}

QString OAIIncrementalTableConfig::getIncrementalSelectQuery() const {
    return m_incremental_select_query;
}
void OAIIncrementalTableConfig::setIncrementalSelectQuery(const QString &incremental_select_query) {
    m_incremental_select_query = incremental_select_query;
    m_incremental_select_query_isSet = true;
}

bool OAIIncrementalTableConfig::is_incremental_select_query_Set() const{
    return m_incremental_select_query_isSet;
}

bool OAIIncrementalTableConfig::is_incremental_select_query_Valid() const{
    return m_incremental_select_query_isValid;
}

bool OAIIncrementalTableConfig::isRefreshDisabled() const {
    return m_refresh_disabled;
}
void OAIIncrementalTableConfig::setRefreshDisabled(const bool &refresh_disabled) {
    m_refresh_disabled = refresh_disabled;
    m_refresh_disabled_isSet = true;
}

bool OAIIncrementalTableConfig::is_refresh_disabled_Set() const{
    return m_refresh_disabled_isSet;
}

bool OAIIncrementalTableConfig::is_refresh_disabled_Valid() const{
    return m_refresh_disabled_isValid;
}

QList<QString> OAIIncrementalTableConfig::getUniqueKeyParts() const {
    return m_unique_key_parts;
}
void OAIIncrementalTableConfig::setUniqueKeyParts(const QList<QString> &unique_key_parts) {
    m_unique_key_parts = unique_key_parts;
    m_unique_key_parts_isSet = true;
}

bool OAIIncrementalTableConfig::is_unique_key_parts_Set() const{
    return m_unique_key_parts_isSet;
}

bool OAIIncrementalTableConfig::is_unique_key_parts_Valid() const{
    return m_unique_key_parts_isValid;
}

QString OAIIncrementalTableConfig::getUpdatePartitionFilter() const {
    return m_update_partition_filter;
}
void OAIIncrementalTableConfig::setUpdatePartitionFilter(const QString &update_partition_filter) {
    m_update_partition_filter = update_partition_filter;
    m_update_partition_filter_isSet = true;
}

bool OAIIncrementalTableConfig::is_update_partition_filter_Set() const{
    return m_update_partition_filter_isSet;
}

bool OAIIncrementalTableConfig::is_update_partition_filter_Valid() const{
    return m_update_partition_filter_isValid;
}

bool OAIIncrementalTableConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_incremental_post_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_pre_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_select_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_key_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncrementalTableConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
