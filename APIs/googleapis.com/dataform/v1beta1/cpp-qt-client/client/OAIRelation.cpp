/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_additional_options_isSet = false;
    m_additional_options_isValid = false;

    m_cluster_expressions_isSet = false;
    m_cluster_expressions_isValid = false;

    m_dependency_targets_isSet = false;
    m_dependency_targets_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_incremental_table_config_isSet = false;
    m_incremental_table_config_isValid = false;

    m_partition_expiration_days_isSet = false;
    m_partition_expiration_days_isValid = false;

    m_partition_expression_isSet = false;
    m_partition_expression_isValid = false;

    m_post_operations_isSet = false;
    m_post_operations_isValid = false;

    m_pre_operations_isSet = false;
    m_pre_operations_isValid = false;

    m_relation_descriptor_isSet = false;
    m_relation_descriptor_isValid = false;

    m_relation_type_isSet = false;
    m_relation_type_isValid = false;

    m_require_partition_filter_isSet = false;
    m_require_partition_filter_isValid = false;

    m_select_query_isSet = false;
    m_select_query_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_additional_options_isValid = ::OpenAPI::fromJsonValue(m_additional_options, json[QString("additionalOptions")]);
    m_additional_options_isSet = !json[QString("additionalOptions")].isNull() && m_additional_options_isValid;

    m_cluster_expressions_isValid = ::OpenAPI::fromJsonValue(m_cluster_expressions, json[QString("clusterExpressions")]);
    m_cluster_expressions_isSet = !json[QString("clusterExpressions")].isNull() && m_cluster_expressions_isValid;

    m_dependency_targets_isValid = ::OpenAPI::fromJsonValue(m_dependency_targets, json[QString("dependencyTargets")]);
    m_dependency_targets_isSet = !json[QString("dependencyTargets")].isNull() && m_dependency_targets_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_incremental_table_config_isValid = ::OpenAPI::fromJsonValue(m_incremental_table_config, json[QString("incrementalTableConfig")]);
    m_incremental_table_config_isSet = !json[QString("incrementalTableConfig")].isNull() && m_incremental_table_config_isValid;

    m_partition_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_partition_expiration_days, json[QString("partitionExpirationDays")]);
    m_partition_expiration_days_isSet = !json[QString("partitionExpirationDays")].isNull() && m_partition_expiration_days_isValid;

    m_partition_expression_isValid = ::OpenAPI::fromJsonValue(m_partition_expression, json[QString("partitionExpression")]);
    m_partition_expression_isSet = !json[QString("partitionExpression")].isNull() && m_partition_expression_isValid;

    m_post_operations_isValid = ::OpenAPI::fromJsonValue(m_post_operations, json[QString("postOperations")]);
    m_post_operations_isSet = !json[QString("postOperations")].isNull() && m_post_operations_isValid;

    m_pre_operations_isValid = ::OpenAPI::fromJsonValue(m_pre_operations, json[QString("preOperations")]);
    m_pre_operations_isSet = !json[QString("preOperations")].isNull() && m_pre_operations_isValid;

    m_relation_descriptor_isValid = ::OpenAPI::fromJsonValue(m_relation_descriptor, json[QString("relationDescriptor")]);
    m_relation_descriptor_isSet = !json[QString("relationDescriptor")].isNull() && m_relation_descriptor_isValid;

    m_relation_type_isValid = ::OpenAPI::fromJsonValue(m_relation_type, json[QString("relationType")]);
    m_relation_type_isSet = !json[QString("relationType")].isNull() && m_relation_type_isValid;

    m_require_partition_filter_isValid = ::OpenAPI::fromJsonValue(m_require_partition_filter, json[QString("requirePartitionFilter")]);
    m_require_partition_filter_isSet = !json[QString("requirePartitionFilter")].isNull() && m_require_partition_filter_isValid;

    m_select_query_isValid = ::OpenAPI::fromJsonValue(m_select_query, json[QString("selectQuery")]);
    m_select_query_isSet = !json[QString("selectQuery")].isNull() && m_select_query_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_options.size() > 0) {
        obj.insert(QString("additionalOptions"), ::OpenAPI::toJsonValue(m_additional_options));
    }
    if (m_cluster_expressions.size() > 0) {
        obj.insert(QString("clusterExpressions"), ::OpenAPI::toJsonValue(m_cluster_expressions));
    }
    if (m_dependency_targets.size() > 0) {
        obj.insert(QString("dependencyTargets"), ::OpenAPI::toJsonValue(m_dependency_targets));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_incremental_table_config.isSet()) {
        obj.insert(QString("incrementalTableConfig"), ::OpenAPI::toJsonValue(m_incremental_table_config));
    }
    if (m_partition_expiration_days_isSet) {
        obj.insert(QString("partitionExpirationDays"), ::OpenAPI::toJsonValue(m_partition_expiration_days));
    }
    if (m_partition_expression_isSet) {
        obj.insert(QString("partitionExpression"), ::OpenAPI::toJsonValue(m_partition_expression));
    }
    if (m_post_operations.size() > 0) {
        obj.insert(QString("postOperations"), ::OpenAPI::toJsonValue(m_post_operations));
    }
    if (m_pre_operations.size() > 0) {
        obj.insert(QString("preOperations"), ::OpenAPI::toJsonValue(m_pre_operations));
    }
    if (m_relation_descriptor.isSet()) {
        obj.insert(QString("relationDescriptor"), ::OpenAPI::toJsonValue(m_relation_descriptor));
    }
    if (m_relation_type_isSet) {
        obj.insert(QString("relationType"), ::OpenAPI::toJsonValue(m_relation_type));
    }
    if (m_require_partition_filter_isSet) {
        obj.insert(QString("requirePartitionFilter"), ::OpenAPI::toJsonValue(m_require_partition_filter));
    }
    if (m_select_query_isSet) {
        obj.insert(QString("selectQuery"), ::OpenAPI::toJsonValue(m_select_query));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QMap<QString, QString> OAIRelation::getAdditionalOptions() const {
    return m_additional_options;
}
void OAIRelation::setAdditionalOptions(const QMap<QString, QString> &additional_options) {
    m_additional_options = additional_options;
    m_additional_options_isSet = true;
}

bool OAIRelation::is_additional_options_Set() const{
    return m_additional_options_isSet;
}

bool OAIRelation::is_additional_options_Valid() const{
    return m_additional_options_isValid;
}

QList<QString> OAIRelation::getClusterExpressions() const {
    return m_cluster_expressions;
}
void OAIRelation::setClusterExpressions(const QList<QString> &cluster_expressions) {
    m_cluster_expressions = cluster_expressions;
    m_cluster_expressions_isSet = true;
}

bool OAIRelation::is_cluster_expressions_Set() const{
    return m_cluster_expressions_isSet;
}

bool OAIRelation::is_cluster_expressions_Valid() const{
    return m_cluster_expressions_isValid;
}

QList<OAITarget> OAIRelation::getDependencyTargets() const {
    return m_dependency_targets;
}
void OAIRelation::setDependencyTargets(const QList<OAITarget> &dependency_targets) {
    m_dependency_targets = dependency_targets;
    m_dependency_targets_isSet = true;
}

bool OAIRelation::is_dependency_targets_Set() const{
    return m_dependency_targets_isSet;
}

bool OAIRelation::is_dependency_targets_Valid() const{
    return m_dependency_targets_isValid;
}

bool OAIRelation::isDisabled() const {
    return m_disabled;
}
void OAIRelation::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIRelation::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIRelation::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAIIncrementalTableConfig OAIRelation::getIncrementalTableConfig() const {
    return m_incremental_table_config;
}
void OAIRelation::setIncrementalTableConfig(const OAIIncrementalTableConfig &incremental_table_config) {
    m_incremental_table_config = incremental_table_config;
    m_incremental_table_config_isSet = true;
}

bool OAIRelation::is_incremental_table_config_Set() const{
    return m_incremental_table_config_isSet;
}

bool OAIRelation::is_incremental_table_config_Valid() const{
    return m_incremental_table_config_isValid;
}

qint32 OAIRelation::getPartitionExpirationDays() const {
    return m_partition_expiration_days;
}
void OAIRelation::setPartitionExpirationDays(const qint32 &partition_expiration_days) {
    m_partition_expiration_days = partition_expiration_days;
    m_partition_expiration_days_isSet = true;
}

bool OAIRelation::is_partition_expiration_days_Set() const{
    return m_partition_expiration_days_isSet;
}

bool OAIRelation::is_partition_expiration_days_Valid() const{
    return m_partition_expiration_days_isValid;
}

QString OAIRelation::getPartitionExpression() const {
    return m_partition_expression;
}
void OAIRelation::setPartitionExpression(const QString &partition_expression) {
    m_partition_expression = partition_expression;
    m_partition_expression_isSet = true;
}

bool OAIRelation::is_partition_expression_Set() const{
    return m_partition_expression_isSet;
}

bool OAIRelation::is_partition_expression_Valid() const{
    return m_partition_expression_isValid;
}

QList<QString> OAIRelation::getPostOperations() const {
    return m_post_operations;
}
void OAIRelation::setPostOperations(const QList<QString> &post_operations) {
    m_post_operations = post_operations;
    m_post_operations_isSet = true;
}

bool OAIRelation::is_post_operations_Set() const{
    return m_post_operations_isSet;
}

bool OAIRelation::is_post_operations_Valid() const{
    return m_post_operations_isValid;
}

QList<QString> OAIRelation::getPreOperations() const {
    return m_pre_operations;
}
void OAIRelation::setPreOperations(const QList<QString> &pre_operations) {
    m_pre_operations = pre_operations;
    m_pre_operations_isSet = true;
}

bool OAIRelation::is_pre_operations_Set() const{
    return m_pre_operations_isSet;
}

bool OAIRelation::is_pre_operations_Valid() const{
    return m_pre_operations_isValid;
}

OAIRelationDescriptor OAIRelation::getRelationDescriptor() const {
    return m_relation_descriptor;
}
void OAIRelation::setRelationDescriptor(const OAIRelationDescriptor &relation_descriptor) {
    m_relation_descriptor = relation_descriptor;
    m_relation_descriptor_isSet = true;
}

bool OAIRelation::is_relation_descriptor_Set() const{
    return m_relation_descriptor_isSet;
}

bool OAIRelation::is_relation_descriptor_Valid() const{
    return m_relation_descriptor_isValid;
}

QString OAIRelation::getRelationType() const {
    return m_relation_type;
}
void OAIRelation::setRelationType(const QString &relation_type) {
    m_relation_type = relation_type;
    m_relation_type_isSet = true;
}

bool OAIRelation::is_relation_type_Set() const{
    return m_relation_type_isSet;
}

bool OAIRelation::is_relation_type_Valid() const{
    return m_relation_type_isValid;
}

bool OAIRelation::isRequirePartitionFilter() const {
    return m_require_partition_filter;
}
void OAIRelation::setRequirePartitionFilter(const bool &require_partition_filter) {
    m_require_partition_filter = require_partition_filter;
    m_require_partition_filter_isSet = true;
}

bool OAIRelation::is_require_partition_filter_Set() const{
    return m_require_partition_filter_isSet;
}

bool OAIRelation::is_require_partition_filter_Valid() const{
    return m_require_partition_filter_isValid;
}

QString OAIRelation::getSelectQuery() const {
    return m_select_query;
}
void OAIRelation::setSelectQuery(const QString &select_query) {
    m_select_query = select_query;
    m_select_query_isSet = true;
}

bool OAIRelation::is_select_query_Set() const{
    return m_select_query_isSet;
}

bool OAIRelation::is_select_query_Valid() const{
    return m_select_query_isValid;
}

QList<QString> OAIRelation::getTags() const {
    return m_tags;
}
void OAIRelation::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRelation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRelation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependency_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_table_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_partition_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
