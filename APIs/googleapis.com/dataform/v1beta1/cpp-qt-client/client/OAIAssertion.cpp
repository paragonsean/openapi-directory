/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssertion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssertion::OAIAssertion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssertion::OAIAssertion() {
    this->initializeModel();
}

OAIAssertion::~OAIAssertion() {}

void OAIAssertion::initializeModel() {

    m_dependency_targets_isSet = false;
    m_dependency_targets_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_parent_action_isSet = false;
    m_parent_action_isValid = false;

    m_relation_descriptor_isSet = false;
    m_relation_descriptor_isValid = false;

    m_select_query_isSet = false;
    m_select_query_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAssertion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssertion::fromJsonObject(QJsonObject json) {

    m_dependency_targets_isValid = ::OpenAPI::fromJsonValue(m_dependency_targets, json[QString("dependencyTargets")]);
    m_dependency_targets_isSet = !json[QString("dependencyTargets")].isNull() && m_dependency_targets_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_parent_action_isValid = ::OpenAPI::fromJsonValue(m_parent_action, json[QString("parentAction")]);
    m_parent_action_isSet = !json[QString("parentAction")].isNull() && m_parent_action_isValid;

    m_relation_descriptor_isValid = ::OpenAPI::fromJsonValue(m_relation_descriptor, json[QString("relationDescriptor")]);
    m_relation_descriptor_isSet = !json[QString("relationDescriptor")].isNull() && m_relation_descriptor_isValid;

    m_select_query_isValid = ::OpenAPI::fromJsonValue(m_select_query, json[QString("selectQuery")]);
    m_select_query_isSet = !json[QString("selectQuery")].isNull() && m_select_query_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAssertion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssertion::asJsonObject() const {
    QJsonObject obj;
    if (m_dependency_targets.size() > 0) {
        obj.insert(QString("dependencyTargets"), ::OpenAPI::toJsonValue(m_dependency_targets));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_parent_action.isSet()) {
        obj.insert(QString("parentAction"), ::OpenAPI::toJsonValue(m_parent_action));
    }
    if (m_relation_descriptor.isSet()) {
        obj.insert(QString("relationDescriptor"), ::OpenAPI::toJsonValue(m_relation_descriptor));
    }
    if (m_select_query_isSet) {
        obj.insert(QString("selectQuery"), ::OpenAPI::toJsonValue(m_select_query));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAITarget> OAIAssertion::getDependencyTargets() const {
    return m_dependency_targets;
}
void OAIAssertion::setDependencyTargets(const QList<OAITarget> &dependency_targets) {
    m_dependency_targets = dependency_targets;
    m_dependency_targets_isSet = true;
}

bool OAIAssertion::is_dependency_targets_Set() const{
    return m_dependency_targets_isSet;
}

bool OAIAssertion::is_dependency_targets_Valid() const{
    return m_dependency_targets_isValid;
}

bool OAIAssertion::isDisabled() const {
    return m_disabled;
}
void OAIAssertion::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAssertion::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAssertion::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAITarget OAIAssertion::getParentAction() const {
    return m_parent_action;
}
void OAIAssertion::setParentAction(const OAITarget &parent_action) {
    m_parent_action = parent_action;
    m_parent_action_isSet = true;
}

bool OAIAssertion::is_parent_action_Set() const{
    return m_parent_action_isSet;
}

bool OAIAssertion::is_parent_action_Valid() const{
    return m_parent_action_isValid;
}

OAIRelationDescriptor OAIAssertion::getRelationDescriptor() const {
    return m_relation_descriptor;
}
void OAIAssertion::setRelationDescriptor(const OAIRelationDescriptor &relation_descriptor) {
    m_relation_descriptor = relation_descriptor;
    m_relation_descriptor_isSet = true;
}

bool OAIAssertion::is_relation_descriptor_Set() const{
    return m_relation_descriptor_isSet;
}

bool OAIAssertion::is_relation_descriptor_Valid() const{
    return m_relation_descriptor_isValid;
}

QString OAIAssertion::getSelectQuery() const {
    return m_select_query;
}
void OAIAssertion::setSelectQuery(const QString &select_query) {
    m_select_query = select_query;
    m_select_query_isSet = true;
}

bool OAIAssertion::is_select_query_Set() const{
    return m_select_query_isSet;
}

bool OAIAssertion::is_select_query_Valid() const{
    return m_select_query_isValid;
}

QList<QString> OAIAssertion::getTags() const {
    return m_tags;
}
void OAIAssertion::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAssertion::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAssertion::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAssertion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependency_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssertion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
