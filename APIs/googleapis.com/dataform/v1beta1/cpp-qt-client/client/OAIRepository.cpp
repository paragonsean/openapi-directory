/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository::OAIRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository::OAIRepository() {
    this->initializeModel();
}

OAIRepository::~OAIRepository() {}

void OAIRepository::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_git_remote_settings_isSet = false;
    m_git_remote_settings_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_npmrc_environment_variables_secret_version_isSet = false;
    m_npmrc_environment_variables_secret_version_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_set_authenticated_user_admin_isSet = false;
    m_set_authenticated_user_admin_isValid = false;

    m_workspace_compilation_overrides_isSet = false;
    m_workspace_compilation_overrides_isValid = false;
}

void OAIRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_git_remote_settings_isValid = ::OpenAPI::fromJsonValue(m_git_remote_settings, json[QString("gitRemoteSettings")]);
    m_git_remote_settings_isSet = !json[QString("gitRemoteSettings")].isNull() && m_git_remote_settings_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_npmrc_environment_variables_secret_version_isValid = ::OpenAPI::fromJsonValue(m_npmrc_environment_variables_secret_version, json[QString("npmrcEnvironmentVariablesSecretVersion")]);
    m_npmrc_environment_variables_secret_version_isSet = !json[QString("npmrcEnvironmentVariablesSecretVersion")].isNull() && m_npmrc_environment_variables_secret_version_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_set_authenticated_user_admin_isValid = ::OpenAPI::fromJsonValue(m_set_authenticated_user_admin, json[QString("setAuthenticatedUserAdmin")]);
    m_set_authenticated_user_admin_isSet = !json[QString("setAuthenticatedUserAdmin")].isNull() && m_set_authenticated_user_admin_isValid;

    m_workspace_compilation_overrides_isValid = ::OpenAPI::fromJsonValue(m_workspace_compilation_overrides, json[QString("workspaceCompilationOverrides")]);
    m_workspace_compilation_overrides_isSet = !json[QString("workspaceCompilationOverrides")].isNull() && m_workspace_compilation_overrides_isValid;
}

QString OAIRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_git_remote_settings.isSet()) {
        obj.insert(QString("gitRemoteSettings"), ::OpenAPI::toJsonValue(m_git_remote_settings));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_npmrc_environment_variables_secret_version_isSet) {
        obj.insert(QString("npmrcEnvironmentVariablesSecretVersion"), ::OpenAPI::toJsonValue(m_npmrc_environment_variables_secret_version));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_set_authenticated_user_admin_isSet) {
        obj.insert(QString("setAuthenticatedUserAdmin"), ::OpenAPI::toJsonValue(m_set_authenticated_user_admin));
    }
    if (m_workspace_compilation_overrides.isSet()) {
        obj.insert(QString("workspaceCompilationOverrides"), ::OpenAPI::toJsonValue(m_workspace_compilation_overrides));
    }
    return obj;
}

QString OAIRepository::getCreateTime() const {
    return m_create_time;
}
void OAIRepository::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRepository::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRepository::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRepository::getDisplayName() const {
    return m_display_name;
}
void OAIRepository::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRepository::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRepository::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGitRemoteSettings OAIRepository::getGitRemoteSettings() const {
    return m_git_remote_settings;
}
void OAIRepository::setGitRemoteSettings(const OAIGitRemoteSettings &git_remote_settings) {
    m_git_remote_settings = git_remote_settings;
    m_git_remote_settings_isSet = true;
}

bool OAIRepository::is_git_remote_settings_Set() const{
    return m_git_remote_settings_isSet;
}

bool OAIRepository::is_git_remote_settings_Valid() const{
    return m_git_remote_settings_isValid;
}

QMap<QString, QString> OAIRepository::getLabels() const {
    return m_labels;
}
void OAIRepository::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRepository::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRepository::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIRepository::getName() const {
    return m_name;
}
void OAIRepository::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepository::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepository::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepository::getNpmrcEnvironmentVariablesSecretVersion() const {
    return m_npmrc_environment_variables_secret_version;
}
void OAIRepository::setNpmrcEnvironmentVariablesSecretVersion(const QString &npmrc_environment_variables_secret_version) {
    m_npmrc_environment_variables_secret_version = npmrc_environment_variables_secret_version;
    m_npmrc_environment_variables_secret_version_isSet = true;
}

bool OAIRepository::is_npmrc_environment_variables_secret_version_Set() const{
    return m_npmrc_environment_variables_secret_version_isSet;
}

bool OAIRepository::is_npmrc_environment_variables_secret_version_Valid() const{
    return m_npmrc_environment_variables_secret_version_isValid;
}

QString OAIRepository::getServiceAccount() const {
    return m_service_account;
}
void OAIRepository::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIRepository::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIRepository::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIRepository::isSetAuthenticatedUserAdmin() const {
    return m_set_authenticated_user_admin;
}
void OAIRepository::setSetAuthenticatedUserAdmin(const bool &set_authenticated_user_admin) {
    m_set_authenticated_user_admin = set_authenticated_user_admin;
    m_set_authenticated_user_admin_isSet = true;
}

bool OAIRepository::is_set_authenticated_user_admin_Set() const{
    return m_set_authenticated_user_admin_isSet;
}

bool OAIRepository::is_set_authenticated_user_admin_Valid() const{
    return m_set_authenticated_user_admin_isValid;
}

OAIWorkspaceCompilationOverrides OAIRepository::getWorkspaceCompilationOverrides() const {
    return m_workspace_compilation_overrides;
}
void OAIRepository::setWorkspaceCompilationOverrides(const OAIWorkspaceCompilationOverrides &workspace_compilation_overrides) {
    m_workspace_compilation_overrides = workspace_compilation_overrides;
    m_workspace_compilation_overrides_isSet = true;
}

bool OAIRepository::is_workspace_compilation_overrides_Set() const{
    return m_workspace_compilation_overrides_isSet;
}

bool OAIRepository::is_workspace_compilation_overrides_Valid() const{
    return m_workspace_compilation_overrides_isValid;
}

bool OAIRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_remote_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_npmrc_environment_variables_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_authenticated_user_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_compilation_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
