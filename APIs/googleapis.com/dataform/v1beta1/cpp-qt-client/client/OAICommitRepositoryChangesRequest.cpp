/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitRepositoryChangesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitRepositoryChangesRequest::OAICommitRepositoryChangesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitRepositoryChangesRequest::OAICommitRepositoryChangesRequest() {
    this->initializeModel();
}

OAICommitRepositoryChangesRequest::~OAICommitRepositoryChangesRequest() {}

void OAICommitRepositoryChangesRequest::initializeModel() {

    m_commit_metadata_isSet = false;
    m_commit_metadata_isValid = false;

    m_file_operations_isSet = false;
    m_file_operations_isValid = false;

    m_required_head_commit_sha_isSet = false;
    m_required_head_commit_sha_isValid = false;
}

void OAICommitRepositoryChangesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitRepositoryChangesRequest::fromJsonObject(QJsonObject json) {

    m_commit_metadata_isValid = ::OpenAPI::fromJsonValue(m_commit_metadata, json[QString("commitMetadata")]);
    m_commit_metadata_isSet = !json[QString("commitMetadata")].isNull() && m_commit_metadata_isValid;

    m_file_operations_isValid = ::OpenAPI::fromJsonValue(m_file_operations, json[QString("fileOperations")]);
    m_file_operations_isSet = !json[QString("fileOperations")].isNull() && m_file_operations_isValid;

    m_required_head_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_required_head_commit_sha, json[QString("requiredHeadCommitSha")]);
    m_required_head_commit_sha_isSet = !json[QString("requiredHeadCommitSha")].isNull() && m_required_head_commit_sha_isValid;
}

QString OAICommitRepositoryChangesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitRepositoryChangesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_metadata.isSet()) {
        obj.insert(QString("commitMetadata"), ::OpenAPI::toJsonValue(m_commit_metadata));
    }
    if (m_file_operations.size() > 0) {
        obj.insert(QString("fileOperations"), ::OpenAPI::toJsonValue(m_file_operations));
    }
    if (m_required_head_commit_sha_isSet) {
        obj.insert(QString("requiredHeadCommitSha"), ::OpenAPI::toJsonValue(m_required_head_commit_sha));
    }
    return obj;
}

OAICommitMetadata OAICommitRepositoryChangesRequest::getCommitMetadata() const {
    return m_commit_metadata;
}
void OAICommitRepositoryChangesRequest::setCommitMetadata(const OAICommitMetadata &commit_metadata) {
    m_commit_metadata = commit_metadata;
    m_commit_metadata_isSet = true;
}

bool OAICommitRepositoryChangesRequest::is_commit_metadata_Set() const{
    return m_commit_metadata_isSet;
}

bool OAICommitRepositoryChangesRequest::is_commit_metadata_Valid() const{
    return m_commit_metadata_isValid;
}

QMap<QString, OAIFileOperation> OAICommitRepositoryChangesRequest::getFileOperations() const {
    return m_file_operations;
}
void OAICommitRepositoryChangesRequest::setFileOperations(const QMap<QString, OAIFileOperation> &file_operations) {
    m_file_operations = file_operations;
    m_file_operations_isSet = true;
}

bool OAICommitRepositoryChangesRequest::is_file_operations_Set() const{
    return m_file_operations_isSet;
}

bool OAICommitRepositoryChangesRequest::is_file_operations_Valid() const{
    return m_file_operations_isValid;
}

QString OAICommitRepositoryChangesRequest::getRequiredHeadCommitSha() const {
    return m_required_head_commit_sha;
}
void OAICommitRepositoryChangesRequest::setRequiredHeadCommitSha(const QString &required_head_commit_sha) {
    m_required_head_commit_sha = required_head_commit_sha;
    m_required_head_commit_sha_isSet = true;
}

bool OAICommitRepositoryChangesRequest::is_required_head_commit_sha_Set() const{
    return m_required_head_commit_sha_isSet;
}

bool OAICommitRepositoryChangesRequest::is_required_head_commit_sha_Valid() const{
    return m_required_head_commit_sha_isValid;
}

bool OAICommitRepositoryChangesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_head_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitRepositoryChangesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
