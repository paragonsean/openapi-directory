/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeCompilationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeCompilationConfig::OAICodeCompilationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeCompilationConfig::OAICodeCompilationConfig() {
    this->initializeModel();
}

OAICodeCompilationConfig::~OAICodeCompilationConfig() {}

void OAICodeCompilationConfig::initializeModel() {

    m_assertion_schema_isSet = false;
    m_assertion_schema_isValid = false;

    m_database_suffix_isSet = false;
    m_database_suffix_isValid = false;

    m_default_database_isSet = false;
    m_default_database_isValid = false;

    m_default_location_isSet = false;
    m_default_location_isValid = false;

    m_default_schema_isSet = false;
    m_default_schema_isValid = false;

    m_schema_suffix_isSet = false;
    m_schema_suffix_isValid = false;

    m_table_prefix_isSet = false;
    m_table_prefix_isValid = false;

    m_vars_isSet = false;
    m_vars_isValid = false;
}

void OAICodeCompilationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeCompilationConfig::fromJsonObject(QJsonObject json) {

    m_assertion_schema_isValid = ::OpenAPI::fromJsonValue(m_assertion_schema, json[QString("assertionSchema")]);
    m_assertion_schema_isSet = !json[QString("assertionSchema")].isNull() && m_assertion_schema_isValid;

    m_database_suffix_isValid = ::OpenAPI::fromJsonValue(m_database_suffix, json[QString("databaseSuffix")]);
    m_database_suffix_isSet = !json[QString("databaseSuffix")].isNull() && m_database_suffix_isValid;

    m_default_database_isValid = ::OpenAPI::fromJsonValue(m_default_database, json[QString("defaultDatabase")]);
    m_default_database_isSet = !json[QString("defaultDatabase")].isNull() && m_default_database_isValid;

    m_default_location_isValid = ::OpenAPI::fromJsonValue(m_default_location, json[QString("defaultLocation")]);
    m_default_location_isSet = !json[QString("defaultLocation")].isNull() && m_default_location_isValid;

    m_default_schema_isValid = ::OpenAPI::fromJsonValue(m_default_schema, json[QString("defaultSchema")]);
    m_default_schema_isSet = !json[QString("defaultSchema")].isNull() && m_default_schema_isValid;

    m_schema_suffix_isValid = ::OpenAPI::fromJsonValue(m_schema_suffix, json[QString("schemaSuffix")]);
    m_schema_suffix_isSet = !json[QString("schemaSuffix")].isNull() && m_schema_suffix_isValid;

    m_table_prefix_isValid = ::OpenAPI::fromJsonValue(m_table_prefix, json[QString("tablePrefix")]);
    m_table_prefix_isSet = !json[QString("tablePrefix")].isNull() && m_table_prefix_isValid;

    m_vars_isValid = ::OpenAPI::fromJsonValue(m_vars, json[QString("vars")]);
    m_vars_isSet = !json[QString("vars")].isNull() && m_vars_isValid;
}

QString OAICodeCompilationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeCompilationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_assertion_schema_isSet) {
        obj.insert(QString("assertionSchema"), ::OpenAPI::toJsonValue(m_assertion_schema));
    }
    if (m_database_suffix_isSet) {
        obj.insert(QString("databaseSuffix"), ::OpenAPI::toJsonValue(m_database_suffix));
    }
    if (m_default_database_isSet) {
        obj.insert(QString("defaultDatabase"), ::OpenAPI::toJsonValue(m_default_database));
    }
    if (m_default_location_isSet) {
        obj.insert(QString("defaultLocation"), ::OpenAPI::toJsonValue(m_default_location));
    }
    if (m_default_schema_isSet) {
        obj.insert(QString("defaultSchema"), ::OpenAPI::toJsonValue(m_default_schema));
    }
    if (m_schema_suffix_isSet) {
        obj.insert(QString("schemaSuffix"), ::OpenAPI::toJsonValue(m_schema_suffix));
    }
    if (m_table_prefix_isSet) {
        obj.insert(QString("tablePrefix"), ::OpenAPI::toJsonValue(m_table_prefix));
    }
    if (m_vars.size() > 0) {
        obj.insert(QString("vars"), ::OpenAPI::toJsonValue(m_vars));
    }
    return obj;
}

QString OAICodeCompilationConfig::getAssertionSchema() const {
    return m_assertion_schema;
}
void OAICodeCompilationConfig::setAssertionSchema(const QString &assertion_schema) {
    m_assertion_schema = assertion_schema;
    m_assertion_schema_isSet = true;
}

bool OAICodeCompilationConfig::is_assertion_schema_Set() const{
    return m_assertion_schema_isSet;
}

bool OAICodeCompilationConfig::is_assertion_schema_Valid() const{
    return m_assertion_schema_isValid;
}

QString OAICodeCompilationConfig::getDatabaseSuffix() const {
    return m_database_suffix;
}
void OAICodeCompilationConfig::setDatabaseSuffix(const QString &database_suffix) {
    m_database_suffix = database_suffix;
    m_database_suffix_isSet = true;
}

bool OAICodeCompilationConfig::is_database_suffix_Set() const{
    return m_database_suffix_isSet;
}

bool OAICodeCompilationConfig::is_database_suffix_Valid() const{
    return m_database_suffix_isValid;
}

QString OAICodeCompilationConfig::getDefaultDatabase() const {
    return m_default_database;
}
void OAICodeCompilationConfig::setDefaultDatabase(const QString &default_database) {
    m_default_database = default_database;
    m_default_database_isSet = true;
}

bool OAICodeCompilationConfig::is_default_database_Set() const{
    return m_default_database_isSet;
}

bool OAICodeCompilationConfig::is_default_database_Valid() const{
    return m_default_database_isValid;
}

QString OAICodeCompilationConfig::getDefaultLocation() const {
    return m_default_location;
}
void OAICodeCompilationConfig::setDefaultLocation(const QString &default_location) {
    m_default_location = default_location;
    m_default_location_isSet = true;
}

bool OAICodeCompilationConfig::is_default_location_Set() const{
    return m_default_location_isSet;
}

bool OAICodeCompilationConfig::is_default_location_Valid() const{
    return m_default_location_isValid;
}

QString OAICodeCompilationConfig::getDefaultSchema() const {
    return m_default_schema;
}
void OAICodeCompilationConfig::setDefaultSchema(const QString &default_schema) {
    m_default_schema = default_schema;
    m_default_schema_isSet = true;
}

bool OAICodeCompilationConfig::is_default_schema_Set() const{
    return m_default_schema_isSet;
}

bool OAICodeCompilationConfig::is_default_schema_Valid() const{
    return m_default_schema_isValid;
}

QString OAICodeCompilationConfig::getSchemaSuffix() const {
    return m_schema_suffix;
}
void OAICodeCompilationConfig::setSchemaSuffix(const QString &schema_suffix) {
    m_schema_suffix = schema_suffix;
    m_schema_suffix_isSet = true;
}

bool OAICodeCompilationConfig::is_schema_suffix_Set() const{
    return m_schema_suffix_isSet;
}

bool OAICodeCompilationConfig::is_schema_suffix_Valid() const{
    return m_schema_suffix_isValid;
}

QString OAICodeCompilationConfig::getTablePrefix() const {
    return m_table_prefix;
}
void OAICodeCompilationConfig::setTablePrefix(const QString &table_prefix) {
    m_table_prefix = table_prefix;
    m_table_prefix_isSet = true;
}

bool OAICodeCompilationConfig::is_table_prefix_Set() const{
    return m_table_prefix_isSet;
}

bool OAICodeCompilationConfig::is_table_prefix_Valid() const{
    return m_table_prefix_isValid;
}

QMap<QString, QString> OAICodeCompilationConfig::getVars() const {
    return m_vars;
}
void OAICodeCompilationConfig::setVars(const QMap<QString, QString> &vars) {
    m_vars = vars;
    m_vars_isSet = true;
}

bool OAICodeCompilationConfig::is_vars_Set() const{
    return m_vars_isSet;
}

bool OAICodeCompilationConfig::is_vars_Valid() const{
    return m_vars_isValid;
}

bool OAICodeCompilationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assertion_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeCompilationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
