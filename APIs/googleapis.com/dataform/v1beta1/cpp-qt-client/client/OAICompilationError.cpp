/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompilationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompilationError::OAICompilationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompilationError::OAICompilationError() {
    this->initializeModel();
}

OAICompilationError::~OAICompilationError() {}

void OAICompilationError::initializeModel() {

    m_action_target_isSet = false;
    m_action_target_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_stack_isSet = false;
    m_stack_isValid = false;
}

void OAICompilationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompilationError::fromJsonObject(QJsonObject json) {

    m_action_target_isValid = ::OpenAPI::fromJsonValue(m_action_target, json[QString("actionTarget")]);
    m_action_target_isSet = !json[QString("actionTarget")].isNull() && m_action_target_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_stack_isValid = ::OpenAPI::fromJsonValue(m_stack, json[QString("stack")]);
    m_stack_isSet = !json[QString("stack")].isNull() && m_stack_isValid;
}

QString OAICompilationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompilationError::asJsonObject() const {
    QJsonObject obj;
    if (m_action_target.isSet()) {
        obj.insert(QString("actionTarget"), ::OpenAPI::toJsonValue(m_action_target));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_stack_isSet) {
        obj.insert(QString("stack"), ::OpenAPI::toJsonValue(m_stack));
    }
    return obj;
}

OAITarget OAICompilationError::getActionTarget() const {
    return m_action_target;
}
void OAICompilationError::setActionTarget(const OAITarget &action_target) {
    m_action_target = action_target;
    m_action_target_isSet = true;
}

bool OAICompilationError::is_action_target_Set() const{
    return m_action_target_isSet;
}

bool OAICompilationError::is_action_target_Valid() const{
    return m_action_target_isValid;
}

QString OAICompilationError::getMessage() const {
    return m_message;
}
void OAICompilationError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICompilationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAICompilationError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICompilationError::getPath() const {
    return m_path;
}
void OAICompilationError::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICompilationError::is_path_Set() const{
    return m_path_isSet;
}

bool OAICompilationError::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICompilationError::getStack() const {
    return m_stack;
}
void OAICompilationError::setStack(const QString &stack) {
    m_stack = stack;
    m_stack_isSet = true;
}

bool OAICompilationError::is_stack_Set() const{
    return m_stack_isSet;
}

bool OAICompilationError::is_stack_Valid() const{
    return m_stack_isValid;
}

bool OAICompilationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompilationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
