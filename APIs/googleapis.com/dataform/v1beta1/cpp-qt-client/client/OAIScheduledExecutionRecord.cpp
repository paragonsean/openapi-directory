/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledExecutionRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledExecutionRecord::OAIScheduledExecutionRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledExecutionRecord::OAIScheduledExecutionRecord() {
    this->initializeModel();
}

OAIScheduledExecutionRecord::~OAIScheduledExecutionRecord() {}

void OAIScheduledExecutionRecord::initializeModel() {

    m_error_status_isSet = false;
    m_error_status_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;

    m_workflow_invocation_isSet = false;
    m_workflow_invocation_isValid = false;
}

void OAIScheduledExecutionRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledExecutionRecord::fromJsonObject(QJsonObject json) {

    m_error_status_isValid = ::OpenAPI::fromJsonValue(m_error_status, json[QString("errorStatus")]);
    m_error_status_isSet = !json[QString("errorStatus")].isNull() && m_error_status_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("executionTime")]);
    m_execution_time_isSet = !json[QString("executionTime")].isNull() && m_execution_time_isValid;

    m_workflow_invocation_isValid = ::OpenAPI::fromJsonValue(m_workflow_invocation, json[QString("workflowInvocation")]);
    m_workflow_invocation_isSet = !json[QString("workflowInvocation")].isNull() && m_workflow_invocation_isValid;
}

QString OAIScheduledExecutionRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledExecutionRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_error_status.isSet()) {
        obj.insert(QString("errorStatus"), ::OpenAPI::toJsonValue(m_error_status));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("executionTime"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    if (m_workflow_invocation_isSet) {
        obj.insert(QString("workflowInvocation"), ::OpenAPI::toJsonValue(m_workflow_invocation));
    }
    return obj;
}

OAIStatus OAIScheduledExecutionRecord::getErrorStatus() const {
    return m_error_status;
}
void OAIScheduledExecutionRecord::setErrorStatus(const OAIStatus &error_status) {
    m_error_status = error_status;
    m_error_status_isSet = true;
}

bool OAIScheduledExecutionRecord::is_error_status_Set() const{
    return m_error_status_isSet;
}

bool OAIScheduledExecutionRecord::is_error_status_Valid() const{
    return m_error_status_isValid;
}

QString OAIScheduledExecutionRecord::getExecutionTime() const {
    return m_execution_time;
}
void OAIScheduledExecutionRecord::setExecutionTime(const QString &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAIScheduledExecutionRecord::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAIScheduledExecutionRecord::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

QString OAIScheduledExecutionRecord::getWorkflowInvocation() const {
    return m_workflow_invocation;
}
void OAIScheduledExecutionRecord::setWorkflowInvocation(const QString &workflow_invocation) {
    m_workflow_invocation = workflow_invocation;
    m_workflow_invocation_isSet = true;
}

bool OAIScheduledExecutionRecord::is_workflow_invocation_Set() const{
    return m_workflow_invocation_isSet;
}

bool OAIScheduledExecutionRecord::is_workflow_invocation_Valid() const{
    return m_workflow_invocation_isValid;
}

bool OAIScheduledExecutionRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_invocation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledExecutionRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
