/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperations::OAIOperations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperations::OAIOperations() {
    this->initializeModel();
}

OAIOperations::~OAIOperations() {}

void OAIOperations::initializeModel() {

    m_dependency_targets_isSet = false;
    m_dependency_targets_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_has_output_isSet = false;
    m_has_output_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_relation_descriptor_isSet = false;
    m_relation_descriptor_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIOperations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperations::fromJsonObject(QJsonObject json) {

    m_dependency_targets_isValid = ::OpenAPI::fromJsonValue(m_dependency_targets, json[QString("dependencyTargets")]);
    m_dependency_targets_isSet = !json[QString("dependencyTargets")].isNull() && m_dependency_targets_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_has_output_isValid = ::OpenAPI::fromJsonValue(m_has_output, json[QString("hasOutput")]);
    m_has_output_isSet = !json[QString("hasOutput")].isNull() && m_has_output_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_relation_descriptor_isValid = ::OpenAPI::fromJsonValue(m_relation_descriptor, json[QString("relationDescriptor")]);
    m_relation_descriptor_isSet = !json[QString("relationDescriptor")].isNull() && m_relation_descriptor_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIOperations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperations::asJsonObject() const {
    QJsonObject obj;
    if (m_dependency_targets.size() > 0) {
        obj.insert(QString("dependencyTargets"), ::OpenAPI::toJsonValue(m_dependency_targets));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_has_output_isSet) {
        obj.insert(QString("hasOutput"), ::OpenAPI::toJsonValue(m_has_output));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_relation_descriptor.isSet()) {
        obj.insert(QString("relationDescriptor"), ::OpenAPI::toJsonValue(m_relation_descriptor));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAITarget> OAIOperations::getDependencyTargets() const {
    return m_dependency_targets;
}
void OAIOperations::setDependencyTargets(const QList<OAITarget> &dependency_targets) {
    m_dependency_targets = dependency_targets;
    m_dependency_targets_isSet = true;
}

bool OAIOperations::is_dependency_targets_Set() const{
    return m_dependency_targets_isSet;
}

bool OAIOperations::is_dependency_targets_Valid() const{
    return m_dependency_targets_isValid;
}

bool OAIOperations::isDisabled() const {
    return m_disabled;
}
void OAIOperations::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIOperations::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIOperations::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIOperations::isHasOutput() const {
    return m_has_output;
}
void OAIOperations::setHasOutput(const bool &has_output) {
    m_has_output = has_output;
    m_has_output_isSet = true;
}

bool OAIOperations::is_has_output_Set() const{
    return m_has_output_isSet;
}

bool OAIOperations::is_has_output_Valid() const{
    return m_has_output_isValid;
}

QList<QString> OAIOperations::getQueries() const {
    return m_queries;
}
void OAIOperations::setQueries(const QList<QString> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIOperations::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIOperations::is_queries_Valid() const{
    return m_queries_isValid;
}

OAIRelationDescriptor OAIOperations::getRelationDescriptor() const {
    return m_relation_descriptor;
}
void OAIOperations::setRelationDescriptor(const OAIRelationDescriptor &relation_descriptor) {
    m_relation_descriptor = relation_descriptor;
    m_relation_descriptor_isSet = true;
}

bool OAIOperations::is_relation_descriptor_Set() const{
    return m_relation_descriptor_isSet;
}

bool OAIOperations::is_relation_descriptor_Valid() const{
    return m_relation_descriptor_isValid;
}

QList<QString> OAIOperations::getTags() const {
    return m_tags;
}
void OAIOperations::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIOperations::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIOperations::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIOperations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependency_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
