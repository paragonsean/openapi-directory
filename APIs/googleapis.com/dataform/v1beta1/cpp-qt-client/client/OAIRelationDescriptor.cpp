/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationDescriptor::OAIRelationDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationDescriptor::OAIRelationDescriptor() {
    this->initializeModel();
}

OAIRelationDescriptor::~OAIRelationDescriptor() {}

void OAIRelationDescriptor::initializeModel() {

    m_bigquery_labels_isSet = false;
    m_bigquery_labels_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIRelationDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationDescriptor::fromJsonObject(QJsonObject json) {

    m_bigquery_labels_isValid = ::OpenAPI::fromJsonValue(m_bigquery_labels, json[QString("bigqueryLabels")]);
    m_bigquery_labels_isSet = !json[QString("bigqueryLabels")].isNull() && m_bigquery_labels_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIRelationDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_labels.size() > 0) {
        obj.insert(QString("bigqueryLabels"), ::OpenAPI::toJsonValue(m_bigquery_labels));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QMap<QString, QString> OAIRelationDescriptor::getBigqueryLabels() const {
    return m_bigquery_labels;
}
void OAIRelationDescriptor::setBigqueryLabels(const QMap<QString, QString> &bigquery_labels) {
    m_bigquery_labels = bigquery_labels;
    m_bigquery_labels_isSet = true;
}

bool OAIRelationDescriptor::is_bigquery_labels_Set() const{
    return m_bigquery_labels_isSet;
}

bool OAIRelationDescriptor::is_bigquery_labels_Valid() const{
    return m_bigquery_labels_isValid;
}

QList<OAIColumnDescriptor> OAIRelationDescriptor::getColumns() const {
    return m_columns;
}
void OAIRelationDescriptor::setColumns(const QList<OAIColumnDescriptor> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIRelationDescriptor::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIRelationDescriptor::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIRelationDescriptor::getDescription() const {
    return m_description;
}
void OAIRelationDescriptor::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRelationDescriptor::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRelationDescriptor::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRelationDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
