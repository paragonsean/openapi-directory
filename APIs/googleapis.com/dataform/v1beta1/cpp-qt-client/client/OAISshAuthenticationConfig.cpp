/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISshAuthenticationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISshAuthenticationConfig::OAISshAuthenticationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISshAuthenticationConfig::OAISshAuthenticationConfig() {
    this->initializeModel();
}

OAISshAuthenticationConfig::~OAISshAuthenticationConfig() {}

void OAISshAuthenticationConfig::initializeModel() {

    m_host_public_key_isSet = false;
    m_host_public_key_isValid = false;

    m_user_private_key_secret_version_isSet = false;
    m_user_private_key_secret_version_isValid = false;
}

void OAISshAuthenticationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISshAuthenticationConfig::fromJsonObject(QJsonObject json) {

    m_host_public_key_isValid = ::OpenAPI::fromJsonValue(m_host_public_key, json[QString("hostPublicKey")]);
    m_host_public_key_isSet = !json[QString("hostPublicKey")].isNull() && m_host_public_key_isValid;

    m_user_private_key_secret_version_isValid = ::OpenAPI::fromJsonValue(m_user_private_key_secret_version, json[QString("userPrivateKeySecretVersion")]);
    m_user_private_key_secret_version_isSet = !json[QString("userPrivateKeySecretVersion")].isNull() && m_user_private_key_secret_version_isValid;
}

QString OAISshAuthenticationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISshAuthenticationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_host_public_key_isSet) {
        obj.insert(QString("hostPublicKey"), ::OpenAPI::toJsonValue(m_host_public_key));
    }
    if (m_user_private_key_secret_version_isSet) {
        obj.insert(QString("userPrivateKeySecretVersion"), ::OpenAPI::toJsonValue(m_user_private_key_secret_version));
    }
    return obj;
}

QString OAISshAuthenticationConfig::getHostPublicKey() const {
    return m_host_public_key;
}
void OAISshAuthenticationConfig::setHostPublicKey(const QString &host_public_key) {
    m_host_public_key = host_public_key;
    m_host_public_key_isSet = true;
}

bool OAISshAuthenticationConfig::is_host_public_key_Set() const{
    return m_host_public_key_isSet;
}

bool OAISshAuthenticationConfig::is_host_public_key_Valid() const{
    return m_host_public_key_isValid;
}

QString OAISshAuthenticationConfig::getUserPrivateKeySecretVersion() const {
    return m_user_private_key_secret_version;
}
void OAISshAuthenticationConfig::setUserPrivateKeySecretVersion(const QString &user_private_key_secret_version) {
    m_user_private_key_secret_version = user_private_key_secret_version;
    m_user_private_key_secret_version_isSet = true;
}

bool OAISshAuthenticationConfig::is_user_private_key_secret_version_Set() const{
    return m_user_private_key_secret_version_isSet;
}

bool OAISshAuthenticationConfig::is_user_private_key_secret_version_Valid() const{
    return m_user_private_key_secret_version_isValid;
}

bool OAISshAuthenticationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_private_key_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISshAuthenticationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
