# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation_descriptor import RelationDescriptor
from openapi_server.models.target import Target
from openapi_server import util


class Assertion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependency_targets: List[Target]=None, disabled: bool=None, parent_action: Target=None, relation_descriptor: RelationDescriptor=None, select_query: str=None, tags: List[str]=None):
        """Assertion - a model defined in OpenAPI

        :param dependency_targets: The dependency_targets of this Assertion.
        :param disabled: The disabled of this Assertion.
        :param parent_action: The parent_action of this Assertion.
        :param relation_descriptor: The relation_descriptor of this Assertion.
        :param select_query: The select_query of this Assertion.
        :param tags: The tags of this Assertion.
        """
        self.openapi_types = {
            'dependency_targets': List[Target],
            'disabled': bool,
            'parent_action': Target,
            'relation_descriptor': RelationDescriptor,
            'select_query': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'dependency_targets': 'dependencyTargets',
            'disabled': 'disabled',
            'parent_action': 'parentAction',
            'relation_descriptor': 'relationDescriptor',
            'select_query': 'selectQuery',
            'tags': 'tags'
        }

        self._dependency_targets = dependency_targets
        self._disabled = disabled
        self._parent_action = parent_action
        self._relation_descriptor = relation_descriptor
        self._select_query = select_query
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assertion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assertion of this Assertion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependency_targets(self):
        """Gets the dependency_targets of this Assertion.

        A list of actions that this action depends on.

        :return: The dependency_targets of this Assertion.
        :rtype: List[Target]
        """
        return self._dependency_targets

    @dependency_targets.setter
    def dependency_targets(self, dependency_targets):
        """Sets the dependency_targets of this Assertion.

        A list of actions that this action depends on.

        :param dependency_targets: The dependency_targets of this Assertion.
        :type dependency_targets: List[Target]
        """

        self._dependency_targets = dependency_targets

    @property
    def disabled(self):
        """Gets the disabled of this Assertion.

        Whether this action is disabled (i.e. should not be run).

        :return: The disabled of this Assertion.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Assertion.

        Whether this action is disabled (i.e. should not be run).

        :param disabled: The disabled of this Assertion.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def parent_action(self):
        """Gets the parent_action of this Assertion.


        :return: The parent_action of this Assertion.
        :rtype: Target
        """
        return self._parent_action

    @parent_action.setter
    def parent_action(self, parent_action):
        """Sets the parent_action of this Assertion.


        :param parent_action: The parent_action of this Assertion.
        :type parent_action: Target
        """

        self._parent_action = parent_action

    @property
    def relation_descriptor(self):
        """Gets the relation_descriptor of this Assertion.


        :return: The relation_descriptor of this Assertion.
        :rtype: RelationDescriptor
        """
        return self._relation_descriptor

    @relation_descriptor.setter
    def relation_descriptor(self, relation_descriptor):
        """Sets the relation_descriptor of this Assertion.


        :param relation_descriptor: The relation_descriptor of this Assertion.
        :type relation_descriptor: RelationDescriptor
        """

        self._relation_descriptor = relation_descriptor

    @property
    def select_query(self):
        """Gets the select_query of this Assertion.

        The SELECT query which must return zero rows in order for this assertion to succeed.

        :return: The select_query of this Assertion.
        :rtype: str
        """
        return self._select_query

    @select_query.setter
    def select_query(self, select_query):
        """Sets the select_query of this Assertion.

        The SELECT query which must return zero rows in order for this assertion to succeed.

        :param select_query: The select_query of this Assertion.
        :type select_query: str
        """

        self._select_query = select_query

    @property
    def tags(self):
        """Gets the tags of this Assertion.

        Arbitrary, user-defined tags on this action.

        :return: The tags of this Assertion.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Assertion.

        Arbitrary, user-defined tags on this action.

        :param tags: The tags of this Assertion.
        :type tags: List[str]
        """

        self._tags = tags
