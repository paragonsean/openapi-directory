# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assertion import Assertion
from openapi_server.models.declaration import Declaration
from openapi_server.models.operations import Operations
from openapi_server.models.relation import Relation
from openapi_server.models.target import Target
from openapi_server import util


class CompilationResultAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assertion: Assertion=None, canonical_target: Target=None, declaration: Declaration=None, file_path: str=None, operations: Operations=None, relation: Relation=None, target: Target=None):
        """CompilationResultAction - a model defined in OpenAPI

        :param assertion: The assertion of this CompilationResultAction.
        :param canonical_target: The canonical_target of this CompilationResultAction.
        :param declaration: The declaration of this CompilationResultAction.
        :param file_path: The file_path of this CompilationResultAction.
        :param operations: The operations of this CompilationResultAction.
        :param relation: The relation of this CompilationResultAction.
        :param target: The target of this CompilationResultAction.
        """
        self.openapi_types = {
            'assertion': Assertion,
            'canonical_target': Target,
            'declaration': Declaration,
            'file_path': str,
            'operations': Operations,
            'relation': Relation,
            'target': Target
        }

        self.attribute_map = {
            'assertion': 'assertion',
            'canonical_target': 'canonicalTarget',
            'declaration': 'declaration',
            'file_path': 'filePath',
            'operations': 'operations',
            'relation': 'relation',
            'target': 'target'
        }

        self._assertion = assertion
        self._canonical_target = canonical_target
        self._declaration = declaration
        self._file_path = file_path
        self._operations = operations
        self._relation = relation
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompilationResultAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompilationResultAction of this CompilationResultAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assertion(self):
        """Gets the assertion of this CompilationResultAction.


        :return: The assertion of this CompilationResultAction.
        :rtype: Assertion
        """
        return self._assertion

    @assertion.setter
    def assertion(self, assertion):
        """Sets the assertion of this CompilationResultAction.


        :param assertion: The assertion of this CompilationResultAction.
        :type assertion: Assertion
        """

        self._assertion = assertion

    @property
    def canonical_target(self):
        """Gets the canonical_target of this CompilationResultAction.


        :return: The canonical_target of this CompilationResultAction.
        :rtype: Target
        """
        return self._canonical_target

    @canonical_target.setter
    def canonical_target(self, canonical_target):
        """Sets the canonical_target of this CompilationResultAction.


        :param canonical_target: The canonical_target of this CompilationResultAction.
        :type canonical_target: Target
        """

        self._canonical_target = canonical_target

    @property
    def declaration(self):
        """Gets the declaration of this CompilationResultAction.


        :return: The declaration of this CompilationResultAction.
        :rtype: Declaration
        """
        return self._declaration

    @declaration.setter
    def declaration(self, declaration):
        """Sets the declaration of this CompilationResultAction.


        :param declaration: The declaration of this CompilationResultAction.
        :type declaration: Declaration
        """

        self._declaration = declaration

    @property
    def file_path(self):
        """Gets the file_path of this CompilationResultAction.

        The full path including filename in which this action is located, relative to the workspace root.

        :return: The file_path of this CompilationResultAction.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this CompilationResultAction.

        The full path including filename in which this action is located, relative to the workspace root.

        :param file_path: The file_path of this CompilationResultAction.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def operations(self):
        """Gets the operations of this CompilationResultAction.


        :return: The operations of this CompilationResultAction.
        :rtype: Operations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this CompilationResultAction.


        :param operations: The operations of this CompilationResultAction.
        :type operations: Operations
        """

        self._operations = operations

    @property
    def relation(self):
        """Gets the relation of this CompilationResultAction.


        :return: The relation of this CompilationResultAction.
        :rtype: Relation
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this CompilationResultAction.


        :param relation: The relation of this CompilationResultAction.
        :type relation: Relation
        """

        self._relation = relation

    @property
    def target(self):
        """Gets the target of this CompilationResultAction.


        :return: The target of this CompilationResultAction.
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CompilationResultAction.


        :param target: The target of this CompilationResultAction.
        :type target: Target
        """

        self._target = target
