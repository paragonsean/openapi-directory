# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_action import BigQueryAction
from openapi_server.models.interval import Interval
from openapi_server.models.target import Target
from openapi_server import util


class WorkflowInvocationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_action: BigQueryAction=None, canonical_target: Target=None, failure_reason: str=None, invocation_timing: Interval=None, state: str=None, target: Target=None):
        """WorkflowInvocationAction - a model defined in OpenAPI

        :param bigquery_action: The bigquery_action of this WorkflowInvocationAction.
        :param canonical_target: The canonical_target of this WorkflowInvocationAction.
        :param failure_reason: The failure_reason of this WorkflowInvocationAction.
        :param invocation_timing: The invocation_timing of this WorkflowInvocationAction.
        :param state: The state of this WorkflowInvocationAction.
        :param target: The target of this WorkflowInvocationAction.
        """
        self.openapi_types = {
            'bigquery_action': BigQueryAction,
            'canonical_target': Target,
            'failure_reason': str,
            'invocation_timing': Interval,
            'state': str,
            'target': Target
        }

        self.attribute_map = {
            'bigquery_action': 'bigqueryAction',
            'canonical_target': 'canonicalTarget',
            'failure_reason': 'failureReason',
            'invocation_timing': 'invocationTiming',
            'state': 'state',
            'target': 'target'
        }

        self._bigquery_action = bigquery_action
        self._canonical_target = canonical_target
        self._failure_reason = failure_reason
        self._invocation_timing = invocation_timing
        self._state = state
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowInvocationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowInvocationAction of this WorkflowInvocationAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_action(self):
        """Gets the bigquery_action of this WorkflowInvocationAction.


        :return: The bigquery_action of this WorkflowInvocationAction.
        :rtype: BigQueryAction
        """
        return self._bigquery_action

    @bigquery_action.setter
    def bigquery_action(self, bigquery_action):
        """Sets the bigquery_action of this WorkflowInvocationAction.


        :param bigquery_action: The bigquery_action of this WorkflowInvocationAction.
        :type bigquery_action: BigQueryAction
        """

        self._bigquery_action = bigquery_action

    @property
    def canonical_target(self):
        """Gets the canonical_target of this WorkflowInvocationAction.


        :return: The canonical_target of this WorkflowInvocationAction.
        :rtype: Target
        """
        return self._canonical_target

    @canonical_target.setter
    def canonical_target(self, canonical_target):
        """Sets the canonical_target of this WorkflowInvocationAction.


        :param canonical_target: The canonical_target of this WorkflowInvocationAction.
        :type canonical_target: Target
        """

        self._canonical_target = canonical_target

    @property
    def failure_reason(self):
        """Gets the failure_reason of this WorkflowInvocationAction.

        Output only. If and only if action's state is FAILED a failure reason is set.

        :return: The failure_reason of this WorkflowInvocationAction.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this WorkflowInvocationAction.

        Output only. If and only if action's state is FAILED a failure reason is set.

        :param failure_reason: The failure_reason of this WorkflowInvocationAction.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def invocation_timing(self):
        """Gets the invocation_timing of this WorkflowInvocationAction.


        :return: The invocation_timing of this WorkflowInvocationAction.
        :rtype: Interval
        """
        return self._invocation_timing

    @invocation_timing.setter
    def invocation_timing(self, invocation_timing):
        """Sets the invocation_timing of this WorkflowInvocationAction.


        :param invocation_timing: The invocation_timing of this WorkflowInvocationAction.
        :type invocation_timing: Interval
        """

        self._invocation_timing = invocation_timing

    @property
    def state(self):
        """Gets the state of this WorkflowInvocationAction.

        Output only. This action's current state.

        :return: The state of this WorkflowInvocationAction.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowInvocationAction.

        Output only. This action's current state.

        :param state: The state of this WorkflowInvocationAction.
        :type state: str
        """
        allowed_values = ["PENDING", "RUNNING", "SKIPPED", "DISABLED", "SUCCEEDED", "CANCELLED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target(self):
        """Gets the target of this WorkflowInvocationAction.


        :return: The target of this WorkflowInvocationAction.
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this WorkflowInvocationAction.


        :param target: The target of this WorkflowInvocationAction.
        :type target: Target
        """

        self._target = target
