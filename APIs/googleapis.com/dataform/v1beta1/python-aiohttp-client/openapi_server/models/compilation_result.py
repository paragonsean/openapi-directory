# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_compilation_config import CodeCompilationConfig
from openapi_server.models.compilation_error import CompilationError
from openapi_server import util


class CompilationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_compilation_config: CodeCompilationConfig=None, compilation_errors: List[CompilationError]=None, dataform_core_version: str=None, git_commitish: str=None, name: str=None, release_config: str=None, resolved_git_commit_sha: str=None, workspace: str=None):
        """CompilationResult - a model defined in OpenAPI

        :param code_compilation_config: The code_compilation_config of this CompilationResult.
        :param compilation_errors: The compilation_errors of this CompilationResult.
        :param dataform_core_version: The dataform_core_version of this CompilationResult.
        :param git_commitish: The git_commitish of this CompilationResult.
        :param name: The name of this CompilationResult.
        :param release_config: The release_config of this CompilationResult.
        :param resolved_git_commit_sha: The resolved_git_commit_sha of this CompilationResult.
        :param workspace: The workspace of this CompilationResult.
        """
        self.openapi_types = {
            'code_compilation_config': CodeCompilationConfig,
            'compilation_errors': List[CompilationError],
            'dataform_core_version': str,
            'git_commitish': str,
            'name': str,
            'release_config': str,
            'resolved_git_commit_sha': str,
            'workspace': str
        }

        self.attribute_map = {
            'code_compilation_config': 'codeCompilationConfig',
            'compilation_errors': 'compilationErrors',
            'dataform_core_version': 'dataformCoreVersion',
            'git_commitish': 'gitCommitish',
            'name': 'name',
            'release_config': 'releaseConfig',
            'resolved_git_commit_sha': 'resolvedGitCommitSha',
            'workspace': 'workspace'
        }

        self._code_compilation_config = code_compilation_config
        self._compilation_errors = compilation_errors
        self._dataform_core_version = dataform_core_version
        self._git_commitish = git_commitish
        self._name = name
        self._release_config = release_config
        self._resolved_git_commit_sha = resolved_git_commit_sha
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompilationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompilationResult of this CompilationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_compilation_config(self):
        """Gets the code_compilation_config of this CompilationResult.


        :return: The code_compilation_config of this CompilationResult.
        :rtype: CodeCompilationConfig
        """
        return self._code_compilation_config

    @code_compilation_config.setter
    def code_compilation_config(self, code_compilation_config):
        """Sets the code_compilation_config of this CompilationResult.


        :param code_compilation_config: The code_compilation_config of this CompilationResult.
        :type code_compilation_config: CodeCompilationConfig
        """

        self._code_compilation_config = code_compilation_config

    @property
    def compilation_errors(self):
        """Gets the compilation_errors of this CompilationResult.

        Output only. Errors encountered during project compilation.

        :return: The compilation_errors of this CompilationResult.
        :rtype: List[CompilationError]
        """
        return self._compilation_errors

    @compilation_errors.setter
    def compilation_errors(self, compilation_errors):
        """Sets the compilation_errors of this CompilationResult.

        Output only. Errors encountered during project compilation.

        :param compilation_errors: The compilation_errors of this CompilationResult.
        :type compilation_errors: List[CompilationError]
        """

        self._compilation_errors = compilation_errors

    @property
    def dataform_core_version(self):
        """Gets the dataform_core_version of this CompilationResult.

        Output only. The version of `@dataform/core` that was used for compilation.

        :return: The dataform_core_version of this CompilationResult.
        :rtype: str
        """
        return self._dataform_core_version

    @dataform_core_version.setter
    def dataform_core_version(self, dataform_core_version):
        """Sets the dataform_core_version of this CompilationResult.

        Output only. The version of `@dataform/core` that was used for compilation.

        :param dataform_core_version: The dataform_core_version of this CompilationResult.
        :type dataform_core_version: str
        """

        self._dataform_core_version = dataform_core_version

    @property
    def git_commitish(self):
        """Gets the git_commitish of this CompilationResult.

        Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`

        :return: The git_commitish of this CompilationResult.
        :rtype: str
        """
        return self._git_commitish

    @git_commitish.setter
    def git_commitish(self, git_commitish):
        """Sets the git_commitish of this CompilationResult.

        Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`

        :param git_commitish: The git_commitish of this CompilationResult.
        :type git_commitish: str
        """

        self._git_commitish = git_commitish

    @property
    def name(self):
        """Gets the name of this CompilationResult.

        Output only. The compilation result's name.

        :return: The name of this CompilationResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompilationResult.

        Output only. The compilation result's name.

        :param name: The name of this CompilationResult.
        :type name: str
        """

        self._name = name

    @property
    def release_config(self):
        """Gets the release_config of this CompilationResult.

        Immutable. The name of the release config to compile. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.

        :return: The release_config of this CompilationResult.
        :rtype: str
        """
        return self._release_config

    @release_config.setter
    def release_config(self, release_config):
        """Sets the release_config of this CompilationResult.

        Immutable. The name of the release config to compile. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.

        :param release_config: The release_config of this CompilationResult.
        :type release_config: str
        """

        self._release_config = release_config

    @property
    def resolved_git_commit_sha(self):
        """Gets the resolved_git_commit_sha of this CompilationResult.

        Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.

        :return: The resolved_git_commit_sha of this CompilationResult.
        :rtype: str
        """
        return self._resolved_git_commit_sha

    @resolved_git_commit_sha.setter
    def resolved_git_commit_sha(self, resolved_git_commit_sha):
        """Sets the resolved_git_commit_sha of this CompilationResult.

        Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.

        :param resolved_git_commit_sha: The resolved_git_commit_sha of this CompilationResult.
        :type resolved_git_commit_sha: str
        """

        self._resolved_git_commit_sha = resolved_git_commit_sha

    @property
    def workspace(self):
        """Gets the workspace of this CompilationResult.

        Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.

        :return: The workspace of this CompilationResult.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this CompilationResult.

        Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.

        :param workspace: The workspace of this CompilationResult.
        :type workspace: str
        """

        self._workspace = workspace
