# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeCompilationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assertion_schema: str=None, database_suffix: str=None, default_database: str=None, default_location: str=None, default_schema: str=None, schema_suffix: str=None, table_prefix: str=None, vars: Dict[str, str]=None):
        """CodeCompilationConfig - a model defined in OpenAPI

        :param assertion_schema: The assertion_schema of this CodeCompilationConfig.
        :param database_suffix: The database_suffix of this CodeCompilationConfig.
        :param default_database: The default_database of this CodeCompilationConfig.
        :param default_location: The default_location of this CodeCompilationConfig.
        :param default_schema: The default_schema of this CodeCompilationConfig.
        :param schema_suffix: The schema_suffix of this CodeCompilationConfig.
        :param table_prefix: The table_prefix of this CodeCompilationConfig.
        :param vars: The vars of this CodeCompilationConfig.
        """
        self.openapi_types = {
            'assertion_schema': str,
            'database_suffix': str,
            'default_database': str,
            'default_location': str,
            'default_schema': str,
            'schema_suffix': str,
            'table_prefix': str,
            'vars': Dict[str, str]
        }

        self.attribute_map = {
            'assertion_schema': 'assertionSchema',
            'database_suffix': 'databaseSuffix',
            'default_database': 'defaultDatabase',
            'default_location': 'defaultLocation',
            'default_schema': 'defaultSchema',
            'schema_suffix': 'schemaSuffix',
            'table_prefix': 'tablePrefix',
            'vars': 'vars'
        }

        self._assertion_schema = assertion_schema
        self._database_suffix = database_suffix
        self._default_database = default_database
        self._default_location = default_location
        self._default_schema = default_schema
        self._schema_suffix = schema_suffix
        self._table_prefix = table_prefix
        self._vars = vars

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeCompilationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeCompilationConfig of this CodeCompilationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assertion_schema(self):
        """Gets the assertion_schema of this CodeCompilationConfig.

        Optional. The default schema (BigQuery dataset ID) for assertions.

        :return: The assertion_schema of this CodeCompilationConfig.
        :rtype: str
        """
        return self._assertion_schema

    @assertion_schema.setter
    def assertion_schema(self, assertion_schema):
        """Sets the assertion_schema of this CodeCompilationConfig.

        Optional. The default schema (BigQuery dataset ID) for assertions.

        :param assertion_schema: The assertion_schema of this CodeCompilationConfig.
        :type assertion_schema: str
        """

        self._assertion_schema = assertion_schema

    @property
    def database_suffix(self):
        """Gets the database_suffix of this CodeCompilationConfig.

        Optional. The suffix that should be appended to all database (Google Cloud project ID) names.

        :return: The database_suffix of this CodeCompilationConfig.
        :rtype: str
        """
        return self._database_suffix

    @database_suffix.setter
    def database_suffix(self, database_suffix):
        """Sets the database_suffix of this CodeCompilationConfig.

        Optional. The suffix that should be appended to all database (Google Cloud project ID) names.

        :param database_suffix: The database_suffix of this CodeCompilationConfig.
        :type database_suffix: str
        """

        self._database_suffix = database_suffix

    @property
    def default_database(self):
        """Gets the default_database of this CodeCompilationConfig.

        Optional. The default database (Google Cloud project ID).

        :return: The default_database of this CodeCompilationConfig.
        :rtype: str
        """
        return self._default_database

    @default_database.setter
    def default_database(self, default_database):
        """Sets the default_database of this CodeCompilationConfig.

        Optional. The default database (Google Cloud project ID).

        :param default_database: The default_database of this CodeCompilationConfig.
        :type default_database: str
        """

        self._default_database = default_database

    @property
    def default_location(self):
        """Gets the default_location of this CodeCompilationConfig.

        Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.

        :return: The default_location of this CodeCompilationConfig.
        :rtype: str
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this CodeCompilationConfig.

        Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.

        :param default_location: The default_location of this CodeCompilationConfig.
        :type default_location: str
        """

        self._default_location = default_location

    @property
    def default_schema(self):
        """Gets the default_schema of this CodeCompilationConfig.

        Optional. The default schema (BigQuery dataset ID).

        :return: The default_schema of this CodeCompilationConfig.
        :rtype: str
        """
        return self._default_schema

    @default_schema.setter
    def default_schema(self, default_schema):
        """Sets the default_schema of this CodeCompilationConfig.

        Optional. The default schema (BigQuery dataset ID).

        :param default_schema: The default_schema of this CodeCompilationConfig.
        :type default_schema: str
        """

        self._default_schema = default_schema

    @property
    def schema_suffix(self):
        """Gets the schema_suffix of this CodeCompilationConfig.

        Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.

        :return: The schema_suffix of this CodeCompilationConfig.
        :rtype: str
        """
        return self._schema_suffix

    @schema_suffix.setter
    def schema_suffix(self, schema_suffix):
        """Sets the schema_suffix of this CodeCompilationConfig.

        Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.

        :param schema_suffix: The schema_suffix of this CodeCompilationConfig.
        :type schema_suffix: str
        """

        self._schema_suffix = schema_suffix

    @property
    def table_prefix(self):
        """Gets the table_prefix of this CodeCompilationConfig.

        Optional. The prefix that should be prepended to all table names.

        :return: The table_prefix of this CodeCompilationConfig.
        :rtype: str
        """
        return self._table_prefix

    @table_prefix.setter
    def table_prefix(self, table_prefix):
        """Sets the table_prefix of this CodeCompilationConfig.

        Optional. The prefix that should be prepended to all table names.

        :param table_prefix: The table_prefix of this CodeCompilationConfig.
        :type table_prefix: str
        """

        self._table_prefix = table_prefix

    @property
    def vars(self):
        """Gets the vars of this CodeCompilationConfig.

        Optional. User-defined variables that are made available to project code during compilation.

        :return: The vars of this CodeCompilationConfig.
        :rtype: Dict[str, str]
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """Sets the vars of this CodeCompilationConfig.

        Optional. User-defined variables that are made available to project code during compilation.

        :param vars: The vars of this CodeCompilationConfig.
        :type vars: Dict[str, str]
        """

        self._vars = vars
