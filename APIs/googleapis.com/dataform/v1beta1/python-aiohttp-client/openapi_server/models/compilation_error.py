# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
from openapi_server import util


class CompilationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_target: Target=None, message: str=None, path: str=None, stack: str=None):
        """CompilationError - a model defined in OpenAPI

        :param action_target: The action_target of this CompilationError.
        :param message: The message of this CompilationError.
        :param path: The path of this CompilationError.
        :param stack: The stack of this CompilationError.
        """
        self.openapi_types = {
            'action_target': Target,
            'message': str,
            'path': str,
            'stack': str
        }

        self.attribute_map = {
            'action_target': 'actionTarget',
            'message': 'message',
            'path': 'path',
            'stack': 'stack'
        }

        self._action_target = action_target
        self._message = message
        self._path = path
        self._stack = stack

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompilationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompilationError of this CompilationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_target(self):
        """Gets the action_target of this CompilationError.


        :return: The action_target of this CompilationError.
        :rtype: Target
        """
        return self._action_target

    @action_target.setter
    def action_target(self, action_target):
        """Sets the action_target of this CompilationError.


        :param action_target: The action_target of this CompilationError.
        :type action_target: Target
        """

        self._action_target = action_target

    @property
    def message(self):
        """Gets the message of this CompilationError.

        Output only. The error's top level message.

        :return: The message of this CompilationError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CompilationError.

        Output only. The error's top level message.

        :param message: The message of this CompilationError.
        :type message: str
        """

        self._message = message

    @property
    def path(self):
        """Gets the path of this CompilationError.

        Output only. The path of the file where this error occurred, if available, relative to the project root.

        :return: The path of this CompilationError.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CompilationError.

        Output only. The path of the file where this error occurred, if available, relative to the project root.

        :param path: The path of this CompilationError.
        :type path: str
        """

        self._path = path

    @property
    def stack(self):
        """Gets the stack of this CompilationError.

        Output only. The error's full stack trace.

        :return: The stack of this CompilationError.
        :rtype: str
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this CompilationError.

        Output only. The error's full stack trace.

        :param stack: The stack of this CompilationError.
        :type stack: str
        """

        self._stack = stack
