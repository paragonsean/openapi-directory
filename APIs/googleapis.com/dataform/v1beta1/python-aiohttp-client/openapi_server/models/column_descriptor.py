# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ColumnDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_policy_tags: List[str]=None, description: str=None, path: List[str]=None):
        """ColumnDescriptor - a model defined in OpenAPI

        :param bigquery_policy_tags: The bigquery_policy_tags of this ColumnDescriptor.
        :param description: The description of this ColumnDescriptor.
        :param path: The path of this ColumnDescriptor.
        """
        self.openapi_types = {
            'bigquery_policy_tags': List[str],
            'description': str,
            'path': List[str]
        }

        self.attribute_map = {
            'bigquery_policy_tags': 'bigqueryPolicyTags',
            'description': 'description',
            'path': 'path'
        }

        self._bigquery_policy_tags = bigquery_policy_tags
        self._description = description
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnDescriptor of this ColumnDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_policy_tags(self):
        """Gets the bigquery_policy_tags of this ColumnDescriptor.

        A list of BigQuery policy tags that will be applied to the column.

        :return: The bigquery_policy_tags of this ColumnDescriptor.
        :rtype: List[str]
        """
        return self._bigquery_policy_tags

    @bigquery_policy_tags.setter
    def bigquery_policy_tags(self, bigquery_policy_tags):
        """Sets the bigquery_policy_tags of this ColumnDescriptor.

        A list of BigQuery policy tags that will be applied to the column.

        :param bigquery_policy_tags: The bigquery_policy_tags of this ColumnDescriptor.
        :type bigquery_policy_tags: List[str]
        """

        self._bigquery_policy_tags = bigquery_policy_tags

    @property
    def description(self):
        """Gets the description of this ColumnDescriptor.

        A textual description of the column.

        :return: The description of this ColumnDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ColumnDescriptor.

        A textual description of the column.

        :param description: The description of this ColumnDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def path(self):
        """Gets the path of this ColumnDescriptor.

        The identifier for the column. Each entry in `path` represents one level of nesting.

        :return: The path of this ColumnDescriptor.
        :rtype: List[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ColumnDescriptor.

        The identifier for the column. Each entry in `path` represents one level of nesting.

        :param path: The path of this ColumnDescriptor.
        :type path: List[str]
        """

        self._path = path
