# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IncrementalTableConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incremental_post_operations: List[str]=None, incremental_pre_operations: List[str]=None, incremental_select_query: str=None, refresh_disabled: bool=None, unique_key_parts: List[str]=None, update_partition_filter: str=None):
        """IncrementalTableConfig - a model defined in OpenAPI

        :param incremental_post_operations: The incremental_post_operations of this IncrementalTableConfig.
        :param incremental_pre_operations: The incremental_pre_operations of this IncrementalTableConfig.
        :param incremental_select_query: The incremental_select_query of this IncrementalTableConfig.
        :param refresh_disabled: The refresh_disabled of this IncrementalTableConfig.
        :param unique_key_parts: The unique_key_parts of this IncrementalTableConfig.
        :param update_partition_filter: The update_partition_filter of this IncrementalTableConfig.
        """
        self.openapi_types = {
            'incremental_post_operations': List[str],
            'incremental_pre_operations': List[str],
            'incremental_select_query': str,
            'refresh_disabled': bool,
            'unique_key_parts': List[str],
            'update_partition_filter': str
        }

        self.attribute_map = {
            'incremental_post_operations': 'incrementalPostOperations',
            'incremental_pre_operations': 'incrementalPreOperations',
            'incremental_select_query': 'incrementalSelectQuery',
            'refresh_disabled': 'refreshDisabled',
            'unique_key_parts': 'uniqueKeyParts',
            'update_partition_filter': 'updatePartitionFilter'
        }

        self._incremental_post_operations = incremental_post_operations
        self._incremental_pre_operations = incremental_pre_operations
        self._incremental_select_query = incremental_select_query
        self._refresh_disabled = refresh_disabled
        self._unique_key_parts = unique_key_parts
        self._update_partition_filter = update_partition_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncrementalTableConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncrementalTableConfig of this IncrementalTableConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incremental_post_operations(self):
        """Gets the incremental_post_operations of this IncrementalTableConfig.

        SQL statements to be executed after inserting new rows into the relation.

        :return: The incremental_post_operations of this IncrementalTableConfig.
        :rtype: List[str]
        """
        return self._incremental_post_operations

    @incremental_post_operations.setter
    def incremental_post_operations(self, incremental_post_operations):
        """Sets the incremental_post_operations of this IncrementalTableConfig.

        SQL statements to be executed after inserting new rows into the relation.

        :param incremental_post_operations: The incremental_post_operations of this IncrementalTableConfig.
        :type incremental_post_operations: List[str]
        """

        self._incremental_post_operations = incremental_post_operations

    @property
    def incremental_pre_operations(self):
        """Gets the incremental_pre_operations of this IncrementalTableConfig.

        SQL statements to be executed before inserting new rows into the relation.

        :return: The incremental_pre_operations of this IncrementalTableConfig.
        :rtype: List[str]
        """
        return self._incremental_pre_operations

    @incremental_pre_operations.setter
    def incremental_pre_operations(self, incremental_pre_operations):
        """Sets the incremental_pre_operations of this IncrementalTableConfig.

        SQL statements to be executed before inserting new rows into the relation.

        :param incremental_pre_operations: The incremental_pre_operations of this IncrementalTableConfig.
        :type incremental_pre_operations: List[str]
        """

        self._incremental_pre_operations = incremental_pre_operations

    @property
    def incremental_select_query(self):
        """Gets the incremental_select_query of this IncrementalTableConfig.

        The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.

        :return: The incremental_select_query of this IncrementalTableConfig.
        :rtype: str
        """
        return self._incremental_select_query

    @incremental_select_query.setter
    def incremental_select_query(self, incremental_select_query):
        """Sets the incremental_select_query of this IncrementalTableConfig.

        The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.

        :param incremental_select_query: The incremental_select_query of this IncrementalTableConfig.
        :type incremental_select_query: str
        """

        self._incremental_select_query = incremental_select_query

    @property
    def refresh_disabled(self):
        """Gets the refresh_disabled of this IncrementalTableConfig.

        Whether this table should be protected from being refreshed.

        :return: The refresh_disabled of this IncrementalTableConfig.
        :rtype: bool
        """
        return self._refresh_disabled

    @refresh_disabled.setter
    def refresh_disabled(self, refresh_disabled):
        """Sets the refresh_disabled of this IncrementalTableConfig.

        Whether this table should be protected from being refreshed.

        :param refresh_disabled: The refresh_disabled of this IncrementalTableConfig.
        :type refresh_disabled: bool
        """

        self._refresh_disabled = refresh_disabled

    @property
    def unique_key_parts(self):
        """Gets the unique_key_parts of this IncrementalTableConfig.

        A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.

        :return: The unique_key_parts of this IncrementalTableConfig.
        :rtype: List[str]
        """
        return self._unique_key_parts

    @unique_key_parts.setter
    def unique_key_parts(self, unique_key_parts):
        """Sets the unique_key_parts of this IncrementalTableConfig.

        A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.

        :param unique_key_parts: The unique_key_parts of this IncrementalTableConfig.
        :type unique_key_parts: List[str]
        """

        self._unique_key_parts = unique_key_parts

    @property
    def update_partition_filter(self):
        """Gets the update_partition_filter of this IncrementalTableConfig.

        A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).

        :return: The update_partition_filter of this IncrementalTableConfig.
        :rtype: str
        """
        return self._update_partition_filter

    @update_partition_filter.setter
    def update_partition_filter(self, update_partition_filter):
        """Sets the update_partition_filter of this IncrementalTableConfig.

        A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).

        :param update_partition_filter: The update_partition_filter of this IncrementalTableConfig.
        :type update_partition_filter: str
        """

        self._update_partition_filter = update_partition_filter
