# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incremental_table_config import IncrementalTableConfig
from openapi_server.models.relation_descriptor import RelationDescriptor
from openapi_server.models.target import Target
from openapi_server import util


class Relation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_options: Dict[str, str]=None, cluster_expressions: List[str]=None, dependency_targets: List[Target]=None, disabled: bool=None, incremental_table_config: IncrementalTableConfig=None, partition_expiration_days: int=None, partition_expression: str=None, post_operations: List[str]=None, pre_operations: List[str]=None, relation_descriptor: RelationDescriptor=None, relation_type: str=None, require_partition_filter: bool=None, select_query: str=None, tags: List[str]=None):
        """Relation - a model defined in OpenAPI

        :param additional_options: The additional_options of this Relation.
        :param cluster_expressions: The cluster_expressions of this Relation.
        :param dependency_targets: The dependency_targets of this Relation.
        :param disabled: The disabled of this Relation.
        :param incremental_table_config: The incremental_table_config of this Relation.
        :param partition_expiration_days: The partition_expiration_days of this Relation.
        :param partition_expression: The partition_expression of this Relation.
        :param post_operations: The post_operations of this Relation.
        :param pre_operations: The pre_operations of this Relation.
        :param relation_descriptor: The relation_descriptor of this Relation.
        :param relation_type: The relation_type of this Relation.
        :param require_partition_filter: The require_partition_filter of this Relation.
        :param select_query: The select_query of this Relation.
        :param tags: The tags of this Relation.
        """
        self.openapi_types = {
            'additional_options': Dict[str, str],
            'cluster_expressions': List[str],
            'dependency_targets': List[Target],
            'disabled': bool,
            'incremental_table_config': IncrementalTableConfig,
            'partition_expiration_days': int,
            'partition_expression': str,
            'post_operations': List[str],
            'pre_operations': List[str],
            'relation_descriptor': RelationDescriptor,
            'relation_type': str,
            'require_partition_filter': bool,
            'select_query': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'additional_options': 'additionalOptions',
            'cluster_expressions': 'clusterExpressions',
            'dependency_targets': 'dependencyTargets',
            'disabled': 'disabled',
            'incremental_table_config': 'incrementalTableConfig',
            'partition_expiration_days': 'partitionExpirationDays',
            'partition_expression': 'partitionExpression',
            'post_operations': 'postOperations',
            'pre_operations': 'preOperations',
            'relation_descriptor': 'relationDescriptor',
            'relation_type': 'relationType',
            'require_partition_filter': 'requirePartitionFilter',
            'select_query': 'selectQuery',
            'tags': 'tags'
        }

        self._additional_options = additional_options
        self._cluster_expressions = cluster_expressions
        self._dependency_targets = dependency_targets
        self._disabled = disabled
        self._incremental_table_config = incremental_table_config
        self._partition_expiration_days = partition_expiration_days
        self._partition_expression = partition_expression
        self._post_operations = post_operations
        self._pre_operations = pre_operations
        self._relation_descriptor = relation_descriptor
        self._relation_type = relation_type
        self._require_partition_filter = require_partition_filter
        self._select_query = select_query
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relation of this Relation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_options(self):
        """Gets the additional_options of this Relation.

        Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.

        :return: The additional_options of this Relation.
        :rtype: Dict[str, str]
        """
        return self._additional_options

    @additional_options.setter
    def additional_options(self, additional_options):
        """Sets the additional_options of this Relation.

        Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.

        :param additional_options: The additional_options of this Relation.
        :type additional_options: Dict[str, str]
        """

        self._additional_options = additional_options

    @property
    def cluster_expressions(self):
        """Gets the cluster_expressions of this Relation.

        A list of columns or SQL expressions used to cluster the table.

        :return: The cluster_expressions of this Relation.
        :rtype: List[str]
        """
        return self._cluster_expressions

    @cluster_expressions.setter
    def cluster_expressions(self, cluster_expressions):
        """Sets the cluster_expressions of this Relation.

        A list of columns or SQL expressions used to cluster the table.

        :param cluster_expressions: The cluster_expressions of this Relation.
        :type cluster_expressions: List[str]
        """

        self._cluster_expressions = cluster_expressions

    @property
    def dependency_targets(self):
        """Gets the dependency_targets of this Relation.

        A list of actions that this action depends on.

        :return: The dependency_targets of this Relation.
        :rtype: List[Target]
        """
        return self._dependency_targets

    @dependency_targets.setter
    def dependency_targets(self, dependency_targets):
        """Sets the dependency_targets of this Relation.

        A list of actions that this action depends on.

        :param dependency_targets: The dependency_targets of this Relation.
        :type dependency_targets: List[Target]
        """

        self._dependency_targets = dependency_targets

    @property
    def disabled(self):
        """Gets the disabled of this Relation.

        Whether this action is disabled (i.e. should not be run).

        :return: The disabled of this Relation.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Relation.

        Whether this action is disabled (i.e. should not be run).

        :param disabled: The disabled of this Relation.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def incremental_table_config(self):
        """Gets the incremental_table_config of this Relation.


        :return: The incremental_table_config of this Relation.
        :rtype: IncrementalTableConfig
        """
        return self._incremental_table_config

    @incremental_table_config.setter
    def incremental_table_config(self, incremental_table_config):
        """Sets the incremental_table_config of this Relation.


        :param incremental_table_config: The incremental_table_config of this Relation.
        :type incremental_table_config: IncrementalTableConfig
        """

        self._incremental_table_config = incremental_table_config

    @property
    def partition_expiration_days(self):
        """Gets the partition_expiration_days of this Relation.

        Sets the partition expiration in days.

        :return: The partition_expiration_days of this Relation.
        :rtype: int
        """
        return self._partition_expiration_days

    @partition_expiration_days.setter
    def partition_expiration_days(self, partition_expiration_days):
        """Sets the partition_expiration_days of this Relation.

        Sets the partition expiration in days.

        :param partition_expiration_days: The partition_expiration_days of this Relation.
        :type partition_expiration_days: int
        """

        self._partition_expiration_days = partition_expiration_days

    @property
    def partition_expression(self):
        """Gets the partition_expression of this Relation.

        The SQL expression used to partition the relation.

        :return: The partition_expression of this Relation.
        :rtype: str
        """
        return self._partition_expression

    @partition_expression.setter
    def partition_expression(self, partition_expression):
        """Sets the partition_expression of this Relation.

        The SQL expression used to partition the relation.

        :param partition_expression: The partition_expression of this Relation.
        :type partition_expression: str
        """

        self._partition_expression = partition_expression

    @property
    def post_operations(self):
        """Gets the post_operations of this Relation.

        SQL statements to be executed after creating the relation.

        :return: The post_operations of this Relation.
        :rtype: List[str]
        """
        return self._post_operations

    @post_operations.setter
    def post_operations(self, post_operations):
        """Sets the post_operations of this Relation.

        SQL statements to be executed after creating the relation.

        :param post_operations: The post_operations of this Relation.
        :type post_operations: List[str]
        """

        self._post_operations = post_operations

    @property
    def pre_operations(self):
        """Gets the pre_operations of this Relation.

        SQL statements to be executed before creating the relation.

        :return: The pre_operations of this Relation.
        :rtype: List[str]
        """
        return self._pre_operations

    @pre_operations.setter
    def pre_operations(self, pre_operations):
        """Sets the pre_operations of this Relation.

        SQL statements to be executed before creating the relation.

        :param pre_operations: The pre_operations of this Relation.
        :type pre_operations: List[str]
        """

        self._pre_operations = pre_operations

    @property
    def relation_descriptor(self):
        """Gets the relation_descriptor of this Relation.


        :return: The relation_descriptor of this Relation.
        :rtype: RelationDescriptor
        """
        return self._relation_descriptor

    @relation_descriptor.setter
    def relation_descriptor(self, relation_descriptor):
        """Sets the relation_descriptor of this Relation.


        :param relation_descriptor: The relation_descriptor of this Relation.
        :type relation_descriptor: RelationDescriptor
        """

        self._relation_descriptor = relation_descriptor

    @property
    def relation_type(self):
        """Gets the relation_type of this Relation.

        The type of this relation.

        :return: The relation_type of this Relation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this Relation.

        The type of this relation.

        :param relation_type: The relation_type of this Relation.
        :type relation_type: str
        """
        allowed_values = ["RELATION_TYPE_UNSPECIFIED", "TABLE", "VIEW", "INCREMENTAL_TABLE", "MATERIALIZED_VIEW"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type

    @property
    def require_partition_filter(self):
        """Gets the require_partition_filter of this Relation.

        Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.

        :return: The require_partition_filter of this Relation.
        :rtype: bool
        """
        return self._require_partition_filter

    @require_partition_filter.setter
    def require_partition_filter(self, require_partition_filter):
        """Sets the require_partition_filter of this Relation.

        Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.

        :param require_partition_filter: The require_partition_filter of this Relation.
        :type require_partition_filter: bool
        """

        self._require_partition_filter = require_partition_filter

    @property
    def select_query(self):
        """Gets the select_query of this Relation.

        The SELECT query which returns rows which this relation should contain.

        :return: The select_query of this Relation.
        :rtype: str
        """
        return self._select_query

    @select_query.setter
    def select_query(self, select_query):
        """Sets the select_query of this Relation.

        The SELECT query which returns rows which this relation should contain.

        :param select_query: The select_query of this Relation.
        :type select_query: str
        """

        self._select_query = select_query

    @property
    def tags(self):
        """Gets the tags of this Relation.

        Arbitrary, user-defined tags on this action.

        :return: The tags of this Relation.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Relation.

        Arbitrary, user-defined tags on this action.

        :param tags: The tags of this Relation.
        :type tags: List[str]
        """

        self._tags = tags
