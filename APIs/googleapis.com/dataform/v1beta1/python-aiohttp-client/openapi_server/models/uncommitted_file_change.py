# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UncommittedFileChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, state: str=None):
        """UncommittedFileChange - a model defined in OpenAPI

        :param path: The path of this UncommittedFileChange.
        :param state: The state of this UncommittedFileChange.
        """
        self.openapi_types = {
            'path': str,
            'state': str
        }

        self.attribute_map = {
            'path': 'path',
            'state': 'state'
        }

        self._path = path
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UncommittedFileChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UncommittedFileChange of this UncommittedFileChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this UncommittedFileChange.

        The file's full path including filename, relative to the workspace root.

        :return: The path of this UncommittedFileChange.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this UncommittedFileChange.

        The file's full path including filename, relative to the workspace root.

        :param path: The path of this UncommittedFileChange.
        :type path: str
        """

        self._path = path

    @property
    def state(self):
        """Gets the state of this UncommittedFileChange.

        Indicates the status of the file.

        :return: The state of this UncommittedFileChange.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UncommittedFileChange.

        Indicates the status of the file.

        :param state: The state of this UncommittedFileChange.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ADDED", "DELETED", "MODIFIED", "HAS_CONFLICTS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
