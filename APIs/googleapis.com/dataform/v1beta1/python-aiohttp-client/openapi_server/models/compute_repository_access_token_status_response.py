# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeRepositoryAccessTokenStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_status: str=None):
        """ComputeRepositoryAccessTokenStatusResponse - a model defined in OpenAPI

        :param token_status: The token_status of this ComputeRepositoryAccessTokenStatusResponse.
        """
        self.openapi_types = {
            'token_status': str
        }

        self.attribute_map = {
            'token_status': 'tokenStatus'
        }

        self._token_status = token_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeRepositoryAccessTokenStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeRepositoryAccessTokenStatusResponse of this ComputeRepositoryAccessTokenStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_status(self):
        """Gets the token_status of this ComputeRepositoryAccessTokenStatusResponse.

        Indicates the status of the Git access token.

        :return: The token_status of this ComputeRepositoryAccessTokenStatusResponse.
        :rtype: str
        """
        return self._token_status

    @token_status.setter
    def token_status(self, token_status):
        """Sets the token_status of this ComputeRepositoryAccessTokenStatusResponse.

        Indicates the status of the Git access token.

        :param token_status: The token_status of this ComputeRepositoryAccessTokenStatusResponse.
        :type token_status: str
        """
        allowed_values = ["TOKEN_STATUS_UNSPECIFIED", "NOT_FOUND", "INVALID", "VALID"]  # noqa: E501
        if token_status not in allowed_values:
            raise ValueError(
                "Invalid value for `token_status` ({0}), must be one of {1}"
                .format(token_status, allowed_values)
            )

        self._token_status = token_status
