# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_remote_settings import GitRemoteSettings
from openapi_server.models.workspace_compilation_overrides import WorkspaceCompilationOverrides
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, git_remote_settings: GitRemoteSettings=None, labels: Dict[str, str]=None, name: str=None, npmrc_environment_variables_secret_version: str=None, service_account: str=None, set_authenticated_user_admin: bool=None, workspace_compilation_overrides: WorkspaceCompilationOverrides=None):
        """Repository - a model defined in OpenAPI

        :param create_time: The create_time of this Repository.
        :param display_name: The display_name of this Repository.
        :param git_remote_settings: The git_remote_settings of this Repository.
        :param labels: The labels of this Repository.
        :param name: The name of this Repository.
        :param npmrc_environment_variables_secret_version: The npmrc_environment_variables_secret_version of this Repository.
        :param service_account: The service_account of this Repository.
        :param set_authenticated_user_admin: The set_authenticated_user_admin of this Repository.
        :param workspace_compilation_overrides: The workspace_compilation_overrides of this Repository.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'git_remote_settings': GitRemoteSettings,
            'labels': Dict[str, str],
            'name': str,
            'npmrc_environment_variables_secret_version': str,
            'service_account': str,
            'set_authenticated_user_admin': bool,
            'workspace_compilation_overrides': WorkspaceCompilationOverrides
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'git_remote_settings': 'gitRemoteSettings',
            'labels': 'labels',
            'name': 'name',
            'npmrc_environment_variables_secret_version': 'npmrcEnvironmentVariablesSecretVersion',
            'service_account': 'serviceAccount',
            'set_authenticated_user_admin': 'setAuthenticatedUserAdmin',
            'workspace_compilation_overrides': 'workspaceCompilationOverrides'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._git_remote_settings = git_remote_settings
        self._labels = labels
        self._name = name
        self._npmrc_environment_variables_secret_version = npmrc_environment_variables_secret_version
        self._service_account = service_account
        self._set_authenticated_user_admin = set_authenticated_user_admin
        self._workspace_compilation_overrides = workspace_compilation_overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Repository.

        Output only. The timestamp of when the repository was created.

        :return: The create_time of this Repository.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Repository.

        Output only. The timestamp of when the repository was created.

        :param create_time: The create_time of this Repository.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this Repository.

        Optional. The repository's user-friendly name.

        :return: The display_name of this Repository.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Repository.

        Optional. The repository's user-friendly name.

        :param display_name: The display_name of this Repository.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def git_remote_settings(self):
        """Gets the git_remote_settings of this Repository.


        :return: The git_remote_settings of this Repository.
        :rtype: GitRemoteSettings
        """
        return self._git_remote_settings

    @git_remote_settings.setter
    def git_remote_settings(self, git_remote_settings):
        """Sets the git_remote_settings of this Repository.


        :param git_remote_settings: The git_remote_settings of this Repository.
        :type git_remote_settings: GitRemoteSettings
        """

        self._git_remote_settings = git_remote_settings

    @property
    def labels(self):
        """Gets the labels of this Repository.

        Optional. Repository user labels.

        :return: The labels of this Repository.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Repository.

        Optional. Repository user labels.

        :param labels: The labels of this Repository.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Repository.

        Output only. The repository's name.

        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        Output only. The repository's name.

        :param name: The name of this Repository.
        :type name: str
        """

        self._name = name

    @property
    def npmrc_environment_variables_secret_version(self):
        """Gets the npmrc_environment_variables_secret_version of this Repository.

        Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.

        :return: The npmrc_environment_variables_secret_version of this Repository.
        :rtype: str
        """
        return self._npmrc_environment_variables_secret_version

    @npmrc_environment_variables_secret_version.setter
    def npmrc_environment_variables_secret_version(self, npmrc_environment_variables_secret_version):
        """Sets the npmrc_environment_variables_secret_version of this Repository.

        Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.

        :param npmrc_environment_variables_secret_version: The npmrc_environment_variables_secret_version of this Repository.
        :type npmrc_environment_variables_secret_version: str
        """

        self._npmrc_environment_variables_secret_version = npmrc_environment_variables_secret_version

    @property
    def service_account(self):
        """Gets the service_account of this Repository.

        Optional. The service account to run workflow invocations under.

        :return: The service_account of this Repository.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Repository.

        Optional. The service account to run workflow invocations under.

        :param service_account: The service_account of this Repository.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def set_authenticated_user_admin(self):
        """Gets the set_authenticated_user_admin of this Repository.

        Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories

        :return: The set_authenticated_user_admin of this Repository.
        :rtype: bool
        """
        return self._set_authenticated_user_admin

    @set_authenticated_user_admin.setter
    def set_authenticated_user_admin(self, set_authenticated_user_admin):
        """Sets the set_authenticated_user_admin of this Repository.

        Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories

        :param set_authenticated_user_admin: The set_authenticated_user_admin of this Repository.
        :type set_authenticated_user_admin: bool
        """

        self._set_authenticated_user_admin = set_authenticated_user_admin

    @property
    def workspace_compilation_overrides(self):
        """Gets the workspace_compilation_overrides of this Repository.


        :return: The workspace_compilation_overrides of this Repository.
        :rtype: WorkspaceCompilationOverrides
        """
        return self._workspace_compilation_overrides

    @workspace_compilation_overrides.setter
    def workspace_compilation_overrides(self, workspace_compilation_overrides):
        """Sets the workspace_compilation_overrides of this Repository.


        :param workspace_compilation_overrides: The workspace_compilation_overrides of this Repository.
        :type workspace_compilation_overrides: WorkspaceCompilationOverrides
        """

        self._workspace_compilation_overrides = workspace_compilation_overrides
