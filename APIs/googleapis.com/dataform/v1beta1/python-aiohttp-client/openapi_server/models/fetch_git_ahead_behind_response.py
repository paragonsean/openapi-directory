# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FetchGitAheadBehindResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commits_ahead: int=None, commits_behind: int=None):
        """FetchGitAheadBehindResponse - a model defined in OpenAPI

        :param commits_ahead: The commits_ahead of this FetchGitAheadBehindResponse.
        :param commits_behind: The commits_behind of this FetchGitAheadBehindResponse.
        """
        self.openapi_types = {
            'commits_ahead': int,
            'commits_behind': int
        }

        self.attribute_map = {
            'commits_ahead': 'commitsAhead',
            'commits_behind': 'commitsBehind'
        }

        self._commits_ahead = commits_ahead
        self._commits_behind = commits_behind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FetchGitAheadBehindResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FetchGitAheadBehindResponse of this FetchGitAheadBehindResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commits_ahead(self):
        """Gets the commits_ahead of this FetchGitAheadBehindResponse.

        The number of commits in the remote branch that are not in the workspace.

        :return: The commits_ahead of this FetchGitAheadBehindResponse.
        :rtype: int
        """
        return self._commits_ahead

    @commits_ahead.setter
    def commits_ahead(self, commits_ahead):
        """Sets the commits_ahead of this FetchGitAheadBehindResponse.

        The number of commits in the remote branch that are not in the workspace.

        :param commits_ahead: The commits_ahead of this FetchGitAheadBehindResponse.
        :type commits_ahead: int
        """

        self._commits_ahead = commits_ahead

    @property
    def commits_behind(self):
        """Gets the commits_behind of this FetchGitAheadBehindResponse.

        The number of commits in the workspace that are not in the remote branch.

        :return: The commits_behind of this FetchGitAheadBehindResponse.
        :rtype: int
        """
        return self._commits_behind

    @commits_behind.setter
    def commits_behind(self, commits_behind):
        """Sets the commits_behind of this FetchGitAheadBehindResponse.

        The number of commits in the workspace that are not in the remote branch.

        :param commits_behind: The commits_behind of this FetchGitAheadBehindResponse.
        :type commits_behind: int
        """

        self._commits_behind = commits_behind
