# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
from openapi_server import util


class InvocationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fully_refresh_incremental_tables_enabled: bool=None, included_tags: List[str]=None, included_targets: List[Target]=None, service_account: str=None, transitive_dependencies_included: bool=None, transitive_dependents_included: bool=None):
        """InvocationConfig - a model defined in OpenAPI

        :param fully_refresh_incremental_tables_enabled: The fully_refresh_incremental_tables_enabled of this InvocationConfig.
        :param included_tags: The included_tags of this InvocationConfig.
        :param included_targets: The included_targets of this InvocationConfig.
        :param service_account: The service_account of this InvocationConfig.
        :param transitive_dependencies_included: The transitive_dependencies_included of this InvocationConfig.
        :param transitive_dependents_included: The transitive_dependents_included of this InvocationConfig.
        """
        self.openapi_types = {
            'fully_refresh_incremental_tables_enabled': bool,
            'included_tags': List[str],
            'included_targets': List[Target],
            'service_account': str,
            'transitive_dependencies_included': bool,
            'transitive_dependents_included': bool
        }

        self.attribute_map = {
            'fully_refresh_incremental_tables_enabled': 'fullyRefreshIncrementalTablesEnabled',
            'included_tags': 'includedTags',
            'included_targets': 'includedTargets',
            'service_account': 'serviceAccount',
            'transitive_dependencies_included': 'transitiveDependenciesIncluded',
            'transitive_dependents_included': 'transitiveDependentsIncluded'
        }

        self._fully_refresh_incremental_tables_enabled = fully_refresh_incremental_tables_enabled
        self._included_tags = included_tags
        self._included_targets = included_targets
        self._service_account = service_account
        self._transitive_dependencies_included = transitive_dependencies_included
        self._transitive_dependents_included = transitive_dependents_included

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvocationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvocationConfig of this InvocationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fully_refresh_incremental_tables_enabled(self):
        """Gets the fully_refresh_incremental_tables_enabled of this InvocationConfig.

        Optional. When set to true, any incremental tables will be fully refreshed.

        :return: The fully_refresh_incremental_tables_enabled of this InvocationConfig.
        :rtype: bool
        """
        return self._fully_refresh_incremental_tables_enabled

    @fully_refresh_incremental_tables_enabled.setter
    def fully_refresh_incremental_tables_enabled(self, fully_refresh_incremental_tables_enabled):
        """Sets the fully_refresh_incremental_tables_enabled of this InvocationConfig.

        Optional. When set to true, any incremental tables will be fully refreshed.

        :param fully_refresh_incremental_tables_enabled: The fully_refresh_incremental_tables_enabled of this InvocationConfig.
        :type fully_refresh_incremental_tables_enabled: bool
        """

        self._fully_refresh_incremental_tables_enabled = fully_refresh_incremental_tables_enabled

    @property
    def included_tags(self):
        """Gets the included_tags of this InvocationConfig.

        Optional. The set of tags to include.

        :return: The included_tags of this InvocationConfig.
        :rtype: List[str]
        """
        return self._included_tags

    @included_tags.setter
    def included_tags(self, included_tags):
        """Sets the included_tags of this InvocationConfig.

        Optional. The set of tags to include.

        :param included_tags: The included_tags of this InvocationConfig.
        :type included_tags: List[str]
        """

        self._included_tags = included_tags

    @property
    def included_targets(self):
        """Gets the included_targets of this InvocationConfig.

        Optional. The set of action identifiers to include.

        :return: The included_targets of this InvocationConfig.
        :rtype: List[Target]
        """
        return self._included_targets

    @included_targets.setter
    def included_targets(self, included_targets):
        """Sets the included_targets of this InvocationConfig.

        Optional. The set of action identifiers to include.

        :param included_targets: The included_targets of this InvocationConfig.
        :type included_targets: List[Target]
        """

        self._included_targets = included_targets

    @property
    def service_account(self):
        """Gets the service_account of this InvocationConfig.

        Optional. The service account to run workflow invocations under.

        :return: The service_account of this InvocationConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this InvocationConfig.

        Optional. The service account to run workflow invocations under.

        :param service_account: The service_account of this InvocationConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def transitive_dependencies_included(self):
        """Gets the transitive_dependencies_included of this InvocationConfig.

        Optional. When set to true, transitive dependencies of included actions will be executed.

        :return: The transitive_dependencies_included of this InvocationConfig.
        :rtype: bool
        """
        return self._transitive_dependencies_included

    @transitive_dependencies_included.setter
    def transitive_dependencies_included(self, transitive_dependencies_included):
        """Sets the transitive_dependencies_included of this InvocationConfig.

        Optional. When set to true, transitive dependencies of included actions will be executed.

        :param transitive_dependencies_included: The transitive_dependencies_included of this InvocationConfig.
        :type transitive_dependencies_included: bool
        """

        self._transitive_dependencies_included = transitive_dependencies_included

    @property
    def transitive_dependents_included(self):
        """Gets the transitive_dependents_included of this InvocationConfig.

        Optional. When set to true, transitive dependents of included actions will be executed.

        :return: The transitive_dependents_included of this InvocationConfig.
        :rtype: bool
        """
        return self._transitive_dependents_included

    @transitive_dependents_included.setter
    def transitive_dependents_included(self, transitive_dependents_included):
        """Sets the transitive_dependents_included of this InvocationConfig.

        Optional. When set to true, transitive dependents of included actions will be executed.

        :param transitive_dependents_included: The transitive_dependents_included of this InvocationConfig.
        :type transitive_dependents_included: bool
        """

        self._transitive_dependents_included = transitive_dependents_included
