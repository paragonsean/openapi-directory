# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_author import CommitAuthor
from openapi_server import util


class CommitLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: CommitAuthor=None, commit_message: str=None, commit_sha: str=None, commit_time: str=None):
        """CommitLogEntry - a model defined in OpenAPI

        :param author: The author of this CommitLogEntry.
        :param commit_message: The commit_message of this CommitLogEntry.
        :param commit_sha: The commit_sha of this CommitLogEntry.
        :param commit_time: The commit_time of this CommitLogEntry.
        """
        self.openapi_types = {
            'author': CommitAuthor,
            'commit_message': str,
            'commit_sha': str,
            'commit_time': str
        }

        self.attribute_map = {
            'author': 'author',
            'commit_message': 'commitMessage',
            'commit_sha': 'commitSha',
            'commit_time': 'commitTime'
        }

        self._author = author
        self._commit_message = commit_message
        self._commit_sha = commit_sha
        self._commit_time = commit_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitLogEntry of this CommitLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CommitLogEntry.


        :return: The author of this CommitLogEntry.
        :rtype: CommitAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommitLogEntry.


        :param author: The author of this CommitLogEntry.
        :type author: CommitAuthor
        """

        self._author = author

    @property
    def commit_message(self):
        """Gets the commit_message of this CommitLogEntry.

        The commit message for this commit log entry.

        :return: The commit_message of this CommitLogEntry.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this CommitLogEntry.

        The commit message for this commit log entry.

        :param commit_message: The commit_message of this CommitLogEntry.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def commit_sha(self):
        """Gets the commit_sha of this CommitLogEntry.

        The commit SHA for this commit log entry.

        :return: The commit_sha of this CommitLogEntry.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this CommitLogEntry.

        The commit SHA for this commit log entry.

        :param commit_sha: The commit_sha of this CommitLogEntry.
        :type commit_sha: str
        """

        self._commit_sha = commit_sha

    @property
    def commit_time(self):
        """Gets the commit_time of this CommitLogEntry.

        Commit timestamp.

        :return: The commit_time of this CommitLogEntry.
        :rtype: str
        """
        return self._commit_time

    @commit_time.setter
    def commit_time(self, commit_time):
        """Sets the commit_time of this CommitLogEntry.

        Commit timestamp.

        :param commit_time: The commit_time of this CommitLogEntry.
        :type commit_time: str
        """

        self._commit_time = commit_time
