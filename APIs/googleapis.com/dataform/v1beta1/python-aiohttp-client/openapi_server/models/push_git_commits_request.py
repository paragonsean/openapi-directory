# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PushGitCommitsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remote_branch: str=None):
        """PushGitCommitsRequest - a model defined in OpenAPI

        :param remote_branch: The remote_branch of this PushGitCommitsRequest.
        """
        self.openapi_types = {
            'remote_branch': str
        }

        self.attribute_map = {
            'remote_branch': 'remoteBranch'
        }

        self._remote_branch = remote_branch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushGitCommitsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushGitCommitsRequest of this PushGitCommitsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remote_branch(self):
        """Gets the remote_branch of this PushGitCommitsRequest.

        Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository's default branch name will be used.

        :return: The remote_branch of this PushGitCommitsRequest.
        :rtype: str
        """
        return self._remote_branch

    @remote_branch.setter
    def remote_branch(self, remote_branch):
        """Sets the remote_branch of this PushGitCommitsRequest.

        Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository's default branch name will be used.

        :param remote_branch: The remote_branch of this PushGitCommitsRequest.
        :type remote_branch: str
        """

        self._remote_branch = remote_branch
