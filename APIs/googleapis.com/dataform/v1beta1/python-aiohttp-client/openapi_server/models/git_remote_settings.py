# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssh_authentication_config import SshAuthenticationConfig
from openapi_server import util


class GitRemoteSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_token_secret_version: str=None, default_branch: str=None, ssh_authentication_config: SshAuthenticationConfig=None, token_status: str=None, url: str=None):
        """GitRemoteSettings - a model defined in OpenAPI

        :param authentication_token_secret_version: The authentication_token_secret_version of this GitRemoteSettings.
        :param default_branch: The default_branch of this GitRemoteSettings.
        :param ssh_authentication_config: The ssh_authentication_config of this GitRemoteSettings.
        :param token_status: The token_status of this GitRemoteSettings.
        :param url: The url of this GitRemoteSettings.
        """
        self.openapi_types = {
            'authentication_token_secret_version': str,
            'default_branch': str,
            'ssh_authentication_config': SshAuthenticationConfig,
            'token_status': str,
            'url': str
        }

        self.attribute_map = {
            'authentication_token_secret_version': 'authenticationTokenSecretVersion',
            'default_branch': 'defaultBranch',
            'ssh_authentication_config': 'sshAuthenticationConfig',
            'token_status': 'tokenStatus',
            'url': 'url'
        }

        self._authentication_token_secret_version = authentication_token_secret_version
        self._default_branch = default_branch
        self._ssh_authentication_config = ssh_authentication_config
        self._token_status = token_status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitRemoteSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GitRemoteSettings of this GitRemoteSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_token_secret_version(self):
        """Gets the authentication_token_secret_version of this GitRemoteSettings.

        Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.

        :return: The authentication_token_secret_version of this GitRemoteSettings.
        :rtype: str
        """
        return self._authentication_token_secret_version

    @authentication_token_secret_version.setter
    def authentication_token_secret_version(self, authentication_token_secret_version):
        """Sets the authentication_token_secret_version of this GitRemoteSettings.

        Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.

        :param authentication_token_secret_version: The authentication_token_secret_version of this GitRemoteSettings.
        :type authentication_token_secret_version: str
        """

        self._authentication_token_secret_version = authentication_token_secret_version

    @property
    def default_branch(self):
        """Gets the default_branch of this GitRemoteSettings.

        Required. The Git remote's default branch name.

        :return: The default_branch of this GitRemoteSettings.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this GitRemoteSettings.

        Required. The Git remote's default branch name.

        :param default_branch: The default_branch of this GitRemoteSettings.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def ssh_authentication_config(self):
        """Gets the ssh_authentication_config of this GitRemoteSettings.


        :return: The ssh_authentication_config of this GitRemoteSettings.
        :rtype: SshAuthenticationConfig
        """
        return self._ssh_authentication_config

    @ssh_authentication_config.setter
    def ssh_authentication_config(self, ssh_authentication_config):
        """Sets the ssh_authentication_config of this GitRemoteSettings.


        :param ssh_authentication_config: The ssh_authentication_config of this GitRemoteSettings.
        :type ssh_authentication_config: SshAuthenticationConfig
        """

        self._ssh_authentication_config = ssh_authentication_config

    @property
    def token_status(self):
        """Gets the token_status of this GitRemoteSettings.

        Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus

        :return: The token_status of this GitRemoteSettings.
        :rtype: str
        """
        return self._token_status

    @token_status.setter
    def token_status(self, token_status):
        """Sets the token_status of this GitRemoteSettings.

        Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus

        :param token_status: The token_status of this GitRemoteSettings.
        :type token_status: str
        """
        allowed_values = ["TOKEN_STATUS_UNSPECIFIED", "NOT_FOUND", "INVALID", "VALID"]  # noqa: E501
        if token_status not in allowed_values:
            raise ValueError(
                "Invalid value for `token_status` ({0}), must be one of {1}"
                .format(token_status, allowed_values)
            )

        self._token_status = token_status

    @property
    def url(self):
        """Gets the url of this GitRemoteSettings.

        Required. The Git remote's URL.

        :return: The url of this GitRemoteSettings.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GitRemoteSettings.

        Required. The Git remote's URL.

        :param url: The url of this GitRemoteSettings.
        :type url: str
        """

        self._url = url
