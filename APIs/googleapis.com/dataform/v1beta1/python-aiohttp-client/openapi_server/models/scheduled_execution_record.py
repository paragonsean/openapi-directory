# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ScheduledExecutionRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_status: Status=None, execution_time: str=None, workflow_invocation: str=None):
        """ScheduledExecutionRecord - a model defined in OpenAPI

        :param error_status: The error_status of this ScheduledExecutionRecord.
        :param execution_time: The execution_time of this ScheduledExecutionRecord.
        :param workflow_invocation: The workflow_invocation of this ScheduledExecutionRecord.
        """
        self.openapi_types = {
            'error_status': Status,
            'execution_time': str,
            'workflow_invocation': str
        }

        self.attribute_map = {
            'error_status': 'errorStatus',
            'execution_time': 'executionTime',
            'workflow_invocation': 'workflowInvocation'
        }

        self._error_status = error_status
        self._execution_time = execution_time
        self._workflow_invocation = workflow_invocation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledExecutionRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledExecutionRecord of this ScheduledExecutionRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_status(self):
        """Gets the error_status of this ScheduledExecutionRecord.


        :return: The error_status of this ScheduledExecutionRecord.
        :rtype: Status
        """
        return self._error_status

    @error_status.setter
    def error_status(self, error_status):
        """Sets the error_status of this ScheduledExecutionRecord.


        :param error_status: The error_status of this ScheduledExecutionRecord.
        :type error_status: Status
        """

        self._error_status = error_status

    @property
    def execution_time(self):
        """Gets the execution_time of this ScheduledExecutionRecord.

        The timestamp of this execution attempt.

        :return: The execution_time of this ScheduledExecutionRecord.
        :rtype: str
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this ScheduledExecutionRecord.

        The timestamp of this execution attempt.

        :param execution_time: The execution_time of this ScheduledExecutionRecord.
        :type execution_time: str
        """

        self._execution_time = execution_time

    @property
    def workflow_invocation(self):
        """Gets the workflow_invocation of this ScheduledExecutionRecord.

        The name of the created workflow invocation, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/workflowInvocations/*`.

        :return: The workflow_invocation of this ScheduledExecutionRecord.
        :rtype: str
        """
        return self._workflow_invocation

    @workflow_invocation.setter
    def workflow_invocation(self, workflow_invocation):
        """Sets the workflow_invocation of this ScheduledExecutionRecord.

        The name of the created workflow invocation, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/workflowInvocations/*`.

        :param workflow_invocation: The workflow_invocation of this ScheduledExecutionRecord.
        :type workflow_invocation: str
        """

        self._workflow_invocation = workflow_invocation
