# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relation_descriptor import RelationDescriptor
from openapi_server.models.target import Target
from openapi_server import util


class Operations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependency_targets: List[Target]=None, disabled: bool=None, has_output: bool=None, queries: List[str]=None, relation_descriptor: RelationDescriptor=None, tags: List[str]=None):
        """Operations - a model defined in OpenAPI

        :param dependency_targets: The dependency_targets of this Operations.
        :param disabled: The disabled of this Operations.
        :param has_output: The has_output of this Operations.
        :param queries: The queries of this Operations.
        :param relation_descriptor: The relation_descriptor of this Operations.
        :param tags: The tags of this Operations.
        """
        self.openapi_types = {
            'dependency_targets': List[Target],
            'disabled': bool,
            'has_output': bool,
            'queries': List[str],
            'relation_descriptor': RelationDescriptor,
            'tags': List[str]
        }

        self.attribute_map = {
            'dependency_targets': 'dependencyTargets',
            'disabled': 'disabled',
            'has_output': 'hasOutput',
            'queries': 'queries',
            'relation_descriptor': 'relationDescriptor',
            'tags': 'tags'
        }

        self._dependency_targets = dependency_targets
        self._disabled = disabled
        self._has_output = has_output
        self._queries = queries
        self._relation_descriptor = relation_descriptor
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operations of this Operations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependency_targets(self):
        """Gets the dependency_targets of this Operations.

        A list of actions that this action depends on.

        :return: The dependency_targets of this Operations.
        :rtype: List[Target]
        """
        return self._dependency_targets

    @dependency_targets.setter
    def dependency_targets(self, dependency_targets):
        """Sets the dependency_targets of this Operations.

        A list of actions that this action depends on.

        :param dependency_targets: The dependency_targets of this Operations.
        :type dependency_targets: List[Target]
        """

        self._dependency_targets = dependency_targets

    @property
    def disabled(self):
        """Gets the disabled of this Operations.

        Whether this action is disabled (i.e. should not be run).

        :return: The disabled of this Operations.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Operations.

        Whether this action is disabled (i.e. should not be run).

        :param disabled: The disabled of this Operations.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def has_output(self):
        """Gets the has_output of this Operations.

        Whether these operations produce an output relation.

        :return: The has_output of this Operations.
        :rtype: bool
        """
        return self._has_output

    @has_output.setter
    def has_output(self, has_output):
        """Sets the has_output of this Operations.

        Whether these operations produce an output relation.

        :param has_output: The has_output of this Operations.
        :type has_output: bool
        """

        self._has_output = has_output

    @property
    def queries(self):
        """Gets the queries of this Operations.

        A list of arbitrary SQL statements that will be executed without alteration.

        :return: The queries of this Operations.
        :rtype: List[str]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this Operations.

        A list of arbitrary SQL statements that will be executed without alteration.

        :param queries: The queries of this Operations.
        :type queries: List[str]
        """

        self._queries = queries

    @property
    def relation_descriptor(self):
        """Gets the relation_descriptor of this Operations.


        :return: The relation_descriptor of this Operations.
        :rtype: RelationDescriptor
        """
        return self._relation_descriptor

    @relation_descriptor.setter
    def relation_descriptor(self, relation_descriptor):
        """Sets the relation_descriptor of this Operations.


        :param relation_descriptor: The relation_descriptor of this Operations.
        :type relation_descriptor: RelationDescriptor
        """

        self._relation_descriptor = relation_descriptor

    @property
    def tags(self):
        """Gets the tags of this Operations.

        Arbitrary, user-defined tags on this action.

        :return: The tags of this Operations.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Operations.

        Arbitrary, user-defined tags on this action.

        :param tags: The tags of this Operations.
        :type tags: List[str]
        """

        self._tags = tags
