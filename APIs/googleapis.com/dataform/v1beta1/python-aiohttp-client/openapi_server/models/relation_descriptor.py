# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_descriptor import ColumnDescriptor
from openapi_server import util


class RelationDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_labels: Dict[str, str]=None, columns: List[ColumnDescriptor]=None, description: str=None):
        """RelationDescriptor - a model defined in OpenAPI

        :param bigquery_labels: The bigquery_labels of this RelationDescriptor.
        :param columns: The columns of this RelationDescriptor.
        :param description: The description of this RelationDescriptor.
        """
        self.openapi_types = {
            'bigquery_labels': Dict[str, str],
            'columns': List[ColumnDescriptor],
            'description': str
        }

        self.attribute_map = {
            'bigquery_labels': 'bigqueryLabels',
            'columns': 'columns',
            'description': 'description'
        }

        self._bigquery_labels = bigquery_labels
        self._columns = columns
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationDescriptor of this RelationDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_labels(self):
        """Gets the bigquery_labels of this RelationDescriptor.

        A set of BigQuery labels that should be applied to the relation.

        :return: The bigquery_labels of this RelationDescriptor.
        :rtype: Dict[str, str]
        """
        return self._bigquery_labels

    @bigquery_labels.setter
    def bigquery_labels(self, bigquery_labels):
        """Sets the bigquery_labels of this RelationDescriptor.

        A set of BigQuery labels that should be applied to the relation.

        :param bigquery_labels: The bigquery_labels of this RelationDescriptor.
        :type bigquery_labels: Dict[str, str]
        """

        self._bigquery_labels = bigquery_labels

    @property
    def columns(self):
        """Gets the columns of this RelationDescriptor.

        A list of descriptions of columns within the relation.

        :return: The columns of this RelationDescriptor.
        :rtype: List[ColumnDescriptor]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this RelationDescriptor.

        A list of descriptions of columns within the relation.

        :param columns: The columns of this RelationDescriptor.
        :type columns: List[ColumnDescriptor]
        """

        self._columns = columns

    @property
    def description(self):
        """Gets the description of this RelationDescriptor.

        A text description of the relation.

        :return: The description of this RelationDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RelationDescriptor.

        A text description of the relation.

        :param description: The description of this RelationDescriptor.
        :type description: str
        """

        self._description = description
