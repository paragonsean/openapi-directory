# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server.models.invocation_config import InvocationConfig
from openapi_server import util


class WorkflowInvocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compilation_result: str=None, invocation_config: InvocationConfig=None, invocation_timing: Interval=None, name: str=None, resolved_compilation_result: str=None, state: str=None, workflow_config: str=None):
        """WorkflowInvocation - a model defined in OpenAPI

        :param compilation_result: The compilation_result of this WorkflowInvocation.
        :param invocation_config: The invocation_config of this WorkflowInvocation.
        :param invocation_timing: The invocation_timing of this WorkflowInvocation.
        :param name: The name of this WorkflowInvocation.
        :param resolved_compilation_result: The resolved_compilation_result of this WorkflowInvocation.
        :param state: The state of this WorkflowInvocation.
        :param workflow_config: The workflow_config of this WorkflowInvocation.
        """
        self.openapi_types = {
            'compilation_result': str,
            'invocation_config': InvocationConfig,
            'invocation_timing': Interval,
            'name': str,
            'resolved_compilation_result': str,
            'state': str,
            'workflow_config': str
        }

        self.attribute_map = {
            'compilation_result': 'compilationResult',
            'invocation_config': 'invocationConfig',
            'invocation_timing': 'invocationTiming',
            'name': 'name',
            'resolved_compilation_result': 'resolvedCompilationResult',
            'state': 'state',
            'workflow_config': 'workflowConfig'
        }

        self._compilation_result = compilation_result
        self._invocation_config = invocation_config
        self._invocation_timing = invocation_timing
        self._name = name
        self._resolved_compilation_result = resolved_compilation_result
        self._state = state
        self._workflow_config = workflow_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowInvocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowInvocation of this WorkflowInvocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compilation_result(self):
        """Gets the compilation_result of this WorkflowInvocation.

        Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.

        :return: The compilation_result of this WorkflowInvocation.
        :rtype: str
        """
        return self._compilation_result

    @compilation_result.setter
    def compilation_result(self, compilation_result):
        """Sets the compilation_result of this WorkflowInvocation.

        Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.

        :param compilation_result: The compilation_result of this WorkflowInvocation.
        :type compilation_result: str
        """

        self._compilation_result = compilation_result

    @property
    def invocation_config(self):
        """Gets the invocation_config of this WorkflowInvocation.


        :return: The invocation_config of this WorkflowInvocation.
        :rtype: InvocationConfig
        """
        return self._invocation_config

    @invocation_config.setter
    def invocation_config(self, invocation_config):
        """Sets the invocation_config of this WorkflowInvocation.


        :param invocation_config: The invocation_config of this WorkflowInvocation.
        :type invocation_config: InvocationConfig
        """

        self._invocation_config = invocation_config

    @property
    def invocation_timing(self):
        """Gets the invocation_timing of this WorkflowInvocation.


        :return: The invocation_timing of this WorkflowInvocation.
        :rtype: Interval
        """
        return self._invocation_timing

    @invocation_timing.setter
    def invocation_timing(self, invocation_timing):
        """Sets the invocation_timing of this WorkflowInvocation.


        :param invocation_timing: The invocation_timing of this WorkflowInvocation.
        :type invocation_timing: Interval
        """

        self._invocation_timing = invocation_timing

    @property
    def name(self):
        """Gets the name of this WorkflowInvocation.

        Output only. The workflow invocation's name.

        :return: The name of this WorkflowInvocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowInvocation.

        Output only. The workflow invocation's name.

        :param name: The name of this WorkflowInvocation.
        :type name: str
        """

        self._name = name

    @property
    def resolved_compilation_result(self):
        """Gets the resolved_compilation_result of this WorkflowInvocation.

        Output only. The resolved compilation result that was used to create this invocation. Will be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.

        :return: The resolved_compilation_result of this WorkflowInvocation.
        :rtype: str
        """
        return self._resolved_compilation_result

    @resolved_compilation_result.setter
    def resolved_compilation_result(self, resolved_compilation_result):
        """Sets the resolved_compilation_result of this WorkflowInvocation.

        Output only. The resolved compilation result that was used to create this invocation. Will be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.

        :param resolved_compilation_result: The resolved_compilation_result of this WorkflowInvocation.
        :type resolved_compilation_result: str
        """

        self._resolved_compilation_result = resolved_compilation_result

    @property
    def state(self):
        """Gets the state of this WorkflowInvocation.

        Output only. This workflow invocation's current state.

        :return: The state of this WorkflowInvocation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowInvocation.

        Output only. This workflow invocation's current state.

        :param state: The state of this WorkflowInvocation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "CANCELLED", "FAILED", "CANCELING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def workflow_config(self):
        """Gets the workflow_config of this WorkflowInvocation.

        Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.

        :return: The workflow_config of this WorkflowInvocation.
        :rtype: str
        """
        return self._workflow_config

    @workflow_config.setter
    def workflow_config(self, workflow_config):
        """Sets the workflow_config of this WorkflowInvocation.

        Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.

        :param workflow_config: The workflow_config of this WorkflowInvocation.
        :type workflow_config: str
        """

        self._workflow_config = workflow_config
