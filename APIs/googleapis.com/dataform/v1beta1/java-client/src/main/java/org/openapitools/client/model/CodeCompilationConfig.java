/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures various aspects of Dataform code compilation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeCompilationConfig {
  public static final String SERIALIZED_NAME_ASSERTION_SCHEMA = "assertionSchema";
  @SerializedName(SERIALIZED_NAME_ASSERTION_SCHEMA)
  private String assertionSchema;

  public static final String SERIALIZED_NAME_DATABASE_SUFFIX = "databaseSuffix";
  @SerializedName(SERIALIZED_NAME_DATABASE_SUFFIX)
  private String databaseSuffix;

  public static final String SERIALIZED_NAME_DEFAULT_DATABASE = "defaultDatabase";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DATABASE)
  private String defaultDatabase;

  public static final String SERIALIZED_NAME_DEFAULT_LOCATION = "defaultLocation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOCATION)
  private String defaultLocation;

  public static final String SERIALIZED_NAME_DEFAULT_SCHEMA = "defaultSchema";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SCHEMA)
  private String defaultSchema;

  public static final String SERIALIZED_NAME_SCHEMA_SUFFIX = "schemaSuffix";
  @SerializedName(SERIALIZED_NAME_SCHEMA_SUFFIX)
  private String schemaSuffix;

  public static final String SERIALIZED_NAME_TABLE_PREFIX = "tablePrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_PREFIX)
  private String tablePrefix;

  public static final String SERIALIZED_NAME_VARS = "vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private Map<String, String> vars = new HashMap<>();

  public CodeCompilationConfig() {
  }

  public CodeCompilationConfig assertionSchema(String assertionSchema) {
    this.assertionSchema = assertionSchema;
    return this;
  }

  /**
   * Optional. The default schema (BigQuery dataset ID) for assertions.
   * @return assertionSchema
   */
  @javax.annotation.Nullable
  public String getAssertionSchema() {
    return assertionSchema;
  }

  public void setAssertionSchema(String assertionSchema) {
    this.assertionSchema = assertionSchema;
  }


  public CodeCompilationConfig databaseSuffix(String databaseSuffix) {
    this.databaseSuffix = databaseSuffix;
    return this;
  }

  /**
   * Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
   * @return databaseSuffix
   */
  @javax.annotation.Nullable
  public String getDatabaseSuffix() {
    return databaseSuffix;
  }

  public void setDatabaseSuffix(String databaseSuffix) {
    this.databaseSuffix = databaseSuffix;
  }


  public CodeCompilationConfig defaultDatabase(String defaultDatabase) {
    this.defaultDatabase = defaultDatabase;
    return this;
  }

  /**
   * Optional. The default database (Google Cloud project ID).
   * @return defaultDatabase
   */
  @javax.annotation.Nullable
  public String getDefaultDatabase() {
    return defaultDatabase;
  }

  public void setDefaultDatabase(String defaultDatabase) {
    this.defaultDatabase = defaultDatabase;
  }


  public CodeCompilationConfig defaultLocation(String defaultLocation) {
    this.defaultLocation = defaultLocation;
    return this;
  }

  /**
   * Optional. The default BigQuery location to use. Defaults to \&quot;US\&quot;. See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
   * @return defaultLocation
   */
  @javax.annotation.Nullable
  public String getDefaultLocation() {
    return defaultLocation;
  }

  public void setDefaultLocation(String defaultLocation) {
    this.defaultLocation = defaultLocation;
  }


  public CodeCompilationConfig defaultSchema(String defaultSchema) {
    this.defaultSchema = defaultSchema;
    return this;
  }

  /**
   * Optional. The default schema (BigQuery dataset ID).
   * @return defaultSchema
   */
  @javax.annotation.Nullable
  public String getDefaultSchema() {
    return defaultSchema;
  }

  public void setDefaultSchema(String defaultSchema) {
    this.defaultSchema = defaultSchema;
  }


  public CodeCompilationConfig schemaSuffix(String schemaSuffix) {
    this.schemaSuffix = schemaSuffix;
    return this;
  }

  /**
   * Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
   * @return schemaSuffix
   */
  @javax.annotation.Nullable
  public String getSchemaSuffix() {
    return schemaSuffix;
  }

  public void setSchemaSuffix(String schemaSuffix) {
    this.schemaSuffix = schemaSuffix;
  }


  public CodeCompilationConfig tablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
    return this;
  }

  /**
   * Optional. The prefix that should be prepended to all table names.
   * @return tablePrefix
   */
  @javax.annotation.Nullable
  public String getTablePrefix() {
    return tablePrefix;
  }

  public void setTablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
  }


  public CodeCompilationConfig vars(Map<String, String> vars) {
    this.vars = vars;
    return this;
  }

  public CodeCompilationConfig putVarsItem(String key, String varsItem) {
    if (this.vars == null) {
      this.vars = new HashMap<>();
    }
    this.vars.put(key, varsItem);
    return this;
  }

  /**
   * Optional. User-defined variables that are made available to project code during compilation.
   * @return vars
   */
  @javax.annotation.Nullable
  public Map<String, String> getVars() {
    return vars;
  }

  public void setVars(Map<String, String> vars) {
    this.vars = vars;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeCompilationConfig codeCompilationConfig = (CodeCompilationConfig) o;
    return Objects.equals(this.assertionSchema, codeCompilationConfig.assertionSchema) &&
        Objects.equals(this.databaseSuffix, codeCompilationConfig.databaseSuffix) &&
        Objects.equals(this.defaultDatabase, codeCompilationConfig.defaultDatabase) &&
        Objects.equals(this.defaultLocation, codeCompilationConfig.defaultLocation) &&
        Objects.equals(this.defaultSchema, codeCompilationConfig.defaultSchema) &&
        Objects.equals(this.schemaSuffix, codeCompilationConfig.schemaSuffix) &&
        Objects.equals(this.tablePrefix, codeCompilationConfig.tablePrefix) &&
        Objects.equals(this.vars, codeCompilationConfig.vars);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assertionSchema, databaseSuffix, defaultDatabase, defaultLocation, defaultSchema, schemaSuffix, tablePrefix, vars);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeCompilationConfig {\n");
    sb.append("    assertionSchema: ").append(toIndentedString(assertionSchema)).append("\n");
    sb.append("    databaseSuffix: ").append(toIndentedString(databaseSuffix)).append("\n");
    sb.append("    defaultDatabase: ").append(toIndentedString(defaultDatabase)).append("\n");
    sb.append("    defaultLocation: ").append(toIndentedString(defaultLocation)).append("\n");
    sb.append("    defaultSchema: ").append(toIndentedString(defaultSchema)).append("\n");
    sb.append("    schemaSuffix: ").append(toIndentedString(schemaSuffix)).append("\n");
    sb.append("    tablePrefix: ").append(toIndentedString(tablePrefix)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assertionSchema");
    openapiFields.add("databaseSuffix");
    openapiFields.add("defaultDatabase");
    openapiFields.add("defaultLocation");
    openapiFields.add("defaultSchema");
    openapiFields.add("schemaSuffix");
    openapiFields.add("tablePrefix");
    openapiFields.add("vars");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeCompilationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeCompilationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeCompilationConfig is not found in the empty JSON string", CodeCompilationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeCompilationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeCompilationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assertionSchema") != null && !jsonObj.get("assertionSchema").isJsonNull()) && !jsonObj.get("assertionSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertionSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertionSchema").toString()));
      }
      if ((jsonObj.get("databaseSuffix") != null && !jsonObj.get("databaseSuffix").isJsonNull()) && !jsonObj.get("databaseSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseSuffix").toString()));
      }
      if ((jsonObj.get("defaultDatabase") != null && !jsonObj.get("defaultDatabase").isJsonNull()) && !jsonObj.get("defaultDatabase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDatabase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultDatabase").toString()));
      }
      if ((jsonObj.get("defaultLocation") != null && !jsonObj.get("defaultLocation").isJsonNull()) && !jsonObj.get("defaultLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLocation").toString()));
      }
      if ((jsonObj.get("defaultSchema") != null && !jsonObj.get("defaultSchema").isJsonNull()) && !jsonObj.get("defaultSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSchema").toString()));
      }
      if ((jsonObj.get("schemaSuffix") != null && !jsonObj.get("schemaSuffix").isJsonNull()) && !jsonObj.get("schemaSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaSuffix").toString()));
      }
      if ((jsonObj.get("tablePrefix") != null && !jsonObj.get("tablePrefix").isJsonNull()) && !jsonObj.get("tablePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tablePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tablePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeCompilationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeCompilationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeCompilationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeCompilationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeCompilationConfig>() {
           @Override
           public void write(JsonWriter out, CodeCompilationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeCompilationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeCompilationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeCompilationConfig
   * @throws IOException if the JSON string is invalid with respect to CodeCompilationConfig
   */
  public static CodeCompilationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeCompilationConfig.class);
  }

  /**
   * Convert an instance of CodeCompilationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

