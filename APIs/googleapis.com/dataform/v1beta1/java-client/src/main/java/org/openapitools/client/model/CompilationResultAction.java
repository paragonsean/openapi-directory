/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Assertion;
import org.openapitools.client.model.Declaration;
import org.openapitools.client.model.Operations;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single Dataform action in a compilation result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompilationResultAction {
  public static final String SERIALIZED_NAME_ASSERTION = "assertion";
  @SerializedName(SERIALIZED_NAME_ASSERTION)
  private Assertion assertion;

  public static final String SERIALIZED_NAME_CANONICAL_TARGET = "canonicalTarget";
  @SerializedName(SERIALIZED_NAME_CANONICAL_TARGET)
  private Target canonicalTarget;

  public static final String SERIALIZED_NAME_DECLARATION = "declaration";
  @SerializedName(SERIALIZED_NAME_DECLARATION)
  private Declaration declaration;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private Operations operations;

  public static final String SERIALIZED_NAME_RELATION = "relation";
  @SerializedName(SERIALIZED_NAME_RELATION)
  private Relation relation;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Target target;

  public CompilationResultAction() {
  }

  public CompilationResultAction assertion(Assertion assertion) {
    this.assertion = assertion;
    return this;
  }

  /**
   * Get assertion
   * @return assertion
   */
  @javax.annotation.Nullable
  public Assertion getAssertion() {
    return assertion;
  }

  public void setAssertion(Assertion assertion) {
    this.assertion = assertion;
  }


  public CompilationResultAction canonicalTarget(Target canonicalTarget) {
    this.canonicalTarget = canonicalTarget;
    return this;
  }

  /**
   * Get canonicalTarget
   * @return canonicalTarget
   */
  @javax.annotation.Nullable
  public Target getCanonicalTarget() {
    return canonicalTarget;
  }

  public void setCanonicalTarget(Target canonicalTarget) {
    this.canonicalTarget = canonicalTarget;
  }


  public CompilationResultAction declaration(Declaration declaration) {
    this.declaration = declaration;
    return this;
  }

  /**
   * Get declaration
   * @return declaration
   */
  @javax.annotation.Nullable
  public Declaration getDeclaration() {
    return declaration;
  }

  public void setDeclaration(Declaration declaration) {
    this.declaration = declaration;
  }


  public CompilationResultAction filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * The full path including filename in which this action is located, relative to the workspace root.
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public CompilationResultAction operations(Operations operations) {
    this.operations = operations;
    return this;
  }

  /**
   * Get operations
   * @return operations
   */
  @javax.annotation.Nullable
  public Operations getOperations() {
    return operations;
  }

  public void setOperations(Operations operations) {
    this.operations = operations;
  }


  public CompilationResultAction relation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * Get relation
   * @return relation
   */
  @javax.annotation.Nullable
  public Relation getRelation() {
    return relation;
  }

  public void setRelation(Relation relation) {
    this.relation = relation;
  }


  public CompilationResultAction target(Target target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public Target getTarget() {
    return target;
  }

  public void setTarget(Target target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompilationResultAction compilationResultAction = (CompilationResultAction) o;
    return Objects.equals(this.assertion, compilationResultAction.assertion) &&
        Objects.equals(this.canonicalTarget, compilationResultAction.canonicalTarget) &&
        Objects.equals(this.declaration, compilationResultAction.declaration) &&
        Objects.equals(this.filePath, compilationResultAction.filePath) &&
        Objects.equals(this.operations, compilationResultAction.operations) &&
        Objects.equals(this.relation, compilationResultAction.relation) &&
        Objects.equals(this.target, compilationResultAction.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assertion, canonicalTarget, declaration, filePath, operations, relation, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompilationResultAction {\n");
    sb.append("    assertion: ").append(toIndentedString(assertion)).append("\n");
    sb.append("    canonicalTarget: ").append(toIndentedString(canonicalTarget)).append("\n");
    sb.append("    declaration: ").append(toIndentedString(declaration)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assertion");
    openapiFields.add("canonicalTarget");
    openapiFields.add("declaration");
    openapiFields.add("filePath");
    openapiFields.add("operations");
    openapiFields.add("relation");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompilationResultAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompilationResultAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompilationResultAction is not found in the empty JSON string", CompilationResultAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompilationResultAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompilationResultAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assertion`
      if (jsonObj.get("assertion") != null && !jsonObj.get("assertion").isJsonNull()) {
        Assertion.validateJsonElement(jsonObj.get("assertion"));
      }
      // validate the optional field `canonicalTarget`
      if (jsonObj.get("canonicalTarget") != null && !jsonObj.get("canonicalTarget").isJsonNull()) {
        Target.validateJsonElement(jsonObj.get("canonicalTarget"));
      }
      // validate the optional field `declaration`
      if (jsonObj.get("declaration") != null && !jsonObj.get("declaration").isJsonNull()) {
        Declaration.validateJsonElement(jsonObj.get("declaration"));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      // validate the optional field `operations`
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull()) {
        Operations.validateJsonElement(jsonObj.get("operations"));
      }
      // validate the optional field `relation`
      if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
        Relation.validateJsonElement(jsonObj.get("relation"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        Target.validateJsonElement(jsonObj.get("target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompilationResultAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompilationResultAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompilationResultAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompilationResultAction.class));

       return (TypeAdapter<T>) new TypeAdapter<CompilationResultAction>() {
           @Override
           public void write(JsonWriter out, CompilationResultAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompilationResultAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompilationResultAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompilationResultAction
   * @throws IOException if the JSON string is invalid with respect to CompilationResultAction
   */
  public static CompilationResultAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompilationResultAction.class);
  }

  /**
   * Convert an instance of CompilationResultAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

