/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Includes various configuration options for a workflow invocation. If both &#x60;included_targets&#x60; and &#x60;included_tags&#x60; are unset, all actions will be included.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvocationConfig {
  public static final String SERIALIZED_NAME_FULLY_REFRESH_INCREMENTAL_TABLES_ENABLED = "fullyRefreshIncrementalTablesEnabled";
  @SerializedName(SERIALIZED_NAME_FULLY_REFRESH_INCREMENTAL_TABLES_ENABLED)
  private Boolean fullyRefreshIncrementalTablesEnabled;

  public static final String SERIALIZED_NAME_INCLUDED_TAGS = "includedTags";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TAGS)
  private List<String> includedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_TARGETS = "includedTargets";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TARGETS)
  private List<Target> includedTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_TRANSITIVE_DEPENDENCIES_INCLUDED = "transitiveDependenciesIncluded";
  @SerializedName(SERIALIZED_NAME_TRANSITIVE_DEPENDENCIES_INCLUDED)
  private Boolean transitiveDependenciesIncluded;

  public static final String SERIALIZED_NAME_TRANSITIVE_DEPENDENTS_INCLUDED = "transitiveDependentsIncluded";
  @SerializedName(SERIALIZED_NAME_TRANSITIVE_DEPENDENTS_INCLUDED)
  private Boolean transitiveDependentsIncluded;

  public InvocationConfig() {
  }

  public InvocationConfig fullyRefreshIncrementalTablesEnabled(Boolean fullyRefreshIncrementalTablesEnabled) {
    this.fullyRefreshIncrementalTablesEnabled = fullyRefreshIncrementalTablesEnabled;
    return this;
  }

  /**
   * Optional. When set to true, any incremental tables will be fully refreshed.
   * @return fullyRefreshIncrementalTablesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFullyRefreshIncrementalTablesEnabled() {
    return fullyRefreshIncrementalTablesEnabled;
  }

  public void setFullyRefreshIncrementalTablesEnabled(Boolean fullyRefreshIncrementalTablesEnabled) {
    this.fullyRefreshIncrementalTablesEnabled = fullyRefreshIncrementalTablesEnabled;
  }


  public InvocationConfig includedTags(List<String> includedTags) {
    this.includedTags = includedTags;
    return this;
  }

  public InvocationConfig addIncludedTagsItem(String includedTagsItem) {
    if (this.includedTags == null) {
      this.includedTags = new ArrayList<>();
    }
    this.includedTags.add(includedTagsItem);
    return this;
  }

  /**
   * Optional. The set of tags to include.
   * @return includedTags
   */
  @javax.annotation.Nullable
  public List<String> getIncludedTags() {
    return includedTags;
  }

  public void setIncludedTags(List<String> includedTags) {
    this.includedTags = includedTags;
  }


  public InvocationConfig includedTargets(List<Target> includedTargets) {
    this.includedTargets = includedTargets;
    return this;
  }

  public InvocationConfig addIncludedTargetsItem(Target includedTargetsItem) {
    if (this.includedTargets == null) {
      this.includedTargets = new ArrayList<>();
    }
    this.includedTargets.add(includedTargetsItem);
    return this;
  }

  /**
   * Optional. The set of action identifiers to include.
   * @return includedTargets
   */
  @javax.annotation.Nullable
  public List<Target> getIncludedTargets() {
    return includedTargets;
  }

  public void setIncludedTargets(List<Target> includedTargets) {
    this.includedTargets = includedTargets;
  }


  public InvocationConfig serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. The service account to run workflow invocations under.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public InvocationConfig transitiveDependenciesIncluded(Boolean transitiveDependenciesIncluded) {
    this.transitiveDependenciesIncluded = transitiveDependenciesIncluded;
    return this;
  }

  /**
   * Optional. When set to true, transitive dependencies of included actions will be executed.
   * @return transitiveDependenciesIncluded
   */
  @javax.annotation.Nullable
  public Boolean getTransitiveDependenciesIncluded() {
    return transitiveDependenciesIncluded;
  }

  public void setTransitiveDependenciesIncluded(Boolean transitiveDependenciesIncluded) {
    this.transitiveDependenciesIncluded = transitiveDependenciesIncluded;
  }


  public InvocationConfig transitiveDependentsIncluded(Boolean transitiveDependentsIncluded) {
    this.transitiveDependentsIncluded = transitiveDependentsIncluded;
    return this;
  }

  /**
   * Optional. When set to true, transitive dependents of included actions will be executed.
   * @return transitiveDependentsIncluded
   */
  @javax.annotation.Nullable
  public Boolean getTransitiveDependentsIncluded() {
    return transitiveDependentsIncluded;
  }

  public void setTransitiveDependentsIncluded(Boolean transitiveDependentsIncluded) {
    this.transitiveDependentsIncluded = transitiveDependentsIncluded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvocationConfig invocationConfig = (InvocationConfig) o;
    return Objects.equals(this.fullyRefreshIncrementalTablesEnabled, invocationConfig.fullyRefreshIncrementalTablesEnabled) &&
        Objects.equals(this.includedTags, invocationConfig.includedTags) &&
        Objects.equals(this.includedTargets, invocationConfig.includedTargets) &&
        Objects.equals(this.serviceAccount, invocationConfig.serviceAccount) &&
        Objects.equals(this.transitiveDependenciesIncluded, invocationConfig.transitiveDependenciesIncluded) &&
        Objects.equals(this.transitiveDependentsIncluded, invocationConfig.transitiveDependentsIncluded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullyRefreshIncrementalTablesEnabled, includedTags, includedTargets, serviceAccount, transitiveDependenciesIncluded, transitiveDependentsIncluded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvocationConfig {\n");
    sb.append("    fullyRefreshIncrementalTablesEnabled: ").append(toIndentedString(fullyRefreshIncrementalTablesEnabled)).append("\n");
    sb.append("    includedTags: ").append(toIndentedString(includedTags)).append("\n");
    sb.append("    includedTargets: ").append(toIndentedString(includedTargets)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    transitiveDependenciesIncluded: ").append(toIndentedString(transitiveDependenciesIncluded)).append("\n");
    sb.append("    transitiveDependentsIncluded: ").append(toIndentedString(transitiveDependentsIncluded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullyRefreshIncrementalTablesEnabled");
    openapiFields.add("includedTags");
    openapiFields.add("includedTargets");
    openapiFields.add("serviceAccount");
    openapiFields.add("transitiveDependenciesIncluded");
    openapiFields.add("transitiveDependentsIncluded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvocationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvocationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvocationConfig is not found in the empty JSON string", InvocationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvocationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvocationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTags") != null && !jsonObj.get("includedTags").isJsonNull() && !jsonObj.get("includedTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTags` to be an array in the JSON string but got `%s`", jsonObj.get("includedTags").toString()));
      }
      if (jsonObj.get("includedTargets") != null && !jsonObj.get("includedTargets").isJsonNull()) {
        JsonArray jsonArrayincludedTargets = jsonObj.getAsJsonArray("includedTargets");
        if (jsonArrayincludedTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedTargets` to be an array in the JSON string but got `%s`", jsonObj.get("includedTargets").toString()));
          }

          // validate the optional field `includedTargets` (array)
          for (int i = 0; i < jsonArrayincludedTargets.size(); i++) {
            Target.validateJsonElement(jsonArrayincludedTargets.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvocationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvocationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvocationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvocationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InvocationConfig>() {
           @Override
           public void write(JsonWriter out, InvocationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvocationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvocationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvocationConfig
   * @throws IOException if the JSON string is invalid with respect to InvocationConfig
   */
  public static InvocationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvocationConfig.class);
  }

  /**
   * Convert an instance of InvocationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

