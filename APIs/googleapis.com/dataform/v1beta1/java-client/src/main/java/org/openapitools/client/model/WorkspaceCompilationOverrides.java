/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures workspace compilation overrides for a repository. Primarily used by the UI (&#x60;console.cloud.google.com&#x60;). &#x60;schema_suffix&#x60; and &#x60;table_prefix&#x60; can have a special expression - &#x60;${workspaceName}&#x60;, which refers to the workspace name from which the compilation results will be created. API callers are expected to resolve the expression in these overrides and provide them explicitly in &#x60;code_compilation_config&#x60; (https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories.compilationResults#codecompilationconfig) when creating workspace-scoped compilation results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceCompilationOverrides {
  public static final String SERIALIZED_NAME_DEFAULT_DATABASE = "defaultDatabase";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DATABASE)
  private String defaultDatabase;

  public static final String SERIALIZED_NAME_SCHEMA_SUFFIX = "schemaSuffix";
  @SerializedName(SERIALIZED_NAME_SCHEMA_SUFFIX)
  private String schemaSuffix;

  public static final String SERIALIZED_NAME_TABLE_PREFIX = "tablePrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_PREFIX)
  private String tablePrefix;

  public WorkspaceCompilationOverrides() {
  }

  public WorkspaceCompilationOverrides defaultDatabase(String defaultDatabase) {
    this.defaultDatabase = defaultDatabase;
    return this;
  }

  /**
   * Optional. The default database (Google Cloud project ID).
   * @return defaultDatabase
   */
  @javax.annotation.Nullable
  public String getDefaultDatabase() {
    return defaultDatabase;
  }

  public void setDefaultDatabase(String defaultDatabase) {
    this.defaultDatabase = defaultDatabase;
  }


  public WorkspaceCompilationOverrides schemaSuffix(String schemaSuffix) {
    this.schemaSuffix = schemaSuffix;
    return this;
  }

  /**
   * Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
   * @return schemaSuffix
   */
  @javax.annotation.Nullable
  public String getSchemaSuffix() {
    return schemaSuffix;
  }

  public void setSchemaSuffix(String schemaSuffix) {
    this.schemaSuffix = schemaSuffix;
  }


  public WorkspaceCompilationOverrides tablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
    return this;
  }

  /**
   * Optional. The prefix that should be prepended to all table names.
   * @return tablePrefix
   */
  @javax.annotation.Nullable
  public String getTablePrefix() {
    return tablePrefix;
  }

  public void setTablePrefix(String tablePrefix) {
    this.tablePrefix = tablePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceCompilationOverrides workspaceCompilationOverrides = (WorkspaceCompilationOverrides) o;
    return Objects.equals(this.defaultDatabase, workspaceCompilationOverrides.defaultDatabase) &&
        Objects.equals(this.schemaSuffix, workspaceCompilationOverrides.schemaSuffix) &&
        Objects.equals(this.tablePrefix, workspaceCompilationOverrides.tablePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultDatabase, schemaSuffix, tablePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceCompilationOverrides {\n");
    sb.append("    defaultDatabase: ").append(toIndentedString(defaultDatabase)).append("\n");
    sb.append("    schemaSuffix: ").append(toIndentedString(schemaSuffix)).append("\n");
    sb.append("    tablePrefix: ").append(toIndentedString(tablePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultDatabase");
    openapiFields.add("schemaSuffix");
    openapiFields.add("tablePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceCompilationOverrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceCompilationOverrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceCompilationOverrides is not found in the empty JSON string", WorkspaceCompilationOverrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceCompilationOverrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceCompilationOverrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultDatabase") != null && !jsonObj.get("defaultDatabase").isJsonNull()) && !jsonObj.get("defaultDatabase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDatabase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultDatabase").toString()));
      }
      if ((jsonObj.get("schemaSuffix") != null && !jsonObj.get("schemaSuffix").isJsonNull()) && !jsonObj.get("schemaSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaSuffix").toString()));
      }
      if ((jsonObj.get("tablePrefix") != null && !jsonObj.get("tablePrefix").isJsonNull()) && !jsonObj.get("tablePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tablePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tablePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceCompilationOverrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceCompilationOverrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceCompilationOverrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceCompilationOverrides.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceCompilationOverrides>() {
           @Override
           public void write(JsonWriter out, WorkspaceCompilationOverrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceCompilationOverrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceCompilationOverrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceCompilationOverrides
   * @throws IOException if the JSON string is invalid with respect to WorkspaceCompilationOverrides
   */
  public static WorkspaceCompilationOverrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceCompilationOverrides.class);
  }

  /**
   * Convert an instance of WorkspaceCompilationOverrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

