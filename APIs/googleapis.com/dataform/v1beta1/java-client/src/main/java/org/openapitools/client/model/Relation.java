/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IncrementalTableConfig;
import org.openapitools.client.model.RelationDescriptor;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a database relation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relation {
  public static final String SERIALIZED_NAME_ADDITIONAL_OPTIONS = "additionalOptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OPTIONS)
  private Map<String, String> additionalOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_CLUSTER_EXPRESSIONS = "clusterExpressions";
  @SerializedName(SERIALIZED_NAME_CLUSTER_EXPRESSIONS)
  private List<String> clusterExpressions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDENCY_TARGETS = "dependencyTargets";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_TARGETS)
  private List<Target> dependencyTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_INCREMENTAL_TABLE_CONFIG = "incrementalTableConfig";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_TABLE_CONFIG)
  private IncrementalTableConfig incrementalTableConfig;

  public static final String SERIALIZED_NAME_PARTITION_EXPIRATION_DAYS = "partitionExpirationDays";
  @SerializedName(SERIALIZED_NAME_PARTITION_EXPIRATION_DAYS)
  private Integer partitionExpirationDays;

  public static final String SERIALIZED_NAME_PARTITION_EXPRESSION = "partitionExpression";
  @SerializedName(SERIALIZED_NAME_PARTITION_EXPRESSION)
  private String partitionExpression;

  public static final String SERIALIZED_NAME_POST_OPERATIONS = "postOperations";
  @SerializedName(SERIALIZED_NAME_POST_OPERATIONS)
  private List<String> postOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRE_OPERATIONS = "preOperations";
  @SerializedName(SERIALIZED_NAME_PRE_OPERATIONS)
  private List<String> preOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATION_DESCRIPTOR = "relationDescriptor";
  @SerializedName(SERIALIZED_NAME_RELATION_DESCRIPTOR)
  private RelationDescriptor relationDescriptor;

  /**
   * The type of this relation.
   */
  @JsonAdapter(RelationTypeEnum.Adapter.class)
  public enum RelationTypeEnum {
    RELATION_TYPE_UNSPECIFIED("RELATION_TYPE_UNSPECIFIED"),
    
    TABLE("TABLE"),
    
    VIEW("VIEW"),
    
    INCREMENTAL_TABLE("INCREMENTAL_TABLE"),
    
    MATERIALIZED_VIEW("MATERIALIZED_VIEW");

    private String value;

    RelationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationTypeEnum fromValue(String value) {
      for (RelationTypeEnum b : RelationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relationType";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private RelationTypeEnum relationType;

  public static final String SERIALIZED_NAME_REQUIRE_PARTITION_FILTER = "requirePartitionFilter";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PARTITION_FILTER)
  private Boolean requirePartitionFilter;

  public static final String SERIALIZED_NAME_SELECT_QUERY = "selectQuery";
  @SerializedName(SERIALIZED_NAME_SELECT_QUERY)
  private String selectQuery;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Relation() {
  }

  public Relation additionalOptions(Map<String, String> additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  public Relation putAdditionalOptionsItem(String key, String additionalOptionsItem) {
    if (this.additionalOptions == null) {
      this.additionalOptions = new HashMap<>();
    }
    this.additionalOptions.put(key, additionalOptionsItem);
    return this;
  }

  /**
   * Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.
   * @return additionalOptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(Map<String, String> additionalOptions) {
    this.additionalOptions = additionalOptions;
  }


  public Relation clusterExpressions(List<String> clusterExpressions) {
    this.clusterExpressions = clusterExpressions;
    return this;
  }

  public Relation addClusterExpressionsItem(String clusterExpressionsItem) {
    if (this.clusterExpressions == null) {
      this.clusterExpressions = new ArrayList<>();
    }
    this.clusterExpressions.add(clusterExpressionsItem);
    return this;
  }

  /**
   * A list of columns or SQL expressions used to cluster the table.
   * @return clusterExpressions
   */
  @javax.annotation.Nullable
  public List<String> getClusterExpressions() {
    return clusterExpressions;
  }

  public void setClusterExpressions(List<String> clusterExpressions) {
    this.clusterExpressions = clusterExpressions;
  }


  public Relation dependencyTargets(List<Target> dependencyTargets) {
    this.dependencyTargets = dependencyTargets;
    return this;
  }

  public Relation addDependencyTargetsItem(Target dependencyTargetsItem) {
    if (this.dependencyTargets == null) {
      this.dependencyTargets = new ArrayList<>();
    }
    this.dependencyTargets.add(dependencyTargetsItem);
    return this;
  }

  /**
   * A list of actions that this action depends on.
   * @return dependencyTargets
   */
  @javax.annotation.Nullable
  public List<Target> getDependencyTargets() {
    return dependencyTargets;
  }

  public void setDependencyTargets(List<Target> dependencyTargets) {
    this.dependencyTargets = dependencyTargets;
  }


  public Relation disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether this action is disabled (i.e. should not be run).
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Relation incrementalTableConfig(IncrementalTableConfig incrementalTableConfig) {
    this.incrementalTableConfig = incrementalTableConfig;
    return this;
  }

  /**
   * Get incrementalTableConfig
   * @return incrementalTableConfig
   */
  @javax.annotation.Nullable
  public IncrementalTableConfig getIncrementalTableConfig() {
    return incrementalTableConfig;
  }

  public void setIncrementalTableConfig(IncrementalTableConfig incrementalTableConfig) {
    this.incrementalTableConfig = incrementalTableConfig;
  }


  public Relation partitionExpirationDays(Integer partitionExpirationDays) {
    this.partitionExpirationDays = partitionExpirationDays;
    return this;
  }

  /**
   * Sets the partition expiration in days.
   * @return partitionExpirationDays
   */
  @javax.annotation.Nullable
  public Integer getPartitionExpirationDays() {
    return partitionExpirationDays;
  }

  public void setPartitionExpirationDays(Integer partitionExpirationDays) {
    this.partitionExpirationDays = partitionExpirationDays;
  }


  public Relation partitionExpression(String partitionExpression) {
    this.partitionExpression = partitionExpression;
    return this;
  }

  /**
   * The SQL expression used to partition the relation.
   * @return partitionExpression
   */
  @javax.annotation.Nullable
  public String getPartitionExpression() {
    return partitionExpression;
  }

  public void setPartitionExpression(String partitionExpression) {
    this.partitionExpression = partitionExpression;
  }


  public Relation postOperations(List<String> postOperations) {
    this.postOperations = postOperations;
    return this;
  }

  public Relation addPostOperationsItem(String postOperationsItem) {
    if (this.postOperations == null) {
      this.postOperations = new ArrayList<>();
    }
    this.postOperations.add(postOperationsItem);
    return this;
  }

  /**
   * SQL statements to be executed after creating the relation.
   * @return postOperations
   */
  @javax.annotation.Nullable
  public List<String> getPostOperations() {
    return postOperations;
  }

  public void setPostOperations(List<String> postOperations) {
    this.postOperations = postOperations;
  }


  public Relation preOperations(List<String> preOperations) {
    this.preOperations = preOperations;
    return this;
  }

  public Relation addPreOperationsItem(String preOperationsItem) {
    if (this.preOperations == null) {
      this.preOperations = new ArrayList<>();
    }
    this.preOperations.add(preOperationsItem);
    return this;
  }

  /**
   * SQL statements to be executed before creating the relation.
   * @return preOperations
   */
  @javax.annotation.Nullable
  public List<String> getPreOperations() {
    return preOperations;
  }

  public void setPreOperations(List<String> preOperations) {
    this.preOperations = preOperations;
  }


  public Relation relationDescriptor(RelationDescriptor relationDescriptor) {
    this.relationDescriptor = relationDescriptor;
    return this;
  }

  /**
   * Get relationDescriptor
   * @return relationDescriptor
   */
  @javax.annotation.Nullable
  public RelationDescriptor getRelationDescriptor() {
    return relationDescriptor;
  }

  public void setRelationDescriptor(RelationDescriptor relationDescriptor) {
    this.relationDescriptor = relationDescriptor;
  }


  public Relation relationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
    return this;
  }

  /**
   * The type of this relation.
   * @return relationType
   */
  @javax.annotation.Nullable
  public RelationTypeEnum getRelationType() {
    return relationType;
  }

  public void setRelationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
  }


  public Relation requirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
    return this;
  }

  /**
   * Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.
   * @return requirePartitionFilter
   */
  @javax.annotation.Nullable
  public Boolean getRequirePartitionFilter() {
    return requirePartitionFilter;
  }

  public void setRequirePartitionFilter(Boolean requirePartitionFilter) {
    this.requirePartitionFilter = requirePartitionFilter;
  }


  public Relation selectQuery(String selectQuery) {
    this.selectQuery = selectQuery;
    return this;
  }

  /**
   * The SELECT query which returns rows which this relation should contain.
   * @return selectQuery
   */
  @javax.annotation.Nullable
  public String getSelectQuery() {
    return selectQuery;
  }

  public void setSelectQuery(String selectQuery) {
    this.selectQuery = selectQuery;
  }


  public Relation tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Relation addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Arbitrary, user-defined tags on this action.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relation relation = (Relation) o;
    return Objects.equals(this.additionalOptions, relation.additionalOptions) &&
        Objects.equals(this.clusterExpressions, relation.clusterExpressions) &&
        Objects.equals(this.dependencyTargets, relation.dependencyTargets) &&
        Objects.equals(this.disabled, relation.disabled) &&
        Objects.equals(this.incrementalTableConfig, relation.incrementalTableConfig) &&
        Objects.equals(this.partitionExpirationDays, relation.partitionExpirationDays) &&
        Objects.equals(this.partitionExpression, relation.partitionExpression) &&
        Objects.equals(this.postOperations, relation.postOperations) &&
        Objects.equals(this.preOperations, relation.preOperations) &&
        Objects.equals(this.relationDescriptor, relation.relationDescriptor) &&
        Objects.equals(this.relationType, relation.relationType) &&
        Objects.equals(this.requirePartitionFilter, relation.requirePartitionFilter) &&
        Objects.equals(this.selectQuery, relation.selectQuery) &&
        Objects.equals(this.tags, relation.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalOptions, clusterExpressions, dependencyTargets, disabled, incrementalTableConfig, partitionExpirationDays, partitionExpression, postOperations, preOperations, relationDescriptor, relationType, requirePartitionFilter, selectQuery, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relation {\n");
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    clusterExpressions: ").append(toIndentedString(clusterExpressions)).append("\n");
    sb.append("    dependencyTargets: ").append(toIndentedString(dependencyTargets)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    incrementalTableConfig: ").append(toIndentedString(incrementalTableConfig)).append("\n");
    sb.append("    partitionExpirationDays: ").append(toIndentedString(partitionExpirationDays)).append("\n");
    sb.append("    partitionExpression: ").append(toIndentedString(partitionExpression)).append("\n");
    sb.append("    postOperations: ").append(toIndentedString(postOperations)).append("\n");
    sb.append("    preOperations: ").append(toIndentedString(preOperations)).append("\n");
    sb.append("    relationDescriptor: ").append(toIndentedString(relationDescriptor)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    requirePartitionFilter: ").append(toIndentedString(requirePartitionFilter)).append("\n");
    sb.append("    selectQuery: ").append(toIndentedString(selectQuery)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalOptions");
    openapiFields.add("clusterExpressions");
    openapiFields.add("dependencyTargets");
    openapiFields.add("disabled");
    openapiFields.add("incrementalTableConfig");
    openapiFields.add("partitionExpirationDays");
    openapiFields.add("partitionExpression");
    openapiFields.add("postOperations");
    openapiFields.add("preOperations");
    openapiFields.add("relationDescriptor");
    openapiFields.add("relationType");
    openapiFields.add("requirePartitionFilter");
    openapiFields.add("selectQuery");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relation is not found in the empty JSON string", Relation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterExpressions") != null && !jsonObj.get("clusterExpressions").isJsonNull() && !jsonObj.get("clusterExpressions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterExpressions` to be an array in the JSON string but got `%s`", jsonObj.get("clusterExpressions").toString()));
      }
      if (jsonObj.get("dependencyTargets") != null && !jsonObj.get("dependencyTargets").isJsonNull()) {
        JsonArray jsonArraydependencyTargets = jsonObj.getAsJsonArray("dependencyTargets");
        if (jsonArraydependencyTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencyTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencyTargets` to be an array in the JSON string but got `%s`", jsonObj.get("dependencyTargets").toString()));
          }

          // validate the optional field `dependencyTargets` (array)
          for (int i = 0; i < jsonArraydependencyTargets.size(); i++) {
            Target.validateJsonElement(jsonArraydependencyTargets.get(i));
          };
        }
      }
      // validate the optional field `incrementalTableConfig`
      if (jsonObj.get("incrementalTableConfig") != null && !jsonObj.get("incrementalTableConfig").isJsonNull()) {
        IncrementalTableConfig.validateJsonElement(jsonObj.get("incrementalTableConfig"));
      }
      if ((jsonObj.get("partitionExpression") != null && !jsonObj.get("partitionExpression").isJsonNull()) && !jsonObj.get("partitionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionExpression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postOperations") != null && !jsonObj.get("postOperations").isJsonNull() && !jsonObj.get("postOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postOperations` to be an array in the JSON string but got `%s`", jsonObj.get("postOperations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("preOperations") != null && !jsonObj.get("preOperations").isJsonNull() && !jsonObj.get("preOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `preOperations` to be an array in the JSON string but got `%s`", jsonObj.get("preOperations").toString()));
      }
      // validate the optional field `relationDescriptor`
      if (jsonObj.get("relationDescriptor") != null && !jsonObj.get("relationDescriptor").isJsonNull()) {
        RelationDescriptor.validateJsonElement(jsonObj.get("relationDescriptor"));
      }
      if ((jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) && !jsonObj.get("relationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationType").toString()));
      }
      // validate the optional field `relationType`
      if (jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) {
        RelationTypeEnum.validateJsonElement(jsonObj.get("relationType"));
      }
      if ((jsonObj.get("selectQuery") != null && !jsonObj.get("selectQuery").isJsonNull()) && !jsonObj.get("selectQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectQuery").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relation.class));

       return (TypeAdapter<T>) new TypeAdapter<Relation>() {
           @Override
           public void write(JsonWriter out, Relation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relation
   * @throws IOException if the JSON string is invalid with respect to Relation
   */
  public static Relation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relation.class);
  }

  /**
   * Convert an instance of Relation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

