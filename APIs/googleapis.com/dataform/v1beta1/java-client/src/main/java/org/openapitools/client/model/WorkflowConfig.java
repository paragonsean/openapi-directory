/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvocationConfig;
import org.openapitools.client.model.ScheduledExecutionRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Dataform workflow configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowConfig {
  public static final String SERIALIZED_NAME_CRON_SCHEDULE = "cronSchedule";
  @SerializedName(SERIALIZED_NAME_CRON_SCHEDULE)
  private String cronSchedule;

  public static final String SERIALIZED_NAME_INVOCATION_CONFIG = "invocationConfig";
  @SerializedName(SERIALIZED_NAME_INVOCATION_CONFIG)
  private InvocationConfig invocationConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECENT_SCHEDULED_EXECUTION_RECORDS = "recentScheduledExecutionRecords";
  @SerializedName(SERIALIZED_NAME_RECENT_SCHEDULED_EXECUTION_RECORDS)
  private List<ScheduledExecutionRecord> recentScheduledExecutionRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_CONFIG = "releaseConfig";
  @SerializedName(SERIALIZED_NAME_RELEASE_CONFIG)
  private String releaseConfig;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public WorkflowConfig() {
  }

  public WorkflowConfig(
     String name, 
     List<ScheduledExecutionRecord> recentScheduledExecutionRecords
  ) {
    this();
    this.name = name;
    this.recentScheduledExecutionRecords = recentScheduledExecutionRecords;
  }

  public WorkflowConfig cronSchedule(String cronSchedule) {
    this.cronSchedule = cronSchedule;
    return this;
  }

  /**
   * Optional. Optional schedule (in cron format) for automatic execution of this workflow config.
   * @return cronSchedule
   */
  @javax.annotation.Nullable
  public String getCronSchedule() {
    return cronSchedule;
  }

  public void setCronSchedule(String cronSchedule) {
    this.cronSchedule = cronSchedule;
  }


  public WorkflowConfig invocationConfig(InvocationConfig invocationConfig) {
    this.invocationConfig = invocationConfig;
    return this;
  }

  /**
   * Get invocationConfig
   * @return invocationConfig
   */
  @javax.annotation.Nullable
  public InvocationConfig getInvocationConfig() {
    return invocationConfig;
  }

  public void setInvocationConfig(InvocationConfig invocationConfig) {
    this.invocationConfig = invocationConfig;
  }


  /**
   * Output only. The workflow config&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Records of the 10 most recent scheduled execution attempts, ordered in in descending order of &#x60;execution_time&#x60;. Updated whenever automatic creation of a workflow invocation is triggered by cron_schedule.
   * @return recentScheduledExecutionRecords
   */
  @javax.annotation.Nullable
  public List<ScheduledExecutionRecord> getRecentScheduledExecutionRecords() {
    return recentScheduledExecutionRecords;
  }



  public WorkflowConfig releaseConfig(String releaseConfig) {
    this.releaseConfig = releaseConfig;
    return this;
  }

  /**
   * Required. The name of the release config whose release_compilation_result should be executed. Must be in the format &#x60;projects/_*_/locations/_*_/repositories/_*_/releaseConfigs/_*&#x60;.
   * @return releaseConfig
   */
  @javax.annotation.Nullable
  public String getReleaseConfig() {
    return releaseConfig;
  }

  public void setReleaseConfig(String releaseConfig) {
    this.releaseConfig = releaseConfig;
  }


  public WorkflowConfig timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowConfig workflowConfig = (WorkflowConfig) o;
    return Objects.equals(this.cronSchedule, workflowConfig.cronSchedule) &&
        Objects.equals(this.invocationConfig, workflowConfig.invocationConfig) &&
        Objects.equals(this.name, workflowConfig.name) &&
        Objects.equals(this.recentScheduledExecutionRecords, workflowConfig.recentScheduledExecutionRecords) &&
        Objects.equals(this.releaseConfig, workflowConfig.releaseConfig) &&
        Objects.equals(this.timeZone, workflowConfig.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cronSchedule, invocationConfig, name, recentScheduledExecutionRecords, releaseConfig, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowConfig {\n");
    sb.append("    cronSchedule: ").append(toIndentedString(cronSchedule)).append("\n");
    sb.append("    invocationConfig: ").append(toIndentedString(invocationConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recentScheduledExecutionRecords: ").append(toIndentedString(recentScheduledExecutionRecords)).append("\n");
    sb.append("    releaseConfig: ").append(toIndentedString(releaseConfig)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cronSchedule");
    openapiFields.add("invocationConfig");
    openapiFields.add("name");
    openapiFields.add("recentScheduledExecutionRecords");
    openapiFields.add("releaseConfig");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowConfig is not found in the empty JSON string", WorkflowConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cronSchedule") != null && !jsonObj.get("cronSchedule").isJsonNull()) && !jsonObj.get("cronSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronSchedule").toString()));
      }
      // validate the optional field `invocationConfig`
      if (jsonObj.get("invocationConfig") != null && !jsonObj.get("invocationConfig").isJsonNull()) {
        InvocationConfig.validateJsonElement(jsonObj.get("invocationConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("recentScheduledExecutionRecords") != null && !jsonObj.get("recentScheduledExecutionRecords").isJsonNull()) {
        JsonArray jsonArrayrecentScheduledExecutionRecords = jsonObj.getAsJsonArray("recentScheduledExecutionRecords");
        if (jsonArrayrecentScheduledExecutionRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recentScheduledExecutionRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recentScheduledExecutionRecords` to be an array in the JSON string but got `%s`", jsonObj.get("recentScheduledExecutionRecords").toString()));
          }

          // validate the optional field `recentScheduledExecutionRecords` (array)
          for (int i = 0; i < jsonArrayrecentScheduledExecutionRecords.size(); i++) {
            ScheduledExecutionRecord.validateJsonElement(jsonArrayrecentScheduledExecutionRecords.get(i));
          };
        }
      }
      if ((jsonObj.get("releaseConfig") != null && !jsonObj.get("releaseConfig").isJsonNull()) && !jsonObj.get("releaseConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseConfig").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowConfig>() {
           @Override
           public void write(JsonWriter out, WorkflowConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowConfig
   * @throws IOException if the JSON string is invalid with respect to WorkflowConfig
   */
  public static WorkflowConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowConfig.class);
  }

  /**
   * Convert an instance of WorkflowConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

