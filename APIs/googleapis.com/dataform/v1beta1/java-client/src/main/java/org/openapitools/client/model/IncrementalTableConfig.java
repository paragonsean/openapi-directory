/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains settings for relations of type &#x60;INCREMENTAL_TABLE&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IncrementalTableConfig {
  public static final String SERIALIZED_NAME_INCREMENTAL_POST_OPERATIONS = "incrementalPostOperations";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_POST_OPERATIONS)
  private List<String> incrementalPostOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCREMENTAL_PRE_OPERATIONS = "incrementalPreOperations";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_PRE_OPERATIONS)
  private List<String> incrementalPreOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCREMENTAL_SELECT_QUERY = "incrementalSelectQuery";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_SELECT_QUERY)
  private String incrementalSelectQuery;

  public static final String SERIALIZED_NAME_REFRESH_DISABLED = "refreshDisabled";
  @SerializedName(SERIALIZED_NAME_REFRESH_DISABLED)
  private Boolean refreshDisabled;

  public static final String SERIALIZED_NAME_UNIQUE_KEY_PARTS = "uniqueKeyParts";
  @SerializedName(SERIALIZED_NAME_UNIQUE_KEY_PARTS)
  private List<String> uniqueKeyParts = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_PARTITION_FILTER = "updatePartitionFilter";
  @SerializedName(SERIALIZED_NAME_UPDATE_PARTITION_FILTER)
  private String updatePartitionFilter;

  public IncrementalTableConfig() {
  }

  public IncrementalTableConfig incrementalPostOperations(List<String> incrementalPostOperations) {
    this.incrementalPostOperations = incrementalPostOperations;
    return this;
  }

  public IncrementalTableConfig addIncrementalPostOperationsItem(String incrementalPostOperationsItem) {
    if (this.incrementalPostOperations == null) {
      this.incrementalPostOperations = new ArrayList<>();
    }
    this.incrementalPostOperations.add(incrementalPostOperationsItem);
    return this;
  }

  /**
   * SQL statements to be executed after inserting new rows into the relation.
   * @return incrementalPostOperations
   */
  @javax.annotation.Nullable
  public List<String> getIncrementalPostOperations() {
    return incrementalPostOperations;
  }

  public void setIncrementalPostOperations(List<String> incrementalPostOperations) {
    this.incrementalPostOperations = incrementalPostOperations;
  }


  public IncrementalTableConfig incrementalPreOperations(List<String> incrementalPreOperations) {
    this.incrementalPreOperations = incrementalPreOperations;
    return this;
  }

  public IncrementalTableConfig addIncrementalPreOperationsItem(String incrementalPreOperationsItem) {
    if (this.incrementalPreOperations == null) {
      this.incrementalPreOperations = new ArrayList<>();
    }
    this.incrementalPreOperations.add(incrementalPreOperationsItem);
    return this;
  }

  /**
   * SQL statements to be executed before inserting new rows into the relation.
   * @return incrementalPreOperations
   */
  @javax.annotation.Nullable
  public List<String> getIncrementalPreOperations() {
    return incrementalPreOperations;
  }

  public void setIncrementalPreOperations(List<String> incrementalPreOperations) {
    this.incrementalPreOperations = incrementalPreOperations;
  }


  public IncrementalTableConfig incrementalSelectQuery(String incrementalSelectQuery) {
    this.incrementalSelectQuery = incrementalSelectQuery;
    return this;
  }

  /**
   * The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.
   * @return incrementalSelectQuery
   */
  @javax.annotation.Nullable
  public String getIncrementalSelectQuery() {
    return incrementalSelectQuery;
  }

  public void setIncrementalSelectQuery(String incrementalSelectQuery) {
    this.incrementalSelectQuery = incrementalSelectQuery;
  }


  public IncrementalTableConfig refreshDisabled(Boolean refreshDisabled) {
    this.refreshDisabled = refreshDisabled;
    return this;
  }

  /**
   * Whether this table should be protected from being refreshed.
   * @return refreshDisabled
   */
  @javax.annotation.Nullable
  public Boolean getRefreshDisabled() {
    return refreshDisabled;
  }

  public void setRefreshDisabled(Boolean refreshDisabled) {
    this.refreshDisabled = refreshDisabled;
  }


  public IncrementalTableConfig uniqueKeyParts(List<String> uniqueKeyParts) {
    this.uniqueKeyParts = uniqueKeyParts;
    return this;
  }

  public IncrementalTableConfig addUniqueKeyPartsItem(String uniqueKeyPartsItem) {
    if (this.uniqueKeyParts == null) {
      this.uniqueKeyParts = new ArrayList<>();
    }
    this.uniqueKeyParts.add(uniqueKeyPartsItem);
    return this;
  }

  /**
   * A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by &#x60;unique_key_parts&#x60;), only the newly selected rows (as defined by &#x60;incremental_select_query&#x60;) will be included in the relation.
   * @return uniqueKeyParts
   */
  @javax.annotation.Nullable
  public List<String> getUniqueKeyParts() {
    return uniqueKeyParts;
  }

  public void setUniqueKeyParts(List<String> uniqueKeyParts) {
    this.uniqueKeyParts = uniqueKeyParts;
  }


  public IncrementalTableConfig updatePartitionFilter(String updatePartitionFilter) {
    this.updatePartitionFilter = updatePartitionFilter;
    return this;
  }

  /**
   * A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see &#x60;unique_key_parts&#x60; for more information).
   * @return updatePartitionFilter
   */
  @javax.annotation.Nullable
  public String getUpdatePartitionFilter() {
    return updatePartitionFilter;
  }

  public void setUpdatePartitionFilter(String updatePartitionFilter) {
    this.updatePartitionFilter = updatePartitionFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncrementalTableConfig incrementalTableConfig = (IncrementalTableConfig) o;
    return Objects.equals(this.incrementalPostOperations, incrementalTableConfig.incrementalPostOperations) &&
        Objects.equals(this.incrementalPreOperations, incrementalTableConfig.incrementalPreOperations) &&
        Objects.equals(this.incrementalSelectQuery, incrementalTableConfig.incrementalSelectQuery) &&
        Objects.equals(this.refreshDisabled, incrementalTableConfig.refreshDisabled) &&
        Objects.equals(this.uniqueKeyParts, incrementalTableConfig.uniqueKeyParts) &&
        Objects.equals(this.updatePartitionFilter, incrementalTableConfig.updatePartitionFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(incrementalPostOperations, incrementalPreOperations, incrementalSelectQuery, refreshDisabled, uniqueKeyParts, updatePartitionFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncrementalTableConfig {\n");
    sb.append("    incrementalPostOperations: ").append(toIndentedString(incrementalPostOperations)).append("\n");
    sb.append("    incrementalPreOperations: ").append(toIndentedString(incrementalPreOperations)).append("\n");
    sb.append("    incrementalSelectQuery: ").append(toIndentedString(incrementalSelectQuery)).append("\n");
    sb.append("    refreshDisabled: ").append(toIndentedString(refreshDisabled)).append("\n");
    sb.append("    uniqueKeyParts: ").append(toIndentedString(uniqueKeyParts)).append("\n");
    sb.append("    updatePartitionFilter: ").append(toIndentedString(updatePartitionFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("incrementalPostOperations");
    openapiFields.add("incrementalPreOperations");
    openapiFields.add("incrementalSelectQuery");
    openapiFields.add("refreshDisabled");
    openapiFields.add("uniqueKeyParts");
    openapiFields.add("updatePartitionFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IncrementalTableConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IncrementalTableConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IncrementalTableConfig is not found in the empty JSON string", IncrementalTableConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IncrementalTableConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IncrementalTableConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("incrementalPostOperations") != null && !jsonObj.get("incrementalPostOperations").isJsonNull() && !jsonObj.get("incrementalPostOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `incrementalPostOperations` to be an array in the JSON string but got `%s`", jsonObj.get("incrementalPostOperations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("incrementalPreOperations") != null && !jsonObj.get("incrementalPreOperations").isJsonNull() && !jsonObj.get("incrementalPreOperations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `incrementalPreOperations` to be an array in the JSON string but got `%s`", jsonObj.get("incrementalPreOperations").toString()));
      }
      if ((jsonObj.get("incrementalSelectQuery") != null && !jsonObj.get("incrementalSelectQuery").isJsonNull()) && !jsonObj.get("incrementalSelectQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incrementalSelectQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incrementalSelectQuery").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uniqueKeyParts") != null && !jsonObj.get("uniqueKeyParts").isJsonNull() && !jsonObj.get("uniqueKeyParts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueKeyParts` to be an array in the JSON string but got `%s`", jsonObj.get("uniqueKeyParts").toString()));
      }
      if ((jsonObj.get("updatePartitionFilter") != null && !jsonObj.get("updatePartitionFilter").isJsonNull()) && !jsonObj.get("updatePartitionFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatePartitionFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatePartitionFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IncrementalTableConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IncrementalTableConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IncrementalTableConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IncrementalTableConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IncrementalTableConfig>() {
           @Override
           public void write(JsonWriter out, IncrementalTableConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IncrementalTableConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IncrementalTableConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IncrementalTableConfig
   * @throws IOException if the JSON string is invalid with respect to IncrementalTableConfig
   */
  public static IncrementalTableConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IncrementalTableConfig.class);
  }

  /**
   * Convert an instance of IncrementalTableConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

