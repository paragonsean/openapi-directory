/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SshAuthenticationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Controls Git remote configuration for a repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GitRemoteSettings {
  public static final String SERIALIZED_NAME_AUTHENTICATION_TOKEN_SECRET_VERSION = "authenticationTokenSecretVersion";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TOKEN_SECRET_VERSION)
  private String authenticationTokenSecretVersion;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "defaultBranch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_SSH_AUTHENTICATION_CONFIG = "sshAuthenticationConfig";
  @SerializedName(SERIALIZED_NAME_SSH_AUTHENTICATION_CONFIG)
  private SshAuthenticationConfig sshAuthenticationConfig;

  /**
   * Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus
   */
  @JsonAdapter(TokenStatusEnum.Adapter.class)
  public enum TokenStatusEnum {
    TOKEN_STATUS_UNSPECIFIED("TOKEN_STATUS_UNSPECIFIED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    INVALID("INVALID"),
    
    VALID("VALID");

    private String value;

    TokenStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenStatusEnum fromValue(String value) {
      for (TokenStatusEnum b : TokenStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TokenStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_STATUS = "tokenStatus";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TOKEN_STATUS)
  private TokenStatusEnum tokenStatus;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public GitRemoteSettings() {
  }

  public GitRemoteSettings(
     TokenStatusEnum tokenStatus
  ) {
    this();
    this.tokenStatus = tokenStatus;
  }

  public GitRemoteSettings authenticationTokenSecretVersion(String authenticationTokenSecretVersion) {
    this.authenticationTokenSecretVersion = authenticationTokenSecretVersion;
    return this;
  }

  /**
   * Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format &#x60;projects/_*_/secrets/_*_/versions/_*&#x60;.
   * @return authenticationTokenSecretVersion
   */
  @javax.annotation.Nullable
  public String getAuthenticationTokenSecretVersion() {
    return authenticationTokenSecretVersion;
  }

  public void setAuthenticationTokenSecretVersion(String authenticationTokenSecretVersion) {
    this.authenticationTokenSecretVersion = authenticationTokenSecretVersion;
  }


  public GitRemoteSettings defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Required. The Git remote&#39;s default branch name.
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public GitRemoteSettings sshAuthenticationConfig(SshAuthenticationConfig sshAuthenticationConfig) {
    this.sshAuthenticationConfig = sshAuthenticationConfig;
    return this;
  }

  /**
   * Get sshAuthenticationConfig
   * @return sshAuthenticationConfig
   */
  @javax.annotation.Nullable
  public SshAuthenticationConfig getSshAuthenticationConfig() {
    return sshAuthenticationConfig;
  }

  public void setSshAuthenticationConfig(SshAuthenticationConfig sshAuthenticationConfig) {
    this.sshAuthenticationConfig = sshAuthenticationConfig;
  }


  /**
   * Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus
   * @return tokenStatus
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TokenStatusEnum getTokenStatus() {
    return tokenStatus;
  }



  public GitRemoteSettings url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Required. The Git remote&#39;s URL.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitRemoteSettings gitRemoteSettings = (GitRemoteSettings) o;
    return Objects.equals(this.authenticationTokenSecretVersion, gitRemoteSettings.authenticationTokenSecretVersion) &&
        Objects.equals(this.defaultBranch, gitRemoteSettings.defaultBranch) &&
        Objects.equals(this.sshAuthenticationConfig, gitRemoteSettings.sshAuthenticationConfig) &&
        Objects.equals(this.tokenStatus, gitRemoteSettings.tokenStatus) &&
        Objects.equals(this.url, gitRemoteSettings.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationTokenSecretVersion, defaultBranch, sshAuthenticationConfig, tokenStatus, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitRemoteSettings {\n");
    sb.append("    authenticationTokenSecretVersion: ").append(toIndentedString(authenticationTokenSecretVersion)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    sshAuthenticationConfig: ").append(toIndentedString(sshAuthenticationConfig)).append("\n");
    sb.append("    tokenStatus: ").append(toIndentedString(tokenStatus)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationTokenSecretVersion");
    openapiFields.add("defaultBranch");
    openapiFields.add("sshAuthenticationConfig");
    openapiFields.add("tokenStatus");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GitRemoteSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GitRemoteSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GitRemoteSettings is not found in the empty JSON string", GitRemoteSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GitRemoteSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GitRemoteSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationTokenSecretVersion") != null && !jsonObj.get("authenticationTokenSecretVersion").isJsonNull()) && !jsonObj.get("authenticationTokenSecretVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationTokenSecretVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationTokenSecretVersion").toString()));
      }
      if ((jsonObj.get("defaultBranch") != null && !jsonObj.get("defaultBranch").isJsonNull()) && !jsonObj.get("defaultBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultBranch").toString()));
      }
      // validate the optional field `sshAuthenticationConfig`
      if (jsonObj.get("sshAuthenticationConfig") != null && !jsonObj.get("sshAuthenticationConfig").isJsonNull()) {
        SshAuthenticationConfig.validateJsonElement(jsonObj.get("sshAuthenticationConfig"));
      }
      if ((jsonObj.get("tokenStatus") != null && !jsonObj.get("tokenStatus").isJsonNull()) && !jsonObj.get("tokenStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenStatus").toString()));
      }
      // validate the optional field `tokenStatus`
      if (jsonObj.get("tokenStatus") != null && !jsonObj.get("tokenStatus").isJsonNull()) {
        TokenStatusEnum.validateJsonElement(jsonObj.get("tokenStatus"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GitRemoteSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GitRemoteSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GitRemoteSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GitRemoteSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GitRemoteSettings>() {
           @Override
           public void write(JsonWriter out, GitRemoteSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GitRemoteSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GitRemoteSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GitRemoteSettings
   * @throws IOException if the JSON string is invalid with respect to GitRemoteSettings
   */
  public static GitRemoteSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GitRemoteSettings.class);
  }

  /**
   * Convert an instance of GitRemoteSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

