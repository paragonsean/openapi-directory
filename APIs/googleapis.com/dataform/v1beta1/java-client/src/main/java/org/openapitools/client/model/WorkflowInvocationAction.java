/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BigQueryAction;
import org.openapitools.client.model.Interval;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single action in a workflow invocation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowInvocationAction {
  public static final String SERIALIZED_NAME_BIGQUERY_ACTION = "bigqueryAction";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_ACTION)
  private BigQueryAction bigqueryAction;

  public static final String SERIALIZED_NAME_CANONICAL_TARGET = "canonicalTarget";
  @SerializedName(SERIALIZED_NAME_CANONICAL_TARGET)
  private Target canonicalTarget;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_INVOCATION_TIMING = "invocationTiming";
  @SerializedName(SERIALIZED_NAME_INVOCATION_TIMING)
  private Interval invocationTiming;

  /**
   * Output only. This action&#39;s current state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    SKIPPED("SKIPPED"),
    
    DISABLED("DISABLED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Target target;

  public WorkflowInvocationAction() {
  }

  public WorkflowInvocationAction(
     String failureReason, 
     StateEnum state
  ) {
    this();
    this.failureReason = failureReason;
    this.state = state;
  }

  public WorkflowInvocationAction bigqueryAction(BigQueryAction bigqueryAction) {
    this.bigqueryAction = bigqueryAction;
    return this;
  }

  /**
   * Get bigqueryAction
   * @return bigqueryAction
   */
  @javax.annotation.Nullable
  public BigQueryAction getBigqueryAction() {
    return bigqueryAction;
  }

  public void setBigqueryAction(BigQueryAction bigqueryAction) {
    this.bigqueryAction = bigqueryAction;
  }


  public WorkflowInvocationAction canonicalTarget(Target canonicalTarget) {
    this.canonicalTarget = canonicalTarget;
    return this;
  }

  /**
   * Get canonicalTarget
   * @return canonicalTarget
   */
  @javax.annotation.Nullable
  public Target getCanonicalTarget() {
    return canonicalTarget;
  }

  public void setCanonicalTarget(Target canonicalTarget) {
    this.canonicalTarget = canonicalTarget;
  }


  /**
   * Output only. If and only if action&#39;s state is FAILED a failure reason is set.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }



  public WorkflowInvocationAction invocationTiming(Interval invocationTiming) {
    this.invocationTiming = invocationTiming;
    return this;
  }

  /**
   * Get invocationTiming
   * @return invocationTiming
   */
  @javax.annotation.Nullable
  public Interval getInvocationTiming() {
    return invocationTiming;
  }

  public void setInvocationTiming(Interval invocationTiming) {
    this.invocationTiming = invocationTiming;
  }


  /**
   * Output only. This action&#39;s current state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public WorkflowInvocationAction target(Target target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public Target getTarget() {
    return target;
  }

  public void setTarget(Target target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowInvocationAction workflowInvocationAction = (WorkflowInvocationAction) o;
    return Objects.equals(this.bigqueryAction, workflowInvocationAction.bigqueryAction) &&
        Objects.equals(this.canonicalTarget, workflowInvocationAction.canonicalTarget) &&
        Objects.equals(this.failureReason, workflowInvocationAction.failureReason) &&
        Objects.equals(this.invocationTiming, workflowInvocationAction.invocationTiming) &&
        Objects.equals(this.state, workflowInvocationAction.state) &&
        Objects.equals(this.target, workflowInvocationAction.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigqueryAction, canonicalTarget, failureReason, invocationTiming, state, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowInvocationAction {\n");
    sb.append("    bigqueryAction: ").append(toIndentedString(bigqueryAction)).append("\n");
    sb.append("    canonicalTarget: ").append(toIndentedString(canonicalTarget)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    invocationTiming: ").append(toIndentedString(invocationTiming)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigqueryAction");
    openapiFields.add("canonicalTarget");
    openapiFields.add("failureReason");
    openapiFields.add("invocationTiming");
    openapiFields.add("state");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowInvocationAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowInvocationAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowInvocationAction is not found in the empty JSON string", WorkflowInvocationAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowInvocationAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowInvocationAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigqueryAction`
      if (jsonObj.get("bigqueryAction") != null && !jsonObj.get("bigqueryAction").isJsonNull()) {
        BigQueryAction.validateJsonElement(jsonObj.get("bigqueryAction"));
      }
      // validate the optional field `canonicalTarget`
      if (jsonObj.get("canonicalTarget") != null && !jsonObj.get("canonicalTarget").isJsonNull()) {
        Target.validateJsonElement(jsonObj.get("canonicalTarget"));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      // validate the optional field `invocationTiming`
      if (jsonObj.get("invocationTiming") != null && !jsonObj.get("invocationTiming").isJsonNull()) {
        Interval.validateJsonElement(jsonObj.get("invocationTiming"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        Target.validateJsonElement(jsonObj.get("target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowInvocationAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowInvocationAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowInvocationAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowInvocationAction.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowInvocationAction>() {
           @Override
           public void write(JsonWriter out, WorkflowInvocationAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowInvocationAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowInvocationAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowInvocationAction
   * @throws IOException if the JSON string is invalid with respect to WorkflowInvocationAction
   */
  public static WorkflowInvocationAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowInvocationAction.class);
  }

  /**
   * Convert an instance of WorkflowInvocationAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

