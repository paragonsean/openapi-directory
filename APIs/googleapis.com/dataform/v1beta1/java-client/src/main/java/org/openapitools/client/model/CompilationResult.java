/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodeCompilationConfig;
import org.openapitools.client.model.CompilationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the result of compiling a Dataform project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompilationResult {
  public static final String SERIALIZED_NAME_CODE_COMPILATION_CONFIG = "codeCompilationConfig";
  @SerializedName(SERIALIZED_NAME_CODE_COMPILATION_CONFIG)
  private CodeCompilationConfig codeCompilationConfig;

  public static final String SERIALIZED_NAME_COMPILATION_ERRORS = "compilationErrors";
  @SerializedName(SERIALIZED_NAME_COMPILATION_ERRORS)
  private List<CompilationError> compilationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATAFORM_CORE_VERSION = "dataformCoreVersion";
  @SerializedName(SERIALIZED_NAME_DATAFORM_CORE_VERSION)
  private String dataformCoreVersion;

  public static final String SERIALIZED_NAME_GIT_COMMITISH = "gitCommitish";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITISH)
  private String gitCommitish;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_CONFIG = "releaseConfig";
  @SerializedName(SERIALIZED_NAME_RELEASE_CONFIG)
  private String releaseConfig;

  public static final String SERIALIZED_NAME_RESOLVED_GIT_COMMIT_SHA = "resolvedGitCommitSha";
  @SerializedName(SERIALIZED_NAME_RESOLVED_GIT_COMMIT_SHA)
  private String resolvedGitCommitSha;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private String workspace;

  public CompilationResult() {
  }

  public CompilationResult(
     List<CompilationError> compilationErrors, 
     String dataformCoreVersion, 
     String name, 
     String resolvedGitCommitSha
  ) {
    this();
    this.compilationErrors = compilationErrors;
    this.dataformCoreVersion = dataformCoreVersion;
    this.name = name;
    this.resolvedGitCommitSha = resolvedGitCommitSha;
  }

  public CompilationResult codeCompilationConfig(CodeCompilationConfig codeCompilationConfig) {
    this.codeCompilationConfig = codeCompilationConfig;
    return this;
  }

  /**
   * Get codeCompilationConfig
   * @return codeCompilationConfig
   */
  @javax.annotation.Nullable
  public CodeCompilationConfig getCodeCompilationConfig() {
    return codeCompilationConfig;
  }

  public void setCodeCompilationConfig(CodeCompilationConfig codeCompilationConfig) {
    this.codeCompilationConfig = codeCompilationConfig;
  }


  /**
   * Output only. Errors encountered during project compilation.
   * @return compilationErrors
   */
  @javax.annotation.Nullable
  public List<CompilationError> getCompilationErrors() {
    return compilationErrors;
  }



  /**
   * Output only. The version of &#x60;@dataform/core&#x60; that was used for compilation.
   * @return dataformCoreVersion
   */
  @javax.annotation.Nullable
  public String getDataformCoreVersion() {
    return dataformCoreVersion;
  }



  public CompilationResult gitCommitish(String gitCommitish) {
    this.gitCommitish = gitCommitish;
    return this;
  }

  /**
   * Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: &#x60;12ade345&#x60; - a tag: &#x60;tag1&#x60; - a branch name: &#x60;branch1&#x60;
   * @return gitCommitish
   */
  @javax.annotation.Nullable
  public String getGitCommitish() {
    return gitCommitish;
  }

  public void setGitCommitish(String gitCommitish) {
    this.gitCommitish = gitCommitish;
  }


  /**
   * Output only. The compilation result&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public CompilationResult releaseConfig(String releaseConfig) {
    this.releaseConfig = releaseConfig;
    return this;
  }

  /**
   * Immutable. The name of the release config to compile. Must be in the format &#x60;projects/_*_/locations/_*_/repositories/_*_/releaseConfigs/_*&#x60;.
   * @return releaseConfig
   */
  @javax.annotation.Nullable
  public String getReleaseConfig() {
    return releaseConfig;
  }

  public void setReleaseConfig(String releaseConfig) {
    this.releaseConfig = releaseConfig;
  }


  /**
   * Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
   * @return resolvedGitCommitSha
   */
  @javax.annotation.Nullable
  public String getResolvedGitCommitSha() {
    return resolvedGitCommitSha;
  }



  public CompilationResult workspace(String workspace) {
    this.workspace = workspace;
    return this;
  }

  /**
   * Immutable. The name of the workspace to compile. Must be in the format &#x60;projects/_*_/locations/_*_/repositories/_*_/workspaces/_*&#x60;.
   * @return workspace
   */
  @javax.annotation.Nullable
  public String getWorkspace() {
    return workspace;
  }

  public void setWorkspace(String workspace) {
    this.workspace = workspace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompilationResult compilationResult = (CompilationResult) o;
    return Objects.equals(this.codeCompilationConfig, compilationResult.codeCompilationConfig) &&
        Objects.equals(this.compilationErrors, compilationResult.compilationErrors) &&
        Objects.equals(this.dataformCoreVersion, compilationResult.dataformCoreVersion) &&
        Objects.equals(this.gitCommitish, compilationResult.gitCommitish) &&
        Objects.equals(this.name, compilationResult.name) &&
        Objects.equals(this.releaseConfig, compilationResult.releaseConfig) &&
        Objects.equals(this.resolvedGitCommitSha, compilationResult.resolvedGitCommitSha) &&
        Objects.equals(this.workspace, compilationResult.workspace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeCompilationConfig, compilationErrors, dataformCoreVersion, gitCommitish, name, releaseConfig, resolvedGitCommitSha, workspace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompilationResult {\n");
    sb.append("    codeCompilationConfig: ").append(toIndentedString(codeCompilationConfig)).append("\n");
    sb.append("    compilationErrors: ").append(toIndentedString(compilationErrors)).append("\n");
    sb.append("    dataformCoreVersion: ").append(toIndentedString(dataformCoreVersion)).append("\n");
    sb.append("    gitCommitish: ").append(toIndentedString(gitCommitish)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseConfig: ").append(toIndentedString(releaseConfig)).append("\n");
    sb.append("    resolvedGitCommitSha: ").append(toIndentedString(resolvedGitCommitSha)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codeCompilationConfig");
    openapiFields.add("compilationErrors");
    openapiFields.add("dataformCoreVersion");
    openapiFields.add("gitCommitish");
    openapiFields.add("name");
    openapiFields.add("releaseConfig");
    openapiFields.add("resolvedGitCommitSha");
    openapiFields.add("workspace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompilationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompilationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompilationResult is not found in the empty JSON string", CompilationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompilationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompilationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `codeCompilationConfig`
      if (jsonObj.get("codeCompilationConfig") != null && !jsonObj.get("codeCompilationConfig").isJsonNull()) {
        CodeCompilationConfig.validateJsonElement(jsonObj.get("codeCompilationConfig"));
      }
      if (jsonObj.get("compilationErrors") != null && !jsonObj.get("compilationErrors").isJsonNull()) {
        JsonArray jsonArraycompilationErrors = jsonObj.getAsJsonArray("compilationErrors");
        if (jsonArraycompilationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compilationErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compilationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("compilationErrors").toString()));
          }

          // validate the optional field `compilationErrors` (array)
          for (int i = 0; i < jsonArraycompilationErrors.size(); i++) {
            CompilationError.validateJsonElement(jsonArraycompilationErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("dataformCoreVersion") != null && !jsonObj.get("dataformCoreVersion").isJsonNull()) && !jsonObj.get("dataformCoreVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataformCoreVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataformCoreVersion").toString()));
      }
      if ((jsonObj.get("gitCommitish") != null && !jsonObj.get("gitCommitish").isJsonNull()) && !jsonObj.get("gitCommitish").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitCommitish` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitCommitish").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("releaseConfig") != null && !jsonObj.get("releaseConfig").isJsonNull()) && !jsonObj.get("releaseConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseConfig").toString()));
      }
      if ((jsonObj.get("resolvedGitCommitSha") != null && !jsonObj.get("resolvedGitCommitSha").isJsonNull()) && !jsonObj.get("resolvedGitCommitSha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolvedGitCommitSha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolvedGitCommitSha").toString()));
      }
      if ((jsonObj.get("workspace") != null && !jsonObj.get("workspace").isJsonNull()) && !jsonObj.get("workspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompilationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompilationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompilationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompilationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CompilationResult>() {
           @Override
           public void write(JsonWriter out, CompilationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompilationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompilationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompilationResult
   * @throws IOException if the JSON string is invalid with respect to CompilationResult
   */
  public static CompilationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompilationResult.class);
  }

  /**
   * Convert an instance of CompilationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

