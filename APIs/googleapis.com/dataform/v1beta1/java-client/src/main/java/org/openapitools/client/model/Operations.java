/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RelationDescriptor;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a list of arbitrary database operations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Operations {
  public static final String SERIALIZED_NAME_DEPENDENCY_TARGETS = "dependencyTargets";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_TARGETS)
  private List<Target> dependencyTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_HAS_OUTPUT = "hasOutput";
  @SerializedName(SERIALIZED_NAME_HAS_OUTPUT)
  private Boolean hasOutput;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<String> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATION_DESCRIPTOR = "relationDescriptor";
  @SerializedName(SERIALIZED_NAME_RELATION_DESCRIPTOR)
  private RelationDescriptor relationDescriptor;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Operations() {
  }

  public Operations dependencyTargets(List<Target> dependencyTargets) {
    this.dependencyTargets = dependencyTargets;
    return this;
  }

  public Operations addDependencyTargetsItem(Target dependencyTargetsItem) {
    if (this.dependencyTargets == null) {
      this.dependencyTargets = new ArrayList<>();
    }
    this.dependencyTargets.add(dependencyTargetsItem);
    return this;
  }

  /**
   * A list of actions that this action depends on.
   * @return dependencyTargets
   */
  @javax.annotation.Nullable
  public List<Target> getDependencyTargets() {
    return dependencyTargets;
  }

  public void setDependencyTargets(List<Target> dependencyTargets) {
    this.dependencyTargets = dependencyTargets;
  }


  public Operations disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether this action is disabled (i.e. should not be run).
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Operations hasOutput(Boolean hasOutput) {
    this.hasOutput = hasOutput;
    return this;
  }

  /**
   * Whether these operations produce an output relation.
   * @return hasOutput
   */
  @javax.annotation.Nullable
  public Boolean getHasOutput() {
    return hasOutput;
  }

  public void setHasOutput(Boolean hasOutput) {
    this.hasOutput = hasOutput;
  }


  public Operations queries(List<String> queries) {
    this.queries = queries;
    return this;
  }

  public Operations addQueriesItem(String queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * A list of arbitrary SQL statements that will be executed without alteration.
   * @return queries
   */
  @javax.annotation.Nullable
  public List<String> getQueries() {
    return queries;
  }

  public void setQueries(List<String> queries) {
    this.queries = queries;
  }


  public Operations relationDescriptor(RelationDescriptor relationDescriptor) {
    this.relationDescriptor = relationDescriptor;
    return this;
  }

  /**
   * Get relationDescriptor
   * @return relationDescriptor
   */
  @javax.annotation.Nullable
  public RelationDescriptor getRelationDescriptor() {
    return relationDescriptor;
  }

  public void setRelationDescriptor(RelationDescriptor relationDescriptor) {
    this.relationDescriptor = relationDescriptor;
  }


  public Operations tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Operations addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Arbitrary, user-defined tags on this action.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operations operations = (Operations) o;
    return Objects.equals(this.dependencyTargets, operations.dependencyTargets) &&
        Objects.equals(this.disabled, operations.disabled) &&
        Objects.equals(this.hasOutput, operations.hasOutput) &&
        Objects.equals(this.queries, operations.queries) &&
        Objects.equals(this.relationDescriptor, operations.relationDescriptor) &&
        Objects.equals(this.tags, operations.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencyTargets, disabled, hasOutput, queries, relationDescriptor, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operations {\n");
    sb.append("    dependencyTargets: ").append(toIndentedString(dependencyTargets)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    hasOutput: ").append(toIndentedString(hasOutput)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    relationDescriptor: ").append(toIndentedString(relationDescriptor)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencyTargets");
    openapiFields.add("disabled");
    openapiFields.add("hasOutput");
    openapiFields.add("queries");
    openapiFields.add("relationDescriptor");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Operations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Operations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Operations is not found in the empty JSON string", Operations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Operations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Operations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dependencyTargets") != null && !jsonObj.get("dependencyTargets").isJsonNull()) {
        JsonArray jsonArraydependencyTargets = jsonObj.getAsJsonArray("dependencyTargets");
        if (jsonArraydependencyTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencyTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencyTargets` to be an array in the JSON string but got `%s`", jsonObj.get("dependencyTargets").toString()));
          }

          // validate the optional field `dependencyTargets` (array)
          for (int i = 0; i < jsonArraydependencyTargets.size(); i++) {
            Target.validateJsonElement(jsonArraydependencyTargets.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queries") != null && !jsonObj.get("queries").isJsonNull() && !jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }
      // validate the optional field `relationDescriptor`
      if (jsonObj.get("relationDescriptor") != null && !jsonObj.get("relationDescriptor").isJsonNull()) {
        RelationDescriptor.validateJsonElement(jsonObj.get("relationDescriptor"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Operations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Operations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Operations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Operations.class));

       return (TypeAdapter<T>) new TypeAdapter<Operations>() {
           @Override
           public void write(JsonWriter out, Operations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Operations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Operations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Operations
   * @throws IOException if the JSON string is invalid with respect to Operations
   */
  public static Operations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Operations.class);
  }

  /**
   * Convert an instance of Operations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

