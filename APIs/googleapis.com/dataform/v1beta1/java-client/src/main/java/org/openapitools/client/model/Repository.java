/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GitRemoteSettings;
import org.openapitools.client.model.WorkspaceCompilationOverrides;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Dataform Git repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:07.077200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GIT_REMOTE_SETTINGS = "gitRemoteSettings";
  @SerializedName(SERIALIZED_NAME_GIT_REMOTE_SETTINGS)
  private GitRemoteSettings gitRemoteSettings;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NPMRC_ENVIRONMENT_VARIABLES_SECRET_VERSION = "npmrcEnvironmentVariablesSecretVersion";
  @SerializedName(SERIALIZED_NAME_NPMRC_ENVIRONMENT_VARIABLES_SECRET_VERSION)
  private String npmrcEnvironmentVariablesSecretVersion;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SET_AUTHENTICATED_USER_ADMIN = "setAuthenticatedUserAdmin";
  @SerializedName(SERIALIZED_NAME_SET_AUTHENTICATED_USER_ADMIN)
  private Boolean setAuthenticatedUserAdmin;

  public static final String SERIALIZED_NAME_WORKSPACE_COMPILATION_OVERRIDES = "workspaceCompilationOverrides";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_COMPILATION_OVERRIDES)
  private WorkspaceCompilationOverrides workspaceCompilationOverrides;

  public Repository() {
  }

  public Repository(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. The timestamp of when the repository was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Repository displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. The repository&#39;s user-friendly name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Repository gitRemoteSettings(GitRemoteSettings gitRemoteSettings) {
    this.gitRemoteSettings = gitRemoteSettings;
    return this;
  }

  /**
   * Get gitRemoteSettings
   * @return gitRemoteSettings
   */
  @javax.annotation.Nullable
  public GitRemoteSettings getGitRemoteSettings() {
    return gitRemoteSettings;
  }

  public void setGitRemoteSettings(GitRemoteSettings gitRemoteSettings) {
    this.gitRemoteSettings = gitRemoteSettings;
  }


  public Repository labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Repository putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Repository user labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The repository&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Repository npmrcEnvironmentVariablesSecretVersion(String npmrcEnvironmentVariablesSecretVersion) {
    this.npmrcEnvironmentVariablesSecretVersion = npmrcEnvironmentVariablesSecretVersion;
    return this;
  }

  /**
   * Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format &#x60;projects/_*_/secrets/_*_/versions/_*&#x60;. The file itself must be in a JSON format.
   * @return npmrcEnvironmentVariablesSecretVersion
   */
  @javax.annotation.Nullable
  public String getNpmrcEnvironmentVariablesSecretVersion() {
    return npmrcEnvironmentVariablesSecretVersion;
  }

  public void setNpmrcEnvironmentVariablesSecretVersion(String npmrcEnvironmentVariablesSecretVersion) {
    this.npmrcEnvironmentVariablesSecretVersion = npmrcEnvironmentVariablesSecretVersion;
  }


  public Repository serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Optional. The service account to run workflow invocations under.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public Repository setAuthenticatedUserAdmin(Boolean setAuthenticatedUserAdmin) {
    this.setAuthenticatedUserAdmin = setAuthenticatedUserAdmin;
    return this;
  }

  /**
   * Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories
   * @return setAuthenticatedUserAdmin
   */
  @javax.annotation.Nullable
  public Boolean getSetAuthenticatedUserAdmin() {
    return setAuthenticatedUserAdmin;
  }

  public void setSetAuthenticatedUserAdmin(Boolean setAuthenticatedUserAdmin) {
    this.setAuthenticatedUserAdmin = setAuthenticatedUserAdmin;
  }


  public Repository workspaceCompilationOverrides(WorkspaceCompilationOverrides workspaceCompilationOverrides) {
    this.workspaceCompilationOverrides = workspaceCompilationOverrides;
    return this;
  }

  /**
   * Get workspaceCompilationOverrides
   * @return workspaceCompilationOverrides
   */
  @javax.annotation.Nullable
  public WorkspaceCompilationOverrides getWorkspaceCompilationOverrides() {
    return workspaceCompilationOverrides;
  }

  public void setWorkspaceCompilationOverrides(WorkspaceCompilationOverrides workspaceCompilationOverrides) {
    this.workspaceCompilationOverrides = workspaceCompilationOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.createTime, repository.createTime) &&
        Objects.equals(this.displayName, repository.displayName) &&
        Objects.equals(this.gitRemoteSettings, repository.gitRemoteSettings) &&
        Objects.equals(this.labels, repository.labels) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.npmrcEnvironmentVariablesSecretVersion, repository.npmrcEnvironmentVariablesSecretVersion) &&
        Objects.equals(this.serviceAccount, repository.serviceAccount) &&
        Objects.equals(this.setAuthenticatedUserAdmin, repository.setAuthenticatedUserAdmin) &&
        Objects.equals(this.workspaceCompilationOverrides, repository.workspaceCompilationOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, displayName, gitRemoteSettings, labels, name, npmrcEnvironmentVariablesSecretVersion, serviceAccount, setAuthenticatedUserAdmin, workspaceCompilationOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    gitRemoteSettings: ").append(toIndentedString(gitRemoteSettings)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    npmrcEnvironmentVariablesSecretVersion: ").append(toIndentedString(npmrcEnvironmentVariablesSecretVersion)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    setAuthenticatedUserAdmin: ").append(toIndentedString(setAuthenticatedUserAdmin)).append("\n");
    sb.append("    workspaceCompilationOverrides: ").append(toIndentedString(workspaceCompilationOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("gitRemoteSettings");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("npmrcEnvironmentVariablesSecretVersion");
    openapiFields.add("serviceAccount");
    openapiFields.add("setAuthenticatedUserAdmin");
    openapiFields.add("workspaceCompilationOverrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `gitRemoteSettings`
      if (jsonObj.get("gitRemoteSettings") != null && !jsonObj.get("gitRemoteSettings").isJsonNull()) {
        GitRemoteSettings.validateJsonElement(jsonObj.get("gitRemoteSettings"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("npmrcEnvironmentVariablesSecretVersion") != null && !jsonObj.get("npmrcEnvironmentVariablesSecretVersion").isJsonNull()) && !jsonObj.get("npmrcEnvironmentVariablesSecretVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `npmrcEnvironmentVariablesSecretVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("npmrcEnvironmentVariablesSecretVersion").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      // validate the optional field `workspaceCompilationOverrides`
      if (jsonObj.get("workspaceCompilationOverrides") != null && !jsonObj.get("workspaceCompilationOverrides").isJsonNull()) {
        WorkspaceCompilationOverrides.validateJsonElement(jsonObj.get("workspaceCompilationOverrides"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

