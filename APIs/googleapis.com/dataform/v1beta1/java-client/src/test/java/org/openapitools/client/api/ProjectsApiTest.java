/*
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommitWorkspaceChangesRequest;
import org.openapitools.client.model.CompilationResult;
import org.openapitools.client.model.ComputeRepositoryAccessTokenStatusResponse;
import org.openapitools.client.model.FetchFileDiffResponse;
import org.openapitools.client.model.FetchFileGitStatusesResponse;
import org.openapitools.client.model.FetchGitAheadBehindResponse;
import org.openapitools.client.model.FetchRemoteBranchesResponse;
import org.openapitools.client.model.FetchRepositoryHistoryResponse;
import org.openapitools.client.model.ListCompilationResultsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListReleaseConfigsResponse;
import org.openapitools.client.model.ListRepositoriesResponse;
import org.openapitools.client.model.ListWorkflowConfigsResponse;
import org.openapitools.client.model.ListWorkflowInvocationsResponse;
import org.openapitools.client.model.ListWorkspacesResponse;
import org.openapitools.client.model.MakeDirectoryRequest;
import org.openapitools.client.model.MoveDirectoryRequest;
import org.openapitools.client.model.MoveFileRequest;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PullGitCommitsRequest;
import org.openapitools.client.model.PushGitCommitsRequest;
import org.openapitools.client.model.QueryDirectoryContentsResponse;
import org.openapitools.client.model.QueryRepositoryDirectoryContentsResponse;
import org.openapitools.client.model.QueryWorkflowInvocationActionsResponse;
import org.openapitools.client.model.ReadFileResponse;
import org.openapitools.client.model.ReadRepositoryFileResponse;
import org.openapitools.client.model.ReleaseConfig;
import org.openapitools.client.model.RemoveDirectoryRequest;
import org.openapitools.client.model.RemoveFileRequest;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.ResetWorkspaceChangesRequest;
import org.openapitools.client.model.SearchFilesResponse;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.WorkflowConfig;
import org.openapitools.client.model.WorkflowInvocation;
import org.openapitools.client.model.Workspace;
import org.openapitools.client.model.WriteFileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.dataformProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new CompilationResult in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesCompilationResultsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CompilationResult compilationResult = null;
        CompilationResult response = api.dataformProjectsLocationsRepositoriesCompilationResultsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, compilationResult);
        // TODO: test validations
    }

    /**
     * Lists CompilationResults in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesCompilationResultsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCompilationResultsResponse response = api.dataformProjectsLocationsRepositoriesCompilationResultsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Computes a Repository&#39;s Git access token status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesComputeAccessTokenStatusTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ComputeRepositoryAccessTokenStatusResponse response = api.dataformProjectsLocationsRepositoriesComputeAccessTokenStatus(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new Repository in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String repositoryId = null;
        Repository repository = null;
        Repository response = api.dataformProjectsLocationsRepositoriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, repositoryId, repository);
        // TODO: test validations
    }

    /**
     * Fetches a Repository&#39;s history of commits. The Repository must not have a value for &#x60;git_remote_settings.url&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesFetchHistoryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        FetchRepositoryHistoryResponse response = api.dataformProjectsLocationsRepositoriesFetchHistory(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Fetches a Repository&#39;s remote branches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesFetchRemoteBranchesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FetchRemoteBranchesResponse response = api.dataformProjectsLocationsRepositoriesFetchRemoteBranches(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists Repositories in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRepositoriesResponse response = api.dataformProjectsLocationsRepositoriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns the contents of a given Repository directory. The Repository must not have a value for &#x60;git_remote_settings.url&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesQueryDirectoryContentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String commitSha = null;
        Integer pageSize = null;
        String pageToken = null;
        String path = null;
        QueryRepositoryDirectoryContentsResponse response = api.dataformProjectsLocationsRepositoriesQueryDirectoryContents(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitSha, pageSize, pageToken, path);
        // TODO: test validations
    }

    /**
     * Returns the contents of a file (inside a Repository). The Repository must not have a value for &#x60;git_remote_settings.url&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesReadFileTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String commitSha = null;
        String path = null;
        ReadRepositoryFileResponse response = api.dataformProjectsLocationsRepositoriesReadFile(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitSha, path);
        // TODO: test validations
    }

    /**
     * Creates a new ReleaseConfig in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesReleaseConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String releaseConfigId = null;
        ReleaseConfig releaseConfig = null;
        ReleaseConfig response = api.dataformProjectsLocationsRepositoriesReleaseConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, releaseConfigId, releaseConfig);
        // TODO: test validations
    }

    /**
     * Lists ReleaseConfigs in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesReleaseConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReleaseConfigsResponse response = api.dataformProjectsLocationsRepositoriesReleaseConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new WorkflowConfig in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String workflowConfigId = null;
        WorkflowConfig workflowConfig = null;
        WorkflowConfig response = api.dataformProjectsLocationsRepositoriesWorkflowConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workflowConfigId, workflowConfig);
        // TODO: test validations
    }

    /**
     * Lists WorkflowConfigs in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListWorkflowConfigsResponse response = api.dataformProjectsLocationsRepositoriesWorkflowConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a single WorkflowConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowConfigsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        WorkflowConfig workflowConfig = null;
        WorkflowConfig response = api.dataformProjectsLocationsRepositoriesWorkflowConfigsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, workflowConfig);
        // TODO: test validations
    }

    /**
     * Requests cancellation of a running WorkflowInvocation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowInvocationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkflowInvocationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new WorkflowInvocation in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowInvocationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WorkflowInvocation workflowInvocation = null;
        WorkflowInvocation response = api.dataformProjectsLocationsRepositoriesWorkflowInvocationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workflowInvocation);
        // TODO: test validations
    }

    /**
     * Lists WorkflowInvocations in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowInvocationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListWorkflowInvocationsResponse response = api.dataformProjectsLocationsRepositoriesWorkflowInvocationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns WorkflowInvocationActions in a given WorkflowInvocation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkflowInvocationsQueryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        QueryWorkflowInvocationActionsResponse response = api.dataformProjectsLocationsRepositoriesWorkflowInvocationsQuery(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Applies a Git commit for uncommitted files in a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesCommitTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitWorkspaceChangesRequest commitWorkspaceChangesRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesCommit(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitWorkspaceChangesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Workspace in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String workspaceId = null;
        Workspace workspace = null;
        Workspace response = api.dataformProjectsLocationsRepositoriesWorkspacesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workspaceId, workspace);
        // TODO: test validations
    }

    /**
     * Deletes a single Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Fetches Git diff for an uncommitted file in a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String path = null;
        FetchFileDiffResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesFetchFileDiff(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, path);
        // TODO: test validations
    }

    /**
     * Fetches Git statuses for the files in a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FetchFileGitStatusesResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatuses(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Fetches Git ahead/behind against a remote branch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String remoteBranch = null;
        FetchGitAheadBehindResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehind(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, remoteBranch);
        // TODO: test validations
    }

    /**
     * Fetches a single Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Workspace response = api.dataformProjectsLocationsRepositoriesWorkspacesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.dataformProjectsLocationsRepositoriesWorkspacesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Installs dependency NPM packages (inside a Workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackages(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists Workspaces in a given Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListWorkspacesResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a directory inside a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MakeDirectoryRequest makeDirectoryRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesMakeDirectory(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, makeDirectoryRequest);
        // TODO: test validations
    }

    /**
     * Moves a directory (inside a Workspace), and all of its contents, to a new location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MoveDirectoryRequest moveDirectoryRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesMoveDirectory(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, moveDirectoryRequest);
        // TODO: test validations
    }

    /**
     * Moves a file (inside a Workspace) to a new location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesMoveFileTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MoveFileRequest moveFileRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesMoveFile(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, moveFileRequest);
        // TODO: test validations
    }

    /**
     * Pulls Git commits from the Repository&#39;s remote into a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesPullTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PullGitCommitsRequest pullGitCommitsRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesPull(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pullGitCommitsRequest);
        // TODO: test validations
    }

    /**
     * Pushes Git commits from a Workspace to the Repository&#39;s remote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesPushTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PushGitCommitsRequest pushGitCommitsRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesPush(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pushGitCommitsRequest);
        // TODO: test validations
    }

    /**
     * Returns the contents of a given Workspace directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String path = null;
        QueryDirectoryContentsResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContents(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, path);
        // TODO: test validations
    }

    /**
     * Returns the contents of a file (inside a Workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesReadFileTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String path = null;
        String revision = null;
        ReadFileResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesReadFile(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, path, revision);
        // TODO: test validations
    }

    /**
     * Deletes a directory (inside a Workspace) and all of its contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveDirectoryRequest removeDirectoryRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesRemoveDirectory(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeDirectoryRequest);
        // TODO: test validations
    }

    /**
     * Deletes a file (inside a Workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesRemoveFileTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveFileRequest removeFileRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesRemoveFile(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeFileRequest);
        // TODO: test validations
    }

    /**
     * Performs a Git reset for uncommitted files in a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesResetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResetWorkspaceChangesRequest resetWorkspaceChangesRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesReset(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resetWorkspaceChangesRequest);
        // TODO: test validations
    }

    /**
     * Finds the contents of a given Workspace directory by filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesSearchFilesTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        SearchFilesResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesSearchFiles(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.dataformProjectsLocationsRepositoriesWorkspacesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.dataformProjectsLocationsRepositoriesWorkspacesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Writes to a file (inside a Workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataformProjectsLocationsRepositoriesWorkspacesWriteFileTest() throws ApiException {
        String workspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WriteFileRequest writeFileRequest = null;
        Object response = api.dataformProjectsLocationsRepositoriesWorkspacesWriteFile(workspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, writeFileRequest);
        // TODO: test validations
    }

}
