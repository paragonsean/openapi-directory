/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UncommittedFileChange from './UncommittedFileChange';

/**
 * The FetchFileGitStatusesResponse model module.
 * @module model/FetchFileGitStatusesResponse
 * @version v1beta1
 */
class FetchFileGitStatusesResponse {
    /**
     * Constructs a new <code>FetchFileGitStatusesResponse</code>.
     * &#x60;FetchFileGitStatuses&#x60; response message.
     * @alias module:model/FetchFileGitStatusesResponse
     */
    constructor() { 
        
        FetchFileGitStatusesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FetchFileGitStatusesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchFileGitStatusesResponse} obj Optional instance to populate.
     * @return {module:model/FetchFileGitStatusesResponse} The populated <code>FetchFileGitStatusesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchFileGitStatusesResponse();

            if (data.hasOwnProperty('uncommittedFileChanges')) {
                obj['uncommittedFileChanges'] = ApiClient.convertToType(data['uncommittedFileChanges'], [UncommittedFileChange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FetchFileGitStatusesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FetchFileGitStatusesResponse</code>.
     */
    static validateJSON(data) {
        if (data['uncommittedFileChanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['uncommittedFileChanges'])) {
                throw new Error("Expected the field `uncommittedFileChanges` to be an array in the JSON data but got " + data['uncommittedFileChanges']);
            }
            // validate the optional field `uncommittedFileChanges` (array)
            for (const item of data['uncommittedFileChanges']) {
                UncommittedFileChange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of all files which have uncommitted Git changes. There will only be a single entry for any given file.
 * @member {Array.<module:model/UncommittedFileChange>} uncommittedFileChanges
 */
FetchFileGitStatusesResponse.prototype['uncommittedFileChanges'] = undefined;






export default FetchFileGitStatusesResponse;

