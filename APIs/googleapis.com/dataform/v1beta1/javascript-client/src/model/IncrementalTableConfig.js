/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IncrementalTableConfig model module.
 * @module model/IncrementalTableConfig
 * @version v1beta1
 */
class IncrementalTableConfig {
    /**
     * Constructs a new <code>IncrementalTableConfig</code>.
     * Contains settings for relations of type &#x60;INCREMENTAL_TABLE&#x60;.
     * @alias module:model/IncrementalTableConfig
     */
    constructor() { 
        
        IncrementalTableConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncrementalTableConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncrementalTableConfig} obj Optional instance to populate.
     * @return {module:model/IncrementalTableConfig} The populated <code>IncrementalTableConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncrementalTableConfig();

            if (data.hasOwnProperty('incrementalPostOperations')) {
                obj['incrementalPostOperations'] = ApiClient.convertToType(data['incrementalPostOperations'], ['String']);
            }
            if (data.hasOwnProperty('incrementalPreOperations')) {
                obj['incrementalPreOperations'] = ApiClient.convertToType(data['incrementalPreOperations'], ['String']);
            }
            if (data.hasOwnProperty('incrementalSelectQuery')) {
                obj['incrementalSelectQuery'] = ApiClient.convertToType(data['incrementalSelectQuery'], 'String');
            }
            if (data.hasOwnProperty('refreshDisabled')) {
                obj['refreshDisabled'] = ApiClient.convertToType(data['refreshDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('uniqueKeyParts')) {
                obj['uniqueKeyParts'] = ApiClient.convertToType(data['uniqueKeyParts'], ['String']);
            }
            if (data.hasOwnProperty('updatePartitionFilter')) {
                obj['updatePartitionFilter'] = ApiClient.convertToType(data['updatePartitionFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncrementalTableConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncrementalTableConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['incrementalPostOperations'])) {
            throw new Error("Expected the field `incrementalPostOperations` to be an array in the JSON data but got " + data['incrementalPostOperations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['incrementalPreOperations'])) {
            throw new Error("Expected the field `incrementalPreOperations` to be an array in the JSON data but got " + data['incrementalPreOperations']);
        }
        // ensure the json data is a string
        if (data['incrementalSelectQuery'] && !(typeof data['incrementalSelectQuery'] === 'string' || data['incrementalSelectQuery'] instanceof String)) {
            throw new Error("Expected the field `incrementalSelectQuery` to be a primitive type in the JSON string but got " + data['incrementalSelectQuery']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uniqueKeyParts'])) {
            throw new Error("Expected the field `uniqueKeyParts` to be an array in the JSON data but got " + data['uniqueKeyParts']);
        }
        // ensure the json data is a string
        if (data['updatePartitionFilter'] && !(typeof data['updatePartitionFilter'] === 'string' || data['updatePartitionFilter'] instanceof String)) {
            throw new Error("Expected the field `updatePartitionFilter` to be a primitive type in the JSON string but got " + data['updatePartitionFilter']);
        }

        return true;
    }


}



/**
 * SQL statements to be executed after inserting new rows into the relation.
 * @member {Array.<String>} incrementalPostOperations
 */
IncrementalTableConfig.prototype['incrementalPostOperations'] = undefined;

/**
 * SQL statements to be executed before inserting new rows into the relation.
 * @member {Array.<String>} incrementalPreOperations
 */
IncrementalTableConfig.prototype['incrementalPreOperations'] = undefined;

/**
 * The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.
 * @member {String} incrementalSelectQuery
 */
IncrementalTableConfig.prototype['incrementalSelectQuery'] = undefined;

/**
 * Whether this table should be protected from being refreshed.
 * @member {Boolean} refreshDisabled
 */
IncrementalTableConfig.prototype['refreshDisabled'] = undefined;

/**
 * A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.
 * @member {Array.<String>} uniqueKeyParts
 */
IncrementalTableConfig.prototype['uniqueKeyParts'] = undefined;

/**
 * A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).
 * @member {String} updatePartitionFilter
 */
IncrementalTableConfig.prototype['updatePartitionFilter'] = undefined;






export default IncrementalTableConfig;

