/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitMetadata from './CommitMetadata';
import FileOperation from './FileOperation';

/**
 * The CommitRepositoryChangesRequest model module.
 * @module model/CommitRepositoryChangesRequest
 * @version v1beta1
 */
class CommitRepositoryChangesRequest {
    /**
     * Constructs a new <code>CommitRepositoryChangesRequest</code>.
     * &#x60;CommitRepositoryChanges&#x60; request message.
     * @alias module:model/CommitRepositoryChangesRequest
     */
    constructor() { 
        
        CommitRepositoryChangesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitRepositoryChangesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitRepositoryChangesRequest} obj Optional instance to populate.
     * @return {module:model/CommitRepositoryChangesRequest} The populated <code>CommitRepositoryChangesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitRepositoryChangesRequest();

            if (data.hasOwnProperty('commitMetadata')) {
                obj['commitMetadata'] = CommitMetadata.constructFromObject(data['commitMetadata']);
            }
            if (data.hasOwnProperty('fileOperations')) {
                obj['fileOperations'] = ApiClient.convertToType(data['fileOperations'], {'String': FileOperation});
            }
            if (data.hasOwnProperty('requiredHeadCommitSha')) {
                obj['requiredHeadCommitSha'] = ApiClient.convertToType(data['requiredHeadCommitSha'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitRepositoryChangesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitRepositoryChangesRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `commitMetadata`
        if (data['commitMetadata']) { // data not null
          CommitMetadata.validateJSON(data['commitMetadata']);
        }
        // ensure the json data is a string
        if (data['requiredHeadCommitSha'] && !(typeof data['requiredHeadCommitSha'] === 'string' || data['requiredHeadCommitSha'] instanceof String)) {
            throw new Error("Expected the field `requiredHeadCommitSha` to be a primitive type in the JSON string but got " + data['requiredHeadCommitSha']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommitMetadata} commitMetadata
 */
CommitRepositoryChangesRequest.prototype['commitMetadata'] = undefined;

/**
 * A map to the path of the file to the operation. The path is the full file path including filename, from repository root.
 * @member {Object.<String, module:model/FileOperation>} fileOperations
 */
CommitRepositoryChangesRequest.prototype['fileOperations'] = undefined;

/**
 * Optional. The commit SHA which must be the repository's current HEAD before applying this commit; otherwise this request will fail. If unset, no validation on the current HEAD commit SHA is performed.
 * @member {String} requiredHeadCommitSha
 */
CommitRepositoryChangesRequest.prototype['requiredHeadCommitSha'] = undefined;






export default CommitRepositoryChangesRequest;

