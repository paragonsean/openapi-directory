/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnDescriptor from './ColumnDescriptor';

/**
 * The RelationDescriptor model module.
 * @module model/RelationDescriptor
 * @version v1beta1
 */
class RelationDescriptor {
    /**
     * Constructs a new <code>RelationDescriptor</code>.
     * Describes a relation and its columns.
     * @alias module:model/RelationDescriptor
     */
    constructor() { 
        
        RelationDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelationDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationDescriptor} obj Optional instance to populate.
     * @return {module:model/RelationDescriptor} The populated <code>RelationDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationDescriptor();

            if (data.hasOwnProperty('bigqueryLabels')) {
                obj['bigqueryLabels'] = ApiClient.convertToType(data['bigqueryLabels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [ColumnDescriptor]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationDescriptor</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                ColumnDescriptor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * A set of BigQuery labels that should be applied to the relation.
 * @member {Object.<String, String>} bigqueryLabels
 */
RelationDescriptor.prototype['bigqueryLabels'] = undefined;

/**
 * A list of descriptions of columns within the relation.
 * @member {Array.<module:model/ColumnDescriptor>} columns
 */
RelationDescriptor.prototype['columns'] = undefined;

/**
 * A text description of the relation.
 * @member {String} description
 */
RelationDescriptor.prototype['description'] = undefined;






export default RelationDescriptor;

