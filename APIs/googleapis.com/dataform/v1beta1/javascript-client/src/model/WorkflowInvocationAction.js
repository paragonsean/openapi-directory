/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryAction from './BigQueryAction';
import Interval from './Interval';
import Target from './Target';

/**
 * The WorkflowInvocationAction model module.
 * @module model/WorkflowInvocationAction
 * @version v1beta1
 */
class WorkflowInvocationAction {
    /**
     * Constructs a new <code>WorkflowInvocationAction</code>.
     * Represents a single action in a workflow invocation.
     * @alias module:model/WorkflowInvocationAction
     */
    constructor() { 
        
        WorkflowInvocationAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowInvocationAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowInvocationAction} obj Optional instance to populate.
     * @return {module:model/WorkflowInvocationAction} The populated <code>WorkflowInvocationAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowInvocationAction();

            if (data.hasOwnProperty('bigqueryAction')) {
                obj['bigqueryAction'] = BigQueryAction.constructFromObject(data['bigqueryAction']);
            }
            if (data.hasOwnProperty('canonicalTarget')) {
                obj['canonicalTarget'] = Target.constructFromObject(data['canonicalTarget']);
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('invocationTiming')) {
                obj['invocationTiming'] = Interval.constructFromObject(data['invocationTiming']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Target.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowInvocationAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowInvocationAction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryAction`
        if (data['bigqueryAction']) { // data not null
          BigQueryAction.validateJSON(data['bigqueryAction']);
        }
        // validate the optional field `canonicalTarget`
        if (data['canonicalTarget']) { // data not null
          Target.validateJSON(data['canonicalTarget']);
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // validate the optional field `invocationTiming`
        if (data['invocationTiming']) { // data not null
          Interval.validateJSON(data['invocationTiming']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          Target.validateJSON(data['target']);
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryAction} bigqueryAction
 */
WorkflowInvocationAction.prototype['bigqueryAction'] = undefined;

/**
 * @member {module:model/Target} canonicalTarget
 */
WorkflowInvocationAction.prototype['canonicalTarget'] = undefined;

/**
 * Output only. If and only if action's state is FAILED a failure reason is set.
 * @member {String} failureReason
 */
WorkflowInvocationAction.prototype['failureReason'] = undefined;

/**
 * @member {module:model/Interval} invocationTiming
 */
WorkflowInvocationAction.prototype['invocationTiming'] = undefined;

/**
 * Output only. This action's current state.
 * @member {module:model/WorkflowInvocationAction.StateEnum} state
 */
WorkflowInvocationAction.prototype['state'] = undefined;

/**
 * @member {module:model/Target} target
 */
WorkflowInvocationAction.prototype['target'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowInvocationAction['StateEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default WorkflowInvocationAction;

