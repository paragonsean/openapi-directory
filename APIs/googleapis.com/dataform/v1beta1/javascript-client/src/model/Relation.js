/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IncrementalTableConfig from './IncrementalTableConfig';
import RelationDescriptor from './RelationDescriptor';
import Target from './Target';

/**
 * The Relation model module.
 * @module model/Relation
 * @version v1beta1
 */
class Relation {
    /**
     * Constructs a new <code>Relation</code>.
     * Represents a database relation.
     * @alias module:model/Relation
     */
    constructor() { 
        
        Relation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relation} obj Optional instance to populate.
     * @return {module:model/Relation} The populated <code>Relation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relation();

            if (data.hasOwnProperty('additionalOptions')) {
                obj['additionalOptions'] = ApiClient.convertToType(data['additionalOptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clusterExpressions')) {
                obj['clusterExpressions'] = ApiClient.convertToType(data['clusterExpressions'], ['String']);
            }
            if (data.hasOwnProperty('dependencyTargets')) {
                obj['dependencyTargets'] = ApiClient.convertToType(data['dependencyTargets'], [Target]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('incrementalTableConfig')) {
                obj['incrementalTableConfig'] = IncrementalTableConfig.constructFromObject(data['incrementalTableConfig']);
            }
            if (data.hasOwnProperty('partitionExpirationDays')) {
                obj['partitionExpirationDays'] = ApiClient.convertToType(data['partitionExpirationDays'], 'Number');
            }
            if (data.hasOwnProperty('partitionExpression')) {
                obj['partitionExpression'] = ApiClient.convertToType(data['partitionExpression'], 'String');
            }
            if (data.hasOwnProperty('postOperations')) {
                obj['postOperations'] = ApiClient.convertToType(data['postOperations'], ['String']);
            }
            if (data.hasOwnProperty('preOperations')) {
                obj['preOperations'] = ApiClient.convertToType(data['preOperations'], ['String']);
            }
            if (data.hasOwnProperty('relationDescriptor')) {
                obj['relationDescriptor'] = RelationDescriptor.constructFromObject(data['relationDescriptor']);
            }
            if (data.hasOwnProperty('relationType')) {
                obj['relationType'] = ApiClient.convertToType(data['relationType'], 'String');
            }
            if (data.hasOwnProperty('requirePartitionFilter')) {
                obj['requirePartitionFilter'] = ApiClient.convertToType(data['requirePartitionFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('selectQuery')) {
                obj['selectQuery'] = ApiClient.convertToType(data['selectQuery'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['clusterExpressions'])) {
            throw new Error("Expected the field `clusterExpressions` to be an array in the JSON data but got " + data['clusterExpressions']);
        }
        if (data['dependencyTargets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependencyTargets'])) {
                throw new Error("Expected the field `dependencyTargets` to be an array in the JSON data but got " + data['dependencyTargets']);
            }
            // validate the optional field `dependencyTargets` (array)
            for (const item of data['dependencyTargets']) {
                Target.validateJSON(item);
            };
        }
        // validate the optional field `incrementalTableConfig`
        if (data['incrementalTableConfig']) { // data not null
          IncrementalTableConfig.validateJSON(data['incrementalTableConfig']);
        }
        // ensure the json data is a string
        if (data['partitionExpression'] && !(typeof data['partitionExpression'] === 'string' || data['partitionExpression'] instanceof String)) {
            throw new Error("Expected the field `partitionExpression` to be a primitive type in the JSON string but got " + data['partitionExpression']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['postOperations'])) {
            throw new Error("Expected the field `postOperations` to be an array in the JSON data but got " + data['postOperations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['preOperations'])) {
            throw new Error("Expected the field `preOperations` to be an array in the JSON data but got " + data['preOperations']);
        }
        // validate the optional field `relationDescriptor`
        if (data['relationDescriptor']) { // data not null
          RelationDescriptor.validateJSON(data['relationDescriptor']);
        }
        // ensure the json data is a string
        if (data['relationType'] && !(typeof data['relationType'] === 'string' || data['relationType'] instanceof String)) {
            throw new Error("Expected the field `relationType` to be a primitive type in the JSON string but got " + data['relationType']);
        }
        // ensure the json data is a string
        if (data['selectQuery'] && !(typeof data['selectQuery'] === 'string' || data['selectQuery'] instanceof String)) {
            throw new Error("Expected the field `selectQuery` to be a primitive type in the JSON string but got " + data['selectQuery']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.
 * @member {Object.<String, String>} additionalOptions
 */
Relation.prototype['additionalOptions'] = undefined;

/**
 * A list of columns or SQL expressions used to cluster the table.
 * @member {Array.<String>} clusterExpressions
 */
Relation.prototype['clusterExpressions'] = undefined;

/**
 * A list of actions that this action depends on.
 * @member {Array.<module:model/Target>} dependencyTargets
 */
Relation.prototype['dependencyTargets'] = undefined;

/**
 * Whether this action is disabled (i.e. should not be run).
 * @member {Boolean} disabled
 */
Relation.prototype['disabled'] = undefined;

/**
 * @member {module:model/IncrementalTableConfig} incrementalTableConfig
 */
Relation.prototype['incrementalTableConfig'] = undefined;

/**
 * Sets the partition expiration in days.
 * @member {Number} partitionExpirationDays
 */
Relation.prototype['partitionExpirationDays'] = undefined;

/**
 * The SQL expression used to partition the relation.
 * @member {String} partitionExpression
 */
Relation.prototype['partitionExpression'] = undefined;

/**
 * SQL statements to be executed after creating the relation.
 * @member {Array.<String>} postOperations
 */
Relation.prototype['postOperations'] = undefined;

/**
 * SQL statements to be executed before creating the relation.
 * @member {Array.<String>} preOperations
 */
Relation.prototype['preOperations'] = undefined;

/**
 * @member {module:model/RelationDescriptor} relationDescriptor
 */
Relation.prototype['relationDescriptor'] = undefined;

/**
 * The type of this relation.
 * @member {module:model/Relation.RelationTypeEnum} relationType
 */
Relation.prototype['relationType'] = undefined;

/**
 * Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.
 * @member {Boolean} requirePartitionFilter
 */
Relation.prototype['requirePartitionFilter'] = undefined;

/**
 * The SELECT query which returns rows which this relation should contain.
 * @member {String} selectQuery
 */
Relation.prototype['selectQuery'] = undefined;

/**
 * Arbitrary, user-defined tags on this action.
 * @member {Array.<String>} tags
 */
Relation.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>relationType</code> property.
 * @enum {String}
 * @readonly
 */
Relation['RelationTypeEnum'] = {

    /**
     * value: "RELATION_TYPE_UNSPECIFIED"
     * @const
     */
    "RELATION_TYPE_UNSPECIFIED": "RELATION_TYPE_UNSPECIFIED",

    /**
     * value: "TABLE"
     * @const
     */
    "TABLE": "TABLE",

    /**
     * value: "VIEW"
     * @const
     */
    "VIEW": "VIEW",

    /**
     * value: "INCREMENTAL_TABLE"
     * @const
     */
    "INCREMENTAL_TABLE": "INCREMENTAL_TABLE",

    /**
     * value: "MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "MATERIALIZED_VIEW"
};



export default Relation;

