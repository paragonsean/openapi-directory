/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeCompilationConfig from './CodeCompilationConfig';
import CompilationError from './CompilationError';

/**
 * The CompilationResult model module.
 * @module model/CompilationResult
 * @version v1beta1
 */
class CompilationResult {
    /**
     * Constructs a new <code>CompilationResult</code>.
     * Represents the result of compiling a Dataform project.
     * @alias module:model/CompilationResult
     */
    constructor() { 
        
        CompilationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompilationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompilationResult} obj Optional instance to populate.
     * @return {module:model/CompilationResult} The populated <code>CompilationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompilationResult();

            if (data.hasOwnProperty('codeCompilationConfig')) {
                obj['codeCompilationConfig'] = CodeCompilationConfig.constructFromObject(data['codeCompilationConfig']);
            }
            if (data.hasOwnProperty('compilationErrors')) {
                obj['compilationErrors'] = ApiClient.convertToType(data['compilationErrors'], [CompilationError]);
            }
            if (data.hasOwnProperty('dataformCoreVersion')) {
                obj['dataformCoreVersion'] = ApiClient.convertToType(data['dataformCoreVersion'], 'String');
            }
            if (data.hasOwnProperty('gitCommitish')) {
                obj['gitCommitish'] = ApiClient.convertToType(data['gitCommitish'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('releaseConfig')) {
                obj['releaseConfig'] = ApiClient.convertToType(data['releaseConfig'], 'String');
            }
            if (data.hasOwnProperty('resolvedGitCommitSha')) {
                obj['resolvedGitCommitSha'] = ApiClient.convertToType(data['resolvedGitCommitSha'], 'String');
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = ApiClient.convertToType(data['workspace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompilationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompilationResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `codeCompilationConfig`
        if (data['codeCompilationConfig']) { // data not null
          CodeCompilationConfig.validateJSON(data['codeCompilationConfig']);
        }
        if (data['compilationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['compilationErrors'])) {
                throw new Error("Expected the field `compilationErrors` to be an array in the JSON data but got " + data['compilationErrors']);
            }
            // validate the optional field `compilationErrors` (array)
            for (const item of data['compilationErrors']) {
                CompilationError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataformCoreVersion'] && !(typeof data['dataformCoreVersion'] === 'string' || data['dataformCoreVersion'] instanceof String)) {
            throw new Error("Expected the field `dataformCoreVersion` to be a primitive type in the JSON string but got " + data['dataformCoreVersion']);
        }
        // ensure the json data is a string
        if (data['gitCommitish'] && !(typeof data['gitCommitish'] === 'string' || data['gitCommitish'] instanceof String)) {
            throw new Error("Expected the field `gitCommitish` to be a primitive type in the JSON string but got " + data['gitCommitish']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['releaseConfig'] && !(typeof data['releaseConfig'] === 'string' || data['releaseConfig'] instanceof String)) {
            throw new Error("Expected the field `releaseConfig` to be a primitive type in the JSON string but got " + data['releaseConfig']);
        }
        // ensure the json data is a string
        if (data['resolvedGitCommitSha'] && !(typeof data['resolvedGitCommitSha'] === 'string' || data['resolvedGitCommitSha'] instanceof String)) {
            throw new Error("Expected the field `resolvedGitCommitSha` to be a primitive type in the JSON string but got " + data['resolvedGitCommitSha']);
        }
        // ensure the json data is a string
        if (data['workspace'] && !(typeof data['workspace'] === 'string' || data['workspace'] instanceof String)) {
            throw new Error("Expected the field `workspace` to be a primitive type in the JSON string but got " + data['workspace']);
        }

        return true;
    }


}



/**
 * @member {module:model/CodeCompilationConfig} codeCompilationConfig
 */
CompilationResult.prototype['codeCompilationConfig'] = undefined;

/**
 * Output only. Errors encountered during project compilation.
 * @member {Array.<module:model/CompilationError>} compilationErrors
 */
CompilationResult.prototype['compilationErrors'] = undefined;

/**
 * Output only. The version of `@dataform/core` that was used for compilation.
 * @member {String} dataformCoreVersion
 */
CompilationResult.prototype['dataformCoreVersion'] = undefined;

/**
 * Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
 * @member {String} gitCommitish
 */
CompilationResult.prototype['gitCommitish'] = undefined;

/**
 * Output only. The compilation result's name.
 * @member {String} name
 */
CompilationResult.prototype['name'] = undefined;

/**
 * Immutable. The name of the release config to compile. Must be in the format `projects/_*_/locations/_*_/repositories/_*_/releaseConfigs/_*`.
 * @member {String} releaseConfig
 */
CompilationResult.prototype['releaseConfig'] = undefined;

/**
 * Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
 * @member {String} resolvedGitCommitSha
 */
CompilationResult.prototype['resolvedGitCommitSha'] = undefined;

/**
 * Immutable. The name of the workspace to compile. Must be in the format `projects/_*_/locations/_*_/repositories/_*_/workspaces/_*`.
 * @member {String} workspace
 */
CompilationResult.prototype['workspace'] = undefined;






export default CompilationResult;

