/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SshAuthenticationConfig from './SshAuthenticationConfig';

/**
 * The GitRemoteSettings model module.
 * @module model/GitRemoteSettings
 * @version v1beta1
 */
class GitRemoteSettings {
    /**
     * Constructs a new <code>GitRemoteSettings</code>.
     * Controls Git remote configuration for a repository.
     * @alias module:model/GitRemoteSettings
     */
    constructor() { 
        
        GitRemoteSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GitRemoteSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitRemoteSettings} obj Optional instance to populate.
     * @return {module:model/GitRemoteSettings} The populated <code>GitRemoteSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitRemoteSettings();

            if (data.hasOwnProperty('authenticationTokenSecretVersion')) {
                obj['authenticationTokenSecretVersion'] = ApiClient.convertToType(data['authenticationTokenSecretVersion'], 'String');
            }
            if (data.hasOwnProperty('defaultBranch')) {
                obj['defaultBranch'] = ApiClient.convertToType(data['defaultBranch'], 'String');
            }
            if (data.hasOwnProperty('sshAuthenticationConfig')) {
                obj['sshAuthenticationConfig'] = SshAuthenticationConfig.constructFromObject(data['sshAuthenticationConfig']);
            }
            if (data.hasOwnProperty('tokenStatus')) {
                obj['tokenStatus'] = ApiClient.convertToType(data['tokenStatus'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitRemoteSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitRemoteSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authenticationTokenSecretVersion'] && !(typeof data['authenticationTokenSecretVersion'] === 'string' || data['authenticationTokenSecretVersion'] instanceof String)) {
            throw new Error("Expected the field `authenticationTokenSecretVersion` to be a primitive type in the JSON string but got " + data['authenticationTokenSecretVersion']);
        }
        // ensure the json data is a string
        if (data['defaultBranch'] && !(typeof data['defaultBranch'] === 'string' || data['defaultBranch'] instanceof String)) {
            throw new Error("Expected the field `defaultBranch` to be a primitive type in the JSON string but got " + data['defaultBranch']);
        }
        // validate the optional field `sshAuthenticationConfig`
        if (data['sshAuthenticationConfig']) { // data not null
          SshAuthenticationConfig.validateJSON(data['sshAuthenticationConfig']);
        }
        // ensure the json data is a string
        if (data['tokenStatus'] && !(typeof data['tokenStatus'] === 'string' || data['tokenStatus'] instanceof String)) {
            throw new Error("Expected the field `tokenStatus` to be a primitive type in the JSON string but got " + data['tokenStatus']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/_*_/secrets/_*_/versions/_*`.
 * @member {String} authenticationTokenSecretVersion
 */
GitRemoteSettings.prototype['authenticationTokenSecretVersion'] = undefined;

/**
 * Required. The Git remote's default branch name.
 * @member {String} defaultBranch
 */
GitRemoteSettings.prototype['defaultBranch'] = undefined;

/**
 * @member {module:model/SshAuthenticationConfig} sshAuthenticationConfig
 */
GitRemoteSettings.prototype['sshAuthenticationConfig'] = undefined;

/**
 * Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus
 * @member {module:model/GitRemoteSettings.TokenStatusEnum} tokenStatus
 */
GitRemoteSettings.prototype['tokenStatus'] = undefined;

/**
 * Required. The Git remote's URL.
 * @member {String} url
 */
GitRemoteSettings.prototype['url'] = undefined;





/**
 * Allowed values for the <code>tokenStatus</code> property.
 * @enum {String}
 * @readonly
 */
GitRemoteSettings['TokenStatusEnum'] = {

    /**
     * value: "TOKEN_STATUS_UNSPECIFIED"
     * @const
     */
    "TOKEN_STATUS_UNSPECIFIED": "TOKEN_STATUS_UNSPECIFIED",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID",

    /**
     * value: "VALID"
     * @const
     */
    "VALID": "VALID"
};



export default GitRemoteSettings;

