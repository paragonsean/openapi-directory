/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assertion from './Assertion';
import Declaration from './Declaration';
import Operations from './Operations';
import Relation from './Relation';
import Target from './Target';

/**
 * The CompilationResultAction model module.
 * @module model/CompilationResultAction
 * @version v1beta1
 */
class CompilationResultAction {
    /**
     * Constructs a new <code>CompilationResultAction</code>.
     * Represents a single Dataform action in a compilation result.
     * @alias module:model/CompilationResultAction
     */
    constructor() { 
        
        CompilationResultAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompilationResultAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompilationResultAction} obj Optional instance to populate.
     * @return {module:model/CompilationResultAction} The populated <code>CompilationResultAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompilationResultAction();

            if (data.hasOwnProperty('assertion')) {
                obj['assertion'] = Assertion.constructFromObject(data['assertion']);
            }
            if (data.hasOwnProperty('canonicalTarget')) {
                obj['canonicalTarget'] = Target.constructFromObject(data['canonicalTarget']);
            }
            if (data.hasOwnProperty('declaration')) {
                obj['declaration'] = Declaration.constructFromObject(data['declaration']);
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = Operations.constructFromObject(data['operations']);
            }
            if (data.hasOwnProperty('relation')) {
                obj['relation'] = Relation.constructFromObject(data['relation']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Target.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompilationResultAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompilationResultAction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assertion`
        if (data['assertion']) { // data not null
          Assertion.validateJSON(data['assertion']);
        }
        // validate the optional field `canonicalTarget`
        if (data['canonicalTarget']) { // data not null
          Target.validateJSON(data['canonicalTarget']);
        }
        // validate the optional field `declaration`
        if (data['declaration']) { // data not null
          Declaration.validateJSON(data['declaration']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // validate the optional field `operations`
        if (data['operations']) { // data not null
          Operations.validateJSON(data['operations']);
        }
        // validate the optional field `relation`
        if (data['relation']) { // data not null
          Relation.validateJSON(data['relation']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          Target.validateJSON(data['target']);
        }

        return true;
    }


}



/**
 * @member {module:model/Assertion} assertion
 */
CompilationResultAction.prototype['assertion'] = undefined;

/**
 * @member {module:model/Target} canonicalTarget
 */
CompilationResultAction.prototype['canonicalTarget'] = undefined;

/**
 * @member {module:model/Declaration} declaration
 */
CompilationResultAction.prototype['declaration'] = undefined;

/**
 * The full path including filename in which this action is located, relative to the workspace root.
 * @member {String} filePath
 */
CompilationResultAction.prototype['filePath'] = undefined;

/**
 * @member {module:model/Operations} operations
 */
CompilationResultAction.prototype['operations'] = undefined;

/**
 * @member {module:model/Relation} relation
 */
CompilationResultAction.prototype['relation'] = undefined;

/**
 * @member {module:model/Target} target
 */
CompilationResultAction.prototype['target'] = undefined;






export default CompilationResultAction;

