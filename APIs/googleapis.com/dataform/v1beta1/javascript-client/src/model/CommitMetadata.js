/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitAuthor from './CommitAuthor';

/**
 * The CommitMetadata model module.
 * @module model/CommitMetadata
 * @version v1beta1
 */
class CommitMetadata {
    /**
     * Constructs a new <code>CommitMetadata</code>.
     * Represents a Dataform Git commit.
     * @alias module:model/CommitMetadata
     */
    constructor() { 
        
        CommitMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitMetadata} obj Optional instance to populate.
     * @return {module:model/CommitMetadata} The populated <code>CommitMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitMetadata();

            if (data.hasOwnProperty('author')) {
                obj['author'] = CommitAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('commitMessage')) {
                obj['commitMessage'] = ApiClient.convertToType(data['commitMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          CommitAuthor.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['commitMessage'] && !(typeof data['commitMessage'] === 'string' || data['commitMessage'] instanceof String)) {
            throw new Error("Expected the field `commitMessage` to be a primitive type in the JSON string but got " + data['commitMessage']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommitAuthor} author
 */
CommitMetadata.prototype['author'] = undefined;

/**
 * Optional. The commit's message.
 * @member {String} commitMessage
 */
CommitMetadata.prototype['commitMessage'] = undefined;






export default CommitMetadata;

