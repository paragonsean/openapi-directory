/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SshAuthenticationConfig model module.
 * @module model/SshAuthenticationConfig
 * @version v1beta1
 */
class SshAuthenticationConfig {
    /**
     * Constructs a new <code>SshAuthenticationConfig</code>.
     * Configures fields for performing SSH authentication.
     * @alias module:model/SshAuthenticationConfig
     */
    constructor() { 
        
        SshAuthenticationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SshAuthenticationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SshAuthenticationConfig} obj Optional instance to populate.
     * @return {module:model/SshAuthenticationConfig} The populated <code>SshAuthenticationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SshAuthenticationConfig();

            if (data.hasOwnProperty('hostPublicKey')) {
                obj['hostPublicKey'] = ApiClient.convertToType(data['hostPublicKey'], 'String');
            }
            if (data.hasOwnProperty('userPrivateKeySecretVersion')) {
                obj['userPrivateKeySecretVersion'] = ApiClient.convertToType(data['userPrivateKeySecretVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SshAuthenticationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SshAuthenticationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostPublicKey'] && !(typeof data['hostPublicKey'] === 'string' || data['hostPublicKey'] instanceof String)) {
            throw new Error("Expected the field `hostPublicKey` to be a primitive type in the JSON string but got " + data['hostPublicKey']);
        }
        // ensure the json data is a string
        if (data['userPrivateKeySecretVersion'] && !(typeof data['userPrivateKeySecretVersion'] === 'string' || data['userPrivateKeySecretVersion'] instanceof String)) {
            throw new Error("Expected the field `userPrivateKeySecretVersion` to be a primitive type in the JSON string but got " + data['userPrivateKeySecretVersion']);
        }

        return true;
    }


}



/**
 * Required. Content of a public SSH key to verify an identity of a remote Git host.
 * @member {String} hostPublicKey
 */
SshAuthenticationConfig.prototype['hostPublicKey'] = undefined;

/**
 * Required. The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format `projects/_*_/secrets/_*_/versions/_*`.
 * @member {String} userPrivateKeySecretVersion
 */
SshAuthenticationConfig.prototype['userPrivateKeySecretVersion'] = undefined;






export default SshAuthenticationConfig;

