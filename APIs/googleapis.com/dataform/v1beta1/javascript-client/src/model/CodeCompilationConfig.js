/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodeCompilationConfig model module.
 * @module model/CodeCompilationConfig
 * @version v1beta1
 */
class CodeCompilationConfig {
    /**
     * Constructs a new <code>CodeCompilationConfig</code>.
     * Configures various aspects of Dataform code compilation.
     * @alias module:model/CodeCompilationConfig
     */
    constructor() { 
        
        CodeCompilationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodeCompilationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeCompilationConfig} obj Optional instance to populate.
     * @return {module:model/CodeCompilationConfig} The populated <code>CodeCompilationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeCompilationConfig();

            if (data.hasOwnProperty('assertionSchema')) {
                obj['assertionSchema'] = ApiClient.convertToType(data['assertionSchema'], 'String');
            }
            if (data.hasOwnProperty('databaseSuffix')) {
                obj['databaseSuffix'] = ApiClient.convertToType(data['databaseSuffix'], 'String');
            }
            if (data.hasOwnProperty('defaultDatabase')) {
                obj['defaultDatabase'] = ApiClient.convertToType(data['defaultDatabase'], 'String');
            }
            if (data.hasOwnProperty('defaultLocation')) {
                obj['defaultLocation'] = ApiClient.convertToType(data['defaultLocation'], 'String');
            }
            if (data.hasOwnProperty('defaultSchema')) {
                obj['defaultSchema'] = ApiClient.convertToType(data['defaultSchema'], 'String');
            }
            if (data.hasOwnProperty('schemaSuffix')) {
                obj['schemaSuffix'] = ApiClient.convertToType(data['schemaSuffix'], 'String');
            }
            if (data.hasOwnProperty('tablePrefix')) {
                obj['tablePrefix'] = ApiClient.convertToType(data['tablePrefix'], 'String');
            }
            if (data.hasOwnProperty('vars')) {
                obj['vars'] = ApiClient.convertToType(data['vars'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeCompilationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeCompilationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assertionSchema'] && !(typeof data['assertionSchema'] === 'string' || data['assertionSchema'] instanceof String)) {
            throw new Error("Expected the field `assertionSchema` to be a primitive type in the JSON string but got " + data['assertionSchema']);
        }
        // ensure the json data is a string
        if (data['databaseSuffix'] && !(typeof data['databaseSuffix'] === 'string' || data['databaseSuffix'] instanceof String)) {
            throw new Error("Expected the field `databaseSuffix` to be a primitive type in the JSON string but got " + data['databaseSuffix']);
        }
        // ensure the json data is a string
        if (data['defaultDatabase'] && !(typeof data['defaultDatabase'] === 'string' || data['defaultDatabase'] instanceof String)) {
            throw new Error("Expected the field `defaultDatabase` to be a primitive type in the JSON string but got " + data['defaultDatabase']);
        }
        // ensure the json data is a string
        if (data['defaultLocation'] && !(typeof data['defaultLocation'] === 'string' || data['defaultLocation'] instanceof String)) {
            throw new Error("Expected the field `defaultLocation` to be a primitive type in the JSON string but got " + data['defaultLocation']);
        }
        // ensure the json data is a string
        if (data['defaultSchema'] && !(typeof data['defaultSchema'] === 'string' || data['defaultSchema'] instanceof String)) {
            throw new Error("Expected the field `defaultSchema` to be a primitive type in the JSON string but got " + data['defaultSchema']);
        }
        // ensure the json data is a string
        if (data['schemaSuffix'] && !(typeof data['schemaSuffix'] === 'string' || data['schemaSuffix'] instanceof String)) {
            throw new Error("Expected the field `schemaSuffix` to be a primitive type in the JSON string but got " + data['schemaSuffix']);
        }
        // ensure the json data is a string
        if (data['tablePrefix'] && !(typeof data['tablePrefix'] === 'string' || data['tablePrefix'] instanceof String)) {
            throw new Error("Expected the field `tablePrefix` to be a primitive type in the JSON string but got " + data['tablePrefix']);
        }

        return true;
    }


}



/**
 * Optional. The default schema (BigQuery dataset ID) for assertions.
 * @member {String} assertionSchema
 */
CodeCompilationConfig.prototype['assertionSchema'] = undefined;

/**
 * Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
 * @member {String} databaseSuffix
 */
CodeCompilationConfig.prototype['databaseSuffix'] = undefined;

/**
 * Optional. The default database (Google Cloud project ID).
 * @member {String} defaultDatabase
 */
CodeCompilationConfig.prototype['defaultDatabase'] = undefined;

/**
 * Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.
 * @member {String} defaultLocation
 */
CodeCompilationConfig.prototype['defaultLocation'] = undefined;

/**
 * Optional. The default schema (BigQuery dataset ID).
 * @member {String} defaultSchema
 */
CodeCompilationConfig.prototype['defaultSchema'] = undefined;

/**
 * Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
 * @member {String} schemaSuffix
 */
CodeCompilationConfig.prototype['schemaSuffix'] = undefined;

/**
 * Optional. The prefix that should be prepended to all table names.
 * @member {String} tablePrefix
 */
CodeCompilationConfig.prototype['tablePrefix'] = undefined;

/**
 * Optional. User-defined variables that are made available to project code during compilation.
 * @member {Object.<String, String>} vars
 */
CodeCompilationConfig.prototype['vars'] = undefined;






export default CodeCompilationConfig;

