/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';
import InvocationConfig from './InvocationConfig';

/**
 * The WorkflowInvocation model module.
 * @module model/WorkflowInvocation
 * @version v1beta1
 */
class WorkflowInvocation {
    /**
     * Constructs a new <code>WorkflowInvocation</code>.
     * Represents a single invocation of a compilation result.
     * @alias module:model/WorkflowInvocation
     */
    constructor() { 
        
        WorkflowInvocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowInvocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowInvocation} obj Optional instance to populate.
     * @return {module:model/WorkflowInvocation} The populated <code>WorkflowInvocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowInvocation();

            if (data.hasOwnProperty('compilationResult')) {
                obj['compilationResult'] = ApiClient.convertToType(data['compilationResult'], 'String');
            }
            if (data.hasOwnProperty('invocationConfig')) {
                obj['invocationConfig'] = InvocationConfig.constructFromObject(data['invocationConfig']);
            }
            if (data.hasOwnProperty('invocationTiming')) {
                obj['invocationTiming'] = Interval.constructFromObject(data['invocationTiming']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resolvedCompilationResult')) {
                obj['resolvedCompilationResult'] = ApiClient.convertToType(data['resolvedCompilationResult'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('workflowConfig')) {
                obj['workflowConfig'] = ApiClient.convertToType(data['workflowConfig'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowInvocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowInvocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['compilationResult'] && !(typeof data['compilationResult'] === 'string' || data['compilationResult'] instanceof String)) {
            throw new Error("Expected the field `compilationResult` to be a primitive type in the JSON string but got " + data['compilationResult']);
        }
        // validate the optional field `invocationConfig`
        if (data['invocationConfig']) { // data not null
          InvocationConfig.validateJSON(data['invocationConfig']);
        }
        // validate the optional field `invocationTiming`
        if (data['invocationTiming']) { // data not null
          Interval.validateJSON(data['invocationTiming']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resolvedCompilationResult'] && !(typeof data['resolvedCompilationResult'] === 'string' || data['resolvedCompilationResult'] instanceof String)) {
            throw new Error("Expected the field `resolvedCompilationResult` to be a primitive type in the JSON string but got " + data['resolvedCompilationResult']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['workflowConfig'] && !(typeof data['workflowConfig'] === 'string' || data['workflowConfig'] instanceof String)) {
            throw new Error("Expected the field `workflowConfig` to be a primitive type in the JSON string but got " + data['workflowConfig']);
        }

        return true;
    }


}



/**
 * Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/_*_/locations/_*_/repositories/_*_/compilationResults/_*`.
 * @member {String} compilationResult
 */
WorkflowInvocation.prototype['compilationResult'] = undefined;

/**
 * @member {module:model/InvocationConfig} invocationConfig
 */
WorkflowInvocation.prototype['invocationConfig'] = undefined;

/**
 * @member {module:model/Interval} invocationTiming
 */
WorkflowInvocation.prototype['invocationTiming'] = undefined;

/**
 * Output only. The workflow invocation's name.
 * @member {String} name
 */
WorkflowInvocation.prototype['name'] = undefined;

/**
 * Output only. The resolved compilation result that was used to create this invocation. Will be in the format `projects/_*_/locations/_*_/repositories/_*_/compilationResults/_*`.
 * @member {String} resolvedCompilationResult
 */
WorkflowInvocation.prototype['resolvedCompilationResult'] = undefined;

/**
 * Output only. This workflow invocation's current state.
 * @member {module:model/WorkflowInvocation.StateEnum} state
 */
WorkflowInvocation.prototype['state'] = undefined;

/**
 * Immutable. The name of the workflow config to invoke. Must be in the format `projects/_*_/locations/_*_/repositories/_*_/workflowConfigs/_*`.
 * @member {String} workflowConfig
 */
WorkflowInvocation.prototype['workflowConfig'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowInvocation['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELING"
     * @const
     */
    "CANCELING": "CANCELING"
};



export default WorkflowInvocation;

