/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Target from './Target';

/**
 * The InvocationConfig model module.
 * @module model/InvocationConfig
 * @version v1beta1
 */
class InvocationConfig {
    /**
     * Constructs a new <code>InvocationConfig</code>.
     * Includes various configuration options for a workflow invocation. If both &#x60;included_targets&#x60; and &#x60;included_tags&#x60; are unset, all actions will be included.
     * @alias module:model/InvocationConfig
     */
    constructor() { 
        
        InvocationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvocationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvocationConfig} obj Optional instance to populate.
     * @return {module:model/InvocationConfig} The populated <code>InvocationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvocationConfig();

            if (data.hasOwnProperty('fullyRefreshIncrementalTablesEnabled')) {
                obj['fullyRefreshIncrementalTablesEnabled'] = ApiClient.convertToType(data['fullyRefreshIncrementalTablesEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('includedTags')) {
                obj['includedTags'] = ApiClient.convertToType(data['includedTags'], ['String']);
            }
            if (data.hasOwnProperty('includedTargets')) {
                obj['includedTargets'] = ApiClient.convertToType(data['includedTargets'], [Target]);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('transitiveDependenciesIncluded')) {
                obj['transitiveDependenciesIncluded'] = ApiClient.convertToType(data['transitiveDependenciesIncluded'], 'Boolean');
            }
            if (data.hasOwnProperty('transitiveDependentsIncluded')) {
                obj['transitiveDependentsIncluded'] = ApiClient.convertToType(data['transitiveDependentsIncluded'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvocationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvocationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['includedTags'])) {
            throw new Error("Expected the field `includedTags` to be an array in the JSON data but got " + data['includedTags']);
        }
        if (data['includedTargets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedTargets'])) {
                throw new Error("Expected the field `includedTargets` to be an array in the JSON data but got " + data['includedTargets']);
            }
            // validate the optional field `includedTargets` (array)
            for (const item of data['includedTargets']) {
                Target.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }

        return true;
    }


}



/**
 * Optional. When set to true, any incremental tables will be fully refreshed.
 * @member {Boolean} fullyRefreshIncrementalTablesEnabled
 */
InvocationConfig.prototype['fullyRefreshIncrementalTablesEnabled'] = undefined;

/**
 * Optional. The set of tags to include.
 * @member {Array.<String>} includedTags
 */
InvocationConfig.prototype['includedTags'] = undefined;

/**
 * Optional. The set of action identifiers to include.
 * @member {Array.<module:model/Target>} includedTargets
 */
InvocationConfig.prototype['includedTargets'] = undefined;

/**
 * Optional. The service account to run workflow invocations under.
 * @member {String} serviceAccount
 */
InvocationConfig.prototype['serviceAccount'] = undefined;

/**
 * Optional. When set to true, transitive dependencies of included actions will be executed.
 * @member {Boolean} transitiveDependenciesIncluded
 */
InvocationConfig.prototype['transitiveDependenciesIncluded'] = undefined;

/**
 * Optional. When set to true, transitive dependents of included actions will be executed.
 * @member {Boolean} transitiveDependentsIncluded
 */
InvocationConfig.prototype['transitiveDependentsIncluded'] = undefined;






export default InvocationConfig;

