/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelationDescriptor from './RelationDescriptor';
import Target from './Target';

/**
 * The Assertion model module.
 * @module model/Assertion
 * @version v1beta1
 */
class Assertion {
    /**
     * Constructs a new <code>Assertion</code>.
     * Represents an assertion upon a SQL query which is required return zero rows.
     * @alias module:model/Assertion
     */
    constructor() { 
        
        Assertion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assertion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assertion} obj Optional instance to populate.
     * @return {module:model/Assertion} The populated <code>Assertion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assertion();

            if (data.hasOwnProperty('dependencyTargets')) {
                obj['dependencyTargets'] = ApiClient.convertToType(data['dependencyTargets'], [Target]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('parentAction')) {
                obj['parentAction'] = Target.constructFromObject(data['parentAction']);
            }
            if (data.hasOwnProperty('relationDescriptor')) {
                obj['relationDescriptor'] = RelationDescriptor.constructFromObject(data['relationDescriptor']);
            }
            if (data.hasOwnProperty('selectQuery')) {
                obj['selectQuery'] = ApiClient.convertToType(data['selectQuery'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assertion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assertion</code>.
     */
    static validateJSON(data) {
        if (data['dependencyTargets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependencyTargets'])) {
                throw new Error("Expected the field `dependencyTargets` to be an array in the JSON data but got " + data['dependencyTargets']);
            }
            // validate the optional field `dependencyTargets` (array)
            for (const item of data['dependencyTargets']) {
                Target.validateJSON(item);
            };
        }
        // validate the optional field `parentAction`
        if (data['parentAction']) { // data not null
          Target.validateJSON(data['parentAction']);
        }
        // validate the optional field `relationDescriptor`
        if (data['relationDescriptor']) { // data not null
          RelationDescriptor.validateJSON(data['relationDescriptor']);
        }
        // ensure the json data is a string
        if (data['selectQuery'] && !(typeof data['selectQuery'] === 'string' || data['selectQuery'] instanceof String)) {
            throw new Error("Expected the field `selectQuery` to be a primitive type in the JSON string but got " + data['selectQuery']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * A list of actions that this action depends on.
 * @member {Array.<module:model/Target>} dependencyTargets
 */
Assertion.prototype['dependencyTargets'] = undefined;

/**
 * Whether this action is disabled (i.e. should not be run).
 * @member {Boolean} disabled
 */
Assertion.prototype['disabled'] = undefined;

/**
 * @member {module:model/Target} parentAction
 */
Assertion.prototype['parentAction'] = undefined;

/**
 * @member {module:model/RelationDescriptor} relationDescriptor
 */
Assertion.prototype['relationDescriptor'] = undefined;

/**
 * The SELECT query which must return zero rows in order for this assertion to succeed.
 * @member {String} selectQuery
 */
Assertion.prototype['selectQuery'] = undefined;

/**
 * Arbitrary, user-defined tags on this action.
 * @member {Array.<String>} tags
 */
Assertion.prototype['tags'] = undefined;






export default Assertion;

