/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitRemoteSettings from './GitRemoteSettings';
import WorkspaceCompilationOverrides from './WorkspaceCompilationOverrides';

/**
 * The Repository model module.
 * @module model/Repository
 * @version v1beta1
 */
class Repository {
    /**
     * Constructs a new <code>Repository</code>.
     * Represents a Dataform Git repository.
     * @alias module:model/Repository
     */
    constructor() { 
        
        Repository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository} obj Optional instance to populate.
     * @return {module:model/Repository} The populated <code>Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('gitRemoteSettings')) {
                obj['gitRemoteSettings'] = GitRemoteSettings.constructFromObject(data['gitRemoteSettings']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('npmrcEnvironmentVariablesSecretVersion')) {
                obj['npmrcEnvironmentVariablesSecretVersion'] = ApiClient.convertToType(data['npmrcEnvironmentVariablesSecretVersion'], 'String');
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('setAuthenticatedUserAdmin')) {
                obj['setAuthenticatedUserAdmin'] = ApiClient.convertToType(data['setAuthenticatedUserAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('workspaceCompilationOverrides')) {
                obj['workspaceCompilationOverrides'] = WorkspaceCompilationOverrides.constructFromObject(data['workspaceCompilationOverrides']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `gitRemoteSettings`
        if (data['gitRemoteSettings']) { // data not null
          GitRemoteSettings.validateJSON(data['gitRemoteSettings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['npmrcEnvironmentVariablesSecretVersion'] && !(typeof data['npmrcEnvironmentVariablesSecretVersion'] === 'string' || data['npmrcEnvironmentVariablesSecretVersion'] instanceof String)) {
            throw new Error("Expected the field `npmrcEnvironmentVariablesSecretVersion` to be a primitive type in the JSON string but got " + data['npmrcEnvironmentVariablesSecretVersion']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // validate the optional field `workspaceCompilationOverrides`
        if (data['workspaceCompilationOverrides']) { // data not null
          WorkspaceCompilationOverrides.validateJSON(data['workspaceCompilationOverrides']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp of when the repository was created.
 * @member {String} createTime
 */
Repository.prototype['createTime'] = undefined;

/**
 * Optional. The repository's user-friendly name.
 * @member {String} displayName
 */
Repository.prototype['displayName'] = undefined;

/**
 * @member {module:model/GitRemoteSettings} gitRemoteSettings
 */
Repository.prototype['gitRemoteSettings'] = undefined;

/**
 * Optional. Repository user labels.
 * @member {Object.<String, String>} labels
 */
Repository.prototype['labels'] = undefined;

/**
 * Output only. The repository's name.
 * @member {String} name
 */
Repository.prototype['name'] = undefined;

/**
 * Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/_*_/secrets/_*_/versions/_*`. The file itself must be in a JSON format.
 * @member {String} npmrcEnvironmentVariablesSecretVersion
 */
Repository.prototype['npmrcEnvironmentVariablesSecretVersion'] = undefined;

/**
 * Optional. The service account to run workflow invocations under.
 * @member {String} serviceAccount
 */
Repository.prototype['serviceAccount'] = undefined;

/**
 * Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories
 * @member {Boolean} setAuthenticatedUserAdmin
 */
Repository.prototype['setAuthenticatedUserAdmin'] = undefined;

/**
 * @member {module:model/WorkspaceCompilationOverrides} workspaceCompilationOverrides
 */
Repository.prototype['workspaceCompilationOverrides'] = undefined;






export default Repository;

