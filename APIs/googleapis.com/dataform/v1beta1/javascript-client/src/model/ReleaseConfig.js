/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeCompilationConfig from './CodeCompilationConfig';
import ScheduledReleaseRecord from './ScheduledReleaseRecord';

/**
 * The ReleaseConfig model module.
 * @module model/ReleaseConfig
 * @version v1beta1
 */
class ReleaseConfig {
    /**
     * Constructs a new <code>ReleaseConfig</code>.
     * Represents a Dataform release configuration.
     * @alias module:model/ReleaseConfig
     */
    constructor() { 
        
        ReleaseConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReleaseConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReleaseConfig} obj Optional instance to populate.
     * @return {module:model/ReleaseConfig} The populated <code>ReleaseConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReleaseConfig();

            if (data.hasOwnProperty('codeCompilationConfig')) {
                obj['codeCompilationConfig'] = CodeCompilationConfig.constructFromObject(data['codeCompilationConfig']);
            }
            if (data.hasOwnProperty('cronSchedule')) {
                obj['cronSchedule'] = ApiClient.convertToType(data['cronSchedule'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('gitCommitish')) {
                obj['gitCommitish'] = ApiClient.convertToType(data['gitCommitish'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recentScheduledReleaseRecords')) {
                obj['recentScheduledReleaseRecords'] = ApiClient.convertToType(data['recentScheduledReleaseRecords'], [ScheduledReleaseRecord]);
            }
            if (data.hasOwnProperty('releaseCompilationResult')) {
                obj['releaseCompilationResult'] = ApiClient.convertToType(data['releaseCompilationResult'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReleaseConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReleaseConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `codeCompilationConfig`
        if (data['codeCompilationConfig']) { // data not null
          CodeCompilationConfig.validateJSON(data['codeCompilationConfig']);
        }
        // ensure the json data is a string
        if (data['cronSchedule'] && !(typeof data['cronSchedule'] === 'string' || data['cronSchedule'] instanceof String)) {
            throw new Error("Expected the field `cronSchedule` to be a primitive type in the JSON string but got " + data['cronSchedule']);
        }
        // ensure the json data is a string
        if (data['gitCommitish'] && !(typeof data['gitCommitish'] === 'string' || data['gitCommitish'] instanceof String)) {
            throw new Error("Expected the field `gitCommitish` to be a primitive type in the JSON string but got " + data['gitCommitish']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['recentScheduledReleaseRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recentScheduledReleaseRecords'])) {
                throw new Error("Expected the field `recentScheduledReleaseRecords` to be an array in the JSON data but got " + data['recentScheduledReleaseRecords']);
            }
            // validate the optional field `recentScheduledReleaseRecords` (array)
            for (const item of data['recentScheduledReleaseRecords']) {
                ScheduledReleaseRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['releaseCompilationResult'] && !(typeof data['releaseCompilationResult'] === 'string' || data['releaseCompilationResult'] instanceof String)) {
            throw new Error("Expected the field `releaseCompilationResult` to be a primitive type in the JSON string but got " + data['releaseCompilationResult']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/CodeCompilationConfig} codeCompilationConfig
 */
ReleaseConfig.prototype['codeCompilationConfig'] = undefined;

/**
 * Optional. Optional schedule (in cron format) for automatic creation of compilation results.
 * @member {String} cronSchedule
 */
ReleaseConfig.prototype['cronSchedule'] = undefined;

/**
 * Optional. Disables automatic creation of compilation results.
 * @member {Boolean} disabled
 */
ReleaseConfig.prototype['disabled'] = undefined;

/**
 * Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
 * @member {String} gitCommitish
 */
ReleaseConfig.prototype['gitCommitish'] = undefined;

/**
 * Output only. The release config's name.
 * @member {String} name
 */
ReleaseConfig.prototype['name'] = undefined;

/**
 * Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.
 * @member {Array.<module:model/ScheduledReleaseRecord>} recentScheduledReleaseRecords
 */
ReleaseConfig.prototype['recentScheduledReleaseRecords'] = undefined;

/**
 * Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is automatically created from this release config (using cron_schedule), or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/_*_/locations/_*_/repositories/_*_/compilationResults/_*`.
 * @member {String} releaseCompilationResult
 */
ReleaseConfig.prototype['releaseCompilationResult'] = undefined;

/**
 * Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
 * @member {String} timeZone
 */
ReleaseConfig.prototype['timeZone'] = undefined;






export default ReleaseConfig;

