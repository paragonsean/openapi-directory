/**
 * Dataform API
 * Service to develop, version control, and operationalize SQL pipelines in BigQuery.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataformApi);
  }
}(this, function(expect, DataformApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataformApi.Relation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Relation', function() {
    it('should create an instance of Relation', function() {
      // uncomment below and update the code to test Relation
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be.a(DataformApi.Relation);
    });

    it('should have the property additionalOptions (base name: "additionalOptions")', function() {
      // uncomment below and update the code to test the property additionalOptions
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property clusterExpressions (base name: "clusterExpressions")', function() {
      // uncomment below and update the code to test the property clusterExpressions
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property dependencyTargets (base name: "dependencyTargets")', function() {
      // uncomment below and update the code to test the property dependencyTargets
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property incrementalTableConfig (base name: "incrementalTableConfig")', function() {
      // uncomment below and update the code to test the property incrementalTableConfig
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property partitionExpirationDays (base name: "partitionExpirationDays")', function() {
      // uncomment below and update the code to test the property partitionExpirationDays
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property partitionExpression (base name: "partitionExpression")', function() {
      // uncomment below and update the code to test the property partitionExpression
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property postOperations (base name: "postOperations")', function() {
      // uncomment below and update the code to test the property postOperations
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property preOperations (base name: "preOperations")', function() {
      // uncomment below and update the code to test the property preOperations
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property relationDescriptor (base name: "relationDescriptor")', function() {
      // uncomment below and update the code to test the property relationDescriptor
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property relationType (base name: "relationType")', function() {
      // uncomment below and update the code to test the property relationType
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property requirePartitionFilter (base name: "requirePartitionFilter")', function() {
      // uncomment below and update the code to test the property requirePartitionFilter
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property selectQuery (base name: "selectQuery")', function() {
      // uncomment below and update the code to test the property selectQuery
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new DataformApi.Relation();
      //expect(instance).to.be();
    });

  });

}));
