/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpHeaderMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpHeaderMatch::OAIHttpHeaderMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpHeaderMatch::OAIHttpHeaderMatch() {
    this->initializeModel();
}

OAIHttpHeaderMatch::~OAIHttpHeaderMatch() {}

void OAIHttpHeaderMatch::initializeModel() {

    m_header_name_isSet = false;
    m_header_name_isValid = false;

    m_regex_match_isSet = false;
    m_regex_match_isValid = false;
}

void OAIHttpHeaderMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpHeaderMatch::fromJsonObject(QJsonObject json) {

    m_header_name_isValid = ::OpenAPI::fromJsonValue(m_header_name, json[QString("headerName")]);
    m_header_name_isSet = !json[QString("headerName")].isNull() && m_header_name_isValid;

    m_regex_match_isValid = ::OpenAPI::fromJsonValue(m_regex_match, json[QString("regexMatch")]);
    m_regex_match_isSet = !json[QString("regexMatch")].isNull() && m_regex_match_isValid;
}

QString OAIHttpHeaderMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpHeaderMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_header_name_isSet) {
        obj.insert(QString("headerName"), ::OpenAPI::toJsonValue(m_header_name));
    }
    if (m_regex_match_isSet) {
        obj.insert(QString("regexMatch"), ::OpenAPI::toJsonValue(m_regex_match));
    }
    return obj;
}

QString OAIHttpHeaderMatch::getHeaderName() const {
    return m_header_name;
}
void OAIHttpHeaderMatch::setHeaderName(const QString &header_name) {
    m_header_name = header_name;
    m_header_name_isSet = true;
}

bool OAIHttpHeaderMatch::is_header_name_Set() const{
    return m_header_name_isSet;
}

bool OAIHttpHeaderMatch::is_header_name_Valid() const{
    return m_header_name_isValid;
}

QString OAIHttpHeaderMatch::getRegexMatch() const {
    return m_regex_match;
}
void OAIHttpHeaderMatch::setRegexMatch(const QString &regex_match) {
    m_regex_match = regex_match;
    m_regex_match_isSet = true;
}

bool OAIHttpHeaderMatch::is_regex_match_Set() const{
    return m_regex_match_isSet;
}

bool OAIHttpHeaderMatch::is_regex_match_Valid() const{
    return m_regex_match_isValid;
}

bool OAIHttpHeaderMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpHeaderMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
