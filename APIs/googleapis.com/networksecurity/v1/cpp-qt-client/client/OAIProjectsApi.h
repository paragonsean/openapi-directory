/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddAddressGroupItemsRequest.h"
#include "OAIAddressGroup.h"
#include "OAIAuthorizationPolicy.h"
#include "OAIClientTlsPolicy.h"
#include "OAICloneAddressGroupItemsRequest.h"
#include "OAIGatewaySecurityPolicy.h"
#include "OAIGatewaySecurityPolicyRule.h"
#include "OAIGoogleIamV1Policy.h"
#include "OAIGoogleIamV1SetIamPolicyRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsResponse.h"
#include "OAIListAddressGroupReferencesResponse.h"
#include "OAIListAddressGroupsResponse.h"
#include "OAIListAuthorizationPoliciesResponse.h"
#include "OAIListClientTlsPoliciesResponse.h"
#include "OAIListGatewaySecurityPoliciesResponse.h"
#include "OAIListGatewaySecurityPolicyRulesResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIListOperationsResponse.h"
#include "OAIListServerTlsPoliciesResponse.h"
#include "OAIListTlsInspectionPoliciesResponse.h"
#include "OAIListUrlListsResponse.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIRemoveAddressGroupItemsRequest.h"
#include "OAIServerTlsPolicy.h"
#include "OAITlsInspectionPolicy.h"
#include "OAIUrlList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address_group QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_address_group_items_request OAIAddAddressGroupItemsRequest [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_addItems(const QString &address_group, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddAddressGroupItemsRequest> &oai_add_address_group_items_request = ::OpenAPI::OptionalParam<OAIAddAddressGroupItemsRequest>());

    /**
    * @param[in]  address_group QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_clone_address_group_items_request OAICloneAddressGroupItemsRequest [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_cloneItems(const QString &address_group, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICloneAddressGroupItemsRequest> &oai_clone_address_group_items_request = ::OpenAPI::OptionalParam<OAICloneAddressGroupItemsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  address_group_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  oai_address_group OAIAddressGroup [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddressGroup> &oai_address_group = ::OpenAPI::OptionalParam<OAIAddressGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  address_group QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_listReferences(const QString &address_group, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  address_group QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_remove_address_group_items_request OAIRemoveAddressGroupItemsRequest [optional]
    */
    virtual void networksecurity_projects_locations_addressGroups_removeItems(const QString &address_group, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveAddressGroupItemsRequest> &oai_remove_address_group_items_request = ::OpenAPI::OptionalParam<OAIRemoveAddressGroupItemsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  authorization_policy_id QString [optional]
    * @param[in]  oai_authorization_policy OAIAuthorizationPolicy [optional]
    */
    virtual void networksecurity_projects_locations_authorizationPolicies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization_policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizationPolicy> &oai_authorization_policy = ::OpenAPI::OptionalParam<OAIAuthorizationPolicy>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_authorizationPolicies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_tls_policy_id QString [optional]
    * @param[in]  oai_client_tls_policy OAIClientTlsPolicy [optional]
    */
    virtual void networksecurity_projects_locations_clientTlsPolicies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_tls_policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClientTlsPolicy> &oai_client_tls_policy = ::OpenAPI::OptionalParam<OAIClientTlsPolicy>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_clientTlsPolicies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  gateway_security_policy_id QString [optional]
    * @param[in]  oai_gateway_security_policy OAIGatewaySecurityPolicy [optional]
    */
    virtual void networksecurity_projects_locations_gatewaySecurityPolicies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_security_policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGatewaySecurityPolicy> &oai_gateway_security_policy = ::OpenAPI::OptionalParam<OAIGatewaySecurityPolicy>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_gatewaySecurityPolicies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  gateway_security_policy_rule_id QString [optional]
    * @param[in]  oai_gateway_security_policy_rule OAIGatewaySecurityPolicyRule [optional]
    */
    virtual void networksecurity_projects_locations_gatewaySecurityPolicies_rules_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_security_policy_rule_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGatewaySecurityPolicyRule> &oai_gateway_security_policy_rule = ::OpenAPI::OptionalParam<OAIGatewaySecurityPolicyRule>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_gatewaySecurityPolicies_rules_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void networksecurity_projects_locations_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  server_tls_policy_id QString [optional]
    * @param[in]  oai_server_tls_policy OAIServerTlsPolicy [optional]
    */
    virtual void networksecurity_projects_locations_serverTlsPolicies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_tls_policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIServerTlsPolicy> &oai_server_tls_policy = ::OpenAPI::OptionalParam<OAIServerTlsPolicy>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void networksecurity_projects_locations_serverTlsPolicies_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_serverTlsPolicies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_set_iam_policy_request OAIGoogleIamV1SetIamPolicyRequest [optional]
    */
    virtual void networksecurity_projects_locations_serverTlsPolicies_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest> &oai_google_iam_v1_set_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_test_iam_permissions_request OAIGoogleIamV1TestIamPermissionsRequest [optional]
    */
    virtual void networksecurity_projects_locations_serverTlsPolicies_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest> &oai_google_iam_v1_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tls_inspection_policy_id QString [optional]
    * @param[in]  oai_tls_inspection_policy OAITlsInspectionPolicy [optional]
    */
    virtual void networksecurity_projects_locations_tlsInspectionPolicies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tls_inspection_policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITlsInspectionPolicy> &oai_tls_inspection_policy = ::OpenAPI::OptionalParam<OAITlsInspectionPolicy>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_tlsInspectionPolicies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  url_list_id QString [optional]
    * @param[in]  oai_url_list OAIUrlList [optional]
    */
    virtual void networksecurity_projects_locations_urlLists_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_list_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUrlList> &oai_url_list = ::OpenAPI::OptionalParam<OAIUrlList>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void networksecurity_projects_locations_urlLists_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void networksecurity_projects_locations_urlLists_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void networksecurity_projects_locations_urlLists_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_url_list OAIUrlList [optional]
    */
    virtual void networksecurity_projects_locations_urlLists_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUrlList> &oai_url_list = ::OpenAPI::OptionalParam<OAIUrlList>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networksecurity_projects_locations_addressGroups_addItemsCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_addressGroups_cloneItemsCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_addressGroups_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_addressGroups_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_addressGroups_listReferencesCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_addressGroups_removeItemsCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_authorizationPolicies_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_authorizationPolicies_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_clientTlsPolicies_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_clientTlsPolicies_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_gatewaySecurityPolicies_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_gatewaySecurityPolicies_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_operations_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_serverTlsPolicies_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_serverTlsPolicies_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_tlsInspectionPolicies_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_tlsInspectionPolicies_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_urlLists_createCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_urlLists_deleteCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_urlLists_getCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_urlLists_listCallback(OAIHttpRequestWorker *worker);
    void networksecurity_projects_locations_urlLists_patchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networksecurity_projects_locations_addressGroups_addItemsSignal(OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_cloneItemsSignal(OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_listSignal(OAIListAddressGroupsResponse summary);
    void networksecurity_projects_locations_addressGroups_listReferencesSignal(OAIListAddressGroupReferencesResponse summary);
    void networksecurity_projects_locations_addressGroups_removeItemsSignal(OAIOperation summary);
    void networksecurity_projects_locations_authorizationPolicies_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_authorizationPolicies_listSignal(OAIListAuthorizationPoliciesResponse summary);
    void networksecurity_projects_locations_clientTlsPolicies_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_clientTlsPolicies_listSignal(OAIListClientTlsPoliciesResponse summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignal(OAIListGatewaySecurityPoliciesResponse summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignal(OAIListGatewaySecurityPolicyRulesResponse summary);
    void networksecurity_projects_locations_listSignal(OAIListLocationsResponse summary);
    void networksecurity_projects_locations_operations_cancelSignal(OAIObject summary);
    void networksecurity_projects_locations_operations_listSignal(OAIListOperationsResponse summary);
    void networksecurity_projects_locations_serverTlsPolicies_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignal(OAIGoogleIamV1Policy summary);
    void networksecurity_projects_locations_serverTlsPolicies_listSignal(OAIListServerTlsPoliciesResponse summary);
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignal(OAIGoogleIamV1Policy summary);
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignal(OAIGoogleIamV1TestIamPermissionsResponse summary);
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignal(OAIListTlsInspectionPoliciesResponse summary);
    void networksecurity_projects_locations_urlLists_createSignal(OAIOperation summary);
    void networksecurity_projects_locations_urlLists_deleteSignal(OAIOperation summary);
    void networksecurity_projects_locations_urlLists_getSignal(OAIUrlList summary);
    void networksecurity_projects_locations_urlLists_listSignal(OAIListUrlListsResponse summary);
    void networksecurity_projects_locations_urlLists_patchSignal(OAIOperation summary);


    void networksecurity_projects_locations_addressGroups_addItemsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_cloneItemsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_addressGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIListAddressGroupsResponse summary);
    void networksecurity_projects_locations_addressGroups_listReferencesSignalFull(OAIHttpRequestWorker *worker, OAIListAddressGroupReferencesResponse summary);
    void networksecurity_projects_locations_addressGroups_removeItemsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_authorizationPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_authorizationPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListAuthorizationPoliciesResponse summary);
    void networksecurity_projects_locations_clientTlsPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_clientTlsPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientTlsPoliciesResponse summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListGatewaySecurityPoliciesResponse summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalFull(OAIHttpRequestWorker *worker, OAIListGatewaySecurityPolicyRulesResponse summary);
    void networksecurity_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void networksecurity_projects_locations_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void networksecurity_projects_locations_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void networksecurity_projects_locations_serverTlsPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void networksecurity_projects_locations_serverTlsPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListServerTlsPoliciesResponse summary);
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1TestIamPermissionsResponse summary);
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListTlsInspectionPoliciesResponse summary);
    void networksecurity_projects_locations_urlLists_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_urlLists_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void networksecurity_projects_locations_urlLists_getSignalFull(OAIHttpRequestWorker *worker, OAIUrlList summary);
    void networksecurity_projects_locations_urlLists_listSignalFull(OAIHttpRequestWorker *worker, OAIListUrlListsResponse summary);
    void networksecurity_projects_locations_urlLists_patchSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);

    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_addItemsSignalError() instead")
    void networksecurity_projects_locations_addressGroups_addItemsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_addItemsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_cloneItemsSignalError() instead")
    void networksecurity_projects_locations_addressGroups_cloneItemsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_cloneItemsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_createSignalError() instead")
    void networksecurity_projects_locations_addressGroups_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_listSignalError() instead")
    void networksecurity_projects_locations_addressGroups_listSignalE(OAIListAddressGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_listSignalError(OAIListAddressGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_listReferencesSignalError() instead")
    void networksecurity_projects_locations_addressGroups_listReferencesSignalE(OAIListAddressGroupReferencesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_listReferencesSignalError(OAIListAddressGroupReferencesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_removeItemsSignalError() instead")
    void networksecurity_projects_locations_addressGroups_removeItemsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_removeItemsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_authorizationPolicies_createSignalError() instead")
    void networksecurity_projects_locations_authorizationPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_authorizationPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_authorizationPolicies_listSignalError() instead")
    void networksecurity_projects_locations_authorizationPolicies_listSignalE(OAIListAuthorizationPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_authorizationPolicies_listSignalError(OAIListAuthorizationPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_clientTlsPolicies_createSignalError() instead")
    void networksecurity_projects_locations_clientTlsPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_clientTlsPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_clientTlsPolicies_listSignalError() instead")
    void networksecurity_projects_locations_clientTlsPolicies_listSignalE(OAIListClientTlsPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_clientTlsPolicies_listSignalError(OAIListClientTlsPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_createSignalError() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_listSignalError() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignalE(OAIListGatewaySecurityPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignalError(OAIListGatewaySecurityPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalError() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalError() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalE(OAIListGatewaySecurityPolicyRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalError(OAIListGatewaySecurityPolicyRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_listSignalError() instead")
    void networksecurity_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_operations_cancelSignalError() instead")
    void networksecurity_projects_locations_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_operations_listSignalError() instead")
    void networksecurity_projects_locations_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_createSignalError() instead")
    void networksecurity_projects_locations_serverTlsPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalError() instead")
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_listSignalError() instead")
    void networksecurity_projects_locations_serverTlsPolicies_listSignalE(OAIListServerTlsPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_listSignalError(OAIListServerTlsPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalError() instead")
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalError() instead")
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalE(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalError(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_tlsInspectionPolicies_createSignalError() instead")
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_tlsInspectionPolicies_listSignalError() instead")
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignalE(OAIListTlsInspectionPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignalError(OAIListTlsInspectionPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_createSignalError() instead")
    void networksecurity_projects_locations_urlLists_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_deleteSignalError() instead")
    void networksecurity_projects_locations_urlLists_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_getSignalError() instead")
    void networksecurity_projects_locations_urlLists_getSignalE(OAIUrlList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_getSignalError(OAIUrlList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_listSignalError() instead")
    void networksecurity_projects_locations_urlLists_listSignalE(OAIListUrlListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_listSignalError(OAIListUrlListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_patchSignalError() instead")
    void networksecurity_projects_locations_urlLists_patchSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_patchSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_addItemsSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_addItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_addItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_cloneItemsSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_cloneItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_cloneItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_createSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_listSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_listReferencesSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_listReferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_listReferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_addressGroups_removeItemsSignalErrorFull() instead")
    void networksecurity_projects_locations_addressGroups_removeItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_addressGroups_removeItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_authorizationPolicies_createSignalErrorFull() instead")
    void networksecurity_projects_locations_authorizationPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_authorizationPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_authorizationPolicies_listSignalErrorFull() instead")
    void networksecurity_projects_locations_authorizationPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_authorizationPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_clientTlsPolicies_createSignalErrorFull() instead")
    void networksecurity_projects_locations_clientTlsPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_clientTlsPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_clientTlsPolicies_listSignalErrorFull() instead")
    void networksecurity_projects_locations_clientTlsPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_clientTlsPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_createSignalErrorFull() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_listSignalErrorFull() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalErrorFull() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalErrorFull() instead")
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_gatewaySecurityPolicies_rules_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_listSignalErrorFull() instead")
    void networksecurity_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_operations_cancelSignalErrorFull() instead")
    void networksecurity_projects_locations_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_operations_listSignalErrorFull() instead")
    void networksecurity_projects_locations_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_createSignalErrorFull() instead")
    void networksecurity_projects_locations_serverTlsPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalErrorFull() instead")
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_listSignalErrorFull() instead")
    void networksecurity_projects_locations_serverTlsPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalErrorFull() instead")
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalErrorFull() instead")
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_serverTlsPolicies_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_tlsInspectionPolicies_createSignalErrorFull() instead")
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_tlsInspectionPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_tlsInspectionPolicies_listSignalErrorFull() instead")
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_tlsInspectionPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_createSignalErrorFull() instead")
    void networksecurity_projects_locations_urlLists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_deleteSignalErrorFull() instead")
    void networksecurity_projects_locations_urlLists_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_getSignalErrorFull() instead")
    void networksecurity_projects_locations_urlLists_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_listSignalErrorFull() instead")
    void networksecurity_projects_locations_urlLists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networksecurity_projects_locations_urlLists_patchSignalErrorFull() instead")
    void networksecurity_projects_locations_urlLists_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networksecurity_projects_locations_urlLists_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
