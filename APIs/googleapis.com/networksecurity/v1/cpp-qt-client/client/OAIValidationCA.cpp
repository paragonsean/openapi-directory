/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationCA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationCA::OAIValidationCA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationCA::OAIValidationCA() {
    this->initializeModel();
}

OAIValidationCA::~OAIValidationCA() {}

void OAIValidationCA::initializeModel() {

    m_certificate_provider_instance_isSet = false;
    m_certificate_provider_instance_isValid = false;

    m_grpc_endpoint_isSet = false;
    m_grpc_endpoint_isValid = false;
}

void OAIValidationCA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationCA::fromJsonObject(QJsonObject json) {

    m_certificate_provider_instance_isValid = ::OpenAPI::fromJsonValue(m_certificate_provider_instance, json[QString("certificateProviderInstance")]);
    m_certificate_provider_instance_isSet = !json[QString("certificateProviderInstance")].isNull() && m_certificate_provider_instance_isValid;

    m_grpc_endpoint_isValid = ::OpenAPI::fromJsonValue(m_grpc_endpoint, json[QString("grpcEndpoint")]);
    m_grpc_endpoint_isSet = !json[QString("grpcEndpoint")].isNull() && m_grpc_endpoint_isValid;
}

QString OAIValidationCA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationCA::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_provider_instance.isSet()) {
        obj.insert(QString("certificateProviderInstance"), ::OpenAPI::toJsonValue(m_certificate_provider_instance));
    }
    if (m_grpc_endpoint.isSet()) {
        obj.insert(QString("grpcEndpoint"), ::OpenAPI::toJsonValue(m_grpc_endpoint));
    }
    return obj;
}

OAICertificateProviderInstance OAIValidationCA::getCertificateProviderInstance() const {
    return m_certificate_provider_instance;
}
void OAIValidationCA::setCertificateProviderInstance(const OAICertificateProviderInstance &certificate_provider_instance) {
    m_certificate_provider_instance = certificate_provider_instance;
    m_certificate_provider_instance_isSet = true;
}

bool OAIValidationCA::is_certificate_provider_instance_Set() const{
    return m_certificate_provider_instance_isSet;
}

bool OAIValidationCA::is_certificate_provider_instance_Valid() const{
    return m_certificate_provider_instance_isValid;
}

OAIGoogleCloudNetworksecurityV1GrpcEndpoint OAIValidationCA::getGrpcEndpoint() const {
    return m_grpc_endpoint;
}
void OAIValidationCA::setGrpcEndpoint(const OAIGoogleCloudNetworksecurityV1GrpcEndpoint &grpc_endpoint) {
    m_grpc_endpoint = grpc_endpoint;
    m_grpc_endpoint_isSet = true;
}

bool OAIValidationCA::is_grpc_endpoint_Set() const{
    return m_grpc_endpoint_isSet;
}

bool OAIValidationCA::is_grpc_endpoint_Valid() const{
    return m_grpc_endpoint_isValid;
}

bool OAIValidationCA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_provider_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationCA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
