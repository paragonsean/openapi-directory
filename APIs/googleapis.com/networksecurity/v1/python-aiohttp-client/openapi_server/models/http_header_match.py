# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpHeaderMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header_name: str=None, regex_match: str=None):
        """HttpHeaderMatch - a model defined in OpenAPI

        :param header_name: The header_name of this HttpHeaderMatch.
        :param regex_match: The regex_match of this HttpHeaderMatch.
        """
        self.openapi_types = {
            'header_name': str,
            'regex_match': str
        }

        self.attribute_map = {
            'header_name': 'headerName',
            'regex_match': 'regexMatch'
        }

        self._header_name = header_name
        self._regex_match = regex_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpHeaderMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpHeaderMatch of this HttpHeaderMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header_name(self):
        """Gets the header_name of this HttpHeaderMatch.

        Required. The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name \":authority\". For matching a request's method, use the headerName \":method\".

        :return: The header_name of this HttpHeaderMatch.
        :rtype: str
        """
        return self._header_name

    @header_name.setter
    def header_name(self, header_name):
        """Sets the header_name of this HttpHeaderMatch.

        Required. The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name \":authority\". For matching a request's method, use the headerName \":method\".

        :param header_name: The header_name of this HttpHeaderMatch.
        :type header_name: str
        """

        self._header_name = header_name

    @property
    def regex_match(self):
        """Gets the regex_match of this HttpHeaderMatch.

        Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.

        :return: The regex_match of this HttpHeaderMatch.
        :rtype: str
        """
        return self._regex_match

    @regex_match.setter
    def regex_match(self, regex_match):
        """Sets the regex_match of this HttpHeaderMatch.

        Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.

        :param regex_match: The regex_match of this HttpHeaderMatch.
        :type regex_match: str
        """

        self._regex_match = regex_match
