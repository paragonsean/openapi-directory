# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TlsInspectionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_pool: str=None, create_time: str=None, custom_tls_features: List[str]=None, description: str=None, exclude_public_ca_set: bool=None, min_tls_version: str=None, name: str=None, tls_feature_profile: str=None, trust_config: str=None, update_time: str=None):
        """TlsInspectionPolicy - a model defined in OpenAPI

        :param ca_pool: The ca_pool of this TlsInspectionPolicy.
        :param create_time: The create_time of this TlsInspectionPolicy.
        :param custom_tls_features: The custom_tls_features of this TlsInspectionPolicy.
        :param description: The description of this TlsInspectionPolicy.
        :param exclude_public_ca_set: The exclude_public_ca_set of this TlsInspectionPolicy.
        :param min_tls_version: The min_tls_version of this TlsInspectionPolicy.
        :param name: The name of this TlsInspectionPolicy.
        :param tls_feature_profile: The tls_feature_profile of this TlsInspectionPolicy.
        :param trust_config: The trust_config of this TlsInspectionPolicy.
        :param update_time: The update_time of this TlsInspectionPolicy.
        """
        self.openapi_types = {
            'ca_pool': str,
            'create_time': str,
            'custom_tls_features': List[str],
            'description': str,
            'exclude_public_ca_set': bool,
            'min_tls_version': str,
            'name': str,
            'tls_feature_profile': str,
            'trust_config': str,
            'update_time': str
        }

        self.attribute_map = {
            'ca_pool': 'caPool',
            'create_time': 'createTime',
            'custom_tls_features': 'customTlsFeatures',
            'description': 'description',
            'exclude_public_ca_set': 'excludePublicCaSet',
            'min_tls_version': 'minTlsVersion',
            'name': 'name',
            'tls_feature_profile': 'tlsFeatureProfile',
            'trust_config': 'trustConfig',
            'update_time': 'updateTime'
        }

        self._ca_pool = ca_pool
        self._create_time = create_time
        self._custom_tls_features = custom_tls_features
        self._description = description
        self._exclude_public_ca_set = exclude_public_ca_set
        self._min_tls_version = min_tls_version
        self._name = name
        self._tls_feature_profile = tls_feature_profile
        self._trust_config = trust_config
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TlsInspectionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TlsInspectionPolicy of this TlsInspectionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_pool(self):
        """Gets the ca_pool of this TlsInspectionPolicy.

        Required. A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form \"projects/{project}/locations/{location}/caPools/{ca_pool}\".

        :return: The ca_pool of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._ca_pool

    @ca_pool.setter
    def ca_pool(self, ca_pool):
        """Sets the ca_pool of this TlsInspectionPolicy.

        Required. A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form \"projects/{project}/locations/{location}/caPools/{ca_pool}\".

        :param ca_pool: The ca_pool of this TlsInspectionPolicy.
        :type ca_pool: str
        """

        self._ca_pool = ca_pool

    @property
    def create_time(self):
        """Gets the create_time of this TlsInspectionPolicy.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TlsInspectionPolicy.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this TlsInspectionPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_tls_features(self):
        """Gets the custom_tls_features of this TlsInspectionPolicy.

        Optional. List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.

        :return: The custom_tls_features of this TlsInspectionPolicy.
        :rtype: List[str]
        """
        return self._custom_tls_features

    @custom_tls_features.setter
    def custom_tls_features(self, custom_tls_features):
        """Sets the custom_tls_features of this TlsInspectionPolicy.

        Optional. List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.

        :param custom_tls_features: The custom_tls_features of this TlsInspectionPolicy.
        :type custom_tls_features: List[str]
        """

        self._custom_tls_features = custom_tls_features

    @property
    def description(self):
        """Gets the description of this TlsInspectionPolicy.

        Optional. Free-text description of the resource.

        :return: The description of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TlsInspectionPolicy.

        Optional. Free-text description of the resource.

        :param description: The description of this TlsInspectionPolicy.
        :type description: str
        """

        self._description = description

    @property
    def exclude_public_ca_set(self):
        """Gets the exclude_public_ca_set of this TlsInspectionPolicy.

        Optional. If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trust_config. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trust_config will be accepted. This defaults to FALSE (use public CAs in addition to trust_config) for backwards compatibility, but trusting public root CAs is *not recommended* unless the traffic in question is outbound to public web servers. When possible, prefer setting this to \"false\" and explicitly specifying trusted CAs and certificates in a TrustConfig. Note that Secure Web Proxy does not yet honor this field.

        :return: The exclude_public_ca_set of this TlsInspectionPolicy.
        :rtype: bool
        """
        return self._exclude_public_ca_set

    @exclude_public_ca_set.setter
    def exclude_public_ca_set(self, exclude_public_ca_set):
        """Sets the exclude_public_ca_set of this TlsInspectionPolicy.

        Optional. If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trust_config. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trust_config will be accepted. This defaults to FALSE (use public CAs in addition to trust_config) for backwards compatibility, but trusting public root CAs is *not recommended* unless the traffic in question is outbound to public web servers. When possible, prefer setting this to \"false\" and explicitly specifying trusted CAs and certificates in a TrustConfig. Note that Secure Web Proxy does not yet honor this field.

        :param exclude_public_ca_set: The exclude_public_ca_set of this TlsInspectionPolicy.
        :type exclude_public_ca_set: bool
        """

        self._exclude_public_ca_set = exclude_public_ca_set

    @property
    def min_tls_version(self):
        """Gets the min_tls_version of this TlsInspectionPolicy.

        Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.

        :return: The min_tls_version of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._min_tls_version

    @min_tls_version.setter
    def min_tls_version(self, min_tls_version):
        """Sets the min_tls_version of this TlsInspectionPolicy.

        Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.

        :param min_tls_version: The min_tls_version of this TlsInspectionPolicy.
        :type min_tls_version: str
        """
        allowed_values = ["TLS_VERSION_UNSPECIFIED", "TLS_1_0", "TLS_1_1", "TLS_1_2", "TLS_1_3"]  # noqa: E501
        if min_tls_version not in allowed_values:
            raise ValueError(
                "Invalid value for `min_tls_version` ({0}), must be one of {1}"
                .format(min_tls_version, allowed_values)
            )

        self._min_tls_version = min_tls_version

    @property
    def name(self):
        """Gets the name of this TlsInspectionPolicy.

        Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).

        :return: The name of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TlsInspectionPolicy.

        Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).

        :param name: The name of this TlsInspectionPolicy.
        :type name: str
        """

        self._name = name

    @property
    def tls_feature_profile(self):
        """Gets the tls_feature_profile of this TlsInspectionPolicy.

        Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.

        :return: The tls_feature_profile of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._tls_feature_profile

    @tls_feature_profile.setter
    def tls_feature_profile(self, tls_feature_profile):
        """Sets the tls_feature_profile of this TlsInspectionPolicy.

        Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.

        :param tls_feature_profile: The tls_feature_profile of this TlsInspectionPolicy.
        :type tls_feature_profile: str
        """
        allowed_values = ["PROFILE_UNSPECIFIED", "PROFILE_COMPATIBLE", "PROFILE_MODERN", "PROFILE_RESTRICTED", "PROFILE_CUSTOM"]  # noqa: E501
        if tls_feature_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `tls_feature_profile` ({0}), must be one of {1}"
                .format(tls_feature_profile, allowed_values)
            )

        self._tls_feature_profile = tls_feature_profile

    @property
    def trust_config(self):
        """Gets the trust_config of this TlsInspectionPolicy.

        Optional. A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Note that Secure Web Proxy does not yet honor this field.

        :return: The trust_config of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._trust_config

    @trust_config.setter
    def trust_config(self, trust_config):
        """Sets the trust_config of this TlsInspectionPolicy.

        Optional. A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Note that Secure Web Proxy does not yet honor this field.

        :param trust_config: The trust_config of this TlsInspectionPolicy.
        :type trust_config: str
        """

        self._trust_config = trust_config

    @property
    def update_time(self):
        """Gets the update_time of this TlsInspectionPolicy.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this TlsInspectionPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TlsInspectionPolicy.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this TlsInspectionPolicy.
        :type update_time: str
        """

        self._update_time = update_time
