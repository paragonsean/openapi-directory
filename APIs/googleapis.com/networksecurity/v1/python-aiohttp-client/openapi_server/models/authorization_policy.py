# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule import Rule
from openapi_server import util


class AuthorizationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, create_time: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, rules: List[Rule]=None, update_time: str=None):
        """AuthorizationPolicy - a model defined in OpenAPI

        :param action: The action of this AuthorizationPolicy.
        :param create_time: The create_time of this AuthorizationPolicy.
        :param description: The description of this AuthorizationPolicy.
        :param labels: The labels of this AuthorizationPolicy.
        :param name: The name of this AuthorizationPolicy.
        :param rules: The rules of this AuthorizationPolicy.
        :param update_time: The update_time of this AuthorizationPolicy.
        """
        self.openapi_types = {
            'action': str,
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'rules': List[Rule],
            'update_time': str
        }

        self.attribute_map = {
            'action': 'action',
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'rules': 'rules',
            'update_time': 'updateTime'
        }

        self._action = action
        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._name = name
        self._rules = rules
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationPolicy of this AuthorizationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this AuthorizationPolicy.

        Required. The action to take when a rule match is found. Possible values are \"ALLOW\" or \"DENY\".

        :return: The action of this AuthorizationPolicy.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuthorizationPolicy.

        Required. The action to take when a rule match is found. Possible values are \"ALLOW\" or \"DENY\".

        :param action: The action of this AuthorizationPolicy.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def create_time(self):
        """Gets the create_time of this AuthorizationPolicy.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this AuthorizationPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AuthorizationPolicy.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this AuthorizationPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this AuthorizationPolicy.

        Optional. Free-text description of the resource.

        :return: The description of this AuthorizationPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthorizationPolicy.

        Optional. Free-text description of the resource.

        :param description: The description of this AuthorizationPolicy.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this AuthorizationPolicy.

        Optional. Set of label tags associated with the AuthorizationPolicy resource.

        :return: The labels of this AuthorizationPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AuthorizationPolicy.

        Optional. Set of label tags associated with the AuthorizationPolicy resource.

        :param labels: The labels of this AuthorizationPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this AuthorizationPolicy.

        Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.

        :return: The name of this AuthorizationPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthorizationPolicy.

        Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.

        :param name: The name of this AuthorizationPolicy.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this AuthorizationPolicy.

        Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.

        :return: The rules of this AuthorizationPolicy.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AuthorizationPolicy.

        Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.

        :param rules: The rules of this AuthorizationPolicy.
        :type rules: List[Rule]
        """

        self._rules = rules

    @property
    def update_time(self):
        """Gets the update_time of this AuthorizationPolicy.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this AuthorizationPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AuthorizationPolicy.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this AuthorizationPolicy.
        :type update_time: str
        """

        self._update_time = update_time
