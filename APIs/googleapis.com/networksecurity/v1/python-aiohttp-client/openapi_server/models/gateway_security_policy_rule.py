# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewaySecurityPolicyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_matcher: str=None, basic_profile: str=None, create_time: str=None, description: str=None, enabled: bool=None, name: str=None, priority: int=None, session_matcher: str=None, tls_inspection_enabled: bool=None, update_time: str=None):
        """GatewaySecurityPolicyRule - a model defined in OpenAPI

        :param application_matcher: The application_matcher of this GatewaySecurityPolicyRule.
        :param basic_profile: The basic_profile of this GatewaySecurityPolicyRule.
        :param create_time: The create_time of this GatewaySecurityPolicyRule.
        :param description: The description of this GatewaySecurityPolicyRule.
        :param enabled: The enabled of this GatewaySecurityPolicyRule.
        :param name: The name of this GatewaySecurityPolicyRule.
        :param priority: The priority of this GatewaySecurityPolicyRule.
        :param session_matcher: The session_matcher of this GatewaySecurityPolicyRule.
        :param tls_inspection_enabled: The tls_inspection_enabled of this GatewaySecurityPolicyRule.
        :param update_time: The update_time of this GatewaySecurityPolicyRule.
        """
        self.openapi_types = {
            'application_matcher': str,
            'basic_profile': str,
            'create_time': str,
            'description': str,
            'enabled': bool,
            'name': str,
            'priority': int,
            'session_matcher': str,
            'tls_inspection_enabled': bool,
            'update_time': str
        }

        self.attribute_map = {
            'application_matcher': 'applicationMatcher',
            'basic_profile': 'basicProfile',
            'create_time': 'createTime',
            'description': 'description',
            'enabled': 'enabled',
            'name': 'name',
            'priority': 'priority',
            'session_matcher': 'sessionMatcher',
            'tls_inspection_enabled': 'tlsInspectionEnabled',
            'update_time': 'updateTime'
        }

        self._application_matcher = application_matcher
        self._basic_profile = basic_profile
        self._create_time = create_time
        self._description = description
        self._enabled = enabled
        self._name = name
        self._priority = priority
        self._session_matcher = session_matcher
        self._tls_inspection_enabled = tls_inspection_enabled
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewaySecurityPolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewaySecurityPolicyRule of this GatewaySecurityPolicyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_matcher(self):
        """Gets the application_matcher of this GatewaySecurityPolicyRule.

        Optional. CEL expression for matching on L7/application level criteria.

        :return: The application_matcher of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._application_matcher

    @application_matcher.setter
    def application_matcher(self, application_matcher):
        """Sets the application_matcher of this GatewaySecurityPolicyRule.

        Optional. CEL expression for matching on L7/application level criteria.

        :param application_matcher: The application_matcher of this GatewaySecurityPolicyRule.
        :type application_matcher: str
        """

        self._application_matcher = application_matcher

    @property
    def basic_profile(self):
        """Gets the basic_profile of this GatewaySecurityPolicyRule.

        Required. Profile which tells what the primitive action should be.

        :return: The basic_profile of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._basic_profile

    @basic_profile.setter
    def basic_profile(self, basic_profile):
        """Sets the basic_profile of this GatewaySecurityPolicyRule.

        Required. Profile which tells what the primitive action should be.

        :param basic_profile: The basic_profile of this GatewaySecurityPolicyRule.
        :type basic_profile: str
        """
        allowed_values = ["BASIC_PROFILE_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if basic_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `basic_profile` ({0}), must be one of {1}"
                .format(basic_profile, allowed_values)
            )

        self._basic_profile = basic_profile

    @property
    def create_time(self):
        """Gets the create_time of this GatewaySecurityPolicyRule.

        Output only. Time when the rule was created.

        :return: The create_time of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GatewaySecurityPolicyRule.

        Output only. Time when the rule was created.

        :param create_time: The create_time of this GatewaySecurityPolicyRule.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GatewaySecurityPolicyRule.

        Optional. Free-text description of the resource.

        :return: The description of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GatewaySecurityPolicyRule.

        Optional. Free-text description of the resource.

        :param description: The description of this GatewaySecurityPolicyRule.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this GatewaySecurityPolicyRule.

        Required. Whether the rule is enforced.

        :return: The enabled of this GatewaySecurityPolicyRule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GatewaySecurityPolicyRule.

        Required. Whether the rule is enforced.

        :param enabled: The enabled of this GatewaySecurityPolicyRule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this GatewaySecurityPolicyRule.

        Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).

        :return: The name of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GatewaySecurityPolicyRule.

        Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).

        :param name: The name of this GatewaySecurityPolicyRule.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this GatewaySecurityPolicyRule.

        Required. Priority of the rule. Lower number corresponds to higher precedence.

        :return: The priority of this GatewaySecurityPolicyRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GatewaySecurityPolicyRule.

        Required. Priority of the rule. Lower number corresponds to higher precedence.

        :param priority: The priority of this GatewaySecurityPolicyRule.
        :type priority: int
        """

        self._priority = priority

    @property
    def session_matcher(self):
        """Gets the session_matcher of this GatewaySecurityPolicyRule.

        Required. CEL expression for matching on session criteria.

        :return: The session_matcher of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._session_matcher

    @session_matcher.setter
    def session_matcher(self, session_matcher):
        """Sets the session_matcher of this GatewaySecurityPolicyRule.

        Required. CEL expression for matching on session criteria.

        :param session_matcher: The session_matcher of this GatewaySecurityPolicyRule.
        :type session_matcher: str
        """

        self._session_matcher = session_matcher

    @property
    def tls_inspection_enabled(self):
        """Gets the tls_inspection_enabled of this GatewaySecurityPolicyRule.

        Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.

        :return: The tls_inspection_enabled of this GatewaySecurityPolicyRule.
        :rtype: bool
        """
        return self._tls_inspection_enabled

    @tls_inspection_enabled.setter
    def tls_inspection_enabled(self, tls_inspection_enabled):
        """Sets the tls_inspection_enabled of this GatewaySecurityPolicyRule.

        Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.

        :param tls_inspection_enabled: The tls_inspection_enabled of this GatewaySecurityPolicyRule.
        :type tls_inspection_enabled: bool
        """

        self._tls_inspection_enabled = tls_inspection_enabled

    @property
    def update_time(self):
        """Gets the update_time of this GatewaySecurityPolicyRule.

        Output only. Time when the rule was updated.

        :return: The update_time of this GatewaySecurityPolicyRule.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GatewaySecurityPolicyRule.

        Output only. Time when the rule was updated.

        :param update_time: The update_time of this GatewaySecurityPolicyRule.
        :type update_time: str
        """

        self._update_time = update_time
