/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The GatewaySecurityPolicyRule resource is in a nested collection within a GatewaySecurityPolicy and represents a traffic matching condition and associated action to perform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.829513-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GatewaySecurityPolicyRule {
  public static final String SERIALIZED_NAME_APPLICATION_MATCHER = "applicationMatcher";
  @SerializedName(SERIALIZED_NAME_APPLICATION_MATCHER)
  private String applicationMatcher;

  /**
   * Required. Profile which tells what the primitive action should be.
   */
  @JsonAdapter(BasicProfileEnum.Adapter.class)
  public enum BasicProfileEnum {
    BASIC_PROFILE_UNSPECIFIED("BASIC_PROFILE_UNSPECIFIED"),
    
    ALLOW("ALLOW"),
    
    DENY("DENY");

    private String value;

    BasicProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BasicProfileEnum fromValue(String value) {
      for (BasicProfileEnum b : BasicProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BasicProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BasicProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BasicProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BasicProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BasicProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASIC_PROFILE = "basicProfile";
  @SerializedName(SERIALIZED_NAME_BASIC_PROFILE)
  private BasicProfileEnum basicProfile;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SESSION_MATCHER = "sessionMatcher";
  @SerializedName(SERIALIZED_NAME_SESSION_MATCHER)
  private String sessionMatcher;

  public static final String SERIALIZED_NAME_TLS_INSPECTION_ENABLED = "tlsInspectionEnabled";
  @SerializedName(SERIALIZED_NAME_TLS_INSPECTION_ENABLED)
  private Boolean tlsInspectionEnabled;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GatewaySecurityPolicyRule() {
  }

  public GatewaySecurityPolicyRule(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public GatewaySecurityPolicyRule applicationMatcher(String applicationMatcher) {
    this.applicationMatcher = applicationMatcher;
    return this;
  }

  /**
   * Optional. CEL expression for matching on L7/application level criteria.
   * @return applicationMatcher
   */
  @javax.annotation.Nullable
  public String getApplicationMatcher() {
    return applicationMatcher;
  }

  public void setApplicationMatcher(String applicationMatcher) {
    this.applicationMatcher = applicationMatcher;
  }


  public GatewaySecurityPolicyRule basicProfile(BasicProfileEnum basicProfile) {
    this.basicProfile = basicProfile;
    return this;
  }

  /**
   * Required. Profile which tells what the primitive action should be.
   * @return basicProfile
   */
  @javax.annotation.Nullable
  public BasicProfileEnum getBasicProfile() {
    return basicProfile;
  }

  public void setBasicProfile(BasicProfileEnum basicProfile) {
    this.basicProfile = basicProfile;
  }


  /**
   * Output only. Time when the rule was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GatewaySecurityPolicyRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Free-text description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GatewaySecurityPolicyRule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Required. Whether the rule is enforced.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GatewaySecurityPolicyRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GatewaySecurityPolicyRule priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Required. Priority of the rule. Lower number corresponds to higher precedence.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public GatewaySecurityPolicyRule sessionMatcher(String sessionMatcher) {
    this.sessionMatcher = sessionMatcher;
    return this;
  }

  /**
   * Required. CEL expression for matching on session criteria.
   * @return sessionMatcher
   */
  @javax.annotation.Nullable
  public String getSessionMatcher() {
    return sessionMatcher;
  }

  public void setSessionMatcher(String sessionMatcher) {
    this.sessionMatcher = sessionMatcher;
  }


  public GatewaySecurityPolicyRule tlsInspectionEnabled(Boolean tlsInspectionEnabled) {
    this.tlsInspectionEnabled = tlsInspectionEnabled;
    return this;
  }

  /**
   * Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
   * @return tlsInspectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTlsInspectionEnabled() {
    return tlsInspectionEnabled;
  }

  public void setTlsInspectionEnabled(Boolean tlsInspectionEnabled) {
    this.tlsInspectionEnabled = tlsInspectionEnabled;
  }


  /**
   * Output only. Time when the rule was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewaySecurityPolicyRule gatewaySecurityPolicyRule = (GatewaySecurityPolicyRule) o;
    return Objects.equals(this.applicationMatcher, gatewaySecurityPolicyRule.applicationMatcher) &&
        Objects.equals(this.basicProfile, gatewaySecurityPolicyRule.basicProfile) &&
        Objects.equals(this.createTime, gatewaySecurityPolicyRule.createTime) &&
        Objects.equals(this.description, gatewaySecurityPolicyRule.description) &&
        Objects.equals(this.enabled, gatewaySecurityPolicyRule.enabled) &&
        Objects.equals(this.name, gatewaySecurityPolicyRule.name) &&
        Objects.equals(this.priority, gatewaySecurityPolicyRule.priority) &&
        Objects.equals(this.sessionMatcher, gatewaySecurityPolicyRule.sessionMatcher) &&
        Objects.equals(this.tlsInspectionEnabled, gatewaySecurityPolicyRule.tlsInspectionEnabled) &&
        Objects.equals(this.updateTime, gatewaySecurityPolicyRule.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationMatcher, basicProfile, createTime, description, enabled, name, priority, sessionMatcher, tlsInspectionEnabled, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewaySecurityPolicyRule {\n");
    sb.append("    applicationMatcher: ").append(toIndentedString(applicationMatcher)).append("\n");
    sb.append("    basicProfile: ").append(toIndentedString(basicProfile)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sessionMatcher: ").append(toIndentedString(sessionMatcher)).append("\n");
    sb.append("    tlsInspectionEnabled: ").append(toIndentedString(tlsInspectionEnabled)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationMatcher");
    openapiFields.add("basicProfile");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("sessionMatcher");
    openapiFields.add("tlsInspectionEnabled");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewaySecurityPolicyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewaySecurityPolicyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewaySecurityPolicyRule is not found in the empty JSON string", GatewaySecurityPolicyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewaySecurityPolicyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewaySecurityPolicyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationMatcher") != null && !jsonObj.get("applicationMatcher").isJsonNull()) && !jsonObj.get("applicationMatcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationMatcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationMatcher").toString()));
      }
      if ((jsonObj.get("basicProfile") != null && !jsonObj.get("basicProfile").isJsonNull()) && !jsonObj.get("basicProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basicProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basicProfile").toString()));
      }
      // validate the optional field `basicProfile`
      if (jsonObj.get("basicProfile") != null && !jsonObj.get("basicProfile").isJsonNull()) {
        BasicProfileEnum.validateJsonElement(jsonObj.get("basicProfile"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sessionMatcher") != null && !jsonObj.get("sessionMatcher").isJsonNull()) && !jsonObj.get("sessionMatcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionMatcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionMatcher").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewaySecurityPolicyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewaySecurityPolicyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewaySecurityPolicyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewaySecurityPolicyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewaySecurityPolicyRule>() {
           @Override
           public void write(JsonWriter out, GatewaySecurityPolicyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewaySecurityPolicyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewaySecurityPolicyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewaySecurityPolicyRule
   * @throws IOException if the JSON string is invalid with respect to GatewaySecurityPolicyRule
   */
  public static GatewaySecurityPolicyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewaySecurityPolicyRule.class);
  }

  /**
   * Convert an instance of GatewaySecurityPolicyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

