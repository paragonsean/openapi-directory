/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationCA from './ValidationCA';

/**
 * The MTLSPolicy model module.
 * @module model/MTLSPolicy
 * @version v1
 */
class MTLSPolicy {
    /**
     * Constructs a new <code>MTLSPolicy</code>.
     * Specification of the MTLSPolicy.
     * @alias module:model/MTLSPolicy
     */
    constructor() { 
        
        MTLSPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MTLSPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MTLSPolicy} obj Optional instance to populate.
     * @return {module:model/MTLSPolicy} The populated <code>MTLSPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MTLSPolicy();

            if (data.hasOwnProperty('clientValidationCa')) {
                obj['clientValidationCa'] = ApiClient.convertToType(data['clientValidationCa'], [ValidationCA]);
            }
            if (data.hasOwnProperty('clientValidationMode')) {
                obj['clientValidationMode'] = ApiClient.convertToType(data['clientValidationMode'], 'String');
            }
            if (data.hasOwnProperty('clientValidationTrustConfig')) {
                obj['clientValidationTrustConfig'] = ApiClient.convertToType(data['clientValidationTrustConfig'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MTLSPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MTLSPolicy</code>.
     */
    static validateJSON(data) {
        if (data['clientValidationCa']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientValidationCa'])) {
                throw new Error("Expected the field `clientValidationCa` to be an array in the JSON data but got " + data['clientValidationCa']);
            }
            // validate the optional field `clientValidationCa` (array)
            for (const item of data['clientValidationCa']) {
                ValidationCA.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['clientValidationMode'] && !(typeof data['clientValidationMode'] === 'string' || data['clientValidationMode'] instanceof String)) {
            throw new Error("Expected the field `clientValidationMode` to be a primitive type in the JSON string but got " + data['clientValidationMode']);
        }
        // ensure the json data is a string
        if (data['clientValidationTrustConfig'] && !(typeof data['clientValidationTrustConfig'] === 'string' || data['clientValidationTrustConfig'] instanceof String)) {
            throw new Error("Expected the field `clientValidationTrustConfig` to be a primitive type in the JSON string but got " + data['clientValidationTrustConfig']);
        }

        return true;
    }


}



/**
 * Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
 * @member {Array.<module:model/ValidationCA>} clientValidationCa
 */
MTLSPolicy.prototype['clientValidationCa'] = undefined;

/**
 * When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
 * @member {module:model/MTLSPolicy.ClientValidationModeEnum} clientValidationMode
 */
MTLSPolicy.prototype['clientValidationMode'] = undefined;

/**
 * Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with external HTTPS load balancers.
 * @member {String} clientValidationTrustConfig
 */
MTLSPolicy.prototype['clientValidationTrustConfig'] = undefined;





/**
 * Allowed values for the <code>clientValidationMode</code> property.
 * @enum {String}
 * @readonly
 */
MTLSPolicy['ClientValidationModeEnum'] = {

    /**
     * value: "CLIENT_VALIDATION_MODE_UNSPECIFIED"
     * @const
     */
    "CLIENT_VALIDATION_MODE_UNSPECIFIED": "CLIENT_VALIDATION_MODE_UNSPECIFIED",

    /**
     * value: "ALLOW_INVALID_OR_MISSING_CLIENT_CERT"
     * @const
     */
    "ALLOW_INVALID_OR_MISSING_CLIENT_CERT": "ALLOW_INVALID_OR_MISSING_CLIENT_CERT",

    /**
     * value: "REJECT_INVALID"
     * @const
     */
    "REJECT_INVALID": "REJECT_INVALID"
};



export default MTLSPolicy;

