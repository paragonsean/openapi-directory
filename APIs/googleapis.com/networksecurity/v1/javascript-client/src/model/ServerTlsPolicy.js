/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudNetworksecurityV1CertificateProvider from './GoogleCloudNetworksecurityV1CertificateProvider';
import MTLSPolicy from './MTLSPolicy';

/**
 * The ServerTlsPolicy model module.
 * @module model/ServerTlsPolicy
 * @version v1
 */
class ServerTlsPolicy {
    /**
     * Constructs a new <code>ServerTlsPolicy</code>.
     * ServerTlsPolicy is a resource that specifies how a server should authenticate incoming requests. This resource itself does not affect configuration unless it is attached to a target HTTPS proxy or endpoint config selector resource. ServerTlsPolicy in the form accepted by external HTTPS load balancers can be attached only to TargetHttpsProxy with an &#x60;EXTERNAL&#x60; or &#x60;EXTERNAL_MANAGED&#x60; load balancing scheme. Traffic Director compatible ServerTlsPolicies can be attached to EndpointPolicy and TargetHttpsProxy with Traffic Director &#x60;INTERNAL_SELF_MANAGED&#x60; load balancing scheme.
     * @alias module:model/ServerTlsPolicy
     */
    constructor() { 
        
        ServerTlsPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerTlsPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerTlsPolicy} obj Optional instance to populate.
     * @return {module:model/ServerTlsPolicy} The populated <code>ServerTlsPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerTlsPolicy();

            if (data.hasOwnProperty('allowOpen')) {
                obj['allowOpen'] = ApiClient.convertToType(data['allowOpen'], 'Boolean');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mtlsPolicy')) {
                obj['mtlsPolicy'] = MTLSPolicy.constructFromObject(data['mtlsPolicy']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serverCertificate')) {
                obj['serverCertificate'] = GoogleCloudNetworksecurityV1CertificateProvider.constructFromObject(data['serverCertificate']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerTlsPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerTlsPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `mtlsPolicy`
        if (data['mtlsPolicy']) { // data not null
          MTLSPolicy.validateJSON(data['mtlsPolicy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `serverCertificate`
        if (data['serverCertificate']) { // data not null
          GoogleCloudNetworksecurityV1CertificateProvider.validateJSON(data['serverCertificate']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies. Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility. Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.
 * @member {Boolean} allowOpen
 */
ServerTlsPolicy.prototype['allowOpen'] = undefined;

/**
 * Output only. The timestamp when the resource was created.
 * @member {String} createTime
 */
ServerTlsPolicy.prototype['createTime'] = undefined;

/**
 * Free-text description of the resource.
 * @member {String} description
 */
ServerTlsPolicy.prototype['description'] = undefined;

/**
 * Set of label tags associated with the resource.
 * @member {Object.<String, String>} labels
 */
ServerTlsPolicy.prototype['labels'] = undefined;

/**
 * @member {module:model/MTLSPolicy} mtlsPolicy
 */
ServerTlsPolicy.prototype['mtlsPolicy'] = undefined;

/**
 * Required. Name of the ServerTlsPolicy resource. It matches the pattern `projects/_*_/locations/{location}/serverTlsPolicies/{server_tls_policy}`
 * @member {String} name
 */
ServerTlsPolicy.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudNetworksecurityV1CertificateProvider} serverCertificate
 */
ServerTlsPolicy.prototype['serverCertificate'] = undefined;

/**
 * Output only. The timestamp when the resource was updated.
 * @member {String} updateTime
 */
ServerTlsPolicy.prototype['updateTime'] = undefined;






export default ServerTlsPolicy;

