/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpHeaderMatch model module.
 * @module model/HttpHeaderMatch
 * @version v1
 */
class HttpHeaderMatch {
    /**
     * Constructs a new <code>HttpHeaderMatch</code>.
     * Specification of HTTP header match attributes.
     * @alias module:model/HttpHeaderMatch
     */
    constructor() { 
        
        HttpHeaderMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpHeaderMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpHeaderMatch} obj Optional instance to populate.
     * @return {module:model/HttpHeaderMatch} The populated <code>HttpHeaderMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpHeaderMatch();

            if (data.hasOwnProperty('headerName')) {
                obj['headerName'] = ApiClient.convertToType(data['headerName'], 'String');
            }
            if (data.hasOwnProperty('regexMatch')) {
                obj['regexMatch'] = ApiClient.convertToType(data['regexMatch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpHeaderMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpHeaderMatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['headerName'] && !(typeof data['headerName'] === 'string' || data['headerName'] instanceof String)) {
            throw new Error("Expected the field `headerName` to be a primitive type in the JSON string but got " + data['headerName']);
        }
        // ensure the json data is a string
        if (data['regexMatch'] && !(typeof data['regexMatch'] === 'string' || data['regexMatch'] instanceof String)) {
            throw new Error("Expected the field `regexMatch` to be a primitive type in the JSON string but got " + data['regexMatch']);
        }

        return true;
    }


}



/**
 * Required. The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name \":authority\". For matching a request's method, use the headerName \":method\".
 * @member {String} headerName
 */
HttpHeaderMatch.prototype['headerName'] = undefined;

/**
 * Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
 * @member {String} regexMatch
 */
HttpHeaderMatch.prototype['regexMatch'] = undefined;






export default HttpHeaderMatch;

