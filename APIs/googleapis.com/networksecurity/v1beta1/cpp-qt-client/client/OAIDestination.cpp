/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestination::OAIDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestination::OAIDestination() {
    this->initializeModel();
}

OAIDestination::~OAIDestination() {}

void OAIDestination::initializeModel() {

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_http_header_match_isSet = false;
    m_http_header_match_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;
}

void OAIDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestination::fromJsonObject(QJsonObject json) {

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("hosts")]);
    m_hosts_isSet = !json[QString("hosts")].isNull() && m_hosts_isValid;

    m_http_header_match_isValid = ::OpenAPI::fromJsonValue(m_http_header_match, json[QString("httpHeaderMatch")]);
    m_http_header_match_isSet = !json[QString("httpHeaderMatch")].isNull() && m_http_header_match_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;
}

QString OAIDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_hosts.size() > 0) {
        obj.insert(QString("hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_http_header_match.isSet()) {
        obj.insert(QString("httpHeaderMatch"), ::OpenAPI::toJsonValue(m_http_header_match));
    }
    if (m_methods.size() > 0) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    return obj;
}

QList<QString> OAIDestination::getHosts() const {
    return m_hosts;
}
void OAIDestination::setHosts(const QList<QString> &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIDestination::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIDestination::is_hosts_Valid() const{
    return m_hosts_isValid;
}

OAIHttpHeaderMatch OAIDestination::getHttpHeaderMatch() const {
    return m_http_header_match;
}
void OAIDestination::setHttpHeaderMatch(const OAIHttpHeaderMatch &http_header_match) {
    m_http_header_match = http_header_match;
    m_http_header_match_isSet = true;
}

bool OAIDestination::is_http_header_match_Set() const{
    return m_http_header_match_isSet;
}

bool OAIDestination::is_http_header_match_Valid() const{
    return m_http_header_match_isValid;
}

QList<QString> OAIDestination::getMethods() const {
    return m_methods;
}
void OAIDestination::setMethods(const QList<QString> &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIDestination::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIDestination::is_methods_Valid() const{
    return m_methods_isValid;
}

QList<qint32> OAIDestination::getPorts() const {
    return m_ports;
}
void OAIDestination::setPorts(const QList<qint32> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIDestination::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIDestination::is_ports_Valid() const{
    return m_ports_isValid;
}

bool OAIDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_header_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
