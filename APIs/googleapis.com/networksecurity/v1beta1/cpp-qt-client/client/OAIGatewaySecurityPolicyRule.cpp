/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewaySecurityPolicyRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewaySecurityPolicyRule::OAIGatewaySecurityPolicyRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewaySecurityPolicyRule::OAIGatewaySecurityPolicyRule() {
    this->initializeModel();
}

OAIGatewaySecurityPolicyRule::~OAIGatewaySecurityPolicyRule() {}

void OAIGatewaySecurityPolicyRule::initializeModel() {

    m_application_matcher_isSet = false;
    m_application_matcher_isValid = false;

    m_basic_profile_isSet = false;
    m_basic_profile_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_session_matcher_isSet = false;
    m_session_matcher_isValid = false;

    m_tls_inspection_enabled_isSet = false;
    m_tls_inspection_enabled_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGatewaySecurityPolicyRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewaySecurityPolicyRule::fromJsonObject(QJsonObject json) {

    m_application_matcher_isValid = ::OpenAPI::fromJsonValue(m_application_matcher, json[QString("applicationMatcher")]);
    m_application_matcher_isSet = !json[QString("applicationMatcher")].isNull() && m_application_matcher_isValid;

    m_basic_profile_isValid = ::OpenAPI::fromJsonValue(m_basic_profile, json[QString("basicProfile")]);
    m_basic_profile_isSet = !json[QString("basicProfile")].isNull() && m_basic_profile_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_session_matcher_isValid = ::OpenAPI::fromJsonValue(m_session_matcher, json[QString("sessionMatcher")]);
    m_session_matcher_isSet = !json[QString("sessionMatcher")].isNull() && m_session_matcher_isValid;

    m_tls_inspection_enabled_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_enabled, json[QString("tlsInspectionEnabled")]);
    m_tls_inspection_enabled_isSet = !json[QString("tlsInspectionEnabled")].isNull() && m_tls_inspection_enabled_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGatewaySecurityPolicyRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewaySecurityPolicyRule::asJsonObject() const {
    QJsonObject obj;
    if (m_application_matcher_isSet) {
        obj.insert(QString("applicationMatcher"), ::OpenAPI::toJsonValue(m_application_matcher));
    }
    if (m_basic_profile_isSet) {
        obj.insert(QString("basicProfile"), ::OpenAPI::toJsonValue(m_basic_profile));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_session_matcher_isSet) {
        obj.insert(QString("sessionMatcher"), ::OpenAPI::toJsonValue(m_session_matcher));
    }
    if (m_tls_inspection_enabled_isSet) {
        obj.insert(QString("tlsInspectionEnabled"), ::OpenAPI::toJsonValue(m_tls_inspection_enabled));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGatewaySecurityPolicyRule::getApplicationMatcher() const {
    return m_application_matcher;
}
void OAIGatewaySecurityPolicyRule::setApplicationMatcher(const QString &application_matcher) {
    m_application_matcher = application_matcher;
    m_application_matcher_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_application_matcher_Set() const{
    return m_application_matcher_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_application_matcher_Valid() const{
    return m_application_matcher_isValid;
}

QString OAIGatewaySecurityPolicyRule::getBasicProfile() const {
    return m_basic_profile;
}
void OAIGatewaySecurityPolicyRule::setBasicProfile(const QString &basic_profile) {
    m_basic_profile = basic_profile;
    m_basic_profile_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_basic_profile_Set() const{
    return m_basic_profile_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_basic_profile_Valid() const{
    return m_basic_profile_isValid;
}

QString OAIGatewaySecurityPolicyRule::getCreateTime() const {
    return m_create_time;
}
void OAIGatewaySecurityPolicyRule::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGatewaySecurityPolicyRule::getDescription() const {
    return m_description;
}
void OAIGatewaySecurityPolicyRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGatewaySecurityPolicyRule::isEnabled() const {
    return m_enabled;
}
void OAIGatewaySecurityPolicyRule::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGatewaySecurityPolicyRule::getName() const {
    return m_name;
}
void OAIGatewaySecurityPolicyRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGatewaySecurityPolicyRule::getPriority() const {
    return m_priority;
}
void OAIGatewaySecurityPolicyRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIGatewaySecurityPolicyRule::getSessionMatcher() const {
    return m_session_matcher;
}
void OAIGatewaySecurityPolicyRule::setSessionMatcher(const QString &session_matcher) {
    m_session_matcher = session_matcher;
    m_session_matcher_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_session_matcher_Set() const{
    return m_session_matcher_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_session_matcher_Valid() const{
    return m_session_matcher_isValid;
}

bool OAIGatewaySecurityPolicyRule::isTlsInspectionEnabled() const {
    return m_tls_inspection_enabled;
}
void OAIGatewaySecurityPolicyRule::setTlsInspectionEnabled(const bool &tls_inspection_enabled) {
    m_tls_inspection_enabled = tls_inspection_enabled;
    m_tls_inspection_enabled_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_tls_inspection_enabled_Set() const{
    return m_tls_inspection_enabled_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_tls_inspection_enabled_Valid() const{
    return m_tls_inspection_enabled_isValid;
}

QString OAIGatewaySecurityPolicyRule::getUpdateTime() const {
    return m_update_time;
}
void OAIGatewaySecurityPolicyRule::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGatewaySecurityPolicyRule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGatewaySecurityPolicyRule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGatewaySecurityPolicyRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_inspection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewaySecurityPolicyRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
