/**
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallEndpointAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallEndpointAssociation::OAIFirewallEndpointAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallEndpointAssociation::OAIFirewallEndpointAssociation() {
    this->initializeModel();
}

OAIFirewallEndpointAssociation::~OAIFirewallEndpointAssociation() {}

void OAIFirewallEndpointAssociation::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_firewall_endpoint_isSet = false;
    m_firewall_endpoint_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tls_inspection_policy_isSet = false;
    m_tls_inspection_policy_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIFirewallEndpointAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallEndpointAssociation::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_firewall_endpoint_isValid = ::OpenAPI::fromJsonValue(m_firewall_endpoint, json[QString("firewallEndpoint")]);
    m_firewall_endpoint_isSet = !json[QString("firewallEndpoint")].isNull() && m_firewall_endpoint_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tls_inspection_policy_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_policy, json[QString("tlsInspectionPolicy")]);
    m_tls_inspection_policy_isSet = !json[QString("tlsInspectionPolicy")].isNull() && m_tls_inspection_policy_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIFirewallEndpointAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallEndpointAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_firewall_endpoint_isSet) {
        obj.insert(QString("firewallEndpoint"), ::OpenAPI::toJsonValue(m_firewall_endpoint));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tls_inspection_policy_isSet) {
        obj.insert(QString("tlsInspectionPolicy"), ::OpenAPI::toJsonValue(m_tls_inspection_policy));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIFirewallEndpointAssociation::getCreateTime() const {
    return m_create_time;
}
void OAIFirewallEndpointAssociation::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFirewallEndpointAssociation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFirewallEndpointAssociation::getFirewallEndpoint() const {
    return m_firewall_endpoint;
}
void OAIFirewallEndpointAssociation::setFirewallEndpoint(const QString &firewall_endpoint) {
    m_firewall_endpoint = firewall_endpoint;
    m_firewall_endpoint_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_firewall_endpoint_Set() const{
    return m_firewall_endpoint_isSet;
}

bool OAIFirewallEndpointAssociation::is_firewall_endpoint_Valid() const{
    return m_firewall_endpoint_isValid;
}

QMap<QString, QString> OAIFirewallEndpointAssociation::getLabels() const {
    return m_labels;
}
void OAIFirewallEndpointAssociation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFirewallEndpointAssociation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIFirewallEndpointAssociation::getName() const {
    return m_name;
}
void OAIFirewallEndpointAssociation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirewallEndpointAssociation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFirewallEndpointAssociation::getNetwork() const {
    return m_network;
}
void OAIFirewallEndpointAssociation::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_network_Set() const{
    return m_network_isSet;
}

bool OAIFirewallEndpointAssociation::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIFirewallEndpointAssociation::isReconciling() const {
    return m_reconciling;
}
void OAIFirewallEndpointAssociation::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIFirewallEndpointAssociation::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIFirewallEndpointAssociation::getState() const {
    return m_state;
}
void OAIFirewallEndpointAssociation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFirewallEndpointAssociation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFirewallEndpointAssociation::getTlsInspectionPolicy() const {
    return m_tls_inspection_policy;
}
void OAIFirewallEndpointAssociation::setTlsInspectionPolicy(const QString &tls_inspection_policy) {
    m_tls_inspection_policy = tls_inspection_policy;
    m_tls_inspection_policy_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_tls_inspection_policy_Set() const{
    return m_tls_inspection_policy_isSet;
}

bool OAIFirewallEndpointAssociation::is_tls_inspection_policy_Valid() const{
    return m_tls_inspection_policy_isValid;
}

QString OAIFirewallEndpointAssociation::getUpdateTime() const {
    return m_update_time;
}
void OAIFirewallEndpointAssociation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFirewallEndpointAssociation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFirewallEndpointAssociation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIFirewallEndpointAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_inspection_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallEndpointAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
