# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_endpoint_association_reference import FirewallEndpointAssociationReference
from openapi_server import util


class FirewallEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_networks: List[str]=None, associations: List[FirewallEndpointAssociationReference]=None, billing_project_id: str=None, create_time: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, reconciling: bool=None, state: str=None, update_time: str=None):
        """FirewallEndpoint - a model defined in OpenAPI

        :param associated_networks: The associated_networks of this FirewallEndpoint.
        :param associations: The associations of this FirewallEndpoint.
        :param billing_project_id: The billing_project_id of this FirewallEndpoint.
        :param create_time: The create_time of this FirewallEndpoint.
        :param description: The description of this FirewallEndpoint.
        :param labels: The labels of this FirewallEndpoint.
        :param name: The name of this FirewallEndpoint.
        :param reconciling: The reconciling of this FirewallEndpoint.
        :param state: The state of this FirewallEndpoint.
        :param update_time: The update_time of this FirewallEndpoint.
        """
        self.openapi_types = {
            'associated_networks': List[str],
            'associations': List[FirewallEndpointAssociationReference],
            'billing_project_id': str,
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'reconciling': bool,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'associated_networks': 'associatedNetworks',
            'associations': 'associations',
            'billing_project_id': 'billingProjectId',
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'reconciling': 'reconciling',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._associated_networks = associated_networks
        self._associations = associations
        self._billing_project_id = billing_project_id
        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._name = name
        self._reconciling = reconciling
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirewallEndpoint of this FirewallEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_networks(self):
        """Gets the associated_networks of this FirewallEndpoint.

        Output only. List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.

        :return: The associated_networks of this FirewallEndpoint.
        :rtype: List[str]
        """
        return self._associated_networks

    @associated_networks.setter
    def associated_networks(self, associated_networks):
        """Sets the associated_networks of this FirewallEndpoint.

        Output only. List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.

        :param associated_networks: The associated_networks of this FirewallEndpoint.
        :type associated_networks: List[str]
        """

        self._associated_networks = associated_networks

    @property
    def associations(self):
        """Gets the associations of this FirewallEndpoint.

        Output only. List of FirewallEndpointAssociations that are associated to this endpoint. An association will only appear in this list after traffic routing is fully configured.

        :return: The associations of this FirewallEndpoint.
        :rtype: List[FirewallEndpointAssociationReference]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this FirewallEndpoint.

        Output only. List of FirewallEndpointAssociations that are associated to this endpoint. An association will only appear in this list after traffic routing is fully configured.

        :param associations: The associations of this FirewallEndpoint.
        :type associations: List[FirewallEndpointAssociationReference]
        """

        self._associations = associations

    @property
    def billing_project_id(self):
        """Gets the billing_project_id of this FirewallEndpoint.

        Required. Project to bill on endpoint uptime usage.

        :return: The billing_project_id of this FirewallEndpoint.
        :rtype: str
        """
        return self._billing_project_id

    @billing_project_id.setter
    def billing_project_id(self, billing_project_id):
        """Sets the billing_project_id of this FirewallEndpoint.

        Required. Project to bill on endpoint uptime usage.

        :param billing_project_id: The billing_project_id of this FirewallEndpoint.
        :type billing_project_id: str
        """

        self._billing_project_id = billing_project_id

    @property
    def create_time(self):
        """Gets the create_time of this FirewallEndpoint.

        Output only. Create time stamp

        :return: The create_time of this FirewallEndpoint.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this FirewallEndpoint.

        Output only. Create time stamp

        :param create_time: The create_time of this FirewallEndpoint.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this FirewallEndpoint.

        Optional. Description of the firewall endpoint. Max length 2048 characters.

        :return: The description of this FirewallEndpoint.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirewallEndpoint.

        Optional. Description of the firewall endpoint. Max length 2048 characters.

        :param description: The description of this FirewallEndpoint.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this FirewallEndpoint.

        Optional. Labels as key value pairs

        :return: The labels of this FirewallEndpoint.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FirewallEndpoint.

        Optional. Labels as key value pairs

        :param labels: The labels of this FirewallEndpoint.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this FirewallEndpoint.

        Immutable. Identifier. name of resource

        :return: The name of this FirewallEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallEndpoint.

        Immutable. Identifier. name of resource

        :param name: The name of this FirewallEndpoint.
        :type name: str
        """

        self._name = name

    @property
    def reconciling(self):
        """Gets the reconciling of this FirewallEndpoint.

        Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.

        :return: The reconciling of this FirewallEndpoint.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this FirewallEndpoint.

        Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.

        :param reconciling: The reconciling of this FirewallEndpoint.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this FirewallEndpoint.

        Output only. Current state of the endpoint.

        :return: The state of this FirewallEndpoint.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FirewallEndpoint.

        Output only. Current state of the endpoint.

        :param state: The state of this FirewallEndpoint.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this FirewallEndpoint.

        Output only. Update time stamp

        :return: The update_time of this FirewallEndpoint.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this FirewallEndpoint.

        Output only. Update time stamp

        :param update_time: The update_time of this FirewallEndpoint.
        :type update_time: str
        """

        self._update_time = update_time
