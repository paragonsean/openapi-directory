# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, create_time: str=None, description: str=None, items: List[str]=None, labels: Dict[str, str]=None, name: str=None, self_link: str=None, type: str=None, update_time: str=None):
        """AddressGroup - a model defined in OpenAPI

        :param capacity: The capacity of this AddressGroup.
        :param create_time: The create_time of this AddressGroup.
        :param description: The description of this AddressGroup.
        :param items: The items of this AddressGroup.
        :param labels: The labels of this AddressGroup.
        :param name: The name of this AddressGroup.
        :param self_link: The self_link of this AddressGroup.
        :param type: The type of this AddressGroup.
        :param update_time: The update_time of this AddressGroup.
        """
        self.openapi_types = {
            'capacity': int,
            'create_time': str,
            'description': str,
            'items': List[str],
            'labels': Dict[str, str],
            'name': str,
            'self_link': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'create_time': 'createTime',
            'description': 'description',
            'items': 'items',
            'labels': 'labels',
            'name': 'name',
            'self_link': 'selfLink',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._capacity = capacity
        self._create_time = create_time
        self._description = description
        self._items = items
        self._labels = labels
        self._name = name
        self._self_link = self_link
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressGroup of this AddressGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this AddressGroup.

        Required. Capacity of the Address Group

        :return: The capacity of this AddressGroup.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this AddressGroup.

        Required. Capacity of the Address Group

        :param capacity: The capacity of this AddressGroup.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def create_time(self):
        """Gets the create_time of this AddressGroup.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this AddressGroup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AddressGroup.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this AddressGroup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this AddressGroup.

        Optional. Free-text description of the resource.

        :return: The description of this AddressGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddressGroup.

        Optional. Free-text description of the resource.

        :param description: The description of this AddressGroup.
        :type description: str
        """

        self._description = description

    @property
    def items(self):
        """Gets the items of this AddressGroup.

        Optional. List of items.

        :return: The items of this AddressGroup.
        :rtype: List[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this AddressGroup.

        Optional. List of items.

        :param items: The items of this AddressGroup.
        :type items: List[str]
        """

        self._items = items

    @property
    def labels(self):
        """Gets the labels of this AddressGroup.

        Optional. Set of label tags associated with the AddressGroup resource.

        :return: The labels of this AddressGroup.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AddressGroup.

        Optional. Set of label tags associated with the AddressGroup resource.

        :param labels: The labels of this AddressGroup.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this AddressGroup.

        Required. Name of the AddressGroup resource. It matches pattern `projects/*/locations/{location}/addressGroups/`.

        :return: The name of this AddressGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddressGroup.

        Required. Name of the AddressGroup resource. It matches pattern `projects/*/locations/{location}/addressGroups/`.

        :param name: The name of this AddressGroup.
        :type name: str
        """

        self._name = name

    @property
    def self_link(self):
        """Gets the self_link of this AddressGroup.

        Output only. Server-defined fully-qualified URL for this resource.

        :return: The self_link of this AddressGroup.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this AddressGroup.

        Output only. Server-defined fully-qualified URL for this resource.

        :param self_link: The self_link of this AddressGroup.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def type(self):
        """Gets the type of this AddressGroup.

        Required. The type of the Address Group. Possible values are \"IPv4\" or \"IPV6\".

        :return: The type of this AddressGroup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddressGroup.

        Required. The type of the Address Group. Possible values are \"IPv4\" or \"IPV6\".

        :param type: The type of this AddressGroup.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "IPV4", "IPV6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this AddressGroup.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this AddressGroup.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AddressGroup.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this AddressGroup.
        :type update_time: str
        """

        self._update_time = update_time
