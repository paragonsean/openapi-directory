# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_networksecurity_v1beta1_certificate_provider import GoogleCloudNetworksecurityV1beta1CertificateProvider
from openapi_server.models.mtls_policy import MTLSPolicy
from openapi_server import util


class ServerTlsPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_open: bool=None, create_time: str=None, description: str=None, labels: Dict[str, str]=None, mtls_policy: MTLSPolicy=None, name: str=None, server_certificate: GoogleCloudNetworksecurityV1beta1CertificateProvider=None, update_time: str=None):
        """ServerTlsPolicy - a model defined in OpenAPI

        :param allow_open: The allow_open of this ServerTlsPolicy.
        :param create_time: The create_time of this ServerTlsPolicy.
        :param description: The description of this ServerTlsPolicy.
        :param labels: The labels of this ServerTlsPolicy.
        :param mtls_policy: The mtls_policy of this ServerTlsPolicy.
        :param name: The name of this ServerTlsPolicy.
        :param server_certificate: The server_certificate of this ServerTlsPolicy.
        :param update_time: The update_time of this ServerTlsPolicy.
        """
        self.openapi_types = {
            'allow_open': bool,
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'mtls_policy': MTLSPolicy,
            'name': str,
            'server_certificate': GoogleCloudNetworksecurityV1beta1CertificateProvider,
            'update_time': str
        }

        self.attribute_map = {
            'allow_open': 'allowOpen',
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'mtls_policy': 'mtlsPolicy',
            'name': 'name',
            'server_certificate': 'serverCertificate',
            'update_time': 'updateTime'
        }

        self._allow_open = allow_open
        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._mtls_policy = mtls_policy
        self._name = name
        self._server_certificate = server_certificate
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerTlsPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerTlsPolicy of this ServerTlsPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_open(self):
        """Gets the allow_open of this ServerTlsPolicy.

        This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies. Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility. Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.

        :return: The allow_open of this ServerTlsPolicy.
        :rtype: bool
        """
        return self._allow_open

    @allow_open.setter
    def allow_open(self, allow_open):
        """Sets the allow_open of this ServerTlsPolicy.

        This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies. Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility. Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.

        :param allow_open: The allow_open of this ServerTlsPolicy.
        :type allow_open: bool
        """

        self._allow_open = allow_open

    @property
    def create_time(self):
        """Gets the create_time of this ServerTlsPolicy.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this ServerTlsPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServerTlsPolicy.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this ServerTlsPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ServerTlsPolicy.

        Free-text description of the resource.

        :return: The description of this ServerTlsPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerTlsPolicy.

        Free-text description of the resource.

        :param description: The description of this ServerTlsPolicy.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this ServerTlsPolicy.

        Set of label tags associated with the resource.

        :return: The labels of this ServerTlsPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServerTlsPolicy.

        Set of label tags associated with the resource.

        :param labels: The labels of this ServerTlsPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mtls_policy(self):
        """Gets the mtls_policy of this ServerTlsPolicy.


        :return: The mtls_policy of this ServerTlsPolicy.
        :rtype: MTLSPolicy
        """
        return self._mtls_policy

    @mtls_policy.setter
    def mtls_policy(self, mtls_policy):
        """Sets the mtls_policy of this ServerTlsPolicy.


        :param mtls_policy: The mtls_policy of this ServerTlsPolicy.
        :type mtls_policy: MTLSPolicy
        """

        self._mtls_policy = mtls_policy

    @property
    def name(self):
        """Gets the name of this ServerTlsPolicy.

        Required. Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`

        :return: The name of this ServerTlsPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerTlsPolicy.

        Required. Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`

        :param name: The name of this ServerTlsPolicy.
        :type name: str
        """

        self._name = name

    @property
    def server_certificate(self):
        """Gets the server_certificate of this ServerTlsPolicy.


        :return: The server_certificate of this ServerTlsPolicy.
        :rtype: GoogleCloudNetworksecurityV1beta1CertificateProvider
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this ServerTlsPolicy.


        :param server_certificate: The server_certificate of this ServerTlsPolicy.
        :type server_certificate: GoogleCloudNetworksecurityV1beta1CertificateProvider
        """

        self._server_certificate = server_certificate

    @property
    def update_time(self):
        """Gets the update_time of this ServerTlsPolicy.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this ServerTlsPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ServerTlsPolicy.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this ServerTlsPolicy.
        :type update_time: str
        """

        self._update_time = update_time
