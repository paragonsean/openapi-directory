# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_header_match import HttpHeaderMatch
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosts: List[str]=None, http_header_match: HttpHeaderMatch=None, methods: List[str]=None, ports: List[int]=None):
        """Destination - a model defined in OpenAPI

        :param hosts: The hosts of this Destination.
        :param http_header_match: The http_header_match of this Destination.
        :param methods: The methods of this Destination.
        :param ports: The ports of this Destination.
        """
        self.openapi_types = {
            'hosts': List[str],
            'http_header_match': HttpHeaderMatch,
            'methods': List[str],
            'ports': List[int]
        }

        self.attribute_map = {
            'hosts': 'hosts',
            'http_header_match': 'httpHeaderMatch',
            'methods': 'methods',
            'ports': 'ports'
        }

        self._hosts = hosts
        self._http_header_match = http_header_match
        self._methods = methods
        self._ports = ports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosts(self):
        """Gets the hosts of this Destination.

        Required. List of host names to match. Matched against the \":authority\" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example \"mydomain.*\") or a suffix match (example \"*.myorg.com\") or a presence (any) match \"*\".

        :return: The hosts of this Destination.
        :rtype: List[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this Destination.

        Required. List of host names to match. Matched against the \":authority\" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example \"mydomain.*\") or a suffix match (example \"*.myorg.com\") or a presence (any) match \"*\".

        :param hosts: The hosts of this Destination.
        :type hosts: List[str]
        """

        self._hosts = hosts

    @property
    def http_header_match(self):
        """Gets the http_header_match of this Destination.


        :return: The http_header_match of this Destination.
        :rtype: HttpHeaderMatch
        """
        return self._http_header_match

    @http_header_match.setter
    def http_header_match(self, http_header_match):
        """Sets the http_header_match of this Destination.


        :param http_header_match: The http_header_match of this Destination.
        :type http_header_match: HttpHeaderMatch
        """

        self._http_header_match = http_header_match

    @property
    def methods(self):
        """Gets the methods of this Destination.

        Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.

        :return: The methods of this Destination.
        :rtype: List[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this Destination.

        Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.

        :param methods: The methods of this Destination.
        :type methods: List[str]
        """

        self._methods = methods

    @property
    def ports(self):
        """Gets the ports of this Destination.

        Required. List of destination ports to match. At least one port should match.

        :return: The ports of this Destination.
        :rtype: List[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Destination.

        Required. List of destination ports to match. At least one port should match.

        :param ports: The ports of this Destination.
        :type ports: List[int]
        """

        self._ports = ports
