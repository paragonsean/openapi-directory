# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_blocks: List[str]=None, principals: List[str]=None):
        """Source - a model defined in OpenAPI

        :param ip_blocks: The ip_blocks of this Source.
        :param principals: The principals of this Source.
        """
        self.openapi_types = {
            'ip_blocks': List[str],
            'principals': List[str]
        }

        self.attribute_map = {
            'ip_blocks': 'ipBlocks',
            'principals': 'principals'
        }

        self._ip_blocks = ip_blocks
        self._principals = principals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_blocks(self):
        """Gets the ip_blocks of this Source.

        Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., \"1.2.3.4\") and CIDR (e.g., \"1.2.3.0/24\") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.

        :return: The ip_blocks of this Source.
        :rtype: List[str]
        """
        return self._ip_blocks

    @ip_blocks.setter
    def ip_blocks(self, ip_blocks):
        """Sets the ip_blocks of this Source.

        Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., \"1.2.3.4\") and CIDR (e.g., \"1.2.3.0/24\") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.

        :param ip_blocks: The ip_blocks of this Source.
        :type ip_blocks: List[str]
        """

        self._ip_blocks = ip_blocks

    @property
    def principals(self):
        """Gets the principals of this Source.

        Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, \"namespace/*\") or a suffix match (example, \"*/service-account\") or a presence match \"*\". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.

        :return: The principals of this Source.
        :rtype: List[str]
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this Source.

        Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, \"namespace/*\") or a suffix match (example, \"*/service-account\") or a presence match \"*\". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.

        :param principals: The principals of this Source.
        :type principals: List[str]
        """

        self._principals = principals
