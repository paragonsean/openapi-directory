# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination import Destination
from openapi_server.models.source import Source
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[Destination]=None, sources: List[Source]=None):
        """Rule - a model defined in OpenAPI

        :param destinations: The destinations of this Rule.
        :param sources: The sources of this Rule.
        """
        self.openapi_types = {
            'destinations': List[Destination],
            'sources': List[Source]
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'sources': 'sources'
        }

        self._destinations = destinations
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this Rule.

        Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.

        :return: The destinations of this Rule.
        :rtype: List[Destination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Rule.

        Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.

        :param destinations: The destinations of this Rule.
        :type destinations: List[Destination]
        """

        self._destinations = destinations

    @property
    def sources(self):
        """Gets the sources of this Rule.

        Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.

        :return: The sources of this Rule.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Rule.

        Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.

        :param sources: The sources of this Rule.
        :type sources: List[Source]
        """

        self._sources = sources
