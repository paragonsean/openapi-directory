# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirewallEndpointAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, firewall_endpoint: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, reconciling: bool=None, state: str=None, tls_inspection_policy: str=None, update_time: str=None):
        """FirewallEndpointAssociation - a model defined in OpenAPI

        :param create_time: The create_time of this FirewallEndpointAssociation.
        :param firewall_endpoint: The firewall_endpoint of this FirewallEndpointAssociation.
        :param labels: The labels of this FirewallEndpointAssociation.
        :param name: The name of this FirewallEndpointAssociation.
        :param network: The network of this FirewallEndpointAssociation.
        :param reconciling: The reconciling of this FirewallEndpointAssociation.
        :param state: The state of this FirewallEndpointAssociation.
        :param tls_inspection_policy: The tls_inspection_policy of this FirewallEndpointAssociation.
        :param update_time: The update_time of this FirewallEndpointAssociation.
        """
        self.openapi_types = {
            'create_time': str,
            'firewall_endpoint': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'reconciling': bool,
            'state': str,
            'tls_inspection_policy': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'firewall_endpoint': 'firewallEndpoint',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'reconciling': 'reconciling',
            'state': 'state',
            'tls_inspection_policy': 'tlsInspectionPolicy',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._firewall_endpoint = firewall_endpoint
        self._labels = labels
        self._name = name
        self._network = network
        self._reconciling = reconciling
        self._state = state
        self._tls_inspection_policy = tls_inspection_policy
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallEndpointAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirewallEndpointAssociation of this FirewallEndpointAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this FirewallEndpointAssociation.

        Output only. Create time stamp

        :return: The create_time of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this FirewallEndpointAssociation.

        Output only. Create time stamp

        :param create_time: The create_time of this FirewallEndpointAssociation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def firewall_endpoint(self):
        """Gets the firewall_endpoint of this FirewallEndpointAssociation.

        Required. The URL of the FirewallEndpoint that is being associated.

        :return: The firewall_endpoint of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._firewall_endpoint

    @firewall_endpoint.setter
    def firewall_endpoint(self, firewall_endpoint):
        """Sets the firewall_endpoint of this FirewallEndpointAssociation.

        Required. The URL of the FirewallEndpoint that is being associated.

        :param firewall_endpoint: The firewall_endpoint of this FirewallEndpointAssociation.
        :type firewall_endpoint: str
        """

        self._firewall_endpoint = firewall_endpoint

    @property
    def labels(self):
        """Gets the labels of this FirewallEndpointAssociation.

        Optional. Labels as key value pairs

        :return: The labels of this FirewallEndpointAssociation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FirewallEndpointAssociation.

        Optional. Labels as key value pairs

        :param labels: The labels of this FirewallEndpointAssociation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this FirewallEndpointAssociation.

        Immutable. Identifier. name of resource

        :return: The name of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirewallEndpointAssociation.

        Immutable. Identifier. name of resource

        :param name: The name of this FirewallEndpointAssociation.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this FirewallEndpointAssociation.

        Required. The URL of the network that is being associated.

        :return: The network of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this FirewallEndpointAssociation.

        Required. The URL of the network that is being associated.

        :param network: The network of this FirewallEndpointAssociation.
        :type network: str
        """

        self._network = network

    @property
    def reconciling(self):
        """Gets the reconciling of this FirewallEndpointAssociation.

        Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.

        :return: The reconciling of this FirewallEndpointAssociation.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this FirewallEndpointAssociation.

        Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.

        :param reconciling: The reconciling of this FirewallEndpointAssociation.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this FirewallEndpointAssociation.

        Output only. Current state of the association.

        :return: The state of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FirewallEndpointAssociation.

        Output only. Current state of the association.

        :param state: The state of this FirewallEndpointAssociation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tls_inspection_policy(self):
        """Gets the tls_inspection_policy of this FirewallEndpointAssociation.

        Optional. The URL of the TlsInspectionPolicy that is being associated.

        :return: The tls_inspection_policy of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._tls_inspection_policy

    @tls_inspection_policy.setter
    def tls_inspection_policy(self, tls_inspection_policy):
        """Sets the tls_inspection_policy of this FirewallEndpointAssociation.

        Optional. The URL of the TlsInspectionPolicy that is being associated.

        :param tls_inspection_policy: The tls_inspection_policy of this FirewallEndpointAssociation.
        :type tls_inspection_policy: str
        """

        self._tls_inspection_policy = tls_inspection_policy

    @property
    def update_time(self):
        """Gets the update_time of this FirewallEndpointAssociation.

        Output only. Update time stamp

        :return: The update_time of this FirewallEndpointAssociation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this FirewallEndpointAssociation.

        Output only. Update time stamp

        :param update_time: The update_time of this FirewallEndpointAssociation.
        :type update_time: str
        """

        self._update_time = update_time
