# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreatOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, threat_id: str=None, type: str=None):
        """ThreatOverride - a model defined in OpenAPI

        :param action: The action of this ThreatOverride.
        :param threat_id: The threat_id of this ThreatOverride.
        :param type: The type of this ThreatOverride.
        """
        self.openapi_types = {
            'action': str,
            'threat_id': str,
            'type': str
        }

        self.attribute_map = {
            'action': 'action',
            'threat_id': 'threatId',
            'type': 'type'
        }

        self._action = action
        self._threat_id = threat_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreatOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreatOverride of this ThreatOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ThreatOverride.

        Required. Threat action override. For some threat types, only a subset of actions applies.

        :return: The action of this ThreatOverride.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ThreatOverride.

        Required. Threat action override. For some threat types, only a subset of actions applies.

        :param action: The action of this ThreatOverride.
        :type action: str
        """
        allowed_values = ["THREAT_ACTION_UNSPECIFIED", "DEFAULT_ACTION", "ALLOW", "ALERT", "DENY"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def threat_id(self):
        """Gets the threat_id of this ThreatOverride.

        Required. Vendor-specific ID of a threat to override.

        :return: The threat_id of this ThreatOverride.
        :rtype: str
        """
        return self._threat_id

    @threat_id.setter
    def threat_id(self, threat_id):
        """Sets the threat_id of this ThreatOverride.

        Required. Vendor-specific ID of a threat to override.

        :param threat_id: The threat_id of this ThreatOverride.
        :type threat_id: str
        """

        self._threat_id = threat_id

    @property
    def type(self):
        """Gets the type of this ThreatOverride.

        Output only. Type of the threat (read only).

        :return: The type of this ThreatOverride.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThreatOverride.

        Output only. Type of the threat (read only).

        :param type: The type of this ThreatOverride.
        :type type: str
        """
        allowed_values = ["THREAT_TYPE_UNSPECIFIED", "UNKNOWN", "VULNERABILITY", "ANTIVIRUS", "SPYWARE", "DNS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
