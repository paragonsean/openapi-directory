# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_ca import ValidationCA
from openapi_server import util


class MTLSPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_validation_ca: List[ValidationCA]=None, client_validation_mode: str=None, client_validation_trust_config: str=None):
        """MTLSPolicy - a model defined in OpenAPI

        :param client_validation_ca: The client_validation_ca of this MTLSPolicy.
        :param client_validation_mode: The client_validation_mode of this MTLSPolicy.
        :param client_validation_trust_config: The client_validation_trust_config of this MTLSPolicy.
        """
        self.openapi_types = {
            'client_validation_ca': List[ValidationCA],
            'client_validation_mode': str,
            'client_validation_trust_config': str
        }

        self.attribute_map = {
            'client_validation_ca': 'clientValidationCa',
            'client_validation_mode': 'clientValidationMode',
            'client_validation_trust_config': 'clientValidationTrustConfig'
        }

        self._client_validation_ca = client_validation_ca
        self._client_validation_mode = client_validation_mode
        self._client_validation_trust_config = client_validation_trust_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MTLSPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MTLSPolicy of this MTLSPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_validation_ca(self):
        """Gets the client_validation_ca of this MTLSPolicy.

        Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.

        :return: The client_validation_ca of this MTLSPolicy.
        :rtype: List[ValidationCA]
        """
        return self._client_validation_ca

    @client_validation_ca.setter
    def client_validation_ca(self, client_validation_ca):
        """Sets the client_validation_ca of this MTLSPolicy.

        Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.

        :param client_validation_ca: The client_validation_ca of this MTLSPolicy.
        :type client_validation_ca: List[ValidationCA]
        """

        self._client_validation_ca = client_validation_ca

    @property
    def client_validation_mode(self):
        """Gets the client_validation_mode of this MTLSPolicy.

        When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.

        :return: The client_validation_mode of this MTLSPolicy.
        :rtype: str
        """
        return self._client_validation_mode

    @client_validation_mode.setter
    def client_validation_mode(self, client_validation_mode):
        """Sets the client_validation_mode of this MTLSPolicy.

        When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.

        :param client_validation_mode: The client_validation_mode of this MTLSPolicy.
        :type client_validation_mode: str
        """
        allowed_values = ["CLIENT_VALIDATION_MODE_UNSPECIFIED", "ALLOW_INVALID_OR_MISSING_CLIENT_CERT", "REJECT_INVALID"]  # noqa: E501
        if client_validation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `client_validation_mode` ({0}), must be one of {1}"
                .format(client_validation_mode, allowed_values)
            )

        self._client_validation_mode = client_validation_mode

    @property
    def client_validation_trust_config(self):
        """Gets the client_validation_trust_config of this MTLSPolicy.

        Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with external HTTPS load balancers.

        :return: The client_validation_trust_config of this MTLSPolicy.
        :rtype: str
        """
        return self._client_validation_trust_config

    @client_validation_trust_config.setter
    def client_validation_trust_config(self, client_validation_trust_config):
        """Sets the client_validation_trust_config of this MTLSPolicy.

        Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with external HTTPS load balancers.

        :param client_validation_trust_config: The client_validation_trust_config of this MTLSPolicy.
        :type client_validation_trust_config: str
        """

        self._client_validation_trust_config = client_validation_trust_config
