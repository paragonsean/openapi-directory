# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveAddressGroupItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[str]=None, request_id: str=None):
        """RemoveAddressGroupItemsRequest - a model defined in OpenAPI

        :param items: The items of this RemoveAddressGroupItemsRequest.
        :param request_id: The request_id of this RemoveAddressGroupItemsRequest.
        """
        self.openapi_types = {
            'items': List[str],
            'request_id': str
        }

        self.attribute_map = {
            'items': 'items',
            'request_id': 'requestId'
        }

        self._items = items
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveAddressGroupItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveAddressGroupItemsRequest of this RemoveAddressGroupItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this RemoveAddressGroupItemsRequest.

        Required. List of items to remove.

        :return: The items of this RemoveAddressGroupItemsRequest.
        :rtype: List[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RemoveAddressGroupItemsRequest.

        Required. List of items to remove.

        :param items: The items of this RemoveAddressGroupItemsRequest.
        :type items: List[str]
        """

        self._items = items

    @property
    def request_id(self):
        """Gets the request_id of this RemoveAddressGroupItemsRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this RemoveAddressGroupItemsRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RemoveAddressGroupItemsRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this RemoveAddressGroupItemsRequest.
        :type request_id: str
        """

        self._request_id = request_id
