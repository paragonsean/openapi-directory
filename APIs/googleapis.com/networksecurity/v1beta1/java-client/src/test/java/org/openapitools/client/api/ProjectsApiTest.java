/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddAddressGroupItemsRequest;
import org.openapitools.client.model.AddressGroup;
import org.openapitools.client.model.AuthorizationPolicy;
import org.openapitools.client.model.ClientTlsPolicy;
import org.openapitools.client.model.CloneAddressGroupItemsRequest;
import org.openapitools.client.model.FirewallEndpointAssociation;
import org.openapitools.client.model.GatewaySecurityPolicy;
import org.openapitools.client.model.GatewaySecurityPolicyRule;
import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;
import org.openapitools.client.model.ListAddressGroupReferencesResponse;
import org.openapitools.client.model.ListAddressGroupsResponse;
import org.openapitools.client.model.ListAuthorizationPoliciesResponse;
import org.openapitools.client.model.ListClientTlsPoliciesResponse;
import org.openapitools.client.model.ListFirewallEndpointAssociationsResponse;
import org.openapitools.client.model.ListGatewaySecurityPoliciesResponse;
import org.openapitools.client.model.ListGatewaySecurityPolicyRulesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListServerTlsPoliciesResponse;
import org.openapitools.client.model.ListTlsInspectionPoliciesResponse;
import org.openapitools.client.model.ListUrlListsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.RemoveAddressGroupItemsRequest;
import org.openapitools.client.model.ServerTlsPolicy;
import org.openapitools.client.model.TlsInspectionPolicy;
import org.openapitools.client.model.UrlList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Adds items to an address group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsAddItemsTest() throws ApiException {
        String addressGroup = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddAddressGroupItemsRequest addAddressGroupItemsRequest = null;
        Operation response = api.networksecurityProjectsLocationsAddressGroupsAddItems(addressGroup, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addAddressGroupItemsRequest);
        // TODO: test validations
    }

    /**
     * Clones items from one address group to another.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsCloneItemsTest() throws ApiException {
        String addressGroup = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CloneAddressGroupItemsRequest cloneAddressGroupItemsRequest = null;
        Operation response = api.networksecurityProjectsLocationsAddressGroupsCloneItems(addressGroup, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cloneAddressGroupItemsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new address group in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String addressGroupId = null;
        String requestId = null;
        AddressGroup addressGroup = null;
        Operation response = api.networksecurityProjectsLocationsAddressGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addressGroupId, requestId, addressGroup);
        // TODO: test validations
    }

    /**
     * Lists address groups in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAddressGroupsResponse response = api.networksecurityProjectsLocationsAddressGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists references of an address group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsListReferencesTest() throws ApiException {
        String addressGroup = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAddressGroupReferencesResponse response = api.networksecurityProjectsLocationsAddressGroupsListReferences(addressGroup, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes items from an address group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAddressGroupsRemoveItemsTest() throws ApiException {
        String addressGroup = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveAddressGroupItemsRequest removeAddressGroupItemsRequest = null;
        Operation response = api.networksecurityProjectsLocationsAddressGroupsRemoveItems(addressGroup, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeAddressGroupItemsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new AuthorizationPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAuthorizationPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String authorizationPolicyId = null;
        AuthorizationPolicy authorizationPolicy = null;
        Operation response = api.networksecurityProjectsLocationsAuthorizationPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, authorizationPolicyId, authorizationPolicy);
        // TODO: test validations
    }

    /**
     * Lists AuthorizationPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsAuthorizationPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAuthorizationPoliciesResponse response = api.networksecurityProjectsLocationsAuthorizationPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ClientTlsPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsClientTlsPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientTlsPolicyId = null;
        ClientTlsPolicy clientTlsPolicy = null;
        Operation response = api.networksecurityProjectsLocationsClientTlsPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientTlsPolicyId, clientTlsPolicy);
        // TODO: test validations
    }

    /**
     * Lists ClientTlsPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsClientTlsPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClientTlsPoliciesResponse response = api.networksecurityProjectsLocationsClientTlsPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new FirewallEndpointAssociation in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsFirewallEndpointAssociationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String firewallEndpointAssociationId = null;
        String requestId = null;
        FirewallEndpointAssociation firewallEndpointAssociation = null;
        Operation response = api.networksecurityProjectsLocationsFirewallEndpointAssociationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, firewallEndpointAssociationId, requestId, firewallEndpointAssociation);
        // TODO: test validations
    }

    /**
     * Lists Associations in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsFirewallEndpointAssociationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFirewallEndpointAssociationsResponse response = api.networksecurityProjectsLocationsFirewallEndpointAssociationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new GatewaySecurityPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsGatewaySecurityPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gatewaySecurityPolicyId = null;
        GatewaySecurityPolicy gatewaySecurityPolicy = null;
        Operation response = api.networksecurityProjectsLocationsGatewaySecurityPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gatewaySecurityPolicyId, gatewaySecurityPolicy);
        // TODO: test validations
    }

    /**
     * Lists GatewaySecurityPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsGatewaySecurityPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGatewaySecurityPoliciesResponse response = api.networksecurityProjectsLocationsGatewaySecurityPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new GatewaySecurityPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gatewaySecurityPolicyRuleId = null;
        GatewaySecurityPolicyRule gatewaySecurityPolicyRule = null;
        Operation response = api.networksecurityProjectsLocationsGatewaySecurityPoliciesRulesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gatewaySecurityPolicyRuleId, gatewaySecurityPolicyRule);
        // TODO: test validations
    }

    /**
     * Lists GatewaySecurityPolicyRules in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsGatewaySecurityPoliciesRulesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGatewaySecurityPolicyRulesResponse response = api.networksecurityProjectsLocationsGatewaySecurityPoliciesRulesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.networksecurityProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.networksecurityProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.networksecurityProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServerTlsPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsServerTlsPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String serverTlsPolicyId = null;
        ServerTlsPolicy serverTlsPolicy = null;
        Operation response = api.networksecurityProjectsLocationsServerTlsPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serverTlsPolicyId, serverTlsPolicy);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsServerTlsPoliciesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        GoogleIamV1Policy response = api.networksecurityProjectsLocationsServerTlsPoliciesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists ServerTlsPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsServerTlsPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServerTlsPoliciesResponse response = api.networksecurityProjectsLocationsServerTlsPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsServerTlsPoliciesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.networksecurityProjectsLocationsServerTlsPoliciesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsServerTlsPoliciesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest = null;
        GoogleIamV1TestIamPermissionsResponse response = api.networksecurityProjectsLocationsServerTlsPoliciesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1TestIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new TlsInspectionPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsTlsInspectionPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tlsInspectionPolicyId = null;
        TlsInspectionPolicy tlsInspectionPolicy = null;
        Operation response = api.networksecurityProjectsLocationsTlsInspectionPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tlsInspectionPolicyId, tlsInspectionPolicy);
        // TODO: test validations
    }

    /**
     * Lists TlsInspectionPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsTlsInspectionPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTlsInspectionPoliciesResponse response = api.networksecurityProjectsLocationsTlsInspectionPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new UrlList in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsUrlListsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String urlListId = null;
        UrlList urlList = null;
        Operation response = api.networksecurityProjectsLocationsUrlListsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, urlListId, urlList);
        // TODO: test validations
    }

    /**
     * Deletes a single UrlList.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsUrlListsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Operation response = api.networksecurityProjectsLocationsUrlListsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Gets details of a single UrlList.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsUrlListsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UrlList response = api.networksecurityProjectsLocationsUrlListsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists UrlLists in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsUrlListsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUrlListsResponse response = api.networksecurityProjectsLocationsUrlListsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single UrlList.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networksecurityProjectsLocationsUrlListsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        UrlList urlList = null;
        Operation response = api.networksecurityProjectsLocationsUrlListsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, urlList);
        // TODO: test validations
    }

}
