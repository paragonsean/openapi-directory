/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FirewallEndpointAssociationReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing Endpoint object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.058911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallEndpoint {
  public static final String SERIALIZED_NAME_ASSOCIATED_NETWORKS = "associatedNetworks";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_NETWORKS)
  private List<String> associatedNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private List<FirewallEndpointAssociationReference> associations = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_PROJECT_ID = "billingProjectId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROJECT_ID)
  private String billingProjectId;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. Current state of the endpoint.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public FirewallEndpoint() {
  }

  public FirewallEndpoint(
     List<String> associatedNetworks, 
     List<FirewallEndpointAssociationReference> associations, 
     String createTime, 
     Boolean reconciling, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.associatedNetworks = associatedNetworks;
    this.associations = associations;
    this.createTime = createTime;
    this.reconciling = reconciling;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.
   * @return associatedNetworks
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getAssociatedNetworks() {
    return associatedNetworks;
  }



  /**
   * Output only. List of FirewallEndpointAssociations that are associated to this endpoint. An association will only appear in this list after traffic routing is fully configured.
   * @return associations
   */
  @javax.annotation.Nullable
  public List<FirewallEndpointAssociationReference> getAssociations() {
    return associations;
  }



  public FirewallEndpoint billingProjectId(String billingProjectId) {
    this.billingProjectId = billingProjectId;
    return this;
  }

  /**
   * Required. Project to bill on endpoint uptime usage.
   * @return billingProjectId
   */
  @javax.annotation.Nullable
  public String getBillingProjectId() {
    return billingProjectId;
  }

  public void setBillingProjectId(String billingProjectId) {
    this.billingProjectId = billingProjectId;
  }


  /**
   * Output only. Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public FirewallEndpoint description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the firewall endpoint. Max length 2048 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FirewallEndpoint labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public FirewallEndpoint putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public FirewallEndpoint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Identifier. name of resource
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. Current state of the endpoint.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallEndpoint firewallEndpoint = (FirewallEndpoint) o;
    return Objects.equals(this.associatedNetworks, firewallEndpoint.associatedNetworks) &&
        Objects.equals(this.associations, firewallEndpoint.associations) &&
        Objects.equals(this.billingProjectId, firewallEndpoint.billingProjectId) &&
        Objects.equals(this.createTime, firewallEndpoint.createTime) &&
        Objects.equals(this.description, firewallEndpoint.description) &&
        Objects.equals(this.labels, firewallEndpoint.labels) &&
        Objects.equals(this.name, firewallEndpoint.name) &&
        Objects.equals(this.reconciling, firewallEndpoint.reconciling) &&
        Objects.equals(this.state, firewallEndpoint.state) &&
        Objects.equals(this.updateTime, firewallEndpoint.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedNetworks, associations, billingProjectId, createTime, description, labels, name, reconciling, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallEndpoint {\n");
    sb.append("    associatedNetworks: ").append(toIndentedString(associatedNetworks)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    billingProjectId: ").append(toIndentedString(billingProjectId)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedNetworks");
    openapiFields.add("associations");
    openapiFields.add("billingProjectId");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallEndpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallEndpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallEndpoint is not found in the empty JSON string", FirewallEndpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallEndpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallEndpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("associatedNetworks") != null && !jsonObj.get("associatedNetworks").isJsonNull() && !jsonObj.get("associatedNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("associatedNetworks").toString()));
      }
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            FirewallEndpointAssociationReference.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      if ((jsonObj.get("billingProjectId") != null && !jsonObj.get("billingProjectId").isJsonNull()) && !jsonObj.get("billingProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProjectId").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallEndpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallEndpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallEndpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallEndpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallEndpoint>() {
           @Override
           public void write(JsonWriter out, FirewallEndpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallEndpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirewallEndpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallEndpoint
   * @throws IOException if the JSON string is invalid with respect to FirewallEndpoint
   */
  public static FirewallEndpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallEndpoint.class);
  }

  /**
   * Convert an instance of FirewallEndpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

