/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ValidationCA;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification of the MTLSPolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.058911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MTLSPolicy {
  public static final String SERIALIZED_NAME_CLIENT_VALIDATION_CA = "clientValidationCa";
  @SerializedName(SERIALIZED_NAME_CLIENT_VALIDATION_CA)
  private List<ValidationCA> clientValidationCa = new ArrayList<>();

  /**
   * When the client presents an invalid certificate or no certificate to the load balancer, the &#x60;client_validation_mode&#x60; specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
   */
  @JsonAdapter(ClientValidationModeEnum.Adapter.class)
  public enum ClientValidationModeEnum {
    CLIENT_VALIDATION_MODE_UNSPECIFIED("CLIENT_VALIDATION_MODE_UNSPECIFIED"),
    
    ALLOW_INVALID_OR_MISSING_CLIENT_CERT("ALLOW_INVALID_OR_MISSING_CLIENT_CERT"),
    
    REJECT_INVALID("REJECT_INVALID");

    private String value;

    ClientValidationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientValidationModeEnum fromValue(String value) {
      for (ClientValidationModeEnum b : ClientValidationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientValidationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientValidationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientValidationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientValidationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientValidationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_VALIDATION_MODE = "clientValidationMode";
  @SerializedName(SERIALIZED_NAME_CLIENT_VALIDATION_MODE)
  private ClientValidationModeEnum clientValidationMode;

  public static final String SERIALIZED_NAME_CLIENT_VALIDATION_TRUST_CONFIG = "clientValidationTrustConfig";
  @SerializedName(SERIALIZED_NAME_CLIENT_VALIDATION_TRUST_CONFIG)
  private String clientValidationTrustConfig;

  public MTLSPolicy() {
  }

  public MTLSPolicy clientValidationCa(List<ValidationCA> clientValidationCa) {
    this.clientValidationCa = clientValidationCa;
    return this;
  }

  public MTLSPolicy addClientValidationCaItem(ValidationCA clientValidationCaItem) {
    if (this.clientValidationCa == null) {
      this.clientValidationCa = new ArrayList<>();
    }
    this.clientValidationCa.add(clientValidationCaItem);
    return this;
  }

  /**
   * Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
   * @return clientValidationCa
   */
  @javax.annotation.Nullable
  public List<ValidationCA> getClientValidationCa() {
    return clientValidationCa;
  }

  public void setClientValidationCa(List<ValidationCA> clientValidationCa) {
    this.clientValidationCa = clientValidationCa;
  }


  public MTLSPolicy clientValidationMode(ClientValidationModeEnum clientValidationMode) {
    this.clientValidationMode = clientValidationMode;
    return this;
  }

  /**
   * When the client presents an invalid certificate or no certificate to the load balancer, the &#x60;client_validation_mode&#x60; specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
   * @return clientValidationMode
   */
  @javax.annotation.Nullable
  public ClientValidationModeEnum getClientValidationMode() {
    return clientValidationMode;
  }

  public void setClientValidationMode(ClientValidationModeEnum clientValidationMode) {
    this.clientValidationMode = clientValidationMode;
  }


  public MTLSPolicy clientValidationTrustConfig(String clientValidationTrustConfig) {
    this.clientValidationTrustConfig = clientValidationTrustConfig;
    return this;
  }

  /**
   * Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with external HTTPS load balancers.
   * @return clientValidationTrustConfig
   */
  @javax.annotation.Nullable
  public String getClientValidationTrustConfig() {
    return clientValidationTrustConfig;
  }

  public void setClientValidationTrustConfig(String clientValidationTrustConfig) {
    this.clientValidationTrustConfig = clientValidationTrustConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MTLSPolicy mtLSPolicy = (MTLSPolicy) o;
    return Objects.equals(this.clientValidationCa, mtLSPolicy.clientValidationCa) &&
        Objects.equals(this.clientValidationMode, mtLSPolicy.clientValidationMode) &&
        Objects.equals(this.clientValidationTrustConfig, mtLSPolicy.clientValidationTrustConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientValidationCa, clientValidationMode, clientValidationTrustConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MTLSPolicy {\n");
    sb.append("    clientValidationCa: ").append(toIndentedString(clientValidationCa)).append("\n");
    sb.append("    clientValidationMode: ").append(toIndentedString(clientValidationMode)).append("\n");
    sb.append("    clientValidationTrustConfig: ").append(toIndentedString(clientValidationTrustConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientValidationCa");
    openapiFields.add("clientValidationMode");
    openapiFields.add("clientValidationTrustConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MTLSPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MTLSPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MTLSPolicy is not found in the empty JSON string", MTLSPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MTLSPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MTLSPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clientValidationCa") != null && !jsonObj.get("clientValidationCa").isJsonNull()) {
        JsonArray jsonArrayclientValidationCa = jsonObj.getAsJsonArray("clientValidationCa");
        if (jsonArrayclientValidationCa != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientValidationCa").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientValidationCa` to be an array in the JSON string but got `%s`", jsonObj.get("clientValidationCa").toString()));
          }

          // validate the optional field `clientValidationCa` (array)
          for (int i = 0; i < jsonArrayclientValidationCa.size(); i++) {
            ValidationCA.validateJsonElement(jsonArrayclientValidationCa.get(i));
          };
        }
      }
      if ((jsonObj.get("clientValidationMode") != null && !jsonObj.get("clientValidationMode").isJsonNull()) && !jsonObj.get("clientValidationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientValidationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientValidationMode").toString()));
      }
      // validate the optional field `clientValidationMode`
      if (jsonObj.get("clientValidationMode") != null && !jsonObj.get("clientValidationMode").isJsonNull()) {
        ClientValidationModeEnum.validateJsonElement(jsonObj.get("clientValidationMode"));
      }
      if ((jsonObj.get("clientValidationTrustConfig") != null && !jsonObj.get("clientValidationTrustConfig").isJsonNull()) && !jsonObj.get("clientValidationTrustConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientValidationTrustConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientValidationTrustConfig").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MTLSPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MTLSPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MTLSPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MTLSPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<MTLSPolicy>() {
           @Override
           public void write(JsonWriter out, MTLSPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MTLSPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MTLSPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MTLSPolicy
   * @throws IOException if the JSON string is invalid with respect to MTLSPolicy
   */
  public static MTLSPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MTLSPolicy.class);
  }

  /**
   * Convert an instance of MTLSPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

