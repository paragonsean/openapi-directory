/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing Association object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.058911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallEndpointAssociation {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_FIREWALL_ENDPOINT = "firewallEndpoint";
  @SerializedName(SERIALIZED_NAME_FIREWALL_ENDPOINT)
  private String firewallEndpoint;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. Current state of the association.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TLS_INSPECTION_POLICY = "tlsInspectionPolicy";
  @SerializedName(SERIALIZED_NAME_TLS_INSPECTION_POLICY)
  private String tlsInspectionPolicy;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public FirewallEndpointAssociation() {
  }

  public FirewallEndpointAssociation(
     String createTime, 
     Boolean reconciling, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.reconciling = reconciling;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public FirewallEndpointAssociation firewallEndpoint(String firewallEndpoint) {
    this.firewallEndpoint = firewallEndpoint;
    return this;
  }

  /**
   * Required. The URL of the FirewallEndpoint that is being associated.
   * @return firewallEndpoint
   */
  @javax.annotation.Nullable
  public String getFirewallEndpoint() {
    return firewallEndpoint;
  }

  public void setFirewallEndpoint(String firewallEndpoint) {
    this.firewallEndpoint = firewallEndpoint;
  }


  public FirewallEndpointAssociation labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public FirewallEndpointAssociation putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public FirewallEndpointAssociation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Identifier. name of resource
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FirewallEndpointAssociation network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Required. The URL of the network that is being associated.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  /**
   * Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. Current state of the association.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public FirewallEndpointAssociation tlsInspectionPolicy(String tlsInspectionPolicy) {
    this.tlsInspectionPolicy = tlsInspectionPolicy;
    return this;
  }

  /**
   * Optional. The URL of the TlsInspectionPolicy that is being associated.
   * @return tlsInspectionPolicy
   */
  @javax.annotation.Nullable
  public String getTlsInspectionPolicy() {
    return tlsInspectionPolicy;
  }

  public void setTlsInspectionPolicy(String tlsInspectionPolicy) {
    this.tlsInspectionPolicy = tlsInspectionPolicy;
  }


  /**
   * Output only. Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallEndpointAssociation firewallEndpointAssociation = (FirewallEndpointAssociation) o;
    return Objects.equals(this.createTime, firewallEndpointAssociation.createTime) &&
        Objects.equals(this.firewallEndpoint, firewallEndpointAssociation.firewallEndpoint) &&
        Objects.equals(this.labels, firewallEndpointAssociation.labels) &&
        Objects.equals(this.name, firewallEndpointAssociation.name) &&
        Objects.equals(this.network, firewallEndpointAssociation.network) &&
        Objects.equals(this.reconciling, firewallEndpointAssociation.reconciling) &&
        Objects.equals(this.state, firewallEndpointAssociation.state) &&
        Objects.equals(this.tlsInspectionPolicy, firewallEndpointAssociation.tlsInspectionPolicy) &&
        Objects.equals(this.updateTime, firewallEndpointAssociation.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, firewallEndpoint, labels, name, network, reconciling, state, tlsInspectionPolicy, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallEndpointAssociation {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    firewallEndpoint: ").append(toIndentedString(firewallEndpoint)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tlsInspectionPolicy: ").append(toIndentedString(tlsInspectionPolicy)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("firewallEndpoint");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("tlsInspectionPolicy");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallEndpointAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallEndpointAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallEndpointAssociation is not found in the empty JSON string", FirewallEndpointAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallEndpointAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallEndpointAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("firewallEndpoint") != null && !jsonObj.get("firewallEndpoint").isJsonNull()) && !jsonObj.get("firewallEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewallEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewallEndpoint").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("tlsInspectionPolicy") != null && !jsonObj.get("tlsInspectionPolicy").isJsonNull()) && !jsonObj.get("tlsInspectionPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlsInspectionPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tlsInspectionPolicy").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallEndpointAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallEndpointAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallEndpointAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallEndpointAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallEndpointAssociation>() {
           @Override
           public void write(JsonWriter out, FirewallEndpointAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallEndpointAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirewallEndpointAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallEndpointAssociation
   * @throws IOException if the JSON string is invalid with respect to FirewallEndpointAssociation
   */
  public static FirewallEndpointAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallEndpointAssociation.class);
  }

  /**
   * Convert an instance of FirewallEndpointAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

