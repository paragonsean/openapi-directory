/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.058911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateProviderInstance {
  public static final String SERIALIZED_NAME_PLUGIN_INSTANCE = "pluginInstance";
  @SerializedName(SERIALIZED_NAME_PLUGIN_INSTANCE)
  private String pluginInstance;

  public CertificateProviderInstance() {
  }

  public CertificateProviderInstance pluginInstance(String pluginInstance) {
    this.pluginInstance = pluginInstance;
    return this;
  }

  /**
   * Required. Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to \&quot;google_cloud_private_spiffe\&quot; to use Certificate Authority Service certificate provider instance.
   * @return pluginInstance
   */
  @javax.annotation.Nullable
  public String getPluginInstance() {
    return pluginInstance;
  }

  public void setPluginInstance(String pluginInstance) {
    this.pluginInstance = pluginInstance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateProviderInstance certificateProviderInstance = (CertificateProviderInstance) o;
    return Objects.equals(this.pluginInstance, certificateProviderInstance.pluginInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginInstance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateProviderInstance {\n");
    sb.append("    pluginInstance: ").append(toIndentedString(pluginInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pluginInstance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateProviderInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateProviderInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateProviderInstance is not found in the empty JSON string", CertificateProviderInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateProviderInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateProviderInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pluginInstance") != null && !jsonObj.get("pluginInstance").isJsonNull()) && !jsonObj.get("pluginInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginInstance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateProviderInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateProviderInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateProviderInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateProviderInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateProviderInstance>() {
           @Override
           public void write(JsonWriter out, CertificateProviderInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateProviderInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateProviderInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateProviderInstance
   * @throws IOException if the JSON string is invalid with respect to CertificateProviderInstance
   */
  public static CertificateProviderInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateProviderInstance.class);
  }

  /**
   * Convert an instance of CertificateProviderInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

