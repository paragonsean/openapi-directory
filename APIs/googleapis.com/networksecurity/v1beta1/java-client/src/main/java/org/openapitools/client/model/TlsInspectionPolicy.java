/*
 * Network Security API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The TlsInspectionPolicy resource contains references to CA pools in Certificate Authority Service and associated metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:15.058911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TlsInspectionPolicy {
  public static final String SERIALIZED_NAME_CA_POOL = "caPool";
  @SerializedName(SERIALIZED_NAME_CA_POOL)
  private String caPool;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_TLS_FEATURES = "customTlsFeatures";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TLS_FEATURES)
  private List<String> customTlsFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCLUDE_PUBLIC_CA_SET = "excludePublicCaSet";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PUBLIC_CA_SET)
  private Boolean excludePublicCaSet;

  /**
   * Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
   */
  @JsonAdapter(MinTlsVersionEnum.Adapter.class)
  public enum MinTlsVersionEnum {
    VERSION_UNSPECIFIED("TLS_VERSION_UNSPECIFIED"),
    
    _1_0("TLS_1_0"),
    
    _1_1("TLS_1_1"),
    
    _1_2("TLS_1_2"),
    
    _1_3("TLS_1_3");

    private String value;

    MinTlsVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTlsVersionEnum fromValue(String value) {
      for (MinTlsVersionEnum b : MinTlsVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTlsVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTlsVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTlsVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTlsVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinTlsVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIN_TLS_VERSION = "minTlsVersion";
  @SerializedName(SERIALIZED_NAME_MIN_TLS_VERSION)
  private MinTlsVersionEnum minTlsVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\&quot;PROFILE_COMPATIBLE\&quot;). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
   */
  @JsonAdapter(TlsFeatureProfileEnum.Adapter.class)
  public enum TlsFeatureProfileEnum {
    UNSPECIFIED("PROFILE_UNSPECIFIED"),
    
    COMPATIBLE("PROFILE_COMPATIBLE"),
    
    MODERN("PROFILE_MODERN"),
    
    RESTRICTED("PROFILE_RESTRICTED"),
    
    CUSTOM("PROFILE_CUSTOM");

    private String value;

    TlsFeatureProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TlsFeatureProfileEnum fromValue(String value) {
      for (TlsFeatureProfileEnum b : TlsFeatureProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TlsFeatureProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TlsFeatureProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TlsFeatureProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TlsFeatureProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TlsFeatureProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLS_FEATURE_PROFILE = "tlsFeatureProfile";
  @SerializedName(SERIALIZED_NAME_TLS_FEATURE_PROFILE)
  private TlsFeatureProfileEnum tlsFeatureProfile;

  public static final String SERIALIZED_NAME_TRUST_CONFIG = "trustConfig";
  @SerializedName(SERIALIZED_NAME_TRUST_CONFIG)
  private String trustConfig;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public TlsInspectionPolicy() {
  }

  public TlsInspectionPolicy(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public TlsInspectionPolicy caPool(String caPool) {
    this.caPool = caPool;
    return this;
  }

  /**
   * Required. A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form \&quot;projects/{project}/locations/{location}/caPools/{ca_pool}\&quot;.
   * @return caPool
   */
  @javax.annotation.Nullable
  public String getCaPool() {
    return caPool;
  }

  public void setCaPool(String caPool) {
    this.caPool = caPool;
  }


  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public TlsInspectionPolicy customTlsFeatures(List<String> customTlsFeatures) {
    this.customTlsFeatures = customTlsFeatures;
    return this;
  }

  public TlsInspectionPolicy addCustomTlsFeaturesItem(String customTlsFeaturesItem) {
    if (this.customTlsFeatures == null) {
      this.customTlsFeatures = new ArrayList<>();
    }
    this.customTlsFeatures.add(customTlsFeaturesItem);
    return this;
  }

  /**
   * Optional. List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
   * @return customTlsFeatures
   */
  @javax.annotation.Nullable
  public List<String> getCustomTlsFeatures() {
    return customTlsFeatures;
  }

  public void setCustomTlsFeatures(List<String> customTlsFeatures) {
    this.customTlsFeatures = customTlsFeatures;
  }


  public TlsInspectionPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Free-text description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TlsInspectionPolicy excludePublicCaSet(Boolean excludePublicCaSet) {
    this.excludePublicCaSet = excludePublicCaSet;
    return this;
  }

  /**
   * Optional. If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trust_config. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trust_config will be accepted. This defaults to FALSE (use public CAs in addition to trust_config) for backwards compatibility, but trusting public root CAs is *not recommended* unless the traffic in question is outbound to public web servers. When possible, prefer setting this to \&quot;false\&quot; and explicitly specifying trusted CAs and certificates in a TrustConfig. Note that Secure Web Proxy does not yet honor this field.
   * @return excludePublicCaSet
   */
  @javax.annotation.Nullable
  public Boolean getExcludePublicCaSet() {
    return excludePublicCaSet;
  }

  public void setExcludePublicCaSet(Boolean excludePublicCaSet) {
    this.excludePublicCaSet = excludePublicCaSet;
  }


  public TlsInspectionPolicy minTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
    return this;
  }

  /**
   * Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
   * @return minTlsVersion
   */
  @javax.annotation.Nullable
  public MinTlsVersionEnum getMinTlsVersion() {
    return minTlsVersion;
  }

  public void setMinTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }


  public TlsInspectionPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TlsInspectionPolicy tlsFeatureProfile(TlsFeatureProfileEnum tlsFeatureProfile) {
    this.tlsFeatureProfile = tlsFeatureProfile;
    return this;
  }

  /**
   * Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\&quot;PROFILE_COMPATIBLE\&quot;). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
   * @return tlsFeatureProfile
   */
  @javax.annotation.Nullable
  public TlsFeatureProfileEnum getTlsFeatureProfile() {
    return tlsFeatureProfile;
  }

  public void setTlsFeatureProfile(TlsFeatureProfileEnum tlsFeatureProfile) {
    this.tlsFeatureProfile = tlsFeatureProfile;
  }


  public TlsInspectionPolicy trustConfig(String trustConfig) {
    this.trustConfig = trustConfig;
    return this;
  }

  /**
   * Optional. A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \&quot;projects/{project}/locations/{location}/trustConfigs/{trust_config}\&quot;. This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Note that Secure Web Proxy does not yet honor this field.
   * @return trustConfig
   */
  @javax.annotation.Nullable
  public String getTrustConfig() {
    return trustConfig;
  }

  public void setTrustConfig(String trustConfig) {
    this.trustConfig = trustConfig;
  }


  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsInspectionPolicy tlsInspectionPolicy = (TlsInspectionPolicy) o;
    return Objects.equals(this.caPool, tlsInspectionPolicy.caPool) &&
        Objects.equals(this.createTime, tlsInspectionPolicy.createTime) &&
        Objects.equals(this.customTlsFeatures, tlsInspectionPolicy.customTlsFeatures) &&
        Objects.equals(this.description, tlsInspectionPolicy.description) &&
        Objects.equals(this.excludePublicCaSet, tlsInspectionPolicy.excludePublicCaSet) &&
        Objects.equals(this.minTlsVersion, tlsInspectionPolicy.minTlsVersion) &&
        Objects.equals(this.name, tlsInspectionPolicy.name) &&
        Objects.equals(this.tlsFeatureProfile, tlsInspectionPolicy.tlsFeatureProfile) &&
        Objects.equals(this.trustConfig, tlsInspectionPolicy.trustConfig) &&
        Objects.equals(this.updateTime, tlsInspectionPolicy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caPool, createTime, customTlsFeatures, description, excludePublicCaSet, minTlsVersion, name, tlsFeatureProfile, trustConfig, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsInspectionPolicy {\n");
    sb.append("    caPool: ").append(toIndentedString(caPool)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customTlsFeatures: ").append(toIndentedString(customTlsFeatures)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    excludePublicCaSet: ").append(toIndentedString(excludePublicCaSet)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tlsFeatureProfile: ").append(toIndentedString(tlsFeatureProfile)).append("\n");
    sb.append("    trustConfig: ").append(toIndentedString(trustConfig)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caPool");
    openapiFields.add("createTime");
    openapiFields.add("customTlsFeatures");
    openapiFields.add("description");
    openapiFields.add("excludePublicCaSet");
    openapiFields.add("minTlsVersion");
    openapiFields.add("name");
    openapiFields.add("tlsFeatureProfile");
    openapiFields.add("trustConfig");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TlsInspectionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsInspectionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsInspectionPolicy is not found in the empty JSON string", TlsInspectionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsInspectionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsInspectionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caPool") != null && !jsonObj.get("caPool").isJsonNull()) && !jsonObj.get("caPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caPool").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customTlsFeatures") != null && !jsonObj.get("customTlsFeatures").isJsonNull() && !jsonObj.get("customTlsFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customTlsFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("customTlsFeatures").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("minTlsVersion") != null && !jsonObj.get("minTlsVersion").isJsonNull()) && !jsonObj.get("minTlsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTlsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTlsVersion").toString()));
      }
      // validate the optional field `minTlsVersion`
      if (jsonObj.get("minTlsVersion") != null && !jsonObj.get("minTlsVersion").isJsonNull()) {
        MinTlsVersionEnum.validateJsonElement(jsonObj.get("minTlsVersion"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tlsFeatureProfile") != null && !jsonObj.get("tlsFeatureProfile").isJsonNull()) && !jsonObj.get("tlsFeatureProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlsFeatureProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tlsFeatureProfile").toString()));
      }
      // validate the optional field `tlsFeatureProfile`
      if (jsonObj.get("tlsFeatureProfile") != null && !jsonObj.get("tlsFeatureProfile").isJsonNull()) {
        TlsFeatureProfileEnum.validateJsonElement(jsonObj.get("tlsFeatureProfile"));
      }
      if ((jsonObj.get("trustConfig") != null && !jsonObj.get("trustConfig").isJsonNull()) && !jsonObj.get("trustConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustConfig").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsInspectionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsInspectionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsInspectionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsInspectionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsInspectionPolicy>() {
           @Override
           public void write(JsonWriter out, TlsInspectionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsInspectionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TlsInspectionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TlsInspectionPolicy
   * @throws IOException if the JSON string is invalid with respect to TlsInspectionPolicy
   */
  public static TlsInspectionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsInspectionPolicy.class);
  }

  /**
   * Convert an instance of TlsInspectionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

