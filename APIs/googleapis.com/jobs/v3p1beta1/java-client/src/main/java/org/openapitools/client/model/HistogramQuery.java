/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input Only. The histogram request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:17.164896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramQuery {
  public static final String SERIALIZED_NAME_HISTOGRAM_QUERY = "histogramQuery";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_QUERY)
  private String histogramQuery;

  public HistogramQuery() {
  }

  public HistogramQuery histogramQuery(String histogramQuery) {
    this.histogramQuery = histogramQuery;
    return this;
  }

  /**
   * An expression specifies a histogram request against matching resources (for example, jobs) for searches. Expression syntax is a aggregation function call with histogram facets and other options. Available aggregation function calls are: * &#x60;count(string_histogram_facet)&#x60;: Count the number of matching entity, for each distinct attribute value. * &#x60;count(numeric_histogram_facet, list of buckets)&#x60;: Count the number of matching entity within each bucket. A maximum of 200 histogram buckets are supported. Data types: * Histogram facet: facet names with format a-zA-Z+. * String: string like \&quot;any string with backslash escape for quote(\\\&quot;).\&quot; * Number: whole number and floating point number like 10, -1 and -0.01. * List: list of elements with comma(,) separator surrounded by square brackets. For example, [1, 2, 3] and [\&quot;one\&quot;, \&quot;two\&quot;, \&quot;three\&quot;]. Built-in constants: * MIN (minimum number similar to java Double.MIN_VALUE) * MAX (maximum number similar to java Double.MAX_VALUE) Built-in functions: * bucket(start, end[, label]): bucket built-in function creates a bucket with range of start, end). Note that the end is exclusive. For example, bucket(1, MAX, \&quot;positive number\&quot;) or bucket(1, 10). Job histogram facets: * company_id: histogram by [Job.distributor_company_id. * company_display_name: histogram by Job.company_display_name. * employment_type: histogram by Job.employment_types. For example, \&quot;FULL_TIME\&quot;, \&quot;PART_TIME\&quot;. * company_size (DEPRECATED): histogram by CompanySize, for example, \&quot;SMALL\&quot;, \&quot;MEDIUM\&quot;, \&quot;BIG\&quot;. * publish_time_in_day: histogram by the Job.publish_time in days. Must specify list of numeric buckets in spec. * publish_time_in_month: histogram by the Job.publish_time in months. Must specify list of numeric buckets in spec. * publish_time_in_year: histogram by the Job.publish_time in years. Must specify list of numeric buckets in spec. * degree_type: histogram by the Job.degree_type. For example, \&quot;Bachelors\&quot;, \&quot;Masters\&quot;. * job_level: histogram by the Job.job_level. For example, \&quot;Entry Level\&quot;. * country: histogram by the country code of jobs. For example, \&quot;US\&quot;, \&quot;FR\&quot;. * admin1: histogram by the admin1 code of jobs, which is a global placeholder referring to the state, province, or the particular term a country uses to define the geographic structure below the country level. For example, \&quot;CA\&quot;, \&quot;IL\&quot;. * city: histogram by a combination of the \&quot;city name, admin1 code\&quot;. For example, \&quot;Mountain View, CA\&quot;, \&quot;New York, NY\&quot;. * admin1_country: histogram by a combination of the \&quot;admin1 code, country\&quot;. For example, \&quot;CA, US\&quot;, \&quot;IL, US\&quot;. * city_coordinate: histogram by the city center&#39;s GPS coordinates (latitude and longitude). For example, 37.4038522,-122.0987765. Since the coordinates of a city center can change, customers may need to refresh them periodically. * locale: histogram by the Job.language_code. For example, \&quot;en-US\&quot;, \&quot;fr-FR\&quot;. * language: histogram by the language subtag of the Job.language_code. For example, \&quot;en\&quot;, \&quot;fr\&quot;. * category: histogram by the JobCategory. For example, \&quot;COMPUTER_AND_IT\&quot;, \&quot;HEALTHCARE\&quot;. * base_compensation_unit: histogram by the CompensationUnit of base salary. For example, \&quot;WEEKLY\&quot;, \&quot;MONTHLY\&quot;. * base_compensation: histogram by the base salary. Must specify list of numeric buckets to group results by. * annualized_base_compensation: histogram by the base annualized salary. Must specify list of numeric buckets to group results by. * annualized_total_compensation: histogram by the total annualized salary. Must specify list of numeric buckets to group results by. * string_custom_attribute: histogram by string Job.custom_attributes. Values can be accessed via square bracket notations like string_custom_attribute[\&quot;key1\&quot;]. * numeric_custom_attribute: histogram by numeric Job.custom_attributes. Values can be accessed via square bracket notations like numeric_custom_attribute[\&quot;key1\&quot;]. Must specify list of numeric buckets to group results by. Example expressions: * count(admin1) * count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000), bucket(100000, MAX)]) * count(string_custom_attribute[\&quot;some-string-custom-attribute\&quot;]) * count(numeric_custom_attribute[\&quot;some-numeric-custom-attribute\&quot;], [bucket(MIN, 0, \&quot;negative\&quot;), bucket(0, MAX, \&quot;non-negative\&quot;)])
   * @return histogramQuery
   */
  @javax.annotation.Nullable
  public String getHistogramQuery() {
    return histogramQuery;
  }

  public void setHistogramQuery(String histogramQuery) {
    this.histogramQuery = histogramQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramQuery histogramQuery = (HistogramQuery) o;
    return Objects.equals(this.histogramQuery, histogramQuery.histogramQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(histogramQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramQuery {\n");
    sb.append("    histogramQuery: ").append(toIndentedString(histogramQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("histogramQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramQuery is not found in the empty JSON string", HistogramQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("histogramQuery") != null && !jsonObj.get("histogramQuery").isJsonNull()) && !jsonObj.get("histogramQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogramQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("histogramQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramQuery>() {
           @Override
           public void write(JsonWriter out, HistogramQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramQuery
   * @throws IOException if the JSON string is invalid with respect to HistogramQuery
   */
  public static HistogramQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramQuery.class);
  }

  /**
   * Convert an instance of HistogramQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

