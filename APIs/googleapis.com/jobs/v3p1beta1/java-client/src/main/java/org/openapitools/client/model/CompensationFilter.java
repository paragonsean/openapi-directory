/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompensationRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input only. Filter on job compensation type and amount.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:17.164896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompensationFilter {
  public static final String SERIALIZED_NAME_INCLUDE_JOBS_WITH_UNSPECIFIED_COMPENSATION_RANGE = "includeJobsWithUnspecifiedCompensationRange";
  @SerializedName(SERIALIZED_NAME_INCLUDE_JOBS_WITH_UNSPECIFIED_COMPENSATION_RANGE)
  private Boolean includeJobsWithUnspecifiedCompensationRange;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private CompensationRange range;

  /**
   * Required. Type of filter.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILTER_TYPE_UNSPECIFIED("FILTER_TYPE_UNSPECIFIED"),
    
    UNIT_ONLY("UNIT_ONLY"),
    
    UNIT_AND_AMOUNT("UNIT_AND_AMOUNT"),
    
    ANNUALIZED_BASE_AMOUNT("ANNUALIZED_BASE_AMOUNT"),
    
    ANNUALIZED_TOTAL_AMOUNT("ANNUALIZED_TOTAL_AMOUNT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets units
   */
  @JsonAdapter(UnitsEnum.Adapter.class)
  public enum UnitsEnum {
    COMPENSATION_UNIT_UNSPECIFIED("COMPENSATION_UNIT_UNSPECIFIED"),
    
    HOURLY("HOURLY"),
    
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    
    YEARLY("YEARLY"),
    
    ONE_TIME("ONE_TIME"),
    
    OTHER_COMPENSATION_UNIT("OTHER_COMPENSATION_UNIT");

    private String value;

    UnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitsEnum fromValue(String value) {
      for (UnitsEnum b : UnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<UnitsEnum> units = new ArrayList<>();

  public CompensationFilter() {
  }

  public CompensationFilter includeJobsWithUnspecifiedCompensationRange(Boolean includeJobsWithUnspecifiedCompensationRange) {
    this.includeJobsWithUnspecifiedCompensationRange = includeJobsWithUnspecifiedCompensationRange;
    return this;
  }

  /**
   * Optional. If set to true, jobs with unspecified compensation range fields are included.
   * @return includeJobsWithUnspecifiedCompensationRange
   */
  @javax.annotation.Nullable
  public Boolean getIncludeJobsWithUnspecifiedCompensationRange() {
    return includeJobsWithUnspecifiedCompensationRange;
  }

  public void setIncludeJobsWithUnspecifiedCompensationRange(Boolean includeJobsWithUnspecifiedCompensationRange) {
    this.includeJobsWithUnspecifiedCompensationRange = includeJobsWithUnspecifiedCompensationRange;
  }


  public CompensationFilter range(CompensationRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public CompensationRange getRange() {
    return range;
  }

  public void setRange(CompensationRange range) {
    this.range = range;
  }


  public CompensationFilter type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Type of filter.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CompensationFilter units(List<UnitsEnum> units) {
    this.units = units;
    return this;
  }

  public CompensationFilter addUnitsItem(UnitsEnum unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

  /**
   * Required. Specify desired &#x60;base compensation entry&#39;s&#x60; CompensationInfo.CompensationUnit.
   * @return units
   */
  @javax.annotation.Nullable
  public List<UnitsEnum> getUnits() {
    return units;
  }

  public void setUnits(List<UnitsEnum> units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompensationFilter compensationFilter = (CompensationFilter) o;
    return Objects.equals(this.includeJobsWithUnspecifiedCompensationRange, compensationFilter.includeJobsWithUnspecifiedCompensationRange) &&
        Objects.equals(this.range, compensationFilter.range) &&
        Objects.equals(this.type, compensationFilter.type) &&
        Objects.equals(this.units, compensationFilter.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeJobsWithUnspecifiedCompensationRange, range, type, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompensationFilter {\n");
    sb.append("    includeJobsWithUnspecifiedCompensationRange: ").append(toIndentedString(includeJobsWithUnspecifiedCompensationRange)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeJobsWithUnspecifiedCompensationRange");
    openapiFields.add("range");
    openapiFields.add("type");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompensationFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompensationFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompensationFilter is not found in the empty JSON string", CompensationFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompensationFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompensationFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        CompensationRange.validateJsonElement(jsonObj.get("range"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull() && !jsonObj.get("units").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompensationFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompensationFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompensationFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompensationFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<CompensationFilter>() {
           @Override
           public void write(JsonWriter out, CompensationFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompensationFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompensationFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompensationFilter
   * @throws IOException if the JSON string is invalid with respect to CompensationFilter
   */
  public static CompensationFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompensationFilter.class);
  }

  /**
   * Convert an instance of CompensationFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

