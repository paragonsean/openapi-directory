/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.CompensationInfo;
import org.openapitools.client.model.CustomAttribute;
import org.openapitools.client.model.JobDerivedInfo;
import org.openapitools.client.model.ProcessingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Job resource represents a job posting (also referred to as a \&quot;job listing\&quot; or \&quot;job requisition\&quot;). A job belongs to a Company, which is the hiring entity responsible for the job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:17.164896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<String> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLICATION_INFO = "applicationInfo";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INFO)
  private ApplicationInfo applicationInfo;

  public static final String SERIALIZED_NAME_COMPANY_DISPLAY_NAME = "companyDisplayName";
  @SerializedName(SERIALIZED_NAME_COMPANY_DISPLAY_NAME)
  private String companyDisplayName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPENSATION_INFO = "compensationInfo";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_INFO)
  private CompensationInfo compensationInfo;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private Map<String, CustomAttribute> customAttributes = new HashMap<>();

  /**
   * Gets or Sets degreeTypes
   */
  @JsonAdapter(DegreeTypesEnum.Adapter.class)
  public enum DegreeTypesEnum {
    DEGREE_TYPE_UNSPECIFIED("DEGREE_TYPE_UNSPECIFIED"),
    
    PRIMARY_EDUCATION("PRIMARY_EDUCATION"),
    
    LOWER_SECONDARY_EDUCATION("LOWER_SECONDARY_EDUCATION"),
    
    UPPER_SECONDARY_EDUCATION("UPPER_SECONDARY_EDUCATION"),
    
    ADULT_REMEDIAL_EDUCATION("ADULT_REMEDIAL_EDUCATION"),
    
    ASSOCIATES_OR_EQUIVALENT("ASSOCIATES_OR_EQUIVALENT"),
    
    BACHELORS_OR_EQUIVALENT("BACHELORS_OR_EQUIVALENT"),
    
    MASTERS_OR_EQUIVALENT("MASTERS_OR_EQUIVALENT"),
    
    DOCTORAL_OR_EQUIVALENT("DOCTORAL_OR_EQUIVALENT");

    private String value;

    DegreeTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DegreeTypesEnum fromValue(String value) {
      for (DegreeTypesEnum b : DegreeTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DegreeTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DegreeTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DegreeTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DegreeTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DegreeTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEGREE_TYPES = "degreeTypes";
  @SerializedName(SERIALIZED_NAME_DEGREE_TYPES)
  private List<DegreeTypesEnum> degreeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DERIVED_INFO = "derivedInfo";
  @SerializedName(SERIALIZED_NAME_DERIVED_INFO)
  private JobDerivedInfo derivedInfo;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets employmentTypes
   */
  @JsonAdapter(EmploymentTypesEnum.Adapter.class)
  public enum EmploymentTypesEnum {
    EMPLOYMENT_TYPE_UNSPECIFIED("EMPLOYMENT_TYPE_UNSPECIFIED"),
    
    FULL_TIME("FULL_TIME"),
    
    PART_TIME("PART_TIME"),
    
    CONTRACTOR("CONTRACTOR"),
    
    CONTRACT_TO_HIRE("CONTRACT_TO_HIRE"),
    
    TEMPORARY("TEMPORARY"),
    
    INTERN("INTERN"),
    
    VOLUNTEER("VOLUNTEER"),
    
    PER_DIEM("PER_DIEM"),
    
    FLY_IN_FLY_OUT("FLY_IN_FLY_OUT"),
    
    OTHER_EMPLOYMENT_TYPE("OTHER_EMPLOYMENT_TYPE");

    private String value;

    EmploymentTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentTypesEnum fromValue(String value) {
      for (EmploymentTypesEnum b : EmploymentTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmploymentTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPES = "employmentTypes";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPES)
  private List<EmploymentTypesEnum> employmentTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCENTIVES = "incentives";
  @SerializedName(SERIALIZED_NAME_INCENTIVES)
  private String incentives;

  /**
   * Gets or Sets jobBenefits
   */
  @JsonAdapter(JobBenefitsEnum.Adapter.class)
  public enum JobBenefitsEnum {
    JOB_BENEFIT_UNSPECIFIED("JOB_BENEFIT_UNSPECIFIED"),
    
    CHILD_CARE("CHILD_CARE"),
    
    DENTAL("DENTAL"),
    
    DOMESTIC_PARTNER("DOMESTIC_PARTNER"),
    
    FLEXIBLE_HOURS("FLEXIBLE_HOURS"),
    
    MEDICAL("MEDICAL"),
    
    LIFE_INSURANCE("LIFE_INSURANCE"),
    
    PARENTAL_LEAVE("PARENTAL_LEAVE"),
    
    RETIREMENT_PLAN("RETIREMENT_PLAN"),
    
    SICK_DAYS("SICK_DAYS"),
    
    VACATION("VACATION"),
    
    VISION("VISION");

    private String value;

    JobBenefitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobBenefitsEnum fromValue(String value) {
      for (JobBenefitsEnum b : JobBenefitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobBenefitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobBenefitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobBenefitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobBenefitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobBenefitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_BENEFITS = "jobBenefits";
  @SerializedName(SERIALIZED_NAME_JOB_BENEFITS)
  private List<JobBenefitsEnum> jobBenefits = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_END_TIME = "jobEndTime";
  @SerializedName(SERIALIZED_NAME_JOB_END_TIME)
  private String jobEndTime;

  /**
   * Optional. The experience level associated with the job, such as \&quot;Entry Level\&quot;.
   */
  @JsonAdapter(JobLevelEnum.Adapter.class)
  public enum JobLevelEnum {
    JOB_LEVEL_UNSPECIFIED("JOB_LEVEL_UNSPECIFIED"),
    
    ENTRY_LEVEL("ENTRY_LEVEL"),
    
    EXPERIENCED("EXPERIENCED"),
    
    MANAGER("MANAGER"),
    
    DIRECTOR("DIRECTOR"),
    
    EXECUTIVE("EXECUTIVE");

    private String value;

    JobLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobLevelEnum fromValue(String value) {
      for (JobLevelEnum b : JobLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_LEVEL = "jobLevel";
  @SerializedName(SERIALIZED_NAME_JOB_LEVEL)
  private JobLevelEnum jobLevel;

  public static final String SERIALIZED_NAME_JOB_START_TIME = "jobStartTime";
  @SerializedName(SERIALIZED_NAME_JOB_START_TIME)
  private String jobStartTime;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSTING_CREATE_TIME = "postingCreateTime";
  @SerializedName(SERIALIZED_NAME_POSTING_CREATE_TIME)
  private String postingCreateTime;

  public static final String SERIALIZED_NAME_POSTING_EXPIRE_TIME = "postingExpireTime";
  @SerializedName(SERIALIZED_NAME_POSTING_EXPIRE_TIME)
  private String postingExpireTime;

  public static final String SERIALIZED_NAME_POSTING_PUBLISH_TIME = "postingPublishTime";
  @SerializedName(SERIALIZED_NAME_POSTING_PUBLISH_TIME)
  private String postingPublishTime;

  /**
   * Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
   */
  @JsonAdapter(PostingRegionEnum.Adapter.class)
  public enum PostingRegionEnum {
    POSTING_REGION_UNSPECIFIED("POSTING_REGION_UNSPECIFIED"),
    
    ADMINISTRATIVE_AREA("ADMINISTRATIVE_AREA"),
    
    NATION("NATION"),
    
    TELECOMMUTE("TELECOMMUTE");

    private String value;

    PostingRegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PostingRegionEnum fromValue(String value) {
      for (PostingRegionEnum b : PostingRegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PostingRegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PostingRegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PostingRegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PostingRegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PostingRegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSTING_REGION = "postingRegion";
  @SerializedName(SERIALIZED_NAME_POSTING_REGION)
  private PostingRegionEnum postingRegion;

  public static final String SERIALIZED_NAME_POSTING_UPDATE_TIME = "postingUpdateTime";
  @SerializedName(SERIALIZED_NAME_POSTING_UPDATE_TIME)
  private String postingUpdateTime;

  public static final String SERIALIZED_NAME_PROCESSING_OPTIONS = "processingOptions";
  @SerializedName(SERIALIZED_NAME_PROCESSING_OPTIONS)
  private ProcessingOptions processingOptions;

  public static final String SERIALIZED_NAME_PROMOTION_VALUE = "promotionValue";
  @SerializedName(SERIALIZED_NAME_PROMOTION_VALUE)
  private Integer promotionValue;

  public static final String SERIALIZED_NAME_QUALIFICATIONS = "qualifications";
  @SerializedName(SERIALIZED_NAME_QUALIFICATIONS)
  private String qualifications;

  public static final String SERIALIZED_NAME_REQUISITION_ID = "requisitionId";
  @SerializedName(SERIALIZED_NAME_REQUISITION_ID)
  private String requisitionId;

  public static final String SERIALIZED_NAME_RESPONSIBILITIES = "responsibilities";
  @SerializedName(SERIALIZED_NAME_RESPONSIBILITIES)
  private String responsibilities;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    VISIBILITY_UNSPECIFIED("VISIBILITY_UNSPECIFIED"),
    
    ACCOUNT_ONLY("ACCOUNT_ONLY"),
    
    SHARED_WITH_GOOGLE("SHARED_WITH_GOOGLE"),
    
    SHARED_WITH_PUBLIC("SHARED_WITH_PUBLIC");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public Job() {
  }

  public Job addresses(List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Job addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Optional but strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. &#39;ReqA&#39; becomes &#39;ReqA-1&#39;, &#39;ReqA-2&#39;, etc.) as multiple jobs with the same company_name, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \&quot;1600 Amphitheatre Parkway, Mountain View, CA, USA\&quot; and \&quot;London, UK\&quot; may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<String> addresses) {
    this.addresses = addresses;
  }


  public Job applicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
    return this;
  }

  /**
   * Get applicationInfo
   * @return applicationInfo
   */
  @javax.annotation.Nullable
  public ApplicationInfo getApplicationInfo() {
    return applicationInfo;
  }

  public void setApplicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
  }


  public Job companyDisplayName(String companyDisplayName) {
    this.companyDisplayName = companyDisplayName;
    return this;
  }

  /**
   * Output only. Display name of the company listing the job.
   * @return companyDisplayName
   */
  @javax.annotation.Nullable
  public String getCompanyDisplayName() {
    return companyDisplayName;
  }

  public void setCompanyDisplayName(String companyDisplayName) {
    this.companyDisplayName = companyDisplayName;
  }


  public Job companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Required. The resource name of the company listing the job, such as \&quot;projects/api-test-project/companies/foo\&quot;.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Job compensationInfo(CompensationInfo compensationInfo) {
    this.compensationInfo = compensationInfo;
    return this;
  }

  /**
   * Get compensationInfo
   * @return compensationInfo
   */
  @javax.annotation.Nullable
  public CompensationInfo getCompensationInfo() {
    return compensationInfo;
  }

  public void setCompensationInfo(CompensationInfo compensationInfo) {
    this.compensationInfo = compensationInfo;
  }


  public Job customAttributes(Map<String, CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public Job putCustomAttributesItem(String key, CustomAttribute customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new HashMap<>();
    }
    this.customAttributes.put(key, customAttributesItem);
    return this;
  }

  /**
   * Optional. A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable &#x60;string_values&#x60;, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable &#x60;string_values&#x60;, the maximum total size of &#x60;string_values&#x60; across all keys is 50KB.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public Map<String, CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(Map<String, CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public Job degreeTypes(List<DegreeTypesEnum> degreeTypes) {
    this.degreeTypes = degreeTypes;
    return this;
  }

  public Job addDegreeTypesItem(DegreeTypesEnum degreeTypesItem) {
    if (this.degreeTypes == null) {
      this.degreeTypes = new ArrayList<>();
    }
    this.degreeTypes.add(degreeTypesItem);
    return this;
  }

  /**
   * Optional. The desired education degrees for the job, such as Bachelors, Masters.
   * @return degreeTypes
   */
  @javax.annotation.Nullable
  public List<DegreeTypesEnum> getDegreeTypes() {
    return degreeTypes;
  }

  public void setDegreeTypes(List<DegreeTypesEnum> degreeTypes) {
    this.degreeTypes = degreeTypes;
  }


  public Job department(String department) {
    this.department = department;
    return this;
  }

  /**
   * Optional. The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public Job derivedInfo(JobDerivedInfo derivedInfo) {
    this.derivedInfo = derivedInfo;
    return this;
  }

  /**
   * Get derivedInfo
   * @return derivedInfo
   */
  @javax.annotation.Nullable
  public JobDerivedInfo getDerivedInfo() {
    return derivedInfo;
  }

  public void setDerivedInfo(JobDerivedInfo derivedInfo) {
    this.derivedInfo = derivedInfo;
  }


  public Job description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Job employmentTypes(List<EmploymentTypesEnum> employmentTypes) {
    this.employmentTypes = employmentTypes;
    return this;
  }

  public Job addEmploymentTypesItem(EmploymentTypesEnum employmentTypesItem) {
    if (this.employmentTypes == null) {
      this.employmentTypes = new ArrayList<>();
    }
    this.employmentTypes.add(employmentTypesItem);
    return this;
  }

  /**
   * Optional. The employment type(s) of a job, for example, full time or part time.
   * @return employmentTypes
   */
  @javax.annotation.Nullable
  public List<EmploymentTypesEnum> getEmploymentTypes() {
    return employmentTypes;
  }

  public void setEmploymentTypes(List<EmploymentTypesEnum> employmentTypes) {
    this.employmentTypes = employmentTypes;
  }


  public Job incentives(String incentives) {
    this.incentives = incentives;
    return this;
  }

  /**
   * Optional. A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
   * @return incentives
   */
  @javax.annotation.Nullable
  public String getIncentives() {
    return incentives;
  }

  public void setIncentives(String incentives) {
    this.incentives = incentives;
  }


  public Job jobBenefits(List<JobBenefitsEnum> jobBenefits) {
    this.jobBenefits = jobBenefits;
    return this;
  }

  public Job addJobBenefitsItem(JobBenefitsEnum jobBenefitsItem) {
    if (this.jobBenefits == null) {
      this.jobBenefits = new ArrayList<>();
    }
    this.jobBenefits.add(jobBenefitsItem);
    return this;
  }

  /**
   * Optional. The benefits included with the job.
   * @return jobBenefits
   */
  @javax.annotation.Nullable
  public List<JobBenefitsEnum> getJobBenefits() {
    return jobBenefits;
  }

  public void setJobBenefits(List<JobBenefitsEnum> jobBenefits) {
    this.jobBenefits = jobBenefits;
  }


  public Job jobEndTime(String jobEndTime) {
    this.jobEndTime = jobEndTime;
    return this;
  }

  /**
   * Optional. The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
   * @return jobEndTime
   */
  @javax.annotation.Nullable
  public String getJobEndTime() {
    return jobEndTime;
  }

  public void setJobEndTime(String jobEndTime) {
    this.jobEndTime = jobEndTime;
  }


  public Job jobLevel(JobLevelEnum jobLevel) {
    this.jobLevel = jobLevel;
    return this;
  }

  /**
   * Optional. The experience level associated with the job, such as \&quot;Entry Level\&quot;.
   * @return jobLevel
   */
  @javax.annotation.Nullable
  public JobLevelEnum getJobLevel() {
    return jobLevel;
  }

  public void setJobLevel(JobLevelEnum jobLevel) {
    this.jobLevel = jobLevel;
  }


  public Job jobStartTime(String jobStartTime) {
    this.jobStartTime = jobStartTime;
    return this;
  }

  /**
   * Optional. The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
   * @return jobStartTime
   */
  @javax.annotation.Nullable
  public String getJobStartTime() {
    return jobStartTime;
  }

  public void setJobStartTime(String jobStartTime) {
    this.jobStartTime = jobStartTime;
  }


  public Job languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Optional. The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class&#x3D;\&quot;external\&quot; target&#x3D;\&quot;_blank\&quot; }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to &#39;en_US&#39;.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public Job name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \&quot;projects/{project_id}/jobs/{job_id}\&quot;, for example, \&quot;projects/api-test-project/jobs/1234\&quot;. Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Job postingCreateTime(String postingCreateTime) {
    this.postingCreateTime = postingCreateTime;
    return this;
  }

  /**
   * Output only. The timestamp when this job posting was created.
   * @return postingCreateTime
   */
  @javax.annotation.Nullable
  public String getPostingCreateTime() {
    return postingCreateTime;
  }

  public void setPostingCreateTime(String postingCreateTime) {
    this.postingCreateTime = postingCreateTime;
  }


  public Job postingExpireTime(String postingExpireTime) {
    this.postingExpireTime = postingExpireTime;
    return this;
  }

  /**
   * Optional but strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can&#39;t be deleted or listed by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the UpdateJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company_name, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with earlier expire time are cleaned first. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. Timestamp before the instant request is made is considered valid, the job will be treated as expired immediately. If this value is not provided at the time of job creation or is invalid, the job posting expires after 30 days from the job&#39;s creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value is not provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job&#39;s last update time. Otherwise the expiration date isn&#39;t updated.
   * @return postingExpireTime
   */
  @javax.annotation.Nullable
  public String getPostingExpireTime() {
    return postingExpireTime;
  }

  public void setPostingExpireTime(String postingExpireTime) {
    this.postingExpireTime = postingExpireTime;
  }


  public Job postingPublishTime(String postingPublishTime) {
    this.postingPublishTime = postingPublishTime;
    return this;
  }

  /**
   * Optional. The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
   * @return postingPublishTime
   */
  @javax.annotation.Nullable
  public String getPostingPublishTime() {
    return postingPublishTime;
  }

  public void setPostingPublishTime(String postingPublishTime) {
    this.postingPublishTime = postingPublishTime;
  }


  public Job postingRegion(PostingRegionEnum postingRegion) {
    this.postingRegion = postingRegion;
    return this;
  }

  /**
   * Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn&#39;t specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
   * @return postingRegion
   */
  @javax.annotation.Nullable
  public PostingRegionEnum getPostingRegion() {
    return postingRegion;
  }

  public void setPostingRegion(PostingRegionEnum postingRegion) {
    this.postingRegion = postingRegion;
  }


  public Job postingUpdateTime(String postingUpdateTime) {
    this.postingUpdateTime = postingUpdateTime;
    return this;
  }

  /**
   * Output only. The timestamp when this job posting was last updated.
   * @return postingUpdateTime
   */
  @javax.annotation.Nullable
  public String getPostingUpdateTime() {
    return postingUpdateTime;
  }

  public void setPostingUpdateTime(String postingUpdateTime) {
    this.postingUpdateTime = postingUpdateTime;
  }


  public Job processingOptions(ProcessingOptions processingOptions) {
    this.processingOptions = processingOptions;
    return this;
  }

  /**
   * Get processingOptions
   * @return processingOptions
   */
  @javax.annotation.Nullable
  public ProcessingOptions getProcessingOptions() {
    return processingOptions;
  }

  public void setProcessingOptions(ProcessingOptions processingOptions) {
    this.processingOptions = processingOptions;
  }


  public Job promotionValue(Integer promotionValue) {
    this.promotionValue = promotionValue;
    return this;
  }

  /**
   * Optional. A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue &gt;0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
   * @return promotionValue
   */
  @javax.annotation.Nullable
  public Integer getPromotionValue() {
    return promotionValue;
  }

  public void setPromotionValue(Integer promotionValue) {
    this.promotionValue = promotionValue;
  }


  public Job qualifications(String qualifications) {
    this.qualifications = qualifications;
    return this;
  }

  /**
   * Optional. A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
   * @return qualifications
   */
  @javax.annotation.Nullable
  public String getQualifications() {
    return qualifications;
  }

  public void setQualifications(String qualifications) {
    this.qualifications = qualifications;
  }


  public Job requisitionId(String requisitionId) {
    this.requisitionId = requisitionId;
    return this;
  }

  /**
   * Required. The requisition ID, also referred to as the posting ID, assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job is not allowed to be created if there is another job with the same [company_name], language_code and requisition_id. The maximum number of allowed characters is 255.
   * @return requisitionId
   */
  @javax.annotation.Nullable
  public String getRequisitionId() {
    return requisitionId;
  }

  public void setRequisitionId(String requisitionId) {
    this.requisitionId = requisitionId;
  }


  public Job responsibilities(String responsibilities) {
    this.responsibilities = responsibilities;
    return this;
  }

  /**
   * Optional. A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
   * @return responsibilities
   */
  @javax.annotation.Nullable
  public String getResponsibilities() {
    return responsibilities;
  }

  public void setResponsibilities(String responsibilities) {
    this.responsibilities = responsibilities;
  }


  public Job title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. The title of the job, such as \&quot;Software Engineer\&quot; The maximum number of allowed characters is 500.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  @Deprecated
  public Job visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
   * @return visibility
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  @Deprecated
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.addresses, job.addresses) &&
        Objects.equals(this.applicationInfo, job.applicationInfo) &&
        Objects.equals(this.companyDisplayName, job.companyDisplayName) &&
        Objects.equals(this.companyName, job.companyName) &&
        Objects.equals(this.compensationInfo, job.compensationInfo) &&
        Objects.equals(this.customAttributes, job.customAttributes) &&
        Objects.equals(this.degreeTypes, job.degreeTypes) &&
        Objects.equals(this.department, job.department) &&
        Objects.equals(this.derivedInfo, job.derivedInfo) &&
        Objects.equals(this.description, job.description) &&
        Objects.equals(this.employmentTypes, job.employmentTypes) &&
        Objects.equals(this.incentives, job.incentives) &&
        Objects.equals(this.jobBenefits, job.jobBenefits) &&
        Objects.equals(this.jobEndTime, job.jobEndTime) &&
        Objects.equals(this.jobLevel, job.jobLevel) &&
        Objects.equals(this.jobStartTime, job.jobStartTime) &&
        Objects.equals(this.languageCode, job.languageCode) &&
        Objects.equals(this.name, job.name) &&
        Objects.equals(this.postingCreateTime, job.postingCreateTime) &&
        Objects.equals(this.postingExpireTime, job.postingExpireTime) &&
        Objects.equals(this.postingPublishTime, job.postingPublishTime) &&
        Objects.equals(this.postingRegion, job.postingRegion) &&
        Objects.equals(this.postingUpdateTime, job.postingUpdateTime) &&
        Objects.equals(this.processingOptions, job.processingOptions) &&
        Objects.equals(this.promotionValue, job.promotionValue) &&
        Objects.equals(this.qualifications, job.qualifications) &&
        Objects.equals(this.requisitionId, job.requisitionId) &&
        Objects.equals(this.responsibilities, job.responsibilities) &&
        Objects.equals(this.title, job.title) &&
        Objects.equals(this.visibility, job.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, applicationInfo, companyDisplayName, companyName, compensationInfo, customAttributes, degreeTypes, department, derivedInfo, description, employmentTypes, incentives, jobBenefits, jobEndTime, jobLevel, jobStartTime, languageCode, name, postingCreateTime, postingExpireTime, postingPublishTime, postingRegion, postingUpdateTime, processingOptions, promotionValue, qualifications, requisitionId, responsibilities, title, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    applicationInfo: ").append(toIndentedString(applicationInfo)).append("\n");
    sb.append("    companyDisplayName: ").append(toIndentedString(companyDisplayName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    compensationInfo: ").append(toIndentedString(compensationInfo)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    degreeTypes: ").append(toIndentedString(degreeTypes)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    derivedInfo: ").append(toIndentedString(derivedInfo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    employmentTypes: ").append(toIndentedString(employmentTypes)).append("\n");
    sb.append("    incentives: ").append(toIndentedString(incentives)).append("\n");
    sb.append("    jobBenefits: ").append(toIndentedString(jobBenefits)).append("\n");
    sb.append("    jobEndTime: ").append(toIndentedString(jobEndTime)).append("\n");
    sb.append("    jobLevel: ").append(toIndentedString(jobLevel)).append("\n");
    sb.append("    jobStartTime: ").append(toIndentedString(jobStartTime)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postingCreateTime: ").append(toIndentedString(postingCreateTime)).append("\n");
    sb.append("    postingExpireTime: ").append(toIndentedString(postingExpireTime)).append("\n");
    sb.append("    postingPublishTime: ").append(toIndentedString(postingPublishTime)).append("\n");
    sb.append("    postingRegion: ").append(toIndentedString(postingRegion)).append("\n");
    sb.append("    postingUpdateTime: ").append(toIndentedString(postingUpdateTime)).append("\n");
    sb.append("    processingOptions: ").append(toIndentedString(processingOptions)).append("\n");
    sb.append("    promotionValue: ").append(toIndentedString(promotionValue)).append("\n");
    sb.append("    qualifications: ").append(toIndentedString(qualifications)).append("\n");
    sb.append("    requisitionId: ").append(toIndentedString(requisitionId)).append("\n");
    sb.append("    responsibilities: ").append(toIndentedString(responsibilities)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("applicationInfo");
    openapiFields.add("companyDisplayName");
    openapiFields.add("companyName");
    openapiFields.add("compensationInfo");
    openapiFields.add("customAttributes");
    openapiFields.add("degreeTypes");
    openapiFields.add("department");
    openapiFields.add("derivedInfo");
    openapiFields.add("description");
    openapiFields.add("employmentTypes");
    openapiFields.add("incentives");
    openapiFields.add("jobBenefits");
    openapiFields.add("jobEndTime");
    openapiFields.add("jobLevel");
    openapiFields.add("jobStartTime");
    openapiFields.add("languageCode");
    openapiFields.add("name");
    openapiFields.add("postingCreateTime");
    openapiFields.add("postingExpireTime");
    openapiFields.add("postingPublishTime");
    openapiFields.add("postingRegion");
    openapiFields.add("postingUpdateTime");
    openapiFields.add("processingOptions");
    openapiFields.add("promotionValue");
    openapiFields.add("qualifications");
    openapiFields.add("requisitionId");
    openapiFields.add("responsibilities");
    openapiFields.add("title");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull() && !jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }
      // validate the optional field `applicationInfo`
      if (jsonObj.get("applicationInfo") != null && !jsonObj.get("applicationInfo").isJsonNull()) {
        ApplicationInfo.validateJsonElement(jsonObj.get("applicationInfo"));
      }
      if ((jsonObj.get("companyDisplayName") != null && !jsonObj.get("companyDisplayName").isJsonNull()) && !jsonObj.get("companyDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyDisplayName").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      // validate the optional field `compensationInfo`
      if (jsonObj.get("compensationInfo") != null && !jsonObj.get("compensationInfo").isJsonNull()) {
        CompensationInfo.validateJsonElement(jsonObj.get("compensationInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("degreeTypes") != null && !jsonObj.get("degreeTypes").isJsonNull() && !jsonObj.get("degreeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `degreeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("degreeTypes").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      // validate the optional field `derivedInfo`
      if (jsonObj.get("derivedInfo") != null && !jsonObj.get("derivedInfo").isJsonNull()) {
        JobDerivedInfo.validateJsonElement(jsonObj.get("derivedInfo"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("employmentTypes") != null && !jsonObj.get("employmentTypes").isJsonNull() && !jsonObj.get("employmentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("employmentTypes").toString()));
      }
      if ((jsonObj.get("incentives") != null && !jsonObj.get("incentives").isJsonNull()) && !jsonObj.get("incentives").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incentives` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incentives").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobBenefits") != null && !jsonObj.get("jobBenefits").isJsonNull() && !jsonObj.get("jobBenefits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobBenefits` to be an array in the JSON string but got `%s`", jsonObj.get("jobBenefits").toString()));
      }
      if ((jsonObj.get("jobEndTime") != null && !jsonObj.get("jobEndTime").isJsonNull()) && !jsonObj.get("jobEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobEndTime").toString()));
      }
      if ((jsonObj.get("jobLevel") != null && !jsonObj.get("jobLevel").isJsonNull()) && !jsonObj.get("jobLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobLevel").toString()));
      }
      // validate the optional field `jobLevel`
      if (jsonObj.get("jobLevel") != null && !jsonObj.get("jobLevel").isJsonNull()) {
        JobLevelEnum.validateJsonElement(jsonObj.get("jobLevel"));
      }
      if ((jsonObj.get("jobStartTime") != null && !jsonObj.get("jobStartTime").isJsonNull()) && !jsonObj.get("jobStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobStartTime").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("postingCreateTime") != null && !jsonObj.get("postingCreateTime").isJsonNull()) && !jsonObj.get("postingCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingCreateTime").toString()));
      }
      if ((jsonObj.get("postingExpireTime") != null && !jsonObj.get("postingExpireTime").isJsonNull()) && !jsonObj.get("postingExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingExpireTime").toString()));
      }
      if ((jsonObj.get("postingPublishTime") != null && !jsonObj.get("postingPublishTime").isJsonNull()) && !jsonObj.get("postingPublishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingPublishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingPublishTime").toString()));
      }
      if ((jsonObj.get("postingRegion") != null && !jsonObj.get("postingRegion").isJsonNull()) && !jsonObj.get("postingRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingRegion").toString()));
      }
      // validate the optional field `postingRegion`
      if (jsonObj.get("postingRegion") != null && !jsonObj.get("postingRegion").isJsonNull()) {
        PostingRegionEnum.validateJsonElement(jsonObj.get("postingRegion"));
      }
      if ((jsonObj.get("postingUpdateTime") != null && !jsonObj.get("postingUpdateTime").isJsonNull()) && !jsonObj.get("postingUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postingUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postingUpdateTime").toString()));
      }
      // validate the optional field `processingOptions`
      if (jsonObj.get("processingOptions") != null && !jsonObj.get("processingOptions").isJsonNull()) {
        ProcessingOptions.validateJsonElement(jsonObj.get("processingOptions"));
      }
      if ((jsonObj.get("qualifications") != null && !jsonObj.get("qualifications").isJsonNull()) && !jsonObj.get("qualifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qualifications").toString()));
      }
      if ((jsonObj.get("requisitionId") != null && !jsonObj.get("requisitionId").isJsonNull()) && !jsonObj.get("requisitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requisitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requisitionId").toString()));
      }
      if ((jsonObj.get("responsibilities") != null && !jsonObj.get("responsibilities").isJsonNull()) && !jsonObj.get("responsibilities").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsibilities` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsibilities").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

