/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientEvent::OAIClientEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientEvent::OAIClientEvent() {
    this->initializeModel();
}

OAIClientEvent::~OAIClientEvent() {}

void OAIClientEvent::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_extra_info_isSet = false;
    m_extra_info_isValid = false;

    m_job_event_isSet = false;
    m_job_event_isValid = false;

    m_parent_event_id_isSet = false;
    m_parent_event_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIClientEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientEvent::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_extra_info_isValid = ::OpenAPI::fromJsonValue(m_extra_info, json[QString("extraInfo")]);
    m_extra_info_isSet = !json[QString("extraInfo")].isNull() && m_extra_info_isValid;

    m_job_event_isValid = ::OpenAPI::fromJsonValue(m_job_event, json[QString("jobEvent")]);
    m_job_event_isSet = !json[QString("jobEvent")].isNull() && m_job_event_isValid;

    m_parent_event_id_isValid = ::OpenAPI::fromJsonValue(m_parent_event_id, json[QString("parentEventId")]);
    m_parent_event_id_isSet = !json[QString("parentEventId")].isNull() && m_parent_event_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIClientEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_extra_info.size() > 0) {
        obj.insert(QString("extraInfo"), ::OpenAPI::toJsonValue(m_extra_info));
    }
    if (m_job_event.isSet()) {
        obj.insert(QString("jobEvent"), ::OpenAPI::toJsonValue(m_job_event));
    }
    if (m_parent_event_id_isSet) {
        obj.insert(QString("parentEventId"), ::OpenAPI::toJsonValue(m_parent_event_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIClientEvent::getCreateTime() const {
    return m_create_time;
}
void OAIClientEvent::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIClientEvent::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIClientEvent::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIClientEvent::getEventId() const {
    return m_event_id;
}
void OAIClientEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIClientEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIClientEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QMap<QString, QString> OAIClientEvent::getExtraInfo() const {
    return m_extra_info;
}
void OAIClientEvent::setExtraInfo(const QMap<QString, QString> &extra_info) {
    m_extra_info = extra_info;
    m_extra_info_isSet = true;
}

bool OAIClientEvent::is_extra_info_Set() const{
    return m_extra_info_isSet;
}

bool OAIClientEvent::is_extra_info_Valid() const{
    return m_extra_info_isValid;
}

OAIJobEvent OAIClientEvent::getJobEvent() const {
    return m_job_event;
}
void OAIClientEvent::setJobEvent(const OAIJobEvent &job_event) {
    m_job_event = job_event;
    m_job_event_isSet = true;
}

bool OAIClientEvent::is_job_event_Set() const{
    return m_job_event_isSet;
}

bool OAIClientEvent::is_job_event_Valid() const{
    return m_job_event_isValid;
}

QString OAIClientEvent::getParentEventId() const {
    return m_parent_event_id;
}
void OAIClientEvent::setParentEventId(const QString &parent_event_id) {
    m_parent_event_id = parent_event_id;
    m_parent_event_id_isSet = true;
}

bool OAIClientEvent::is_parent_event_id_Set() const{
    return m_parent_event_id_isSet;
}

bool OAIClientEvent::is_parent_event_id_Valid() const{
    return m_parent_event_id_isValid;
}

QString OAIClientEvent::getRequestId() const {
    return m_request_id;
}
void OAIClientEvent::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIClientEvent::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIClientEvent::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIClientEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
