/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestMetadata::OAIRequestMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestMetadata::OAIRequestMetadata() {
    this->initializeModel();
}

OAIRequestMetadata::~OAIRequestMetadata() {}

void OAIRequestMetadata::initializeModel() {

    m_device_info_isSet = false;
    m_device_info_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRequestMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestMetadata::fromJsonObject(QJsonObject json) {

    m_device_info_isValid = ::OpenAPI::fromJsonValue(m_device_info, json[QString("deviceInfo")]);
    m_device_info_isSet = !json[QString("deviceInfo")].isNull() && m_device_info_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIRequestMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_device_info.isSet()) {
        obj.insert(QString("deviceInfo"), ::OpenAPI::toJsonValue(m_device_info));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIDeviceInfo OAIRequestMetadata::getDeviceInfo() const {
    return m_device_info;
}
void OAIRequestMetadata::setDeviceInfo(const OAIDeviceInfo &device_info) {
    m_device_info = device_info;
    m_device_info_isSet = true;
}

bool OAIRequestMetadata::is_device_info_Set() const{
    return m_device_info_isSet;
}

bool OAIRequestMetadata::is_device_info_Valid() const{
    return m_device_info_isValid;
}

QString OAIRequestMetadata::getDomain() const {
    return m_domain;
}
void OAIRequestMetadata::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIRequestMetadata::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIRequestMetadata::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIRequestMetadata::getSessionId() const {
    return m_session_id;
}
void OAIRequestMetadata::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIRequestMetadata::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIRequestMetadata::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIRequestMetadata::getUserId() const {
    return m_user_id;
}
void OAIRequestMetadata::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRequestMetadata::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRequestMetadata::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRequestMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
