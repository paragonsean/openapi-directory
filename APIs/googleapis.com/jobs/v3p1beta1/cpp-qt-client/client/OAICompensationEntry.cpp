/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensationEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensationEntry::OAICompensationEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensationEntry::OAICompensationEntry() {
    this->initializeModel();
}

OAICompensationEntry::~OAICompensationEntry() {}

void OAICompensationEntry::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expected_units_per_year_isSet = false;
    m_expected_units_per_year_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAICompensationEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensationEntry::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expected_units_per_year_isValid = ::OpenAPI::fromJsonValue(m_expected_units_per_year, json[QString("expectedUnitsPerYear")]);
    m_expected_units_per_year_isSet = !json[QString("expectedUnitsPerYear")].isNull() && m_expected_units_per_year_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAICompensationEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensationEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expected_units_per_year_isSet) {
        obj.insert(QString("expectedUnitsPerYear"), ::OpenAPI::toJsonValue(m_expected_units_per_year));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

OAIMoney OAICompensationEntry::getAmount() const {
    return m_amount;
}
void OAICompensationEntry::setAmount(const OAIMoney &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICompensationEntry::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICompensationEntry::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICompensationEntry::getDescription() const {
    return m_description;
}
void OAICompensationEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICompensationEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAICompensationEntry::is_description_Valid() const{
    return m_description_isValid;
}

double OAICompensationEntry::getExpectedUnitsPerYear() const {
    return m_expected_units_per_year;
}
void OAICompensationEntry::setExpectedUnitsPerYear(const double &expected_units_per_year) {
    m_expected_units_per_year = expected_units_per_year;
    m_expected_units_per_year_isSet = true;
}

bool OAICompensationEntry::is_expected_units_per_year_Set() const{
    return m_expected_units_per_year_isSet;
}

bool OAICompensationEntry::is_expected_units_per_year_Valid() const{
    return m_expected_units_per_year_isValid;
}

OAICompensationRange OAICompensationEntry::getRange() const {
    return m_range;
}
void OAICompensationEntry::setRange(const OAICompensationRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAICompensationEntry::is_range_Set() const{
    return m_range_isSet;
}

bool OAICompensationEntry::is_range_Valid() const{
    return m_range_isValid;
}

QString OAICompensationEntry::getType() const {
    return m_type;
}
void OAICompensationEntry::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompensationEntry::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompensationEntry::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICompensationEntry::getUnit() const {
    return m_unit;
}
void OAICompensationEntry::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAICompensationEntry::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICompensationEntry::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAICompensationEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_units_per_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensationEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
