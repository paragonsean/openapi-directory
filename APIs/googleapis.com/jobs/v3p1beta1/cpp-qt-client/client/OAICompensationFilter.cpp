/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensationFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensationFilter::OAICompensationFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensationFilter::OAICompensationFilter() {
    this->initializeModel();
}

OAICompensationFilter::~OAICompensationFilter() {}

void OAICompensationFilter::initializeModel() {

    m_include_jobs_with_unspecified_compensation_range_isSet = false;
    m_include_jobs_with_unspecified_compensation_range_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAICompensationFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensationFilter::fromJsonObject(QJsonObject json) {

    m_include_jobs_with_unspecified_compensation_range_isValid = ::OpenAPI::fromJsonValue(m_include_jobs_with_unspecified_compensation_range, json[QString("includeJobsWithUnspecifiedCompensationRange")]);
    m_include_jobs_with_unspecified_compensation_range_isSet = !json[QString("includeJobsWithUnspecifiedCompensationRange")].isNull() && m_include_jobs_with_unspecified_compensation_range_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAICompensationFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensationFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_include_jobs_with_unspecified_compensation_range_isSet) {
        obj.insert(QString("includeJobsWithUnspecifiedCompensationRange"), ::OpenAPI::toJsonValue(m_include_jobs_with_unspecified_compensation_range));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_units.size() > 0) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

bool OAICompensationFilter::isIncludeJobsWithUnspecifiedCompensationRange() const {
    return m_include_jobs_with_unspecified_compensation_range;
}
void OAICompensationFilter::setIncludeJobsWithUnspecifiedCompensationRange(const bool &include_jobs_with_unspecified_compensation_range) {
    m_include_jobs_with_unspecified_compensation_range = include_jobs_with_unspecified_compensation_range;
    m_include_jobs_with_unspecified_compensation_range_isSet = true;
}

bool OAICompensationFilter::is_include_jobs_with_unspecified_compensation_range_Set() const{
    return m_include_jobs_with_unspecified_compensation_range_isSet;
}

bool OAICompensationFilter::is_include_jobs_with_unspecified_compensation_range_Valid() const{
    return m_include_jobs_with_unspecified_compensation_range_isValid;
}

OAICompensationRange OAICompensationFilter::getRange() const {
    return m_range;
}
void OAICompensationFilter::setRange(const OAICompensationRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAICompensationFilter::is_range_Set() const{
    return m_range_isSet;
}

bool OAICompensationFilter::is_range_Valid() const{
    return m_range_isValid;
}

QString OAICompensationFilter::getType() const {
    return m_type;
}
void OAICompensationFilter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompensationFilter::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompensationFilter::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAICompensationFilter::getUnits() const {
    return m_units;
}
void OAICompensationFilter::setUnits(const QList<QString> &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAICompensationFilter::is_units_Set() const{
    return m_units_isSet;
}

bool OAICompensationFilter::is_units_Valid() const{
    return m_units_isValid;
}

bool OAICompensationFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_jobs_with_unspecified_compensation_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensationFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
