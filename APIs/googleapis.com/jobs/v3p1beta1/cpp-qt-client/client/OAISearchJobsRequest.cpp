/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchJobsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchJobsRequest::OAISearchJobsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchJobsRequest::OAISearchJobsRequest() {
    this->initializeModel();
}

OAISearchJobsRequest::~OAISearchJobsRequest() {}

void OAISearchJobsRequest::initializeModel() {

    m_custom_ranking_info_isSet = false;
    m_custom_ranking_info_isValid = false;

    m_disable_keyword_match_isSet = false;
    m_disable_keyword_match_isValid = false;

    m_diversification_level_isSet = false;
    m_diversification_level_isValid = false;

    m_enable_broadening_isSet = false;
    m_enable_broadening_isValid = false;

    m_histogram_facets_isSet = false;
    m_histogram_facets_isValid = false;

    m_histogram_queries_isSet = false;
    m_histogram_queries_isValid = false;

    m_job_query_isSet = false;
    m_job_query_isValid = false;

    m_job_view_isSet = false;
    m_job_view_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_request_metadata_isSet = false;
    m_request_metadata_isValid = false;

    m_require_precise_result_size_isSet = false;
    m_require_precise_result_size_isValid = false;

    m_search_mode_isSet = false;
    m_search_mode_isValid = false;
}

void OAISearchJobsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchJobsRequest::fromJsonObject(QJsonObject json) {

    m_custom_ranking_info_isValid = ::OpenAPI::fromJsonValue(m_custom_ranking_info, json[QString("customRankingInfo")]);
    m_custom_ranking_info_isSet = !json[QString("customRankingInfo")].isNull() && m_custom_ranking_info_isValid;

    m_disable_keyword_match_isValid = ::OpenAPI::fromJsonValue(m_disable_keyword_match, json[QString("disableKeywordMatch")]);
    m_disable_keyword_match_isSet = !json[QString("disableKeywordMatch")].isNull() && m_disable_keyword_match_isValid;

    m_diversification_level_isValid = ::OpenAPI::fromJsonValue(m_diversification_level, json[QString("diversificationLevel")]);
    m_diversification_level_isSet = !json[QString("diversificationLevel")].isNull() && m_diversification_level_isValid;

    m_enable_broadening_isValid = ::OpenAPI::fromJsonValue(m_enable_broadening, json[QString("enableBroadening")]);
    m_enable_broadening_isSet = !json[QString("enableBroadening")].isNull() && m_enable_broadening_isValid;

    m_histogram_facets_isValid = ::OpenAPI::fromJsonValue(m_histogram_facets, json[QString("histogramFacets")]);
    m_histogram_facets_isSet = !json[QString("histogramFacets")].isNull() && m_histogram_facets_isValid;

    m_histogram_queries_isValid = ::OpenAPI::fromJsonValue(m_histogram_queries, json[QString("histogramQueries")]);
    m_histogram_queries_isSet = !json[QString("histogramQueries")].isNull() && m_histogram_queries_isValid;

    m_job_query_isValid = ::OpenAPI::fromJsonValue(m_job_query, json[QString("jobQuery")]);
    m_job_query_isSet = !json[QString("jobQuery")].isNull() && m_job_query_isValid;

    m_job_view_isValid = ::OpenAPI::fromJsonValue(m_job_view, json[QString("jobView")]);
    m_job_view_isSet = !json[QString("jobView")].isNull() && m_job_view_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_request_metadata_isValid = ::OpenAPI::fromJsonValue(m_request_metadata, json[QString("requestMetadata")]);
    m_request_metadata_isSet = !json[QString("requestMetadata")].isNull() && m_request_metadata_isValid;

    m_require_precise_result_size_isValid = ::OpenAPI::fromJsonValue(m_require_precise_result_size, json[QString("requirePreciseResultSize")]);
    m_require_precise_result_size_isSet = !json[QString("requirePreciseResultSize")].isNull() && m_require_precise_result_size_isValid;

    m_search_mode_isValid = ::OpenAPI::fromJsonValue(m_search_mode, json[QString("searchMode")]);
    m_search_mode_isSet = !json[QString("searchMode")].isNull() && m_search_mode_isValid;
}

QString OAISearchJobsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchJobsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_ranking_info.isSet()) {
        obj.insert(QString("customRankingInfo"), ::OpenAPI::toJsonValue(m_custom_ranking_info));
    }
    if (m_disable_keyword_match_isSet) {
        obj.insert(QString("disableKeywordMatch"), ::OpenAPI::toJsonValue(m_disable_keyword_match));
    }
    if (m_diversification_level_isSet) {
        obj.insert(QString("diversificationLevel"), ::OpenAPI::toJsonValue(m_diversification_level));
    }
    if (m_enable_broadening_isSet) {
        obj.insert(QString("enableBroadening"), ::OpenAPI::toJsonValue(m_enable_broadening));
    }
    if (m_histogram_facets.isSet()) {
        obj.insert(QString("histogramFacets"), ::OpenAPI::toJsonValue(m_histogram_facets));
    }
    if (m_histogram_queries.size() > 0) {
        obj.insert(QString("histogramQueries"), ::OpenAPI::toJsonValue(m_histogram_queries));
    }
    if (m_job_query.isSet()) {
        obj.insert(QString("jobQuery"), ::OpenAPI::toJsonValue(m_job_query));
    }
    if (m_job_view_isSet) {
        obj.insert(QString("jobView"), ::OpenAPI::toJsonValue(m_job_view));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_request_metadata.isSet()) {
        obj.insert(QString("requestMetadata"), ::OpenAPI::toJsonValue(m_request_metadata));
    }
    if (m_require_precise_result_size_isSet) {
        obj.insert(QString("requirePreciseResultSize"), ::OpenAPI::toJsonValue(m_require_precise_result_size));
    }
    if (m_search_mode_isSet) {
        obj.insert(QString("searchMode"), ::OpenAPI::toJsonValue(m_search_mode));
    }
    return obj;
}

OAICustomRankingInfo OAISearchJobsRequest::getCustomRankingInfo() const {
    return m_custom_ranking_info;
}
void OAISearchJobsRequest::setCustomRankingInfo(const OAICustomRankingInfo &custom_ranking_info) {
    m_custom_ranking_info = custom_ranking_info;
    m_custom_ranking_info_isSet = true;
}

bool OAISearchJobsRequest::is_custom_ranking_info_Set() const{
    return m_custom_ranking_info_isSet;
}

bool OAISearchJobsRequest::is_custom_ranking_info_Valid() const{
    return m_custom_ranking_info_isValid;
}

bool OAISearchJobsRequest::isDisableKeywordMatch() const {
    return m_disable_keyword_match;
}
void OAISearchJobsRequest::setDisableKeywordMatch(const bool &disable_keyword_match) {
    m_disable_keyword_match = disable_keyword_match;
    m_disable_keyword_match_isSet = true;
}

bool OAISearchJobsRequest::is_disable_keyword_match_Set() const{
    return m_disable_keyword_match_isSet;
}

bool OAISearchJobsRequest::is_disable_keyword_match_Valid() const{
    return m_disable_keyword_match_isValid;
}

QString OAISearchJobsRequest::getDiversificationLevel() const {
    return m_diversification_level;
}
void OAISearchJobsRequest::setDiversificationLevel(const QString &diversification_level) {
    m_diversification_level = diversification_level;
    m_diversification_level_isSet = true;
}

bool OAISearchJobsRequest::is_diversification_level_Set() const{
    return m_diversification_level_isSet;
}

bool OAISearchJobsRequest::is_diversification_level_Valid() const{
    return m_diversification_level_isValid;
}

bool OAISearchJobsRequest::isEnableBroadening() const {
    return m_enable_broadening;
}
void OAISearchJobsRequest::setEnableBroadening(const bool &enable_broadening) {
    m_enable_broadening = enable_broadening;
    m_enable_broadening_isSet = true;
}

bool OAISearchJobsRequest::is_enable_broadening_Set() const{
    return m_enable_broadening_isSet;
}

bool OAISearchJobsRequest::is_enable_broadening_Valid() const{
    return m_enable_broadening_isValid;
}

OAIHistogramFacets OAISearchJobsRequest::getHistogramFacets() const {
    return m_histogram_facets;
}
void OAISearchJobsRequest::setHistogramFacets(const OAIHistogramFacets &histogram_facets) {
    m_histogram_facets = histogram_facets;
    m_histogram_facets_isSet = true;
}

bool OAISearchJobsRequest::is_histogram_facets_Set() const{
    return m_histogram_facets_isSet;
}

bool OAISearchJobsRequest::is_histogram_facets_Valid() const{
    return m_histogram_facets_isValid;
}

QList<OAIHistogramQuery> OAISearchJobsRequest::getHistogramQueries() const {
    return m_histogram_queries;
}
void OAISearchJobsRequest::setHistogramQueries(const QList<OAIHistogramQuery> &histogram_queries) {
    m_histogram_queries = histogram_queries;
    m_histogram_queries_isSet = true;
}

bool OAISearchJobsRequest::is_histogram_queries_Set() const{
    return m_histogram_queries_isSet;
}

bool OAISearchJobsRequest::is_histogram_queries_Valid() const{
    return m_histogram_queries_isValid;
}

OAIJobQuery OAISearchJobsRequest::getJobQuery() const {
    return m_job_query;
}
void OAISearchJobsRequest::setJobQuery(const OAIJobQuery &job_query) {
    m_job_query = job_query;
    m_job_query_isSet = true;
}

bool OAISearchJobsRequest::is_job_query_Set() const{
    return m_job_query_isSet;
}

bool OAISearchJobsRequest::is_job_query_Valid() const{
    return m_job_query_isValid;
}

QString OAISearchJobsRequest::getJobView() const {
    return m_job_view;
}
void OAISearchJobsRequest::setJobView(const QString &job_view) {
    m_job_view = job_view;
    m_job_view_isSet = true;
}

bool OAISearchJobsRequest::is_job_view_Set() const{
    return m_job_view_isSet;
}

bool OAISearchJobsRequest::is_job_view_Valid() const{
    return m_job_view_isValid;
}

qint32 OAISearchJobsRequest::getOffset() const {
    return m_offset;
}
void OAISearchJobsRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISearchJobsRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchJobsRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAISearchJobsRequest::getOrderBy() const {
    return m_order_by;
}
void OAISearchJobsRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAISearchJobsRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAISearchJobsRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAISearchJobsRequest::getPageSize() const {
    return m_page_size;
}
void OAISearchJobsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchJobsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchJobsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISearchJobsRequest::getPageToken() const {
    return m_page_token;
}
void OAISearchJobsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchJobsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchJobsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

OAIRequestMetadata OAISearchJobsRequest::getRequestMetadata() const {
    return m_request_metadata;
}
void OAISearchJobsRequest::setRequestMetadata(const OAIRequestMetadata &request_metadata) {
    m_request_metadata = request_metadata;
    m_request_metadata_isSet = true;
}

bool OAISearchJobsRequest::is_request_metadata_Set() const{
    return m_request_metadata_isSet;
}

bool OAISearchJobsRequest::is_request_metadata_Valid() const{
    return m_request_metadata_isValid;
}

bool OAISearchJobsRequest::isRequirePreciseResultSize() const {
    return m_require_precise_result_size;
}
void OAISearchJobsRequest::setRequirePreciseResultSize(const bool &require_precise_result_size) {
    m_require_precise_result_size = require_precise_result_size;
    m_require_precise_result_size_isSet = true;
}

bool OAISearchJobsRequest::is_require_precise_result_size_Set() const{
    return m_require_precise_result_size_isSet;
}

bool OAISearchJobsRequest::is_require_precise_result_size_Valid() const{
    return m_require_precise_result_size_isValid;
}

QString OAISearchJobsRequest::getSearchMode() const {
    return m_search_mode;
}
void OAISearchJobsRequest::setSearchMode(const QString &search_mode) {
    m_search_mode = search_mode;
    m_search_mode_isSet = true;
}

bool OAISearchJobsRequest::is_search_mode_Set() const{
    return m_search_mode_isSet;
}

bool OAISearchJobsRequest::is_search_mode_Valid() const{
    return m_search_mode_isValid;
}

bool OAISearchJobsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_ranking_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_keyword_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diversification_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_broadening_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_precise_result_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchJobsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
