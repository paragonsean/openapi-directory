/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomAttributeHistogramRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomAttributeHistogramRequest::OAICustomAttributeHistogramRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomAttributeHistogramRequest::OAICustomAttributeHistogramRequest() {
    this->initializeModel();
}

OAICustomAttributeHistogramRequest::~OAICustomAttributeHistogramRequest() {}

void OAICustomAttributeHistogramRequest::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_long_value_histogram_bucketing_option_isSet = false;
    m_long_value_histogram_bucketing_option_isValid = false;

    m_string_value_histogram_isSet = false;
    m_string_value_histogram_isValid = false;
}

void OAICustomAttributeHistogramRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomAttributeHistogramRequest::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_long_value_histogram_bucketing_option_isValid = ::OpenAPI::fromJsonValue(m_long_value_histogram_bucketing_option, json[QString("longValueHistogramBucketingOption")]);
    m_long_value_histogram_bucketing_option_isSet = !json[QString("longValueHistogramBucketingOption")].isNull() && m_long_value_histogram_bucketing_option_isValid;

    m_string_value_histogram_isValid = ::OpenAPI::fromJsonValue(m_string_value_histogram, json[QString("stringValueHistogram")]);
    m_string_value_histogram_isSet = !json[QString("stringValueHistogram")].isNull() && m_string_value_histogram_isValid;
}

QString OAICustomAttributeHistogramRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomAttributeHistogramRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_long_value_histogram_bucketing_option.isSet()) {
        obj.insert(QString("longValueHistogramBucketingOption"), ::OpenAPI::toJsonValue(m_long_value_histogram_bucketing_option));
    }
    if (m_string_value_histogram_isSet) {
        obj.insert(QString("stringValueHistogram"), ::OpenAPI::toJsonValue(m_string_value_histogram));
    }
    return obj;
}

QString OAICustomAttributeHistogramRequest::getKey() const {
    return m_key;
}
void OAICustomAttributeHistogramRequest::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICustomAttributeHistogramRequest::is_key_Set() const{
    return m_key_isSet;
}

bool OAICustomAttributeHistogramRequest::is_key_Valid() const{
    return m_key_isValid;
}

OAINumericBucketingOption OAICustomAttributeHistogramRequest::getLongValueHistogramBucketingOption() const {
    return m_long_value_histogram_bucketing_option;
}
void OAICustomAttributeHistogramRequest::setLongValueHistogramBucketingOption(const OAINumericBucketingOption &long_value_histogram_bucketing_option) {
    m_long_value_histogram_bucketing_option = long_value_histogram_bucketing_option;
    m_long_value_histogram_bucketing_option_isSet = true;
}

bool OAICustomAttributeHistogramRequest::is_long_value_histogram_bucketing_option_Set() const{
    return m_long_value_histogram_bucketing_option_isSet;
}

bool OAICustomAttributeHistogramRequest::is_long_value_histogram_bucketing_option_Valid() const{
    return m_long_value_histogram_bucketing_option_isValid;
}

bool OAICustomAttributeHistogramRequest::isStringValueHistogram() const {
    return m_string_value_histogram;
}
void OAICustomAttributeHistogramRequest::setStringValueHistogram(const bool &string_value_histogram) {
    m_string_value_histogram = string_value_histogram;
    m_string_value_histogram_isSet = true;
}

bool OAICustomAttributeHistogramRequest::is_string_value_histogram_Set() const{
    return m_string_value_histogram_isSet;
}

bool OAICustomAttributeHistogramRequest::is_string_value_histogram_Valid() const{
    return m_string_value_histogram_isValid;
}

bool OAICustomAttributeHistogramRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_histogram_bucketing_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_histogram_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomAttributeHistogramRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
