/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramQueryResult::OAIHistogramQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramQueryResult::OAIHistogramQueryResult() {
    this->initializeModel();
}

OAIHistogramQueryResult::~OAIHistogramQueryResult() {}

void OAIHistogramQueryResult::initializeModel() {

    m_histogram_isSet = false;
    m_histogram_isValid = false;

    m_histogram_query_isSet = false;
    m_histogram_query_isValid = false;
}

void OAIHistogramQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramQueryResult::fromJsonObject(QJsonObject json) {

    m_histogram_isValid = ::OpenAPI::fromJsonValue(m_histogram, json[QString("histogram")]);
    m_histogram_isSet = !json[QString("histogram")].isNull() && m_histogram_isValid;

    m_histogram_query_isValid = ::OpenAPI::fromJsonValue(m_histogram_query, json[QString("histogramQuery")]);
    m_histogram_query_isSet = !json[QString("histogramQuery")].isNull() && m_histogram_query_isValid;
}

QString OAIHistogramQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_histogram.size() > 0) {
        obj.insert(QString("histogram"), ::OpenAPI::toJsonValue(m_histogram));
    }
    if (m_histogram_query_isSet) {
        obj.insert(QString("histogramQuery"), ::OpenAPI::toJsonValue(m_histogram_query));
    }
    return obj;
}

QMap<QString, QString> OAIHistogramQueryResult::getHistogram() const {
    return m_histogram;
}
void OAIHistogramQueryResult::setHistogram(const QMap<QString, QString> &histogram) {
    m_histogram = histogram;
    m_histogram_isSet = true;
}

bool OAIHistogramQueryResult::is_histogram_Set() const{
    return m_histogram_isSet;
}

bool OAIHistogramQueryResult::is_histogram_Valid() const{
    return m_histogram_isValid;
}

QString OAIHistogramQueryResult::getHistogramQuery() const {
    return m_histogram_query;
}
void OAIHistogramQueryResult::setHistogramQuery(const QString &histogram_query) {
    m_histogram_query = histogram_query;
    m_histogram_query_isSet = true;
}

bool OAIHistogramQueryResult::is_histogram_query_Set() const{
    return m_histogram_query_isSet;
}

bool OAIHistogramQueryResult::is_histogram_query_Valid() const{
    return m_histogram_query_isValid;
}

bool OAIHistogramQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_histogram.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
