/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespacedDebugInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespacedDebugInput::OAINamespacedDebugInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespacedDebugInput::OAINamespacedDebugInput() {
    this->initializeModel();
}

OAINamespacedDebugInput::~OAINamespacedDebugInput() {}

void OAINamespacedDebugInput::initializeModel() {

    m_absolutely_forced_exp_names_isSet = false;
    m_absolutely_forced_exp_names_isValid = false;

    m_absolutely_forced_exp_tags_isSet = false;
    m_absolutely_forced_exp_tags_isValid = false;

    m_absolutely_forced_exps_isSet = false;
    m_absolutely_forced_exps_isValid = false;

    m_conditionally_forced_exp_names_isSet = false;
    m_conditionally_forced_exp_names_isValid = false;

    m_conditionally_forced_exp_tags_isSet = false;
    m_conditionally_forced_exp_tags_isValid = false;

    m_conditionally_forced_exps_isSet = false;
    m_conditionally_forced_exps_isValid = false;

    m_disable_automatic_enrollment_selection_isSet = false;
    m_disable_automatic_enrollment_selection_isValid = false;

    m_disable_exp_names_isSet = false;
    m_disable_exp_names_isValid = false;

    m_disable_exp_tags_isSet = false;
    m_disable_exp_tags_isValid = false;

    m_disable_exps_isSet = false;
    m_disable_exps_isValid = false;

    m_disable_manual_enrollment_selection_isSet = false;
    m_disable_manual_enrollment_selection_isValid = false;

    m_disable_organic_selection_isSet = false;
    m_disable_organic_selection_isValid = false;

    m_forced_flags_isSet = false;
    m_forced_flags_isValid = false;

    m_forced_rollouts_isSet = false;
    m_forced_rollouts_isValid = false;

    m_testing_mode_isSet = false;
    m_testing_mode_isValid = false;
}

void OAINamespacedDebugInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespacedDebugInput::fromJsonObject(QJsonObject json) {

    m_absolutely_forced_exp_names_isValid = ::OpenAPI::fromJsonValue(m_absolutely_forced_exp_names, json[QString("absolutelyForcedExpNames")]);
    m_absolutely_forced_exp_names_isSet = !json[QString("absolutelyForcedExpNames")].isNull() && m_absolutely_forced_exp_names_isValid;

    m_absolutely_forced_exp_tags_isValid = ::OpenAPI::fromJsonValue(m_absolutely_forced_exp_tags, json[QString("absolutelyForcedExpTags")]);
    m_absolutely_forced_exp_tags_isSet = !json[QString("absolutelyForcedExpTags")].isNull() && m_absolutely_forced_exp_tags_isValid;

    m_absolutely_forced_exps_isValid = ::OpenAPI::fromJsonValue(m_absolutely_forced_exps, json[QString("absolutelyForcedExps")]);
    m_absolutely_forced_exps_isSet = !json[QString("absolutelyForcedExps")].isNull() && m_absolutely_forced_exps_isValid;

    m_conditionally_forced_exp_names_isValid = ::OpenAPI::fromJsonValue(m_conditionally_forced_exp_names, json[QString("conditionallyForcedExpNames")]);
    m_conditionally_forced_exp_names_isSet = !json[QString("conditionallyForcedExpNames")].isNull() && m_conditionally_forced_exp_names_isValid;

    m_conditionally_forced_exp_tags_isValid = ::OpenAPI::fromJsonValue(m_conditionally_forced_exp_tags, json[QString("conditionallyForcedExpTags")]);
    m_conditionally_forced_exp_tags_isSet = !json[QString("conditionallyForcedExpTags")].isNull() && m_conditionally_forced_exp_tags_isValid;

    m_conditionally_forced_exps_isValid = ::OpenAPI::fromJsonValue(m_conditionally_forced_exps, json[QString("conditionallyForcedExps")]);
    m_conditionally_forced_exps_isSet = !json[QString("conditionallyForcedExps")].isNull() && m_conditionally_forced_exps_isValid;

    m_disable_automatic_enrollment_selection_isValid = ::OpenAPI::fromJsonValue(m_disable_automatic_enrollment_selection, json[QString("disableAutomaticEnrollmentSelection")]);
    m_disable_automatic_enrollment_selection_isSet = !json[QString("disableAutomaticEnrollmentSelection")].isNull() && m_disable_automatic_enrollment_selection_isValid;

    m_disable_exp_names_isValid = ::OpenAPI::fromJsonValue(m_disable_exp_names, json[QString("disableExpNames")]);
    m_disable_exp_names_isSet = !json[QString("disableExpNames")].isNull() && m_disable_exp_names_isValid;

    m_disable_exp_tags_isValid = ::OpenAPI::fromJsonValue(m_disable_exp_tags, json[QString("disableExpTags")]);
    m_disable_exp_tags_isSet = !json[QString("disableExpTags")].isNull() && m_disable_exp_tags_isValid;

    m_disable_exps_isValid = ::OpenAPI::fromJsonValue(m_disable_exps, json[QString("disableExps")]);
    m_disable_exps_isSet = !json[QString("disableExps")].isNull() && m_disable_exps_isValid;

    m_disable_manual_enrollment_selection_isValid = ::OpenAPI::fromJsonValue(m_disable_manual_enrollment_selection, json[QString("disableManualEnrollmentSelection")]);
    m_disable_manual_enrollment_selection_isSet = !json[QString("disableManualEnrollmentSelection")].isNull() && m_disable_manual_enrollment_selection_isValid;

    m_disable_organic_selection_isValid = ::OpenAPI::fromJsonValue(m_disable_organic_selection, json[QString("disableOrganicSelection")]);
    m_disable_organic_selection_isSet = !json[QString("disableOrganicSelection")].isNull() && m_disable_organic_selection_isValid;

    m_forced_flags_isValid = ::OpenAPI::fromJsonValue(m_forced_flags, json[QString("forcedFlags")]);
    m_forced_flags_isSet = !json[QString("forcedFlags")].isNull() && m_forced_flags_isValid;

    m_forced_rollouts_isValid = ::OpenAPI::fromJsonValue(m_forced_rollouts, json[QString("forcedRollouts")]);
    m_forced_rollouts_isSet = !json[QString("forcedRollouts")].isNull() && m_forced_rollouts_isValid;

    m_testing_mode_isValid = ::OpenAPI::fromJsonValue(m_testing_mode, json[QString("testingMode")]);
    m_testing_mode_isSet = !json[QString("testingMode")].isNull() && m_testing_mode_isValid;
}

QString OAINamespacedDebugInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespacedDebugInput::asJsonObject() const {
    QJsonObject obj;
    if (m_absolutely_forced_exp_names.size() > 0) {
        obj.insert(QString("absolutelyForcedExpNames"), ::OpenAPI::toJsonValue(m_absolutely_forced_exp_names));
    }
    if (m_absolutely_forced_exp_tags.size() > 0) {
        obj.insert(QString("absolutelyForcedExpTags"), ::OpenAPI::toJsonValue(m_absolutely_forced_exp_tags));
    }
    if (m_absolutely_forced_exps.size() > 0) {
        obj.insert(QString("absolutelyForcedExps"), ::OpenAPI::toJsonValue(m_absolutely_forced_exps));
    }
    if (m_conditionally_forced_exp_names.size() > 0) {
        obj.insert(QString("conditionallyForcedExpNames"), ::OpenAPI::toJsonValue(m_conditionally_forced_exp_names));
    }
    if (m_conditionally_forced_exp_tags.size() > 0) {
        obj.insert(QString("conditionallyForcedExpTags"), ::OpenAPI::toJsonValue(m_conditionally_forced_exp_tags));
    }
    if (m_conditionally_forced_exps.size() > 0) {
        obj.insert(QString("conditionallyForcedExps"), ::OpenAPI::toJsonValue(m_conditionally_forced_exps));
    }
    if (m_disable_automatic_enrollment_selection_isSet) {
        obj.insert(QString("disableAutomaticEnrollmentSelection"), ::OpenAPI::toJsonValue(m_disable_automatic_enrollment_selection));
    }
    if (m_disable_exp_names.size() > 0) {
        obj.insert(QString("disableExpNames"), ::OpenAPI::toJsonValue(m_disable_exp_names));
    }
    if (m_disable_exp_tags.size() > 0) {
        obj.insert(QString("disableExpTags"), ::OpenAPI::toJsonValue(m_disable_exp_tags));
    }
    if (m_disable_exps.size() > 0) {
        obj.insert(QString("disableExps"), ::OpenAPI::toJsonValue(m_disable_exps));
    }
    if (m_disable_manual_enrollment_selection_isSet) {
        obj.insert(QString("disableManualEnrollmentSelection"), ::OpenAPI::toJsonValue(m_disable_manual_enrollment_selection));
    }
    if (m_disable_organic_selection_isSet) {
        obj.insert(QString("disableOrganicSelection"), ::OpenAPI::toJsonValue(m_disable_organic_selection));
    }
    if (m_forced_flags.size() > 0) {
        obj.insert(QString("forcedFlags"), ::OpenAPI::toJsonValue(m_forced_flags));
    }
    if (m_forced_rollouts.size() > 0) {
        obj.insert(QString("forcedRollouts"), ::OpenAPI::toJsonValue(m_forced_rollouts));
    }
    if (m_testing_mode_isSet) {
        obj.insert(QString("testingMode"), ::OpenAPI::toJsonValue(m_testing_mode));
    }
    return obj;
}

QList<QString> OAINamespacedDebugInput::getAbsolutelyForcedExpNames() const {
    return m_absolutely_forced_exp_names;
}
void OAINamespacedDebugInput::setAbsolutelyForcedExpNames(const QList<QString> &absolutely_forced_exp_names) {
    m_absolutely_forced_exp_names = absolutely_forced_exp_names;
    m_absolutely_forced_exp_names_isSet = true;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exp_names_Set() const{
    return m_absolutely_forced_exp_names_isSet;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exp_names_Valid() const{
    return m_absolutely_forced_exp_names_isValid;
}

QList<QString> OAINamespacedDebugInput::getAbsolutelyForcedExpTags() const {
    return m_absolutely_forced_exp_tags;
}
void OAINamespacedDebugInput::setAbsolutelyForcedExpTags(const QList<QString> &absolutely_forced_exp_tags) {
    m_absolutely_forced_exp_tags = absolutely_forced_exp_tags;
    m_absolutely_forced_exp_tags_isSet = true;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exp_tags_Set() const{
    return m_absolutely_forced_exp_tags_isSet;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exp_tags_Valid() const{
    return m_absolutely_forced_exp_tags_isValid;
}

QList<qint32> OAINamespacedDebugInput::getAbsolutelyForcedExps() const {
    return m_absolutely_forced_exps;
}
void OAINamespacedDebugInput::setAbsolutelyForcedExps(const QList<qint32> &absolutely_forced_exps) {
    m_absolutely_forced_exps = absolutely_forced_exps;
    m_absolutely_forced_exps_isSet = true;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exps_Set() const{
    return m_absolutely_forced_exps_isSet;
}

bool OAINamespacedDebugInput::is_absolutely_forced_exps_Valid() const{
    return m_absolutely_forced_exps_isValid;
}

QList<QString> OAINamespacedDebugInput::getConditionallyForcedExpNames() const {
    return m_conditionally_forced_exp_names;
}
void OAINamespacedDebugInput::setConditionallyForcedExpNames(const QList<QString> &conditionally_forced_exp_names) {
    m_conditionally_forced_exp_names = conditionally_forced_exp_names;
    m_conditionally_forced_exp_names_isSet = true;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exp_names_Set() const{
    return m_conditionally_forced_exp_names_isSet;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exp_names_Valid() const{
    return m_conditionally_forced_exp_names_isValid;
}

QList<QString> OAINamespacedDebugInput::getConditionallyForcedExpTags() const {
    return m_conditionally_forced_exp_tags;
}
void OAINamespacedDebugInput::setConditionallyForcedExpTags(const QList<QString> &conditionally_forced_exp_tags) {
    m_conditionally_forced_exp_tags = conditionally_forced_exp_tags;
    m_conditionally_forced_exp_tags_isSet = true;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exp_tags_Set() const{
    return m_conditionally_forced_exp_tags_isSet;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exp_tags_Valid() const{
    return m_conditionally_forced_exp_tags_isValid;
}

QList<qint32> OAINamespacedDebugInput::getConditionallyForcedExps() const {
    return m_conditionally_forced_exps;
}
void OAINamespacedDebugInput::setConditionallyForcedExps(const QList<qint32> &conditionally_forced_exps) {
    m_conditionally_forced_exps = conditionally_forced_exps;
    m_conditionally_forced_exps_isSet = true;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exps_Set() const{
    return m_conditionally_forced_exps_isSet;
}

bool OAINamespacedDebugInput::is_conditionally_forced_exps_Valid() const{
    return m_conditionally_forced_exps_isValid;
}

bool OAINamespacedDebugInput::isDisableAutomaticEnrollmentSelection() const {
    return m_disable_automatic_enrollment_selection;
}
void OAINamespacedDebugInput::setDisableAutomaticEnrollmentSelection(const bool &disable_automatic_enrollment_selection) {
    m_disable_automatic_enrollment_selection = disable_automatic_enrollment_selection;
    m_disable_automatic_enrollment_selection_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_automatic_enrollment_selection_Set() const{
    return m_disable_automatic_enrollment_selection_isSet;
}

bool OAINamespacedDebugInput::is_disable_automatic_enrollment_selection_Valid() const{
    return m_disable_automatic_enrollment_selection_isValid;
}

QList<QString> OAINamespacedDebugInput::getDisableExpNames() const {
    return m_disable_exp_names;
}
void OAINamespacedDebugInput::setDisableExpNames(const QList<QString> &disable_exp_names) {
    m_disable_exp_names = disable_exp_names;
    m_disable_exp_names_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_exp_names_Set() const{
    return m_disable_exp_names_isSet;
}

bool OAINamespacedDebugInput::is_disable_exp_names_Valid() const{
    return m_disable_exp_names_isValid;
}

QList<QString> OAINamespacedDebugInput::getDisableExpTags() const {
    return m_disable_exp_tags;
}
void OAINamespacedDebugInput::setDisableExpTags(const QList<QString> &disable_exp_tags) {
    m_disable_exp_tags = disable_exp_tags;
    m_disable_exp_tags_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_exp_tags_Set() const{
    return m_disable_exp_tags_isSet;
}

bool OAINamespacedDebugInput::is_disable_exp_tags_Valid() const{
    return m_disable_exp_tags_isValid;
}

QList<qint32> OAINamespacedDebugInput::getDisableExps() const {
    return m_disable_exps;
}
void OAINamespacedDebugInput::setDisableExps(const QList<qint32> &disable_exps) {
    m_disable_exps = disable_exps;
    m_disable_exps_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_exps_Set() const{
    return m_disable_exps_isSet;
}

bool OAINamespacedDebugInput::is_disable_exps_Valid() const{
    return m_disable_exps_isValid;
}

bool OAINamespacedDebugInput::isDisableManualEnrollmentSelection() const {
    return m_disable_manual_enrollment_selection;
}
void OAINamespacedDebugInput::setDisableManualEnrollmentSelection(const bool &disable_manual_enrollment_selection) {
    m_disable_manual_enrollment_selection = disable_manual_enrollment_selection;
    m_disable_manual_enrollment_selection_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_manual_enrollment_selection_Set() const{
    return m_disable_manual_enrollment_selection_isSet;
}

bool OAINamespacedDebugInput::is_disable_manual_enrollment_selection_Valid() const{
    return m_disable_manual_enrollment_selection_isValid;
}

bool OAINamespacedDebugInput::isDisableOrganicSelection() const {
    return m_disable_organic_selection;
}
void OAINamespacedDebugInput::setDisableOrganicSelection(const bool &disable_organic_selection) {
    m_disable_organic_selection = disable_organic_selection;
    m_disable_organic_selection_isSet = true;
}

bool OAINamespacedDebugInput::is_disable_organic_selection_Set() const{
    return m_disable_organic_selection_isSet;
}

bool OAINamespacedDebugInput::is_disable_organic_selection_Valid() const{
    return m_disable_organic_selection_isValid;
}

QMap<QString, QString> OAINamespacedDebugInput::getForcedFlags() const {
    return m_forced_flags;
}
void OAINamespacedDebugInput::setForcedFlags(const QMap<QString, QString> &forced_flags) {
    m_forced_flags = forced_flags;
    m_forced_flags_isSet = true;
}

bool OAINamespacedDebugInput::is_forced_flags_Set() const{
    return m_forced_flags_isSet;
}

bool OAINamespacedDebugInput::is_forced_flags_Valid() const{
    return m_forced_flags_isValid;
}

QMap<QString, bool> OAINamespacedDebugInput::getForcedRollouts() const {
    return m_forced_rollouts;
}
void OAINamespacedDebugInput::setForcedRollouts(const QMap<QString, bool> &forced_rollouts) {
    m_forced_rollouts = forced_rollouts;
    m_forced_rollouts_isSet = true;
}

bool OAINamespacedDebugInput::is_forced_rollouts_Set() const{
    return m_forced_rollouts_isSet;
}

bool OAINamespacedDebugInput::is_forced_rollouts_Valid() const{
    return m_forced_rollouts_isValid;
}

QString OAINamespacedDebugInput::getTestingMode() const {
    return m_testing_mode;
}
void OAINamespacedDebugInput::setTestingMode(const QString &testing_mode) {
    m_testing_mode = testing_mode;
    m_testing_mode_isSet = true;
}

bool OAINamespacedDebugInput::is_testing_mode_Set() const{
    return m_testing_mode_isSet;
}

bool OAINamespacedDebugInput::is_testing_mode_Valid() const{
    return m_testing_mode_isValid;
}

bool OAINamespacedDebugInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolutely_forced_exp_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolutely_forced_exp_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolutely_forced_exps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditionally_forced_exp_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditionally_forced_exp_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditionally_forced_exps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_automatic_enrollment_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_exp_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_exp_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_exps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_manual_enrollment_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_organic_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_rollouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespacedDebugInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
