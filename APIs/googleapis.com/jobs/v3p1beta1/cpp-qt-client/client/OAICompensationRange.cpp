/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensationRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensationRange::OAICompensationRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensationRange::OAICompensationRange() {
    this->initializeModel();
}

OAICompensationRange::~OAICompensationRange() {}

void OAICompensationRange::initializeModel() {

    m_max_compensation_isSet = false;
    m_max_compensation_isValid = false;

    m_min_compensation_isSet = false;
    m_min_compensation_isValid = false;
}

void OAICompensationRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensationRange::fromJsonObject(QJsonObject json) {

    m_max_compensation_isValid = ::OpenAPI::fromJsonValue(m_max_compensation, json[QString("maxCompensation")]);
    m_max_compensation_isSet = !json[QString("maxCompensation")].isNull() && m_max_compensation_isValid;

    m_min_compensation_isValid = ::OpenAPI::fromJsonValue(m_min_compensation, json[QString("minCompensation")]);
    m_min_compensation_isSet = !json[QString("minCompensation")].isNull() && m_min_compensation_isValid;
}

QString OAICompensationRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensationRange::asJsonObject() const {
    QJsonObject obj;
    if (m_max_compensation.isSet()) {
        obj.insert(QString("maxCompensation"), ::OpenAPI::toJsonValue(m_max_compensation));
    }
    if (m_min_compensation.isSet()) {
        obj.insert(QString("minCompensation"), ::OpenAPI::toJsonValue(m_min_compensation));
    }
    return obj;
}

OAIMoney OAICompensationRange::getMaxCompensation() const {
    return m_max_compensation;
}
void OAICompensationRange::setMaxCompensation(const OAIMoney &max_compensation) {
    m_max_compensation = max_compensation;
    m_max_compensation_isSet = true;
}

bool OAICompensationRange::is_max_compensation_Set() const{
    return m_max_compensation_isSet;
}

bool OAICompensationRange::is_max_compensation_Valid() const{
    return m_max_compensation_isValid;
}

OAIMoney OAICompensationRange::getMinCompensation() const {
    return m_min_compensation;
}
void OAICompensationRange::setMinCompensation(const OAIMoney &min_compensation) {
    m_min_compensation = min_compensation;
    m_min_compensation_isSet = true;
}

bool OAICompensationRange::is_min_compensation_Set() const{
    return m_min_compensation_isSet;
}

bool OAICompensationRange::is_min_compensation_Valid() const{
    return m_min_compensation_isValid;
}

bool OAICompensationRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_compensation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_compensation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensationRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
