/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_application_info_isSet = false;
    m_application_info_isValid = false;

    m_company_display_name_isSet = false;
    m_company_display_name_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_compensation_info_isSet = false;
    m_compensation_info_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_degree_types_isSet = false;
    m_degree_types_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_derived_info_isSet = false;
    m_derived_info_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employment_types_isSet = false;
    m_employment_types_isValid = false;

    m_incentives_isSet = false;
    m_incentives_isValid = false;

    m_job_benefits_isSet = false;
    m_job_benefits_isValid = false;

    m_job_end_time_isSet = false;
    m_job_end_time_isValid = false;

    m_job_level_isSet = false;
    m_job_level_isValid = false;

    m_job_start_time_isSet = false;
    m_job_start_time_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_posting_create_time_isSet = false;
    m_posting_create_time_isValid = false;

    m_posting_expire_time_isSet = false;
    m_posting_expire_time_isValid = false;

    m_posting_publish_time_isSet = false;
    m_posting_publish_time_isValid = false;

    m_posting_region_isSet = false;
    m_posting_region_isValid = false;

    m_posting_update_time_isSet = false;
    m_posting_update_time_isValid = false;

    m_processing_options_isSet = false;
    m_processing_options_isValid = false;

    m_promotion_value_isSet = false;
    m_promotion_value_isValid = false;

    m_qualifications_isSet = false;
    m_qualifications_isValid = false;

    m_requisition_id_isSet = false;
    m_requisition_id_isValid = false;

    m_responsibilities_isSet = false;
    m_responsibilities_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_application_info_isValid = ::OpenAPI::fromJsonValue(m_application_info, json[QString("applicationInfo")]);
    m_application_info_isSet = !json[QString("applicationInfo")].isNull() && m_application_info_isValid;

    m_company_display_name_isValid = ::OpenAPI::fromJsonValue(m_company_display_name, json[QString("companyDisplayName")]);
    m_company_display_name_isSet = !json[QString("companyDisplayName")].isNull() && m_company_display_name_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_compensation_info_isValid = ::OpenAPI::fromJsonValue(m_compensation_info, json[QString("compensationInfo")]);
    m_compensation_info_isSet = !json[QString("compensationInfo")].isNull() && m_compensation_info_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("customAttributes")]);
    m_custom_attributes_isSet = !json[QString("customAttributes")].isNull() && m_custom_attributes_isValid;

    m_degree_types_isValid = ::OpenAPI::fromJsonValue(m_degree_types, json[QString("degreeTypes")]);
    m_degree_types_isSet = !json[QString("degreeTypes")].isNull() && m_degree_types_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_derived_info_isValid = ::OpenAPI::fromJsonValue(m_derived_info, json[QString("derivedInfo")]);
    m_derived_info_isSet = !json[QString("derivedInfo")].isNull() && m_derived_info_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employment_types_isValid = ::OpenAPI::fromJsonValue(m_employment_types, json[QString("employmentTypes")]);
    m_employment_types_isSet = !json[QString("employmentTypes")].isNull() && m_employment_types_isValid;

    m_incentives_isValid = ::OpenAPI::fromJsonValue(m_incentives, json[QString("incentives")]);
    m_incentives_isSet = !json[QString("incentives")].isNull() && m_incentives_isValid;

    m_job_benefits_isValid = ::OpenAPI::fromJsonValue(m_job_benefits, json[QString("jobBenefits")]);
    m_job_benefits_isSet = !json[QString("jobBenefits")].isNull() && m_job_benefits_isValid;

    m_job_end_time_isValid = ::OpenAPI::fromJsonValue(m_job_end_time, json[QString("jobEndTime")]);
    m_job_end_time_isSet = !json[QString("jobEndTime")].isNull() && m_job_end_time_isValid;

    m_job_level_isValid = ::OpenAPI::fromJsonValue(m_job_level, json[QString("jobLevel")]);
    m_job_level_isSet = !json[QString("jobLevel")].isNull() && m_job_level_isValid;

    m_job_start_time_isValid = ::OpenAPI::fromJsonValue(m_job_start_time, json[QString("jobStartTime")]);
    m_job_start_time_isSet = !json[QString("jobStartTime")].isNull() && m_job_start_time_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_posting_create_time_isValid = ::OpenAPI::fromJsonValue(m_posting_create_time, json[QString("postingCreateTime")]);
    m_posting_create_time_isSet = !json[QString("postingCreateTime")].isNull() && m_posting_create_time_isValid;

    m_posting_expire_time_isValid = ::OpenAPI::fromJsonValue(m_posting_expire_time, json[QString("postingExpireTime")]);
    m_posting_expire_time_isSet = !json[QString("postingExpireTime")].isNull() && m_posting_expire_time_isValid;

    m_posting_publish_time_isValid = ::OpenAPI::fromJsonValue(m_posting_publish_time, json[QString("postingPublishTime")]);
    m_posting_publish_time_isSet = !json[QString("postingPublishTime")].isNull() && m_posting_publish_time_isValid;

    m_posting_region_isValid = ::OpenAPI::fromJsonValue(m_posting_region, json[QString("postingRegion")]);
    m_posting_region_isSet = !json[QString("postingRegion")].isNull() && m_posting_region_isValid;

    m_posting_update_time_isValid = ::OpenAPI::fromJsonValue(m_posting_update_time, json[QString("postingUpdateTime")]);
    m_posting_update_time_isSet = !json[QString("postingUpdateTime")].isNull() && m_posting_update_time_isValid;

    m_processing_options_isValid = ::OpenAPI::fromJsonValue(m_processing_options, json[QString("processingOptions")]);
    m_processing_options_isSet = !json[QString("processingOptions")].isNull() && m_processing_options_isValid;

    m_promotion_value_isValid = ::OpenAPI::fromJsonValue(m_promotion_value, json[QString("promotionValue")]);
    m_promotion_value_isSet = !json[QString("promotionValue")].isNull() && m_promotion_value_isValid;

    m_qualifications_isValid = ::OpenAPI::fromJsonValue(m_qualifications, json[QString("qualifications")]);
    m_qualifications_isSet = !json[QString("qualifications")].isNull() && m_qualifications_isValid;

    m_requisition_id_isValid = ::OpenAPI::fromJsonValue(m_requisition_id, json[QString("requisitionId")]);
    m_requisition_id_isSet = !json[QString("requisitionId")].isNull() && m_requisition_id_isValid;

    m_responsibilities_isValid = ::OpenAPI::fromJsonValue(m_responsibilities, json[QString("responsibilities")]);
    m_responsibilities_isSet = !json[QString("responsibilities")].isNull() && m_responsibilities_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_application_info.isSet()) {
        obj.insert(QString("applicationInfo"), ::OpenAPI::toJsonValue(m_application_info));
    }
    if (m_company_display_name_isSet) {
        obj.insert(QString("companyDisplayName"), ::OpenAPI::toJsonValue(m_company_display_name));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_compensation_info.isSet()) {
        obj.insert(QString("compensationInfo"), ::OpenAPI::toJsonValue(m_compensation_info));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("customAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_degree_types.size() > 0) {
        obj.insert(QString("degreeTypes"), ::OpenAPI::toJsonValue(m_degree_types));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_derived_info.isSet()) {
        obj.insert(QString("derivedInfo"), ::OpenAPI::toJsonValue(m_derived_info));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employment_types.size() > 0) {
        obj.insert(QString("employmentTypes"), ::OpenAPI::toJsonValue(m_employment_types));
    }
    if (m_incentives_isSet) {
        obj.insert(QString("incentives"), ::OpenAPI::toJsonValue(m_incentives));
    }
    if (m_job_benefits.size() > 0) {
        obj.insert(QString("jobBenefits"), ::OpenAPI::toJsonValue(m_job_benefits));
    }
    if (m_job_end_time_isSet) {
        obj.insert(QString("jobEndTime"), ::OpenAPI::toJsonValue(m_job_end_time));
    }
    if (m_job_level_isSet) {
        obj.insert(QString("jobLevel"), ::OpenAPI::toJsonValue(m_job_level));
    }
    if (m_job_start_time_isSet) {
        obj.insert(QString("jobStartTime"), ::OpenAPI::toJsonValue(m_job_start_time));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_posting_create_time_isSet) {
        obj.insert(QString("postingCreateTime"), ::OpenAPI::toJsonValue(m_posting_create_time));
    }
    if (m_posting_expire_time_isSet) {
        obj.insert(QString("postingExpireTime"), ::OpenAPI::toJsonValue(m_posting_expire_time));
    }
    if (m_posting_publish_time_isSet) {
        obj.insert(QString("postingPublishTime"), ::OpenAPI::toJsonValue(m_posting_publish_time));
    }
    if (m_posting_region_isSet) {
        obj.insert(QString("postingRegion"), ::OpenAPI::toJsonValue(m_posting_region));
    }
    if (m_posting_update_time_isSet) {
        obj.insert(QString("postingUpdateTime"), ::OpenAPI::toJsonValue(m_posting_update_time));
    }
    if (m_processing_options.isSet()) {
        obj.insert(QString("processingOptions"), ::OpenAPI::toJsonValue(m_processing_options));
    }
    if (m_promotion_value_isSet) {
        obj.insert(QString("promotionValue"), ::OpenAPI::toJsonValue(m_promotion_value));
    }
    if (m_qualifications_isSet) {
        obj.insert(QString("qualifications"), ::OpenAPI::toJsonValue(m_qualifications));
    }
    if (m_requisition_id_isSet) {
        obj.insert(QString("requisitionId"), ::OpenAPI::toJsonValue(m_requisition_id));
    }
    if (m_responsibilities_isSet) {
        obj.insert(QString("responsibilities"), ::OpenAPI::toJsonValue(m_responsibilities));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QList<QString> OAIJob::getAddresses() const {
    return m_addresses;
}
void OAIJob::setAddresses(const QList<QString> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIJob::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIJob::is_addresses_Valid() const{
    return m_addresses_isValid;
}

OAIApplicationInfo OAIJob::getApplicationInfo() const {
    return m_application_info;
}
void OAIJob::setApplicationInfo(const OAIApplicationInfo &application_info) {
    m_application_info = application_info;
    m_application_info_isSet = true;
}

bool OAIJob::is_application_info_Set() const{
    return m_application_info_isSet;
}

bool OAIJob::is_application_info_Valid() const{
    return m_application_info_isValid;
}

QString OAIJob::getCompanyDisplayName() const {
    return m_company_display_name;
}
void OAIJob::setCompanyDisplayName(const QString &company_display_name) {
    m_company_display_name = company_display_name;
    m_company_display_name_isSet = true;
}

bool OAIJob::is_company_display_name_Set() const{
    return m_company_display_name_isSet;
}

bool OAIJob::is_company_display_name_Valid() const{
    return m_company_display_name_isValid;
}

QString OAIJob::getCompanyName() const {
    return m_company_name;
}
void OAIJob::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIJob::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIJob::is_company_name_Valid() const{
    return m_company_name_isValid;
}

OAICompensationInfo OAIJob::getCompensationInfo() const {
    return m_compensation_info;
}
void OAIJob::setCompensationInfo(const OAICompensationInfo &compensation_info) {
    m_compensation_info = compensation_info;
    m_compensation_info_isSet = true;
}

bool OAIJob::is_compensation_info_Set() const{
    return m_compensation_info_isSet;
}

bool OAIJob::is_compensation_info_Valid() const{
    return m_compensation_info_isValid;
}

QMap<QString, OAICustomAttribute> OAIJob::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIJob::setCustomAttributes(const QMap<QString, OAICustomAttribute> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIJob::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIJob::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QList<QString> OAIJob::getDegreeTypes() const {
    return m_degree_types;
}
void OAIJob::setDegreeTypes(const QList<QString> &degree_types) {
    m_degree_types = degree_types;
    m_degree_types_isSet = true;
}

bool OAIJob::is_degree_types_Set() const{
    return m_degree_types_isSet;
}

bool OAIJob::is_degree_types_Valid() const{
    return m_degree_types_isValid;
}

QString OAIJob::getDepartment() const {
    return m_department;
}
void OAIJob::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIJob::is_department_Set() const{
    return m_department_isSet;
}

bool OAIJob::is_department_Valid() const{
    return m_department_isValid;
}

OAIJobDerivedInfo OAIJob::getDerivedInfo() const {
    return m_derived_info;
}
void OAIJob::setDerivedInfo(const OAIJobDerivedInfo &derived_info) {
    m_derived_info = derived_info;
    m_derived_info_isSet = true;
}

bool OAIJob::is_derived_info_Set() const{
    return m_derived_info_isSet;
}

bool OAIJob::is_derived_info_Valid() const{
    return m_derived_info_isValid;
}

QString OAIJob::getDescription() const {
    return m_description;
}
void OAIJob::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJob::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJob::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIJob::getEmploymentTypes() const {
    return m_employment_types;
}
void OAIJob::setEmploymentTypes(const QList<QString> &employment_types) {
    m_employment_types = employment_types;
    m_employment_types_isSet = true;
}

bool OAIJob::is_employment_types_Set() const{
    return m_employment_types_isSet;
}

bool OAIJob::is_employment_types_Valid() const{
    return m_employment_types_isValid;
}

QString OAIJob::getIncentives() const {
    return m_incentives;
}
void OAIJob::setIncentives(const QString &incentives) {
    m_incentives = incentives;
    m_incentives_isSet = true;
}

bool OAIJob::is_incentives_Set() const{
    return m_incentives_isSet;
}

bool OAIJob::is_incentives_Valid() const{
    return m_incentives_isValid;
}

QList<QString> OAIJob::getJobBenefits() const {
    return m_job_benefits;
}
void OAIJob::setJobBenefits(const QList<QString> &job_benefits) {
    m_job_benefits = job_benefits;
    m_job_benefits_isSet = true;
}

bool OAIJob::is_job_benefits_Set() const{
    return m_job_benefits_isSet;
}

bool OAIJob::is_job_benefits_Valid() const{
    return m_job_benefits_isValid;
}

QString OAIJob::getJobEndTime() const {
    return m_job_end_time;
}
void OAIJob::setJobEndTime(const QString &job_end_time) {
    m_job_end_time = job_end_time;
    m_job_end_time_isSet = true;
}

bool OAIJob::is_job_end_time_Set() const{
    return m_job_end_time_isSet;
}

bool OAIJob::is_job_end_time_Valid() const{
    return m_job_end_time_isValid;
}

QString OAIJob::getJobLevel() const {
    return m_job_level;
}
void OAIJob::setJobLevel(const QString &job_level) {
    m_job_level = job_level;
    m_job_level_isSet = true;
}

bool OAIJob::is_job_level_Set() const{
    return m_job_level_isSet;
}

bool OAIJob::is_job_level_Valid() const{
    return m_job_level_isValid;
}

QString OAIJob::getJobStartTime() const {
    return m_job_start_time;
}
void OAIJob::setJobStartTime(const QString &job_start_time) {
    m_job_start_time = job_start_time;
    m_job_start_time_isSet = true;
}

bool OAIJob::is_job_start_time_Set() const{
    return m_job_start_time_isSet;
}

bool OAIJob::is_job_start_time_Valid() const{
    return m_job_start_time_isValid;
}

QString OAIJob::getLanguageCode() const {
    return m_language_code;
}
void OAIJob::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIJob::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIJob::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJob::getPostingCreateTime() const {
    return m_posting_create_time;
}
void OAIJob::setPostingCreateTime(const QString &posting_create_time) {
    m_posting_create_time = posting_create_time;
    m_posting_create_time_isSet = true;
}

bool OAIJob::is_posting_create_time_Set() const{
    return m_posting_create_time_isSet;
}

bool OAIJob::is_posting_create_time_Valid() const{
    return m_posting_create_time_isValid;
}

QString OAIJob::getPostingExpireTime() const {
    return m_posting_expire_time;
}
void OAIJob::setPostingExpireTime(const QString &posting_expire_time) {
    m_posting_expire_time = posting_expire_time;
    m_posting_expire_time_isSet = true;
}

bool OAIJob::is_posting_expire_time_Set() const{
    return m_posting_expire_time_isSet;
}

bool OAIJob::is_posting_expire_time_Valid() const{
    return m_posting_expire_time_isValid;
}

QString OAIJob::getPostingPublishTime() const {
    return m_posting_publish_time;
}
void OAIJob::setPostingPublishTime(const QString &posting_publish_time) {
    m_posting_publish_time = posting_publish_time;
    m_posting_publish_time_isSet = true;
}

bool OAIJob::is_posting_publish_time_Set() const{
    return m_posting_publish_time_isSet;
}

bool OAIJob::is_posting_publish_time_Valid() const{
    return m_posting_publish_time_isValid;
}

QString OAIJob::getPostingRegion() const {
    return m_posting_region;
}
void OAIJob::setPostingRegion(const QString &posting_region) {
    m_posting_region = posting_region;
    m_posting_region_isSet = true;
}

bool OAIJob::is_posting_region_Set() const{
    return m_posting_region_isSet;
}

bool OAIJob::is_posting_region_Valid() const{
    return m_posting_region_isValid;
}

QString OAIJob::getPostingUpdateTime() const {
    return m_posting_update_time;
}
void OAIJob::setPostingUpdateTime(const QString &posting_update_time) {
    m_posting_update_time = posting_update_time;
    m_posting_update_time_isSet = true;
}

bool OAIJob::is_posting_update_time_Set() const{
    return m_posting_update_time_isSet;
}

bool OAIJob::is_posting_update_time_Valid() const{
    return m_posting_update_time_isValid;
}

OAIProcessingOptions OAIJob::getProcessingOptions() const {
    return m_processing_options;
}
void OAIJob::setProcessingOptions(const OAIProcessingOptions &processing_options) {
    m_processing_options = processing_options;
    m_processing_options_isSet = true;
}

bool OAIJob::is_processing_options_Set() const{
    return m_processing_options_isSet;
}

bool OAIJob::is_processing_options_Valid() const{
    return m_processing_options_isValid;
}

qint32 OAIJob::getPromotionValue() const {
    return m_promotion_value;
}
void OAIJob::setPromotionValue(const qint32 &promotion_value) {
    m_promotion_value = promotion_value;
    m_promotion_value_isSet = true;
}

bool OAIJob::is_promotion_value_Set() const{
    return m_promotion_value_isSet;
}

bool OAIJob::is_promotion_value_Valid() const{
    return m_promotion_value_isValid;
}

QString OAIJob::getQualifications() const {
    return m_qualifications;
}
void OAIJob::setQualifications(const QString &qualifications) {
    m_qualifications = qualifications;
    m_qualifications_isSet = true;
}

bool OAIJob::is_qualifications_Set() const{
    return m_qualifications_isSet;
}

bool OAIJob::is_qualifications_Valid() const{
    return m_qualifications_isValid;
}

QString OAIJob::getRequisitionId() const {
    return m_requisition_id;
}
void OAIJob::setRequisitionId(const QString &requisition_id) {
    m_requisition_id = requisition_id;
    m_requisition_id_isSet = true;
}

bool OAIJob::is_requisition_id_Set() const{
    return m_requisition_id_isSet;
}

bool OAIJob::is_requisition_id_Valid() const{
    return m_requisition_id_isValid;
}

QString OAIJob::getResponsibilities() const {
    return m_responsibilities;
}
void OAIJob::setResponsibilities(const QString &responsibilities) {
    m_responsibilities = responsibilities;
    m_responsibilities_isSet = true;
}

bool OAIJob::is_responsibilities_Set() const{
    return m_responsibilities_isSet;
}

bool OAIJob::is_responsibilities_Valid() const{
    return m_responsibilities_isValid;
}

QString OAIJob::getTitle() const {
    return m_title;
}
void OAIJob::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIJob::is_title_Set() const{
    return m_title_isSet;
}

bool OAIJob::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIJob::getVisibility() const {
    return m_visibility;
}
void OAIJob::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIJob::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIJob::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compensation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_degree_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_incentives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_benefits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posting_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requisition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsibilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
