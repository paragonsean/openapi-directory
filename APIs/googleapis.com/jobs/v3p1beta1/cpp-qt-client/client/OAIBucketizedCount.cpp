/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketizedCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketizedCount::OAIBucketizedCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketizedCount::OAIBucketizedCount() {
    this->initializeModel();
}

OAIBucketizedCount::~OAIBucketizedCount() {}

void OAIBucketizedCount::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;
}

void OAIBucketizedCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketizedCount::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;
}

QString OAIBucketizedCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketizedCount::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    return obj;
}

qint32 OAIBucketizedCount::getCount() const {
    return m_count;
}
void OAIBucketizedCount::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBucketizedCount::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBucketizedCount::is_count_Valid() const{
    return m_count_isValid;
}

OAIBucketRange OAIBucketizedCount::getRange() const {
    return m_range;
}
void OAIBucketizedCount::setRange(const OAIBucketRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIBucketizedCount::is_range_Set() const{
    return m_range_isSet;
}

bool OAIBucketizedCount::is_range_Valid() const{
    return m_range_isValid;
}

bool OAIBucketizedCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketizedCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
