/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationFilter::OAILocationFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationFilter::OAILocationFilter() {
    this->initializeModel();
}

OAILocationFilter::~OAILocationFilter() {}

void OAILocationFilter::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_distance_in_miles_isSet = false;
    m_distance_in_miles_isValid = false;

    m_lat_lng_isSet = false;
    m_lat_lng_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_telecommute_preference_isSet = false;
    m_telecommute_preference_isValid = false;
}

void OAILocationFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationFilter::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_distance_in_miles_isValid = ::OpenAPI::fromJsonValue(m_distance_in_miles, json[QString("distanceInMiles")]);
    m_distance_in_miles_isSet = !json[QString("distanceInMiles")].isNull() && m_distance_in_miles_isValid;

    m_lat_lng_isValid = ::OpenAPI::fromJsonValue(m_lat_lng, json[QString("latLng")]);
    m_lat_lng_isSet = !json[QString("latLng")].isNull() && m_lat_lng_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_telecommute_preference_isValid = ::OpenAPI::fromJsonValue(m_telecommute_preference, json[QString("telecommutePreference")]);
    m_telecommute_preference_isSet = !json[QString("telecommutePreference")].isNull() && m_telecommute_preference_isValid;
}

QString OAILocationFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_distance_in_miles_isSet) {
        obj.insert(QString("distanceInMiles"), ::OpenAPI::toJsonValue(m_distance_in_miles));
    }
    if (m_lat_lng.isSet()) {
        obj.insert(QString("latLng"), ::OpenAPI::toJsonValue(m_lat_lng));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_telecommute_preference_isSet) {
        obj.insert(QString("telecommutePreference"), ::OpenAPI::toJsonValue(m_telecommute_preference));
    }
    return obj;
}

QString OAILocationFilter::getAddress() const {
    return m_address;
}
void OAILocationFilter::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocationFilter::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocationFilter::is_address_Valid() const{
    return m_address_isValid;
}

double OAILocationFilter::getDistanceInMiles() const {
    return m_distance_in_miles;
}
void OAILocationFilter::setDistanceInMiles(const double &distance_in_miles) {
    m_distance_in_miles = distance_in_miles;
    m_distance_in_miles_isSet = true;
}

bool OAILocationFilter::is_distance_in_miles_Set() const{
    return m_distance_in_miles_isSet;
}

bool OAILocationFilter::is_distance_in_miles_Valid() const{
    return m_distance_in_miles_isValid;
}

OAILatLng OAILocationFilter::getLatLng() const {
    return m_lat_lng;
}
void OAILocationFilter::setLatLng(const OAILatLng &lat_lng) {
    m_lat_lng = lat_lng;
    m_lat_lng_isSet = true;
}

bool OAILocationFilter::is_lat_lng_Set() const{
    return m_lat_lng_isSet;
}

bool OAILocationFilter::is_lat_lng_Valid() const{
    return m_lat_lng_isValid;
}

QString OAILocationFilter::getRegionCode() const {
    return m_region_code;
}
void OAILocationFilter::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAILocationFilter::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAILocationFilter::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAILocationFilter::getTelecommutePreference() const {
    return m_telecommute_preference;
}
void OAILocationFilter::setTelecommutePreference(const QString &telecommute_preference) {
    m_telecommute_preference = telecommute_preference;
    m_telecommute_preference_isSet = true;
}

bool OAILocationFilter::is_telecommute_preference_Set() const{
    return m_telecommute_preference_isSet;
}

bool OAILocationFilter::is_telecommute_preference_Valid() const{
    return m_telecommute_preference_isValid;
}

bool OAILocationFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_in_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_lng.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecommute_preference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
