/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensationHistogramRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensationHistogramRequest::OAICompensationHistogramRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensationHistogramRequest::OAICompensationHistogramRequest() {
    this->initializeModel();
}

OAICompensationHistogramRequest::~OAICompensationHistogramRequest() {}

void OAICompensationHistogramRequest::initializeModel() {

    m_bucketing_option_isSet = false;
    m_bucketing_option_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICompensationHistogramRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensationHistogramRequest::fromJsonObject(QJsonObject json) {

    m_bucketing_option_isValid = ::OpenAPI::fromJsonValue(m_bucketing_option, json[QString("bucketingOption")]);
    m_bucketing_option_isSet = !json[QString("bucketingOption")].isNull() && m_bucketing_option_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICompensationHistogramRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensationHistogramRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bucketing_option.isSet()) {
        obj.insert(QString("bucketingOption"), ::OpenAPI::toJsonValue(m_bucketing_option));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAINumericBucketingOption OAICompensationHistogramRequest::getBucketingOption() const {
    return m_bucketing_option;
}
void OAICompensationHistogramRequest::setBucketingOption(const OAINumericBucketingOption &bucketing_option) {
    m_bucketing_option = bucketing_option;
    m_bucketing_option_isSet = true;
}

bool OAICompensationHistogramRequest::is_bucketing_option_Set() const{
    return m_bucketing_option_isSet;
}

bool OAICompensationHistogramRequest::is_bucketing_option_Valid() const{
    return m_bucketing_option_isValid;
}

QString OAICompensationHistogramRequest::getType() const {
    return m_type;
}
void OAICompensationHistogramRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompensationHistogramRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompensationHistogramRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICompensationHistogramRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucketing_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensationHistogramRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
