# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_info import DeviceInfo
from openapi_server import util


class RequestMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_info: DeviceInfo=None, domain: str=None, session_id: str=None, user_id: str=None):
        """RequestMetadata - a model defined in OpenAPI

        :param device_info: The device_info of this RequestMetadata.
        :param domain: The domain of this RequestMetadata.
        :param session_id: The session_id of this RequestMetadata.
        :param user_id: The user_id of this RequestMetadata.
        """
        self.openapi_types = {
            'device_info': DeviceInfo,
            'domain': str,
            'session_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'device_info': 'deviceInfo',
            'domain': 'domain',
            'session_id': 'sessionId',
            'user_id': 'userId'
        }

        self._device_info = device_info
        self._domain = domain
        self._session_id = session_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestMetadata of this RequestMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_info(self):
        """Gets the device_info of this RequestMetadata.


        :return: The device_info of this RequestMetadata.
        :rtype: DeviceInfo
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """Sets the device_info of this RequestMetadata.


        :param device_info: The device_info of this RequestMetadata.
        :type device_info: DeviceInfo
        """

        self._device_info = device_info

    @property
    def domain(self):
        """Gets the domain of this RequestMetadata.

        Required. The client-defined scope or source of the service call, which typically is the domain on which the service has been implemented and is currently being run. For example, if the service is being run by client *Foo, Inc.*, on job board www.foo.com and career site www.bar.com, then this field is set to \"foo.com\" for use on the job board, and \"bar.com\" for use on the career site. If this field isn't available for some reason, send \"UNKNOWN\". Any improvements to the model for a particular tenant site rely on this field being set correctly to a domain. The maximum number of allowed characters is 255.

        :return: The domain of this RequestMetadata.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RequestMetadata.

        Required. The client-defined scope or source of the service call, which typically is the domain on which the service has been implemented and is currently being run. For example, if the service is being run by client *Foo, Inc.*, on job board www.foo.com and career site www.bar.com, then this field is set to \"foo.com\" for use on the job board, and \"bar.com\" for use on the career site. If this field isn't available for some reason, send \"UNKNOWN\". Any improvements to the model for a particular tenant site rely on this field being set correctly to a domain. The maximum number of allowed characters is 255.

        :param domain: The domain of this RequestMetadata.
        :type domain: str
        """

        self._domain = domain

    @property
    def session_id(self):
        """Gets the session_id of this RequestMetadata.

        Required. A unique session identification string. A session is defined as the duration of an end user's interaction with the service over a certain period. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to some unique session_id. The maximum number of allowed characters is 255.

        :return: The session_id of this RequestMetadata.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this RequestMetadata.

        Required. A unique session identification string. A session is defined as the duration of an end user's interaction with the service over a certain period. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to some unique session_id. The maximum number of allowed characters is 255.

        :param session_id: The session_id of this RequestMetadata.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def user_id(self):
        """Gets the user_id of this RequestMetadata.

        Required. A unique user identification string, as determined by the client. To have the strongest positive impact on search quality make sure the client-level is unique. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to a unique user_id. The maximum number of allowed characters is 255.

        :return: The user_id of this RequestMetadata.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RequestMetadata.

        Required. A unique user identification string, as determined by the client. To have the strongest positive impact on search quality make sure the client-level is unique. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to a unique user_id. The maximum number of allowed characters is 255.

        :param user_id: The user_id of this RequestMetadata.
        :type user_id: str
        """

        self._user_id = user_id
