# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compensation_histogram_request import CompensationHistogramRequest
from openapi_server.models.custom_attribute_histogram_request import CustomAttributeHistogramRequest
from openapi_server import util


class HistogramFacets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compensation_histogram_facets: List[CompensationHistogramRequest]=None, custom_attribute_histogram_facets: List[CustomAttributeHistogramRequest]=None, simple_histogram_facets: List[str]=None):
        """HistogramFacets - a model defined in OpenAPI

        :param compensation_histogram_facets: The compensation_histogram_facets of this HistogramFacets.
        :param custom_attribute_histogram_facets: The custom_attribute_histogram_facets of this HistogramFacets.
        :param simple_histogram_facets: The simple_histogram_facets of this HistogramFacets.
        """
        self.openapi_types = {
            'compensation_histogram_facets': List[CompensationHistogramRequest],
            'custom_attribute_histogram_facets': List[CustomAttributeHistogramRequest],
            'simple_histogram_facets': List[str]
        }

        self.attribute_map = {
            'compensation_histogram_facets': 'compensationHistogramFacets',
            'custom_attribute_histogram_facets': 'customAttributeHistogramFacets',
            'simple_histogram_facets': 'simpleHistogramFacets'
        }

        self._compensation_histogram_facets = compensation_histogram_facets
        self._custom_attribute_histogram_facets = custom_attribute_histogram_facets
        self._simple_histogram_facets = simple_histogram_facets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramFacets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramFacets of this HistogramFacets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compensation_histogram_facets(self):
        """Gets the compensation_histogram_facets of this HistogramFacets.

        Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.

        :return: The compensation_histogram_facets of this HistogramFacets.
        :rtype: List[CompensationHistogramRequest]
        """
        return self._compensation_histogram_facets

    @compensation_histogram_facets.setter
    def compensation_histogram_facets(self, compensation_histogram_facets):
        """Sets the compensation_histogram_facets of this HistogramFacets.

        Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.

        :param compensation_histogram_facets: The compensation_histogram_facets of this HistogramFacets.
        :type compensation_histogram_facets: List[CompensationHistogramRequest]
        """

        self._compensation_histogram_facets = compensation_histogram_facets

    @property
    def custom_attribute_histogram_facets(self):
        """Gets the custom_attribute_histogram_facets of this HistogramFacets.

        Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.

        :return: The custom_attribute_histogram_facets of this HistogramFacets.
        :rtype: List[CustomAttributeHistogramRequest]
        """
        return self._custom_attribute_histogram_facets

    @custom_attribute_histogram_facets.setter
    def custom_attribute_histogram_facets(self, custom_attribute_histogram_facets):
        """Sets the custom_attribute_histogram_facets of this HistogramFacets.

        Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.

        :param custom_attribute_histogram_facets: The custom_attribute_histogram_facets of this HistogramFacets.
        :type custom_attribute_histogram_facets: List[CustomAttributeHistogramRequest]
        """

        self._custom_attribute_histogram_facets = custom_attribute_histogram_facets

    @property
    def simple_histogram_facets(self):
        """Gets the simple_histogram_facets of this HistogramFacets.

        Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.

        :return: The simple_histogram_facets of this HistogramFacets.
        :rtype: List[str]
        """
        return self._simple_histogram_facets

    @simple_histogram_facets.setter
    def simple_histogram_facets(self, simple_histogram_facets):
        """Sets the simple_histogram_facets of this HistogramFacets.

        Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.

        :param simple_histogram_facets: The simple_histogram_facets of this HistogramFacets.
        :type simple_histogram_facets: List[str]
        """
        allowed_values = ["SEARCH_TYPE_UNSPECIFIED", "COMPANY_ID", "EMPLOYMENT_TYPE", "COMPANY_SIZE", "DATE_PUBLISHED", "EDUCATION_LEVEL", "EXPERIENCE_LEVEL", "ADMIN_1", "COUNTRY", "CITY", "LOCALE", "LANGUAGE", "CATEGORY", "CITY_COORDINATE", "ADMIN_1_COUNTRY", "COMPANY_DISPLAY_NAME", "BASE_COMPENSATION_UNIT"]  # noqa: E501
        if not set(simple_histogram_facets).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `simple_histogram_facets` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(simple_histogram_facets) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._simple_histogram_facets = simple_histogram_facets
