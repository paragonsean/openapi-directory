# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class JobDerivedInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_categories: List[str]=None, locations: List[Location]=None):
        """JobDerivedInfo - a model defined in OpenAPI

        :param job_categories: The job_categories of this JobDerivedInfo.
        :param locations: The locations of this JobDerivedInfo.
        """
        self.openapi_types = {
            'job_categories': List[str],
            'locations': List[Location]
        }

        self.attribute_map = {
            'job_categories': 'jobCategories',
            'locations': 'locations'
        }

        self._job_categories = job_categories
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDerivedInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDerivedInfo of this JobDerivedInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_categories(self):
        """Gets the job_categories of this JobDerivedInfo.

        Job categories derived from Job.title and Job.description.

        :return: The job_categories of this JobDerivedInfo.
        :rtype: List[str]
        """
        return self._job_categories

    @job_categories.setter
    def job_categories(self, job_categories):
        """Sets the job_categories of this JobDerivedInfo.

        Job categories derived from Job.title and Job.description.

        :param job_categories: The job_categories of this JobDerivedInfo.
        :type job_categories: List[str]
        """
        allowed_values = ["JOB_CATEGORY_UNSPECIFIED", "ACCOUNTING_AND_FINANCE", "ADMINISTRATIVE_AND_OFFICE", "ADVERTISING_AND_MARKETING", "ANIMAL_CARE", "ART_FASHION_AND_DESIGN", "BUSINESS_OPERATIONS", "CLEANING_AND_FACILITIES", "COMPUTER_AND_IT", "CONSTRUCTION", "CUSTOMER_SERVICE", "EDUCATION", "ENTERTAINMENT_AND_TRAVEL", "FARMING_AND_OUTDOORS", "HEALTHCARE", "HUMAN_RESOURCES", "INSTALLATION_MAINTENANCE_AND_REPAIR", "LEGAL", "MANAGEMENT", "MANUFACTURING_AND_WAREHOUSE", "MEDIA_COMMUNICATIONS_AND_WRITING", "OIL_GAS_AND_MINING", "PERSONAL_CARE_AND_SERVICES", "PROTECTIVE_SERVICES", "REAL_ESTATE", "RESTAURANT_AND_HOSPITALITY", "SALES_AND_RETAIL", "SCIENCE_AND_ENGINEERING", "SOCIAL_SERVICES_AND_NON_PROFIT", "SPORTS_FITNESS_AND_RECREATION", "TRANSPORTATION_AND_LOGISTICS"]  # noqa: E501
        if not set(job_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `job_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(job_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._job_categories = job_categories

    @property
    def locations(self):
        """Gets the locations of this JobDerivedInfo.

        Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.

        :return: The locations of this JobDerivedInfo.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this JobDerivedInfo.

        Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.

        :param locations: The locations of this JobDerivedInfo.
        :type locations: List[Location]
        """

        self._locations = locations
