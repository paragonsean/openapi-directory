# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucketized_count import BucketizedCount
from openapi_server import util


class NumericBucketingResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[BucketizedCount]=None, max_value: float=None, min_value: float=None):
        """NumericBucketingResult - a model defined in OpenAPI

        :param counts: The counts of this NumericBucketingResult.
        :param max_value: The max_value of this NumericBucketingResult.
        :param min_value: The min_value of this NumericBucketingResult.
        """
        self.openapi_types = {
            'counts': List[BucketizedCount],
            'max_value': float,
            'min_value': float
        }

        self.attribute_map = {
            'counts': 'counts',
            'max_value': 'maxValue',
            'min_value': 'minValue'
        }

        self._counts = counts
        self._max_value = max_value
        self._min_value = min_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumericBucketingResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumericBucketingResult of this NumericBucketingResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this NumericBucketingResult.

        Count within each bucket. Its size is the length of NumericBucketingOption.bucket_bounds plus 1.

        :return: The counts of this NumericBucketingResult.
        :rtype: List[BucketizedCount]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this NumericBucketingResult.

        Count within each bucket. Its size is the length of NumericBucketingOption.bucket_bounds plus 1.

        :param counts: The counts of this NumericBucketingResult.
        :type counts: List[BucketizedCount]
        """

        self._counts = counts

    @property
    def max_value(self):
        """Gets the max_value of this NumericBucketingResult.

        Stores the maximum value of the numeric field. Is populated only if [NumericBucketingOption.requires_min_max] is set to true.

        :return: The max_value of this NumericBucketingResult.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this NumericBucketingResult.

        Stores the maximum value of the numeric field. Is populated only if [NumericBucketingOption.requires_min_max] is set to true.

        :param max_value: The max_value of this NumericBucketingResult.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this NumericBucketingResult.

        Stores the minimum value of the numeric field. Will be populated only if [NumericBucketingOption.requires_min_max] is set to true.

        :return: The min_value of this NumericBucketingResult.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this NumericBucketingResult.

        Stores the minimum value of the numeric field. Will be populated only if [NumericBucketingOption.requires_min_max] is set to true.

        :param min_value: The min_value of this NumericBucketingResult.
        :type min_value: float
        """

        self._min_value = min_value
