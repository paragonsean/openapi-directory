# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.histogram_query_result import HistogramQueryResult
from openapi_server.models.histogram_results import HistogramResults
from openapi_server.models.location import Location
from openapi_server.models.matching_job import MatchingJob
from openapi_server.models.response_metadata import ResponseMetadata
from openapi_server.models.spelling_correction import SpellingCorrection
from openapi_server import util


class SearchJobsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broadened_query_jobs_count: int=None, estimated_total_size: int=None, histogram_query_results: List[HistogramQueryResult]=None, histogram_results: HistogramResults=None, location_filters: List[Location]=None, matching_jobs: List[MatchingJob]=None, metadata: ResponseMetadata=None, next_page_token: str=None, spell_correction: SpellingCorrection=None, total_size: int=None):
        """SearchJobsResponse - a model defined in OpenAPI

        :param broadened_query_jobs_count: The broadened_query_jobs_count of this SearchJobsResponse.
        :param estimated_total_size: The estimated_total_size of this SearchJobsResponse.
        :param histogram_query_results: The histogram_query_results of this SearchJobsResponse.
        :param histogram_results: The histogram_results of this SearchJobsResponse.
        :param location_filters: The location_filters of this SearchJobsResponse.
        :param matching_jobs: The matching_jobs of this SearchJobsResponse.
        :param metadata: The metadata of this SearchJobsResponse.
        :param next_page_token: The next_page_token of this SearchJobsResponse.
        :param spell_correction: The spell_correction of this SearchJobsResponse.
        :param total_size: The total_size of this SearchJobsResponse.
        """
        self.openapi_types = {
            'broadened_query_jobs_count': int,
            'estimated_total_size': int,
            'histogram_query_results': List[HistogramQueryResult],
            'histogram_results': HistogramResults,
            'location_filters': List[Location],
            'matching_jobs': List[MatchingJob],
            'metadata': ResponseMetadata,
            'next_page_token': str,
            'spell_correction': SpellingCorrection,
            'total_size': int
        }

        self.attribute_map = {
            'broadened_query_jobs_count': 'broadenedQueryJobsCount',
            'estimated_total_size': 'estimatedTotalSize',
            'histogram_query_results': 'histogramQueryResults',
            'histogram_results': 'histogramResults',
            'location_filters': 'locationFilters',
            'matching_jobs': 'matchingJobs',
            'metadata': 'metadata',
            'next_page_token': 'nextPageToken',
            'spell_correction': 'spellCorrection',
            'total_size': 'totalSize'
        }

        self._broadened_query_jobs_count = broadened_query_jobs_count
        self._estimated_total_size = estimated_total_size
        self._histogram_query_results = histogram_query_results
        self._histogram_results = histogram_results
        self._location_filters = location_filters
        self._matching_jobs = matching_jobs
        self._metadata = metadata
        self._next_page_token = next_page_token
        self._spell_correction = spell_correction
        self._total_size = total_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchJobsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchJobsResponse of this SearchJobsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broadened_query_jobs_count(self):
        """Gets the broadened_query_jobs_count of this SearchJobsResponse.

        If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.

        :return: The broadened_query_jobs_count of this SearchJobsResponse.
        :rtype: int
        """
        return self._broadened_query_jobs_count

    @broadened_query_jobs_count.setter
    def broadened_query_jobs_count(self, broadened_query_jobs_count):
        """Sets the broadened_query_jobs_count of this SearchJobsResponse.

        If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.

        :param broadened_query_jobs_count: The broadened_query_jobs_count of this SearchJobsResponse.
        :type broadened_query_jobs_count: int
        """

        self._broadened_query_jobs_count = broadened_query_jobs_count

    @property
    def estimated_total_size(self):
        """Gets the estimated_total_size of this SearchJobsResponse.

        An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.

        :return: The estimated_total_size of this SearchJobsResponse.
        :rtype: int
        """
        return self._estimated_total_size

    @estimated_total_size.setter
    def estimated_total_size(self, estimated_total_size):
        """Sets the estimated_total_size of this SearchJobsResponse.

        An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.

        :param estimated_total_size: The estimated_total_size of this SearchJobsResponse.
        :type estimated_total_size: int
        """

        self._estimated_total_size = estimated_total_size

    @property
    def histogram_query_results(self):
        """Gets the histogram_query_results of this SearchJobsResponse.

        The histogram results that match with specified SearchJobsRequest.histogram_queries.

        :return: The histogram_query_results of this SearchJobsResponse.
        :rtype: List[HistogramQueryResult]
        """
        return self._histogram_query_results

    @histogram_query_results.setter
    def histogram_query_results(self, histogram_query_results):
        """Sets the histogram_query_results of this SearchJobsResponse.

        The histogram results that match with specified SearchJobsRequest.histogram_queries.

        :param histogram_query_results: The histogram_query_results of this SearchJobsResponse.
        :type histogram_query_results: List[HistogramQueryResult]
        """

        self._histogram_query_results = histogram_query_results

    @property
    def histogram_results(self):
        """Gets the histogram_results of this SearchJobsResponse.


        :return: The histogram_results of this SearchJobsResponse.
        :rtype: HistogramResults
        """
        return self._histogram_results

    @histogram_results.setter
    def histogram_results(self, histogram_results):
        """Sets the histogram_results of this SearchJobsResponse.


        :param histogram_results: The histogram_results of this SearchJobsResponse.
        :type histogram_results: HistogramResults
        """

        self._histogram_results = histogram_results

    @property
    def location_filters(self):
        """Gets the location_filters of this SearchJobsResponse.

        The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.

        :return: The location_filters of this SearchJobsResponse.
        :rtype: List[Location]
        """
        return self._location_filters

    @location_filters.setter
    def location_filters(self, location_filters):
        """Sets the location_filters of this SearchJobsResponse.

        The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.

        :param location_filters: The location_filters of this SearchJobsResponse.
        :type location_filters: List[Location]
        """

        self._location_filters = location_filters

    @property
    def matching_jobs(self):
        """Gets the matching_jobs of this SearchJobsResponse.

        The Job entities that match the specified SearchJobsRequest.

        :return: The matching_jobs of this SearchJobsResponse.
        :rtype: List[MatchingJob]
        """
        return self._matching_jobs

    @matching_jobs.setter
    def matching_jobs(self, matching_jobs):
        """Sets the matching_jobs of this SearchJobsResponse.

        The Job entities that match the specified SearchJobsRequest.

        :param matching_jobs: The matching_jobs of this SearchJobsResponse.
        :type matching_jobs: List[MatchingJob]
        """

        self._matching_jobs = matching_jobs

    @property
    def metadata(self):
        """Gets the metadata of this SearchJobsResponse.


        :return: The metadata of this SearchJobsResponse.
        :rtype: ResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SearchJobsResponse.


        :param metadata: The metadata of this SearchJobsResponse.
        :type metadata: ResponseMetadata
        """

        self._metadata = metadata

    @property
    def next_page_token(self):
        """Gets the next_page_token of this SearchJobsResponse.

        The token that specifies the starting position of the next page of results. This field is empty if there are no more results.

        :return: The next_page_token of this SearchJobsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this SearchJobsResponse.

        The token that specifies the starting position of the next page of results. This field is empty if there are no more results.

        :param next_page_token: The next_page_token of this SearchJobsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def spell_correction(self):
        """Gets the spell_correction of this SearchJobsResponse.


        :return: The spell_correction of this SearchJobsResponse.
        :rtype: SpellingCorrection
        """
        return self._spell_correction

    @spell_correction.setter
    def spell_correction(self, spell_correction):
        """Sets the spell_correction of this SearchJobsResponse.


        :param spell_correction: The spell_correction of this SearchJobsResponse.
        :type spell_correction: SpellingCorrection
        """

        self._spell_correction = spell_correction

    @property
    def total_size(self):
        """Gets the total_size of this SearchJobsResponse.

        The precise result count with limit 100,000.

        :return: The total_size of this SearchJobsResponse.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this SearchJobsResponse.

        The precise result count with limit 100,000.

        :param total_size: The total_size of this SearchJobsResponse.
        :type total_size: int
        """

        self._total_size = total_size
