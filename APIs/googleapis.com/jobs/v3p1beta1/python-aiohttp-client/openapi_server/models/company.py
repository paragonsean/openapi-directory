# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_derived_info import CompanyDerivedInfo
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, career_site_uri: str=None, derived_info: CompanyDerivedInfo=None, display_name: str=None, eeo_text: str=None, external_id: str=None, headquarters_address: str=None, hiring_agency: bool=None, image_uri: str=None, keyword_searchable_job_custom_attributes: List[str]=None, name: str=None, size: str=None, suspended: bool=None, website_uri: str=None):
        """Company - a model defined in OpenAPI

        :param career_site_uri: The career_site_uri of this Company.
        :param derived_info: The derived_info of this Company.
        :param display_name: The display_name of this Company.
        :param eeo_text: The eeo_text of this Company.
        :param external_id: The external_id of this Company.
        :param headquarters_address: The headquarters_address of this Company.
        :param hiring_agency: The hiring_agency of this Company.
        :param image_uri: The image_uri of this Company.
        :param keyword_searchable_job_custom_attributes: The keyword_searchable_job_custom_attributes of this Company.
        :param name: The name of this Company.
        :param size: The size of this Company.
        :param suspended: The suspended of this Company.
        :param website_uri: The website_uri of this Company.
        """
        self.openapi_types = {
            'career_site_uri': str,
            'derived_info': CompanyDerivedInfo,
            'display_name': str,
            'eeo_text': str,
            'external_id': str,
            'headquarters_address': str,
            'hiring_agency': bool,
            'image_uri': str,
            'keyword_searchable_job_custom_attributes': List[str],
            'name': str,
            'size': str,
            'suspended': bool,
            'website_uri': str
        }

        self.attribute_map = {
            'career_site_uri': 'careerSiteUri',
            'derived_info': 'derivedInfo',
            'display_name': 'displayName',
            'eeo_text': 'eeoText',
            'external_id': 'externalId',
            'headquarters_address': 'headquartersAddress',
            'hiring_agency': 'hiringAgency',
            'image_uri': 'imageUri',
            'keyword_searchable_job_custom_attributes': 'keywordSearchableJobCustomAttributes',
            'name': 'name',
            'size': 'size',
            'suspended': 'suspended',
            'website_uri': 'websiteUri'
        }

        self._career_site_uri = career_site_uri
        self._derived_info = derived_info
        self._display_name = display_name
        self._eeo_text = eeo_text
        self._external_id = external_id
        self._headquarters_address = headquarters_address
        self._hiring_agency = hiring_agency
        self._image_uri = image_uri
        self._keyword_searchable_job_custom_attributes = keyword_searchable_job_custom_attributes
        self._name = name
        self._size = size
        self._suspended = suspended
        self._website_uri = website_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def career_site_uri(self):
        """Gets the career_site_uri of this Company.

        Optional. The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\".

        :return: The career_site_uri of this Company.
        :rtype: str
        """
        return self._career_site_uri

    @career_site_uri.setter
    def career_site_uri(self, career_site_uri):
        """Sets the career_site_uri of this Company.

        Optional. The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\".

        :param career_site_uri: The career_site_uri of this Company.
        :type career_site_uri: str
        """

        self._career_site_uri = career_site_uri

    @property
    def derived_info(self):
        """Gets the derived_info of this Company.


        :return: The derived_info of this Company.
        :rtype: CompanyDerivedInfo
        """
        return self._derived_info

    @derived_info.setter
    def derived_info(self, derived_info):
        """Sets the derived_info of this Company.


        :param derived_info: The derived_info of this Company.
        :type derived_info: CompanyDerivedInfo
        """

        self._derived_info = derived_info

    @property
    def display_name(self):
        """Gets the display_name of this Company.

        Required. The display name of the company, for example, \"Google LLC\".

        :return: The display_name of this Company.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Company.

        Required. The display name of the company, for example, \"Google LLC\".

        :param display_name: The display_name of this Company.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def eeo_text(self):
        """Gets the eeo_text of this Company.

        Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.

        :return: The eeo_text of this Company.
        :rtype: str
        """
        return self._eeo_text

    @eeo_text.setter
    def eeo_text(self, eeo_text):
        """Sets the eeo_text of this Company.

        Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.

        :param eeo_text: The eeo_text of this Company.
        :type eeo_text: str
        """

        self._eeo_text = eeo_text

    @property
    def external_id(self):
        """Gets the external_id of this Company.

        Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.

        :return: The external_id of this Company.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Company.

        Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.

        :param external_id: The external_id of this Company.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def headquarters_address(self):
        """Gets the headquarters_address of this Company.

        Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.

        :return: The headquarters_address of this Company.
        :rtype: str
        """
        return self._headquarters_address

    @headquarters_address.setter
    def headquarters_address(self, headquarters_address):
        """Sets the headquarters_address of this Company.

        Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.

        :param headquarters_address: The headquarters_address of this Company.
        :type headquarters_address: str
        """

        self._headquarters_address = headquarters_address

    @property
    def hiring_agency(self):
        """Gets the hiring_agency of this Company.

        Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.

        :return: The hiring_agency of this Company.
        :rtype: bool
        """
        return self._hiring_agency

    @hiring_agency.setter
    def hiring_agency(self, hiring_agency):
        """Sets the hiring_agency of this Company.

        Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.

        :param hiring_agency: The hiring_agency of this Company.
        :type hiring_agency: bool
        """

        self._hiring_agency = hiring_agency

    @property
    def image_uri(self):
        """Gets the image_uri of this Company.

        Optional. A URI that hosts the employer's company logo.

        :return: The image_uri of this Company.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this Company.

        Optional. A URI that hosts the employer's company logo.

        :param image_uri: The image_uri of this Company.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def keyword_searchable_job_custom_attributes(self):
        """Gets the keyword_searchable_job_custom_attributes of this Company.

        Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.

        :return: The keyword_searchable_job_custom_attributes of this Company.
        :rtype: List[str]
        """
        return self._keyword_searchable_job_custom_attributes

    @keyword_searchable_job_custom_attributes.setter
    def keyword_searchable_job_custom_attributes(self, keyword_searchable_job_custom_attributes):
        """Sets the keyword_searchable_job_custom_attributes of this Company.

        Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.

        :param keyword_searchable_job_custom_attributes: The keyword_searchable_job_custom_attributes of this Company.
        :type keyword_searchable_job_custom_attributes: List[str]
        """

        self._keyword_searchable_job_custom_attributes = keyword_searchable_job_custom_attributes

    @property
    def name(self):
        """Gets the name of this Company.

        Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\".

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\".

        :param name: The name of this Company.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Company.

        Optional. The employer's company size.

        :return: The size of this Company.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Company.

        Optional. The employer's company size.

        :param size: The size of this Company.
        :type size: str
        """
        allowed_values = ["COMPANY_SIZE_UNSPECIFIED", "MINI", "SMALL", "SMEDIUM", "MEDIUM", "BIG", "BIGGER", "GIANT"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def suspended(self):
        """Gets the suspended of this Company.

        Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.

        :return: The suspended of this Company.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this Company.

        Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.

        :param suspended: The suspended of this Company.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def website_uri(self):
        """Gets the website_uri of this Company.

        Optional. The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255.

        :return: The website_uri of this Company.
        :rtype: str
        """
        return self._website_uri

    @website_uri.setter
    def website_uri(self, website_uri):
        """Sets the website_uri of this Company.

        Optional. The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255.

        :param website_uri: The website_uri of this Company.
        :type website_uri: str
        """

        self._website_uri = website_uri
