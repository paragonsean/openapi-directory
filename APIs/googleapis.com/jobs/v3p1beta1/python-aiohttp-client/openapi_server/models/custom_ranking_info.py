# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomRankingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, importance_level: str=None, ranking_expression: str=None):
        """CustomRankingInfo - a model defined in OpenAPI

        :param importance_level: The importance_level of this CustomRankingInfo.
        :param ranking_expression: The ranking_expression of this CustomRankingInfo.
        """
        self.openapi_types = {
            'importance_level': str,
            'ranking_expression': str
        }

        self.attribute_map = {
            'importance_level': 'importanceLevel',
            'ranking_expression': 'rankingExpression'
        }

        self._importance_level = importance_level
        self._ranking_expression = ranking_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomRankingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomRankingInfo of this CustomRankingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def importance_level(self):
        """Gets the importance_level of this CustomRankingInfo.

        Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job's final ranking position. An error is thrown if not specified.

        :return: The importance_level of this CustomRankingInfo.
        :rtype: str
        """
        return self._importance_level

    @importance_level.setter
    def importance_level(self, importance_level):
        """Sets the importance_level of this CustomRankingInfo.

        Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job's final ranking position. An error is thrown if not specified.

        :param importance_level: The importance_level of this CustomRankingInfo.
        :type importance_level: str
        """
        allowed_values = ["IMPORTANCE_LEVEL_UNSPECIFIED", "NONE", "LOW", "MILD", "MEDIUM", "HIGH", "EXTREME"]  # noqa: E501
        if importance_level not in allowed_values:
            raise ValueError(
                "Invalid value for `importance_level` ({0}), must be one of {1}"
                .format(importance_level, allowed_values)
            )

        self._importance_level = importance_level

    @property
    def ranking_expression(self):
        """Gets the ranking_expression of this CustomRankingInfo.

        Required. Controls over how job documents get ranked on top of existing relevance score (determined by API algorithm). A combination of the ranking expression and relevance score is used to determine job's final ranking position. The syntax for this expression is a subset of Google SQL syntax. Supported operators are: +, -, *, /, where the left and right side of the operator is either a numeric Job.custom_attributes key, integer/double value or an expression that can be evaluated to a number. Parenthesis are supported to adjust calculation precedence. The expression must be < 200 characters in length. The expression is considered invalid for a job if the expression references custom attributes that are not populated on the job or if the expression results in a divide by zero. If an expression is invalid for a job, that job is demoted to the end of the results. Sample ranking expression (year + 25) * 0.25 - (freshness / 0.5)

        :return: The ranking_expression of this CustomRankingInfo.
        :rtype: str
        """
        return self._ranking_expression

    @ranking_expression.setter
    def ranking_expression(self, ranking_expression):
        """Sets the ranking_expression of this CustomRankingInfo.

        Required. Controls over how job documents get ranked on top of existing relevance score (determined by API algorithm). A combination of the ranking expression and relevance score is used to determine job's final ranking position. The syntax for this expression is a subset of Google SQL syntax. Supported operators are: +, -, *, /, where the left and right side of the operator is either a numeric Job.custom_attributes key, integer/double value or an expression that can be evaluated to a number. Parenthesis are supported to adjust calculation precedence. The expression must be < 200 characters in length. The expression is considered invalid for a job if the expression references custom attributes that are not populated on the job or if the expression results in a divide by zero. If an expression is invalid for a job, that job is demoted to the end of the results. Sample ranking expression (year + 25) * 0.25 - (freshness / 0.5)

        :param ranking_expression: The ranking_expression of this CustomRankingInfo.
        :type ranking_expression: str
        """

        self._ranking_expression = ranking_expression
