# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompletionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_uri: str=None, suggestion: str=None, type: str=None):
        """CompletionResult - a model defined in OpenAPI

        :param image_uri: The image_uri of this CompletionResult.
        :param suggestion: The suggestion of this CompletionResult.
        :param type: The type of this CompletionResult.
        """
        self.openapi_types = {
            'image_uri': str,
            'suggestion': str,
            'type': str
        }

        self.attribute_map = {
            'image_uri': 'imageUri',
            'suggestion': 'suggestion',
            'type': 'type'
        }

        self._image_uri = image_uri
        self._suggestion = suggestion
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompletionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompletionResult of this CompletionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_uri(self):
        """Gets the image_uri of this CompletionResult.

        The URI of the company image for CompletionType.COMPANY_NAME.

        :return: The image_uri of this CompletionResult.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this CompletionResult.

        The URI of the company image for CompletionType.COMPANY_NAME.

        :param image_uri: The image_uri of this CompletionResult.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def suggestion(self):
        """Gets the suggestion of this CompletionResult.

        The suggestion for the query.

        :return: The suggestion of this CompletionResult.
        :rtype: str
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """Sets the suggestion of this CompletionResult.

        The suggestion for the query.

        :param suggestion: The suggestion of this CompletionResult.
        :type suggestion: str
        """

        self._suggestion = suggestion

    @property
    def type(self):
        """Gets the type of this CompletionResult.

        The completion topic.

        :return: The type of this CompletionResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompletionResult.

        The completion topic.

        :param type: The type of this CompletionResult.
        :type type: str
        """
        allowed_values = ["COMPLETION_TYPE_UNSPECIFIED", "JOB_TITLE", "COMPANY_NAME", "COMBINED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
