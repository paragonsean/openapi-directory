# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistogramQueryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, histogram: Dict[str, str]=None, histogram_query: str=None):
        """HistogramQueryResult - a model defined in OpenAPI

        :param histogram: The histogram of this HistogramQueryResult.
        :param histogram_query: The histogram_query of this HistogramQueryResult.
        """
        self.openapi_types = {
            'histogram': Dict[str, str],
            'histogram_query': str
        }

        self.attribute_map = {
            'histogram': 'histogram',
            'histogram_query': 'histogramQuery'
        }

        self._histogram = histogram
        self._histogram_query = histogram_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramQueryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramQueryResult of this HistogramQueryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def histogram(self):
        """Gets the histogram of this HistogramQueryResult.

        A map from the values of the facet associated with distinct values to the number of matching entries with corresponding value. The key format is: * (for string histogram) string values stored in the field. * (for named numeric bucket) name specified in `bucket()` function, like for `bucket(0, MAX, \"non-negative\")`, the key will be `non-negative`. * (for anonymous numeric bucket) range formatted as `-`, for example, `0-1000`, `MIN-0`, and `0-MAX`.

        :return: The histogram of this HistogramQueryResult.
        :rtype: Dict[str, str]
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this HistogramQueryResult.

        A map from the values of the facet associated with distinct values to the number of matching entries with corresponding value. The key format is: * (for string histogram) string values stored in the field. * (for named numeric bucket) name specified in `bucket()` function, like for `bucket(0, MAX, \"non-negative\")`, the key will be `non-negative`. * (for anonymous numeric bucket) range formatted as `-`, for example, `0-1000`, `MIN-0`, and `0-MAX`.

        :param histogram: The histogram of this HistogramQueryResult.
        :type histogram: Dict[str, str]
        """

        self._histogram = histogram

    @property
    def histogram_query(self):
        """Gets the histogram_query of this HistogramQueryResult.

        Requested histogram expression.

        :return: The histogram_query of this HistogramQueryResult.
        :rtype: str
        """
        return self._histogram_query

    @histogram_query.setter
    def histogram_query(self, histogram_query):
        """Sets the histogram_query of this HistogramQueryResult.

        Requested histogram expression.

        :param histogram_query: The histogram_query of this HistogramQueryResult.
        :type histogram_query: str
        """

        self._histogram_query = histogram_query
