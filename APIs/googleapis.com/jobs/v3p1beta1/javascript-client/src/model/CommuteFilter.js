/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatLng from './LatLng';
import TimeOfDay from './TimeOfDay';

/**
 * The CommuteFilter model module.
 * @module model/CommuteFilter
 * @version v3p1beta1
 */
class CommuteFilter {
    /**
     * Constructs a new <code>CommuteFilter</code>.
     * Input only. Parameters needed for commute search.
     * @alias module:model/CommuteFilter
     */
    constructor() { 
        
        CommuteFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommuteFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommuteFilter} obj Optional instance to populate.
     * @return {module:model/CommuteFilter} The populated <code>CommuteFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommuteFilter();

            if (data.hasOwnProperty('allowImpreciseAddresses')) {
                obj['allowImpreciseAddresses'] = ApiClient.convertToType(data['allowImpreciseAddresses'], 'Boolean');
            }
            if (data.hasOwnProperty('commuteMethod')) {
                obj['commuteMethod'] = ApiClient.convertToType(data['commuteMethod'], 'String');
            }
            if (data.hasOwnProperty('departureTime')) {
                obj['departureTime'] = TimeOfDay.constructFromObject(data['departureTime']);
            }
            if (data.hasOwnProperty('roadTraffic')) {
                obj['roadTraffic'] = ApiClient.convertToType(data['roadTraffic'], 'String');
            }
            if (data.hasOwnProperty('startCoordinates')) {
                obj['startCoordinates'] = LatLng.constructFromObject(data['startCoordinates']);
            }
            if (data.hasOwnProperty('travelDuration')) {
                obj['travelDuration'] = ApiClient.convertToType(data['travelDuration'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommuteFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommuteFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commuteMethod'] && !(typeof data['commuteMethod'] === 'string' || data['commuteMethod'] instanceof String)) {
            throw new Error("Expected the field `commuteMethod` to be a primitive type in the JSON string but got " + data['commuteMethod']);
        }
        // validate the optional field `departureTime`
        if (data['departureTime']) { // data not null
          TimeOfDay.validateJSON(data['departureTime']);
        }
        // ensure the json data is a string
        if (data['roadTraffic'] && !(typeof data['roadTraffic'] === 'string' || data['roadTraffic'] instanceof String)) {
            throw new Error("Expected the field `roadTraffic` to be a primitive type in the JSON string but got " + data['roadTraffic']);
        }
        // validate the optional field `startCoordinates`
        if (data['startCoordinates']) { // data not null
          LatLng.validateJSON(data['startCoordinates']);
        }
        // ensure the json data is a string
        if (data['travelDuration'] && !(typeof data['travelDuration'] === 'string' || data['travelDuration'] instanceof String)) {
            throw new Error("Expected the field `travelDuration` to be a primitive type in the JSON string but got " + data['travelDuration']);
        }

        return true;
    }


}



/**
 * Optional. If true, jobs without \"precise\" addresses (street level addresses or GPS coordinates) might also be returned. For city and coarser level addresses, text matching is used. If this field is set to false or is not specified, only jobs that include precise addresses are returned by Commute Search. Note: If `allow_imprecise_addresses` is set to true, Commute Search is not able to calculate accurate commute times to jobs with city level and coarser address information. Jobs with imprecise addresses will return a `travel_duration` time of 0 regardless of distance from the job seeker.
 * @member {Boolean} allowImpreciseAddresses
 */
CommuteFilter.prototype['allowImpreciseAddresses'] = undefined;

/**
 * Required. The method of transportation for which to calculate the commute time.
 * @member {module:model/CommuteFilter.CommuteMethodEnum} commuteMethod
 */
CommuteFilter.prototype['commuteMethod'] = undefined;

/**
 * @member {module:model/TimeOfDay} departureTime
 */
CommuteFilter.prototype['departureTime'] = undefined;

/**
 * Optional. Specifies the traffic density to use when calculating commute time.
 * @member {module:model/CommuteFilter.RoadTrafficEnum} roadTraffic
 */
CommuteFilter.prototype['roadTraffic'] = undefined;

/**
 * @member {module:model/LatLng} startCoordinates
 */
CommuteFilter.prototype['startCoordinates'] = undefined;

/**
 * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.
 * @member {String} travelDuration
 */
CommuteFilter.prototype['travelDuration'] = undefined;





/**
 * Allowed values for the <code>commuteMethod</code> property.
 * @enum {String}
 * @readonly
 */
CommuteFilter['CommuteMethodEnum'] = {

    /**
     * value: "COMMUTE_METHOD_UNSPECIFIED"
     * @const
     */
    "COMMUTE_METHOD_UNSPECIFIED": "COMMUTE_METHOD_UNSPECIFIED",

    /**
     * value: "DRIVING"
     * @const
     */
    "DRIVING": "DRIVING",

    /**
     * value: "TRANSIT"
     * @const
     */
    "TRANSIT": "TRANSIT",

    /**
     * value: "WALKING"
     * @const
     */
    "WALKING": "WALKING",

    /**
     * value: "CYCLING"
     * @const
     */
    "CYCLING": "CYCLING"
};


/**
 * Allowed values for the <code>roadTraffic</code> property.
 * @enum {String}
 * @readonly
 */
CommuteFilter['RoadTrafficEnum'] = {

    /**
     * value: "ROAD_TRAFFIC_UNSPECIFIED"
     * @const
     */
    "ROAD_TRAFFIC_UNSPECIFIED": "ROAD_TRAFFIC_UNSPECIFIED",

    /**
     * value: "TRAFFIC_FREE"
     * @const
     */
    "TRAFFIC_FREE": "TRAFFIC_FREE",

    /**
     * value: "BUSY_HOUR"
     * @const
     */
    "BUSY_HOUR": "BUSY_HOUR"
};



export default CommuteFilter;

