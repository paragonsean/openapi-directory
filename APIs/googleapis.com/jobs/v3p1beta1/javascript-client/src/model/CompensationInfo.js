/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompensationEntry from './CompensationEntry';
import CompensationRange from './CompensationRange';

/**
 * The CompensationInfo model module.
 * @module model/CompensationInfo
 * @version v3p1beta1
 */
class CompensationInfo {
    /**
     * Constructs a new <code>CompensationInfo</code>.
     * Job compensation details.
     * @alias module:model/CompensationInfo
     */
    constructor() { 
        
        CompensationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompensationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompensationInfo} obj Optional instance to populate.
     * @return {module:model/CompensationInfo} The populated <code>CompensationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompensationInfo();

            if (data.hasOwnProperty('annualizedBaseCompensationRange')) {
                obj['annualizedBaseCompensationRange'] = CompensationRange.constructFromObject(data['annualizedBaseCompensationRange']);
            }
            if (data.hasOwnProperty('annualizedTotalCompensationRange')) {
                obj['annualizedTotalCompensationRange'] = CompensationRange.constructFromObject(data['annualizedTotalCompensationRange']);
            }
            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [CompensationEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompensationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompensationInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annualizedBaseCompensationRange`
        if (data['annualizedBaseCompensationRange']) { // data not null
          CompensationRange.validateJSON(data['annualizedBaseCompensationRange']);
        }
        // validate the optional field `annualizedTotalCompensationRange`
        if (data['annualizedTotalCompensationRange']) { // data not null
          CompensationRange.validateJSON(data['annualizedTotalCompensationRange']);
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                CompensationEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CompensationRange} annualizedBaseCompensationRange
 */
CompensationInfo.prototype['annualizedBaseCompensationRange'] = undefined;

/**
 * @member {module:model/CompensationRange} annualizedTotalCompensationRange
 */
CompensationInfo.prototype['annualizedTotalCompensationRange'] = undefined;

/**
 * Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
 * @member {Array.<module:model/CompensationEntry>} entries
 */
CompensationInfo.prototype['entries'] = undefined;






export default CompensationInfo;

