/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompensationRange from './CompensationRange';

/**
 * The CompensationFilter model module.
 * @module model/CompensationFilter
 * @version v3p1beta1
 */
class CompensationFilter {
    /**
     * Constructs a new <code>CompensationFilter</code>.
     * Input only. Filter on job compensation type and amount.
     * @alias module:model/CompensationFilter
     */
    constructor() { 
        
        CompensationFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompensationFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompensationFilter} obj Optional instance to populate.
     * @return {module:model/CompensationFilter} The populated <code>CompensationFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompensationFilter();

            if (data.hasOwnProperty('includeJobsWithUnspecifiedCompensationRange')) {
                obj['includeJobsWithUnspecifiedCompensationRange'] = ApiClient.convertToType(data['includeJobsWithUnspecifiedCompensationRange'], 'Boolean');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = CompensationRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompensationFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompensationFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `range`
        if (data['range']) { // data not null
          CompensationRange.validateJSON(data['range']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['units'])) {
            throw new Error("Expected the field `units` to be an array in the JSON data but got " + data['units']);
        }

        return true;
    }


}



/**
 * Optional. If set to true, jobs with unspecified compensation range fields are included.
 * @member {Boolean} includeJobsWithUnspecifiedCompensationRange
 */
CompensationFilter.prototype['includeJobsWithUnspecifiedCompensationRange'] = undefined;

/**
 * @member {module:model/CompensationRange} range
 */
CompensationFilter.prototype['range'] = undefined;

/**
 * Required. Type of filter.
 * @member {module:model/CompensationFilter.TypeEnum} type
 */
CompensationFilter.prototype['type'] = undefined;

/**
 * Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.
 * @member {Array.<module:model/CompensationFilter.UnitsEnum>} units
 */
CompensationFilter.prototype['units'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CompensationFilter['TypeEnum'] = {

    /**
     * value: "FILTER_TYPE_UNSPECIFIED"
     * @const
     */
    "FILTER_TYPE_UNSPECIFIED": "FILTER_TYPE_UNSPECIFIED",

    /**
     * value: "UNIT_ONLY"
     * @const
     */
    "UNIT_ONLY": "UNIT_ONLY",

    /**
     * value: "UNIT_AND_AMOUNT"
     * @const
     */
    "UNIT_AND_AMOUNT": "UNIT_AND_AMOUNT",

    /**
     * value: "ANNUALIZED_BASE_AMOUNT"
     * @const
     */
    "ANNUALIZED_BASE_AMOUNT": "ANNUALIZED_BASE_AMOUNT",

    /**
     * value: "ANNUALIZED_TOTAL_AMOUNT"
     * @const
     */
    "ANNUALIZED_TOTAL_AMOUNT": "ANNUALIZED_TOTAL_AMOUNT"
};


/**
 * Allowed values for the <code>units</code> property.
 * @enum {String}
 * @readonly
 */
CompensationFilter['UnitsEnum'] = {

    /**
     * value: "COMPENSATION_UNIT_UNSPECIFIED"
     * @const
     */
    "COMPENSATION_UNIT_UNSPECIFIED": "COMPENSATION_UNIT_UNSPECIFIED",

    /**
     * value: "HOURLY"
     * @const
     */
    "HOURLY": "HOURLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY",

    /**
     * value: "ONE_TIME"
     * @const
     */
    "ONE_TIME": "ONE_TIME",

    /**
     * value: "OTHER_COMPENSATION_UNIT"
     * @const
     */
    "OTHER_COMPENSATION_UNIT": "OTHER_COMPENSATION_UNIT"
};



export default CompensationFilter;

