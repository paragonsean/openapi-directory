/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BucketizedCount from './BucketizedCount';

/**
 * The NumericBucketingResult model module.
 * @module model/NumericBucketingResult
 * @version v3p1beta1
 */
class NumericBucketingResult {
    /**
     * Constructs a new <code>NumericBucketingResult</code>.
     * Output only. Custom numeric bucketing result.
     * @alias module:model/NumericBucketingResult
     */
    constructor() { 
        
        NumericBucketingResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NumericBucketingResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumericBucketingResult} obj Optional instance to populate.
     * @return {module:model/NumericBucketingResult} The populated <code>NumericBucketingResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumericBucketingResult();

            if (data.hasOwnProperty('counts')) {
                obj['counts'] = ApiClient.convertToType(data['counts'], [BucketizedCount]);
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumericBucketingResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumericBucketingResult</code>.
     */
    static validateJSON(data) {
        if (data['counts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counts'])) {
                throw new Error("Expected the field `counts` to be an array in the JSON data but got " + data['counts']);
            }
            // validate the optional field `counts` (array)
            for (const item of data['counts']) {
                BucketizedCount.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Count within each bucket. Its size is the length of NumericBucketingOption.bucket_bounds plus 1.
 * @member {Array.<module:model/BucketizedCount>} counts
 */
NumericBucketingResult.prototype['counts'] = undefined;

/**
 * Stores the maximum value of the numeric field. Is populated only if [NumericBucketingOption.requires_min_max] is set to true.
 * @member {Number} maxValue
 */
NumericBucketingResult.prototype['maxValue'] = undefined;

/**
 * Stores the minimum value of the numeric field. Will be populated only if [NumericBucketingOption.requires_min_max] is set to true.
 * @member {Number} minValue
 */
NumericBucketingResult.prototype['minValue'] = undefined;






export default NumericBucketingResult;

