/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatLng from './LatLng';
import PostalAddress from './PostalAddress';

/**
 * The Location model module.
 * @module model/Location
 * @version v3p1beta1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * Output only. A resource that represents a location with full geographic information.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('latLng')) {
                obj['latLng'] = LatLng.constructFromObject(data['latLng']);
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('postalAddress')) {
                obj['postalAddress'] = PostalAddress.constructFromObject(data['postalAddress']);
            }
            if (data.hasOwnProperty('radiusInMiles')) {
                obj['radiusInMiles'] = ApiClient.convertToType(data['radiusInMiles'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // validate the optional field `latLng`
        if (data['latLng']) { // data not null
          LatLng.validateJSON(data['latLng']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }
        // validate the optional field `postalAddress`
        if (data['postalAddress']) { // data not null
          PostalAddress.validateJSON(data['postalAddress']);
        }

        return true;
    }


}



/**
 * @member {module:model/LatLng} latLng
 */
Location.prototype['latLng'] = undefined;

/**
 * The type of a location, which corresponds to the address lines field of PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType#NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType#LOCALITY.
 * @member {module:model/Location.LocationTypeEnum} locationType
 */
Location.prototype['locationType'] = undefined;

/**
 * @member {module:model/PostalAddress} postalAddress
 */
Location.prototype['postalAddress'] = undefined;

/**
 * Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles.
 * @member {Number} radiusInMiles
 */
Location.prototype['radiusInMiles'] = undefined;





/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
Location['LocationTypeEnum'] = {

    /**
     * value: "LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "LOCATION_TYPE_UNSPECIFIED": "LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "COUNTRY"
     * @const
     */
    "COUNTRY": "COUNTRY",

    /**
     * value: "ADMINISTRATIVE_AREA"
     * @const
     */
    "ADMINISTRATIVE_AREA": "ADMINISTRATIVE_AREA",

    /**
     * value: "SUB_ADMINISTRATIVE_AREA"
     * @const
     */
    "SUB_ADMINISTRATIVE_AREA": "SUB_ADMINISTRATIVE_AREA",

    /**
     * value: "LOCALITY"
     * @const
     */
    "LOCALITY": "LOCALITY",

    /**
     * value: "POSTAL_CODE"
     * @const
     */
    "POSTAL_CODE": "POSTAL_CODE",

    /**
     * value: "SUB_LOCALITY"
     * @const
     */
    "SUB_LOCALITY": "SUB_LOCALITY",

    /**
     * value: "SUB_LOCALITY_1"
     * @const
     */
    "SUB_LOCALITY_1": "SUB_LOCALITY_1",

    /**
     * value: "SUB_LOCALITY_2"
     * @const
     */
    "SUB_LOCALITY_2": "SUB_LOCALITY_2",

    /**
     * value: "NEIGHBORHOOD"
     * @const
     */
    "NEIGHBORHOOD": "NEIGHBORHOOD",

    /**
     * value: "STREET_ADDRESS"
     * @const
     */
    "STREET_ADDRESS": "STREET_ADDRESS"
};



export default Location;

