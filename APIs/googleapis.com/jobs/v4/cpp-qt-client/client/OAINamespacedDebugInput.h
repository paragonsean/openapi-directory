/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamespacedDebugInput.h
 *
 * Next ID: 16
 */

#ifndef OAINamespacedDebugInput_H
#define OAINamespacedDebugInput_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINamespacedDebugInput : public OAIObject {
public:
    OAINamespacedDebugInput();
    OAINamespacedDebugInput(QString json);
    ~OAINamespacedDebugInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAbsolutelyForcedExpNames() const;
    void setAbsolutelyForcedExpNames(const QList<QString> &absolutely_forced_exp_names);
    bool is_absolutely_forced_exp_names_Set() const;
    bool is_absolutely_forced_exp_names_Valid() const;

    QList<QString> getAbsolutelyForcedExpTags() const;
    void setAbsolutelyForcedExpTags(const QList<QString> &absolutely_forced_exp_tags);
    bool is_absolutely_forced_exp_tags_Set() const;
    bool is_absolutely_forced_exp_tags_Valid() const;

    QList<qint32> getAbsolutelyForcedExps() const;
    void setAbsolutelyForcedExps(const QList<qint32> &absolutely_forced_exps);
    bool is_absolutely_forced_exps_Set() const;
    bool is_absolutely_forced_exps_Valid() const;

    QList<QString> getConditionallyForcedExpNames() const;
    void setConditionallyForcedExpNames(const QList<QString> &conditionally_forced_exp_names);
    bool is_conditionally_forced_exp_names_Set() const;
    bool is_conditionally_forced_exp_names_Valid() const;

    QList<QString> getConditionallyForcedExpTags() const;
    void setConditionallyForcedExpTags(const QList<QString> &conditionally_forced_exp_tags);
    bool is_conditionally_forced_exp_tags_Set() const;
    bool is_conditionally_forced_exp_tags_Valid() const;

    QList<qint32> getConditionallyForcedExps() const;
    void setConditionallyForcedExps(const QList<qint32> &conditionally_forced_exps);
    bool is_conditionally_forced_exps_Set() const;
    bool is_conditionally_forced_exps_Valid() const;

    bool isDisableAutomaticEnrollmentSelection() const;
    void setDisableAutomaticEnrollmentSelection(const bool &disable_automatic_enrollment_selection);
    bool is_disable_automatic_enrollment_selection_Set() const;
    bool is_disable_automatic_enrollment_selection_Valid() const;

    QList<QString> getDisableExpNames() const;
    void setDisableExpNames(const QList<QString> &disable_exp_names);
    bool is_disable_exp_names_Set() const;
    bool is_disable_exp_names_Valid() const;

    QList<QString> getDisableExpTags() const;
    void setDisableExpTags(const QList<QString> &disable_exp_tags);
    bool is_disable_exp_tags_Set() const;
    bool is_disable_exp_tags_Valid() const;

    QList<qint32> getDisableExps() const;
    void setDisableExps(const QList<qint32> &disable_exps);
    bool is_disable_exps_Set() const;
    bool is_disable_exps_Valid() const;

    bool isDisableManualEnrollmentSelection() const;
    void setDisableManualEnrollmentSelection(const bool &disable_manual_enrollment_selection);
    bool is_disable_manual_enrollment_selection_Set() const;
    bool is_disable_manual_enrollment_selection_Valid() const;

    bool isDisableOrganicSelection() const;
    void setDisableOrganicSelection(const bool &disable_organic_selection);
    bool is_disable_organic_selection_Set() const;
    bool is_disable_organic_selection_Valid() const;

    QMap<QString, QString> getForcedFlags() const;
    void setForcedFlags(const QMap<QString, QString> &forced_flags);
    bool is_forced_flags_Set() const;
    bool is_forced_flags_Valid() const;

    QMap<QString, bool> getForcedRollouts() const;
    void setForcedRollouts(const QMap<QString, bool> &forced_rollouts);
    bool is_forced_rollouts_Set() const;
    bool is_forced_rollouts_Valid() const;

    QString getTestingMode() const;
    void setTestingMode(const QString &testing_mode);
    bool is_testing_mode_Set() const;
    bool is_testing_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_absolutely_forced_exp_names;
    bool m_absolutely_forced_exp_names_isSet;
    bool m_absolutely_forced_exp_names_isValid;

    QList<QString> m_absolutely_forced_exp_tags;
    bool m_absolutely_forced_exp_tags_isSet;
    bool m_absolutely_forced_exp_tags_isValid;

    QList<qint32> m_absolutely_forced_exps;
    bool m_absolutely_forced_exps_isSet;
    bool m_absolutely_forced_exps_isValid;

    QList<QString> m_conditionally_forced_exp_names;
    bool m_conditionally_forced_exp_names_isSet;
    bool m_conditionally_forced_exp_names_isValid;

    QList<QString> m_conditionally_forced_exp_tags;
    bool m_conditionally_forced_exp_tags_isSet;
    bool m_conditionally_forced_exp_tags_isValid;

    QList<qint32> m_conditionally_forced_exps;
    bool m_conditionally_forced_exps_isSet;
    bool m_conditionally_forced_exps_isValid;

    bool m_disable_automatic_enrollment_selection;
    bool m_disable_automatic_enrollment_selection_isSet;
    bool m_disable_automatic_enrollment_selection_isValid;

    QList<QString> m_disable_exp_names;
    bool m_disable_exp_names_isSet;
    bool m_disable_exp_names_isValid;

    QList<QString> m_disable_exp_tags;
    bool m_disable_exp_tags_isSet;
    bool m_disable_exp_tags_isValid;

    QList<qint32> m_disable_exps;
    bool m_disable_exps_isSet;
    bool m_disable_exps_isValid;

    bool m_disable_manual_enrollment_selection;
    bool m_disable_manual_enrollment_selection_isSet;
    bool m_disable_manual_enrollment_selection_isValid;

    bool m_disable_organic_selection;
    bool m_disable_organic_selection_isSet;
    bool m_disable_organic_selection_isValid;

    QMap<QString, QString> m_forced_flags;
    bool m_forced_flags_isSet;
    bool m_forced_flags_isValid;

    QMap<QString, bool> m_forced_rollouts;
    bool m_forced_rollouts_isSet;
    bool m_forced_rollouts_isValid;

    QString m_testing_mode;
    bool m_testing_mode_isSet;
    bool m_testing_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamespacedDebugInput)

#endif // OAINamespacedDebugInput_H
