/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomAttribute::OAICustomAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomAttribute::OAICustomAttribute() {
    this->initializeModel();
}

OAICustomAttribute::~OAICustomAttribute() {}

void OAICustomAttribute::initializeModel() {

    m_filterable_isSet = false;
    m_filterable_isValid = false;

    m_keyword_searchable_isSet = false;
    m_keyword_searchable_isValid = false;

    m_long_values_isSet = false;
    m_long_values_isValid = false;

    m_string_values_isSet = false;
    m_string_values_isValid = false;
}

void OAICustomAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomAttribute::fromJsonObject(QJsonObject json) {

    m_filterable_isValid = ::OpenAPI::fromJsonValue(m_filterable, json[QString("filterable")]);
    m_filterable_isSet = !json[QString("filterable")].isNull() && m_filterable_isValid;

    m_keyword_searchable_isValid = ::OpenAPI::fromJsonValue(m_keyword_searchable, json[QString("keywordSearchable")]);
    m_keyword_searchable_isSet = !json[QString("keywordSearchable")].isNull() && m_keyword_searchable_isValid;

    m_long_values_isValid = ::OpenAPI::fromJsonValue(m_long_values, json[QString("longValues")]);
    m_long_values_isSet = !json[QString("longValues")].isNull() && m_long_values_isValid;

    m_string_values_isValid = ::OpenAPI::fromJsonValue(m_string_values, json[QString("stringValues")]);
    m_string_values_isSet = !json[QString("stringValues")].isNull() && m_string_values_isValid;
}

QString OAICustomAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_filterable_isSet) {
        obj.insert(QString("filterable"), ::OpenAPI::toJsonValue(m_filterable));
    }
    if (m_keyword_searchable_isSet) {
        obj.insert(QString("keywordSearchable"), ::OpenAPI::toJsonValue(m_keyword_searchable));
    }
    if (m_long_values.size() > 0) {
        obj.insert(QString("longValues"), ::OpenAPI::toJsonValue(m_long_values));
    }
    if (m_string_values.size() > 0) {
        obj.insert(QString("stringValues"), ::OpenAPI::toJsonValue(m_string_values));
    }
    return obj;
}

bool OAICustomAttribute::isFilterable() const {
    return m_filterable;
}
void OAICustomAttribute::setFilterable(const bool &filterable) {
    m_filterable = filterable;
    m_filterable_isSet = true;
}

bool OAICustomAttribute::is_filterable_Set() const{
    return m_filterable_isSet;
}

bool OAICustomAttribute::is_filterable_Valid() const{
    return m_filterable_isValid;
}

bool OAICustomAttribute::isKeywordSearchable() const {
    return m_keyword_searchable;
}
void OAICustomAttribute::setKeywordSearchable(const bool &keyword_searchable) {
    m_keyword_searchable = keyword_searchable;
    m_keyword_searchable_isSet = true;
}

bool OAICustomAttribute::is_keyword_searchable_Set() const{
    return m_keyword_searchable_isSet;
}

bool OAICustomAttribute::is_keyword_searchable_Valid() const{
    return m_keyword_searchable_isValid;
}

QList<QString> OAICustomAttribute::getLongValues() const {
    return m_long_values;
}
void OAICustomAttribute::setLongValues(const QList<QString> &long_values) {
    m_long_values = long_values;
    m_long_values_isSet = true;
}

bool OAICustomAttribute::is_long_values_Set() const{
    return m_long_values_isSet;
}

bool OAICustomAttribute::is_long_values_Valid() const{
    return m_long_values_isValid;
}

QList<QString> OAICustomAttribute::getStringValues() const {
    return m_string_values;
}
void OAICustomAttribute::setStringValues(const QList<QString> &string_values) {
    m_string_values = string_values;
    m_string_values_isSet = true;
}

bool OAICustomAttribute::is_string_values_Set() const{
    return m_string_values_isSet;
}

bool OAICustomAttribute::is_string_values_Valid() const{
    return m_string_values_isValid;
}

bool OAICustomAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filterable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
