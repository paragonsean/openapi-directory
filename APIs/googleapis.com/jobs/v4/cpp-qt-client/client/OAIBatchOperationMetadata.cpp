/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchOperationMetadata::OAIBatchOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchOperationMetadata::OAIBatchOperationMetadata() {
    this->initializeModel();
}

OAIBatchOperationMetadata::~OAIBatchOperationMetadata() {}

void OAIBatchOperationMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_description_isSet = false;
    m_state_description_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIBatchOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchOperationMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_description_isValid = ::OpenAPI::fromJsonValue(m_state_description, json[QString("stateDescription")]);
    m_state_description_isSet = !json[QString("stateDescription")].isNull() && m_state_description_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIBatchOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_description_isSet) {
        obj.insert(QString("stateDescription"), ::OpenAPI::toJsonValue(m_state_description));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIBatchOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIBatchOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBatchOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBatchOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBatchOperationMetadata::getEndTime() const {
    return m_end_time;
}
void OAIBatchOperationMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBatchOperationMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBatchOperationMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIBatchOperationMetadata::getFailureCount() const {
    return m_failure_count;
}
void OAIBatchOperationMetadata::setFailureCount(const qint32 &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIBatchOperationMetadata::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIBatchOperationMetadata::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

QString OAIBatchOperationMetadata::getState() const {
    return m_state;
}
void OAIBatchOperationMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBatchOperationMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBatchOperationMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBatchOperationMetadata::getStateDescription() const {
    return m_state_description;
}
void OAIBatchOperationMetadata::setStateDescription(const QString &state_description) {
    m_state_description = state_description;
    m_state_description_isSet = true;
}

bool OAIBatchOperationMetadata::is_state_description_Set() const{
    return m_state_description_isSet;
}

bool OAIBatchOperationMetadata::is_state_description_Valid() const{
    return m_state_description_isValid;
}

qint32 OAIBatchOperationMetadata::getSuccessCount() const {
    return m_success_count;
}
void OAIBatchOperationMetadata::setSuccessCount(const qint32 &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIBatchOperationMetadata::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIBatchOperationMetadata::is_success_count_Valid() const{
    return m_success_count_isValid;
}

qint32 OAIBatchOperationMetadata::getTotalCount() const {
    return m_total_count;
}
void OAIBatchOperationMetadata::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIBatchOperationMetadata::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIBatchOperationMetadata::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAIBatchOperationMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIBatchOperationMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIBatchOperationMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIBatchOperationMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIBatchOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
