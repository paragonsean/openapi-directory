/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchJobsResponse::OAISearchJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchJobsResponse::OAISearchJobsResponse() {
    this->initializeModel();
}

OAISearchJobsResponse::~OAISearchJobsResponse() {}

void OAISearchJobsResponse::initializeModel() {

    m_broadened_query_jobs_count_isSet = false;
    m_broadened_query_jobs_count_isValid = false;

    m_histogram_query_results_isSet = false;
    m_histogram_query_results_isValid = false;

    m_location_filters_isSet = false;
    m_location_filters_isValid = false;

    m_matching_jobs_isSet = false;
    m_matching_jobs_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_spell_correction_isSet = false;
    m_spell_correction_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAISearchJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchJobsResponse::fromJsonObject(QJsonObject json) {

    m_broadened_query_jobs_count_isValid = ::OpenAPI::fromJsonValue(m_broadened_query_jobs_count, json[QString("broadenedQueryJobsCount")]);
    m_broadened_query_jobs_count_isSet = !json[QString("broadenedQueryJobsCount")].isNull() && m_broadened_query_jobs_count_isValid;

    m_histogram_query_results_isValid = ::OpenAPI::fromJsonValue(m_histogram_query_results, json[QString("histogramQueryResults")]);
    m_histogram_query_results_isSet = !json[QString("histogramQueryResults")].isNull() && m_histogram_query_results_isValid;

    m_location_filters_isValid = ::OpenAPI::fromJsonValue(m_location_filters, json[QString("locationFilters")]);
    m_location_filters_isSet = !json[QString("locationFilters")].isNull() && m_location_filters_isValid;

    m_matching_jobs_isValid = ::OpenAPI::fromJsonValue(m_matching_jobs, json[QString("matchingJobs")]);
    m_matching_jobs_isSet = !json[QString("matchingJobs")].isNull() && m_matching_jobs_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_spell_correction_isValid = ::OpenAPI::fromJsonValue(m_spell_correction, json[QString("spellCorrection")]);
    m_spell_correction_isSet = !json[QString("spellCorrection")].isNull() && m_spell_correction_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAISearchJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_broadened_query_jobs_count_isSet) {
        obj.insert(QString("broadenedQueryJobsCount"), ::OpenAPI::toJsonValue(m_broadened_query_jobs_count));
    }
    if (m_histogram_query_results.size() > 0) {
        obj.insert(QString("histogramQueryResults"), ::OpenAPI::toJsonValue(m_histogram_query_results));
    }
    if (m_location_filters.size() > 0) {
        obj.insert(QString("locationFilters"), ::OpenAPI::toJsonValue(m_location_filters));
    }
    if (m_matching_jobs.size() > 0) {
        obj.insert(QString("matchingJobs"), ::OpenAPI::toJsonValue(m_matching_jobs));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_spell_correction.isSet()) {
        obj.insert(QString("spellCorrection"), ::OpenAPI::toJsonValue(m_spell_correction));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

qint32 OAISearchJobsResponse::getBroadenedQueryJobsCount() const {
    return m_broadened_query_jobs_count;
}
void OAISearchJobsResponse::setBroadenedQueryJobsCount(const qint32 &broadened_query_jobs_count) {
    m_broadened_query_jobs_count = broadened_query_jobs_count;
    m_broadened_query_jobs_count_isSet = true;
}

bool OAISearchJobsResponse::is_broadened_query_jobs_count_Set() const{
    return m_broadened_query_jobs_count_isSet;
}

bool OAISearchJobsResponse::is_broadened_query_jobs_count_Valid() const{
    return m_broadened_query_jobs_count_isValid;
}

QList<OAIHistogramQueryResult> OAISearchJobsResponse::getHistogramQueryResults() const {
    return m_histogram_query_results;
}
void OAISearchJobsResponse::setHistogramQueryResults(const QList<OAIHistogramQueryResult> &histogram_query_results) {
    m_histogram_query_results = histogram_query_results;
    m_histogram_query_results_isSet = true;
}

bool OAISearchJobsResponse::is_histogram_query_results_Set() const{
    return m_histogram_query_results_isSet;
}

bool OAISearchJobsResponse::is_histogram_query_results_Valid() const{
    return m_histogram_query_results_isValid;
}

QList<OAILocation> OAISearchJobsResponse::getLocationFilters() const {
    return m_location_filters;
}
void OAISearchJobsResponse::setLocationFilters(const QList<OAILocation> &location_filters) {
    m_location_filters = location_filters;
    m_location_filters_isSet = true;
}

bool OAISearchJobsResponse::is_location_filters_Set() const{
    return m_location_filters_isSet;
}

bool OAISearchJobsResponse::is_location_filters_Valid() const{
    return m_location_filters_isValid;
}

QList<OAIMatchingJob> OAISearchJobsResponse::getMatchingJobs() const {
    return m_matching_jobs;
}
void OAISearchJobsResponse::setMatchingJobs(const QList<OAIMatchingJob> &matching_jobs) {
    m_matching_jobs = matching_jobs;
    m_matching_jobs_isSet = true;
}

bool OAISearchJobsResponse::is_matching_jobs_Set() const{
    return m_matching_jobs_isSet;
}

bool OAISearchJobsResponse::is_matching_jobs_Valid() const{
    return m_matching_jobs_isValid;
}

OAIResponseMetadata OAISearchJobsResponse::getMetadata() const {
    return m_metadata;
}
void OAISearchJobsResponse::setMetadata(const OAIResponseMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISearchJobsResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISearchJobsResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISearchJobsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAISearchJobsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAISearchJobsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAISearchJobsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

OAISpellingCorrection OAISearchJobsResponse::getSpellCorrection() const {
    return m_spell_correction;
}
void OAISearchJobsResponse::setSpellCorrection(const OAISpellingCorrection &spell_correction) {
    m_spell_correction = spell_correction;
    m_spell_correction_isSet = true;
}

bool OAISearchJobsResponse::is_spell_correction_Set() const{
    return m_spell_correction_isSet;
}

bool OAISearchJobsResponse::is_spell_correction_Valid() const{
    return m_spell_correction_isValid;
}

qint32 OAISearchJobsResponse::getTotalSize() const {
    return m_total_size;
}
void OAISearchJobsResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAISearchJobsResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAISearchJobsResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAISearchJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broadened_query_jobs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram_query_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_correction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
