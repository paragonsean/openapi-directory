/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobQuery::OAIJobQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobQuery::OAIJobQuery() {
    this->initializeModel();
}

OAIJobQuery::~OAIJobQuery() {}

void OAIJobQuery::initializeModel() {

    m_commute_filter_isSet = false;
    m_commute_filter_isValid = false;

    m_companies_isSet = false;
    m_companies_isValid = false;

    m_company_display_names_isSet = false;
    m_company_display_names_isValid = false;

    m_compensation_filter_isSet = false;
    m_compensation_filter_isValid = false;

    m_custom_attribute_filter_isSet = false;
    m_custom_attribute_filter_isValid = false;

    m_disable_spell_check_isSet = false;
    m_disable_spell_check_isValid = false;

    m_employment_types_isSet = false;
    m_employment_types_isValid = false;

    m_excluded_jobs_isSet = false;
    m_excluded_jobs_isValid = false;

    m_job_categories_isSet = false;
    m_job_categories_isValid = false;

    m_language_codes_isSet = false;
    m_language_codes_isValid = false;

    m_location_filters_isSet = false;
    m_location_filters_isValid = false;

    m_publish_time_range_isSet = false;
    m_publish_time_range_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_language_code_isSet = false;
    m_query_language_code_isValid = false;
}

void OAIJobQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobQuery::fromJsonObject(QJsonObject json) {

    m_commute_filter_isValid = ::OpenAPI::fromJsonValue(m_commute_filter, json[QString("commuteFilter")]);
    m_commute_filter_isSet = !json[QString("commuteFilter")].isNull() && m_commute_filter_isValid;

    m_companies_isValid = ::OpenAPI::fromJsonValue(m_companies, json[QString("companies")]);
    m_companies_isSet = !json[QString("companies")].isNull() && m_companies_isValid;

    m_company_display_names_isValid = ::OpenAPI::fromJsonValue(m_company_display_names, json[QString("companyDisplayNames")]);
    m_company_display_names_isSet = !json[QString("companyDisplayNames")].isNull() && m_company_display_names_isValid;

    m_compensation_filter_isValid = ::OpenAPI::fromJsonValue(m_compensation_filter, json[QString("compensationFilter")]);
    m_compensation_filter_isSet = !json[QString("compensationFilter")].isNull() && m_compensation_filter_isValid;

    m_custom_attribute_filter_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_filter, json[QString("customAttributeFilter")]);
    m_custom_attribute_filter_isSet = !json[QString("customAttributeFilter")].isNull() && m_custom_attribute_filter_isValid;

    m_disable_spell_check_isValid = ::OpenAPI::fromJsonValue(m_disable_spell_check, json[QString("disableSpellCheck")]);
    m_disable_spell_check_isSet = !json[QString("disableSpellCheck")].isNull() && m_disable_spell_check_isValid;

    m_employment_types_isValid = ::OpenAPI::fromJsonValue(m_employment_types, json[QString("employmentTypes")]);
    m_employment_types_isSet = !json[QString("employmentTypes")].isNull() && m_employment_types_isValid;

    m_excluded_jobs_isValid = ::OpenAPI::fromJsonValue(m_excluded_jobs, json[QString("excludedJobs")]);
    m_excluded_jobs_isSet = !json[QString("excludedJobs")].isNull() && m_excluded_jobs_isValid;

    m_job_categories_isValid = ::OpenAPI::fromJsonValue(m_job_categories, json[QString("jobCategories")]);
    m_job_categories_isSet = !json[QString("jobCategories")].isNull() && m_job_categories_isValid;

    m_language_codes_isValid = ::OpenAPI::fromJsonValue(m_language_codes, json[QString("languageCodes")]);
    m_language_codes_isSet = !json[QString("languageCodes")].isNull() && m_language_codes_isValid;

    m_location_filters_isValid = ::OpenAPI::fromJsonValue(m_location_filters, json[QString("locationFilters")]);
    m_location_filters_isSet = !json[QString("locationFilters")].isNull() && m_location_filters_isValid;

    m_publish_time_range_isValid = ::OpenAPI::fromJsonValue(m_publish_time_range, json[QString("publishTimeRange")]);
    m_publish_time_range_isSet = !json[QString("publishTimeRange")].isNull() && m_publish_time_range_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_language_code_isValid = ::OpenAPI::fromJsonValue(m_query_language_code, json[QString("queryLanguageCode")]);
    m_query_language_code_isSet = !json[QString("queryLanguageCode")].isNull() && m_query_language_code_isValid;
}

QString OAIJobQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_commute_filter.isSet()) {
        obj.insert(QString("commuteFilter"), ::OpenAPI::toJsonValue(m_commute_filter));
    }
    if (m_companies.size() > 0) {
        obj.insert(QString("companies"), ::OpenAPI::toJsonValue(m_companies));
    }
    if (m_company_display_names.size() > 0) {
        obj.insert(QString("companyDisplayNames"), ::OpenAPI::toJsonValue(m_company_display_names));
    }
    if (m_compensation_filter.isSet()) {
        obj.insert(QString("compensationFilter"), ::OpenAPI::toJsonValue(m_compensation_filter));
    }
    if (m_custom_attribute_filter_isSet) {
        obj.insert(QString("customAttributeFilter"), ::OpenAPI::toJsonValue(m_custom_attribute_filter));
    }
    if (m_disable_spell_check_isSet) {
        obj.insert(QString("disableSpellCheck"), ::OpenAPI::toJsonValue(m_disable_spell_check));
    }
    if (m_employment_types.size() > 0) {
        obj.insert(QString("employmentTypes"), ::OpenAPI::toJsonValue(m_employment_types));
    }
    if (m_excluded_jobs.size() > 0) {
        obj.insert(QString("excludedJobs"), ::OpenAPI::toJsonValue(m_excluded_jobs));
    }
    if (m_job_categories.size() > 0) {
        obj.insert(QString("jobCategories"), ::OpenAPI::toJsonValue(m_job_categories));
    }
    if (m_language_codes.size() > 0) {
        obj.insert(QString("languageCodes"), ::OpenAPI::toJsonValue(m_language_codes));
    }
    if (m_location_filters.size() > 0) {
        obj.insert(QString("locationFilters"), ::OpenAPI::toJsonValue(m_location_filters));
    }
    if (m_publish_time_range.isSet()) {
        obj.insert(QString("publishTimeRange"), ::OpenAPI::toJsonValue(m_publish_time_range));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_language_code_isSet) {
        obj.insert(QString("queryLanguageCode"), ::OpenAPI::toJsonValue(m_query_language_code));
    }
    return obj;
}

OAICommuteFilter OAIJobQuery::getCommuteFilter() const {
    return m_commute_filter;
}
void OAIJobQuery::setCommuteFilter(const OAICommuteFilter &commute_filter) {
    m_commute_filter = commute_filter;
    m_commute_filter_isSet = true;
}

bool OAIJobQuery::is_commute_filter_Set() const{
    return m_commute_filter_isSet;
}

bool OAIJobQuery::is_commute_filter_Valid() const{
    return m_commute_filter_isValid;
}

QList<QString> OAIJobQuery::getCompanies() const {
    return m_companies;
}
void OAIJobQuery::setCompanies(const QList<QString> &companies) {
    m_companies = companies;
    m_companies_isSet = true;
}

bool OAIJobQuery::is_companies_Set() const{
    return m_companies_isSet;
}

bool OAIJobQuery::is_companies_Valid() const{
    return m_companies_isValid;
}

QList<QString> OAIJobQuery::getCompanyDisplayNames() const {
    return m_company_display_names;
}
void OAIJobQuery::setCompanyDisplayNames(const QList<QString> &company_display_names) {
    m_company_display_names = company_display_names;
    m_company_display_names_isSet = true;
}

bool OAIJobQuery::is_company_display_names_Set() const{
    return m_company_display_names_isSet;
}

bool OAIJobQuery::is_company_display_names_Valid() const{
    return m_company_display_names_isValid;
}

OAICompensationFilter OAIJobQuery::getCompensationFilter() const {
    return m_compensation_filter;
}
void OAIJobQuery::setCompensationFilter(const OAICompensationFilter &compensation_filter) {
    m_compensation_filter = compensation_filter;
    m_compensation_filter_isSet = true;
}

bool OAIJobQuery::is_compensation_filter_Set() const{
    return m_compensation_filter_isSet;
}

bool OAIJobQuery::is_compensation_filter_Valid() const{
    return m_compensation_filter_isValid;
}

QString OAIJobQuery::getCustomAttributeFilter() const {
    return m_custom_attribute_filter;
}
void OAIJobQuery::setCustomAttributeFilter(const QString &custom_attribute_filter) {
    m_custom_attribute_filter = custom_attribute_filter;
    m_custom_attribute_filter_isSet = true;
}

bool OAIJobQuery::is_custom_attribute_filter_Set() const{
    return m_custom_attribute_filter_isSet;
}

bool OAIJobQuery::is_custom_attribute_filter_Valid() const{
    return m_custom_attribute_filter_isValid;
}

bool OAIJobQuery::isDisableSpellCheck() const {
    return m_disable_spell_check;
}
void OAIJobQuery::setDisableSpellCheck(const bool &disable_spell_check) {
    m_disable_spell_check = disable_spell_check;
    m_disable_spell_check_isSet = true;
}

bool OAIJobQuery::is_disable_spell_check_Set() const{
    return m_disable_spell_check_isSet;
}

bool OAIJobQuery::is_disable_spell_check_Valid() const{
    return m_disable_spell_check_isValid;
}

QList<QString> OAIJobQuery::getEmploymentTypes() const {
    return m_employment_types;
}
void OAIJobQuery::setEmploymentTypes(const QList<QString> &employment_types) {
    m_employment_types = employment_types;
    m_employment_types_isSet = true;
}

bool OAIJobQuery::is_employment_types_Set() const{
    return m_employment_types_isSet;
}

bool OAIJobQuery::is_employment_types_Valid() const{
    return m_employment_types_isValid;
}

QList<QString> OAIJobQuery::getExcludedJobs() const {
    return m_excluded_jobs;
}
void OAIJobQuery::setExcludedJobs(const QList<QString> &excluded_jobs) {
    m_excluded_jobs = excluded_jobs;
    m_excluded_jobs_isSet = true;
}

bool OAIJobQuery::is_excluded_jobs_Set() const{
    return m_excluded_jobs_isSet;
}

bool OAIJobQuery::is_excluded_jobs_Valid() const{
    return m_excluded_jobs_isValid;
}

QList<QString> OAIJobQuery::getJobCategories() const {
    return m_job_categories;
}
void OAIJobQuery::setJobCategories(const QList<QString> &job_categories) {
    m_job_categories = job_categories;
    m_job_categories_isSet = true;
}

bool OAIJobQuery::is_job_categories_Set() const{
    return m_job_categories_isSet;
}

bool OAIJobQuery::is_job_categories_Valid() const{
    return m_job_categories_isValid;
}

QList<QString> OAIJobQuery::getLanguageCodes() const {
    return m_language_codes;
}
void OAIJobQuery::setLanguageCodes(const QList<QString> &language_codes) {
    m_language_codes = language_codes;
    m_language_codes_isSet = true;
}

bool OAIJobQuery::is_language_codes_Set() const{
    return m_language_codes_isSet;
}

bool OAIJobQuery::is_language_codes_Valid() const{
    return m_language_codes_isValid;
}

QList<OAILocationFilter> OAIJobQuery::getLocationFilters() const {
    return m_location_filters;
}
void OAIJobQuery::setLocationFilters(const QList<OAILocationFilter> &location_filters) {
    m_location_filters = location_filters;
    m_location_filters_isSet = true;
}

bool OAIJobQuery::is_location_filters_Set() const{
    return m_location_filters_isSet;
}

bool OAIJobQuery::is_location_filters_Valid() const{
    return m_location_filters_isValid;
}

OAITimestampRange OAIJobQuery::getPublishTimeRange() const {
    return m_publish_time_range;
}
void OAIJobQuery::setPublishTimeRange(const OAITimestampRange &publish_time_range) {
    m_publish_time_range = publish_time_range;
    m_publish_time_range_isSet = true;
}

bool OAIJobQuery::is_publish_time_range_Set() const{
    return m_publish_time_range_isSet;
}

bool OAIJobQuery::is_publish_time_range_Valid() const{
    return m_publish_time_range_isValid;
}

QString OAIJobQuery::getQuery() const {
    return m_query;
}
void OAIJobQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIJobQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIJobQuery::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIJobQuery::getQueryLanguageCode() const {
    return m_query_language_code;
}
void OAIJobQuery::setQueryLanguageCode(const QString &query_language_code) {
    m_query_language_code = query_language_code;
    m_query_language_code_isSet = true;
}

bool OAIJobQuery::is_query_language_code_Set() const{
    return m_query_language_code_isSet;
}

bool OAIJobQuery::is_query_language_code_Valid() const{
    return m_query_language_code_isValid;
}

bool OAIJobQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commute_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_companies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_display_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compensation_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_spell_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
