/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchingJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchingJob::OAIMatchingJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchingJob::OAIMatchingJob() {
    this->initializeModel();
}

OAIMatchingJob::~OAIMatchingJob() {}

void OAIMatchingJob::initializeModel() {

    m_commute_info_isSet = false;
    m_commute_info_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_job_summary_isSet = false;
    m_job_summary_isValid = false;

    m_job_title_snippet_isSet = false;
    m_job_title_snippet_isValid = false;

    m_search_text_snippet_isSet = false;
    m_search_text_snippet_isValid = false;
}

void OAIMatchingJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchingJob::fromJsonObject(QJsonObject json) {

    m_commute_info_isValid = ::OpenAPI::fromJsonValue(m_commute_info, json[QString("commuteInfo")]);
    m_commute_info_isSet = !json[QString("commuteInfo")].isNull() && m_commute_info_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_job_summary_isValid = ::OpenAPI::fromJsonValue(m_job_summary, json[QString("jobSummary")]);
    m_job_summary_isSet = !json[QString("jobSummary")].isNull() && m_job_summary_isValid;

    m_job_title_snippet_isValid = ::OpenAPI::fromJsonValue(m_job_title_snippet, json[QString("jobTitleSnippet")]);
    m_job_title_snippet_isSet = !json[QString("jobTitleSnippet")].isNull() && m_job_title_snippet_isValid;

    m_search_text_snippet_isValid = ::OpenAPI::fromJsonValue(m_search_text_snippet, json[QString("searchTextSnippet")]);
    m_search_text_snippet_isSet = !json[QString("searchTextSnippet")].isNull() && m_search_text_snippet_isValid;
}

QString OAIMatchingJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchingJob::asJsonObject() const {
    QJsonObject obj;
    if (m_commute_info.isSet()) {
        obj.insert(QString("commuteInfo"), ::OpenAPI::toJsonValue(m_commute_info));
    }
    if (m_job.isSet()) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_job_summary_isSet) {
        obj.insert(QString("jobSummary"), ::OpenAPI::toJsonValue(m_job_summary));
    }
    if (m_job_title_snippet_isSet) {
        obj.insert(QString("jobTitleSnippet"), ::OpenAPI::toJsonValue(m_job_title_snippet));
    }
    if (m_search_text_snippet_isSet) {
        obj.insert(QString("searchTextSnippet"), ::OpenAPI::toJsonValue(m_search_text_snippet));
    }
    return obj;
}

OAICommuteInfo OAIMatchingJob::getCommuteInfo() const {
    return m_commute_info;
}
void OAIMatchingJob::setCommuteInfo(const OAICommuteInfo &commute_info) {
    m_commute_info = commute_info;
    m_commute_info_isSet = true;
}

bool OAIMatchingJob::is_commute_info_Set() const{
    return m_commute_info_isSet;
}

bool OAIMatchingJob::is_commute_info_Valid() const{
    return m_commute_info_isValid;
}

OAIJob OAIMatchingJob::getJob() const {
    return m_job;
}
void OAIMatchingJob::setJob(const OAIJob &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIMatchingJob::is_job_Set() const{
    return m_job_isSet;
}

bool OAIMatchingJob::is_job_Valid() const{
    return m_job_isValid;
}

QString OAIMatchingJob::getJobSummary() const {
    return m_job_summary;
}
void OAIMatchingJob::setJobSummary(const QString &job_summary) {
    m_job_summary = job_summary;
    m_job_summary_isSet = true;
}

bool OAIMatchingJob::is_job_summary_Set() const{
    return m_job_summary_isSet;
}

bool OAIMatchingJob::is_job_summary_Valid() const{
    return m_job_summary_isValid;
}

QString OAIMatchingJob::getJobTitleSnippet() const {
    return m_job_title_snippet;
}
void OAIMatchingJob::setJobTitleSnippet(const QString &job_title_snippet) {
    m_job_title_snippet = job_title_snippet;
    m_job_title_snippet_isSet = true;
}

bool OAIMatchingJob::is_job_title_snippet_Set() const{
    return m_job_title_snippet_isSet;
}

bool OAIMatchingJob::is_job_title_snippet_Valid() const{
    return m_job_title_snippet_isValid;
}

QString OAIMatchingJob::getSearchTextSnippet() const {
    return m_search_text_snippet;
}
void OAIMatchingJob::setSearchTextSnippet(const QString &search_text_snippet) {
    m_search_text_snippet = search_text_snippet;
    m_search_text_snippet_isSet = true;
}

bool OAIMatchingJob::is_search_text_snippet_Set() const{
    return m_search_text_snippet_isSet;
}

bool OAIMatchingJob::is_search_text_snippet_Valid() const{
    return m_search_text_snippet_isValid;
}

bool OAIMatchingJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commute_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_text_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchingJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
