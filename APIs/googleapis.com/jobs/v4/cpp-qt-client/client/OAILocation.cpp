/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_lat_lng_isSet = false;
    m_lat_lng_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_postal_address_isSet = false;
    m_postal_address_isValid = false;

    m_radius_miles_isSet = false;
    m_radius_miles_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_lat_lng_isValid = ::OpenAPI::fromJsonValue(m_lat_lng, json[QString("latLng")]);
    m_lat_lng_isSet = !json[QString("latLng")].isNull() && m_lat_lng_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_postal_address_isValid = ::OpenAPI::fromJsonValue(m_postal_address, json[QString("postalAddress")]);
    m_postal_address_isSet = !json[QString("postalAddress")].isNull() && m_postal_address_isValid;

    m_radius_miles_isValid = ::OpenAPI::fromJsonValue(m_radius_miles, json[QString("radiusMiles")]);
    m_radius_miles_isSet = !json[QString("radiusMiles")].isNull() && m_radius_miles_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_lng.isSet()) {
        obj.insert(QString("latLng"), ::OpenAPI::toJsonValue(m_lat_lng));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_postal_address.isSet()) {
        obj.insert(QString("postalAddress"), ::OpenAPI::toJsonValue(m_postal_address));
    }
    if (m_radius_miles_isSet) {
        obj.insert(QString("radiusMiles"), ::OpenAPI::toJsonValue(m_radius_miles));
    }
    return obj;
}

OAILatLng OAILocation::getLatLng() const {
    return m_lat_lng;
}
void OAILocation::setLatLng(const OAILatLng &lat_lng) {
    m_lat_lng = lat_lng;
    m_lat_lng_isSet = true;
}

bool OAILocation::is_lat_lng_Set() const{
    return m_lat_lng_isSet;
}

bool OAILocation::is_lat_lng_Valid() const{
    return m_lat_lng_isValid;
}

QString OAILocation::getLocationType() const {
    return m_location_type;
}
void OAILocation::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAILocation::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAILocation::is_location_type_Valid() const{
    return m_location_type_isValid;
}

OAIPostalAddress OAILocation::getPostalAddress() const {
    return m_postal_address;
}
void OAILocation::setPostalAddress(const OAIPostalAddress &postal_address) {
    m_postal_address = postal_address;
    m_postal_address_isSet = true;
}

bool OAILocation::is_postal_address_Set() const{
    return m_postal_address_isSet;
}

bool OAILocation::is_postal_address_Valid() const{
    return m_postal_address_isValid;
}

double OAILocation::getRadiusMiles() const {
    return m_radius_miles;
}
void OAILocation::setRadiusMiles(const double &radius_miles) {
    m_radius_miles = radius_miles;
    m_radius_miles_isSet = true;
}

bool OAILocation::is_radius_miles_Set() const{
    return m_radius_miles_isSet;
}

bool OAILocation::is_radius_miles_Valid() const{
    return m_radius_miles_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_lng.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_miles_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
