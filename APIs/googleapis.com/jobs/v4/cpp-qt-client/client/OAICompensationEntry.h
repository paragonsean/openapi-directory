/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompensationEntry.h
 *
 * A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
 */

#ifndef OAICompensationEntry_H
#define OAICompensationEntry_H

#include <QJsonObject>

#include "OAICompensationRange.h"
#include "OAIMoney.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMoney;
class OAICompensationRange;

class OAICompensationEntry : public OAIObject {
public:
    OAICompensationEntry();
    OAICompensationEntry(QString json);
    ~OAICompensationEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMoney getAmount() const;
    void setAmount(const OAIMoney &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getExpectedUnitsPerYear() const;
    void setExpectedUnitsPerYear(const double &expected_units_per_year);
    bool is_expected_units_per_year_Set() const;
    bool is_expected_units_per_year_Valid() const;

    OAICompensationRange getRange() const;
    void setRange(const OAICompensationRange &range);
    bool is_range_Set() const;
    bool is_range_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMoney m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_expected_units_per_year;
    bool m_expected_units_per_year_isSet;
    bool m_expected_units_per_year_isValid;

    OAICompensationRange m_range;
    bool m_range_isSet;
    bool m_range_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompensationEntry)

#endif // OAICompensationEntry_H
