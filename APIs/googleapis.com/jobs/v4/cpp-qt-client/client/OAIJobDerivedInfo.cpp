/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobDerivedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobDerivedInfo::OAIJobDerivedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobDerivedInfo::OAIJobDerivedInfo() {
    this->initializeModel();
}

OAIJobDerivedInfo::~OAIJobDerivedInfo() {}

void OAIJobDerivedInfo::initializeModel() {

    m_job_categories_isSet = false;
    m_job_categories_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAIJobDerivedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobDerivedInfo::fromJsonObject(QJsonObject json) {

    m_job_categories_isValid = ::OpenAPI::fromJsonValue(m_job_categories, json[QString("jobCategories")]);
    m_job_categories_isSet = !json[QString("jobCategories")].isNull() && m_job_categories_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAIJobDerivedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobDerivedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_job_categories.size() > 0) {
        obj.insert(QString("jobCategories"), ::OpenAPI::toJsonValue(m_job_categories));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

QList<QString> OAIJobDerivedInfo::getJobCategories() const {
    return m_job_categories;
}
void OAIJobDerivedInfo::setJobCategories(const QList<QString> &job_categories) {
    m_job_categories = job_categories;
    m_job_categories_isSet = true;
}

bool OAIJobDerivedInfo::is_job_categories_Set() const{
    return m_job_categories_isSet;
}

bool OAIJobDerivedInfo::is_job_categories_Valid() const{
    return m_job_categories_isValid;
}

QList<OAILocation> OAIJobDerivedInfo::getLocations() const {
    return m_locations;
}
void OAIJobDerivedInfo::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIJobDerivedInfo::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIJobDerivedInfo::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIJobDerivedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobDerivedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
