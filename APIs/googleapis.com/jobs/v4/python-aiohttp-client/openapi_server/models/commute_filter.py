# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lat_lng import LatLng
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server import util


class CommuteFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_imprecise_addresses: bool=None, commute_method: str=None, departure_time: TimeOfDay=None, road_traffic: str=None, start_coordinates: LatLng=None, travel_duration: str=None):
        """CommuteFilter - a model defined in OpenAPI

        :param allow_imprecise_addresses: The allow_imprecise_addresses of this CommuteFilter.
        :param commute_method: The commute_method of this CommuteFilter.
        :param departure_time: The departure_time of this CommuteFilter.
        :param road_traffic: The road_traffic of this CommuteFilter.
        :param start_coordinates: The start_coordinates of this CommuteFilter.
        :param travel_duration: The travel_duration of this CommuteFilter.
        """
        self.openapi_types = {
            'allow_imprecise_addresses': bool,
            'commute_method': str,
            'departure_time': TimeOfDay,
            'road_traffic': str,
            'start_coordinates': LatLng,
            'travel_duration': str
        }

        self.attribute_map = {
            'allow_imprecise_addresses': 'allowImpreciseAddresses',
            'commute_method': 'commuteMethod',
            'departure_time': 'departureTime',
            'road_traffic': 'roadTraffic',
            'start_coordinates': 'startCoordinates',
            'travel_duration': 'travelDuration'
        }

        self._allow_imprecise_addresses = allow_imprecise_addresses
        self._commute_method = commute_method
        self._departure_time = departure_time
        self._road_traffic = road_traffic
        self._start_coordinates = start_coordinates
        self._travel_duration = travel_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommuteFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommuteFilter of this CommuteFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_imprecise_addresses(self):
        """Gets the allow_imprecise_addresses of this CommuteFilter.

        If `true`, jobs without street level addresses may also be returned. For city level addresses, the city center is used. For state and coarser level addresses, text matching is used. If this field is set to `false` or isn't specified, only jobs that include street level addresses will be returned by commute search.

        :return: The allow_imprecise_addresses of this CommuteFilter.
        :rtype: bool
        """
        return self._allow_imprecise_addresses

    @allow_imprecise_addresses.setter
    def allow_imprecise_addresses(self, allow_imprecise_addresses):
        """Sets the allow_imprecise_addresses of this CommuteFilter.

        If `true`, jobs without street level addresses may also be returned. For city level addresses, the city center is used. For state and coarser level addresses, text matching is used. If this field is set to `false` or isn't specified, only jobs that include street level addresses will be returned by commute search.

        :param allow_imprecise_addresses: The allow_imprecise_addresses of this CommuteFilter.
        :type allow_imprecise_addresses: bool
        """

        self._allow_imprecise_addresses = allow_imprecise_addresses

    @property
    def commute_method(self):
        """Gets the commute_method of this CommuteFilter.

        Required. The method of transportation to calculate the commute time for.

        :return: The commute_method of this CommuteFilter.
        :rtype: str
        """
        return self._commute_method

    @commute_method.setter
    def commute_method(self, commute_method):
        """Sets the commute_method of this CommuteFilter.

        Required. The method of transportation to calculate the commute time for.

        :param commute_method: The commute_method of this CommuteFilter.
        :type commute_method: str
        """
        allowed_values = ["COMMUTE_METHOD_UNSPECIFIED", "DRIVING", "TRANSIT", "WALKING", "CYCLING", "TRANSIT_ACCESSIBLE"]  # noqa: E501
        if commute_method not in allowed_values:
            raise ValueError(
                "Invalid value for `commute_method` ({0}), must be one of {1}"
                .format(commute_method, allowed_values)
            )

        self._commute_method = commute_method

    @property
    def departure_time(self):
        """Gets the departure_time of this CommuteFilter.


        :return: The departure_time of this CommuteFilter.
        :rtype: TimeOfDay
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this CommuteFilter.


        :param departure_time: The departure_time of this CommuteFilter.
        :type departure_time: TimeOfDay
        """

        self._departure_time = departure_time

    @property
    def road_traffic(self):
        """Gets the road_traffic of this CommuteFilter.

        Specifies the traffic density to use when calculating commute time.

        :return: The road_traffic of this CommuteFilter.
        :rtype: str
        """
        return self._road_traffic

    @road_traffic.setter
    def road_traffic(self, road_traffic):
        """Sets the road_traffic of this CommuteFilter.

        Specifies the traffic density to use when calculating commute time.

        :param road_traffic: The road_traffic of this CommuteFilter.
        :type road_traffic: str
        """
        allowed_values = ["ROAD_TRAFFIC_UNSPECIFIED", "TRAFFIC_FREE", "BUSY_HOUR"]  # noqa: E501
        if road_traffic not in allowed_values:
            raise ValueError(
                "Invalid value for `road_traffic` ({0}), must be one of {1}"
                .format(road_traffic, allowed_values)
            )

        self._road_traffic = road_traffic

    @property
    def start_coordinates(self):
        """Gets the start_coordinates of this CommuteFilter.


        :return: The start_coordinates of this CommuteFilter.
        :rtype: LatLng
        """
        return self._start_coordinates

    @start_coordinates.setter
    def start_coordinates(self, start_coordinates):
        """Sets the start_coordinates of this CommuteFilter.


        :param start_coordinates: The start_coordinates of this CommuteFilter.
        :type start_coordinates: LatLng
        """

        self._start_coordinates = start_coordinates

    @property
    def travel_duration(self):
        """Gets the travel_duration of this CommuteFilter.

        Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.

        :return: The travel_duration of this CommuteFilter.
        :rtype: str
        """
        return self._travel_duration

    @travel_duration.setter
    def travel_duration(self, travel_duration):
        """Sets the travel_duration of this CommuteFilter.

        Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.

        :param travel_duration: The travel_duration of this CommuteFilter.
        :type travel_duration: str
        """

        self._travel_duration = travel_duration
