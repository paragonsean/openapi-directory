# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, end_time: str=None, failure_count: int=None, state: str=None, state_description: str=None, success_count: int=None, total_count: int=None, update_time: str=None):
        """BatchOperationMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this BatchOperationMetadata.
        :param end_time: The end_time of this BatchOperationMetadata.
        :param failure_count: The failure_count of this BatchOperationMetadata.
        :param state: The state of this BatchOperationMetadata.
        :param state_description: The state_description of this BatchOperationMetadata.
        :param success_count: The success_count of this BatchOperationMetadata.
        :param total_count: The total_count of this BatchOperationMetadata.
        :param update_time: The update_time of this BatchOperationMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'end_time': str,
            'failure_count': int,
            'state': str,
            'state_description': str,
            'success_count': int,
            'total_count': int,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'end_time': 'endTime',
            'failure_count': 'failureCount',
            'state': 'state',
            'state_description': 'stateDescription',
            'success_count': 'successCount',
            'total_count': 'totalCount',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._end_time = end_time
        self._failure_count = failure_count
        self._state = state
        self._state_description = state_description
        self._success_count = success_count
        self._total_count = total_count
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchOperationMetadata of this BatchOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this BatchOperationMetadata.

        The time when the batch operation is created.

        :return: The create_time of this BatchOperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BatchOperationMetadata.

        The time when the batch operation is created.

        :param create_time: The create_time of this BatchOperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this BatchOperationMetadata.

        The time when the batch operation is finished and google.longrunning.Operation.done is set to `true`.

        :return: The end_time of this BatchOperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BatchOperationMetadata.

        The time when the batch operation is finished and google.longrunning.Operation.done is set to `true`.

        :param end_time: The end_time of this BatchOperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def failure_count(self):
        """Gets the failure_count of this BatchOperationMetadata.

        Count of failed item(s) inside an operation.

        :return: The failure_count of this BatchOperationMetadata.
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this BatchOperationMetadata.

        Count of failed item(s) inside an operation.

        :param failure_count: The failure_count of this BatchOperationMetadata.
        :type failure_count: int
        """

        self._failure_count = failure_count

    @property
    def state(self):
        """Gets the state of this BatchOperationMetadata.

        The state of a long running operation.

        :return: The state of this BatchOperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BatchOperationMetadata.

        The state of a long running operation.

        :param state: The state of this BatchOperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INITIALIZING", "PROCESSING", "SUCCEEDED", "FAILED", "CANCELLING", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_description(self):
        """Gets the state_description of this BatchOperationMetadata.

        More detailed information about operation state.

        :return: The state_description of this BatchOperationMetadata.
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this BatchOperationMetadata.

        More detailed information about operation state.

        :param state_description: The state_description of this BatchOperationMetadata.
        :type state_description: str
        """

        self._state_description = state_description

    @property
    def success_count(self):
        """Gets the success_count of this BatchOperationMetadata.

        Count of successful item(s) inside an operation.

        :return: The success_count of this BatchOperationMetadata.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this BatchOperationMetadata.

        Count of successful item(s) inside an operation.

        :param success_count: The success_count of this BatchOperationMetadata.
        :type success_count: int
        """

        self._success_count = success_count

    @property
    def total_count(self):
        """Gets the total_count of this BatchOperationMetadata.

        Count of total item(s) inside an operation.

        :return: The total_count of this BatchOperationMetadata.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this BatchOperationMetadata.

        Count of total item(s) inside an operation.

        :param total_count: The total_count of this BatchOperationMetadata.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def update_time(self):
        """Gets the update_time of this BatchOperationMetadata.

        The time when the batch operation status is updated. The metadata and the update_time is refreshed every minute otherwise cached data is returned.

        :return: The update_time of this BatchOperationMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BatchOperationMetadata.

        The time when the batch operation status is updated. The metadata and the update_time is refreshed every minute otherwise cached data is returned.

        :param update_time: The update_time of this BatchOperationMetadata.
        :type update_time: str
        """

        self._update_time = update_time
