# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_event import JobEvent
from openapi_server import util


class ClientEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, event_id: str=None, event_notes: str=None, job_event: JobEvent=None, request_id: str=None):
        """ClientEvent - a model defined in OpenAPI

        :param create_time: The create_time of this ClientEvent.
        :param event_id: The event_id of this ClientEvent.
        :param event_notes: The event_notes of this ClientEvent.
        :param job_event: The job_event of this ClientEvent.
        :param request_id: The request_id of this ClientEvent.
        """
        self.openapi_types = {
            'create_time': str,
            'event_id': str,
            'event_notes': str,
            'job_event': JobEvent,
            'request_id': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'event_id': 'eventId',
            'event_notes': 'eventNotes',
            'job_event': 'jobEvent',
            'request_id': 'requestId'
        }

        self._create_time = create_time
        self._event_id = event_id
        self._event_notes = event_notes
        self._job_event = job_event
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientEvent of this ClientEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ClientEvent.

        Required. The timestamp of the event.

        :return: The create_time of this ClientEvent.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ClientEvent.

        Required. The timestamp of the event.

        :param create_time: The create_time of this ClientEvent.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def event_id(self):
        """Gets the event_id of this ClientEvent.

        Required. A unique identifier, generated by the client application.

        :return: The event_id of this ClientEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ClientEvent.

        Required. A unique identifier, generated by the client application.

        :param event_id: The event_id of this ClientEvent.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_notes(self):
        """Gets the event_notes of this ClientEvent.

        Notes about the event provided by recruiters or other users, for example, feedback on why a job was bookmarked.

        :return: The event_notes of this ClientEvent.
        :rtype: str
        """
        return self._event_notes

    @event_notes.setter
    def event_notes(self, event_notes):
        """Sets the event_notes of this ClientEvent.

        Notes about the event provided by recruiters or other users, for example, feedback on why a job was bookmarked.

        :param event_notes: The event_notes of this ClientEvent.
        :type event_notes: str
        """

        self._event_notes = event_notes

    @property
    def job_event(self):
        """Gets the job_event of this ClientEvent.


        :return: The job_event of this ClientEvent.
        :rtype: JobEvent
        """
        return self._job_event

    @job_event.setter
    def job_event(self, job_event):
        """Sets the job_event of this ClientEvent.


        :param job_event: The job_event of this ClientEvent.
        :type job_event: JobEvent
        """

        self._job_event = job_event

    @property
    def request_id(self):
        """Gets the request_id of this ClientEvent.

        Strongly recommended for the best service experience. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.

        :return: The request_id of this ClientEvent.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ClientEvent.

        Strongly recommended for the best service experience. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.

        :param request_id: The request_id of this ClientEvent.
        :type request_id: str
        """

        self._request_id = request_id
