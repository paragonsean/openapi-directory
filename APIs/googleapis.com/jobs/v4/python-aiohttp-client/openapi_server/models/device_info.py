# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: str=None, id: str=None):
        """DeviceInfo - a model defined in OpenAPI

        :param device_type: The device_type of this DeviceInfo.
        :param id: The id of this DeviceInfo.
        """
        self.openapi_types = {
            'device_type': str,
            'id': str
        }

        self.attribute_map = {
            'device_type': 'deviceType',
            'id': 'id'
        }

        self._device_type = device_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceInfo of this DeviceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this DeviceInfo.

        Type of the device.

        :return: The device_type of this DeviceInfo.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceInfo.

        Type of the device.

        :param device_type: The device_type of this DeviceInfo.
        :type device_type: str
        """
        allowed_values = ["DEVICE_TYPE_UNSPECIFIED", "WEB", "MOBILE_WEB", "ANDROID", "IOS", "BOT", "OTHER"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def id(self):
        """Gets the id of this DeviceInfo.

        A device-specific ID. The ID must be a unique identifier that distinguishes the device from other devices.

        :return: The id of this DeviceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceInfo.

        A device-specific ID. The ID must be a unique identifier that distinguishes the device from other devices.

        :param id: The id of this DeviceInfo.
        :type id: str
        """

        self._id = id
