# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpellingCorrection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corrected: bool=None, corrected_html: str=None, corrected_text: str=None):
        """SpellingCorrection - a model defined in OpenAPI

        :param corrected: The corrected of this SpellingCorrection.
        :param corrected_html: The corrected_html of this SpellingCorrection.
        :param corrected_text: The corrected_text of this SpellingCorrection.
        """
        self.openapi_types = {
            'corrected': bool,
            'corrected_html': str,
            'corrected_text': str
        }

        self.attribute_map = {
            'corrected': 'corrected',
            'corrected_html': 'correctedHtml',
            'corrected_text': 'correctedText'
        }

        self._corrected = corrected
        self._corrected_html = corrected_html
        self._corrected_text = corrected_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpellingCorrection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpellingCorrection of this SpellingCorrection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corrected(self):
        """Gets the corrected of this SpellingCorrection.

        Indicates if the query was corrected by the spell checker.

        :return: The corrected of this SpellingCorrection.
        :rtype: bool
        """
        return self._corrected

    @corrected.setter
    def corrected(self, corrected):
        """Sets the corrected of this SpellingCorrection.

        Indicates if the query was corrected by the spell checker.

        :param corrected: The corrected of this SpellingCorrection.
        :type corrected: bool
        """

        self._corrected = corrected

    @property
    def corrected_html(self):
        """Gets the corrected_html of this SpellingCorrection.

        Corrected output with html tags to highlight the corrected words. Corrected words are called out with the \"*...*\" html tags. For example, the user input query is \"software enginear\", where the second word, \"enginear,\" is incorrect. It should be \"engineer\". When spelling correction is enabled, this value is \"software *engineer*\".

        :return: The corrected_html of this SpellingCorrection.
        :rtype: str
        """
        return self._corrected_html

    @corrected_html.setter
    def corrected_html(self, corrected_html):
        """Sets the corrected_html of this SpellingCorrection.

        Corrected output with html tags to highlight the corrected words. Corrected words are called out with the \"*...*\" html tags. For example, the user input query is \"software enginear\", where the second word, \"enginear,\" is incorrect. It should be \"engineer\". When spelling correction is enabled, this value is \"software *engineer*\".

        :param corrected_html: The corrected_html of this SpellingCorrection.
        :type corrected_html: str
        """

        self._corrected_html = corrected_html

    @property
    def corrected_text(self):
        """Gets the corrected_text of this SpellingCorrection.

        Correction output consisting of the corrected keyword string.

        :return: The corrected_text of this SpellingCorrection.
        :rtype: str
        """
        return self._corrected_text

    @corrected_text.setter
    def corrected_text(self, corrected_text):
        """Sets the corrected_text of this SpellingCorrection.

        Correction output consisting of the corrected keyword string.

        :param corrected_text: The corrected_text of this SpellingCorrection.
        :type corrected_text: str
        """

        self._corrected_text = corrected_text
