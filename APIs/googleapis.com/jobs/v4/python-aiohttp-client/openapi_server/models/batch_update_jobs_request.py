# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job import Job
from openapi_server import util


class BatchUpdateJobsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jobs: List[Job]=None, update_mask: str=None):
        """BatchUpdateJobsRequest - a model defined in OpenAPI

        :param jobs: The jobs of this BatchUpdateJobsRequest.
        :param update_mask: The update_mask of this BatchUpdateJobsRequest.
        """
        self.openapi_types = {
            'jobs': List[Job],
            'update_mask': str
        }

        self.attribute_map = {
            'jobs': 'jobs',
            'update_mask': 'updateMask'
        }

        self._jobs = jobs
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateJobsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateJobsRequest of this BatchUpdateJobsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jobs(self):
        """Gets the jobs of this BatchUpdateJobsRequest.

        Required. The jobs to be updated. A maximum of 200 jobs can be updated in a batch.

        :return: The jobs of this BatchUpdateJobsRequest.
        :rtype: List[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this BatchUpdateJobsRequest.

        Required. The jobs to be updated. A maximum of 200 jobs can be updated in a batch.

        :param jobs: The jobs of this BatchUpdateJobsRequest.
        :type jobs: List[Job]
        """

        self._jobs = jobs

    @property
    def update_mask(self):
        """Gets the update_mask of this BatchUpdateJobsRequest.

        Strongly recommended for the best service experience. Be aware that it will also increase latency when checking the status of a batch operation. If update_mask is provided, only the specified fields in Job are updated. Otherwise all the fields are updated. A field mask to restrict the fields that are updated. Only top level fields of Job are supported. If update_mask is provided, The Job inside JobResult will only contains fields that is updated, plus the Id of the Job. Otherwise, Job will include all fields, which can yield a very large response.

        :return: The update_mask of this BatchUpdateJobsRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this BatchUpdateJobsRequest.

        Strongly recommended for the best service experience. Be aware that it will also increase latency when checking the status of a batch operation. If update_mask is provided, only the specified fields in Job are updated. Otherwise all the fields are updated. A field mask to restrict the fields that are updated. Only top level fields of Job are supported. If update_mask is provided, The Job inside JobResult will only contains fields that is updated, plus the Id of the Job. Otherwise, Job will include all fields, which can yield a very large response.

        :param update_mask: The update_mask of this BatchUpdateJobsRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
