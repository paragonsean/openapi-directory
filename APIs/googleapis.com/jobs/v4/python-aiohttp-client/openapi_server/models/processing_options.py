# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProcessingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_street_address_resolution: bool=None, html_sanitization: str=None):
        """ProcessingOptions - a model defined in OpenAPI

        :param disable_street_address_resolution: The disable_street_address_resolution of this ProcessingOptions.
        :param html_sanitization: The html_sanitization of this ProcessingOptions.
        """
        self.openapi_types = {
            'disable_street_address_resolution': bool,
            'html_sanitization': str
        }

        self.attribute_map = {
            'disable_street_address_resolution': 'disableStreetAddressResolution',
            'html_sanitization': 'htmlSanitization'
        }

        self._disable_street_address_resolution = disable_street_address_resolution
        self._html_sanitization = html_sanitization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessingOptions of this ProcessingOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_street_address_resolution(self):
        """Gets the disable_street_address_resolution of this ProcessingOptions.

        If set to `true`, the service does not attempt to resolve a more precise address for the job.

        :return: The disable_street_address_resolution of this ProcessingOptions.
        :rtype: bool
        """
        return self._disable_street_address_resolution

    @disable_street_address_resolution.setter
    def disable_street_address_resolution(self, disable_street_address_resolution):
        """Sets the disable_street_address_resolution of this ProcessingOptions.

        If set to `true`, the service does not attempt to resolve a more precise address for the job.

        :param disable_street_address_resolution: The disable_street_address_resolution of this ProcessingOptions.
        :type disable_street_address_resolution: bool
        """

        self._disable_street_address_resolution = disable_street_address_resolution

    @property
    def html_sanitization(self):
        """Gets the html_sanitization of this ProcessingOptions.

        Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.

        :return: The html_sanitization of this ProcessingOptions.
        :rtype: str
        """
        return self._html_sanitization

    @html_sanitization.setter
    def html_sanitization(self, html_sanitization):
        """Sets the html_sanitization of this ProcessingOptions.

        Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.

        :param html_sanitization: The html_sanitization of this ProcessingOptions.
        :type html_sanitization: str
        """
        allowed_values = ["HTML_SANITIZATION_UNSPECIFIED", "HTML_SANITIZATION_DISABLED", "SIMPLE_FORMATTING_ONLY"]  # noqa: E501
        if html_sanitization not in allowed_values:
            raise ValueError(
                "Invalid value for `html_sanitization` ({0}), must be one of {1}"
                .format(html_sanitization, allowed_values)
            )

        self._html_sanitization = html_sanitization
