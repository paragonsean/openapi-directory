# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commute_filter import CommuteFilter
from openapi_server.models.compensation_filter import CompensationFilter
from openapi_server.models.location_filter import LocationFilter
from openapi_server.models.timestamp_range import TimestampRange
from openapi_server import util


class JobQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commute_filter: CommuteFilter=None, companies: List[str]=None, company_display_names: List[str]=None, compensation_filter: CompensationFilter=None, custom_attribute_filter: str=None, disable_spell_check: bool=None, employment_types: List[str]=None, excluded_jobs: List[str]=None, job_categories: List[str]=None, language_codes: List[str]=None, location_filters: List[LocationFilter]=None, publish_time_range: TimestampRange=None, query: str=None, query_language_code: str=None):
        """JobQuery - a model defined in OpenAPI

        :param commute_filter: The commute_filter of this JobQuery.
        :param companies: The companies of this JobQuery.
        :param company_display_names: The company_display_names of this JobQuery.
        :param compensation_filter: The compensation_filter of this JobQuery.
        :param custom_attribute_filter: The custom_attribute_filter of this JobQuery.
        :param disable_spell_check: The disable_spell_check of this JobQuery.
        :param employment_types: The employment_types of this JobQuery.
        :param excluded_jobs: The excluded_jobs of this JobQuery.
        :param job_categories: The job_categories of this JobQuery.
        :param language_codes: The language_codes of this JobQuery.
        :param location_filters: The location_filters of this JobQuery.
        :param publish_time_range: The publish_time_range of this JobQuery.
        :param query: The query of this JobQuery.
        :param query_language_code: The query_language_code of this JobQuery.
        """
        self.openapi_types = {
            'commute_filter': CommuteFilter,
            'companies': List[str],
            'company_display_names': List[str],
            'compensation_filter': CompensationFilter,
            'custom_attribute_filter': str,
            'disable_spell_check': bool,
            'employment_types': List[str],
            'excluded_jobs': List[str],
            'job_categories': List[str],
            'language_codes': List[str],
            'location_filters': List[LocationFilter],
            'publish_time_range': TimestampRange,
            'query': str,
            'query_language_code': str
        }

        self.attribute_map = {
            'commute_filter': 'commuteFilter',
            'companies': 'companies',
            'company_display_names': 'companyDisplayNames',
            'compensation_filter': 'compensationFilter',
            'custom_attribute_filter': 'customAttributeFilter',
            'disable_spell_check': 'disableSpellCheck',
            'employment_types': 'employmentTypes',
            'excluded_jobs': 'excludedJobs',
            'job_categories': 'jobCategories',
            'language_codes': 'languageCodes',
            'location_filters': 'locationFilters',
            'publish_time_range': 'publishTimeRange',
            'query': 'query',
            'query_language_code': 'queryLanguageCode'
        }

        self._commute_filter = commute_filter
        self._companies = companies
        self._company_display_names = company_display_names
        self._compensation_filter = compensation_filter
        self._custom_attribute_filter = custom_attribute_filter
        self._disable_spell_check = disable_spell_check
        self._employment_types = employment_types
        self._excluded_jobs = excluded_jobs
        self._job_categories = job_categories
        self._language_codes = language_codes
        self._location_filters = location_filters
        self._publish_time_range = publish_time_range
        self._query = query
        self._query_language_code = query_language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobQuery of this JobQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commute_filter(self):
        """Gets the commute_filter of this JobQuery.


        :return: The commute_filter of this JobQuery.
        :rtype: CommuteFilter
        """
        return self._commute_filter

    @commute_filter.setter
    def commute_filter(self, commute_filter):
        """Sets the commute_filter of this JobQuery.


        :param commute_filter: The commute_filter of this JobQuery.
        :type commute_filter: CommuteFilter
        """

        self._commute_filter = commute_filter

    @property
    def companies(self):
        """Gets the companies of this JobQuery.

        This filter specifies the company entities to search against. If a value isn't specified, jobs are searched for against all companies. If multiple values are specified, jobs are searched against the companies specified. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\". At most 20 company filters are allowed.

        :return: The companies of this JobQuery.
        :rtype: List[str]
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this JobQuery.

        This filter specifies the company entities to search against. If a value isn't specified, jobs are searched for against all companies. If multiple values are specified, jobs are searched against the companies specified. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\". At most 20 company filters are allowed.

        :param companies: The companies of this JobQuery.
        :type companies: List[str]
        """

        self._companies = companies

    @property
    def company_display_names(self):
        """Gets the company_display_names of this JobQuery.

        This filter specifies the company Company.display_name of the jobs to search against. The company name must match the value exactly. Alternatively, the value being searched for can be wrapped in different match operators. `SUBSTRING_MATCH([value])` The company name must contain a case insensitive substring match of the value. Using this function may increase latency. Sample Value: `SUBSTRING_MATCH(google)` `MULTI_WORD_TOKEN_MATCH([value])` The value will be treated as a multi word token and the company name must contain a case insensitive match of the value. Using this function may increase latency. Sample Value: `MULTI_WORD_TOKEN_MATCH(google)` If a value isn't specified, jobs within the search results are associated with any company. If multiple values are specified, jobs within the search results may be associated with any of the specified companies. At most 20 company display name filters are allowed.

        :return: The company_display_names of this JobQuery.
        :rtype: List[str]
        """
        return self._company_display_names

    @company_display_names.setter
    def company_display_names(self, company_display_names):
        """Sets the company_display_names of this JobQuery.

        This filter specifies the company Company.display_name of the jobs to search against. The company name must match the value exactly. Alternatively, the value being searched for can be wrapped in different match operators. `SUBSTRING_MATCH([value])` The company name must contain a case insensitive substring match of the value. Using this function may increase latency. Sample Value: `SUBSTRING_MATCH(google)` `MULTI_WORD_TOKEN_MATCH([value])` The value will be treated as a multi word token and the company name must contain a case insensitive match of the value. Using this function may increase latency. Sample Value: `MULTI_WORD_TOKEN_MATCH(google)` If a value isn't specified, jobs within the search results are associated with any company. If multiple values are specified, jobs within the search results may be associated with any of the specified companies. At most 20 company display name filters are allowed.

        :param company_display_names: The company_display_names of this JobQuery.
        :type company_display_names: List[str]
        """

        self._company_display_names = company_display_names

    @property
    def compensation_filter(self):
        """Gets the compensation_filter of this JobQuery.


        :return: The compensation_filter of this JobQuery.
        :rtype: CompensationFilter
        """
        return self._compensation_filter

    @compensation_filter.setter
    def compensation_filter(self, compensation_filter):
        """Sets the compensation_filter of this JobQuery.


        :param compensation_filter: The compensation_filter of this JobQuery.
        :type compensation_filter: CompensationFilter
        """

        self._compensation_filter = compensation_filter

    @property
    def custom_attribute_filter(self):
        """Gets the custom_attribute_filter of this JobQuery.

        This filter specifies a structured syntax to match against the Job.custom_attributes marked as `filterable`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left of the operator is a custom field key and the right of the operator is a number or a quoted string. You must escape backslash (\\\\) and quote (\\\") characters. Supported functions are `LOWER([field_name])` to perform a case insensitive match and `EMPTY([field_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, \"((A AND B AND C) OR NOT D) AND E\"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 10000 bytes in length. Sample Query: `(LOWER(driving_license)=\"class \\\"a\\\"\" OR EMPTY(driving_license)) AND driving_years > 10`

        :return: The custom_attribute_filter of this JobQuery.
        :rtype: str
        """
        return self._custom_attribute_filter

    @custom_attribute_filter.setter
    def custom_attribute_filter(self, custom_attribute_filter):
        """Sets the custom_attribute_filter of this JobQuery.

        This filter specifies a structured syntax to match against the Job.custom_attributes marked as `filterable`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left of the operator is a custom field key and the right of the operator is a number or a quoted string. You must escape backslash (\\\\) and quote (\\\") characters. Supported functions are `LOWER([field_name])` to perform a case insensitive match and `EMPTY([field_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, \"((A AND B AND C) OR NOT D) AND E\"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 10000 bytes in length. Sample Query: `(LOWER(driving_license)=\"class \\\"a\\\"\" OR EMPTY(driving_license)) AND driving_years > 10`

        :param custom_attribute_filter: The custom_attribute_filter of this JobQuery.
        :type custom_attribute_filter: str
        """

        self._custom_attribute_filter = custom_attribute_filter

    @property
    def disable_spell_check(self):
        """Gets the disable_spell_check of this JobQuery.

        This flag controls the spell-check feature. If false, the service attempts to correct a misspelled query, for example, \"enginee\" is corrected to \"engineer\". Defaults to false: a spell check is performed.

        :return: The disable_spell_check of this JobQuery.
        :rtype: bool
        """
        return self._disable_spell_check

    @disable_spell_check.setter
    def disable_spell_check(self, disable_spell_check):
        """Sets the disable_spell_check of this JobQuery.

        This flag controls the spell-check feature. If false, the service attempts to correct a misspelled query, for example, \"enginee\" is corrected to \"engineer\". Defaults to false: a spell check is performed.

        :param disable_spell_check: The disable_spell_check of this JobQuery.
        :type disable_spell_check: bool
        """

        self._disable_spell_check = disable_spell_check

    @property
    def employment_types(self):
        """Gets the employment_types of this JobQuery.

        The employment type filter specifies the employment type of jobs to search against, such as EmploymentType.FULL_TIME. If a value isn't specified, jobs in the search results includes any employment type. If multiple values are specified, jobs in the search results include any of the specified employment types.

        :return: The employment_types of this JobQuery.
        :rtype: List[str]
        """
        return self._employment_types

    @employment_types.setter
    def employment_types(self, employment_types):
        """Sets the employment_types of this JobQuery.

        The employment type filter specifies the employment type of jobs to search against, such as EmploymentType.FULL_TIME. If a value isn't specified, jobs in the search results includes any employment type. If multiple values are specified, jobs in the search results include any of the specified employment types.

        :param employment_types: The employment_types of this JobQuery.
        :type employment_types: List[str]
        """
        allowed_values = ["EMPLOYMENT_TYPE_UNSPECIFIED", "FULL_TIME", "PART_TIME", "CONTRACTOR", "CONTRACT_TO_HIRE", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "FLY_IN_FLY_OUT", "OTHER_EMPLOYMENT_TYPE"]  # noqa: E501
        if not set(employment_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `employment_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(employment_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._employment_types = employment_types

    @property
    def excluded_jobs(self):
        """Gets the excluded_jobs of this JobQuery.

        This filter specifies a list of job names to be excluded during search. At most 400 excluded job names are allowed.

        :return: The excluded_jobs of this JobQuery.
        :rtype: List[str]
        """
        return self._excluded_jobs

    @excluded_jobs.setter
    def excluded_jobs(self, excluded_jobs):
        """Sets the excluded_jobs of this JobQuery.

        This filter specifies a list of job names to be excluded during search. At most 400 excluded job names are allowed.

        :param excluded_jobs: The excluded_jobs of this JobQuery.
        :type excluded_jobs: List[str]
        """

        self._excluded_jobs = excluded_jobs

    @property
    def job_categories(self):
        """Gets the job_categories of this JobQuery.

        The category filter specifies the categories of jobs to search against. See JobCategory for more information. If a value isn't specified, jobs from any category are searched against. If multiple values are specified, jobs from any of the specified categories are searched against.

        :return: The job_categories of this JobQuery.
        :rtype: List[str]
        """
        return self._job_categories

    @job_categories.setter
    def job_categories(self, job_categories):
        """Sets the job_categories of this JobQuery.

        The category filter specifies the categories of jobs to search against. See JobCategory for more information. If a value isn't specified, jobs from any category are searched against. If multiple values are specified, jobs from any of the specified categories are searched against.

        :param job_categories: The job_categories of this JobQuery.
        :type job_categories: List[str]
        """
        allowed_values = ["JOB_CATEGORY_UNSPECIFIED", "ACCOUNTING_AND_FINANCE", "ADMINISTRATIVE_AND_OFFICE", "ADVERTISING_AND_MARKETING", "ANIMAL_CARE", "ART_FASHION_AND_DESIGN", "BUSINESS_OPERATIONS", "CLEANING_AND_FACILITIES", "COMPUTER_AND_IT", "CONSTRUCTION", "CUSTOMER_SERVICE", "EDUCATION", "ENTERTAINMENT_AND_TRAVEL", "FARMING_AND_OUTDOORS", "HEALTHCARE", "HUMAN_RESOURCES", "INSTALLATION_MAINTENANCE_AND_REPAIR", "LEGAL", "MANAGEMENT", "MANUFACTURING_AND_WAREHOUSE", "MEDIA_COMMUNICATIONS_AND_WRITING", "OIL_GAS_AND_MINING", "PERSONAL_CARE_AND_SERVICES", "PROTECTIVE_SERVICES", "REAL_ESTATE", "RESTAURANT_AND_HOSPITALITY", "SALES_AND_RETAIL", "SCIENCE_AND_ENGINEERING", "SOCIAL_SERVICES_AND_NON_PROFIT", "SPORTS_FITNESS_AND_RECREATION", "TRANSPORTATION_AND_LOGISTICS"]  # noqa: E501
        if not set(job_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `job_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(job_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._job_categories = job_categories

    @property
    def language_codes(self):
        """Gets the language_codes of this JobQuery.

        This filter specifies the locale of jobs to search against, for example, \"en-US\". If a value isn't specified, the search results can contain jobs in any locale. Language codes should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). At most 10 language code filters are allowed.

        :return: The language_codes of this JobQuery.
        :rtype: List[str]
        """
        return self._language_codes

    @language_codes.setter
    def language_codes(self, language_codes):
        """Sets the language_codes of this JobQuery.

        This filter specifies the locale of jobs to search against, for example, \"en-US\". If a value isn't specified, the search results can contain jobs in any locale. Language codes should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). At most 10 language code filters are allowed.

        :param language_codes: The language_codes of this JobQuery.
        :type language_codes: List[str]
        """

        self._language_codes = language_codes

    @property
    def location_filters(self):
        """Gets the location_filters of this JobQuery.

        The location filter specifies geo-regions containing the jobs to search against. See LocationFilter for more information. If a location value isn't specified, jobs fitting the other search criteria are retrieved regardless of where they're located. If multiple values are specified, jobs are retrieved from any of the specified locations. If different values are specified for the LocationFilter.distance_in_miles parameter, the maximum provided distance is used for all locations. At most 5 location filters are allowed.

        :return: The location_filters of this JobQuery.
        :rtype: List[LocationFilter]
        """
        return self._location_filters

    @location_filters.setter
    def location_filters(self, location_filters):
        """Sets the location_filters of this JobQuery.

        The location filter specifies geo-regions containing the jobs to search against. See LocationFilter for more information. If a location value isn't specified, jobs fitting the other search criteria are retrieved regardless of where they're located. If multiple values are specified, jobs are retrieved from any of the specified locations. If different values are specified for the LocationFilter.distance_in_miles parameter, the maximum provided distance is used for all locations. At most 5 location filters are allowed.

        :param location_filters: The location_filters of this JobQuery.
        :type location_filters: List[LocationFilter]
        """

        self._location_filters = location_filters

    @property
    def publish_time_range(self):
        """Gets the publish_time_range of this JobQuery.


        :return: The publish_time_range of this JobQuery.
        :rtype: TimestampRange
        """
        return self._publish_time_range

    @publish_time_range.setter
    def publish_time_range(self, publish_time_range):
        """Sets the publish_time_range of this JobQuery.


        :param publish_time_range: The publish_time_range of this JobQuery.
        :type publish_time_range: TimestampRange
        """

        self._publish_time_range = publish_time_range

    @property
    def query(self):
        """Gets the query of this JobQuery.

        The query string that matches against the job title, description, and location fields. The maximum number of allowed characters is 255.

        :return: The query of this JobQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this JobQuery.

        The query string that matches against the job title, description, and location fields. The maximum number of allowed characters is 255.

        :param query: The query of this JobQuery.
        :type query: str
        """

        self._query = query

    @property
    def query_language_code(self):
        """Gets the query_language_code of this JobQuery.

        The language code of query. For example, \"en-US\". This field helps to better interpret the query. If a value isn't specified, the query language code is automatically detected, which may not be accurate. Language code should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).

        :return: The query_language_code of this JobQuery.
        :rtype: str
        """
        return self._query_language_code

    @query_language_code.setter
    def query_language_code(self, query_language_code):
        """Sets the query_language_code of this JobQuery.

        The language code of query. For example, \"en-US\". This field helps to better interpret the query. If a value isn't specified, the query language code is automatically detected, which may not be accurate. Language code should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).

        :param query_language_code: The query_language_code of this JobQuery.
        :type query_language_code: str
        """

        self._query_language_code = query_language_code
