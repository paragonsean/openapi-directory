# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filterable: bool=None, keyword_searchable: bool=None, long_values: List[str]=None, string_values: List[str]=None):
        """CustomAttribute - a model defined in OpenAPI

        :param filterable: The filterable of this CustomAttribute.
        :param keyword_searchable: The keyword_searchable of this CustomAttribute.
        :param long_values: The long_values of this CustomAttribute.
        :param string_values: The string_values of this CustomAttribute.
        """
        self.openapi_types = {
            'filterable': bool,
            'keyword_searchable': bool,
            'long_values': List[str],
            'string_values': List[str]
        }

        self.attribute_map = {
            'filterable': 'filterable',
            'keyword_searchable': 'keywordSearchable',
            'long_values': 'longValues',
            'string_values': 'stringValues'
        }

        self._filterable = filterable
        self._keyword_searchable = keyword_searchable
        self._long_values = long_values
        self._string_values = string_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAttribute of this CustomAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filterable(self):
        """Gets the filterable of this CustomAttribute.

        If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false.

        :return: The filterable of this CustomAttribute.
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this CustomAttribute.

        If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false.

        :param filterable: The filterable of this CustomAttribute.
        :type filterable: bool
        """

        self._filterable = filterable

    @property
    def keyword_searchable(self):
        """Gets the keyword_searchable of this CustomAttribute.

        If the `keyword_searchable` flag is true, the keywords in custom fields are searchable by keyword match. If false, the values are not searchable by keyword match. Default is false.

        :return: The keyword_searchable of this CustomAttribute.
        :rtype: bool
        """
        return self._keyword_searchable

    @keyword_searchable.setter
    def keyword_searchable(self, keyword_searchable):
        """Sets the keyword_searchable of this CustomAttribute.

        If the `keyword_searchable` flag is true, the keywords in custom fields are searchable by keyword match. If false, the values are not searchable by keyword match. Default is false.

        :param keyword_searchable: The keyword_searchable of this CustomAttribute.
        :type keyword_searchable: bool
        """

        self._keyword_searchable = keyword_searchable

    @property
    def long_values(self):
        """Gets the long_values of this CustomAttribute.

        Exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported.

        :return: The long_values of this CustomAttribute.
        :rtype: List[str]
        """
        return self._long_values

    @long_values.setter
    def long_values(self, long_values):
        """Sets the long_values of this CustomAttribute.

        Exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported.

        :param long_values: The long_values of this CustomAttribute.
        :type long_values: List[str]
        """

        self._long_values = long_values

    @property
    def string_values(self):
        """Gets the string_values of this CustomAttribute.

        Exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string isn't allowed.

        :return: The string_values of this CustomAttribute.
        :rtype: List[str]
        """
        return self._string_values

    @string_values.setter
    def string_values(self, string_values):
        """Sets the string_values of this CustomAttribute.

        Exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string isn't allowed.

        :param string_values: The string_values of this CustomAttribute.
        :type string_values: List[str]
        """

        self._string_values = string_values
