# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespacedDebugInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolutely_forced_exp_names: List[str]=None, absolutely_forced_exp_tags: List[str]=None, absolutely_forced_exps: List[int]=None, conditionally_forced_exp_names: List[str]=None, conditionally_forced_exp_tags: List[str]=None, conditionally_forced_exps: List[int]=None, disable_automatic_enrollment_selection: bool=None, disable_exp_names: List[str]=None, disable_exp_tags: List[str]=None, disable_exps: List[int]=None, disable_manual_enrollment_selection: bool=None, disable_organic_selection: bool=None, forced_flags: Dict[str, str]=None, forced_rollouts: Dict[str, bool]=None, testing_mode: str=None):
        """NamespacedDebugInput - a model defined in OpenAPI

        :param absolutely_forced_exp_names: The absolutely_forced_exp_names of this NamespacedDebugInput.
        :param absolutely_forced_exp_tags: The absolutely_forced_exp_tags of this NamespacedDebugInput.
        :param absolutely_forced_exps: The absolutely_forced_exps of this NamespacedDebugInput.
        :param conditionally_forced_exp_names: The conditionally_forced_exp_names of this NamespacedDebugInput.
        :param conditionally_forced_exp_tags: The conditionally_forced_exp_tags of this NamespacedDebugInput.
        :param conditionally_forced_exps: The conditionally_forced_exps of this NamespacedDebugInput.
        :param disable_automatic_enrollment_selection: The disable_automatic_enrollment_selection of this NamespacedDebugInput.
        :param disable_exp_names: The disable_exp_names of this NamespacedDebugInput.
        :param disable_exp_tags: The disable_exp_tags of this NamespacedDebugInput.
        :param disable_exps: The disable_exps of this NamespacedDebugInput.
        :param disable_manual_enrollment_selection: The disable_manual_enrollment_selection of this NamespacedDebugInput.
        :param disable_organic_selection: The disable_organic_selection of this NamespacedDebugInput.
        :param forced_flags: The forced_flags of this NamespacedDebugInput.
        :param forced_rollouts: The forced_rollouts of this NamespacedDebugInput.
        :param testing_mode: The testing_mode of this NamespacedDebugInput.
        """
        self.openapi_types = {
            'absolutely_forced_exp_names': List[str],
            'absolutely_forced_exp_tags': List[str],
            'absolutely_forced_exps': List[int],
            'conditionally_forced_exp_names': List[str],
            'conditionally_forced_exp_tags': List[str],
            'conditionally_forced_exps': List[int],
            'disable_automatic_enrollment_selection': bool,
            'disable_exp_names': List[str],
            'disable_exp_tags': List[str],
            'disable_exps': List[int],
            'disable_manual_enrollment_selection': bool,
            'disable_organic_selection': bool,
            'forced_flags': Dict[str, str],
            'forced_rollouts': Dict[str, bool],
            'testing_mode': str
        }

        self.attribute_map = {
            'absolutely_forced_exp_names': 'absolutelyForcedExpNames',
            'absolutely_forced_exp_tags': 'absolutelyForcedExpTags',
            'absolutely_forced_exps': 'absolutelyForcedExps',
            'conditionally_forced_exp_names': 'conditionallyForcedExpNames',
            'conditionally_forced_exp_tags': 'conditionallyForcedExpTags',
            'conditionally_forced_exps': 'conditionallyForcedExps',
            'disable_automatic_enrollment_selection': 'disableAutomaticEnrollmentSelection',
            'disable_exp_names': 'disableExpNames',
            'disable_exp_tags': 'disableExpTags',
            'disable_exps': 'disableExps',
            'disable_manual_enrollment_selection': 'disableManualEnrollmentSelection',
            'disable_organic_selection': 'disableOrganicSelection',
            'forced_flags': 'forcedFlags',
            'forced_rollouts': 'forcedRollouts',
            'testing_mode': 'testingMode'
        }

        self._absolutely_forced_exp_names = absolutely_forced_exp_names
        self._absolutely_forced_exp_tags = absolutely_forced_exp_tags
        self._absolutely_forced_exps = absolutely_forced_exps
        self._conditionally_forced_exp_names = conditionally_forced_exp_names
        self._conditionally_forced_exp_tags = conditionally_forced_exp_tags
        self._conditionally_forced_exps = conditionally_forced_exps
        self._disable_automatic_enrollment_selection = disable_automatic_enrollment_selection
        self._disable_exp_names = disable_exp_names
        self._disable_exp_tags = disable_exp_tags
        self._disable_exps = disable_exps
        self._disable_manual_enrollment_selection = disable_manual_enrollment_selection
        self._disable_organic_selection = disable_organic_selection
        self._forced_flags = forced_flags
        self._forced_rollouts = forced_rollouts
        self._testing_mode = testing_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespacedDebugInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespacedDebugInput of this NamespacedDebugInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolutely_forced_exp_names(self):
        """Gets the absolutely_forced_exp_names of this NamespacedDebugInput.

        Set of experiment names to be absolutely forced. These experiments will be forced without evaluating the conditions.

        :return: The absolutely_forced_exp_names of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._absolutely_forced_exp_names

    @absolutely_forced_exp_names.setter
    def absolutely_forced_exp_names(self, absolutely_forced_exp_names):
        """Sets the absolutely_forced_exp_names of this NamespacedDebugInput.

        Set of experiment names to be absolutely forced. These experiments will be forced without evaluating the conditions.

        :param absolutely_forced_exp_names: The absolutely_forced_exp_names of this NamespacedDebugInput.
        :type absolutely_forced_exp_names: List[str]
        """

        self._absolutely_forced_exp_names = absolutely_forced_exp_names

    @property
    def absolutely_forced_exp_tags(self):
        """Gets the absolutely_forced_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be absolutely forced. The experiments with these tags will be forced without evaluating the conditions.

        :return: The absolutely_forced_exp_tags of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._absolutely_forced_exp_tags

    @absolutely_forced_exp_tags.setter
    def absolutely_forced_exp_tags(self, absolutely_forced_exp_tags):
        """Sets the absolutely_forced_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be absolutely forced. The experiments with these tags will be forced without evaluating the conditions.

        :param absolutely_forced_exp_tags: The absolutely_forced_exp_tags of this NamespacedDebugInput.
        :type absolutely_forced_exp_tags: List[str]
        """

        self._absolutely_forced_exp_tags = absolutely_forced_exp_tags

    @property
    def absolutely_forced_exps(self):
        """Gets the absolutely_forced_exps of this NamespacedDebugInput.

        Set of experiment ids to be absolutely forced. These ids will be forced without evaluating the conditions.

        :return: The absolutely_forced_exps of this NamespacedDebugInput.
        :rtype: List[int]
        """
        return self._absolutely_forced_exps

    @absolutely_forced_exps.setter
    def absolutely_forced_exps(self, absolutely_forced_exps):
        """Sets the absolutely_forced_exps of this NamespacedDebugInput.

        Set of experiment ids to be absolutely forced. These ids will be forced without evaluating the conditions.

        :param absolutely_forced_exps: The absolutely_forced_exps of this NamespacedDebugInput.
        :type absolutely_forced_exps: List[int]
        """

        self._absolutely_forced_exps = absolutely_forced_exps

    @property
    def conditionally_forced_exp_names(self):
        """Gets the conditionally_forced_exp_names of this NamespacedDebugInput.

        Set of experiment names to be conditionally forced. These experiments will be forced only if their conditions and their parent domain's conditions are true.

        :return: The conditionally_forced_exp_names of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._conditionally_forced_exp_names

    @conditionally_forced_exp_names.setter
    def conditionally_forced_exp_names(self, conditionally_forced_exp_names):
        """Sets the conditionally_forced_exp_names of this NamespacedDebugInput.

        Set of experiment names to be conditionally forced. These experiments will be forced only if their conditions and their parent domain's conditions are true.

        :param conditionally_forced_exp_names: The conditionally_forced_exp_names of this NamespacedDebugInput.
        :type conditionally_forced_exp_names: List[str]
        """

        self._conditionally_forced_exp_names = conditionally_forced_exp_names

    @property
    def conditionally_forced_exp_tags(self):
        """Gets the conditionally_forced_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be conditionally forced. The experiments with these tags will be forced only if their conditions and their parent domain's conditions are true.

        :return: The conditionally_forced_exp_tags of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._conditionally_forced_exp_tags

    @conditionally_forced_exp_tags.setter
    def conditionally_forced_exp_tags(self, conditionally_forced_exp_tags):
        """Sets the conditionally_forced_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be conditionally forced. The experiments with these tags will be forced only if their conditions and their parent domain's conditions are true.

        :param conditionally_forced_exp_tags: The conditionally_forced_exp_tags of this NamespacedDebugInput.
        :type conditionally_forced_exp_tags: List[str]
        """

        self._conditionally_forced_exp_tags = conditionally_forced_exp_tags

    @property
    def conditionally_forced_exps(self):
        """Gets the conditionally_forced_exps of this NamespacedDebugInput.

        Set of experiment ids to be conditionally forced. These ids will be forced only if their conditions and their parent domain's conditions are true.

        :return: The conditionally_forced_exps of this NamespacedDebugInput.
        :rtype: List[int]
        """
        return self._conditionally_forced_exps

    @conditionally_forced_exps.setter
    def conditionally_forced_exps(self, conditionally_forced_exps):
        """Sets the conditionally_forced_exps of this NamespacedDebugInput.

        Set of experiment ids to be conditionally forced. These ids will be forced only if their conditions and their parent domain's conditions are true.

        :param conditionally_forced_exps: The conditionally_forced_exps of this NamespacedDebugInput.
        :type conditionally_forced_exps: List[int]
        """

        self._conditionally_forced_exps = conditionally_forced_exps

    @property
    def disable_automatic_enrollment_selection(self):
        """Gets the disable_automatic_enrollment_selection of this NamespacedDebugInput.

        If true, disable automatic enrollment selection (at all diversion points). Automatic enrollment selection means experiment selection process based on the experiment's automatic enrollment condition. This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.

        :return: The disable_automatic_enrollment_selection of this NamespacedDebugInput.
        :rtype: bool
        """
        return self._disable_automatic_enrollment_selection

    @disable_automatic_enrollment_selection.setter
    def disable_automatic_enrollment_selection(self, disable_automatic_enrollment_selection):
        """Sets the disable_automatic_enrollment_selection of this NamespacedDebugInput.

        If true, disable automatic enrollment selection (at all diversion points). Automatic enrollment selection means experiment selection process based on the experiment's automatic enrollment condition. This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.

        :param disable_automatic_enrollment_selection: The disable_automatic_enrollment_selection of this NamespacedDebugInput.
        :type disable_automatic_enrollment_selection: bool
        """

        self._disable_automatic_enrollment_selection = disable_automatic_enrollment_selection

    @property
    def disable_exp_names(self):
        """Gets the disable_exp_names of this NamespacedDebugInput.

        Set of experiment names to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If a name corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.

        :return: The disable_exp_names of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._disable_exp_names

    @disable_exp_names.setter
    def disable_exp_names(self, disable_exp_names):
        """Sets the disable_exp_names of this NamespacedDebugInput.

        Set of experiment names to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If a name corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.

        :param disable_exp_names: The disable_exp_names of this NamespacedDebugInput.
        :type disable_exp_names: List[str]
        """

        self._disable_exp_names = disable_exp_names

    @property
    def disable_exp_tags(self):
        """Gets the disable_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be disabled. All experiments that are tagged with one or more of these tags are disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together.

        :return: The disable_exp_tags of this NamespacedDebugInput.
        :rtype: List[str]
        """
        return self._disable_exp_tags

    @disable_exp_tags.setter
    def disable_exp_tags(self, disable_exp_tags):
        """Sets the disable_exp_tags of this NamespacedDebugInput.

        Set of experiment tags to be disabled. All experiments that are tagged with one or more of these tags are disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together.

        :param disable_exp_tags: The disable_exp_tags of this NamespacedDebugInput.
        :type disable_exp_tags: List[str]
        """

        self._disable_exp_tags = disable_exp_tags

    @property
    def disable_exps(self):
        """Gets the disable_exps of this NamespacedDebugInput.

        Set of experiment ids to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If an ID corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.

        :return: The disable_exps of this NamespacedDebugInput.
        :rtype: List[int]
        """
        return self._disable_exps

    @disable_exps.setter
    def disable_exps(self, disable_exps):
        """Sets the disable_exps of this NamespacedDebugInput.

        Set of experiment ids to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If an ID corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.

        :param disable_exps: The disable_exps of this NamespacedDebugInput.
        :type disable_exps: List[int]
        """

        self._disable_exps = disable_exps

    @property
    def disable_manual_enrollment_selection(self):
        """Gets the disable_manual_enrollment_selection of this NamespacedDebugInput.

        If true, disable manual enrollment selection (at all diversion points). Manual enrollment selection means experiment selection process based on the request's manual enrollment states (a.k.a. opt-in experiments). This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.

        :return: The disable_manual_enrollment_selection of this NamespacedDebugInput.
        :rtype: bool
        """
        return self._disable_manual_enrollment_selection

    @disable_manual_enrollment_selection.setter
    def disable_manual_enrollment_selection(self, disable_manual_enrollment_selection):
        """Sets the disable_manual_enrollment_selection of this NamespacedDebugInput.

        If true, disable manual enrollment selection (at all diversion points). Manual enrollment selection means experiment selection process based on the request's manual enrollment states (a.k.a. opt-in experiments). This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.

        :param disable_manual_enrollment_selection: The disable_manual_enrollment_selection of this NamespacedDebugInput.
        :type disable_manual_enrollment_selection: bool
        """

        self._disable_manual_enrollment_selection = disable_manual_enrollment_selection

    @property
    def disable_organic_selection(self):
        """Gets the disable_organic_selection of this NamespacedDebugInput.

        If true, disable organic experiment selection (at all diversion points). Organic selection means experiment selection process based on traffic allocation and diversion condition evaluation. This does not disable selection of forced experiments. This is useful in cases when it is not known whether experiment selection behavior is responsible for a error or breakage. Disabling organic selection may help to isolate the cause of a given problem. Setting this field to false does not change anything in the experiment selection process.

        :return: The disable_organic_selection of this NamespacedDebugInput.
        :rtype: bool
        """
        return self._disable_organic_selection

    @disable_organic_selection.setter
    def disable_organic_selection(self, disable_organic_selection):
        """Sets the disable_organic_selection of this NamespacedDebugInput.

        If true, disable organic experiment selection (at all diversion points). Organic selection means experiment selection process based on traffic allocation and diversion condition evaluation. This does not disable selection of forced experiments. This is useful in cases when it is not known whether experiment selection behavior is responsible for a error or breakage. Disabling organic selection may help to isolate the cause of a given problem. Setting this field to false does not change anything in the experiment selection process.

        :param disable_organic_selection: The disable_organic_selection of this NamespacedDebugInput.
        :type disable_organic_selection: bool
        """

        self._disable_organic_selection = disable_organic_selection

    @property
    def forced_flags(self):
        """Gets the forced_flags of this NamespacedDebugInput.

        Flags to force in a particular experiment state. Map from flag name to flag value.

        :return: The forced_flags of this NamespacedDebugInput.
        :rtype: Dict[str, str]
        """
        return self._forced_flags

    @forced_flags.setter
    def forced_flags(self, forced_flags):
        """Sets the forced_flags of this NamespacedDebugInput.

        Flags to force in a particular experiment state. Map from flag name to flag value.

        :param forced_flags: The forced_flags of this NamespacedDebugInput.
        :type forced_flags: Dict[str, str]
        """

        self._forced_flags = forced_flags

    @property
    def forced_rollouts(self):
        """Gets the forced_rollouts of this NamespacedDebugInput.

        Rollouts to force in a particular experiment state. Map from rollout name to rollout value.

        :return: The forced_rollouts of this NamespacedDebugInput.
        :rtype: Dict[str, bool]
        """
        return self._forced_rollouts

    @forced_rollouts.setter
    def forced_rollouts(self, forced_rollouts):
        """Sets the forced_rollouts of this NamespacedDebugInput.

        Rollouts to force in a particular experiment state. Map from rollout name to rollout value.

        :param forced_rollouts: The forced_rollouts of this NamespacedDebugInput.
        :type forced_rollouts: Dict[str, bool]
        """

        self._forced_rollouts = forced_rollouts

    @property
    def testing_mode(self):
        """Gets the testing_mode of this NamespacedDebugInput.

        Sets different testing modes. See the documentation in the TestingMode message for more information.

        :return: The testing_mode of this NamespacedDebugInput.
        :rtype: str
        """
        return self._testing_mode

    @testing_mode.setter
    def testing_mode(self, testing_mode):
        """Sets the testing_mode of this NamespacedDebugInput.

        Sets different testing modes. See the documentation in the TestingMode message for more information.

        :param testing_mode: The testing_mode of this NamespacedDebugInput.
        :type testing_mode: str
        """
        allowed_values = ["TESTING_MODE_UNSPECIFIED", "TESTING_MODE_ALL_OFF", "TESTING_MODE_ALL_ON"]  # noqa: E501
        if testing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `testing_mode` ({0}), must be one of {1}"
                .format(testing_mode, allowed_values)
            )

        self._testing_mode = testing_mode
