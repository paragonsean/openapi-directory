# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jobs: List[str]=None, type: str=None):
        """JobEvent - a model defined in OpenAPI

        :param jobs: The jobs of this JobEvent.
        :param type: The type of this JobEvent.
        """
        self.openapi_types = {
            'jobs': List[str],
            'type': str
        }

        self.attribute_map = {
            'jobs': 'jobs',
            'type': 'type'
        }

        self._jobs = jobs
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobEvent of this JobEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jobs(self):
        """Gets the jobs of this JobEvent.

        Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\", for example, \"projects/foo/tenants/bar/jobs/baz\".

        :return: The jobs of this JobEvent.
        :rtype: List[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this JobEvent.

        Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\", for example, \"projects/foo/tenants/bar/jobs/baz\".

        :param jobs: The jobs of this JobEvent.
        :type jobs: List[str]
        """

        self._jobs = jobs

    @property
    def type(self):
        """Gets the type of this JobEvent.

        Required. The type of the event (see JobEventType).

        :return: The type of this JobEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobEvent.

        Required. The type of the event (see JobEventType).

        :param type: The type of this JobEvent.
        :type type: str
        """
        allowed_values = ["JOB_EVENT_TYPE_UNSPECIFIED", "IMPRESSION", "VIEW", "VIEW_REDIRECT", "APPLICATION_START", "APPLICATION_FINISH", "APPLICATION_QUICK_SUBMISSION", "APPLICATION_REDIRECT", "APPLICATION_START_FROM_SEARCH", "APPLICATION_REDIRECT_FROM_SEARCH", "APPLICATION_COMPANY_SUBMIT", "BOOKMARK", "NOTIFICATION", "HIRED", "SENT_CV", "INTERVIEW_GRANTED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
