# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_ranking_info import CustomRankingInfo
from openapi_server.models.histogram_query import HistogramQuery
from openapi_server.models.job_query import JobQuery
from openapi_server.models.request_metadata import RequestMetadata
from openapi_server import util


class SearchJobsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_ranking_info: CustomRankingInfo=None, disable_keyword_match: bool=None, diversification_level: str=None, enable_broadening: bool=None, histogram_queries: List[HistogramQuery]=None, job_query: JobQuery=None, job_view: str=None, keyword_match_mode: str=None, max_page_size: int=None, offset: int=None, order_by: str=None, page_token: str=None, request_metadata: RequestMetadata=None, search_mode: str=None):
        """SearchJobsRequest - a model defined in OpenAPI

        :param custom_ranking_info: The custom_ranking_info of this SearchJobsRequest.
        :param disable_keyword_match: The disable_keyword_match of this SearchJobsRequest.
        :param diversification_level: The diversification_level of this SearchJobsRequest.
        :param enable_broadening: The enable_broadening of this SearchJobsRequest.
        :param histogram_queries: The histogram_queries of this SearchJobsRequest.
        :param job_query: The job_query of this SearchJobsRequest.
        :param job_view: The job_view of this SearchJobsRequest.
        :param keyword_match_mode: The keyword_match_mode of this SearchJobsRequest.
        :param max_page_size: The max_page_size of this SearchJobsRequest.
        :param offset: The offset of this SearchJobsRequest.
        :param order_by: The order_by of this SearchJobsRequest.
        :param page_token: The page_token of this SearchJobsRequest.
        :param request_metadata: The request_metadata of this SearchJobsRequest.
        :param search_mode: The search_mode of this SearchJobsRequest.
        """
        self.openapi_types = {
            'custom_ranking_info': CustomRankingInfo,
            'disable_keyword_match': bool,
            'diversification_level': str,
            'enable_broadening': bool,
            'histogram_queries': List[HistogramQuery],
            'job_query': JobQuery,
            'job_view': str,
            'keyword_match_mode': str,
            'max_page_size': int,
            'offset': int,
            'order_by': str,
            'page_token': str,
            'request_metadata': RequestMetadata,
            'search_mode': str
        }

        self.attribute_map = {
            'custom_ranking_info': 'customRankingInfo',
            'disable_keyword_match': 'disableKeywordMatch',
            'diversification_level': 'diversificationLevel',
            'enable_broadening': 'enableBroadening',
            'histogram_queries': 'histogramQueries',
            'job_query': 'jobQuery',
            'job_view': 'jobView',
            'keyword_match_mode': 'keywordMatchMode',
            'max_page_size': 'maxPageSize',
            'offset': 'offset',
            'order_by': 'orderBy',
            'page_token': 'pageToken',
            'request_metadata': 'requestMetadata',
            'search_mode': 'searchMode'
        }

        self._custom_ranking_info = custom_ranking_info
        self._disable_keyword_match = disable_keyword_match
        self._diversification_level = diversification_level
        self._enable_broadening = enable_broadening
        self._histogram_queries = histogram_queries
        self._job_query = job_query
        self._job_view = job_view
        self._keyword_match_mode = keyword_match_mode
        self._max_page_size = max_page_size
        self._offset = offset
        self._order_by = order_by
        self._page_token = page_token
        self._request_metadata = request_metadata
        self._search_mode = search_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchJobsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchJobsRequest of this SearchJobsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_ranking_info(self):
        """Gets the custom_ranking_info of this SearchJobsRequest.


        :return: The custom_ranking_info of this SearchJobsRequest.
        :rtype: CustomRankingInfo
        """
        return self._custom_ranking_info

    @custom_ranking_info.setter
    def custom_ranking_info(self, custom_ranking_info):
        """Sets the custom_ranking_info of this SearchJobsRequest.


        :param custom_ranking_info: The custom_ranking_info of this SearchJobsRequest.
        :type custom_ranking_info: CustomRankingInfo
        """

        self._custom_ranking_info = custom_ranking_info

    @property
    def disable_keyword_match(self):
        """Gets the disable_keyword_match of this SearchJobsRequest.

        This field is deprecated. Please use SearchJobsRequest.keyword_match_mode going forward. To migrate, disable_keyword_match set to false maps to KeywordMatchMode.KEYWORD_MATCH_ALL, and disable_keyword_match set to true maps to KeywordMatchMode.KEYWORD_MATCH_DISABLED. If SearchJobsRequest.keyword_match_mode is set, this field is ignored. Controls whether to disable exact keyword match on Job.title, Job.description, Job.company_display_name, Job.addresses, Job.qualifications. When disable keyword match is turned off, a keyword match returns jobs that do not match given category filters when there are matching keywords. For example, for the query \"program manager,\" a result is returned even if the job posting has the title \"software developer,\" which doesn't fall into \"program manager\" ontology, but does have \"program manager\" appearing in its description. For queries like \"cloud\" that don't contain title or location specific ontology, jobs with \"cloud\" keyword matches are returned regardless of this flag's value. Use Company.keyword_searchable_job_custom_attributes if company-specific globally matched custom field/attribute string values are needed. Enabling keyword match improves recall of subsequent search requests. Defaults to false.

        :return: The disable_keyword_match of this SearchJobsRequest.
        :rtype: bool
        """
        return self._disable_keyword_match

    @disable_keyword_match.setter
    def disable_keyword_match(self, disable_keyword_match):
        """Sets the disable_keyword_match of this SearchJobsRequest.

        This field is deprecated. Please use SearchJobsRequest.keyword_match_mode going forward. To migrate, disable_keyword_match set to false maps to KeywordMatchMode.KEYWORD_MATCH_ALL, and disable_keyword_match set to true maps to KeywordMatchMode.KEYWORD_MATCH_DISABLED. If SearchJobsRequest.keyword_match_mode is set, this field is ignored. Controls whether to disable exact keyword match on Job.title, Job.description, Job.company_display_name, Job.addresses, Job.qualifications. When disable keyword match is turned off, a keyword match returns jobs that do not match given category filters when there are matching keywords. For example, for the query \"program manager,\" a result is returned even if the job posting has the title \"software developer,\" which doesn't fall into \"program manager\" ontology, but does have \"program manager\" appearing in its description. For queries like \"cloud\" that don't contain title or location specific ontology, jobs with \"cloud\" keyword matches are returned regardless of this flag's value. Use Company.keyword_searchable_job_custom_attributes if company-specific globally matched custom field/attribute string values are needed. Enabling keyword match improves recall of subsequent search requests. Defaults to false.

        :param disable_keyword_match: The disable_keyword_match of this SearchJobsRequest.
        :type disable_keyword_match: bool
        """

        self._disable_keyword_match = disable_keyword_match

    @property
    def diversification_level(self):
        """Gets the diversification_level of this SearchJobsRequest.

        Controls whether highly similar jobs are returned next to each other in the search results. Jobs are identified as highly similar based on their titles, job categories, and locations. Highly similar results are clustered so that only one representative job of the cluster is displayed to the job seeker higher up in the results, with the other jobs being displayed lower down in the results. Defaults to DiversificationLevel.SIMPLE if no value is specified.

        :return: The diversification_level of this SearchJobsRequest.
        :rtype: str
        """
        return self._diversification_level

    @diversification_level.setter
    def diversification_level(self, diversification_level):
        """Sets the diversification_level of this SearchJobsRequest.

        Controls whether highly similar jobs are returned next to each other in the search results. Jobs are identified as highly similar based on their titles, job categories, and locations. Highly similar results are clustered so that only one representative job of the cluster is displayed to the job seeker higher up in the results, with the other jobs being displayed lower down in the results. Defaults to DiversificationLevel.SIMPLE if no value is specified.

        :param diversification_level: The diversification_level of this SearchJobsRequest.
        :type diversification_level: str
        """
        allowed_values = ["DIVERSIFICATION_LEVEL_UNSPECIFIED", "DISABLED", "SIMPLE", "ONE_PER_COMPANY", "TWO_PER_COMPANY", "MAX_THREE_PER_COMPANY", "DIVERSIFY_BY_LOOSER_SIMILARITY"]  # noqa: E501
        if diversification_level not in allowed_values:
            raise ValueError(
                "Invalid value for `diversification_level` ({0}), must be one of {1}"
                .format(diversification_level, allowed_values)
            )

        self._diversification_level = diversification_level

    @property
    def enable_broadening(self):
        """Gets the enable_broadening of this SearchJobsRequest.

        Controls whether to broaden the search when it produces sparse results. Broadened queries append results to the end of the matching results list. Defaults to false.

        :return: The enable_broadening of this SearchJobsRequest.
        :rtype: bool
        """
        return self._enable_broadening

    @enable_broadening.setter
    def enable_broadening(self, enable_broadening):
        """Sets the enable_broadening of this SearchJobsRequest.

        Controls whether to broaden the search when it produces sparse results. Broadened queries append results to the end of the matching results list. Defaults to false.

        :param enable_broadening: The enable_broadening of this SearchJobsRequest.
        :type enable_broadening: bool
        """

        self._enable_broadening = enable_broadening

    @property
    def histogram_queries(self):
        """Gets the histogram_queries of this SearchJobsRequest.

        An expression specifies a histogram request against matching jobs. Expression syntax is an aggregation function call with histogram facets and other options. Available aggregation function calls are: * `count(string_histogram_facet)`: Count the number of matching entities, for each distinct attribute value. * `count(numeric_histogram_facet, list of buckets)`: Count the number of matching entities within each bucket. A maximum of 200 histogram buckets are supported. Data types: * Histogram facet: facet names with format `a-zA-Z+`. * String: string like \"any string with backslash escape for quote(\\\").\" * Number: whole number and floating point number like 10, -1 and -0.01. * List: list of elements with comma(,) separator surrounded by square brackets, for example, [1, 2, 3] and [\"one\", \"two\", \"three\"]. Built-in constants: * MIN (minimum number similar to java Double.MIN_VALUE) * MAX (maximum number similar to java Double.MAX_VALUE) Built-in functions: * bucket(start, end[, label]): bucket built-in function creates a bucket with range of start, end). Note that the end is exclusive, for example, bucket(1, MAX, \"positive number\") or bucket(1, 10). Job histogram facets: * company_display_name: histogram by [Job.company_display_name. * employment_type: histogram by Job.employment_types, for example, \"FULL_TIME\", \"PART_TIME\". * company_size (DEPRECATED): histogram by CompanySize, for example, \"SMALL\", \"MEDIUM\", \"BIG\". * publish_time_in_day: histogram by the Job.posting_publish_time in days. Must specify list of numeric buckets in spec. * publish_time_in_month: histogram by the Job.posting_publish_time in months. Must specify list of numeric buckets in spec. * publish_time_in_year: histogram by the Job.posting_publish_time in years. Must specify list of numeric buckets in spec. * degree_types: histogram by the Job.degree_types, for example, \"Bachelors\", \"Masters\". * job_level: histogram by the Job.job_level, for example, \"Entry Level\". * country: histogram by the country code of jobs, for example, \"US\", \"FR\". * admin1: histogram by the admin1 code of jobs, which is a global placeholder referring to the state, province, or the particular term a country uses to define the geographic structure below the country level, for example, \"CA\", \"IL\". * city: histogram by a combination of the \"city name, admin1 code\". For example, \"Mountain View, CA\", \"New York, NY\". * admin1_country: histogram by a combination of the \"admin1 code, country\", for example, \"CA, US\", \"IL, US\". * city_coordinate: histogram by the city center's GPS coordinates (latitude and longitude), for example, 37.4038522,-122.0987765. Since the coordinates of a city center can change, customers may need to refresh them periodically. * locale: histogram by the Job.language_code, for example, \"en-US\", \"fr-FR\". * language: histogram by the language subtag of the Job.language_code, for example, \"en\", \"fr\". * category: histogram by the JobCategory, for example, \"COMPUTER_AND_IT\", \"HEALTHCARE\". * base_compensation_unit: histogram by the CompensationInfo.CompensationUnit of base salary, for example, \"WEEKLY\", \"MONTHLY\". * base_compensation: histogram by the base salary. Must specify list of numeric buckets to group results by. * annualized_base_compensation: histogram by the base annualized salary. Must specify list of numeric buckets to group results by. * annualized_total_compensation: histogram by the total annualized salary. Must specify list of numeric buckets to group results by. * string_custom_attribute: histogram by string Job.custom_attributes. Values can be accessed via square bracket notations like string_custom_attribute[\"key1\"]. * numeric_custom_attribute: histogram by numeric Job.custom_attributes. Values can be accessed via square bracket notations like numeric_custom_attribute[\"key1\"]. Must specify list of numeric buckets to group results by. Example expressions: * `count(admin1)` * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000), bucket(100000, MAX)])` * `count(string_custom_attribute[\"some-string-custom-attribute\"])` * `count(numeric_custom_attribute[\"some-numeric-custom-attribute\"], [bucket(MIN, 0, \"negative\"), bucket(0, MAX, \"non-negative\")])`

        :return: The histogram_queries of this SearchJobsRequest.
        :rtype: List[HistogramQuery]
        """
        return self._histogram_queries

    @histogram_queries.setter
    def histogram_queries(self, histogram_queries):
        """Sets the histogram_queries of this SearchJobsRequest.

        An expression specifies a histogram request against matching jobs. Expression syntax is an aggregation function call with histogram facets and other options. Available aggregation function calls are: * `count(string_histogram_facet)`: Count the number of matching entities, for each distinct attribute value. * `count(numeric_histogram_facet, list of buckets)`: Count the number of matching entities within each bucket. A maximum of 200 histogram buckets are supported. Data types: * Histogram facet: facet names with format `a-zA-Z+`. * String: string like \"any string with backslash escape for quote(\\\").\" * Number: whole number and floating point number like 10, -1 and -0.01. * List: list of elements with comma(,) separator surrounded by square brackets, for example, [1, 2, 3] and [\"one\", \"two\", \"three\"]. Built-in constants: * MIN (minimum number similar to java Double.MIN_VALUE) * MAX (maximum number similar to java Double.MAX_VALUE) Built-in functions: * bucket(start, end[, label]): bucket built-in function creates a bucket with range of start, end). Note that the end is exclusive, for example, bucket(1, MAX, \"positive number\") or bucket(1, 10). Job histogram facets: * company_display_name: histogram by [Job.company_display_name. * employment_type: histogram by Job.employment_types, for example, \"FULL_TIME\", \"PART_TIME\". * company_size (DEPRECATED): histogram by CompanySize, for example, \"SMALL\", \"MEDIUM\", \"BIG\". * publish_time_in_day: histogram by the Job.posting_publish_time in days. Must specify list of numeric buckets in spec. * publish_time_in_month: histogram by the Job.posting_publish_time in months. Must specify list of numeric buckets in spec. * publish_time_in_year: histogram by the Job.posting_publish_time in years. Must specify list of numeric buckets in spec. * degree_types: histogram by the Job.degree_types, for example, \"Bachelors\", \"Masters\". * job_level: histogram by the Job.job_level, for example, \"Entry Level\". * country: histogram by the country code of jobs, for example, \"US\", \"FR\". * admin1: histogram by the admin1 code of jobs, which is a global placeholder referring to the state, province, or the particular term a country uses to define the geographic structure below the country level, for example, \"CA\", \"IL\". * city: histogram by a combination of the \"city name, admin1 code\". For example, \"Mountain View, CA\", \"New York, NY\". * admin1_country: histogram by a combination of the \"admin1 code, country\", for example, \"CA, US\", \"IL, US\". * city_coordinate: histogram by the city center's GPS coordinates (latitude and longitude), for example, 37.4038522,-122.0987765. Since the coordinates of a city center can change, customers may need to refresh them periodically. * locale: histogram by the Job.language_code, for example, \"en-US\", \"fr-FR\". * language: histogram by the language subtag of the Job.language_code, for example, \"en\", \"fr\". * category: histogram by the JobCategory, for example, \"COMPUTER_AND_IT\", \"HEALTHCARE\". * base_compensation_unit: histogram by the CompensationInfo.CompensationUnit of base salary, for example, \"WEEKLY\", \"MONTHLY\". * base_compensation: histogram by the base salary. Must specify list of numeric buckets to group results by. * annualized_base_compensation: histogram by the base annualized salary. Must specify list of numeric buckets to group results by. * annualized_total_compensation: histogram by the total annualized salary. Must specify list of numeric buckets to group results by. * string_custom_attribute: histogram by string Job.custom_attributes. Values can be accessed via square bracket notations like string_custom_attribute[\"key1\"]. * numeric_custom_attribute: histogram by numeric Job.custom_attributes. Values can be accessed via square bracket notations like numeric_custom_attribute[\"key1\"]. Must specify list of numeric buckets to group results by. Example expressions: * `count(admin1)` * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000), bucket(100000, MAX)])` * `count(string_custom_attribute[\"some-string-custom-attribute\"])` * `count(numeric_custom_attribute[\"some-numeric-custom-attribute\"], [bucket(MIN, 0, \"negative\"), bucket(0, MAX, \"non-negative\")])`

        :param histogram_queries: The histogram_queries of this SearchJobsRequest.
        :type histogram_queries: List[HistogramQuery]
        """

        self._histogram_queries = histogram_queries

    @property
    def job_query(self):
        """Gets the job_query of this SearchJobsRequest.


        :return: The job_query of this SearchJobsRequest.
        :rtype: JobQuery
        """
        return self._job_query

    @job_query.setter
    def job_query(self, job_query):
        """Sets the job_query of this SearchJobsRequest.


        :param job_query: The job_query of this SearchJobsRequest.
        :type job_query: JobQuery
        """

        self._job_query = job_query

    @property
    def job_view(self):
        """Gets the job_view of this SearchJobsRequest.

        The desired job attributes returned for jobs in the search response. Defaults to JobView.JOB_VIEW_SMALL if no value is specified.

        :return: The job_view of this SearchJobsRequest.
        :rtype: str
        """
        return self._job_view

    @job_view.setter
    def job_view(self, job_view):
        """Sets the job_view of this SearchJobsRequest.

        The desired job attributes returned for jobs in the search response. Defaults to JobView.JOB_VIEW_SMALL if no value is specified.

        :param job_view: The job_view of this SearchJobsRequest.
        :type job_view: str
        """
        allowed_values = ["JOB_VIEW_UNSPECIFIED", "JOB_VIEW_ID_ONLY", "JOB_VIEW_MINIMAL", "JOB_VIEW_SMALL", "JOB_VIEW_FULL"]  # noqa: E501
        if job_view not in allowed_values:
            raise ValueError(
                "Invalid value for `job_view` ({0}), must be one of {1}"
                .format(job_view, allowed_values)
            )

        self._job_view = job_view

    @property
    def keyword_match_mode(self):
        """Gets the keyword_match_mode of this SearchJobsRequest.

        Controls what keyword match options to use. If both keyword_match_mode and disable_keyword_match are set, keyword_match_mode will take precedence. Defaults to KeywordMatchMode.KEYWORD_MATCH_ALL if no value is specified.

        :return: The keyword_match_mode of this SearchJobsRequest.
        :rtype: str
        """
        return self._keyword_match_mode

    @keyword_match_mode.setter
    def keyword_match_mode(self, keyword_match_mode):
        """Sets the keyword_match_mode of this SearchJobsRequest.

        Controls what keyword match options to use. If both keyword_match_mode and disable_keyword_match are set, keyword_match_mode will take precedence. Defaults to KeywordMatchMode.KEYWORD_MATCH_ALL if no value is specified.

        :param keyword_match_mode: The keyword_match_mode of this SearchJobsRequest.
        :type keyword_match_mode: str
        """
        allowed_values = ["KEYWORD_MATCH_MODE_UNSPECIFIED", "KEYWORD_MATCH_DISABLED", "KEYWORD_MATCH_ALL", "KEYWORD_MATCH_TITLE_ONLY"]  # noqa: E501
        if keyword_match_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `keyword_match_mode` ({0}), must be one of {1}"
                .format(keyword_match_mode, allowed_values)
            )

        self._keyword_match_mode = keyword_match_mode

    @property
    def max_page_size(self):
        """Gets the max_page_size of this SearchJobsRequest.

        A limit on the number of jobs returned in the search results. Increasing this value above the default value of 10 can increase search response time. The value can be between 1 and 100.

        :return: The max_page_size of this SearchJobsRequest.
        :rtype: int
        """
        return self._max_page_size

    @max_page_size.setter
    def max_page_size(self, max_page_size):
        """Sets the max_page_size of this SearchJobsRequest.

        A limit on the number of jobs returned in the search results. Increasing this value above the default value of 10 can increase search response time. The value can be between 1 and 100.

        :param max_page_size: The max_page_size of this SearchJobsRequest.
        :type max_page_size: int
        """

        self._max_page_size = max_page_size

    @property
    def offset(self):
        """Gets the offset of this SearchJobsRequest.

        An integer that specifies the current offset (that is, starting result location, amongst the jobs deemed by the API as relevant) in search results. This field is only considered if page_token is unset. The maximum allowed value is 5000. Otherwise an error is thrown. For example, 0 means to return results starting from the first matching job, and 10 means to return from the 11th job. This can be used for pagination, (for example, pageSize = 10 and offset = 10 means to return from the second page).

        :return: The offset of this SearchJobsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchJobsRequest.

        An integer that specifies the current offset (that is, starting result location, amongst the jobs deemed by the API as relevant) in search results. This field is only considered if page_token is unset. The maximum allowed value is 5000. Otherwise an error is thrown. For example, 0 means to return results starting from the first matching job, and 10 means to return from the 11th job. This can be used for pagination, (for example, pageSize = 10 and offset = 10 means to return from the second page).

        :param offset: The offset of this SearchJobsRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this SearchJobsRequest.

        The criteria determining how search results are sorted. Default is `\"relevance desc\"`. Supported options are: * `\"relevance desc\"`: By relevance descending, as determined by the API algorithms. Relevance thresholding of query results is only available with this ordering. * `\"posting_publish_time desc\"`: By Job.posting_publish_time descending. * `\"posting_update_time desc\"`: By Job.posting_update_time descending. * `\"title\"`: By Job.title ascending. * `\"title desc\"`: By Job.title descending. * `\"annualized_base_compensation\"`: By job's CompensationInfo.annualized_base_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_base_compensation desc\"`: By job's CompensationInfo.annualized_base_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation\"`: By job's CompensationInfo.annualized_total_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation desc\"`: By job's CompensationInfo.annualized_total_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"custom_ranking desc\"`: By the relevance score adjusted to the SearchJobsRequest.CustomRankingInfo.ranking_expression with weight factor assigned by SearchJobsRequest.CustomRankingInfo.importance_level in descending order. * Location sorting: Use the special syntax to order jobs by distance: `\"distance_from('Hawaii')\"`: Order by distance from Hawaii. `\"distance_from(19.89, 155.5)\"`: Order by distance from a coordinate. `\"distance_from('Hawaii'), distance_from('Puerto Rico')\"`: Order by multiple locations. See details below. `\"distance_from('Hawaii'), distance_from(19.89, 155.5)\"`: Order by multiple locations. See details below. The string can have a maximum of 256 characters. When multiple distance centers are provided, a job that is close to any of the distance centers would have a high rank. When a job has multiple locations, the job location closest to one of the distance centers will be used. Jobs that don't have locations will be ranked at the bottom. Distance is calculated with a precision of 11.3 meters (37.4 feet). Diversification strategy is still applied unless explicitly disabled in diversification_level.

        :return: The order_by of this SearchJobsRequest.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SearchJobsRequest.

        The criteria determining how search results are sorted. Default is `\"relevance desc\"`. Supported options are: * `\"relevance desc\"`: By relevance descending, as determined by the API algorithms. Relevance thresholding of query results is only available with this ordering. * `\"posting_publish_time desc\"`: By Job.posting_publish_time descending. * `\"posting_update_time desc\"`: By Job.posting_update_time descending. * `\"title\"`: By Job.title ascending. * `\"title desc\"`: By Job.title descending. * `\"annualized_base_compensation\"`: By job's CompensationInfo.annualized_base_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_base_compensation desc\"`: By job's CompensationInfo.annualized_base_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation\"`: By job's CompensationInfo.annualized_total_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation desc\"`: By job's CompensationInfo.annualized_total_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"custom_ranking desc\"`: By the relevance score adjusted to the SearchJobsRequest.CustomRankingInfo.ranking_expression with weight factor assigned by SearchJobsRequest.CustomRankingInfo.importance_level in descending order. * Location sorting: Use the special syntax to order jobs by distance: `\"distance_from('Hawaii')\"`: Order by distance from Hawaii. `\"distance_from(19.89, 155.5)\"`: Order by distance from a coordinate. `\"distance_from('Hawaii'), distance_from('Puerto Rico')\"`: Order by multiple locations. See details below. `\"distance_from('Hawaii'), distance_from(19.89, 155.5)\"`: Order by multiple locations. See details below. The string can have a maximum of 256 characters. When multiple distance centers are provided, a job that is close to any of the distance centers would have a high rank. When a job has multiple locations, the job location closest to one of the distance centers will be used. Jobs that don't have locations will be ranked at the bottom. Distance is calculated with a precision of 11.3 meters (37.4 feet). Diversification strategy is still applied unless explicitly disabled in diversification_level.

        :param order_by: The order_by of this SearchJobsRequest.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_token(self):
        """Gets the page_token of this SearchJobsRequest.

        The token specifying the current offset within search results. See SearchJobsResponse.next_page_token for an explanation of how to obtain the next set of query results.

        :return: The page_token of this SearchJobsRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchJobsRequest.

        The token specifying the current offset within search results. See SearchJobsResponse.next_page_token for an explanation of how to obtain the next set of query results.

        :param page_token: The page_token of this SearchJobsRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def request_metadata(self):
        """Gets the request_metadata of this SearchJobsRequest.


        :return: The request_metadata of this SearchJobsRequest.
        :rtype: RequestMetadata
        """
        return self._request_metadata

    @request_metadata.setter
    def request_metadata(self, request_metadata):
        """Sets the request_metadata of this SearchJobsRequest.


        :param request_metadata: The request_metadata of this SearchJobsRequest.
        :type request_metadata: RequestMetadata
        """

        self._request_metadata = request_metadata

    @property
    def search_mode(self):
        """Gets the search_mode of this SearchJobsRequest.

        Mode of a search. Defaults to SearchMode.JOB_SEARCH.

        :return: The search_mode of this SearchJobsRequest.
        :rtype: str
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this SearchJobsRequest.

        Mode of a search. Defaults to SearchMode.JOB_SEARCH.

        :param search_mode: The search_mode of this SearchJobsRequest.
        :type search_mode: str
        """
        allowed_values = ["SEARCH_MODE_UNSPECIFIED", "JOB_SEARCH", "FEATURED_JOB_SEARCH"]  # noqa: E501
        if search_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `search_mode` ({0}), must be one of {1}"
                .format(search_mode, allowed_values)
            )

        self._search_mode = search_mode
