# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.compensation_info import CompensationInfo
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server.models.job_derived_info import JobDerivedInfo
from openapi_server.models.processing_options import ProcessingOptions
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[str]=None, application_info: ApplicationInfo=None, company: str=None, company_display_name: str=None, compensation_info: CompensationInfo=None, custom_attributes: Dict[str, CustomAttribute]=None, degree_types: List[str]=None, department: str=None, derived_info: JobDerivedInfo=None, description: str=None, employment_types: List[str]=None, incentives: str=None, job_benefits: List[str]=None, job_end_time: str=None, job_level: str=None, job_start_time: str=None, language_code: str=None, name: str=None, posting_create_time: str=None, posting_expire_time: str=None, posting_publish_time: str=None, posting_region: str=None, posting_update_time: str=None, processing_options: ProcessingOptions=None, promotion_value: int=None, qualifications: str=None, requisition_id: str=None, responsibilities: str=None, title: str=None, visibility: str=None):
        """Job - a model defined in OpenAPI

        :param addresses: The addresses of this Job.
        :param application_info: The application_info of this Job.
        :param company: The company of this Job.
        :param company_display_name: The company_display_name of this Job.
        :param compensation_info: The compensation_info of this Job.
        :param custom_attributes: The custom_attributes of this Job.
        :param degree_types: The degree_types of this Job.
        :param department: The department of this Job.
        :param derived_info: The derived_info of this Job.
        :param description: The description of this Job.
        :param employment_types: The employment_types of this Job.
        :param incentives: The incentives of this Job.
        :param job_benefits: The job_benefits of this Job.
        :param job_end_time: The job_end_time of this Job.
        :param job_level: The job_level of this Job.
        :param job_start_time: The job_start_time of this Job.
        :param language_code: The language_code of this Job.
        :param name: The name of this Job.
        :param posting_create_time: The posting_create_time of this Job.
        :param posting_expire_time: The posting_expire_time of this Job.
        :param posting_publish_time: The posting_publish_time of this Job.
        :param posting_region: The posting_region of this Job.
        :param posting_update_time: The posting_update_time of this Job.
        :param processing_options: The processing_options of this Job.
        :param promotion_value: The promotion_value of this Job.
        :param qualifications: The qualifications of this Job.
        :param requisition_id: The requisition_id of this Job.
        :param responsibilities: The responsibilities of this Job.
        :param title: The title of this Job.
        :param visibility: The visibility of this Job.
        """
        self.openapi_types = {
            'addresses': List[str],
            'application_info': ApplicationInfo,
            'company': str,
            'company_display_name': str,
            'compensation_info': CompensationInfo,
            'custom_attributes': Dict[str, CustomAttribute],
            'degree_types': List[str],
            'department': str,
            'derived_info': JobDerivedInfo,
            'description': str,
            'employment_types': List[str],
            'incentives': str,
            'job_benefits': List[str],
            'job_end_time': str,
            'job_level': str,
            'job_start_time': str,
            'language_code': str,
            'name': str,
            'posting_create_time': str,
            'posting_expire_time': str,
            'posting_publish_time': str,
            'posting_region': str,
            'posting_update_time': str,
            'processing_options': ProcessingOptions,
            'promotion_value': int,
            'qualifications': str,
            'requisition_id': str,
            'responsibilities': str,
            'title': str,
            'visibility': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'application_info': 'applicationInfo',
            'company': 'company',
            'company_display_name': 'companyDisplayName',
            'compensation_info': 'compensationInfo',
            'custom_attributes': 'customAttributes',
            'degree_types': 'degreeTypes',
            'department': 'department',
            'derived_info': 'derivedInfo',
            'description': 'description',
            'employment_types': 'employmentTypes',
            'incentives': 'incentives',
            'job_benefits': 'jobBenefits',
            'job_end_time': 'jobEndTime',
            'job_level': 'jobLevel',
            'job_start_time': 'jobStartTime',
            'language_code': 'languageCode',
            'name': 'name',
            'posting_create_time': 'postingCreateTime',
            'posting_expire_time': 'postingExpireTime',
            'posting_publish_time': 'postingPublishTime',
            'posting_region': 'postingRegion',
            'posting_update_time': 'postingUpdateTime',
            'processing_options': 'processingOptions',
            'promotion_value': 'promotionValue',
            'qualifications': 'qualifications',
            'requisition_id': 'requisitionId',
            'responsibilities': 'responsibilities',
            'title': 'title',
            'visibility': 'visibility'
        }

        self._addresses = addresses
        self._application_info = application_info
        self._company = company
        self._company_display_name = company_display_name
        self._compensation_info = compensation_info
        self._custom_attributes = custom_attributes
        self._degree_types = degree_types
        self._department = department
        self._derived_info = derived_info
        self._description = description
        self._employment_types = employment_types
        self._incentives = incentives
        self._job_benefits = job_benefits
        self._job_end_time = job_end_time
        self._job_level = job_level
        self._job_start_time = job_start_time
        self._language_code = language_code
        self._name = name
        self._posting_create_time = posting_create_time
        self._posting_expire_time = posting_expire_time
        self._posting_publish_time = posting_publish_time
        self._posting_region = posting_region
        self._posting_update_time = posting_update_time
        self._processing_options = processing_options
        self._promotion_value = promotion_value
        self._qualifications = qualifications
        self._requisition_id = requisition_id
        self._responsibilities = responsibilities
        self._title = title
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Job.

        Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \"1600 Amphitheatre Parkway, Mountain View, CA, USA\" and \"London, UK\" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.

        :return: The addresses of this Job.
        :rtype: List[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Job.

        Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \"1600 Amphitheatre Parkway, Mountain View, CA, USA\" and \"London, UK\" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.

        :param addresses: The addresses of this Job.
        :type addresses: List[str]
        """

        self._addresses = addresses

    @property
    def application_info(self):
        """Gets the application_info of this Job.


        :return: The application_info of this Job.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this Job.


        :param application_info: The application_info of this Job.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def company(self):
        """Gets the company of this Job.

        Required. The resource name of the company listing the job. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\".

        :return: The company of this Job.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Job.

        Required. The resource name of the company listing the job. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\".

        :param company: The company of this Job.
        :type company: str
        """

        self._company = company

    @property
    def company_display_name(self):
        """Gets the company_display_name of this Job.

        Output only. Display name of the company listing the job.

        :return: The company_display_name of this Job.
        :rtype: str
        """
        return self._company_display_name

    @company_display_name.setter
    def company_display_name(self, company_display_name):
        """Sets the company_display_name of this Job.

        Output only. Display name of the company listing the job.

        :param company_display_name: The company_display_name of this Job.
        :type company_display_name: str
        """

        self._company_display_name = company_display_name

    @property
    def compensation_info(self):
        """Gets the compensation_info of this Job.


        :return: The compensation_info of this Job.
        :rtype: CompensationInfo
        """
        return self._compensation_info

    @compensation_info.setter
    def compensation_info(self, compensation_info):
        """Sets the compensation_info of this Job.


        :param compensation_info: The compensation_info of this Job.
        :type compensation_info: CompensationInfo
        """

        self._compensation_info = compensation_info

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Job.

        A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.

        :return: The custom_attributes of this Job.
        :rtype: Dict[str, CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Job.

        A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.

        :param custom_attributes: The custom_attributes of this Job.
        :type custom_attributes: Dict[str, CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    @property
    def degree_types(self):
        """Gets the degree_types of this Job.

        The desired education degrees for the job, such as Bachelors, Masters.

        :return: The degree_types of this Job.
        :rtype: List[str]
        """
        return self._degree_types

    @degree_types.setter
    def degree_types(self, degree_types):
        """Sets the degree_types of this Job.

        The desired education degrees for the job, such as Bachelors, Masters.

        :param degree_types: The degree_types of this Job.
        :type degree_types: List[str]
        """
        allowed_values = ["DEGREE_TYPE_UNSPECIFIED", "PRIMARY_EDUCATION", "LOWER_SECONDARY_EDUCATION", "UPPER_SECONDARY_EDUCATION", "ADULT_REMEDIAL_EDUCATION", "ASSOCIATES_OR_EQUIVALENT", "BACHELORS_OR_EQUIVALENT", "MASTERS_OR_EQUIVALENT", "DOCTORAL_OR_EQUIVALENT"]  # noqa: E501
        if not set(degree_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `degree_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(degree_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._degree_types = degree_types

    @property
    def department(self):
        """Gets the department of this Job.

        The department or functional area within the company with the open position. The maximum number of allowed characters is 255.

        :return: The department of this Job.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Job.

        The department or functional area within the company with the open position. The maximum number of allowed characters is 255.

        :param department: The department of this Job.
        :type department: str
        """

        self._department = department

    @property
    def derived_info(self):
        """Gets the derived_info of this Job.


        :return: The derived_info of this Job.
        :rtype: JobDerivedInfo
        """
        return self._derived_info

    @derived_info.setter
    def derived_info(self, derived_info):
        """Sets the derived_info of this Job.


        :param derived_info: The derived_info of this Job.
        :type derived_info: JobDerivedInfo
        """

        self._derived_info = derived_info

    @property
    def description(self):
        """Gets the description of this Job.

        Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.

        :return: The description of this Job.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.

        :param description: The description of this Job.
        :type description: str
        """

        self._description = description

    @property
    def employment_types(self):
        """Gets the employment_types of this Job.

        The employment type(s) of a job, for example, full time or part time.

        :return: The employment_types of this Job.
        :rtype: List[str]
        """
        return self._employment_types

    @employment_types.setter
    def employment_types(self, employment_types):
        """Sets the employment_types of this Job.

        The employment type(s) of a job, for example, full time or part time.

        :param employment_types: The employment_types of this Job.
        :type employment_types: List[str]
        """
        allowed_values = ["EMPLOYMENT_TYPE_UNSPECIFIED", "FULL_TIME", "PART_TIME", "CONTRACTOR", "CONTRACT_TO_HIRE", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "FLY_IN_FLY_OUT", "OTHER_EMPLOYMENT_TYPE"]  # noqa: E501
        if not set(employment_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `employment_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(employment_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._employment_types = employment_types

    @property
    def incentives(self):
        """Gets the incentives of this Job.

        A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.

        :return: The incentives of this Job.
        :rtype: str
        """
        return self._incentives

    @incentives.setter
    def incentives(self, incentives):
        """Sets the incentives of this Job.

        A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.

        :param incentives: The incentives of this Job.
        :type incentives: str
        """

        self._incentives = incentives

    @property
    def job_benefits(self):
        """Gets the job_benefits of this Job.

        The benefits included with the job.

        :return: The job_benefits of this Job.
        :rtype: List[str]
        """
        return self._job_benefits

    @job_benefits.setter
    def job_benefits(self, job_benefits):
        """Sets the job_benefits of this Job.

        The benefits included with the job.

        :param job_benefits: The job_benefits of this Job.
        :type job_benefits: List[str]
        """
        allowed_values = ["JOB_BENEFIT_UNSPECIFIED", "CHILD_CARE", "DENTAL", "DOMESTIC_PARTNER", "FLEXIBLE_HOURS", "MEDICAL", "LIFE_INSURANCE", "PARENTAL_LEAVE", "RETIREMENT_PLAN", "SICK_DAYS", "VACATION", "VISION"]  # noqa: E501
        if not set(job_benefits).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `job_benefits` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(job_benefits) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._job_benefits = job_benefits

    @property
    def job_end_time(self):
        """Gets the job_end_time of this Job.

        The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.

        :return: The job_end_time of this Job.
        :rtype: str
        """
        return self._job_end_time

    @job_end_time.setter
    def job_end_time(self, job_end_time):
        """Sets the job_end_time of this Job.

        The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.

        :param job_end_time: The job_end_time of this Job.
        :type job_end_time: str
        """

        self._job_end_time = job_end_time

    @property
    def job_level(self):
        """Gets the job_level of this Job.

        The experience level associated with the job, such as \"Entry Level\".

        :return: The job_level of this Job.
        :rtype: str
        """
        return self._job_level

    @job_level.setter
    def job_level(self, job_level):
        """Sets the job_level of this Job.

        The experience level associated with the job, such as \"Entry Level\".

        :param job_level: The job_level of this Job.
        :type job_level: str
        """
        allowed_values = ["JOB_LEVEL_UNSPECIFIED", "ENTRY_LEVEL", "EXPERIENCED", "MANAGER", "DIRECTOR", "EXECUTIVE"]  # noqa: E501
        if job_level not in allowed_values:
            raise ValueError(
                "Invalid value for `job_level` ({0}), must be one of {1}"
                .format(job_level, allowed_values)
            )

        self._job_level = job_level

    @property
    def job_start_time(self):
        """Gets the job_start_time of this Job.

        The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.

        :return: The job_start_time of this Job.
        :rtype: str
        """
        return self._job_start_time

    @job_start_time.setter
    def job_start_time(self, job_start_time):
        """Sets the job_start_time of this Job.

        The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.

        :param job_start_time: The job_start_time of this Job.
        :type job_start_time: str
        """

        self._job_start_time = job_start_time

    @property
    def language_code(self):
        """Gets the language_code of this Job.

        The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=\"external\" target=\"_blank\" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.

        :return: The language_code of this Job.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Job.

        The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=\"external\" target=\"_blank\" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.

        :param language_code: The language_code of this Job.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this Job.

        Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def posting_create_time(self):
        """Gets the posting_create_time of this Job.

        Output only. The timestamp when this job posting was created.

        :return: The posting_create_time of this Job.
        :rtype: str
        """
        return self._posting_create_time

    @posting_create_time.setter
    def posting_create_time(self, posting_create_time):
        """Sets the posting_create_time of this Job.

        Output only. The timestamp when this job posting was created.

        :param posting_create_time: The posting_create_time of this Job.
        :type posting_create_time: str
        """

        self._posting_create_time = posting_create_time

    @property
    def posting_expire_time(self):
        """Gets the posting_expire_time of this Job.

        Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.

        :return: The posting_expire_time of this Job.
        :rtype: str
        """
        return self._posting_expire_time

    @posting_expire_time.setter
    def posting_expire_time(self, posting_expire_time):
        """Sets the posting_expire_time of this Job.

        Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.

        :param posting_expire_time: The posting_expire_time of this Job.
        :type posting_expire_time: str
        """

        self._posting_expire_time = posting_expire_time

    @property
    def posting_publish_time(self):
        """Gets the posting_publish_time of this Job.

        The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.

        :return: The posting_publish_time of this Job.
        :rtype: str
        """
        return self._posting_publish_time

    @posting_publish_time.setter
    def posting_publish_time(self, posting_publish_time):
        """Sets the posting_publish_time of this Job.

        The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.

        :param posting_publish_time: The posting_publish_time of this Job.
        :type posting_publish_time: str
        """

        self._posting_publish_time = posting_publish_time

    @property
    def posting_region(self):
        """Gets the posting_region of this Job.

        The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.

        :return: The posting_region of this Job.
        :rtype: str
        """
        return self._posting_region

    @posting_region.setter
    def posting_region(self, posting_region):
        """Sets the posting_region of this Job.

        The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.

        :param posting_region: The posting_region of this Job.
        :type posting_region: str
        """
        allowed_values = ["POSTING_REGION_UNSPECIFIED", "ADMINISTRATIVE_AREA", "NATION", "TELECOMMUTE"]  # noqa: E501
        if posting_region not in allowed_values:
            raise ValueError(
                "Invalid value for `posting_region` ({0}), must be one of {1}"
                .format(posting_region, allowed_values)
            )

        self._posting_region = posting_region

    @property
    def posting_update_time(self):
        """Gets the posting_update_time of this Job.

        Output only. The timestamp when this job posting was last updated.

        :return: The posting_update_time of this Job.
        :rtype: str
        """
        return self._posting_update_time

    @posting_update_time.setter
    def posting_update_time(self, posting_update_time):
        """Sets the posting_update_time of this Job.

        Output only. The timestamp when this job posting was last updated.

        :param posting_update_time: The posting_update_time of this Job.
        :type posting_update_time: str
        """

        self._posting_update_time = posting_update_time

    @property
    def processing_options(self):
        """Gets the processing_options of this Job.


        :return: The processing_options of this Job.
        :rtype: ProcessingOptions
        """
        return self._processing_options

    @processing_options.setter
    def processing_options(self, processing_options):
        """Sets the processing_options of this Job.


        :param processing_options: The processing_options of this Job.
        :type processing_options: ProcessingOptions
        """

        self._processing_options = processing_options

    @property
    def promotion_value(self):
        """Gets the promotion_value of this Job.

        A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.

        :return: The promotion_value of this Job.
        :rtype: int
        """
        return self._promotion_value

    @promotion_value.setter
    def promotion_value(self, promotion_value):
        """Sets the promotion_value of this Job.

        A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.

        :param promotion_value: The promotion_value of this Job.
        :type promotion_value: int
        """

        self._promotion_value = promotion_value

    @property
    def qualifications(self):
        """Gets the qualifications of this Job.

        A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.

        :return: The qualifications of this Job.
        :rtype: str
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """Sets the qualifications of this Job.

        A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.

        :param qualifications: The qualifications of this Job.
        :type qualifications: str
        """

        self._qualifications = qualifications

    @property
    def requisition_id(self):
        """Gets the requisition_id of this Job.

        Required. The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.

        :return: The requisition_id of this Job.
        :rtype: str
        """
        return self._requisition_id

    @requisition_id.setter
    def requisition_id(self, requisition_id):
        """Sets the requisition_id of this Job.

        Required. The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.

        :param requisition_id: The requisition_id of this Job.
        :type requisition_id: str
        """

        self._requisition_id = requisition_id

    @property
    def responsibilities(self):
        """Gets the responsibilities of this Job.

        A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.

        :return: The responsibilities of this Job.
        :rtype: str
        """
        return self._responsibilities

    @responsibilities.setter
    def responsibilities(self, responsibilities):
        """Sets the responsibilities of this Job.

        A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.

        :param responsibilities: The responsibilities of this Job.
        :type responsibilities: str
        """

        self._responsibilities = responsibilities

    @property
    def title(self):
        """Gets the title of this Job.

        Required. The title of the job, such as \"Software Engineer\" The maximum number of allowed characters is 500.

        :return: The title of this Job.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Job.

        Required. The title of the job, such as \"Software Engineer\" The maximum number of allowed characters is 500.

        :param title: The title of this Job.
        :type title: str
        """

        self._title = title

    @property
    def visibility(self):
        """Gets the visibility of this Job.

        Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.

        :return: The visibility of this Job.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Job.

        Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.

        :param visibility: The visibility of this Job.
        :type visibility: str
        """
        allowed_values = ["VISIBILITY_UNSPECIFIED", "ACCOUNT_ONLY", "SHARED_WITH_GOOGLE", "SHARED_WITH_PUBLIC"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
