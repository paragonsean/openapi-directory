# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compensation_range import CompensationRange
from openapi_server import util


class CompensationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_jobs_with_unspecified_compensation_range: bool=None, range: CompensationRange=None, type: str=None, units: List[str]=None):
        """CompensationFilter - a model defined in OpenAPI

        :param include_jobs_with_unspecified_compensation_range: The include_jobs_with_unspecified_compensation_range of this CompensationFilter.
        :param range: The range of this CompensationFilter.
        :param type: The type of this CompensationFilter.
        :param units: The units of this CompensationFilter.
        """
        self.openapi_types = {
            'include_jobs_with_unspecified_compensation_range': bool,
            'range': CompensationRange,
            'type': str,
            'units': List[str]
        }

        self.attribute_map = {
            'include_jobs_with_unspecified_compensation_range': 'includeJobsWithUnspecifiedCompensationRange',
            'range': 'range',
            'type': 'type',
            'units': 'units'
        }

        self._include_jobs_with_unspecified_compensation_range = include_jobs_with_unspecified_compensation_range
        self._range = range
        self._type = type
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompensationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompensationFilter of this CompensationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_jobs_with_unspecified_compensation_range(self):
        """Gets the include_jobs_with_unspecified_compensation_range of this CompensationFilter.

        If set to true, jobs with unspecified compensation range fields are included.

        :return: The include_jobs_with_unspecified_compensation_range of this CompensationFilter.
        :rtype: bool
        """
        return self._include_jobs_with_unspecified_compensation_range

    @include_jobs_with_unspecified_compensation_range.setter
    def include_jobs_with_unspecified_compensation_range(self, include_jobs_with_unspecified_compensation_range):
        """Sets the include_jobs_with_unspecified_compensation_range of this CompensationFilter.

        If set to true, jobs with unspecified compensation range fields are included.

        :param include_jobs_with_unspecified_compensation_range: The include_jobs_with_unspecified_compensation_range of this CompensationFilter.
        :type include_jobs_with_unspecified_compensation_range: bool
        """

        self._include_jobs_with_unspecified_compensation_range = include_jobs_with_unspecified_compensation_range

    @property
    def range(self):
        """Gets the range of this CompensationFilter.


        :return: The range of this CompensationFilter.
        :rtype: CompensationRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this CompensationFilter.


        :param range: The range of this CompensationFilter.
        :type range: CompensationRange
        """

        self._range = range

    @property
    def type(self):
        """Gets the type of this CompensationFilter.

        Required. Type of filter.

        :return: The type of this CompensationFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompensationFilter.

        Required. Type of filter.

        :param type: The type of this CompensationFilter.
        :type type: str
        """
        allowed_values = ["FILTER_TYPE_UNSPECIFIED", "UNIT_ONLY", "UNIT_AND_AMOUNT", "ANNUALIZED_BASE_AMOUNT", "ANNUALIZED_TOTAL_AMOUNT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def units(self):
        """Gets the units of this CompensationFilter.

        Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.

        :return: The units of this CompensationFilter.
        :rtype: List[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this CompensationFilter.

        Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.

        :param units: The units of this CompensationFilter.
        :type units: List[str]
        """
        allowed_values = ["COMPENSATION_UNIT_UNSPECIFIED", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "ONE_TIME", "OTHER_COMPENSATION_UNIT"]  # noqa: E501
        if not set(units).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `units` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(units) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._units = units
