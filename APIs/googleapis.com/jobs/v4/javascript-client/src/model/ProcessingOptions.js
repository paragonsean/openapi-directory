/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProcessingOptions model module.
 * @module model/ProcessingOptions
 * @version v4
 */
class ProcessingOptions {
    /**
     * Constructs a new <code>ProcessingOptions</code>.
     * Options for job processing.
     * @alias module:model/ProcessingOptions
     */
    constructor() { 
        
        ProcessingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessingOptions} obj Optional instance to populate.
     * @return {module:model/ProcessingOptions} The populated <code>ProcessingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessingOptions();

            if (data.hasOwnProperty('disableStreetAddressResolution')) {
                obj['disableStreetAddressResolution'] = ApiClient.convertToType(data['disableStreetAddressResolution'], 'Boolean');
            }
            if (data.hasOwnProperty('htmlSanitization')) {
                obj['htmlSanitization'] = ApiClient.convertToType(data['htmlSanitization'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['htmlSanitization'] && !(typeof data['htmlSanitization'] === 'string' || data['htmlSanitization'] instanceof String)) {
            throw new Error("Expected the field `htmlSanitization` to be a primitive type in the JSON string but got " + data['htmlSanitization']);
        }

        return true;
    }


}



/**
 * If set to `true`, the service does not attempt to resolve a more precise address for the job.
 * @member {Boolean} disableStreetAddressResolution
 */
ProcessingOptions.prototype['disableStreetAddressResolution'] = undefined;

/**
 * Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
 * @member {module:model/ProcessingOptions.HtmlSanitizationEnum} htmlSanitization
 */
ProcessingOptions.prototype['htmlSanitization'] = undefined;





/**
 * Allowed values for the <code>htmlSanitization</code> property.
 * @enum {String}
 * @readonly
 */
ProcessingOptions['HtmlSanitizationEnum'] = {

    /**
     * value: "HTML_SANITIZATION_UNSPECIFIED"
     * @const
     */
    "HTML_SANITIZATION_UNSPECIFIED": "HTML_SANITIZATION_UNSPECIFIED",

    /**
     * value: "HTML_SANITIZATION_DISABLED"
     * @const
     */
    "HTML_SANITIZATION_DISABLED": "HTML_SANITIZATION_DISABLED",

    /**
     * value: "SIMPLE_FORMATTING_ONLY"
     * @const
     */
    "SIMPLE_FORMATTING_ONLY": "SIMPLE_FORMATTING_ONLY"
};



export default ProcessingOptions;

