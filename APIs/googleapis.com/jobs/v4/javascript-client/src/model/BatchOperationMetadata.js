/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchOperationMetadata model module.
 * @module model/BatchOperationMetadata
 * @version v4
 */
class BatchOperationMetadata {
    /**
     * Constructs a new <code>BatchOperationMetadata</code>.
     * Metadata used for long running operations returned by CTS batch APIs. It&#39;s used to replace google.longrunning.Operation.metadata.
     * @alias module:model/BatchOperationMetadata
     */
    constructor() { 
        
        BatchOperationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchOperationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchOperationMetadata} obj Optional instance to populate.
     * @return {module:model/BatchOperationMetadata} The populated <code>BatchOperationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchOperationMetadata();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('failureCount')) {
                obj['failureCount'] = ApiClient.convertToType(data['failureCount'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateDescription')) {
                obj['stateDescription'] = ApiClient.convertToType(data['stateDescription'], 'String');
            }
            if (data.hasOwnProperty('successCount')) {
                obj['successCount'] = ApiClient.convertToType(data['successCount'], 'Number');
            }
            if (data.hasOwnProperty('totalCount')) {
                obj['totalCount'] = ApiClient.convertToType(data['totalCount'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchOperationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchOperationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateDescription'] && !(typeof data['stateDescription'] === 'string' || data['stateDescription'] instanceof String)) {
            throw new Error("Expected the field `stateDescription` to be a primitive type in the JSON string but got " + data['stateDescription']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The time when the batch operation is created.
 * @member {String} createTime
 */
BatchOperationMetadata.prototype['createTime'] = undefined;

/**
 * The time when the batch operation is finished and google.longrunning.Operation.done is set to `true`.
 * @member {String} endTime
 */
BatchOperationMetadata.prototype['endTime'] = undefined;

/**
 * Count of failed item(s) inside an operation.
 * @member {Number} failureCount
 */
BatchOperationMetadata.prototype['failureCount'] = undefined;

/**
 * The state of a long running operation.
 * @member {module:model/BatchOperationMetadata.StateEnum} state
 */
BatchOperationMetadata.prototype['state'] = undefined;

/**
 * More detailed information about operation state.
 * @member {String} stateDescription
 */
BatchOperationMetadata.prototype['stateDescription'] = undefined;

/**
 * Count of successful item(s) inside an operation.
 * @member {Number} successCount
 */
BatchOperationMetadata.prototype['successCount'] = undefined;

/**
 * Count of total item(s) inside an operation.
 * @member {Number} totalCount
 */
BatchOperationMetadata.prototype['totalCount'] = undefined;

/**
 * The time when the batch operation status is updated. The metadata and the update_time is refreshed every minute otherwise cached data is returned.
 * @member {String} updateTime
 */
BatchOperationMetadata.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BatchOperationMetadata['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "INITIALIZING"
     * @const
     */
    "INITIALIZING": "INITIALIZING",

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELLING"
     * @const
     */
    "CANCELLING": "CANCELLING",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};



export default BatchOperationMetadata;

