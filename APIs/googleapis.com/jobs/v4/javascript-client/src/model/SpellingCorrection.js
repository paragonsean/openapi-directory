/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpellingCorrection model module.
 * @module model/SpellingCorrection
 * @version v4
 */
class SpellingCorrection {
    /**
     * Constructs a new <code>SpellingCorrection</code>.
     * Spell check result.
     * @alias module:model/SpellingCorrection
     */
    constructor() { 
        
        SpellingCorrection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpellingCorrection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpellingCorrection} obj Optional instance to populate.
     * @return {module:model/SpellingCorrection} The populated <code>SpellingCorrection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpellingCorrection();

            if (data.hasOwnProperty('corrected')) {
                obj['corrected'] = ApiClient.convertToType(data['corrected'], 'Boolean');
            }
            if (data.hasOwnProperty('correctedHtml')) {
                obj['correctedHtml'] = ApiClient.convertToType(data['correctedHtml'], 'String');
            }
            if (data.hasOwnProperty('correctedText')) {
                obj['correctedText'] = ApiClient.convertToType(data['correctedText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpellingCorrection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpellingCorrection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['correctedHtml'] && !(typeof data['correctedHtml'] === 'string' || data['correctedHtml'] instanceof String)) {
            throw new Error("Expected the field `correctedHtml` to be a primitive type in the JSON string but got " + data['correctedHtml']);
        }
        // ensure the json data is a string
        if (data['correctedText'] && !(typeof data['correctedText'] === 'string' || data['correctedText'] instanceof String)) {
            throw new Error("Expected the field `correctedText` to be a primitive type in the JSON string but got " + data['correctedText']);
        }

        return true;
    }


}



/**
 * Indicates if the query was corrected by the spell checker.
 * @member {Boolean} corrected
 */
SpellingCorrection.prototype['corrected'] = undefined;

/**
 * Corrected output with html tags to highlight the corrected words. Corrected words are called out with the \"*...*\" html tags. For example, the user input query is \"software enginear\", where the second word, \"enginear,\" is incorrect. It should be \"engineer\". When spelling correction is enabled, this value is \"software *engineer*\".
 * @member {String} correctedHtml
 */
SpellingCorrection.prototype['correctedHtml'] = undefined;

/**
 * Correction output consisting of the corrected keyword string.
 * @member {String} correctedText
 */
SpellingCorrection.prototype['correctedText'] = undefined;






export default SpellingCorrection;

