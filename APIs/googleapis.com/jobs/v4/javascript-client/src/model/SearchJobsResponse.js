/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistogramQueryResult from './HistogramQueryResult';
import Location from './Location';
import MatchingJob from './MatchingJob';
import ResponseMetadata from './ResponseMetadata';
import SpellingCorrection from './SpellingCorrection';

/**
 * The SearchJobsResponse model module.
 * @module model/SearchJobsResponse
 * @version v4
 */
class SearchJobsResponse {
    /**
     * Constructs a new <code>SearchJobsResponse</code>.
     * Response for SearchJob method.
     * @alias module:model/SearchJobsResponse
     */
    constructor() { 
        
        SearchJobsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchJobsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchJobsResponse} obj Optional instance to populate.
     * @return {module:model/SearchJobsResponse} The populated <code>SearchJobsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchJobsResponse();

            if (data.hasOwnProperty('broadenedQueryJobsCount')) {
                obj['broadenedQueryJobsCount'] = ApiClient.convertToType(data['broadenedQueryJobsCount'], 'Number');
            }
            if (data.hasOwnProperty('histogramQueryResults')) {
                obj['histogramQueryResults'] = ApiClient.convertToType(data['histogramQueryResults'], [HistogramQueryResult]);
            }
            if (data.hasOwnProperty('locationFilters')) {
                obj['locationFilters'] = ApiClient.convertToType(data['locationFilters'], [Location]);
            }
            if (data.hasOwnProperty('matchingJobs')) {
                obj['matchingJobs'] = ApiClient.convertToType(data['matchingJobs'], [MatchingJob]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ResponseMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('spellCorrection')) {
                obj['spellCorrection'] = SpellingCorrection.constructFromObject(data['spellCorrection']);
            }
            if (data.hasOwnProperty('totalSize')) {
                obj['totalSize'] = ApiClient.convertToType(data['totalSize'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchJobsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchJobsResponse</code>.
     */
    static validateJSON(data) {
        if (data['histogramQueryResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['histogramQueryResults'])) {
                throw new Error("Expected the field `histogramQueryResults` to be an array in the JSON data but got " + data['histogramQueryResults']);
            }
            // validate the optional field `histogramQueryResults` (array)
            for (const item of data['histogramQueryResults']) {
                HistogramQueryResult.validateJSON(item);
            };
        }
        if (data['locationFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locationFilters'])) {
                throw new Error("Expected the field `locationFilters` to be an array in the JSON data but got " + data['locationFilters']);
            }
            // validate the optional field `locationFilters` (array)
            for (const item of data['locationFilters']) {
                Location.validateJSON(item);
            };
        }
        if (data['matchingJobs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matchingJobs'])) {
                throw new Error("Expected the field `matchingJobs` to be an array in the JSON data but got " + data['matchingJobs']);
            }
            // validate the optional field `matchingJobs` (array)
            for (const item of data['matchingJobs']) {
                MatchingJob.validateJSON(item);
            };
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ResponseMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        // validate the optional field `spellCorrection`
        if (data['spellCorrection']) { // data not null
          SpellingCorrection.validateJSON(data['spellCorrection']);
        }

        return true;
    }


}



/**
 * If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.
 * @member {Number} broadenedQueryJobsCount
 */
SearchJobsResponse.prototype['broadenedQueryJobsCount'] = undefined;

/**
 * The histogram results that match with specified SearchJobsRequest.histogram_queries.
 * @member {Array.<module:model/HistogramQueryResult>} histogramQueryResults
 */
SearchJobsResponse.prototype['histogramQueryResults'] = undefined;

/**
 * The location filters that the service applied to the specified query. If any filters are lat-lng based, the Location.location_type is Location.LocationType.LOCATION_TYPE_UNSPECIFIED.
 * @member {Array.<module:model/Location>} locationFilters
 */
SearchJobsResponse.prototype['locationFilters'] = undefined;

/**
 * The Job entities that match the specified SearchJobsRequest.
 * @member {Array.<module:model/MatchingJob>} matchingJobs
 */
SearchJobsResponse.prototype['matchingJobs'] = undefined;

/**
 * @member {module:model/ResponseMetadata} metadata
 */
SearchJobsResponse.prototype['metadata'] = undefined;

/**
 * The token that specifies the starting position of the next page of results. This field is empty if there are no more results.
 * @member {String} nextPageToken
 */
SearchJobsResponse.prototype['nextPageToken'] = undefined;

/**
 * @member {module:model/SpellingCorrection} spellCorrection
 */
SearchJobsResponse.prototype['spellCorrection'] = undefined;

/**
 * Number of jobs that match the specified query. Note: This size is precise only if the total is less than 100,000.
 * @member {Number} totalSize
 */
SearchJobsResponse.prototype['totalSize'] = undefined;






export default SearchJobsResponse;

