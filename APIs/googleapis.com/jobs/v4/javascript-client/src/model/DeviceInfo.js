/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version v4
 */
class DeviceInfo {
    /**
     * Constructs a new <code>DeviceInfo</code>.
     * Device information collected from the job seeker, candidate, or other entity conducting the job search. Providing this information improves the quality of the search results across devices.
     * @alias module:model/DeviceInfo
     */
    constructor() { 
        
        DeviceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInfo} obj Optional instance to populate.
     * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInfo();

            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * Type of the device.
 * @member {module:model/DeviceInfo.DeviceTypeEnum} deviceType
 */
DeviceInfo.prototype['deviceType'] = undefined;

/**
 * A device-specific ID. The ID must be a unique identifier that distinguishes the device from other devices.
 * @member {String} id
 */
DeviceInfo.prototype['id'] = undefined;





/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceInfo['DeviceTypeEnum'] = {

    /**
     * value: "DEVICE_TYPE_UNSPECIFIED"
     * @const
     */
    "DEVICE_TYPE_UNSPECIFIED": "DEVICE_TYPE_UNSPECIFIED",

    /**
     * value: "WEB"
     * @const
     */
    "WEB": "WEB",

    /**
     * value: "MOBILE_WEB"
     * @const
     */
    "MOBILE_WEB": "MOBILE_WEB",

    /**
     * value: "ANDROID"
     * @const
     */
    "ANDROID": "ANDROID",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "BOT"
     * @const
     */
    "BOT": "BOT",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default DeviceInfo;

