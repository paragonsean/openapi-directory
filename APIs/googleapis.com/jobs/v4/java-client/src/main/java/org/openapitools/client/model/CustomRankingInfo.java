/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom ranking information for SearchJobsRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:21.539627-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomRankingInfo {
  /**
   * Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job&#39;s final ranking position. An error is thrown if not specified.
   */
  @JsonAdapter(ImportanceLevelEnum.Adapter.class)
  public enum ImportanceLevelEnum {
    IMPORTANCE_LEVEL_UNSPECIFIED("IMPORTANCE_LEVEL_UNSPECIFIED"),
    
    NONE("NONE"),
    
    LOW("LOW"),
    
    MILD("MILD"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    EXTREME("EXTREME");

    private String value;

    ImportanceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImportanceLevelEnum fromValue(String value) {
      for (ImportanceLevelEnum b : ImportanceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImportanceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImportanceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImportanceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImportanceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImportanceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPORTANCE_LEVEL = "importanceLevel";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE_LEVEL)
  private ImportanceLevelEnum importanceLevel;

  public static final String SERIALIZED_NAME_RANKING_EXPRESSION = "rankingExpression";
  @SerializedName(SERIALIZED_NAME_RANKING_EXPRESSION)
  private String rankingExpression;

  public CustomRankingInfo() {
  }

  public CustomRankingInfo importanceLevel(ImportanceLevelEnum importanceLevel) {
    this.importanceLevel = importanceLevel;
    return this;
  }

  /**
   * Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job&#39;s final ranking position. An error is thrown if not specified.
   * @return importanceLevel
   */
  @javax.annotation.Nullable
  public ImportanceLevelEnum getImportanceLevel() {
    return importanceLevel;
  }

  public void setImportanceLevel(ImportanceLevelEnum importanceLevel) {
    this.importanceLevel = importanceLevel;
  }


  public CustomRankingInfo rankingExpression(String rankingExpression) {
    this.rankingExpression = rankingExpression;
    return this;
  }

  /**
   * Required. Controls over how job documents get ranked on top of existing relevance score (determined by API algorithm). A combination of the ranking expression and relevance score is used to determine job&#39;s final ranking position. The syntax for this expression is a subset of Google SQL syntax. Supported operators are: +, -, *, /, where the left and right side of the operator is either a numeric Job.custom_attributes key, integer/double value or an expression that can be evaluated to a number. Parenthesis are supported to adjust calculation precedence. The expression must be &lt; 200 characters in length. The expression is considered invalid for a job if the expression references custom attributes that are not populated on the job or if the expression results in a divide by zero. If an expression is invalid for a job, that job is demoted to the end of the results. Sample ranking expression (year + 25) * 0.25 - (freshness / 0.5)
   * @return rankingExpression
   */
  @javax.annotation.Nullable
  public String getRankingExpression() {
    return rankingExpression;
  }

  public void setRankingExpression(String rankingExpression) {
    this.rankingExpression = rankingExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomRankingInfo customRankingInfo = (CustomRankingInfo) o;
    return Objects.equals(this.importanceLevel, customRankingInfo.importanceLevel) &&
        Objects.equals(this.rankingExpression, customRankingInfo.rankingExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importanceLevel, rankingExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomRankingInfo {\n");
    sb.append("    importanceLevel: ").append(toIndentedString(importanceLevel)).append("\n");
    sb.append("    rankingExpression: ").append(toIndentedString(rankingExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("importanceLevel");
    openapiFields.add("rankingExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomRankingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomRankingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomRankingInfo is not found in the empty JSON string", CustomRankingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomRankingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomRankingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("importanceLevel") != null && !jsonObj.get("importanceLevel").isJsonNull()) && !jsonObj.get("importanceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importanceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importanceLevel").toString()));
      }
      // validate the optional field `importanceLevel`
      if (jsonObj.get("importanceLevel") != null && !jsonObj.get("importanceLevel").isJsonNull()) {
        ImportanceLevelEnum.validateJsonElement(jsonObj.get("importanceLevel"));
      }
      if ((jsonObj.get("rankingExpression") != null && !jsonObj.get("rankingExpression").isJsonNull()) && !jsonObj.get("rankingExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankingExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankingExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomRankingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomRankingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomRankingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomRankingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomRankingInfo>() {
           @Override
           public void write(JsonWriter out, CustomRankingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomRankingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomRankingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomRankingInfo
   * @throws IOException if the JSON string is invalid with respect to CustomRankingInfo
   */
  public static CustomRankingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomRankingInfo.class);
  }

  /**
   * Convert an instance of CustomRankingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

