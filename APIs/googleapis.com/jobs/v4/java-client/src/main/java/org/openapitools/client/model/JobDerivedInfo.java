/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Derived details about the job posting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:21.539627-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDerivedInfo {
  /**
   * Gets or Sets jobCategories
   */
  @JsonAdapter(JobCategoriesEnum.Adapter.class)
  public enum JobCategoriesEnum {
    JOB_CATEGORY_UNSPECIFIED("JOB_CATEGORY_UNSPECIFIED"),
    
    ACCOUNTING_AND_FINANCE("ACCOUNTING_AND_FINANCE"),
    
    ADMINISTRATIVE_AND_OFFICE("ADMINISTRATIVE_AND_OFFICE"),
    
    ADVERTISING_AND_MARKETING("ADVERTISING_AND_MARKETING"),
    
    ANIMAL_CARE("ANIMAL_CARE"),
    
    ART_FASHION_AND_DESIGN("ART_FASHION_AND_DESIGN"),
    
    BUSINESS_OPERATIONS("BUSINESS_OPERATIONS"),
    
    CLEANING_AND_FACILITIES("CLEANING_AND_FACILITIES"),
    
    COMPUTER_AND_IT("COMPUTER_AND_IT"),
    
    CONSTRUCTION("CONSTRUCTION"),
    
    CUSTOMER_SERVICE("CUSTOMER_SERVICE"),
    
    EDUCATION("EDUCATION"),
    
    ENTERTAINMENT_AND_TRAVEL("ENTERTAINMENT_AND_TRAVEL"),
    
    FARMING_AND_OUTDOORS("FARMING_AND_OUTDOORS"),
    
    HEALTHCARE("HEALTHCARE"),
    
    HUMAN_RESOURCES("HUMAN_RESOURCES"),
    
    INSTALLATION_MAINTENANCE_AND_REPAIR("INSTALLATION_MAINTENANCE_AND_REPAIR"),
    
    LEGAL("LEGAL"),
    
    MANAGEMENT("MANAGEMENT"),
    
    MANUFACTURING_AND_WAREHOUSE("MANUFACTURING_AND_WAREHOUSE"),
    
    MEDIA_COMMUNICATIONS_AND_WRITING("MEDIA_COMMUNICATIONS_AND_WRITING"),
    
    OIL_GAS_AND_MINING("OIL_GAS_AND_MINING"),
    
    PERSONAL_CARE_AND_SERVICES("PERSONAL_CARE_AND_SERVICES"),
    
    PROTECTIVE_SERVICES("PROTECTIVE_SERVICES"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    RESTAURANT_AND_HOSPITALITY("RESTAURANT_AND_HOSPITALITY"),
    
    SALES_AND_RETAIL("SALES_AND_RETAIL"),
    
    SCIENCE_AND_ENGINEERING("SCIENCE_AND_ENGINEERING"),
    
    SOCIAL_SERVICES_AND_NON_PROFIT("SOCIAL_SERVICES_AND_NON_PROFIT"),
    
    SPORTS_FITNESS_AND_RECREATION("SPORTS_FITNESS_AND_RECREATION"),
    
    TRANSPORTATION_AND_LOGISTICS("TRANSPORTATION_AND_LOGISTICS");

    private String value;

    JobCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobCategoriesEnum fromValue(String value) {
      for (JobCategoriesEnum b : JobCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_CATEGORIES = "jobCategories";
  @SerializedName(SERIALIZED_NAME_JOB_CATEGORIES)
  private List<JobCategoriesEnum> jobCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Location> locations = new ArrayList<>();

  public JobDerivedInfo() {
  }

  public JobDerivedInfo jobCategories(List<JobCategoriesEnum> jobCategories) {
    this.jobCategories = jobCategories;
    return this;
  }

  public JobDerivedInfo addJobCategoriesItem(JobCategoriesEnum jobCategoriesItem) {
    if (this.jobCategories == null) {
      this.jobCategories = new ArrayList<>();
    }
    this.jobCategories.add(jobCategoriesItem);
    return this;
  }

  /**
   * Job categories derived from Job.title and Job.description.
   * @return jobCategories
   */
  @javax.annotation.Nullable
  public List<JobCategoriesEnum> getJobCategories() {
    return jobCategories;
  }

  public void setJobCategories(List<JobCategoriesEnum> jobCategories) {
    this.jobCategories = jobCategories;
  }


  public JobDerivedInfo locations(List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public JobDerivedInfo addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Location> getLocations() {
    return locations;
  }

  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDerivedInfo jobDerivedInfo = (JobDerivedInfo) o;
    return Objects.equals(this.jobCategories, jobDerivedInfo.jobCategories) &&
        Objects.equals(this.locations, jobDerivedInfo.locations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobCategories, locations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDerivedInfo {\n");
    sb.append("    jobCategories: ").append(toIndentedString(jobCategories)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobCategories");
    openapiFields.add("locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDerivedInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDerivedInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDerivedInfo is not found in the empty JSON string", JobDerivedInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDerivedInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDerivedInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobCategories") != null && !jsonObj.get("jobCategories").isJsonNull() && !jsonObj.get("jobCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobCategories` to be an array in the JSON string but got `%s`", jsonObj.get("jobCategories").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDerivedInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDerivedInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDerivedInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDerivedInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDerivedInfo>() {
           @Override
           public void write(JsonWriter out, JobDerivedInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDerivedInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDerivedInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDerivedInfo
   * @throws IOException if the JSON string is invalid with respect to JobDerivedInfo
   */
  public static JobDerivedInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDerivedInfo.class);
  }

  /**
   * Convert an instance of JobDerivedInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

