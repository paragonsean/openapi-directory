/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreateJobsRequest;
import org.openapitools.client.model.BatchDeleteJobsRequest;
import org.openapitools.client.model.BatchUpdateJobsRequest;
import org.openapitools.client.model.ClientEvent;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.CompleteQueryResponse;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.ListCompaniesResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListTenantsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.SearchJobsRequest;
import org.openapitools.client.model.SearchJobsResponse;
import org.openapitools.client.model.Tenant;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Report events issued when end user interacts with customer&#39;s application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsClientEventsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientEvent clientEvent = null;
        ClientEvent response = api.jobsProjectsTenantsClientEventsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientEvent);
        // TODO: test validations
    }

    /**
     * Creates a new company entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsCompaniesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Company company = null;
        Company response = api.jobsProjectsTenantsCompaniesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, company);
        // TODO: test validations
    }

    /**
     * Lists all companies associated with the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsCompaniesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean requireOpenJobs = null;
        ListCompaniesResponse response = api.jobsProjectsTenantsCompaniesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, requireOpenJobs);
        // TODO: test validations
    }

    /**
     * Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsCompleteQueryTest() throws ApiException {
        String tenant = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String company = null;
        List<String> languageCodes = null;
        Integer pageSize = null;
        String query = null;
        String scope = null;
        String type = null;
        CompleteQueryResponse response = api.jobsProjectsTenantsCompleteQuery(tenant, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, company, languageCodes, pageSize, query, scope, type);
        // TODO: test validations
    }

    /**
     * Creates a new tenant entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Tenant tenant = null;
        Tenant response = api.jobsProjectsTenantsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tenant);
        // TODO: test validations
    }

    /**
     * Begins executing a batch create jobs operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchCreateJobsRequest batchCreateJobsRequest = null;
        Operation response = api.jobsProjectsTenantsJobsBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchCreateJobsRequest);
        // TODO: test validations
    }

    /**
     * Begins executing a batch delete jobs operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsBatchDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeleteJobsRequest batchDeleteJobsRequest = null;
        Operation response = api.jobsProjectsTenantsJobsBatchDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeleteJobsRequest);
        // TODO: test validations
    }

    /**
     * Begins executing a batch update jobs operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateJobsRequest batchUpdateJobsRequest = null;
        Operation response = api.jobsProjectsTenantsJobsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateJobsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job job = null;
        Job response = api.jobsProjectsTenantsJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, job);
        // TODO: test validations
    }

    /**
     * Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.jobsProjectsTenantsJobsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job response = api.jobsProjectsTenantsJobsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists jobs by filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String jobView = null;
        Integer pageSize = null;
        String pageToken = null;
        ListJobsResponse response = api.jobsProjectsTenantsJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, jobView, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Job job = null;
        Job response = api.jobsProjectsTenantsJobsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, job);
        // TODO: test validations
    }

    /**
     * Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsSearchTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SearchJobsRequest searchJobsRequest = null;
        SearchJobsResponse response = api.jobsProjectsTenantsJobsSearch(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchJobsRequest);
        // TODO: test validations
    }

    /**
     * Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), it has different algorithmic adjustments that are designed to specifically target passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsJobsSearchForAlertTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SearchJobsRequest searchJobsRequest = null;
        SearchJobsResponse response = api.jobsProjectsTenantsJobsSearchForAlert(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchJobsRequest);
        // TODO: test validations
    }

    /**
     * Lists all tenants associated with the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsProjectsTenantsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTenantsResponse response = api.jobsProjectsTenantsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
