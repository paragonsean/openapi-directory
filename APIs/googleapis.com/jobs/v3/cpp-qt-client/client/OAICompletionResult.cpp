/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompletionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompletionResult::OAICompletionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompletionResult::OAICompletionResult() {
    this->initializeModel();
}

OAICompletionResult::~OAICompletionResult() {}

void OAICompletionResult::initializeModel() {

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_suggestion_isSet = false;
    m_suggestion_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICompletionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompletionResult::fromJsonObject(QJsonObject json) {

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_suggestion_isValid = ::OpenAPI::fromJsonValue(m_suggestion, json[QString("suggestion")]);
    m_suggestion_isSet = !json[QString("suggestion")].isNull() && m_suggestion_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICompletionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompletionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_suggestion_isSet) {
        obj.insert(QString("suggestion"), ::OpenAPI::toJsonValue(m_suggestion));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICompletionResult::getImageUri() const {
    return m_image_uri;
}
void OAICompletionResult::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAICompletionResult::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAICompletionResult::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAICompletionResult::getSuggestion() const {
    return m_suggestion;
}
void OAICompletionResult::setSuggestion(const QString &suggestion) {
    m_suggestion = suggestion;
    m_suggestion_isSet = true;
}

bool OAICompletionResult::is_suggestion_Set() const{
    return m_suggestion_isSet;
}

bool OAICompletionResult::is_suggestion_Valid() const{
    return m_suggestion_isValid;
}

QString OAICompletionResult::getType() const {
    return m_type;
}
void OAICompletionResult::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompletionResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompletionResult::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICompletionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompletionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
