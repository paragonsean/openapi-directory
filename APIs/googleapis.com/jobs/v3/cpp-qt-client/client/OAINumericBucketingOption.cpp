/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericBucketingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericBucketingOption::OAINumericBucketingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericBucketingOption::OAINumericBucketingOption() {
    this->initializeModel();
}

OAINumericBucketingOption::~OAINumericBucketingOption() {}

void OAINumericBucketingOption::initializeModel() {

    m_bucket_bounds_isSet = false;
    m_bucket_bounds_isValid = false;

    m_requires_min_max_isSet = false;
    m_requires_min_max_isValid = false;
}

void OAINumericBucketingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericBucketingOption::fromJsonObject(QJsonObject json) {

    m_bucket_bounds_isValid = ::OpenAPI::fromJsonValue(m_bucket_bounds, json[QString("bucketBounds")]);
    m_bucket_bounds_isSet = !json[QString("bucketBounds")].isNull() && m_bucket_bounds_isValid;

    m_requires_min_max_isValid = ::OpenAPI::fromJsonValue(m_requires_min_max, json[QString("requiresMinMax")]);
    m_requires_min_max_isSet = !json[QString("requiresMinMax")].isNull() && m_requires_min_max_isValid;
}

QString OAINumericBucketingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericBucketingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_bounds.size() > 0) {
        obj.insert(QString("bucketBounds"), ::OpenAPI::toJsonValue(m_bucket_bounds));
    }
    if (m_requires_min_max_isSet) {
        obj.insert(QString("requiresMinMax"), ::OpenAPI::toJsonValue(m_requires_min_max));
    }
    return obj;
}

QList<double> OAINumericBucketingOption::getBucketBounds() const {
    return m_bucket_bounds;
}
void OAINumericBucketingOption::setBucketBounds(const QList<double> &bucket_bounds) {
    m_bucket_bounds = bucket_bounds;
    m_bucket_bounds_isSet = true;
}

bool OAINumericBucketingOption::is_bucket_bounds_Set() const{
    return m_bucket_bounds_isSet;
}

bool OAINumericBucketingOption::is_bucket_bounds_Valid() const{
    return m_bucket_bounds_isValid;
}

bool OAINumericBucketingOption::isRequiresMinMax() const {
    return m_requires_min_max;
}
void OAINumericBucketingOption::setRequiresMinMax(const bool &requires_min_max) {
    m_requires_min_max = requires_min_max;
    m_requires_min_max_isSet = true;
}

bool OAINumericBucketingOption::is_requires_min_max_Set() const{
    return m_requires_min_max_isSet;
}

bool OAINumericBucketingOption::is_requires_min_max_Valid() const{
    return m_requires_min_max_isValid;
}

bool OAINumericBucketingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_bounds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_min_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericBucketingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
