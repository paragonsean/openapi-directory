/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramResult::OAIHistogramResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramResult::OAIHistogramResult() {
    this->initializeModel();
}

OAIHistogramResult::~OAIHistogramResult() {}

void OAIHistogramResult::initializeModel() {

    m_search_type_isSet = false;
    m_search_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIHistogramResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramResult::fromJsonObject(QJsonObject json) {

    m_search_type_isValid = ::OpenAPI::fromJsonValue(m_search_type, json[QString("searchType")]);
    m_search_type_isSet = !json[QString("searchType")].isNull() && m_search_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIHistogramResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramResult::asJsonObject() const {
    QJsonObject obj;
    if (m_search_type_isSet) {
        obj.insert(QString("searchType"), ::OpenAPI::toJsonValue(m_search_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIHistogramResult::getSearchType() const {
    return m_search_type;
}
void OAIHistogramResult::setSearchType(const QString &search_type) {
    m_search_type = search_type;
    m_search_type_isSet = true;
}

bool OAIHistogramResult::is_search_type_Set() const{
    return m_search_type_isSet;
}

bool OAIHistogramResult::is_search_type_Valid() const{
    return m_search_type_isValid;
}

QMap<QString, qint32> OAIHistogramResult::getValues() const {
    return m_values;
}
void OAIHistogramResult::setValues(const QMap<QString, qint32> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIHistogramResult::is_values_Set() const{
    return m_values_isSet;
}

bool OAIHistogramResult::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIHistogramResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_search_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
