/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramResults::OAIHistogramResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramResults::OAIHistogramResults() {
    this->initializeModel();
}

OAIHistogramResults::~OAIHistogramResults() {}

void OAIHistogramResults::initializeModel() {

    m_compensation_histogram_results_isSet = false;
    m_compensation_histogram_results_isValid = false;

    m_custom_attribute_histogram_results_isSet = false;
    m_custom_attribute_histogram_results_isValid = false;

    m_simple_histogram_results_isSet = false;
    m_simple_histogram_results_isValid = false;
}

void OAIHistogramResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramResults::fromJsonObject(QJsonObject json) {

    m_compensation_histogram_results_isValid = ::OpenAPI::fromJsonValue(m_compensation_histogram_results, json[QString("compensationHistogramResults")]);
    m_compensation_histogram_results_isSet = !json[QString("compensationHistogramResults")].isNull() && m_compensation_histogram_results_isValid;

    m_custom_attribute_histogram_results_isValid = ::OpenAPI::fromJsonValue(m_custom_attribute_histogram_results, json[QString("customAttributeHistogramResults")]);
    m_custom_attribute_histogram_results_isSet = !json[QString("customAttributeHistogramResults")].isNull() && m_custom_attribute_histogram_results_isValid;

    m_simple_histogram_results_isValid = ::OpenAPI::fromJsonValue(m_simple_histogram_results, json[QString("simpleHistogramResults")]);
    m_simple_histogram_results_isSet = !json[QString("simpleHistogramResults")].isNull() && m_simple_histogram_results_isValid;
}

QString OAIHistogramResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramResults::asJsonObject() const {
    QJsonObject obj;
    if (m_compensation_histogram_results.size() > 0) {
        obj.insert(QString("compensationHistogramResults"), ::OpenAPI::toJsonValue(m_compensation_histogram_results));
    }
    if (m_custom_attribute_histogram_results.size() > 0) {
        obj.insert(QString("customAttributeHistogramResults"), ::OpenAPI::toJsonValue(m_custom_attribute_histogram_results));
    }
    if (m_simple_histogram_results.size() > 0) {
        obj.insert(QString("simpleHistogramResults"), ::OpenAPI::toJsonValue(m_simple_histogram_results));
    }
    return obj;
}

QList<OAICompensationHistogramResult> OAIHistogramResults::getCompensationHistogramResults() const {
    return m_compensation_histogram_results;
}
void OAIHistogramResults::setCompensationHistogramResults(const QList<OAICompensationHistogramResult> &compensation_histogram_results) {
    m_compensation_histogram_results = compensation_histogram_results;
    m_compensation_histogram_results_isSet = true;
}

bool OAIHistogramResults::is_compensation_histogram_results_Set() const{
    return m_compensation_histogram_results_isSet;
}

bool OAIHistogramResults::is_compensation_histogram_results_Valid() const{
    return m_compensation_histogram_results_isValid;
}

QList<OAICustomAttributeHistogramResult> OAIHistogramResults::getCustomAttributeHistogramResults() const {
    return m_custom_attribute_histogram_results;
}
void OAIHistogramResults::setCustomAttributeHistogramResults(const QList<OAICustomAttributeHistogramResult> &custom_attribute_histogram_results) {
    m_custom_attribute_histogram_results = custom_attribute_histogram_results;
    m_custom_attribute_histogram_results_isSet = true;
}

bool OAIHistogramResults::is_custom_attribute_histogram_results_Set() const{
    return m_custom_attribute_histogram_results_isSet;
}

bool OAIHistogramResults::is_custom_attribute_histogram_results_Valid() const{
    return m_custom_attribute_histogram_results_isValid;
}

QList<OAIHistogramResult> OAIHistogramResults::getSimpleHistogramResults() const {
    return m_simple_histogram_results;
}
void OAIHistogramResults::setSimpleHistogramResults(const QList<OAIHistogramResult> &simple_histogram_results) {
    m_simple_histogram_results = simple_histogram_results;
    m_simple_histogram_results_isSet = true;
}

bool OAIHistogramResults::is_simple_histogram_results_Set() const{
    return m_simple_histogram_results_isSet;
}

bool OAIHistogramResults::is_simple_histogram_results_Valid() const{
    return m_simple_histogram_results_isValid;
}

bool OAIHistogramResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compensation_histogram_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribute_histogram_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_histogram_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
