/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompensationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompensationInfo::OAICompensationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompensationInfo::OAICompensationInfo() {
    this->initializeModel();
}

OAICompensationInfo::~OAICompensationInfo() {}

void OAICompensationInfo::initializeModel() {

    m_annualized_base_compensation_range_isSet = false;
    m_annualized_base_compensation_range_isValid = false;

    m_annualized_total_compensation_range_isSet = false;
    m_annualized_total_compensation_range_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;
}

void OAICompensationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompensationInfo::fromJsonObject(QJsonObject json) {

    m_annualized_base_compensation_range_isValid = ::OpenAPI::fromJsonValue(m_annualized_base_compensation_range, json[QString("annualizedBaseCompensationRange")]);
    m_annualized_base_compensation_range_isSet = !json[QString("annualizedBaseCompensationRange")].isNull() && m_annualized_base_compensation_range_isValid;

    m_annualized_total_compensation_range_isValid = ::OpenAPI::fromJsonValue(m_annualized_total_compensation_range, json[QString("annualizedTotalCompensationRange")]);
    m_annualized_total_compensation_range_isSet = !json[QString("annualizedTotalCompensationRange")].isNull() && m_annualized_total_compensation_range_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;
}

QString OAICompensationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompensationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_annualized_base_compensation_range.isSet()) {
        obj.insert(QString("annualizedBaseCompensationRange"), ::OpenAPI::toJsonValue(m_annualized_base_compensation_range));
    }
    if (m_annualized_total_compensation_range.isSet()) {
        obj.insert(QString("annualizedTotalCompensationRange"), ::OpenAPI::toJsonValue(m_annualized_total_compensation_range));
    }
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    return obj;
}

OAICompensationRange OAICompensationInfo::getAnnualizedBaseCompensationRange() const {
    return m_annualized_base_compensation_range;
}
void OAICompensationInfo::setAnnualizedBaseCompensationRange(const OAICompensationRange &annualized_base_compensation_range) {
    m_annualized_base_compensation_range = annualized_base_compensation_range;
    m_annualized_base_compensation_range_isSet = true;
}

bool OAICompensationInfo::is_annualized_base_compensation_range_Set() const{
    return m_annualized_base_compensation_range_isSet;
}

bool OAICompensationInfo::is_annualized_base_compensation_range_Valid() const{
    return m_annualized_base_compensation_range_isValid;
}

OAICompensationRange OAICompensationInfo::getAnnualizedTotalCompensationRange() const {
    return m_annualized_total_compensation_range;
}
void OAICompensationInfo::setAnnualizedTotalCompensationRange(const OAICompensationRange &annualized_total_compensation_range) {
    m_annualized_total_compensation_range = annualized_total_compensation_range;
    m_annualized_total_compensation_range_isSet = true;
}

bool OAICompensationInfo::is_annualized_total_compensation_range_Set() const{
    return m_annualized_total_compensation_range_isSet;
}

bool OAICompensationInfo::is_annualized_total_compensation_range_Valid() const{
    return m_annualized_total_compensation_range_isValid;
}

QList<OAICompensationEntry> OAICompensationInfo::getEntries() const {
    return m_entries;
}
void OAICompensationInfo::setEntries(const QList<OAICompensationEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAICompensationInfo::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAICompensationInfo::is_entries_Valid() const{
    return m_entries_isValid;
}

bool OAICompensationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annualized_base_compensation_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annualized_total_compensation_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompensationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
