/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomAttributeHistogramResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomAttributeHistogramResult::OAICustomAttributeHistogramResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomAttributeHistogramResult::OAICustomAttributeHistogramResult() {
    this->initializeModel();
}

OAICustomAttributeHistogramResult::~OAICustomAttributeHistogramResult() {}

void OAICustomAttributeHistogramResult::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_long_value_histogram_result_isSet = false;
    m_long_value_histogram_result_isValid = false;

    m_string_value_histogram_result_isSet = false;
    m_string_value_histogram_result_isValid = false;
}

void OAICustomAttributeHistogramResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomAttributeHistogramResult::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_long_value_histogram_result_isValid = ::OpenAPI::fromJsonValue(m_long_value_histogram_result, json[QString("longValueHistogramResult")]);
    m_long_value_histogram_result_isSet = !json[QString("longValueHistogramResult")].isNull() && m_long_value_histogram_result_isValid;

    m_string_value_histogram_result_isValid = ::OpenAPI::fromJsonValue(m_string_value_histogram_result, json[QString("stringValueHistogramResult")]);
    m_string_value_histogram_result_isSet = !json[QString("stringValueHistogramResult")].isNull() && m_string_value_histogram_result_isValid;
}

QString OAICustomAttributeHistogramResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomAttributeHistogramResult::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_long_value_histogram_result.isSet()) {
        obj.insert(QString("longValueHistogramResult"), ::OpenAPI::toJsonValue(m_long_value_histogram_result));
    }
    if (m_string_value_histogram_result.size() > 0) {
        obj.insert(QString("stringValueHistogramResult"), ::OpenAPI::toJsonValue(m_string_value_histogram_result));
    }
    return obj;
}

QString OAICustomAttributeHistogramResult::getKey() const {
    return m_key;
}
void OAICustomAttributeHistogramResult::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICustomAttributeHistogramResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAICustomAttributeHistogramResult::is_key_Valid() const{
    return m_key_isValid;
}

OAINumericBucketingResult OAICustomAttributeHistogramResult::getLongValueHistogramResult() const {
    return m_long_value_histogram_result;
}
void OAICustomAttributeHistogramResult::setLongValueHistogramResult(const OAINumericBucketingResult &long_value_histogram_result) {
    m_long_value_histogram_result = long_value_histogram_result;
    m_long_value_histogram_result_isSet = true;
}

bool OAICustomAttributeHistogramResult::is_long_value_histogram_result_Set() const{
    return m_long_value_histogram_result_isSet;
}

bool OAICustomAttributeHistogramResult::is_long_value_histogram_result_Valid() const{
    return m_long_value_histogram_result_isValid;
}

QMap<QString, qint32> OAICustomAttributeHistogramResult::getStringValueHistogramResult() const {
    return m_string_value_histogram_result;
}
void OAICustomAttributeHistogramResult::setStringValueHistogramResult(const QMap<QString, qint32> &string_value_histogram_result) {
    m_string_value_histogram_result = string_value_histogram_result;
    m_string_value_histogram_result_isSet = true;
}

bool OAICustomAttributeHistogramResult::is_string_value_histogram_result_Set() const{
    return m_string_value_histogram_result_isSet;
}

bool OAICustomAttributeHistogramResult::is_string_value_histogram_result_Valid() const{
    return m_string_value_histogram_result_isValid;
}

bool OAICustomAttributeHistogramResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_histogram_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_histogram_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomAttributeHistogramResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
