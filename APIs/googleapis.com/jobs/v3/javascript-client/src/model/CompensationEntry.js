/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompensationRange from './CompensationRange';
import Money from './Money';

/**
 * The CompensationEntry model module.
 * @module model/CompensationEntry
 * @version v3
 */
class CompensationEntry {
    /**
     * Constructs a new <code>CompensationEntry</code>.
     * A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
     * @alias module:model/CompensationEntry
     */
    constructor() { 
        
        CompensationEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompensationEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompensationEntry} obj Optional instance to populate.
     * @return {module:model/CompensationEntry} The populated <code>CompensationEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompensationEntry();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Money.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expectedUnitsPerYear')) {
                obj['expectedUnitsPerYear'] = ApiClient.convertToType(data['expectedUnitsPerYear'], 'Number');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = CompensationRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompensationEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompensationEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Money.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          CompensationRange.validateJSON(data['range']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount
 */
CompensationEntry.prototype['amount'] = undefined;

/**
 * Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
 * @member {String} description
 */
CompensationEntry.prototype['description'] = undefined;

/**
 * Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
 * @member {Number} expectedUnitsPerYear
 */
CompensationEntry.prototype['expectedUnitsPerYear'] = undefined;

/**
 * @member {module:model/CompensationRange} range
 */
CompensationEntry.prototype['range'] = undefined;

/**
 * Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
 * @member {module:model/CompensationEntry.TypeEnum} type
 */
CompensationEntry.prototype['type'] = undefined;

/**
 * Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
 * @member {module:model/CompensationEntry.UnitEnum} unit
 */
CompensationEntry.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CompensationEntry['TypeEnum'] = {

    /**
     * value: "COMPENSATION_TYPE_UNSPECIFIED"
     * @const
     */
    "COMPENSATION_TYPE_UNSPECIFIED": "COMPENSATION_TYPE_UNSPECIFIED",

    /**
     * value: "BASE"
     * @const
     */
    "BASE": "BASE",

    /**
     * value: "BONUS"
     * @const
     */
    "BONUS": "BONUS",

    /**
     * value: "SIGNING_BONUS"
     * @const
     */
    "SIGNING_BONUS": "SIGNING_BONUS",

    /**
     * value: "EQUITY"
     * @const
     */
    "EQUITY": "EQUITY",

    /**
     * value: "PROFIT_SHARING"
     * @const
     */
    "PROFIT_SHARING": "PROFIT_SHARING",

    /**
     * value: "COMMISSIONS"
     * @const
     */
    "COMMISSIONS": "COMMISSIONS",

    /**
     * value: "TIPS"
     * @const
     */
    "TIPS": "TIPS",

    /**
     * value: "OTHER_COMPENSATION_TYPE"
     * @const
     */
    "OTHER_COMPENSATION_TYPE": "OTHER_COMPENSATION_TYPE"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
CompensationEntry['UnitEnum'] = {

    /**
     * value: "COMPENSATION_UNIT_UNSPECIFIED"
     * @const
     */
    "COMPENSATION_UNIT_UNSPECIFIED": "COMPENSATION_UNIT_UNSPECIFIED",

    /**
     * value: "HOURLY"
     * @const
     */
    "HOURLY": "HOURLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "YEARLY"
     * @const
     */
    "YEARLY": "YEARLY",

    /**
     * value: "ONE_TIME"
     * @const
     */
    "ONE_TIME": "ONE_TIME",

    /**
     * value: "OTHER_COMPENSATION_UNIT"
     * @const
     */
    "OTHER_COMPENSATION_UNIT": "OTHER_COMPENSATION_UNIT"
};



export default CompensationEntry;

