/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobEvent from './JobEvent';

/**
 * The ClientEvent model module.
 * @module model/ClientEvent
 * @version v3
 */
class ClientEvent {
    /**
     * Constructs a new <code>ClientEvent</code>.
     * An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
     * @alias module:model/ClientEvent
     */
    constructor() { 
        
        ClientEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientEvent} obj Optional instance to populate.
     * @return {module:model/ClientEvent} The populated <code>ClientEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientEvent();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('extraInfo')) {
                obj['extraInfo'] = ApiClient.convertToType(data['extraInfo'], {'String': 'String'});
            }
            if (data.hasOwnProperty('jobEvent')) {
                obj['jobEvent'] = JobEvent.constructFromObject(data['jobEvent']);
            }
            if (data.hasOwnProperty('parentEventId')) {
                obj['parentEventId'] = ApiClient.convertToType(data['parentEventId'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // validate the optional field `jobEvent`
        if (data['jobEvent']) { // data not null
          JobEvent.validateJSON(data['jobEvent']);
        }
        // ensure the json data is a string
        if (data['parentEventId'] && !(typeof data['parentEventId'] === 'string' || data['parentEventId'] instanceof String)) {
            throw new Error("Expected the field `parentEventId` to be a primitive type in the JSON string but got " + data['parentEventId']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * Required. The timestamp of the event.
 * @member {String} createTime
 */
ClientEvent.prototype['createTime'] = undefined;

/**
 * Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).
 * @member {String} eventId
 */
ClientEvent.prototype['eventId'] = undefined;

/**
 * Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.
 * @member {Object.<String, String>} extraInfo
 */
ClientEvent.prototype['extraInfo'] = undefined;

/**
 * @member {module:model/JobEvent} jobEvent
 */
ClientEvent.prototype['jobEvent'] = undefined;

/**
 * Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).
 * @member {String} parentEventId
 */
ClientEvent.prototype['parentEventId'] = undefined;

/**
 * Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.
 * @member {String} requestId
 */
ClientEvent.prototype['requestId'] = undefined;






export default ClientEvent;

