/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NumericBucketingOption from './NumericBucketingOption';

/**
 * The CompensationHistogramRequest model module.
 * @module model/CompensationHistogramRequest
 * @version v3
 */
class CompensationHistogramRequest {
    /**
     * Constructs a new <code>CompensationHistogramRequest</code>.
     * Input only. Compensation based histogram request.
     * @alias module:model/CompensationHistogramRequest
     */
    constructor() { 
        
        CompensationHistogramRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompensationHistogramRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompensationHistogramRequest} obj Optional instance to populate.
     * @return {module:model/CompensationHistogramRequest} The populated <code>CompensationHistogramRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompensationHistogramRequest();

            if (data.hasOwnProperty('bucketingOption')) {
                obj['bucketingOption'] = NumericBucketingOption.constructFromObject(data['bucketingOption']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompensationHistogramRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompensationHistogramRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bucketingOption`
        if (data['bucketingOption']) { // data not null
          NumericBucketingOption.validateJSON(data['bucketingOption']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/NumericBucketingOption} bucketingOption
 */
CompensationHistogramRequest.prototype['bucketingOption'] = undefined;

/**
 * Required. Type of the request, representing which field the histogramming should be performed over. A single request can only specify one histogram of each `CompensationHistogramRequestType`.
 * @member {module:model/CompensationHistogramRequest.TypeEnum} type
 */
CompensationHistogramRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CompensationHistogramRequest['TypeEnum'] = {

    /**
     * value: "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED"
     * @const
     */
    "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED": "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED",

    /**
     * value: "BASE"
     * @const
     */
    "BASE": "BASE",

    /**
     * value: "ANNUALIZED_BASE"
     * @const
     */
    "ANNUALIZED_BASE": "ANNUALIZED_BASE",

    /**
     * value: "ANNUALIZED_TOTAL"
     * @const
     */
    "ANNUALIZED_TOTAL": "ANNUALIZED_TOTAL"
};



export default CompensationHistogramRequest;

