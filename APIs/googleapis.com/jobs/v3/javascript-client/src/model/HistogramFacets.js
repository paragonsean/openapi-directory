/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompensationHistogramRequest from './CompensationHistogramRequest';
import CustomAttributeHistogramRequest from './CustomAttributeHistogramRequest';

/**
 * The HistogramFacets model module.
 * @module model/HistogramFacets
 * @version v3
 */
class HistogramFacets {
    /**
     * Constructs a new <code>HistogramFacets</code>.
     * Input only. Histogram facets to be specified in SearchJobsRequest.
     * @alias module:model/HistogramFacets
     */
    constructor() { 
        
        HistogramFacets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistogramFacets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistogramFacets} obj Optional instance to populate.
     * @return {module:model/HistogramFacets} The populated <code>HistogramFacets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistogramFacets();

            if (data.hasOwnProperty('compensationHistogramFacets')) {
                obj['compensationHistogramFacets'] = ApiClient.convertToType(data['compensationHistogramFacets'], [CompensationHistogramRequest]);
            }
            if (data.hasOwnProperty('customAttributeHistogramFacets')) {
                obj['customAttributeHistogramFacets'] = ApiClient.convertToType(data['customAttributeHistogramFacets'], [CustomAttributeHistogramRequest]);
            }
            if (data.hasOwnProperty('simpleHistogramFacets')) {
                obj['simpleHistogramFacets'] = ApiClient.convertToType(data['simpleHistogramFacets'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistogramFacets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistogramFacets</code>.
     */
    static validateJSON(data) {
        if (data['compensationHistogramFacets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['compensationHistogramFacets'])) {
                throw new Error("Expected the field `compensationHistogramFacets` to be an array in the JSON data but got " + data['compensationHistogramFacets']);
            }
            // validate the optional field `compensationHistogramFacets` (array)
            for (const item of data['compensationHistogramFacets']) {
                CompensationHistogramRequest.validateJSON(item);
            };
        }
        if (data['customAttributeHistogramFacets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customAttributeHistogramFacets'])) {
                throw new Error("Expected the field `customAttributeHistogramFacets` to be an array in the JSON data but got " + data['customAttributeHistogramFacets']);
            }
            // validate the optional field `customAttributeHistogramFacets` (array)
            for (const item of data['customAttributeHistogramFacets']) {
                CustomAttributeHistogramRequest.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['simpleHistogramFacets'])) {
            throw new Error("Expected the field `simpleHistogramFacets` to be an array in the JSON data but got " + data['simpleHistogramFacets']);
        }

        return true;
    }


}



/**
 * Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.
 * @member {Array.<module:model/CompensationHistogramRequest>} compensationHistogramFacets
 */
HistogramFacets.prototype['compensationHistogramFacets'] = undefined;

/**
 * Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.
 * @member {Array.<module:model/CustomAttributeHistogramRequest>} customAttributeHistogramFacets
 */
HistogramFacets.prototype['customAttributeHistogramFacets'] = undefined;

/**
 * Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.
 * @member {Array.<module:model/HistogramFacets.SimpleHistogramFacetsEnum>} simpleHistogramFacets
 */
HistogramFacets.prototype['simpleHistogramFacets'] = undefined;





/**
 * Allowed values for the <code>simpleHistogramFacets</code> property.
 * @enum {String}
 * @readonly
 */
HistogramFacets['SimpleHistogramFacetsEnum'] = {

    /**
     * value: "SEARCH_TYPE_UNSPECIFIED"
     * @const
     */
    "SEARCH_TYPE_UNSPECIFIED": "SEARCH_TYPE_UNSPECIFIED",

    /**
     * value: "COMPANY_ID"
     * @const
     */
    "COMPANY_ID": "COMPANY_ID",

    /**
     * value: "EMPLOYMENT_TYPE"
     * @const
     */
    "EMPLOYMENT_TYPE": "EMPLOYMENT_TYPE",

    /**
     * value: "COMPANY_SIZE"
     * @const
     */
    "COMPANY_SIZE": "COMPANY_SIZE",

    /**
     * value: "DATE_PUBLISHED"
     * @const
     */
    "DATE_PUBLISHED": "DATE_PUBLISHED",

    /**
     * value: "EDUCATION_LEVEL"
     * @const
     */
    "EDUCATION_LEVEL": "EDUCATION_LEVEL",

    /**
     * value: "EXPERIENCE_LEVEL"
     * @const
     */
    "EXPERIENCE_LEVEL": "EXPERIENCE_LEVEL",

    /**
     * value: "ADMIN_1"
     * @const
     */
    "ADMIN_1": "ADMIN_1",

    /**
     * value: "COUNTRY"
     * @const
     */
    "COUNTRY": "COUNTRY",

    /**
     * value: "CITY"
     * @const
     */
    "CITY": "CITY",

    /**
     * value: "LOCALE"
     * @const
     */
    "LOCALE": "LOCALE",

    /**
     * value: "LANGUAGE"
     * @const
     */
    "LANGUAGE": "LANGUAGE",

    /**
     * value: "CATEGORY"
     * @const
     */
    "CATEGORY": "CATEGORY",

    /**
     * value: "CITY_COORDINATE"
     * @const
     */
    "CITY_COORDINATE": "CITY_COORDINATE",

    /**
     * value: "ADMIN_1_COUNTRY"
     * @const
     */
    "ADMIN_1_COUNTRY": "ADMIN_1_COUNTRY",

    /**
     * value: "COMPANY_DISPLAY_NAME"
     * @const
     */
    "COMPANY_DISPLAY_NAME": "COMPANY_DISPLAY_NAME",

    /**
     * value: "BASE_COMPENSATION_UNIT"
     * @const
     */
    "BASE_COMPENSATION_UNIT": "BASE_COMPENSATION_UNIT"
};



export default HistogramFacets;

