/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyDerivedInfo from './CompanyDerivedInfo';

/**
 * The Company model module.
 * @module model/Company
 * @version v3
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
     * @alias module:model/Company
     */
    constructor() { 
        
        Company.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Company} obj Optional instance to populate.
     * @return {module:model/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('careerSiteUri')) {
                obj['careerSiteUri'] = ApiClient.convertToType(data['careerSiteUri'], 'String');
            }
            if (data.hasOwnProperty('derivedInfo')) {
                obj['derivedInfo'] = CompanyDerivedInfo.constructFromObject(data['derivedInfo']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eeoText')) {
                obj['eeoText'] = ApiClient.convertToType(data['eeoText'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('headquartersAddress')) {
                obj['headquartersAddress'] = ApiClient.convertToType(data['headquartersAddress'], 'String');
            }
            if (data.hasOwnProperty('hiringAgency')) {
                obj['hiringAgency'] = ApiClient.convertToType(data['hiringAgency'], 'Boolean');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('keywordSearchableJobCustomAttributes')) {
                obj['keywordSearchableJobCustomAttributes'] = ApiClient.convertToType(data['keywordSearchableJobCustomAttributes'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('websiteUri')) {
                obj['websiteUri'] = ApiClient.convertToType(data['websiteUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['careerSiteUri'] && !(typeof data['careerSiteUri'] === 'string' || data['careerSiteUri'] instanceof String)) {
            throw new Error("Expected the field `careerSiteUri` to be a primitive type in the JSON string but got " + data['careerSiteUri']);
        }
        // validate the optional field `derivedInfo`
        if (data['derivedInfo']) { // data not null
          CompanyDerivedInfo.validateJSON(data['derivedInfo']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eeoText'] && !(typeof data['eeoText'] === 'string' || data['eeoText'] instanceof String)) {
            throw new Error("Expected the field `eeoText` to be a primitive type in the JSON string but got " + data['eeoText']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['headquartersAddress'] && !(typeof data['headquartersAddress'] === 'string' || data['headquartersAddress'] instanceof String)) {
            throw new Error("Expected the field `headquartersAddress` to be a primitive type in the JSON string but got " + data['headquartersAddress']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywordSearchableJobCustomAttributes'])) {
            throw new Error("Expected the field `keywordSearchableJobCustomAttributes` to be an array in the JSON data but got " + data['keywordSearchableJobCustomAttributes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['websiteUri'] && !(typeof data['websiteUri'] === 'string' || data['websiteUri'] instanceof String)) {
            throw new Error("Expected the field `websiteUri` to be a primitive type in the JSON string but got " + data['websiteUri']);
        }

        return true;
    }


}



/**
 * Optional. The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\".
 * @member {String} careerSiteUri
 */
Company.prototype['careerSiteUri'] = undefined;

/**
 * @member {module:model/CompanyDerivedInfo} derivedInfo
 */
Company.prototype['derivedInfo'] = undefined;

/**
 * Required. The display name of the company, for example, \"Google LLC\".
 * @member {String} displayName
 */
Company.prototype['displayName'] = undefined;

/**
 * Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.
 * @member {String} eeoText
 */
Company.prototype['eeoText'] = undefined;

/**
 * Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.
 * @member {String} externalId
 */
Company.prototype['externalId'] = undefined;

/**
 * Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.
 * @member {String} headquartersAddress
 */
Company.prototype['headquartersAddress'] = undefined;

/**
 * Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.
 * @member {Boolean} hiringAgency
 */
Company.prototype['hiringAgency'] = undefined;

/**
 * Optional. A URI that hosts the employer's company logo.
 * @member {String} imageUri
 */
Company.prototype['imageUri'] = undefined;

/**
 * Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.
 * @member {Array.<String>} keywordSearchableJobCustomAttributes
 */
Company.prototype['keywordSearchableJobCustomAttributes'] = undefined;

/**
 * Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\".
 * @member {String} name
 */
Company.prototype['name'] = undefined;

/**
 * Optional. The employer's company size.
 * @member {module:model/Company.SizeEnum} size
 */
Company.prototype['size'] = undefined;

/**
 * Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.
 * @member {Boolean} suspended
 */
Company.prototype['suspended'] = undefined;

/**
 * Optional. The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255.
 * @member {String} websiteUri
 */
Company.prototype['websiteUri'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
Company['SizeEnum'] = {

    /**
     * value: "COMPANY_SIZE_UNSPECIFIED"
     * @const
     */
    "COMPANY_SIZE_UNSPECIFIED": "COMPANY_SIZE_UNSPECIFIED",

    /**
     * value: "MINI"
     * @const
     */
    "MINI": "MINI",

    /**
     * value: "SMALL"
     * @const
     */
    "SMALL": "SMALL",

    /**
     * value: "SMEDIUM"
     * @const
     */
    "SMEDIUM": "SMEDIUM",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "BIG"
     * @const
     */
    "BIG": "BIG",

    /**
     * value: "BIGGER"
     * @const
     */
    "BIGGER": "BIGGER",

    /**
     * value: "GIANT"
     * @const
     */
    "GIANT": "GIANT"
};



export default Company;

