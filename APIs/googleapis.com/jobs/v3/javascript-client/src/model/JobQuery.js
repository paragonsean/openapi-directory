/**
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommuteFilter from './CommuteFilter';
import CompensationFilter from './CompensationFilter';
import LocationFilter from './LocationFilter';
import TimestampRange from './TimestampRange';

/**
 * The JobQuery model module.
 * @module model/JobQuery
 * @version v3
 */
class JobQuery {
    /**
     * Constructs a new <code>JobQuery</code>.
     * Input only. The query required to perform a search query.
     * @alias module:model/JobQuery
     */
    constructor() { 
        
        JobQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobQuery} obj Optional instance to populate.
     * @return {module:model/JobQuery} The populated <code>JobQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobQuery();

            if (data.hasOwnProperty('commuteFilter')) {
                obj['commuteFilter'] = CommuteFilter.constructFromObject(data['commuteFilter']);
            }
            if (data.hasOwnProperty('companyDisplayNames')) {
                obj['companyDisplayNames'] = ApiClient.convertToType(data['companyDisplayNames'], ['String']);
            }
            if (data.hasOwnProperty('companyNames')) {
                obj['companyNames'] = ApiClient.convertToType(data['companyNames'], ['String']);
            }
            if (data.hasOwnProperty('compensationFilter')) {
                obj['compensationFilter'] = CompensationFilter.constructFromObject(data['compensationFilter']);
            }
            if (data.hasOwnProperty('customAttributeFilter')) {
                obj['customAttributeFilter'] = ApiClient.convertToType(data['customAttributeFilter'], 'String');
            }
            if (data.hasOwnProperty('disableSpellCheck')) {
                obj['disableSpellCheck'] = ApiClient.convertToType(data['disableSpellCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('employmentTypes')) {
                obj['employmentTypes'] = ApiClient.convertToType(data['employmentTypes'], ['String']);
            }
            if (data.hasOwnProperty('jobCategories')) {
                obj['jobCategories'] = ApiClient.convertToType(data['jobCategories'], ['String']);
            }
            if (data.hasOwnProperty('languageCodes')) {
                obj['languageCodes'] = ApiClient.convertToType(data['languageCodes'], ['String']);
            }
            if (data.hasOwnProperty('locationFilters')) {
                obj['locationFilters'] = ApiClient.convertToType(data['locationFilters'], [LocationFilter]);
            }
            if (data.hasOwnProperty('publishTimeRange')) {
                obj['publishTimeRange'] = TimestampRange.constructFromObject(data['publishTimeRange']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('queryLanguageCode')) {
                obj['queryLanguageCode'] = ApiClient.convertToType(data['queryLanguageCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `commuteFilter`
        if (data['commuteFilter']) { // data not null
          CommuteFilter.validateJSON(data['commuteFilter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['companyDisplayNames'])) {
            throw new Error("Expected the field `companyDisplayNames` to be an array in the JSON data but got " + data['companyDisplayNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['companyNames'])) {
            throw new Error("Expected the field `companyNames` to be an array in the JSON data but got " + data['companyNames']);
        }
        // validate the optional field `compensationFilter`
        if (data['compensationFilter']) { // data not null
          CompensationFilter.validateJSON(data['compensationFilter']);
        }
        // ensure the json data is a string
        if (data['customAttributeFilter'] && !(typeof data['customAttributeFilter'] === 'string' || data['customAttributeFilter'] instanceof String)) {
            throw new Error("Expected the field `customAttributeFilter` to be a primitive type in the JSON string but got " + data['customAttributeFilter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['employmentTypes'])) {
            throw new Error("Expected the field `employmentTypes` to be an array in the JSON data but got " + data['employmentTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jobCategories'])) {
            throw new Error("Expected the field `jobCategories` to be an array in the JSON data but got " + data['jobCategories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languageCodes'])) {
            throw new Error("Expected the field `languageCodes` to be an array in the JSON data but got " + data['languageCodes']);
        }
        if (data['locationFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locationFilters'])) {
                throw new Error("Expected the field `locationFilters` to be an array in the JSON data but got " + data['locationFilters']);
            }
            // validate the optional field `locationFilters` (array)
            for (const item of data['locationFilters']) {
                LocationFilter.validateJSON(item);
            };
        }
        // validate the optional field `publishTimeRange`
        if (data['publishTimeRange']) { // data not null
          TimestampRange.validateJSON(data['publishTimeRange']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['queryLanguageCode'] && !(typeof data['queryLanguageCode'] === 'string' || data['queryLanguageCode'] instanceof String)) {
            throw new Error("Expected the field `queryLanguageCode` to be a primitive type in the JSON string but got " + data['queryLanguageCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommuteFilter} commuteFilter
 */
JobQuery.prototype['commuteFilter'] = undefined;

/**
 * Optional. This filter specifies the company Company.display_name of the jobs to search against. The company name must match the value exactly. Alternatively, the value being searched for can be wrapped in different match operators. `SUBSTRING_MATCH([value])` The company name must contain a case insensitive substring match of the value. Using this function may increase latency. Sample Value: `SUBSTRING_MATCH(google)` `MULTI_WORD_TOKEN_MATCH([value])` The value will be treated as a multi word token and the company name must contain a case insensitive match of the value. Using this function may increase latency. Sample Value: `MULTI_WORD_TOKEN_MATCH(google)` If a value isn't specified, jobs within the search results are associated with any company. If multiple values are specified, jobs within the search results may be associated with any of the specified companies. At most 20 company display name filters are allowed.
 * @member {Array.<String>} companyDisplayNames
 */
JobQuery.prototype['companyDisplayNames'] = undefined;

/**
 * Optional. This filter specifies the company entities to search against. If a value isn't specified, jobs are searched for against all companies. If multiple values are specified, jobs are searched against the companies specified. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\". At most 20 company filters are allowed.
 * @member {Array.<String>} companyNames
 */
JobQuery.prototype['companyNames'] = undefined;

/**
 * @member {module:model/CompensationFilter} compensationFilter
 */
JobQuery.prototype['compensationFilter'] = undefined;

/**
 * Optional. This filter specifies a structured syntax to match against the Job.custom_attributes marked as `filterable`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left of the operator is a custom field key and the right of the operator is a number or a quoted string. You must escape backslash (\\\\) and quote (\\\") characters. Supported functions are `LOWER([field_name])` to perform a case insensitive match and `EMPTY([field_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, \"((A AND B AND C) OR NOT D) AND E\"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 10000 bytes in length. Sample Query: `(LOWER(driving_license)=\"class \\\"a\\\"\" OR EMPTY(driving_license)) AND driving_years > 10`
 * @member {String} customAttributeFilter
 */
JobQuery.prototype['customAttributeFilter'] = undefined;

/**
 * Optional. This flag controls the spell-check feature. If false, the service attempts to correct a misspelled query, for example, \"enginee\" is corrected to \"engineer\". Defaults to false: a spell check is performed.
 * @member {Boolean} disableSpellCheck
 */
JobQuery.prototype['disableSpellCheck'] = undefined;

/**
 * Optional. The employment type filter specifies the employment type of jobs to search against, such as EmploymentType.FULL_TIME. If a value is not specified, jobs in the search results includes any employment type. If multiple values are specified, jobs in the search results include any of the specified employment types.
 * @member {Array.<module:model/JobQuery.EmploymentTypesEnum>} employmentTypes
 */
JobQuery.prototype['employmentTypes'] = undefined;

/**
 * Optional. The category filter specifies the categories of jobs to search against. See Category for more information. If a value is not specified, jobs from any category are searched against. If multiple values are specified, jobs from any of the specified categories are searched against.
 * @member {Array.<module:model/JobQuery.JobCategoriesEnum>} jobCategories
 */
JobQuery.prototype['jobCategories'] = undefined;

/**
 * Optional. This filter specifies the locale of jobs to search against, for example, \"en-US\". If a value isn't specified, the search results can contain jobs in any locale. Language codes should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). At most 10 language code filters are allowed.
 * @member {Array.<String>} languageCodes
 */
JobQuery.prototype['languageCodes'] = undefined;

/**
 * Optional. The location filter specifies geo-regions containing the jobs to search against. See LocationFilter for more information. If a location value isn't specified, jobs fitting the other search criteria are retrieved regardless of where they're located. If multiple values are specified, jobs are retrieved from any of the specified locations. If different values are specified for the LocationFilter.distance_in_miles parameter, the maximum provided distance is used for all locations. At most 5 location filters are allowed.
 * @member {Array.<module:model/LocationFilter>} locationFilters
 */
JobQuery.prototype['locationFilters'] = undefined;

/**
 * @member {module:model/TimestampRange} publishTimeRange
 */
JobQuery.prototype['publishTimeRange'] = undefined;

/**
 * Optional. The query string that matches against the job title, description, and location fields. The maximum number of allowed characters is 255.
 * @member {String} query
 */
JobQuery.prototype['query'] = undefined;

/**
 * The language code of query. For example, \"en-US\". This field helps to better interpret the query. If a value isn't specified, the query language code is automatically detected, which may not be accurate. Language code should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
 * @member {String} queryLanguageCode
 */
JobQuery.prototype['queryLanguageCode'] = undefined;





/**
 * Allowed values for the <code>employmentTypes</code> property.
 * @enum {String}
 * @readonly
 */
JobQuery['EmploymentTypesEnum'] = {

    /**
     * value: "EMPLOYMENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EMPLOYMENT_TYPE_UNSPECIFIED": "EMPLOYMENT_TYPE_UNSPECIFIED",

    /**
     * value: "FULL_TIME"
     * @const
     */
    "FULL_TIME": "FULL_TIME",

    /**
     * value: "PART_TIME"
     * @const
     */
    "PART_TIME": "PART_TIME",

    /**
     * value: "CONTRACTOR"
     * @const
     */
    "CONTRACTOR": "CONTRACTOR",

    /**
     * value: "CONTRACT_TO_HIRE"
     * @const
     */
    "CONTRACT_TO_HIRE": "CONTRACT_TO_HIRE",

    /**
     * value: "TEMPORARY"
     * @const
     */
    "TEMPORARY": "TEMPORARY",

    /**
     * value: "INTERN"
     * @const
     */
    "INTERN": "INTERN",

    /**
     * value: "VOLUNTEER"
     * @const
     */
    "VOLUNTEER": "VOLUNTEER",

    /**
     * value: "PER_DIEM"
     * @const
     */
    "PER_DIEM": "PER_DIEM",

    /**
     * value: "FLY_IN_FLY_OUT"
     * @const
     */
    "FLY_IN_FLY_OUT": "FLY_IN_FLY_OUT",

    /**
     * value: "OTHER_EMPLOYMENT_TYPE"
     * @const
     */
    "OTHER_EMPLOYMENT_TYPE": "OTHER_EMPLOYMENT_TYPE"
};


/**
 * Allowed values for the <code>jobCategories</code> property.
 * @enum {String}
 * @readonly
 */
JobQuery['JobCategoriesEnum'] = {

    /**
     * value: "JOB_CATEGORY_UNSPECIFIED"
     * @const
     */
    "JOB_CATEGORY_UNSPECIFIED": "JOB_CATEGORY_UNSPECIFIED",

    /**
     * value: "ACCOUNTING_AND_FINANCE"
     * @const
     */
    "ACCOUNTING_AND_FINANCE": "ACCOUNTING_AND_FINANCE",

    /**
     * value: "ADMINISTRATIVE_AND_OFFICE"
     * @const
     */
    "ADMINISTRATIVE_AND_OFFICE": "ADMINISTRATIVE_AND_OFFICE",

    /**
     * value: "ADVERTISING_AND_MARKETING"
     * @const
     */
    "ADVERTISING_AND_MARKETING": "ADVERTISING_AND_MARKETING",

    /**
     * value: "ANIMAL_CARE"
     * @const
     */
    "ANIMAL_CARE": "ANIMAL_CARE",

    /**
     * value: "ART_FASHION_AND_DESIGN"
     * @const
     */
    "ART_FASHION_AND_DESIGN": "ART_FASHION_AND_DESIGN",

    /**
     * value: "BUSINESS_OPERATIONS"
     * @const
     */
    "BUSINESS_OPERATIONS": "BUSINESS_OPERATIONS",

    /**
     * value: "CLEANING_AND_FACILITIES"
     * @const
     */
    "CLEANING_AND_FACILITIES": "CLEANING_AND_FACILITIES",

    /**
     * value: "COMPUTER_AND_IT"
     * @const
     */
    "COMPUTER_AND_IT": "COMPUTER_AND_IT",

    /**
     * value: "CONSTRUCTION"
     * @const
     */
    "CONSTRUCTION": "CONSTRUCTION",

    /**
     * value: "CUSTOMER_SERVICE"
     * @const
     */
    "CUSTOMER_SERVICE": "CUSTOMER_SERVICE",

    /**
     * value: "EDUCATION"
     * @const
     */
    "EDUCATION": "EDUCATION",

    /**
     * value: "ENTERTAINMENT_AND_TRAVEL"
     * @const
     */
    "ENTERTAINMENT_AND_TRAVEL": "ENTERTAINMENT_AND_TRAVEL",

    /**
     * value: "FARMING_AND_OUTDOORS"
     * @const
     */
    "FARMING_AND_OUTDOORS": "FARMING_AND_OUTDOORS",

    /**
     * value: "HEALTHCARE"
     * @const
     */
    "HEALTHCARE": "HEALTHCARE",

    /**
     * value: "HUMAN_RESOURCES"
     * @const
     */
    "HUMAN_RESOURCES": "HUMAN_RESOURCES",

    /**
     * value: "INSTALLATION_MAINTENANCE_AND_REPAIR"
     * @const
     */
    "INSTALLATION_MAINTENANCE_AND_REPAIR": "INSTALLATION_MAINTENANCE_AND_REPAIR",

    /**
     * value: "LEGAL"
     * @const
     */
    "LEGAL": "LEGAL",

    /**
     * value: "MANAGEMENT"
     * @const
     */
    "MANAGEMENT": "MANAGEMENT",

    /**
     * value: "MANUFACTURING_AND_WAREHOUSE"
     * @const
     */
    "MANUFACTURING_AND_WAREHOUSE": "MANUFACTURING_AND_WAREHOUSE",

    /**
     * value: "MEDIA_COMMUNICATIONS_AND_WRITING"
     * @const
     */
    "MEDIA_COMMUNICATIONS_AND_WRITING": "MEDIA_COMMUNICATIONS_AND_WRITING",

    /**
     * value: "OIL_GAS_AND_MINING"
     * @const
     */
    "OIL_GAS_AND_MINING": "OIL_GAS_AND_MINING",

    /**
     * value: "PERSONAL_CARE_AND_SERVICES"
     * @const
     */
    "PERSONAL_CARE_AND_SERVICES": "PERSONAL_CARE_AND_SERVICES",

    /**
     * value: "PROTECTIVE_SERVICES"
     * @const
     */
    "PROTECTIVE_SERVICES": "PROTECTIVE_SERVICES",

    /**
     * value: "REAL_ESTATE"
     * @const
     */
    "REAL_ESTATE": "REAL_ESTATE",

    /**
     * value: "RESTAURANT_AND_HOSPITALITY"
     * @const
     */
    "RESTAURANT_AND_HOSPITALITY": "RESTAURANT_AND_HOSPITALITY",

    /**
     * value: "SALES_AND_RETAIL"
     * @const
     */
    "SALES_AND_RETAIL": "SALES_AND_RETAIL",

    /**
     * value: "SCIENCE_AND_ENGINEERING"
     * @const
     */
    "SCIENCE_AND_ENGINEERING": "SCIENCE_AND_ENGINEERING",

    /**
     * value: "SOCIAL_SERVICES_AND_NON_PROFIT"
     * @const
     */
    "SOCIAL_SERVICES_AND_NON_PROFIT": "SOCIAL_SERVICES_AND_NON_PROFIT",

    /**
     * value: "SPORTS_FITNESS_AND_RECREATION"
     * @const
     */
    "SPORTS_FITNESS_AND_RECREATION": "SPORTS_FITNESS_AND_RECREATION",

    /**
     * value: "TRANSPORTATION_AND_LOGISTICS"
     * @const
     */
    "TRANSPORTATION_AND_LOGISTICS": "TRANSPORTATION_AND_LOGISTICS"
};



export default JobQuery;

