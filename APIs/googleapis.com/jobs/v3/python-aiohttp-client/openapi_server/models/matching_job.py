# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commute_info import CommuteInfo
from openapi_server.models.job import Job
from openapi_server import util


class MatchingJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commute_info: CommuteInfo=None, job: Job=None, job_summary: str=None, job_title_snippet: str=None, search_text_snippet: str=None):
        """MatchingJob - a model defined in OpenAPI

        :param commute_info: The commute_info of this MatchingJob.
        :param job: The job of this MatchingJob.
        :param job_summary: The job_summary of this MatchingJob.
        :param job_title_snippet: The job_title_snippet of this MatchingJob.
        :param search_text_snippet: The search_text_snippet of this MatchingJob.
        """
        self.openapi_types = {
            'commute_info': CommuteInfo,
            'job': Job,
            'job_summary': str,
            'job_title_snippet': str,
            'search_text_snippet': str
        }

        self.attribute_map = {
            'commute_info': 'commuteInfo',
            'job': 'job',
            'job_summary': 'jobSummary',
            'job_title_snippet': 'jobTitleSnippet',
            'search_text_snippet': 'searchTextSnippet'
        }

        self._commute_info = commute_info
        self._job = job
        self._job_summary = job_summary
        self._job_title_snippet = job_title_snippet
        self._search_text_snippet = search_text_snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchingJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchingJob of this MatchingJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commute_info(self):
        """Gets the commute_info of this MatchingJob.


        :return: The commute_info of this MatchingJob.
        :rtype: CommuteInfo
        """
        return self._commute_info

    @commute_info.setter
    def commute_info(self, commute_info):
        """Sets the commute_info of this MatchingJob.


        :param commute_info: The commute_info of this MatchingJob.
        :type commute_info: CommuteInfo
        """

        self._commute_info = commute_info

    @property
    def job(self):
        """Gets the job of this MatchingJob.


        :return: The job of this MatchingJob.
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this MatchingJob.


        :param job: The job of this MatchingJob.
        :type job: Job
        """

        self._job = job

    @property
    def job_summary(self):
        """Gets the job_summary of this MatchingJob.

        A summary of the job with core information that's displayed on the search results listing page.

        :return: The job_summary of this MatchingJob.
        :rtype: str
        """
        return self._job_summary

    @job_summary.setter
    def job_summary(self, job_summary):
        """Sets the job_summary of this MatchingJob.

        A summary of the job with core information that's displayed on the search results listing page.

        :param job_summary: The job_summary of this MatchingJob.
        :type job_summary: str
        """

        self._job_summary = job_summary

    @property
    def job_title_snippet(self):
        """Gets the job_title_snippet of this MatchingJob.

        Contains snippets of text from the Job.job_title field most closely matching a search query's keywords, if available. The matching query keywords are enclosed in HTML bold tags.

        :return: The job_title_snippet of this MatchingJob.
        :rtype: str
        """
        return self._job_title_snippet

    @job_title_snippet.setter
    def job_title_snippet(self, job_title_snippet):
        """Sets the job_title_snippet of this MatchingJob.

        Contains snippets of text from the Job.job_title field most closely matching a search query's keywords, if available. The matching query keywords are enclosed in HTML bold tags.

        :param job_title_snippet: The job_title_snippet of this MatchingJob.
        :type job_title_snippet: str
        """

        self._job_title_snippet = job_title_snippet

    @property
    def search_text_snippet(self):
        """Gets the search_text_snippet of this MatchingJob.

        Contains snippets of text from the Job.description and similar fields that most closely match a search query's keywords, if available. All HTML tags in the original fields are stripped when returned in this field, and matching query keywords are enclosed in HTML bold tags.

        :return: The search_text_snippet of this MatchingJob.
        :rtype: str
        """
        return self._search_text_snippet

    @search_text_snippet.setter
    def search_text_snippet(self, search_text_snippet):
        """Sets the search_text_snippet of this MatchingJob.

        Contains snippets of text from the Job.description and similar fields that most closely match a search query's keywords, if available. All HTML tags in the original fields are stripped when returned in this field, and matching query keywords are enclosed in HTML bold tags.

        :param search_text_snippet: The search_text_snippet of this MatchingJob.
        :type search_text_snippet: str
        """

        self._search_text_snippet = search_text_snippet
