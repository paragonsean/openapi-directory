# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NumericBucketingOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_bounds: List[float]=None, requires_min_max: bool=None):
        """NumericBucketingOption - a model defined in OpenAPI

        :param bucket_bounds: The bucket_bounds of this NumericBucketingOption.
        :param requires_min_max: The requires_min_max of this NumericBucketingOption.
        """
        self.openapi_types = {
            'bucket_bounds': List[float],
            'requires_min_max': bool
        }

        self.attribute_map = {
            'bucket_bounds': 'bucketBounds',
            'requires_min_max': 'requiresMinMax'
        }

        self._bucket_bounds = bucket_bounds
        self._requires_min_max = requires_min_max

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumericBucketingOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumericBucketingOption of this NumericBucketingOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_bounds(self):
        """Gets the bucket_bounds of this NumericBucketingOption.

        Required. Two adjacent values form a histogram bucket. Values should be in ascending order. For example, if [5, 10, 15] are provided, four buckets are created: (-inf, 5), 5, 10), [10, 15), [15, inf). At most 20 [buckets_bound is supported.

        :return: The bucket_bounds of this NumericBucketingOption.
        :rtype: List[float]
        """
        return self._bucket_bounds

    @bucket_bounds.setter
    def bucket_bounds(self, bucket_bounds):
        """Sets the bucket_bounds of this NumericBucketingOption.

        Required. Two adjacent values form a histogram bucket. Values should be in ascending order. For example, if [5, 10, 15] are provided, four buckets are created: (-inf, 5), 5, 10), [10, 15), [15, inf). At most 20 [buckets_bound is supported.

        :param bucket_bounds: The bucket_bounds of this NumericBucketingOption.
        :type bucket_bounds: List[float]
        """

        self._bucket_bounds = bucket_bounds

    @property
    def requires_min_max(self):
        """Gets the requires_min_max of this NumericBucketingOption.

        Optional. If set to true, the histogram result includes minimum/maximum value of the numeric field.

        :return: The requires_min_max of this NumericBucketingOption.
        :rtype: bool
        """
        return self._requires_min_max

    @requires_min_max.setter
    def requires_min_max(self, requires_min_max):
        """Sets the requires_min_max of this NumericBucketingOption.

        Optional. If set to true, the histogram result includes minimum/maximum value of the numeric field.

        :param requires_min_max: The requires_min_max of this NumericBucketingOption.
        :type requires_min_max: bool
        """

        self._requires_min_max = requires_min_max
