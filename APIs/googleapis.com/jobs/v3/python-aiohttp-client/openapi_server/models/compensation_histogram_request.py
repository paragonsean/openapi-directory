# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.numeric_bucketing_option import NumericBucketingOption
from openapi_server import util


class CompensationHistogramRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucketing_option: NumericBucketingOption=None, type: str=None):
        """CompensationHistogramRequest - a model defined in OpenAPI

        :param bucketing_option: The bucketing_option of this CompensationHistogramRequest.
        :param type: The type of this CompensationHistogramRequest.
        """
        self.openapi_types = {
            'bucketing_option': NumericBucketingOption,
            'type': str
        }

        self.attribute_map = {
            'bucketing_option': 'bucketingOption',
            'type': 'type'
        }

        self._bucketing_option = bucketing_option
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompensationHistogramRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompensationHistogramRequest of this CompensationHistogramRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucketing_option(self):
        """Gets the bucketing_option of this CompensationHistogramRequest.


        :return: The bucketing_option of this CompensationHistogramRequest.
        :rtype: NumericBucketingOption
        """
        return self._bucketing_option

    @bucketing_option.setter
    def bucketing_option(self, bucketing_option):
        """Sets the bucketing_option of this CompensationHistogramRequest.


        :param bucketing_option: The bucketing_option of this CompensationHistogramRequest.
        :type bucketing_option: NumericBucketingOption
        """

        self._bucketing_option = bucketing_option

    @property
    def type(self):
        """Gets the type of this CompensationHistogramRequest.

        Required. Type of the request, representing which field the histogramming should be performed over. A single request can only specify one histogram of each `CompensationHistogramRequestType`.

        :return: The type of this CompensationHistogramRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompensationHistogramRequest.

        Required. Type of the request, representing which field the histogramming should be performed over. A single request can only specify one histogram of each `CompensationHistogramRequestType`.

        :param type: The type of this CompensationHistogramRequest.
        :type type: str
        """
        allowed_values = ["COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED", "BASE", "ANNUALIZED_BASE", "ANNUALIZED_TOTAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
