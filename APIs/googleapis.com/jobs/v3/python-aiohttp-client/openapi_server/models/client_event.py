# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_event import JobEvent
from openapi_server import util


class ClientEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, event_id: str=None, extra_info: Dict[str, str]=None, job_event: JobEvent=None, parent_event_id: str=None, request_id: str=None):
        """ClientEvent - a model defined in OpenAPI

        :param create_time: The create_time of this ClientEvent.
        :param event_id: The event_id of this ClientEvent.
        :param extra_info: The extra_info of this ClientEvent.
        :param job_event: The job_event of this ClientEvent.
        :param parent_event_id: The parent_event_id of this ClientEvent.
        :param request_id: The request_id of this ClientEvent.
        """
        self.openapi_types = {
            'create_time': str,
            'event_id': str,
            'extra_info': Dict[str, str],
            'job_event': JobEvent,
            'parent_event_id': str,
            'request_id': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'event_id': 'eventId',
            'extra_info': 'extraInfo',
            'job_event': 'jobEvent',
            'parent_event_id': 'parentEventId',
            'request_id': 'requestId'
        }

        self._create_time = create_time
        self._event_id = event_id
        self._extra_info = extra_info
        self._job_event = job_event
        self._parent_event_id = parent_event_id
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientEvent of this ClientEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ClientEvent.

        Required. The timestamp of the event.

        :return: The create_time of this ClientEvent.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ClientEvent.

        Required. The timestamp of the event.

        :param create_time: The create_time of this ClientEvent.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def event_id(self):
        """Gets the event_id of this ClientEvent.

        Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).

        :return: The event_id of this ClientEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ClientEvent.

        Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).

        :param event_id: The event_id of this ClientEvent.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def extra_info(self):
        """Gets the extra_info of this ClientEvent.

        Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.

        :return: The extra_info of this ClientEvent.
        :rtype: Dict[str, str]
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this ClientEvent.

        Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.

        :param extra_info: The extra_info of this ClientEvent.
        :type extra_info: Dict[str, str]
        """

        self._extra_info = extra_info

    @property
    def job_event(self):
        """Gets the job_event of this ClientEvent.


        :return: The job_event of this ClientEvent.
        :rtype: JobEvent
        """
        return self._job_event

    @job_event.setter
    def job_event(self, job_event):
        """Sets the job_event of this ClientEvent.


        :param job_event: The job_event of this ClientEvent.
        :type job_event: JobEvent
        """

        self._job_event = job_event

    @property
    def parent_event_id(self):
        """Gets the parent_event_id of this ClientEvent.

        Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).

        :return: The parent_event_id of this ClientEvent.
        :rtype: str
        """
        return self._parent_event_id

    @parent_event_id.setter
    def parent_event_id(self, parent_event_id):
        """Sets the parent_event_id of this ClientEvent.

        Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).

        :param parent_event_id: The parent_event_id of this ClientEvent.
        :type parent_event_id: str
        """

        self._parent_event_id = parent_event_id

    @property
    def request_id(self):
        """Gets the request_id of this ClientEvent.

        Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.

        :return: The request_id of this ClientEvent.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ClientEvent.

        Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.

        :param request_id: The request_id of this ClientEvent.
        :type request_id: str
        """

        self._request_id = request_id
