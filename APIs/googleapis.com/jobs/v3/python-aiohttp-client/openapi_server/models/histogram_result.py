# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistogramResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_type: str=None, values: Dict[str, int]=None):
        """HistogramResult - a model defined in OpenAPI

        :param search_type: The search_type of this HistogramResult.
        :param values: The values of this HistogramResult.
        """
        self.openapi_types = {
            'search_type': str,
            'values': Dict[str, int]
        }

        self.attribute_map = {
            'search_type': 'searchType',
            'values': 'values'
        }

        self._search_type = search_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramResult of this HistogramResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_type(self):
        """Gets the search_type of this HistogramResult.

        The Histogram search filters.

        :return: The search_type of this HistogramResult.
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type):
        """Sets the search_type of this HistogramResult.

        The Histogram search filters.

        :param search_type: The search_type of this HistogramResult.
        :type search_type: str
        """
        allowed_values = ["SEARCH_TYPE_UNSPECIFIED", "COMPANY_ID", "EMPLOYMENT_TYPE", "COMPANY_SIZE", "DATE_PUBLISHED", "EDUCATION_LEVEL", "EXPERIENCE_LEVEL", "ADMIN_1", "COUNTRY", "CITY", "LOCALE", "LANGUAGE", "CATEGORY", "CITY_COORDINATE", "ADMIN_1_COUNTRY", "COMPANY_DISPLAY_NAME", "BASE_COMPENSATION_UNIT"]  # noqa: E501
        if search_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"
                .format(search_type, allowed_values)
            )

        self._search_type = search_type

    @property
    def values(self):
        """Gets the values of this HistogramResult.

        A map from the values of field to the number of jobs with that value in this search result. Key: search type (filter names, such as the companyName). Values: the count of jobs that match the filter for this search.

        :return: The values of this HistogramResult.
        :rtype: Dict[str, int]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this HistogramResult.

        A map from the values of field to the number of jobs with that value in this search result. Key: search type (filter names, such as the companyName). Values: the count of jobs that match the filter for this search.

        :param values: The values of this HistogramResult.
        :type values: Dict[str, int]
        """

        self._values = values
