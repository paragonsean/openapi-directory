# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compensation_range import CompensationRange
from openapi_server.models.money import Money
from openapi_server import util


class CompensationEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Money=None, description: str=None, expected_units_per_year: float=None, range: CompensationRange=None, type: str=None, unit: str=None):
        """CompensationEntry - a model defined in OpenAPI

        :param amount: The amount of this CompensationEntry.
        :param description: The description of this CompensationEntry.
        :param expected_units_per_year: The expected_units_per_year of this CompensationEntry.
        :param range: The range of this CompensationEntry.
        :param type: The type of this CompensationEntry.
        :param unit: The unit of this CompensationEntry.
        """
        self.openapi_types = {
            'amount': Money,
            'description': str,
            'expected_units_per_year': float,
            'range': CompensationRange,
            'type': str,
            'unit': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'expected_units_per_year': 'expectedUnitsPerYear',
            'range': 'range',
            'type': 'type',
            'unit': 'unit'
        }

        self._amount = amount
        self._description = description
        self._expected_units_per_year = expected_units_per_year
        self._range = range
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompensationEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompensationEntry of this CompensationEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CompensationEntry.


        :return: The amount of this CompensationEntry.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CompensationEntry.


        :param amount: The amount of this CompensationEntry.
        :type amount: Money
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CompensationEntry.

        Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.

        :return: The description of this CompensationEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompensationEntry.

        Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.

        :param description: The description of this CompensationEntry.
        :type description: str
        """

        self._description = description

    @property
    def expected_units_per_year(self):
        """Gets the expected_units_per_year of this CompensationEntry.

        Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1

        :return: The expected_units_per_year of this CompensationEntry.
        :rtype: float
        """
        return self._expected_units_per_year

    @expected_units_per_year.setter
    def expected_units_per_year(self, expected_units_per_year):
        """Sets the expected_units_per_year of this CompensationEntry.

        Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1

        :param expected_units_per_year: The expected_units_per_year of this CompensationEntry.
        :type expected_units_per_year: float
        """

        self._expected_units_per_year = expected_units_per_year

    @property
    def range(self):
        """Gets the range of this CompensationEntry.


        :return: The range of this CompensationEntry.
        :rtype: CompensationRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this CompensationEntry.


        :param range: The range of this CompensationEntry.
        :type range: CompensationRange
        """

        self._range = range

    @property
    def type(self):
        """Gets the type of this CompensationEntry.

        Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.

        :return: The type of this CompensationEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompensationEntry.

        Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.

        :param type: The type of this CompensationEntry.
        :type type: str
        """
        allowed_values = ["COMPENSATION_TYPE_UNSPECIFIED", "BASE", "BONUS", "SIGNING_BONUS", "EQUITY", "PROFIT_SHARING", "COMMISSIONS", "TIPS", "OTHER_COMPENSATION_TYPE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this CompensationEntry.

        Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.

        :return: The unit of this CompensationEntry.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CompensationEntry.

        Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.

        :param unit: The unit of this CompensationEntry.
        :type unit: str
        """
        allowed_values = ["COMPENSATION_UNIT_UNSPECIFIED", "HOURLY", "DAILY", "WEEKLY", "MONTHLY", "YEARLY", "ONE_TIME", "OTHER_COMPENSATION_UNIT"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
