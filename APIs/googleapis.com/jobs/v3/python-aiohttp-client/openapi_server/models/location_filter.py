# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lat_lng import LatLng
from openapi_server import util


class LocationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, distance_in_miles: float=None, lat_lng: LatLng=None, region_code: str=None, telecommute_preference: str=None):
        """LocationFilter - a model defined in OpenAPI

        :param address: The address of this LocationFilter.
        :param distance_in_miles: The distance_in_miles of this LocationFilter.
        :param lat_lng: The lat_lng of this LocationFilter.
        :param region_code: The region_code of this LocationFilter.
        :param telecommute_preference: The telecommute_preference of this LocationFilter.
        """
        self.openapi_types = {
            'address': str,
            'distance_in_miles': float,
            'lat_lng': LatLng,
            'region_code': str,
            'telecommute_preference': str
        }

        self.attribute_map = {
            'address': 'address',
            'distance_in_miles': 'distanceInMiles',
            'lat_lng': 'latLng',
            'region_code': 'regionCode',
            'telecommute_preference': 'telecommutePreference'
        }

        self._address = address
        self._distance_in_miles = distance_in_miles
        self._lat_lng = lat_lng
        self._region_code = region_code
        self._telecommute_preference = telecommute_preference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationFilter of this LocationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this LocationFilter.

        Optional. The address name, such as \"Mountain View\" or \"Bay Area\".

        :return: The address of this LocationFilter.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LocationFilter.

        Optional. The address name, such as \"Mountain View\" or \"Bay Area\".

        :param address: The address of this LocationFilter.
        :type address: str
        """

        self._address = address

    @property
    def distance_in_miles(self):
        """Gets the distance_in_miles of this LocationFilter.

        Optional. The distance_in_miles is applied when the location being searched for is identified as a city or smaller. When the location being searched for is a state or larger, this field is ignored.

        :return: The distance_in_miles of this LocationFilter.
        :rtype: float
        """
        return self._distance_in_miles

    @distance_in_miles.setter
    def distance_in_miles(self, distance_in_miles):
        """Sets the distance_in_miles of this LocationFilter.

        Optional. The distance_in_miles is applied when the location being searched for is identified as a city or smaller. When the location being searched for is a state or larger, this field is ignored.

        :param distance_in_miles: The distance_in_miles of this LocationFilter.
        :type distance_in_miles: float
        """

        self._distance_in_miles = distance_in_miles

    @property
    def lat_lng(self):
        """Gets the lat_lng of this LocationFilter.


        :return: The lat_lng of this LocationFilter.
        :rtype: LatLng
        """
        return self._lat_lng

    @lat_lng.setter
    def lat_lng(self, lat_lng):
        """Sets the lat_lng of this LocationFilter.


        :param lat_lng: The lat_lng of this LocationFilter.
        :type lat_lng: LatLng
        """

        self._lat_lng = lat_lng

    @property
    def region_code(self):
        """Gets the region_code of this LocationFilter.

        Optional. CLDR region code of the country/region. This field may be used in two ways: 1) If telecommute preference is not set, this field is used address ambiguity of the user-input address. For example, \"Liverpool\" may refer to \"Liverpool, NY, US\" or \"Liverpool, UK\". This region code biases the address resolution toward a specific country or territory. If this field is not set, address resolution is biased toward the United States by default. 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the telecommute location filter will be limited to the region specified in this field. If this field is not set, the telecommute job locations will not be limited. See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.

        :return: The region_code of this LocationFilter.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this LocationFilter.

        Optional. CLDR region code of the country/region. This field may be used in two ways: 1) If telecommute preference is not set, this field is used address ambiguity of the user-input address. For example, \"Liverpool\" may refer to \"Liverpool, NY, US\" or \"Liverpool, UK\". This region code biases the address resolution toward a specific country or territory. If this field is not set, address resolution is biased toward the United States by default. 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the telecommute location filter will be limited to the region specified in this field. If this field is not set, the telecommute job locations will not be limited. See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.

        :param region_code: The region_code of this LocationFilter.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def telecommute_preference(self):
        """Gets the telecommute_preference of this LocationFilter.

        Optional. Allows the client to return jobs without a set location, specifically, telecommuting jobs (telecommuting is considered by the service as a special location). Job.posting_region indicates if a job permits telecommuting. If this field is set to TelecommutePreference.TELECOMMUTE_ALLOWED, telecommuting jobs are searched, and address and lat_lng are ignored. If not set or set to TelecommutePreference.TELECOMMUTE_EXCLUDED, the telecommute status of the jobs is ignored. Jobs that have PostingRegion.TELECOMMUTE and have additional Job.addresses may still be matched based on other location filters using address or latlng. This filter can be used by itself to search exclusively for telecommuting jobs, or it can be combined with another location filter to search for a combination of job locations, such as \"Mountain View\" or \"telecommuting\" jobs. However, when used in combination with other location filters, telecommuting jobs can be treated as less relevant than other jobs in the search response.

        :return: The telecommute_preference of this LocationFilter.
        :rtype: str
        """
        return self._telecommute_preference

    @telecommute_preference.setter
    def telecommute_preference(self, telecommute_preference):
        """Sets the telecommute_preference of this LocationFilter.

        Optional. Allows the client to return jobs without a set location, specifically, telecommuting jobs (telecommuting is considered by the service as a special location). Job.posting_region indicates if a job permits telecommuting. If this field is set to TelecommutePreference.TELECOMMUTE_ALLOWED, telecommuting jobs are searched, and address and lat_lng are ignored. If not set or set to TelecommutePreference.TELECOMMUTE_EXCLUDED, the telecommute status of the jobs is ignored. Jobs that have PostingRegion.TELECOMMUTE and have additional Job.addresses may still be matched based on other location filters using address or latlng. This filter can be used by itself to search exclusively for telecommuting jobs, or it can be combined with another location filter to search for a combination of job locations, such as \"Mountain View\" or \"telecommuting\" jobs. However, when used in combination with other location filters, telecommuting jobs can be treated as less relevant than other jobs in the search response.

        :param telecommute_preference: The telecommute_preference of this LocationFilter.
        :type telecommute_preference: str
        """
        allowed_values = ["TELECOMMUTE_PREFERENCE_UNSPECIFIED", "TELECOMMUTE_EXCLUDED", "TELECOMMUTE_ALLOWED", "TELECOMMUTE_JOBS_EXCLUDED"]  # noqa: E501
        if telecommute_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `telecommute_preference` ({0}), must be one of {1}"
                .format(telecommute_preference, allowed_values)
            )

        self._telecommute_preference = telecommute_preference
