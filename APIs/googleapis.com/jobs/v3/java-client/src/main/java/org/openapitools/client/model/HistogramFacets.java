/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompensationHistogramRequest;
import org.openapitools.client.model.CustomAttributeHistogramRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input only. Histogram facets to be specified in SearchJobsRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramFacets {
  public static final String SERIALIZED_NAME_COMPENSATION_HISTOGRAM_FACETS = "compensationHistogramFacets";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_HISTOGRAM_FACETS)
  private List<CompensationHistogramRequest> compensationHistogramFacets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_HISTOGRAM_FACETS = "customAttributeHistogramFacets";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_HISTOGRAM_FACETS)
  private List<CustomAttributeHistogramRequest> customAttributeHistogramFacets = new ArrayList<>();

  /**
   * Gets or Sets simpleHistogramFacets
   */
  @JsonAdapter(SimpleHistogramFacetsEnum.Adapter.class)
  public enum SimpleHistogramFacetsEnum {
    SEARCH_TYPE_UNSPECIFIED("SEARCH_TYPE_UNSPECIFIED"),
    
    COMPANY_ID("COMPANY_ID"),
    
    EMPLOYMENT_TYPE("EMPLOYMENT_TYPE"),
    
    COMPANY_SIZE("COMPANY_SIZE"),
    
    DATE_PUBLISHED("DATE_PUBLISHED"),
    
    EDUCATION_LEVEL("EDUCATION_LEVEL"),
    
    EXPERIENCE_LEVEL("EXPERIENCE_LEVEL"),
    
    ADMIN_1("ADMIN_1"),
    
    COUNTRY("COUNTRY"),
    
    CITY("CITY"),
    
    LOCALE("LOCALE"),
    
    LANGUAGE("LANGUAGE"),
    
    CATEGORY("CATEGORY"),
    
    CITY_COORDINATE("CITY_COORDINATE"),
    
    ADMIN_1_COUNTRY("ADMIN_1_COUNTRY"),
    
    COMPANY_DISPLAY_NAME("COMPANY_DISPLAY_NAME"),
    
    BASE_COMPENSATION_UNIT("BASE_COMPENSATION_UNIT");

    private String value;

    SimpleHistogramFacetsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SimpleHistogramFacetsEnum fromValue(String value) {
      for (SimpleHistogramFacetsEnum b : SimpleHistogramFacetsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SimpleHistogramFacetsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SimpleHistogramFacetsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SimpleHistogramFacetsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SimpleHistogramFacetsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SimpleHistogramFacetsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIMPLE_HISTOGRAM_FACETS = "simpleHistogramFacets";
  @SerializedName(SERIALIZED_NAME_SIMPLE_HISTOGRAM_FACETS)
  private List<SimpleHistogramFacetsEnum> simpleHistogramFacets = new ArrayList<>();

  public HistogramFacets() {
  }

  public HistogramFacets compensationHistogramFacets(List<CompensationHistogramRequest> compensationHistogramFacets) {
    this.compensationHistogramFacets = compensationHistogramFacets;
    return this;
  }

  public HistogramFacets addCompensationHistogramFacetsItem(CompensationHistogramRequest compensationHistogramFacetsItem) {
    if (this.compensationHistogramFacets == null) {
      this.compensationHistogramFacets = new ArrayList<>();
    }
    this.compensationHistogramFacets.add(compensationHistogramFacetsItem);
    return this;
  }

  /**
   * Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.
   * @return compensationHistogramFacets
   */
  @javax.annotation.Nullable
  public List<CompensationHistogramRequest> getCompensationHistogramFacets() {
    return compensationHistogramFacets;
  }

  public void setCompensationHistogramFacets(List<CompensationHistogramRequest> compensationHistogramFacets) {
    this.compensationHistogramFacets = compensationHistogramFacets;
  }


  public HistogramFacets customAttributeHistogramFacets(List<CustomAttributeHistogramRequest> customAttributeHistogramFacets) {
    this.customAttributeHistogramFacets = customAttributeHistogramFacets;
    return this;
  }

  public HistogramFacets addCustomAttributeHistogramFacetsItem(CustomAttributeHistogramRequest customAttributeHistogramFacetsItem) {
    if (this.customAttributeHistogramFacets == null) {
      this.customAttributeHistogramFacets = new ArrayList<>();
    }
    this.customAttributeHistogramFacets.add(customAttributeHistogramFacetsItem);
    return this;
  }

  /**
   * Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.
   * @return customAttributeHistogramFacets
   */
  @javax.annotation.Nullable
  public List<CustomAttributeHistogramRequest> getCustomAttributeHistogramFacets() {
    return customAttributeHistogramFacets;
  }

  public void setCustomAttributeHistogramFacets(List<CustomAttributeHistogramRequest> customAttributeHistogramFacets) {
    this.customAttributeHistogramFacets = customAttributeHistogramFacets;
  }


  public HistogramFacets simpleHistogramFacets(List<SimpleHistogramFacetsEnum> simpleHistogramFacets) {
    this.simpleHistogramFacets = simpleHistogramFacets;
    return this;
  }

  public HistogramFacets addSimpleHistogramFacetsItem(SimpleHistogramFacetsEnum simpleHistogramFacetsItem) {
    if (this.simpleHistogramFacets == null) {
      this.simpleHistogramFacets = new ArrayList<>();
    }
    this.simpleHistogramFacets.add(simpleHistogramFacetsItem);
    return this;
  }

  /**
   * Optional. Specifies the simple type of histogram facets, for example, &#x60;COMPANY_SIZE&#x60;, &#x60;EMPLOYMENT_TYPE&#x60; etc.
   * @return simpleHistogramFacets
   */
  @javax.annotation.Nullable
  public List<SimpleHistogramFacetsEnum> getSimpleHistogramFacets() {
    return simpleHistogramFacets;
  }

  public void setSimpleHistogramFacets(List<SimpleHistogramFacetsEnum> simpleHistogramFacets) {
    this.simpleHistogramFacets = simpleHistogramFacets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramFacets histogramFacets = (HistogramFacets) o;
    return Objects.equals(this.compensationHistogramFacets, histogramFacets.compensationHistogramFacets) &&
        Objects.equals(this.customAttributeHistogramFacets, histogramFacets.customAttributeHistogramFacets) &&
        Objects.equals(this.simpleHistogramFacets, histogramFacets.simpleHistogramFacets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compensationHistogramFacets, customAttributeHistogramFacets, simpleHistogramFacets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramFacets {\n");
    sb.append("    compensationHistogramFacets: ").append(toIndentedString(compensationHistogramFacets)).append("\n");
    sb.append("    customAttributeHistogramFacets: ").append(toIndentedString(customAttributeHistogramFacets)).append("\n");
    sb.append("    simpleHistogramFacets: ").append(toIndentedString(simpleHistogramFacets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compensationHistogramFacets");
    openapiFields.add("customAttributeHistogramFacets");
    openapiFields.add("simpleHistogramFacets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramFacets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramFacets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramFacets is not found in the empty JSON string", HistogramFacets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramFacets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramFacets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("compensationHistogramFacets") != null && !jsonObj.get("compensationHistogramFacets").isJsonNull()) {
        JsonArray jsonArraycompensationHistogramFacets = jsonObj.getAsJsonArray("compensationHistogramFacets");
        if (jsonArraycompensationHistogramFacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compensationHistogramFacets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compensationHistogramFacets` to be an array in the JSON string but got `%s`", jsonObj.get("compensationHistogramFacets").toString()));
          }

          // validate the optional field `compensationHistogramFacets` (array)
          for (int i = 0; i < jsonArraycompensationHistogramFacets.size(); i++) {
            CompensationHistogramRequest.validateJsonElement(jsonArraycompensationHistogramFacets.get(i));
          };
        }
      }
      if (jsonObj.get("customAttributeHistogramFacets") != null && !jsonObj.get("customAttributeHistogramFacets").isJsonNull()) {
        JsonArray jsonArraycustomAttributeHistogramFacets = jsonObj.getAsJsonArray("customAttributeHistogramFacets");
        if (jsonArraycustomAttributeHistogramFacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributeHistogramFacets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributeHistogramFacets` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributeHistogramFacets").toString()));
          }

          // validate the optional field `customAttributeHistogramFacets` (array)
          for (int i = 0; i < jsonArraycustomAttributeHistogramFacets.size(); i++) {
            CustomAttributeHistogramRequest.validateJsonElement(jsonArraycustomAttributeHistogramFacets.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("simpleHistogramFacets") != null && !jsonObj.get("simpleHistogramFacets").isJsonNull() && !jsonObj.get("simpleHistogramFacets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `simpleHistogramFacets` to be an array in the JSON string but got `%s`", jsonObj.get("simpleHistogramFacets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramFacets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramFacets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramFacets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramFacets.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramFacets>() {
           @Override
           public void write(JsonWriter out, HistogramFacets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramFacets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramFacets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramFacets
   * @throws IOException if the JSON string is invalid with respect to HistogramFacets
   */
  public static HistogramFacets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramFacets.class);
  }

  /**
   * Convert an instance of HistogramFacets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

