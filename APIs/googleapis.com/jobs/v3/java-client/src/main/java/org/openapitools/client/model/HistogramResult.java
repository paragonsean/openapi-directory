/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Result of a histogram call. The response contains the histogram map for the search type specified by HistogramResult.field. The response is a map of each filter value to the corresponding count of jobs for that filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramResult {
  /**
   * The Histogram search filters.
   */
  @JsonAdapter(SearchTypeEnum.Adapter.class)
  public enum SearchTypeEnum {
    SEARCH_TYPE_UNSPECIFIED("SEARCH_TYPE_UNSPECIFIED"),
    
    COMPANY_ID("COMPANY_ID"),
    
    EMPLOYMENT_TYPE("EMPLOYMENT_TYPE"),
    
    COMPANY_SIZE("COMPANY_SIZE"),
    
    DATE_PUBLISHED("DATE_PUBLISHED"),
    
    EDUCATION_LEVEL("EDUCATION_LEVEL"),
    
    EXPERIENCE_LEVEL("EXPERIENCE_LEVEL"),
    
    ADMIN_1("ADMIN_1"),
    
    COUNTRY("COUNTRY"),
    
    CITY("CITY"),
    
    LOCALE("LOCALE"),
    
    LANGUAGE("LANGUAGE"),
    
    CATEGORY("CATEGORY"),
    
    CITY_COORDINATE("CITY_COORDINATE"),
    
    ADMIN_1_COUNTRY("ADMIN_1_COUNTRY"),
    
    COMPANY_DISPLAY_NAME("COMPANY_DISPLAY_NAME"),
    
    BASE_COMPENSATION_UNIT("BASE_COMPENSATION_UNIT");

    private String value;

    SearchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchTypeEnum fromValue(String value) {
      for (SearchTypeEnum b : SearchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_TYPE = "searchType";
  @SerializedName(SERIALIZED_NAME_SEARCH_TYPE)
  private SearchTypeEnum searchType;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private Map<String, Integer> values = new HashMap<>();

  public HistogramResult() {
  }

  public HistogramResult searchType(SearchTypeEnum searchType) {
    this.searchType = searchType;
    return this;
  }

  /**
   * The Histogram search filters.
   * @return searchType
   */
  @javax.annotation.Nullable
  public SearchTypeEnum getSearchType() {
    return searchType;
  }

  public void setSearchType(SearchTypeEnum searchType) {
    this.searchType = searchType;
  }


  public HistogramResult values(Map<String, Integer> values) {
    this.values = values;
    return this;
  }

  public HistogramResult putValuesItem(String key, Integer valuesItem) {
    if (this.values == null) {
      this.values = new HashMap<>();
    }
    this.values.put(key, valuesItem);
    return this;
  }

  /**
   * A map from the values of field to the number of jobs with that value in this search result. Key: search type (filter names, such as the companyName). Values: the count of jobs that match the filter for this search.
   * @return values
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getValues() {
    return values;
  }

  public void setValues(Map<String, Integer> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramResult histogramResult = (HistogramResult) o;
    return Objects.equals(this.searchType, histogramResult.searchType) &&
        Objects.equals(this.values, histogramResult.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchType, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramResult {\n");
    sb.append("    searchType: ").append(toIndentedString(searchType)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("searchType");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramResult is not found in the empty JSON string", HistogramResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("searchType") != null && !jsonObj.get("searchType").isJsonNull()) && !jsonObj.get("searchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchType").toString()));
      }
      // validate the optional field `searchType`
      if (jsonObj.get("searchType") != null && !jsonObj.get("searchType").isJsonNull()) {
        SearchTypeEnum.validateJsonElement(jsonObj.get("searchType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramResult.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramResult>() {
           @Override
           public void write(JsonWriter out, HistogramResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramResult
   * @throws IOException if the JSON string is invalid with respect to HistogramResult
   */
  public static HistogramResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramResult.class);
  }

  /**
   * Convert an instance of HistogramResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

