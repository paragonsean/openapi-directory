/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.JobEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientEvent {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extraInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private Map<String, String> extraInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_JOB_EVENT = "jobEvent";
  @SerializedName(SERIALIZED_NAME_JOB_EVENT)
  private JobEvent jobEvent;

  public static final String SERIALIZED_NAME_PARENT_EVENT_ID = "parentEventId";
  @SerializedName(SERIALIZED_NAME_PARENT_EVENT_ID)
  private String parentEventId;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public ClientEvent() {
  }

  public ClientEvent createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. The timestamp of the event.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public ClientEvent eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Required. A unique identifier, generated by the client application. This &#x60;event_id&#x60; is used to establish the relationship between different events (see parent_event_id).
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public ClientEvent extraInfo(Map<String, String> extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

  public ClientEvent putExtraInfoItem(String key, String extraInfoItem) {
    if (this.extraInfo == null) {
      this.extraInfo = new HashMap<>();
    }
    this.extraInfo.put(key, extraInfoItem);
    return this;
  }

  /**
   * Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.
   * @return extraInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtraInfo() {
    return extraInfo;
  }

  public void setExtraInfo(Map<String, String> extraInfo) {
    this.extraInfo = extraInfo;
  }


  public ClientEvent jobEvent(JobEvent jobEvent) {
    this.jobEvent = jobEvent;
    return this;
  }

  /**
   * Get jobEvent
   * @return jobEvent
   */
  @javax.annotation.Nullable
  public JobEvent getJobEvent() {
    return jobEvent;
  }

  public void setJobEvent(JobEvent jobEvent) {
    this.jobEvent = jobEvent;
  }


  public ClientEvent parentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
    return this;
  }

  /**
   * Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).
   * @return parentEventId
   */
  @javax.annotation.Nullable
  public String getParentEventId() {
    return parentEventId;
  }

  public void setParentEventId(String parentEventId) {
    this.parentEventId = parentEventId;
  }


  public ClientEvent requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientEvent clientEvent = (ClientEvent) o;
    return Objects.equals(this.createTime, clientEvent.createTime) &&
        Objects.equals(this.eventId, clientEvent.eventId) &&
        Objects.equals(this.extraInfo, clientEvent.extraInfo) &&
        Objects.equals(this.jobEvent, clientEvent.jobEvent) &&
        Objects.equals(this.parentEventId, clientEvent.parentEventId) &&
        Objects.equals(this.requestId, clientEvent.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, eventId, extraInfo, jobEvent, parentEventId, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientEvent {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    jobEvent: ").append(toIndentedString(jobEvent)).append("\n");
    sb.append("    parentEventId: ").append(toIndentedString(parentEventId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("eventId");
    openapiFields.add("extraInfo");
    openapiFields.add("jobEvent");
    openapiFields.add("parentEventId");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientEvent is not found in the empty JSON string", ClientEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      // validate the optional field `jobEvent`
      if (jsonObj.get("jobEvent") != null && !jsonObj.get("jobEvent").isJsonNull()) {
        JobEvent.validateJsonElement(jsonObj.get("jobEvent"));
      }
      if ((jsonObj.get("parentEventId") != null && !jsonObj.get("parentEventId").isJsonNull()) && !jsonObj.get("parentEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentEventId").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientEvent>() {
           @Override
           public void write(JsonWriter out, ClientEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientEvent
   * @throws IOException if the JSON string is invalid with respect to ClientEvent
   */
  public static ClientEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientEvent.class);
  }

  /**
   * Convert an instance of ClientEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

