/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompanyDerivedInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Company {
  public static final String SERIALIZED_NAME_CAREER_SITE_URI = "careerSiteUri";
  @SerializedName(SERIALIZED_NAME_CAREER_SITE_URI)
  private String careerSiteUri;

  public static final String SERIALIZED_NAME_DERIVED_INFO = "derivedInfo";
  @SerializedName(SERIALIZED_NAME_DERIVED_INFO)
  private CompanyDerivedInfo derivedInfo;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EEO_TEXT = "eeoText";
  @SerializedName(SERIALIZED_NAME_EEO_TEXT)
  private String eeoText;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_HEADQUARTERS_ADDRESS = "headquartersAddress";
  @SerializedName(SERIALIZED_NAME_HEADQUARTERS_ADDRESS)
  private String headquartersAddress;

  public static final String SERIALIZED_NAME_HIRING_AGENCY = "hiringAgency";
  @SerializedName(SERIALIZED_NAME_HIRING_AGENCY)
  private Boolean hiringAgency;

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  public static final String SERIALIZED_NAME_KEYWORD_SEARCHABLE_JOB_CUSTOM_ATTRIBUTES = "keywordSearchableJobCustomAttributes";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_KEYWORD_SEARCHABLE_JOB_CUSTOM_ATTRIBUTES)
  private List<String> keywordSearchableJobCustomAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Optional. The employer&#39;s company size.
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    COMPANY_SIZE_UNSPECIFIED("COMPANY_SIZE_UNSPECIFIED"),
    
    MINI("MINI"),
    
    SMALL("SMALL"),
    
    SMEDIUM("SMEDIUM"),
    
    MEDIUM("MEDIUM"),
    
    BIG("BIG"),
    
    BIGGER("BIGGER"),
    
    GIANT("GIANT");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_WEBSITE_URI = "websiteUri";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URI)
  private String websiteUri;

  public Company() {
  }

  public Company careerSiteUri(String careerSiteUri) {
    this.careerSiteUri = careerSiteUri;
    return this;
  }

  /**
   * Optional. The URI to employer&#39;s career site or careers page on the employer&#39;s web site, for example, \&quot;https://careers.google.com\&quot;.
   * @return careerSiteUri
   */
  @javax.annotation.Nullable
  public String getCareerSiteUri() {
    return careerSiteUri;
  }

  public void setCareerSiteUri(String careerSiteUri) {
    this.careerSiteUri = careerSiteUri;
  }


  public Company derivedInfo(CompanyDerivedInfo derivedInfo) {
    this.derivedInfo = derivedInfo;
    return this;
  }

  /**
   * Get derivedInfo
   * @return derivedInfo
   */
  @javax.annotation.Nullable
  public CompanyDerivedInfo getDerivedInfo() {
    return derivedInfo;
  }

  public void setDerivedInfo(CompanyDerivedInfo derivedInfo) {
    this.derivedInfo = derivedInfo;
  }


  public Company displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the company, for example, \&quot;Google LLC\&quot;.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Company eeoText(String eeoText) {
    this.eeoText = eeoText;
    return this;
  }

  /**
   * Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.
   * @return eeoText
   */
  @javax.annotation.Nullable
  public String getEeoText() {
    return eeoText;
  }

  public void setEeoText(String eeoText) {
    this.eeoText = eeoText;
  }


  public Company externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Company headquartersAddress(String headquartersAddress) {
    this.headquartersAddress = headquartersAddress;
    return this;
  }

  /**
   * Optional. The street address of the company&#39;s main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.
   * @return headquartersAddress
   */
  @javax.annotation.Nullable
  public String getHeadquartersAddress() {
    return headquartersAddress;
  }

  public void setHeadquartersAddress(String headquartersAddress) {
    this.headquartersAddress = headquartersAddress;
  }


  public Company hiringAgency(Boolean hiringAgency) {
    this.hiringAgency = hiringAgency;
    return this;
  }

  /**
   * Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.
   * @return hiringAgency
   */
  @javax.annotation.Nullable
  public Boolean getHiringAgency() {
    return hiringAgency;
  }

  public void setHiringAgency(Boolean hiringAgency) {
    this.hiringAgency = hiringAgency;
  }


  public Company imageUri(String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Optional. A URI that hosts the employer&#39;s company logo.
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }


  @Deprecated
  public Company keywordSearchableJobCustomAttributes(List<String> keywordSearchableJobCustomAttributes) {
    this.keywordSearchableJobCustomAttributes = keywordSearchableJobCustomAttributes;
    return this;
  }

  public Company addKeywordSearchableJobCustomAttributesItem(String keywordSearchableJobCustomAttributesItem) {
    if (this.keywordSearchableJobCustomAttributes == null) {
      this.keywordSearchableJobCustomAttributes = new ArrayList<>();
    }
    this.keywordSearchableJobCustomAttributes.add(keywordSearchableJobCustomAttributesItem);
    return this;
  }

  /**
   * Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding &#x60;string_values&#x60; are used in keyword search. Jobs with &#x60;string_values&#x60; under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won&#39;t be properly searchable, and those keyword queries need to be surrounded by quotes.
   * @return keywordSearchableJobCustomAttributes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getKeywordSearchableJobCustomAttributes() {
    return keywordSearchableJobCustomAttributes;
  }

  @Deprecated
  public void setKeywordSearchableJobCustomAttributes(List<String> keywordSearchableJobCustomAttributes) {
    this.keywordSearchableJobCustomAttributes = keywordSearchableJobCustomAttributes;
  }


  public Company name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \&quot;projects/{project_id}/companies/{company_id}\&quot;, for example, \&quot;projects/api-test-project/companies/foo\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Company size(SizeEnum size) {
    this.size = size;
    return this;
  }

  /**
   * Optional. The employer&#39;s company size.
   * @return size
   */
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public Company suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public Company websiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
    return this;
  }

  /**
   * Optional. The URI representing the company&#39;s primary web site or home page, for example, \&quot;https://www.google.com\&quot;. The maximum number of allowed characters is 255.
   * @return websiteUri
   */
  @javax.annotation.Nullable
  public String getWebsiteUri() {
    return websiteUri;
  }

  public void setWebsiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Company company = (Company) o;
    return Objects.equals(this.careerSiteUri, company.careerSiteUri) &&
        Objects.equals(this.derivedInfo, company.derivedInfo) &&
        Objects.equals(this.displayName, company.displayName) &&
        Objects.equals(this.eeoText, company.eeoText) &&
        Objects.equals(this.externalId, company.externalId) &&
        Objects.equals(this.headquartersAddress, company.headquartersAddress) &&
        Objects.equals(this.hiringAgency, company.hiringAgency) &&
        Objects.equals(this.imageUri, company.imageUri) &&
        Objects.equals(this.keywordSearchableJobCustomAttributes, company.keywordSearchableJobCustomAttributes) &&
        Objects.equals(this.name, company.name) &&
        Objects.equals(this.size, company.size) &&
        Objects.equals(this.suspended, company.suspended) &&
        Objects.equals(this.websiteUri, company.websiteUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(careerSiteUri, derivedInfo, displayName, eeoText, externalId, headquartersAddress, hiringAgency, imageUri, keywordSearchableJobCustomAttributes, name, size, suspended, websiteUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Company {\n");
    sb.append("    careerSiteUri: ").append(toIndentedString(careerSiteUri)).append("\n");
    sb.append("    derivedInfo: ").append(toIndentedString(derivedInfo)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eeoText: ").append(toIndentedString(eeoText)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    headquartersAddress: ").append(toIndentedString(headquartersAddress)).append("\n");
    sb.append("    hiringAgency: ").append(toIndentedString(hiringAgency)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    keywordSearchableJobCustomAttributes: ").append(toIndentedString(keywordSearchableJobCustomAttributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    websiteUri: ").append(toIndentedString(websiteUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("careerSiteUri");
    openapiFields.add("derivedInfo");
    openapiFields.add("displayName");
    openapiFields.add("eeoText");
    openapiFields.add("externalId");
    openapiFields.add("headquartersAddress");
    openapiFields.add("hiringAgency");
    openapiFields.add("imageUri");
    openapiFields.add("keywordSearchableJobCustomAttributes");
    openapiFields.add("name");
    openapiFields.add("size");
    openapiFields.add("suspended");
    openapiFields.add("websiteUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Company
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Company.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Company is not found in the empty JSON string", Company.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Company.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Company` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("careerSiteUri") != null && !jsonObj.get("careerSiteUri").isJsonNull()) && !jsonObj.get("careerSiteUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `careerSiteUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("careerSiteUri").toString()));
      }
      // validate the optional field `derivedInfo`
      if (jsonObj.get("derivedInfo") != null && !jsonObj.get("derivedInfo").isJsonNull()) {
        CompanyDerivedInfo.validateJsonElement(jsonObj.get("derivedInfo"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eeoText") != null && !jsonObj.get("eeoText").isJsonNull()) && !jsonObj.get("eeoText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eeoText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eeoText").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("headquartersAddress") != null && !jsonObj.get("headquartersAddress").isJsonNull()) && !jsonObj.get("headquartersAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headquartersAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headquartersAddress").toString()));
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywordSearchableJobCustomAttributes") != null && !jsonObj.get("keywordSearchableJobCustomAttributes").isJsonNull() && !jsonObj.get("keywordSearchableJobCustomAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordSearchableJobCustomAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("keywordSearchableJobCustomAttributes").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("websiteUri") != null && !jsonObj.get("websiteUri").isJsonNull()) && !jsonObj.get("websiteUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Company.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Company' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Company> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Company.class));

       return (TypeAdapter<T>) new TypeAdapter<Company>() {
           @Override
           public void write(JsonWriter out, Company value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Company read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Company given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Company
   * @throws IOException if the JSON string is invalid with respect to Company
   */
  public static Company fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Company.class);
  }

  /**
   * Convert an instance of Company to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

