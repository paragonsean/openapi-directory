/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompensationHistogramResult;
import org.openapitools.client.model.CustomAttributeHistogramResult;
import org.openapitools.client.model.HistogramResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Histogram results that match HistogramFacets specified in SearchJobsRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramResults {
  public static final String SERIALIZED_NAME_COMPENSATION_HISTOGRAM_RESULTS = "compensationHistogramResults";
  @SerializedName(SERIALIZED_NAME_COMPENSATION_HISTOGRAM_RESULTS)
  private List<CompensationHistogramResult> compensationHistogramResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_HISTOGRAM_RESULTS = "customAttributeHistogramResults";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_HISTOGRAM_RESULTS)
  private List<CustomAttributeHistogramResult> customAttributeHistogramResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIMPLE_HISTOGRAM_RESULTS = "simpleHistogramResults";
  @SerializedName(SERIALIZED_NAME_SIMPLE_HISTOGRAM_RESULTS)
  private List<HistogramResult> simpleHistogramResults = new ArrayList<>();

  public HistogramResults() {
  }

  public HistogramResults compensationHistogramResults(List<CompensationHistogramResult> compensationHistogramResults) {
    this.compensationHistogramResults = compensationHistogramResults;
    return this;
  }

  public HistogramResults addCompensationHistogramResultsItem(CompensationHistogramResult compensationHistogramResultsItem) {
    if (this.compensationHistogramResults == null) {
      this.compensationHistogramResults = new ArrayList<>();
    }
    this.compensationHistogramResults.add(compensationHistogramResultsItem);
    return this;
  }

  /**
   * Specifies compensation field-based histogram results that match HistogramFacets.compensation_histogram_requests.
   * @return compensationHistogramResults
   */
  @javax.annotation.Nullable
  public List<CompensationHistogramResult> getCompensationHistogramResults() {
    return compensationHistogramResults;
  }

  public void setCompensationHistogramResults(List<CompensationHistogramResult> compensationHistogramResults) {
    this.compensationHistogramResults = compensationHistogramResults;
  }


  public HistogramResults customAttributeHistogramResults(List<CustomAttributeHistogramResult> customAttributeHistogramResults) {
    this.customAttributeHistogramResults = customAttributeHistogramResults;
    return this;
  }

  public HistogramResults addCustomAttributeHistogramResultsItem(CustomAttributeHistogramResult customAttributeHistogramResultsItem) {
    if (this.customAttributeHistogramResults == null) {
      this.customAttributeHistogramResults = new ArrayList<>();
    }
    this.customAttributeHistogramResults.add(customAttributeHistogramResultsItem);
    return this;
  }

  /**
   * Specifies histogram results for custom attributes that match HistogramFacets.custom_attribute_histogram_facets.
   * @return customAttributeHistogramResults
   */
  @javax.annotation.Nullable
  public List<CustomAttributeHistogramResult> getCustomAttributeHistogramResults() {
    return customAttributeHistogramResults;
  }

  public void setCustomAttributeHistogramResults(List<CustomAttributeHistogramResult> customAttributeHistogramResults) {
    this.customAttributeHistogramResults = customAttributeHistogramResults;
  }


  public HistogramResults simpleHistogramResults(List<HistogramResult> simpleHistogramResults) {
    this.simpleHistogramResults = simpleHistogramResults;
    return this;
  }

  public HistogramResults addSimpleHistogramResultsItem(HistogramResult simpleHistogramResultsItem) {
    if (this.simpleHistogramResults == null) {
      this.simpleHistogramResults = new ArrayList<>();
    }
    this.simpleHistogramResults.add(simpleHistogramResultsItem);
    return this;
  }

  /**
   * Specifies histogram results that matches HistogramFacets.simple_histogram_facets.
   * @return simpleHistogramResults
   */
  @javax.annotation.Nullable
  public List<HistogramResult> getSimpleHistogramResults() {
    return simpleHistogramResults;
  }

  public void setSimpleHistogramResults(List<HistogramResult> simpleHistogramResults) {
    this.simpleHistogramResults = simpleHistogramResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramResults histogramResults = (HistogramResults) o;
    return Objects.equals(this.compensationHistogramResults, histogramResults.compensationHistogramResults) &&
        Objects.equals(this.customAttributeHistogramResults, histogramResults.customAttributeHistogramResults) &&
        Objects.equals(this.simpleHistogramResults, histogramResults.simpleHistogramResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compensationHistogramResults, customAttributeHistogramResults, simpleHistogramResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramResults {\n");
    sb.append("    compensationHistogramResults: ").append(toIndentedString(compensationHistogramResults)).append("\n");
    sb.append("    customAttributeHistogramResults: ").append(toIndentedString(customAttributeHistogramResults)).append("\n");
    sb.append("    simpleHistogramResults: ").append(toIndentedString(simpleHistogramResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compensationHistogramResults");
    openapiFields.add("customAttributeHistogramResults");
    openapiFields.add("simpleHistogramResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramResults is not found in the empty JSON string", HistogramResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("compensationHistogramResults") != null && !jsonObj.get("compensationHistogramResults").isJsonNull()) {
        JsonArray jsonArraycompensationHistogramResults = jsonObj.getAsJsonArray("compensationHistogramResults");
        if (jsonArraycompensationHistogramResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("compensationHistogramResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `compensationHistogramResults` to be an array in the JSON string but got `%s`", jsonObj.get("compensationHistogramResults").toString()));
          }

          // validate the optional field `compensationHistogramResults` (array)
          for (int i = 0; i < jsonArraycompensationHistogramResults.size(); i++) {
            CompensationHistogramResult.validateJsonElement(jsonArraycompensationHistogramResults.get(i));
          };
        }
      }
      if (jsonObj.get("customAttributeHistogramResults") != null && !jsonObj.get("customAttributeHistogramResults").isJsonNull()) {
        JsonArray jsonArraycustomAttributeHistogramResults = jsonObj.getAsJsonArray("customAttributeHistogramResults");
        if (jsonArraycustomAttributeHistogramResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributeHistogramResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributeHistogramResults` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributeHistogramResults").toString()));
          }

          // validate the optional field `customAttributeHistogramResults` (array)
          for (int i = 0; i < jsonArraycustomAttributeHistogramResults.size(); i++) {
            CustomAttributeHistogramResult.validateJsonElement(jsonArraycustomAttributeHistogramResults.get(i));
          };
        }
      }
      if (jsonObj.get("simpleHistogramResults") != null && !jsonObj.get("simpleHistogramResults").isJsonNull()) {
        JsonArray jsonArraysimpleHistogramResults = jsonObj.getAsJsonArray("simpleHistogramResults");
        if (jsonArraysimpleHistogramResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("simpleHistogramResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `simpleHistogramResults` to be an array in the JSON string but got `%s`", jsonObj.get("simpleHistogramResults").toString()));
          }

          // validate the optional field `simpleHistogramResults` (array)
          for (int i = 0; i < jsonArraysimpleHistogramResults.size(); i++) {
            HistogramResult.validateJsonElement(jsonArraysimpleHistogramResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramResults.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramResults>() {
           @Override
           public void write(JsonWriter out, HistogramResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramResults
   * @throws IOException if the JSON string is invalid with respect to HistogramResults
   */
  public static HistogramResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramResults.class);
  }

  /**
   * Convert an instance of HistogramResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

