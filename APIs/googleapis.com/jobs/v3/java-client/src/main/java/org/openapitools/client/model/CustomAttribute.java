/*
 * Cloud Talent Solution API
 * Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom attribute values that are either filterable or non-filterable.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:22.826388-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomAttribute {
  public static final String SERIALIZED_NAME_FILTERABLE = "filterable";
  @SerializedName(SERIALIZED_NAME_FILTERABLE)
  private Boolean filterable;

  public static final String SERIALIZED_NAME_LONG_VALUES = "longValues";
  @SerializedName(SERIALIZED_NAME_LONG_VALUES)
  private List<String> longValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRING_VALUES = "stringValues";
  @SerializedName(SERIALIZED_NAME_STRING_VALUES)
  private List<String> stringValues = new ArrayList<>();

  public CustomAttribute() {
  }

  public CustomAttribute filterable(Boolean filterable) {
    this.filterable = filterable;
    return this;
  }

  /**
   * Optional. If the &#x60;filterable&#x60; flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false.
   * @return filterable
   */
  @javax.annotation.Nullable
  public Boolean getFilterable() {
    return filterable;
  }

  public void setFilterable(Boolean filterable) {
    this.filterable = filterable;
  }


  public CustomAttribute longValues(List<String> longValues) {
    this.longValues = longValues;
    return this;
  }

  public CustomAttribute addLongValuesItem(String longValuesItem) {
    if (this.longValues == null) {
      this.longValues = new ArrayList<>();
    }
    this.longValues.add(longValuesItem);
    return this;
  }

  /**
   * Optional but exactly one of string_values or long_values must be specified. This field is used to perform number range search. (&#x60;EQ&#x60;, &#x60;GT&#x60;, &#x60;GE&#x60;, &#x60;LE&#x60;, &#x60;LT&#x60;) over filterable &#x60;long_value&#x60;. Currently at most 1 long_values is supported.
   * @return longValues
   */
  @javax.annotation.Nullable
  public List<String> getLongValues() {
    return longValues;
  }

  public void setLongValues(List<String> longValues) {
    this.longValues = longValues;
  }


  public CustomAttribute stringValues(List<String> stringValues) {
    this.stringValues = stringValues;
    return this;
  }

  public CustomAttribute addStringValuesItem(String stringValuesItem) {
    if (this.stringValues == null) {
      this.stringValues = new ArrayList<>();
    }
    this.stringValues.add(stringValuesItem);
    return this;
  }

  /**
   * Optional but exactly one of string_values or long_values must be specified. This field is used to perform a string match (&#x60;CASE_SENSITIVE_MATCH&#x60; or &#x60;CASE_INSENSITIVE_MATCH&#x60;) search. For filterable &#x60;string_value&#x60;s, a maximum total number of 200 values is allowed, with each &#x60;string_value&#x60; has a byte size of no more than 500B. For unfilterable &#x60;string_values&#x60;, the maximum total byte size of unfilterable &#x60;string_values&#x60; is 50KB. Empty string is not allowed.
   * @return stringValues
   */
  @javax.annotation.Nullable
  public List<String> getStringValues() {
    return stringValues;
  }

  public void setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomAttribute customAttribute = (CustomAttribute) o;
    return Objects.equals(this.filterable, customAttribute.filterable) &&
        Objects.equals(this.longValues, customAttribute.longValues) &&
        Objects.equals(this.stringValues, customAttribute.stringValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterable, longValues, stringValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomAttribute {\n");
    sb.append("    filterable: ").append(toIndentedString(filterable)).append("\n");
    sb.append("    longValues: ").append(toIndentedString(longValues)).append("\n");
    sb.append("    stringValues: ").append(toIndentedString(stringValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterable");
    openapiFields.add("longValues");
    openapiFields.add("stringValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomAttribute is not found in the empty JSON string", CustomAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("longValues") != null && !jsonObj.get("longValues").isJsonNull() && !jsonObj.get("longValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `longValues` to be an array in the JSON string but got `%s`", jsonObj.get("longValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stringValues") != null && !jsonObj.get("stringValues").isJsonNull() && !jsonObj.get("stringValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValues` to be an array in the JSON string but got `%s`", jsonObj.get("stringValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomAttribute>() {
           @Override
           public void write(JsonWriter out, CustomAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomAttribute
   * @throws IOException if the JSON string is invalid with respect to CustomAttribute
   */
  public static CustomAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomAttribute.class);
  }

  /**
   * Convert an instance of CustomAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

