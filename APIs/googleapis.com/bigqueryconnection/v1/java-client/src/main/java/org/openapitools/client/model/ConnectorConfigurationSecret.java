/*
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Secret value parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:12.015205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorConfigurationSecret {
  public static final String SERIALIZED_NAME_PLAINTEXT = "plaintext";
  @SerializedName(SERIALIZED_NAME_PLAINTEXT)
  private String plaintext;

  /**
   * Output only. Indicates type of secret. Can be used to check type of stored secret value even if it&#39;s &#x60;INPUT_ONLY&#x60;.
   */
  @JsonAdapter(SecretTypeEnum.Adapter.class)
  public enum SecretTypeEnum {
    SECRET_TYPE_UNSPECIFIED("SECRET_TYPE_UNSPECIFIED"),
    
    PLAINTEXT("PLAINTEXT");

    private String value;

    SecretTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretTypeEnum fromValue(String value) {
      for (SecretTypeEnum b : SecretTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecretTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECRET_TYPE = "secretType";
  @SerializedName(SERIALIZED_NAME_SECRET_TYPE)
  private SecretTypeEnum secretType;

  public ConnectorConfigurationSecret() {
  }

  public ConnectorConfigurationSecret(
     SecretTypeEnum secretType
  ) {
    this();
    this.secretType = secretType;
  }

  public ConnectorConfigurationSecret plaintext(String plaintext) {
    this.plaintext = plaintext;
    return this;
  }

  /**
   * Input only. Secret as plaintext.
   * @return plaintext
   */
  @javax.annotation.Nullable
  public String getPlaintext() {
    return plaintext;
  }

  public void setPlaintext(String plaintext) {
    this.plaintext = plaintext;
  }


  /**
   * Output only. Indicates type of secret. Can be used to check type of stored secret value even if it&#39;s &#x60;INPUT_ONLY&#x60;.
   * @return secretType
   */
  @javax.annotation.Nullable
  public SecretTypeEnum getSecretType() {
    return secretType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorConfigurationSecret connectorConfigurationSecret = (ConnectorConfigurationSecret) o;
    return Objects.equals(this.plaintext, connectorConfigurationSecret.plaintext) &&
        Objects.equals(this.secretType, connectorConfigurationSecret.secretType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plaintext, secretType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorConfigurationSecret {\n");
    sb.append("    plaintext: ").append(toIndentedString(plaintext)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plaintext");
    openapiFields.add("secretType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorConfigurationSecret
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorConfigurationSecret.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorConfigurationSecret is not found in the empty JSON string", ConnectorConfigurationSecret.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorConfigurationSecret.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorConfigurationSecret` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("plaintext") != null && !jsonObj.get("plaintext").isJsonNull()) && !jsonObj.get("plaintext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaintext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaintext").toString()));
      }
      if ((jsonObj.get("secretType") != null && !jsonObj.get("secretType").isJsonNull()) && !jsonObj.get("secretType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretType").toString()));
      }
      // validate the optional field `secretType`
      if (jsonObj.get("secretType") != null && !jsonObj.get("secretType").isJsonNull()) {
        SecretTypeEnum.validateJsonElement(jsonObj.get("secretType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorConfigurationSecret.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorConfigurationSecret' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorConfigurationSecret> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorConfigurationSecret.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorConfigurationSecret>() {
           @Override
           public void write(JsonWriter out, ConnectorConfigurationSecret value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorConfigurationSecret read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorConfigurationSecret given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorConfigurationSecret
   * @throws IOException if the JSON string is invalid with respect to ConnectorConfigurationSecret
   */
  public static ConnectorConfigurationSecret fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorConfigurationSecret.class);
  }

  /**
   * Convert an instance of ConnectorConfigurationSecret to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

