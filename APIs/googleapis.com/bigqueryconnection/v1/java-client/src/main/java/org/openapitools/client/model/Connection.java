/*
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AwsProperties;
import org.openapitools.client.model.AzureProperties;
import org.openapitools.client.model.CloudResourceProperties;
import org.openapitools.client.model.CloudSpannerProperties;
import org.openapitools.client.model.CloudSqlProperties;
import org.openapitools.client.model.ConnectorConfiguration;
import org.openapitools.client.model.SalesforceDataCloudProperties;
import org.openapitools.client.model.SparkProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters to establish connection with an external data source, except the credential attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:12.015205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connection {
  public static final String SERIALIZED_NAME_AWS = "aws";
  @SerializedName(SERIALIZED_NAME_AWS)
  private AwsProperties aws;

  public static final String SERIALIZED_NAME_AZURE = "azure";
  @SerializedName(SERIALIZED_NAME_AZURE)
  private AzureProperties azure;

  public static final String SERIALIZED_NAME_CLOUD_RESOURCE = "cloudResource";
  @SerializedName(SERIALIZED_NAME_CLOUD_RESOURCE)
  private CloudResourceProperties cloudResource;

  public static final String SERIALIZED_NAME_CLOUD_SPANNER = "cloudSpanner";
  @SerializedName(SERIALIZED_NAME_CLOUD_SPANNER)
  private CloudSpannerProperties cloudSpanner;

  public static final String SERIALIZED_NAME_CLOUD_SQL = "cloudSql";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL)
  private CloudSqlProperties cloudSql;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private ConnectorConfiguration _configuration;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HAS_CREDENTIAL = "hasCredential";
  @SerializedName(SERIALIZED_NAME_HAS_CREDENTIAL)
  private Boolean hasCredential;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private String lastModifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SALESFORCE_DATA_CLOUD = "salesforceDataCloud";
  @SerializedName(SERIALIZED_NAME_SALESFORCE_DATA_CLOUD)
  private SalesforceDataCloudProperties salesforceDataCloud;

  public static final String SERIALIZED_NAME_SPARK = "spark";
  @SerializedName(SERIALIZED_NAME_SPARK)
  private SparkProperties spark;

  public Connection() {
  }

  public Connection(
     String creationTime, 
     Boolean hasCredential, 
     String lastModifiedTime, 
     String name
  ) {
    this();
    this.creationTime = creationTime;
    this.hasCredential = hasCredential;
    this.lastModifiedTime = lastModifiedTime;
    this.name = name;
  }

  public Connection aws(AwsProperties aws) {
    this.aws = aws;
    return this;
  }

  /**
   * Get aws
   * @return aws
   */
  @javax.annotation.Nullable
  public AwsProperties getAws() {
    return aws;
  }

  public void setAws(AwsProperties aws) {
    this.aws = aws;
  }


  public Connection azure(AzureProperties azure) {
    this.azure = azure;
    return this;
  }

  /**
   * Get azure
   * @return azure
   */
  @javax.annotation.Nullable
  public AzureProperties getAzure() {
    return azure;
  }

  public void setAzure(AzureProperties azure) {
    this.azure = azure;
  }


  public Connection cloudResource(CloudResourceProperties cloudResource) {
    this.cloudResource = cloudResource;
    return this;
  }

  /**
   * Get cloudResource
   * @return cloudResource
   */
  @javax.annotation.Nullable
  public CloudResourceProperties getCloudResource() {
    return cloudResource;
  }

  public void setCloudResource(CloudResourceProperties cloudResource) {
    this.cloudResource = cloudResource;
  }


  public Connection cloudSpanner(CloudSpannerProperties cloudSpanner) {
    this.cloudSpanner = cloudSpanner;
    return this;
  }

  /**
   * Get cloudSpanner
   * @return cloudSpanner
   */
  @javax.annotation.Nullable
  public CloudSpannerProperties getCloudSpanner() {
    return cloudSpanner;
  }

  public void setCloudSpanner(CloudSpannerProperties cloudSpanner) {
    this.cloudSpanner = cloudSpanner;
  }


  public Connection cloudSql(CloudSqlProperties cloudSql) {
    this.cloudSql = cloudSql;
    return this;
  }

  /**
   * Get cloudSql
   * @return cloudSql
   */
  @javax.annotation.Nullable
  public CloudSqlProperties getCloudSql() {
    return cloudSql;
  }

  public void setCloudSql(CloudSqlProperties cloudSql) {
    this.cloudSql = cloudSql;
  }


  public Connection _configuration(ConnectorConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public ConnectorConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(ConnectorConfiguration _configuration) {
    this._configuration = _configuration;
  }


  /**
   * Output only. The creation timestamp of the connection.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  public Connection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User provided description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Connection friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * User provided display name for the connection.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  /**
   * Output only. True, if credential is configured for this connection.
   * @return hasCredential
   */
  @javax.annotation.Nullable
  public Boolean getHasCredential() {
    return hasCredential;
  }



  public Connection kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Optional. The Cloud KMS key that is used for encryption. Example: &#x60;projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]&#x60;
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  /**
   * Output only. The last update timestamp of the connection.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * Output only. The resource name of the connection in the form of: &#x60;projects/{project_id}/locations/{location_id}/connections/{connection_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Connection salesforceDataCloud(SalesforceDataCloudProperties salesforceDataCloud) {
    this.salesforceDataCloud = salesforceDataCloud;
    return this;
  }

  /**
   * Get salesforceDataCloud
   * @return salesforceDataCloud
   */
  @javax.annotation.Nullable
  public SalesforceDataCloudProperties getSalesforceDataCloud() {
    return salesforceDataCloud;
  }

  public void setSalesforceDataCloud(SalesforceDataCloudProperties salesforceDataCloud) {
    this.salesforceDataCloud = salesforceDataCloud;
  }


  public Connection spark(SparkProperties spark) {
    this.spark = spark;
    return this;
  }

  /**
   * Get spark
   * @return spark
   */
  @javax.annotation.Nullable
  public SparkProperties getSpark() {
    return spark;
  }

  public void setSpark(SparkProperties spark) {
    this.spark = spark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.aws, connection.aws) &&
        Objects.equals(this.azure, connection.azure) &&
        Objects.equals(this.cloudResource, connection.cloudResource) &&
        Objects.equals(this.cloudSpanner, connection.cloudSpanner) &&
        Objects.equals(this.cloudSql, connection.cloudSql) &&
        Objects.equals(this._configuration, connection._configuration) &&
        Objects.equals(this.creationTime, connection.creationTime) &&
        Objects.equals(this.description, connection.description) &&
        Objects.equals(this.friendlyName, connection.friendlyName) &&
        Objects.equals(this.hasCredential, connection.hasCredential) &&
        Objects.equals(this.kmsKeyName, connection.kmsKeyName) &&
        Objects.equals(this.lastModifiedTime, connection.lastModifiedTime) &&
        Objects.equals(this.name, connection.name) &&
        Objects.equals(this.salesforceDataCloud, connection.salesforceDataCloud) &&
        Objects.equals(this.spark, connection.spark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aws, azure, cloudResource, cloudSpanner, cloudSql, _configuration, creationTime, description, friendlyName, hasCredential, kmsKeyName, lastModifiedTime, name, salesforceDataCloud, spark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    sb.append("    aws: ").append(toIndentedString(aws)).append("\n");
    sb.append("    azure: ").append(toIndentedString(azure)).append("\n");
    sb.append("    cloudResource: ").append(toIndentedString(cloudResource)).append("\n");
    sb.append("    cloudSpanner: ").append(toIndentedString(cloudSpanner)).append("\n");
    sb.append("    cloudSql: ").append(toIndentedString(cloudSql)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    hasCredential: ").append(toIndentedString(hasCredential)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    salesforceDataCloud: ").append(toIndentedString(salesforceDataCloud)).append("\n");
    sb.append("    spark: ").append(toIndentedString(spark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aws");
    openapiFields.add("azure");
    openapiFields.add("cloudResource");
    openapiFields.add("cloudSpanner");
    openapiFields.add("cloudSql");
    openapiFields.add("configuration");
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("friendlyName");
    openapiFields.add("hasCredential");
    openapiFields.add("kmsKeyName");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("name");
    openapiFields.add("salesforceDataCloud");
    openapiFields.add("spark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connection is not found in the empty JSON string", Connection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aws`
      if (jsonObj.get("aws") != null && !jsonObj.get("aws").isJsonNull()) {
        AwsProperties.validateJsonElement(jsonObj.get("aws"));
      }
      // validate the optional field `azure`
      if (jsonObj.get("azure") != null && !jsonObj.get("azure").isJsonNull()) {
        AzureProperties.validateJsonElement(jsonObj.get("azure"));
      }
      // validate the optional field `cloudResource`
      if (jsonObj.get("cloudResource") != null && !jsonObj.get("cloudResource").isJsonNull()) {
        CloudResourceProperties.validateJsonElement(jsonObj.get("cloudResource"));
      }
      // validate the optional field `cloudSpanner`
      if (jsonObj.get("cloudSpanner") != null && !jsonObj.get("cloudSpanner").isJsonNull()) {
        CloudSpannerProperties.validateJsonElement(jsonObj.get("cloudSpanner"));
      }
      // validate the optional field `cloudSql`
      if (jsonObj.get("cloudSql") != null && !jsonObj.get("cloudSql").isJsonNull()) {
        CloudSqlProperties.validateJsonElement(jsonObj.get("cloudSql"));
      }
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        ConnectorConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) && !jsonObj.get("lastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `salesforceDataCloud`
      if (jsonObj.get("salesforceDataCloud") != null && !jsonObj.get("salesforceDataCloud").isJsonNull()) {
        SalesforceDataCloudProperties.validateJsonElement(jsonObj.get("salesforceDataCloud"));
      }
      // validate the optional field `spark`
      if (jsonObj.get("spark") != null && !jsonObj.get("spark").isJsonNull()) {
        SparkProperties.validateJsonElement(jsonObj.get("spark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connection.class));

       return (TypeAdapter<T>) new TypeAdapter<Connection>() {
           @Override
           public void write(JsonWriter out, Connection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connection
   * @throws IOException if the JSON string is invalid with respect to Connection
   */
  public static Connection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connection.class);
  }

  /**
   * Convert an instance of Connection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

