# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudSpannerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: str=None, database_role: str=None, max_parallelism: int=None, use_data_boost: bool=None, use_parallelism: bool=None, use_serverless_analytics: bool=None):
        """CloudSpannerProperties - a model defined in OpenAPI

        :param database: The database of this CloudSpannerProperties.
        :param database_role: The database_role of this CloudSpannerProperties.
        :param max_parallelism: The max_parallelism of this CloudSpannerProperties.
        :param use_data_boost: The use_data_boost of this CloudSpannerProperties.
        :param use_parallelism: The use_parallelism of this CloudSpannerProperties.
        :param use_serverless_analytics: The use_serverless_analytics of this CloudSpannerProperties.
        """
        self.openapi_types = {
            'database': str,
            'database_role': str,
            'max_parallelism': int,
            'use_data_boost': bool,
            'use_parallelism': bool,
            'use_serverless_analytics': bool
        }

        self.attribute_map = {
            'database': 'database',
            'database_role': 'databaseRole',
            'max_parallelism': 'maxParallelism',
            'use_data_boost': 'useDataBoost',
            'use_parallelism': 'useParallelism',
            'use_serverless_analytics': 'useServerlessAnalytics'
        }

        self._database = database
        self._database_role = database_role
        self._max_parallelism = max_parallelism
        self._use_data_boost = use_data_boost
        self._use_parallelism = use_parallelism
        self._use_serverless_analytics = use_serverless_analytics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudSpannerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudSpannerProperties of this CloudSpannerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this CloudSpannerProperties.

        Cloud Spanner database in the form `project/instance/database'

        :return: The database of this CloudSpannerProperties.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this CloudSpannerProperties.

        Cloud Spanner database in the form `project/instance/database'

        :param database: The database of this CloudSpannerProperties.
        :type database: str
        """

        self._database = database

    @property
    def database_role(self):
        """Gets the database_role of this CloudSpannerProperties.

        Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.

        :return: The database_role of this CloudSpannerProperties.
        :rtype: str
        """
        return self._database_role

    @database_role.setter
    def database_role(self, database_role):
        """Sets the database_role of this CloudSpannerProperties.

        Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.

        :param database_role: The database_role of this CloudSpannerProperties.
        :type database_role: str
        """

        self._database_role = database_role

    @property
    def max_parallelism(self):
        """Gets the max_parallelism of this CloudSpannerProperties.

        Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.

        :return: The max_parallelism of this CloudSpannerProperties.
        :rtype: int
        """
        return self._max_parallelism

    @max_parallelism.setter
    def max_parallelism(self, max_parallelism):
        """Sets the max_parallelism of this CloudSpannerProperties.

        Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.

        :param max_parallelism: The max_parallelism of this CloudSpannerProperties.
        :type max_parallelism: int
        """

        self._max_parallelism = max_parallelism

    @property
    def use_data_boost(self):
        """Gets the use_data_boost of this CloudSpannerProperties.

        If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.

        :return: The use_data_boost of this CloudSpannerProperties.
        :rtype: bool
        """
        return self._use_data_boost

    @use_data_boost.setter
    def use_data_boost(self, use_data_boost):
        """Sets the use_data_boost of this CloudSpannerProperties.

        If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.

        :param use_data_boost: The use_data_boost of this CloudSpannerProperties.
        :type use_data_boost: bool
        """

        self._use_data_boost = use_data_boost

    @property
    def use_parallelism(self):
        """Gets the use_parallelism of this CloudSpannerProperties.

        If parallelism should be used when reading from Cloud Spanner

        :return: The use_parallelism of this CloudSpannerProperties.
        :rtype: bool
        """
        return self._use_parallelism

    @use_parallelism.setter
    def use_parallelism(self, use_parallelism):
        """Sets the use_parallelism of this CloudSpannerProperties.

        If parallelism should be used when reading from Cloud Spanner

        :param use_parallelism: The use_parallelism of this CloudSpannerProperties.
        :type use_parallelism: bool
        """

        self._use_parallelism = use_parallelism

    @property
    def use_serverless_analytics(self):
        """Gets the use_serverless_analytics of this CloudSpannerProperties.

        Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.

        :return: The use_serverless_analytics of this CloudSpannerProperties.
        :rtype: bool
        """
        return self._use_serverless_analytics

    @use_serverless_analytics.setter
    def use_serverless_analytics(self, use_serverless_analytics):
        """Sets the use_serverless_analytics of this CloudSpannerProperties.

        Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.

        :param use_serverless_analytics: The use_serverless_analytics of this CloudSpannerProperties.
        :type use_serverless_analytics: bool
        """

        self._use_serverless_analytics = use_serverless_analytics
