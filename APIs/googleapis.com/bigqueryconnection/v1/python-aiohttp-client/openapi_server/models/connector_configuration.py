# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_configuration_authentication import ConnectorConfigurationAuthentication
from openapi_server.models.connector_configuration_endpoint import ConnectorConfigurationEndpoint
from openapi_server import util


class ConnectorConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: ConnectorConfigurationAuthentication=None, connector_id: str=None, endpoint: ConnectorConfigurationEndpoint=None):
        """ConnectorConfiguration - a model defined in OpenAPI

        :param authentication: The authentication of this ConnectorConfiguration.
        :param connector_id: The connector_id of this ConnectorConfiguration.
        :param endpoint: The endpoint of this ConnectorConfiguration.
        """
        self.openapi_types = {
            'authentication': ConnectorConfigurationAuthentication,
            'connector_id': str,
            'endpoint': ConnectorConfigurationEndpoint
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'connector_id': 'connectorId',
            'endpoint': 'endpoint'
        }

        self._authentication = authentication
        self._connector_id = connector_id
        self._endpoint = endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorConfiguration of this ConnectorConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this ConnectorConfiguration.


        :return: The authentication of this ConnectorConfiguration.
        :rtype: ConnectorConfigurationAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ConnectorConfiguration.


        :param authentication: The authentication of this ConnectorConfiguration.
        :type authentication: ConnectorConfigurationAuthentication
        """

        self._authentication = authentication

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorConfiguration.

        Required. Immutable. The ID of the Connector these parameters are configured for.

        :return: The connector_id of this ConnectorConfiguration.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorConfiguration.

        Required. Immutable. The ID of the Connector these parameters are configured for.

        :param connector_id: The connector_id of this ConnectorConfiguration.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def endpoint(self):
        """Gets the endpoint of this ConnectorConfiguration.


        :return: The endpoint of this ConnectorConfiguration.
        :rtype: ConnectorConfigurationEndpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ConnectorConfiguration.


        :param endpoint: The endpoint of this ConnectorConfiguration.
        :type endpoint: ConnectorConfigurationEndpoint
        """

        self._endpoint = endpoint
