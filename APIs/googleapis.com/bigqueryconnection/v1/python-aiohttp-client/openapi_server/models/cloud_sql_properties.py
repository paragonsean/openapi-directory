# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_sql_credential import CloudSqlCredential
from openapi_server import util


class CloudSqlProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credential: CloudSqlCredential=None, database: str=None, instance_id: str=None, service_account_id: str=None, type: str=None):
        """CloudSqlProperties - a model defined in OpenAPI

        :param credential: The credential of this CloudSqlProperties.
        :param database: The database of this CloudSqlProperties.
        :param instance_id: The instance_id of this CloudSqlProperties.
        :param service_account_id: The service_account_id of this CloudSqlProperties.
        :param type: The type of this CloudSqlProperties.
        """
        self.openapi_types = {
            'credential': CloudSqlCredential,
            'database': str,
            'instance_id': str,
            'service_account_id': str,
            'type': str
        }

        self.attribute_map = {
            'credential': 'credential',
            'database': 'database',
            'instance_id': 'instanceId',
            'service_account_id': 'serviceAccountId',
            'type': 'type'
        }

        self._credential = credential
        self._database = database
        self._instance_id = instance_id
        self._service_account_id = service_account_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudSqlProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudSqlProperties of this CloudSqlProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential(self):
        """Gets the credential of this CloudSqlProperties.


        :return: The credential of this CloudSqlProperties.
        :rtype: CloudSqlCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this CloudSqlProperties.


        :param credential: The credential of this CloudSqlProperties.
        :type credential: CloudSqlCredential
        """

        self._credential = credential

    @property
    def database(self):
        """Gets the database of this CloudSqlProperties.

        Database name.

        :return: The database of this CloudSqlProperties.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this CloudSqlProperties.

        Database name.

        :param database: The database of this CloudSqlProperties.
        :type database: str
        """

        self._database = database

    @property
    def instance_id(self):
        """Gets the instance_id of this CloudSqlProperties.

        Cloud SQL instance ID in the form `project:location:instance`.

        :return: The instance_id of this CloudSqlProperties.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this CloudSqlProperties.

        Cloud SQL instance ID in the form `project:location:instance`.

        :param instance_id: The instance_id of this CloudSqlProperties.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def service_account_id(self):
        """Gets the service_account_id of this CloudSqlProperties.

        Output only. The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.

        :return: The service_account_id of this CloudSqlProperties.
        :rtype: str
        """
        return self._service_account_id

    @service_account_id.setter
    def service_account_id(self, service_account_id):
        """Sets the service_account_id of this CloudSqlProperties.

        Output only. The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.

        :param service_account_id: The service_account_id of this CloudSqlProperties.
        :type service_account_id: str
        """

        self._service_account_id = service_account_id

    @property
    def type(self):
        """Gets the type of this CloudSqlProperties.

        Type of the Cloud SQL database.

        :return: The type of this CloudSqlProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudSqlProperties.

        Type of the Cloud SQL database.

        :param type: The type of this CloudSqlProperties.
        :type type: str
        """
        allowed_values = ["DATABASE_TYPE_UNSPECIFIED", "POSTGRES", "MYSQL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
