# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metastore_service_config import MetastoreServiceConfig
from openapi_server.models.spark_history_server_config import SparkHistoryServerConfig
from openapi_server import util


class SparkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metastore_service_config: MetastoreServiceConfig=None, service_account_id: str=None, spark_history_server_config: SparkHistoryServerConfig=None):
        """SparkProperties - a model defined in OpenAPI

        :param metastore_service_config: The metastore_service_config of this SparkProperties.
        :param service_account_id: The service_account_id of this SparkProperties.
        :param spark_history_server_config: The spark_history_server_config of this SparkProperties.
        """
        self.openapi_types = {
            'metastore_service_config': MetastoreServiceConfig,
            'service_account_id': str,
            'spark_history_server_config': SparkHistoryServerConfig
        }

        self.attribute_map = {
            'metastore_service_config': 'metastoreServiceConfig',
            'service_account_id': 'serviceAccountId',
            'spark_history_server_config': 'sparkHistoryServerConfig'
        }

        self._metastore_service_config = metastore_service_config
        self._service_account_id = service_account_id
        self._spark_history_server_config = spark_history_server_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparkProperties of this SparkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metastore_service_config(self):
        """Gets the metastore_service_config of this SparkProperties.


        :return: The metastore_service_config of this SparkProperties.
        :rtype: MetastoreServiceConfig
        """
        return self._metastore_service_config

    @metastore_service_config.setter
    def metastore_service_config(self, metastore_service_config):
        """Sets the metastore_service_config of this SparkProperties.


        :param metastore_service_config: The metastore_service_config of this SparkProperties.
        :type metastore_service_config: MetastoreServiceConfig
        """

        self._metastore_service_config = metastore_service_config

    @property
    def service_account_id(self):
        """Gets the service_account_id of this SparkProperties.

        Output only. The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com

        :return: The service_account_id of this SparkProperties.
        :rtype: str
        """
        return self._service_account_id

    @service_account_id.setter
    def service_account_id(self, service_account_id):
        """Sets the service_account_id of this SparkProperties.

        Output only. The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com

        :param service_account_id: The service_account_id of this SparkProperties.
        :type service_account_id: str
        """

        self._service_account_id = service_account_id

    @property
    def spark_history_server_config(self):
        """Gets the spark_history_server_config of this SparkProperties.


        :return: The spark_history_server_config of this SparkProperties.
        :rtype: SparkHistoryServerConfig
        """
        return self._spark_history_server_config

    @spark_history_server_config.setter
    def spark_history_server_config(self, spark_history_server_config):
        """Sets the spark_history_server_config of this SparkProperties.


        :param spark_history_server_config: The spark_history_server_config of this SparkProperties.
        :type spark_history_server_config: SparkHistoryServerConfig
        """

        self._spark_history_server_config = spark_history_server_config
