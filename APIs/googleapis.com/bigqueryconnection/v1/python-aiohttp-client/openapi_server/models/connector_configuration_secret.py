# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorConfigurationSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plaintext: str=None, secret_type: str=None):
        """ConnectorConfigurationSecret - a model defined in OpenAPI

        :param plaintext: The plaintext of this ConnectorConfigurationSecret.
        :param secret_type: The secret_type of this ConnectorConfigurationSecret.
        """
        self.openapi_types = {
            'plaintext': str,
            'secret_type': str
        }

        self.attribute_map = {
            'plaintext': 'plaintext',
            'secret_type': 'secretType'
        }

        self._plaintext = plaintext
        self._secret_type = secret_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorConfigurationSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorConfigurationSecret of this ConnectorConfigurationSecret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plaintext(self):
        """Gets the plaintext of this ConnectorConfigurationSecret.

        Input only. Secret as plaintext.

        :return: The plaintext of this ConnectorConfigurationSecret.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this ConnectorConfigurationSecret.

        Input only. Secret as plaintext.

        :param plaintext: The plaintext of this ConnectorConfigurationSecret.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def secret_type(self):
        """Gets the secret_type of this ConnectorConfigurationSecret.

        Output only. Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.

        :return: The secret_type of this ConnectorConfigurationSecret.
        :rtype: str
        """
        return self._secret_type

    @secret_type.setter
    def secret_type(self, secret_type):
        """Sets the secret_type of this ConnectorConfigurationSecret.

        Output only. Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.

        :param secret_type: The secret_type of this ConnectorConfigurationSecret.
        :type secret_type: str
        """
        allowed_values = ["SECRET_TYPE_UNSPECIFIED", "PLAINTEXT"]  # noqa: E501
        if secret_type not in allowed_values:
            raise ValueError(
                "Invalid value for `secret_type` ({0}), must be one of {1}"
                .format(secret_type, allowed_values)
            )

        self._secret_type = secret_type
