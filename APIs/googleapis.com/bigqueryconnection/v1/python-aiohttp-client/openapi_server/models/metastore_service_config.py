# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetastoreServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metastore_service: str=None):
        """MetastoreServiceConfig - a model defined in OpenAPI

        :param metastore_service: The metastore_service of this MetastoreServiceConfig.
        """
        self.openapi_types = {
            'metastore_service': str
        }

        self.attribute_map = {
            'metastore_service': 'metastoreService'
        }

        self._metastore_service = metastore_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetastoreServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetastoreServiceConfig of this MetastoreServiceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metastore_service(self):
        """Gets the metastore_service of this MetastoreServiceConfig.

        Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`

        :return: The metastore_service of this MetastoreServiceConfig.
        :rtype: str
        """
        return self._metastore_service

    @metastore_service.setter
    def metastore_service(self, metastore_service):
        """Sets the metastore_service of this MetastoreServiceConfig.

        Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`

        :param metastore_service: The metastore_service of this MetastoreServiceConfig.
        :type metastore_service: str
        """

        self._metastore_service = metastore_service
