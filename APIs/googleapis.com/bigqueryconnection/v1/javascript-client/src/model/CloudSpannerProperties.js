/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CloudSpannerProperties model module.
 * @module model/CloudSpannerProperties
 * @version v1
 */
class CloudSpannerProperties {
    /**
     * Constructs a new <code>CloudSpannerProperties</code>.
     * Connection properties specific to Cloud Spanner.
     * @alias module:model/CloudSpannerProperties
     */
    constructor() { 
        
        CloudSpannerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudSpannerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudSpannerProperties} obj Optional instance to populate.
     * @return {module:model/CloudSpannerProperties} The populated <code>CloudSpannerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudSpannerProperties();

            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'String');
            }
            if (data.hasOwnProperty('databaseRole')) {
                obj['databaseRole'] = ApiClient.convertToType(data['databaseRole'], 'String');
            }
            if (data.hasOwnProperty('maxParallelism')) {
                obj['maxParallelism'] = ApiClient.convertToType(data['maxParallelism'], 'Number');
            }
            if (data.hasOwnProperty('useDataBoost')) {
                obj['useDataBoost'] = ApiClient.convertToType(data['useDataBoost'], 'Boolean');
            }
            if (data.hasOwnProperty('useParallelism')) {
                obj['useParallelism'] = ApiClient.convertToType(data['useParallelism'], 'Boolean');
            }
            if (data.hasOwnProperty('useServerlessAnalytics')) {
                obj['useServerlessAnalytics'] = ApiClient.convertToType(data['useServerlessAnalytics'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudSpannerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudSpannerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['database'] && !(typeof data['database'] === 'string' || data['database'] instanceof String)) {
            throw new Error("Expected the field `database` to be a primitive type in the JSON string but got " + data['database']);
        }
        // ensure the json data is a string
        if (data['databaseRole'] && !(typeof data['databaseRole'] === 'string' || data['databaseRole'] instanceof String)) {
            throw new Error("Expected the field `databaseRole` to be a primitive type in the JSON string but got " + data['databaseRole']);
        }

        return true;
    }


}



/**
 * Cloud Spanner database in the form `project/instance/database'
 * @member {String} database
 */
CloudSpannerProperties.prototype['database'] = undefined;

/**
 * Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
 * @member {String} databaseRole
 */
CloudSpannerProperties.prototype['databaseRole'] = undefined;

/**
 * Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
 * @member {Number} maxParallelism
 */
CloudSpannerProperties.prototype['maxParallelism'] = undefined;

/**
 * If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
 * @member {Boolean} useDataBoost
 */
CloudSpannerProperties.prototype['useDataBoost'] = undefined;

/**
 * If parallelism should be used when reading from Cloud Spanner
 * @member {Boolean} useParallelism
 */
CloudSpannerProperties.prototype['useParallelism'] = undefined;

/**
 * Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
 * @member {Boolean} useServerlessAnalytics
 */
CloudSpannerProperties.prototype['useServerlessAnalytics'] = undefined;






export default CloudSpannerProperties;

