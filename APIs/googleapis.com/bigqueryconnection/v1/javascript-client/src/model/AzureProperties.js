/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AzureProperties model module.
 * @module model/AzureProperties
 * @version v1
 */
class AzureProperties {
    /**
     * Constructs a new <code>AzureProperties</code>.
     * Container for connection properties specific to Azure.
     * @alias module:model/AzureProperties
     */
    constructor() { 
        
        AzureProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AzureProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureProperties} obj Optional instance to populate.
     * @return {module:model/AzureProperties} The populated <code>AzureProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureProperties();

            if (data.hasOwnProperty('application')) {
                obj['application'] = ApiClient.convertToType(data['application'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('customerTenantId')) {
                obj['customerTenantId'] = ApiClient.convertToType(data['customerTenantId'], 'String');
            }
            if (data.hasOwnProperty('federatedApplicationClientId')) {
                obj['federatedApplicationClientId'] = ApiClient.convertToType(data['federatedApplicationClientId'], 'String');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('redirectUri')) {
                obj['redirectUri'] = ApiClient.convertToType(data['redirectUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['application'] && !(typeof data['application'] === 'string' || data['application'] instanceof String)) {
            throw new Error("Expected the field `application` to be a primitive type in the JSON string but got " + data['application']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['customerTenantId'] && !(typeof data['customerTenantId'] === 'string' || data['customerTenantId'] instanceof String)) {
            throw new Error("Expected the field `customerTenantId` to be a primitive type in the JSON string but got " + data['customerTenantId']);
        }
        // ensure the json data is a string
        if (data['federatedApplicationClientId'] && !(typeof data['federatedApplicationClientId'] === 'string' || data['federatedApplicationClientId'] instanceof String)) {
            throw new Error("Expected the field `federatedApplicationClientId` to be a primitive type in the JSON string but got " + data['federatedApplicationClientId']);
        }
        // ensure the json data is a string
        if (data['identity'] && !(typeof data['identity'] === 'string' || data['identity'] instanceof String)) {
            throw new Error("Expected the field `identity` to be a primitive type in the JSON string but got " + data['identity']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['redirectUri'] && !(typeof data['redirectUri'] === 'string' || data['redirectUri'] instanceof String)) {
            throw new Error("Expected the field `redirectUri` to be a primitive type in the JSON string but got " + data['redirectUri']);
        }

        return true;
    }


}



/**
 * Output only. The name of the Azure Active Directory Application.
 * @member {String} application
 */
AzureProperties.prototype['application'] = undefined;

/**
 * Output only. The client id of the Azure Active Directory Application.
 * @member {String} clientId
 */
AzureProperties.prototype['clientId'] = undefined;

/**
 * The id of customer's directory that host the data.
 * @member {String} customerTenantId
 */
AzureProperties.prototype['customerTenantId'] = undefined;

/**
 * The client ID of the user's Azure Active Directory Application used for a federated connection.
 * @member {String} federatedApplicationClientId
 */
AzureProperties.prototype['federatedApplicationClientId'] = undefined;

/**
 * Output only. A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
 * @member {String} identity
 */
AzureProperties.prototype['identity'] = undefined;

/**
 * Output only. The object id of the Azure Active Directory Application.
 * @member {String} objectId
 */
AzureProperties.prototype['objectId'] = undefined;

/**
 * The URL user will be redirected to after granting consent during connection setup.
 * @member {String} redirectUri
 */
AzureProperties.prototype['redirectUri'] = undefined;






export default AzureProperties;

