/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AwsProperties from './AwsProperties';
import AzureProperties from './AzureProperties';
import CloudResourceProperties from './CloudResourceProperties';
import CloudSpannerProperties from './CloudSpannerProperties';
import CloudSqlProperties from './CloudSqlProperties';
import ConnectorConfiguration from './ConnectorConfiguration';
import SalesforceDataCloudProperties from './SalesforceDataCloudProperties';
import SparkProperties from './SparkProperties';

/**
 * The Connection model module.
 * @module model/Connection
 * @version v1
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * Configuration parameters to establish connection with an external data source, except the credential attributes.
     * @alias module:model/Connection
     */
    constructor() { 
        
        Connection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();

            if (data.hasOwnProperty('aws')) {
                obj['aws'] = AwsProperties.constructFromObject(data['aws']);
            }
            if (data.hasOwnProperty('azure')) {
                obj['azure'] = AzureProperties.constructFromObject(data['azure']);
            }
            if (data.hasOwnProperty('cloudResource')) {
                obj['cloudResource'] = CloudResourceProperties.constructFromObject(data['cloudResource']);
            }
            if (data.hasOwnProperty('cloudSpanner')) {
                obj['cloudSpanner'] = CloudSpannerProperties.constructFromObject(data['cloudSpanner']);
            }
            if (data.hasOwnProperty('cloudSql')) {
                obj['cloudSql'] = CloudSqlProperties.constructFromObject(data['cloudSql']);
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ConnectorConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('hasCredential')) {
                obj['hasCredential'] = ApiClient.convertToType(data['hasCredential'], 'Boolean');
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('salesforceDataCloud')) {
                obj['salesforceDataCloud'] = SalesforceDataCloudProperties.constructFromObject(data['salesforceDataCloud']);
            }
            if (data.hasOwnProperty('spark')) {
                obj['spark'] = SparkProperties.constructFromObject(data['spark']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connection</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aws`
        if (data['aws']) { // data not null
          AwsProperties.validateJSON(data['aws']);
        }
        // validate the optional field `azure`
        if (data['azure']) { // data not null
          AzureProperties.validateJSON(data['azure']);
        }
        // validate the optional field `cloudResource`
        if (data['cloudResource']) { // data not null
          CloudResourceProperties.validateJSON(data['cloudResource']);
        }
        // validate the optional field `cloudSpanner`
        if (data['cloudSpanner']) { // data not null
          CloudSpannerProperties.validateJSON(data['cloudSpanner']);
        }
        // validate the optional field `cloudSql`
        if (data['cloudSql']) { // data not null
          CloudSqlProperties.validateJSON(data['cloudSql']);
        }
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          ConnectorConfiguration.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['lastModifiedTime'] && !(typeof data['lastModifiedTime'] === 'string' || data['lastModifiedTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got " + data['lastModifiedTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `salesforceDataCloud`
        if (data['salesforceDataCloud']) { // data not null
          SalesforceDataCloudProperties.validateJSON(data['salesforceDataCloud']);
        }
        // validate the optional field `spark`
        if (data['spark']) { // data not null
          SparkProperties.validateJSON(data['spark']);
        }

        return true;
    }


}



/**
 * @member {module:model/AwsProperties} aws
 */
Connection.prototype['aws'] = undefined;

/**
 * @member {module:model/AzureProperties} azure
 */
Connection.prototype['azure'] = undefined;

/**
 * @member {module:model/CloudResourceProperties} cloudResource
 */
Connection.prototype['cloudResource'] = undefined;

/**
 * @member {module:model/CloudSpannerProperties} cloudSpanner
 */
Connection.prototype['cloudSpanner'] = undefined;

/**
 * @member {module:model/CloudSqlProperties} cloudSql
 */
Connection.prototype['cloudSql'] = undefined;

/**
 * @member {module:model/ConnectorConfiguration} configuration
 */
Connection.prototype['configuration'] = undefined;

/**
 * Output only. The creation timestamp of the connection.
 * @member {String} creationTime
 */
Connection.prototype['creationTime'] = undefined;

/**
 * User provided description.
 * @member {String} description
 */
Connection.prototype['description'] = undefined;

/**
 * User provided display name for the connection.
 * @member {String} friendlyName
 */
Connection.prototype['friendlyName'] = undefined;

/**
 * Output only. True, if credential is configured for this connection.
 * @member {Boolean} hasCredential
 */
Connection.prototype['hasCredential'] = undefined;

/**
 * Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
 * @member {String} kmsKeyName
 */
Connection.prototype['kmsKeyName'] = undefined;

/**
 * Output only. The last update timestamp of the connection.
 * @member {String} lastModifiedTime
 */
Connection.prototype['lastModifiedTime'] = undefined;

/**
 * Output only. The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
 * @member {String} name
 */
Connection.prototype['name'] = undefined;

/**
 * @member {module:model/SalesforceDataCloudProperties} salesforceDataCloud
 */
Connection.prototype['salesforceDataCloud'] = undefined;

/**
 * @member {module:model/SparkProperties} spark
 */
Connection.prototype['spark'] = undefined;






export default Connection;

