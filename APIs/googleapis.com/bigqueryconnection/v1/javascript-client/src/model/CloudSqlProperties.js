/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudSqlCredential from './CloudSqlCredential';

/**
 * The CloudSqlProperties model module.
 * @module model/CloudSqlProperties
 * @version v1
 */
class CloudSqlProperties {
    /**
     * Constructs a new <code>CloudSqlProperties</code>.
     * Connection properties specific to the Cloud SQL.
     * @alias module:model/CloudSqlProperties
     */
    constructor() { 
        
        CloudSqlProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudSqlProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudSqlProperties} obj Optional instance to populate.
     * @return {module:model/CloudSqlProperties} The populated <code>CloudSqlProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudSqlProperties();

            if (data.hasOwnProperty('credential')) {
                obj['credential'] = CloudSqlCredential.constructFromObject(data['credential']);
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountId')) {
                obj['serviceAccountId'] = ApiClient.convertToType(data['serviceAccountId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudSqlProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudSqlProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `credential`
        if (data['credential']) { // data not null
          CloudSqlCredential.validateJSON(data['credential']);
        }
        // ensure the json data is a string
        if (data['database'] && !(typeof data['database'] === 'string' || data['database'] instanceof String)) {
            throw new Error("Expected the field `database` to be a primitive type in the JSON string but got " + data['database']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['serviceAccountId'] && !(typeof data['serviceAccountId'] === 'string' || data['serviceAccountId'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountId` to be a primitive type in the JSON string but got " + data['serviceAccountId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/CloudSqlCredential} credential
 */
CloudSqlProperties.prototype['credential'] = undefined;

/**
 * Database name.
 * @member {String} database
 */
CloudSqlProperties.prototype['database'] = undefined;

/**
 * Cloud SQL instance ID in the form `project:location:instance`.
 * @member {String} instanceId
 */
CloudSqlProperties.prototype['instanceId'] = undefined;

/**
 * Output only. The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
 * @member {String} serviceAccountId
 */
CloudSqlProperties.prototype['serviceAccountId'] = undefined;

/**
 * Type of the Cloud SQL database.
 * @member {module:model/CloudSqlProperties.TypeEnum} type
 */
CloudSqlProperties.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CloudSqlProperties['TypeEnum'] = {

    /**
     * value: "DATABASE_TYPE_UNSPECIFIED"
     * @const
     */
    "DATABASE_TYPE_UNSPECIFIED": "DATABASE_TYPE_UNSPECIFIED",

    /**
     * value: "POSTGRES"
     * @const
     */
    "POSTGRES": "POSTGRES",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL"
};



export default CloudSqlProperties;

