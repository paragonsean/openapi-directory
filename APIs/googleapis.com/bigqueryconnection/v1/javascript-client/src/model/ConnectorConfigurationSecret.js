/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectorConfigurationSecret model module.
 * @module model/ConnectorConfigurationSecret
 * @version v1
 */
class ConnectorConfigurationSecret {
    /**
     * Constructs a new <code>ConnectorConfigurationSecret</code>.
     * Secret value parameter.
     * @alias module:model/ConnectorConfigurationSecret
     */
    constructor() { 
        
        ConnectorConfigurationSecret.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorConfigurationSecret</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorConfigurationSecret} obj Optional instance to populate.
     * @return {module:model/ConnectorConfigurationSecret} The populated <code>ConnectorConfigurationSecret</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorConfigurationSecret();

            if (data.hasOwnProperty('plaintext')) {
                obj['plaintext'] = ApiClient.convertToType(data['plaintext'], 'String');
            }
            if (data.hasOwnProperty('secretType')) {
                obj['secretType'] = ApiClient.convertToType(data['secretType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorConfigurationSecret</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorConfigurationSecret</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['plaintext'] && !(typeof data['plaintext'] === 'string' || data['plaintext'] instanceof String)) {
            throw new Error("Expected the field `plaintext` to be a primitive type in the JSON string but got " + data['plaintext']);
        }
        // ensure the json data is a string
        if (data['secretType'] && !(typeof data['secretType'] === 'string' || data['secretType'] instanceof String)) {
            throw new Error("Expected the field `secretType` to be a primitive type in the JSON string but got " + data['secretType']);
        }

        return true;
    }


}



/**
 * Input only. Secret as plaintext.
 * @member {String} plaintext
 */
ConnectorConfigurationSecret.prototype['plaintext'] = undefined;

/**
 * Output only. Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.
 * @member {module:model/ConnectorConfigurationSecret.SecretTypeEnum} secretType
 */
ConnectorConfigurationSecret.prototype['secretType'] = undefined;





/**
 * Allowed values for the <code>secretType</code> property.
 * @enum {String}
 * @readonly
 */
ConnectorConfigurationSecret['SecretTypeEnum'] = {

    /**
     * value: "SECRET_TYPE_UNSPECIFIED"
     * @const
     */
    "SECRET_TYPE_UNSPECIFIED": "SECRET_TYPE_UNSPECIFIED",

    /**
     * value: "PLAINTEXT"
     * @const
     */
    "PLAINTEXT": "PLAINTEXT"
};



export default ConnectorConfigurationSecret;

