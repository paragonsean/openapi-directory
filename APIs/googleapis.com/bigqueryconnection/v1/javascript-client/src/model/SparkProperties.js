/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetastoreServiceConfig from './MetastoreServiceConfig';
import SparkHistoryServerConfig from './SparkHistoryServerConfig';

/**
 * The SparkProperties model module.
 * @module model/SparkProperties
 * @version v1
 */
class SparkProperties {
    /**
     * Constructs a new <code>SparkProperties</code>.
     * Container for connection properties to execute stored procedures for Apache Spark.
     * @alias module:model/SparkProperties
     */
    constructor() { 
        
        SparkProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SparkProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SparkProperties} obj Optional instance to populate.
     * @return {module:model/SparkProperties} The populated <code>SparkProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SparkProperties();

            if (data.hasOwnProperty('metastoreServiceConfig')) {
                obj['metastoreServiceConfig'] = MetastoreServiceConfig.constructFromObject(data['metastoreServiceConfig']);
            }
            if (data.hasOwnProperty('serviceAccountId')) {
                obj['serviceAccountId'] = ApiClient.convertToType(data['serviceAccountId'], 'String');
            }
            if (data.hasOwnProperty('sparkHistoryServerConfig')) {
                obj['sparkHistoryServerConfig'] = SparkHistoryServerConfig.constructFromObject(data['sparkHistoryServerConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SparkProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SparkProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `metastoreServiceConfig`
        if (data['metastoreServiceConfig']) { // data not null
          MetastoreServiceConfig.validateJSON(data['metastoreServiceConfig']);
        }
        // ensure the json data is a string
        if (data['serviceAccountId'] && !(typeof data['serviceAccountId'] === 'string' || data['serviceAccountId'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountId` to be a primitive type in the JSON string but got " + data['serviceAccountId']);
        }
        // validate the optional field `sparkHistoryServerConfig`
        if (data['sparkHistoryServerConfig']) { // data not null
          SparkHistoryServerConfig.validateJSON(data['sparkHistoryServerConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/MetastoreServiceConfig} metastoreServiceConfig
 */
SparkProperties.prototype['metastoreServiceConfig'] = undefined;

/**
 * Output only. The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
 * @member {String} serviceAccountId
 */
SparkProperties.prototype['serviceAccountId'] = undefined;

/**
 * @member {module:model/SparkHistoryServerConfig} sparkHistoryServerConfig
 */
SparkProperties.prototype['sparkHistoryServerConfig'] = undefined;






export default SparkProperties;

