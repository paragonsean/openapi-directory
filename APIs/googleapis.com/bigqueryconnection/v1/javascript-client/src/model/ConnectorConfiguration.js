/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorConfigurationAuthentication from './ConnectorConfigurationAuthentication';
import ConnectorConfigurationEndpoint from './ConnectorConfigurationEndpoint';

/**
 * The ConnectorConfiguration model module.
 * @module model/ConnectorConfiguration
 * @version v1
 */
class ConnectorConfiguration {
    /**
     * Constructs a new <code>ConnectorConfiguration</code>.
     * Represents concrete parameter values for Connector Configuration.
     * @alias module:model/ConnectorConfiguration
     */
    constructor() { 
        
        ConnectorConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorConfiguration} obj Optional instance to populate.
     * @return {module:model/ConnectorConfiguration} The populated <code>ConnectorConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorConfiguration();

            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = ConnectorConfigurationAuthentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ConnectorConfigurationEndpoint.constructFromObject(data['endpoint']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          ConnectorConfigurationAuthentication.validateJSON(data['authentication']);
        }
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // validate the optional field `endpoint`
        if (data['endpoint']) { // data not null
          ConnectorConfigurationEndpoint.validateJSON(data['endpoint']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConnectorConfigurationAuthentication} authentication
 */
ConnectorConfiguration.prototype['authentication'] = undefined;

/**
 * Required. Immutable. The ID of the Connector these parameters are configured for.
 * @member {String} connectorId
 */
ConnectorConfiguration.prototype['connectorId'] = undefined;

/**
 * @member {module:model/ConnectorConfigurationEndpoint} endpoint
 */
ConnectorConfiguration.prototype['endpoint'] = undefined;






export default ConnectorConfiguration;

