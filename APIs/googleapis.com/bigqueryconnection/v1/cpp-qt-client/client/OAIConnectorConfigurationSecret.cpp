/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorConfigurationSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorConfigurationSecret::OAIConnectorConfigurationSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorConfigurationSecret::OAIConnectorConfigurationSecret() {
    this->initializeModel();
}

OAIConnectorConfigurationSecret::~OAIConnectorConfigurationSecret() {}

void OAIConnectorConfigurationSecret::initializeModel() {

    m_plaintext_isSet = false;
    m_plaintext_isValid = false;

    m_secret_type_isSet = false;
    m_secret_type_isValid = false;
}

void OAIConnectorConfigurationSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorConfigurationSecret::fromJsonObject(QJsonObject json) {

    m_plaintext_isValid = ::OpenAPI::fromJsonValue(m_plaintext, json[QString("plaintext")]);
    m_plaintext_isSet = !json[QString("plaintext")].isNull() && m_plaintext_isValid;

    m_secret_type_isValid = ::OpenAPI::fromJsonValue(m_secret_type, json[QString("secretType")]);
    m_secret_type_isSet = !json[QString("secretType")].isNull() && m_secret_type_isValid;
}

QString OAIConnectorConfigurationSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorConfigurationSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_plaintext_isSet) {
        obj.insert(QString("plaintext"), ::OpenAPI::toJsonValue(m_plaintext));
    }
    if (m_secret_type_isSet) {
        obj.insert(QString("secretType"), ::OpenAPI::toJsonValue(m_secret_type));
    }
    return obj;
}

QString OAIConnectorConfigurationSecret::getPlaintext() const {
    return m_plaintext;
}
void OAIConnectorConfigurationSecret::setPlaintext(const QString &plaintext) {
    m_plaintext = plaintext;
    m_plaintext_isSet = true;
}

bool OAIConnectorConfigurationSecret::is_plaintext_Set() const{
    return m_plaintext_isSet;
}

bool OAIConnectorConfigurationSecret::is_plaintext_Valid() const{
    return m_plaintext_isValid;
}

QString OAIConnectorConfigurationSecret::getSecretType() const {
    return m_secret_type;
}
void OAIConnectorConfigurationSecret::setSecretType(const QString &secret_type) {
    m_secret_type = secret_type;
    m_secret_type_isSet = true;
}

bool OAIConnectorConfigurationSecret::is_secret_type_Set() const{
    return m_secret_type_isSet;
}

bool OAIConnectorConfigurationSecret::is_secret_type_Valid() const{
    return m_secret_type_isValid;
}

bool OAIConnectorConfigurationSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plaintext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorConfigurationSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
