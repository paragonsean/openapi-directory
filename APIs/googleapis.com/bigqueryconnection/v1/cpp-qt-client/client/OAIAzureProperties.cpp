/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureProperties::OAIAzureProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureProperties::OAIAzureProperties() {
    this->initializeModel();
}

OAIAzureProperties::~OAIAzureProperties() {}

void OAIAzureProperties::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_customer_tenant_id_isSet = false;
    m_customer_tenant_id_isValid = false;

    m_federated_application_client_id_isSet = false;
    m_federated_application_client_id_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;
}

void OAIAzureProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureProperties::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_customer_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_customer_tenant_id, json[QString("customerTenantId")]);
    m_customer_tenant_id_isSet = !json[QString("customerTenantId")].isNull() && m_customer_tenant_id_isValid;

    m_federated_application_client_id_isValid = ::OpenAPI::fromJsonValue(m_federated_application_client_id, json[QString("federatedApplicationClientId")]);
    m_federated_application_client_id_isSet = !json[QString("federatedApplicationClientId")].isNull() && m_federated_application_client_id_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;
}

QString OAIAzureProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_customer_tenant_id_isSet) {
        obj.insert(QString("customerTenantId"), ::OpenAPI::toJsonValue(m_customer_tenant_id));
    }
    if (m_federated_application_client_id_isSet) {
        obj.insert(QString("federatedApplicationClientId"), ::OpenAPI::toJsonValue(m_federated_application_client_id));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    return obj;
}

QString OAIAzureProperties::getApplication() const {
    return m_application;
}
void OAIAzureProperties::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIAzureProperties::is_application_Set() const{
    return m_application_isSet;
}

bool OAIAzureProperties::is_application_Valid() const{
    return m_application_isValid;
}

QString OAIAzureProperties::getClientId() const {
    return m_client_id;
}
void OAIAzureProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAzureProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAzureProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAzureProperties::getCustomerTenantId() const {
    return m_customer_tenant_id;
}
void OAIAzureProperties::setCustomerTenantId(const QString &customer_tenant_id) {
    m_customer_tenant_id = customer_tenant_id;
    m_customer_tenant_id_isSet = true;
}

bool OAIAzureProperties::is_customer_tenant_id_Set() const{
    return m_customer_tenant_id_isSet;
}

bool OAIAzureProperties::is_customer_tenant_id_Valid() const{
    return m_customer_tenant_id_isValid;
}

QString OAIAzureProperties::getFederatedApplicationClientId() const {
    return m_federated_application_client_id;
}
void OAIAzureProperties::setFederatedApplicationClientId(const QString &federated_application_client_id) {
    m_federated_application_client_id = federated_application_client_id;
    m_federated_application_client_id_isSet = true;
}

bool OAIAzureProperties::is_federated_application_client_id_Set() const{
    return m_federated_application_client_id_isSet;
}

bool OAIAzureProperties::is_federated_application_client_id_Valid() const{
    return m_federated_application_client_id_isValid;
}

QString OAIAzureProperties::getIdentity() const {
    return m_identity;
}
void OAIAzureProperties::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIAzureProperties::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIAzureProperties::is_identity_Valid() const{
    return m_identity_isValid;
}

QString OAIAzureProperties::getObjectId() const {
    return m_object_id;
}
void OAIAzureProperties::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIAzureProperties::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIAzureProperties::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIAzureProperties::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIAzureProperties::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIAzureProperties::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIAzureProperties::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

bool OAIAzureProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_application_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
