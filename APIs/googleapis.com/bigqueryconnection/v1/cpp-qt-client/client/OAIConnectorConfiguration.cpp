/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorConfiguration::OAIConnectorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorConfiguration::OAIConnectorConfiguration() {
    this->initializeModel();
}

OAIConnectorConfiguration::~OAIConnectorConfiguration() {}

void OAIConnectorConfiguration::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;
}

void OAIConnectorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorConfiguration::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;
}

QString OAIConnectorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    return obj;
}

OAIConnectorConfigurationAuthentication OAIConnectorConfiguration::getAuthentication() const {
    return m_authentication;
}
void OAIConnectorConfiguration::setAuthentication(const OAIConnectorConfigurationAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIConnectorConfiguration::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIConnectorConfiguration::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIConnectorConfiguration::getConnectorId() const {
    return m_connector_id;
}
void OAIConnectorConfiguration::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnectorConfiguration::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnectorConfiguration::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

OAIConnectorConfigurationEndpoint OAIConnectorConfiguration::getEndpoint() const {
    return m_endpoint;
}
void OAIConnectorConfiguration::setEndpoint(const OAIConnectorConfigurationEndpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIConnectorConfiguration::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIConnectorConfiguration::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIConnectorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
