/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudSpannerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudSpannerProperties::OAICloudSpannerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudSpannerProperties::OAICloudSpannerProperties() {
    this->initializeModel();
}

OAICloudSpannerProperties::~OAICloudSpannerProperties() {}

void OAICloudSpannerProperties::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_role_isSet = false;
    m_database_role_isValid = false;

    m_max_parallelism_isSet = false;
    m_max_parallelism_isValid = false;

    m_use_data_boost_isSet = false;
    m_use_data_boost_isValid = false;

    m_use_parallelism_isSet = false;
    m_use_parallelism_isValid = false;

    m_use_serverless_analytics_isSet = false;
    m_use_serverless_analytics_isValid = false;
}

void OAICloudSpannerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudSpannerProperties::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_database_role_isValid = ::OpenAPI::fromJsonValue(m_database_role, json[QString("databaseRole")]);
    m_database_role_isSet = !json[QString("databaseRole")].isNull() && m_database_role_isValid;

    m_max_parallelism_isValid = ::OpenAPI::fromJsonValue(m_max_parallelism, json[QString("maxParallelism")]);
    m_max_parallelism_isSet = !json[QString("maxParallelism")].isNull() && m_max_parallelism_isValid;

    m_use_data_boost_isValid = ::OpenAPI::fromJsonValue(m_use_data_boost, json[QString("useDataBoost")]);
    m_use_data_boost_isSet = !json[QString("useDataBoost")].isNull() && m_use_data_boost_isValid;

    m_use_parallelism_isValid = ::OpenAPI::fromJsonValue(m_use_parallelism, json[QString("useParallelism")]);
    m_use_parallelism_isSet = !json[QString("useParallelism")].isNull() && m_use_parallelism_isValid;

    m_use_serverless_analytics_isValid = ::OpenAPI::fromJsonValue(m_use_serverless_analytics, json[QString("useServerlessAnalytics")]);
    m_use_serverless_analytics_isSet = !json[QString("useServerlessAnalytics")].isNull() && m_use_serverless_analytics_isValid;
}

QString OAICloudSpannerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudSpannerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_role_isSet) {
        obj.insert(QString("databaseRole"), ::OpenAPI::toJsonValue(m_database_role));
    }
    if (m_max_parallelism_isSet) {
        obj.insert(QString("maxParallelism"), ::OpenAPI::toJsonValue(m_max_parallelism));
    }
    if (m_use_data_boost_isSet) {
        obj.insert(QString("useDataBoost"), ::OpenAPI::toJsonValue(m_use_data_boost));
    }
    if (m_use_parallelism_isSet) {
        obj.insert(QString("useParallelism"), ::OpenAPI::toJsonValue(m_use_parallelism));
    }
    if (m_use_serverless_analytics_isSet) {
        obj.insert(QString("useServerlessAnalytics"), ::OpenAPI::toJsonValue(m_use_serverless_analytics));
    }
    return obj;
}

QString OAICloudSpannerProperties::getDatabase() const {
    return m_database;
}
void OAICloudSpannerProperties::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAICloudSpannerProperties::is_database_Set() const{
    return m_database_isSet;
}

bool OAICloudSpannerProperties::is_database_Valid() const{
    return m_database_isValid;
}

QString OAICloudSpannerProperties::getDatabaseRole() const {
    return m_database_role;
}
void OAICloudSpannerProperties::setDatabaseRole(const QString &database_role) {
    m_database_role = database_role;
    m_database_role_isSet = true;
}

bool OAICloudSpannerProperties::is_database_role_Set() const{
    return m_database_role_isSet;
}

bool OAICloudSpannerProperties::is_database_role_Valid() const{
    return m_database_role_isValid;
}

qint32 OAICloudSpannerProperties::getMaxParallelism() const {
    return m_max_parallelism;
}
void OAICloudSpannerProperties::setMaxParallelism(const qint32 &max_parallelism) {
    m_max_parallelism = max_parallelism;
    m_max_parallelism_isSet = true;
}

bool OAICloudSpannerProperties::is_max_parallelism_Set() const{
    return m_max_parallelism_isSet;
}

bool OAICloudSpannerProperties::is_max_parallelism_Valid() const{
    return m_max_parallelism_isValid;
}

bool OAICloudSpannerProperties::isUseDataBoost() const {
    return m_use_data_boost;
}
void OAICloudSpannerProperties::setUseDataBoost(const bool &use_data_boost) {
    m_use_data_boost = use_data_boost;
    m_use_data_boost_isSet = true;
}

bool OAICloudSpannerProperties::is_use_data_boost_Set() const{
    return m_use_data_boost_isSet;
}

bool OAICloudSpannerProperties::is_use_data_boost_Valid() const{
    return m_use_data_boost_isValid;
}

bool OAICloudSpannerProperties::isUseParallelism() const {
    return m_use_parallelism;
}
void OAICloudSpannerProperties::setUseParallelism(const bool &use_parallelism) {
    m_use_parallelism = use_parallelism;
    m_use_parallelism_isSet = true;
}

bool OAICloudSpannerProperties::is_use_parallelism_Set() const{
    return m_use_parallelism_isSet;
}

bool OAICloudSpannerProperties::is_use_parallelism_Valid() const{
    return m_use_parallelism_isValid;
}

bool OAICloudSpannerProperties::isUseServerlessAnalytics() const {
    return m_use_serverless_analytics;
}
void OAICloudSpannerProperties::setUseServerlessAnalytics(const bool &use_serverless_analytics) {
    m_use_serverless_analytics = use_serverless_analytics;
    m_use_serverless_analytics_isSet = true;
}

bool OAICloudSpannerProperties::is_use_serverless_analytics_Set() const{
    return m_use_serverless_analytics_isSet;
}

bool OAICloudSpannerProperties::is_use_serverless_analytics_Valid() const{
    return m_use_serverless_analytics_isValid;
}

bool OAICloudSpannerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_data_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_serverless_analytics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudSpannerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
