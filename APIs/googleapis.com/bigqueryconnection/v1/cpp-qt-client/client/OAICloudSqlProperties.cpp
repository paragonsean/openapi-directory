/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudSqlProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudSqlProperties::OAICloudSqlProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudSqlProperties::OAICloudSqlProperties() {
    this->initializeModel();
}

OAICloudSqlProperties::~OAICloudSqlProperties() {}

void OAICloudSqlProperties::initializeModel() {

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_service_account_id_isSet = false;
    m_service_account_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICloudSqlProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudSqlProperties::fromJsonObject(QJsonObject json) {

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_service_account_id_isValid = ::OpenAPI::fromJsonValue(m_service_account_id, json[QString("serviceAccountId")]);
    m_service_account_id_isSet = !json[QString("serviceAccountId")].isNull() && m_service_account_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICloudSqlProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudSqlProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_credential.isSet()) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_service_account_id_isSet) {
        obj.insert(QString("serviceAccountId"), ::OpenAPI::toJsonValue(m_service_account_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICloudSqlCredential OAICloudSqlProperties::getCredential() const {
    return m_credential;
}
void OAICloudSqlProperties::setCredential(const OAICloudSqlCredential &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAICloudSqlProperties::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAICloudSqlProperties::is_credential_Valid() const{
    return m_credential_isValid;
}

QString OAICloudSqlProperties::getDatabase() const {
    return m_database;
}
void OAICloudSqlProperties::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAICloudSqlProperties::is_database_Set() const{
    return m_database_isSet;
}

bool OAICloudSqlProperties::is_database_Valid() const{
    return m_database_isValid;
}

QString OAICloudSqlProperties::getInstanceId() const {
    return m_instance_id;
}
void OAICloudSqlProperties::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAICloudSqlProperties::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAICloudSqlProperties::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAICloudSqlProperties::getServiceAccountId() const {
    return m_service_account_id;
}
void OAICloudSqlProperties::setServiceAccountId(const QString &service_account_id) {
    m_service_account_id = service_account_id;
    m_service_account_id_isSet = true;
}

bool OAICloudSqlProperties::is_service_account_id_Set() const{
    return m_service_account_id_isSet;
}

bool OAICloudSqlProperties::is_service_account_id_Valid() const{
    return m_service_account_id_isValid;
}

QString OAICloudSqlProperties::getType() const {
    return m_type;
}
void OAICloudSqlProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICloudSqlProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAICloudSqlProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICloudSqlProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudSqlProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
