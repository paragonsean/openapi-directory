/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetastoreServiceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetastoreServiceConfig::OAIMetastoreServiceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetastoreServiceConfig::OAIMetastoreServiceConfig() {
    this->initializeModel();
}

OAIMetastoreServiceConfig::~OAIMetastoreServiceConfig() {}

void OAIMetastoreServiceConfig::initializeModel() {

    m_metastore_service_isSet = false;
    m_metastore_service_isValid = false;
}

void OAIMetastoreServiceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetastoreServiceConfig::fromJsonObject(QJsonObject json) {

    m_metastore_service_isValid = ::OpenAPI::fromJsonValue(m_metastore_service, json[QString("metastoreService")]);
    m_metastore_service_isSet = !json[QString("metastoreService")].isNull() && m_metastore_service_isValid;
}

QString OAIMetastoreServiceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetastoreServiceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_metastore_service_isSet) {
        obj.insert(QString("metastoreService"), ::OpenAPI::toJsonValue(m_metastore_service));
    }
    return obj;
}

QString OAIMetastoreServiceConfig::getMetastoreService() const {
    return m_metastore_service;
}
void OAIMetastoreServiceConfig::setMetastoreService(const QString &metastore_service) {
    m_metastore_service = metastore_service;
    m_metastore_service_isSet = true;
}

bool OAIMetastoreServiceConfig::is_metastore_service_Set() const{
    return m_metastore_service_isSet;
}

bool OAIMetastoreServiceConfig::is_metastore_service_Valid() const{
    return m_metastore_service_isValid;
}

bool OAIMetastoreServiceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metastore_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetastoreServiceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
