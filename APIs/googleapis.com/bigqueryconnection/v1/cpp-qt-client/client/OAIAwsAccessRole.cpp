/**
 * BigQuery Connection API
 * Allows users to manage BigQuery connections to external data sources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsAccessRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsAccessRole::OAIAwsAccessRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsAccessRole::OAIAwsAccessRole() {
    this->initializeModel();
}

OAIAwsAccessRole::~OAIAwsAccessRole() {}

void OAIAwsAccessRole::initializeModel() {

    m_iam_role_id_isSet = false;
    m_iam_role_id_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;
}

void OAIAwsAccessRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsAccessRole::fromJsonObject(QJsonObject json) {

    m_iam_role_id_isValid = ::OpenAPI::fromJsonValue(m_iam_role_id, json[QString("iamRoleId")]);
    m_iam_role_id_isSet = !json[QString("iamRoleId")].isNull() && m_iam_role_id_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;
}

QString OAIAwsAccessRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsAccessRole::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_role_id_isSet) {
        obj.insert(QString("iamRoleId"), ::OpenAPI::toJsonValue(m_iam_role_id));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    return obj;
}

QString OAIAwsAccessRole::getIamRoleId() const {
    return m_iam_role_id;
}
void OAIAwsAccessRole::setIamRoleId(const QString &iam_role_id) {
    m_iam_role_id = iam_role_id;
    m_iam_role_id_isSet = true;
}

bool OAIAwsAccessRole::is_iam_role_id_Set() const{
    return m_iam_role_id_isSet;
}

bool OAIAwsAccessRole::is_iam_role_id_Valid() const{
    return m_iam_role_id_isValid;
}

QString OAIAwsAccessRole::getIdentity() const {
    return m_identity;
}
void OAIAwsAccessRole::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIAwsAccessRole::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIAwsAccessRole::is_identity_Valid() const{
    return m_identity_isValid;
}

bool OAIAwsAccessRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsAccessRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
