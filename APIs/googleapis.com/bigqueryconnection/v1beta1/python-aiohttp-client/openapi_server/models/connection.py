# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_sql_properties import CloudSqlProperties
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_sql: CloudSqlProperties=None, creation_time: str=None, description: str=None, friendly_name: str=None, has_credential: bool=None, last_modified_time: str=None, name: str=None):
        """Connection - a model defined in OpenAPI

        :param cloud_sql: The cloud_sql of this Connection.
        :param creation_time: The creation_time of this Connection.
        :param description: The description of this Connection.
        :param friendly_name: The friendly_name of this Connection.
        :param has_credential: The has_credential of this Connection.
        :param last_modified_time: The last_modified_time of this Connection.
        :param name: The name of this Connection.
        """
        self.openapi_types = {
            'cloud_sql': CloudSqlProperties,
            'creation_time': str,
            'description': str,
            'friendly_name': str,
            'has_credential': bool,
            'last_modified_time': str,
            'name': str
        }

        self.attribute_map = {
            'cloud_sql': 'cloudSql',
            'creation_time': 'creationTime',
            'description': 'description',
            'friendly_name': 'friendlyName',
            'has_credential': 'hasCredential',
            'last_modified_time': 'lastModifiedTime',
            'name': 'name'
        }

        self._cloud_sql = cloud_sql
        self._creation_time = creation_time
        self._description = description
        self._friendly_name = friendly_name
        self._has_credential = has_credential
        self._last_modified_time = last_modified_time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connection of this Connection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_sql(self):
        """Gets the cloud_sql of this Connection.


        :return: The cloud_sql of this Connection.
        :rtype: CloudSqlProperties
        """
        return self._cloud_sql

    @cloud_sql.setter
    def cloud_sql(self, cloud_sql):
        """Sets the cloud_sql of this Connection.


        :param cloud_sql: The cloud_sql of this Connection.
        :type cloud_sql: CloudSqlProperties
        """

        self._cloud_sql = cloud_sql

    @property
    def creation_time(self):
        """Gets the creation_time of this Connection.

        Output only. The creation timestamp of the connection.

        :return: The creation_time of this Connection.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Connection.

        Output only. The creation timestamp of the connection.

        :param creation_time: The creation_time of this Connection.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this Connection.

        User provided description.

        :return: The description of this Connection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connection.

        User provided description.

        :param description: The description of this Connection.
        :type description: str
        """

        self._description = description

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Connection.

        User provided display name for the connection.

        :return: The friendly_name of this Connection.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Connection.

        User provided display name for the connection.

        :param friendly_name: The friendly_name of this Connection.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def has_credential(self):
        """Gets the has_credential of this Connection.

        Output only. True, if credential is configured for this connection.

        :return: The has_credential of this Connection.
        :rtype: bool
        """
        return self._has_credential

    @has_credential.setter
    def has_credential(self, has_credential):
        """Sets the has_credential of this Connection.

        Output only. True, if credential is configured for this connection.

        :param has_credential: The has_credential of this Connection.
        :type has_credential: bool
        """

        self._has_credential = has_credential

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Connection.

        Output only. The last update timestamp of the connection.

        :return: The last_modified_time of this Connection.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Connection.

        Output only. The last update timestamp of the connection.

        :param last_modified_time: The last_modified_time of this Connection.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def name(self):
        """Gets the name of this Connection.

        The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`

        :return: The name of this Connection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.

        The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`

        :param name: The name of this Connection.
        :type name: str
        """

        self._name = name
