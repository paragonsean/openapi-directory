/**
 * Security Token Service API
 * The Security Token Service exchanges Google or third-party credentials for a short-lived access token to Google Cloud resources.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleIdentityStsV1betaExchangeTokenRequest model module.
 * @module model/GoogleIdentityStsV1betaExchangeTokenRequest
 * @version v1beta
 */
class GoogleIdentityStsV1betaExchangeTokenRequest {
    /**
     * Constructs a new <code>GoogleIdentityStsV1betaExchangeTokenRequest</code>.
     * Request message for ExchangeToken.
     * @alias module:model/GoogleIdentityStsV1betaExchangeTokenRequest
     */
    constructor() { 
        
        GoogleIdentityStsV1betaExchangeTokenRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIdentityStsV1betaExchangeTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIdentityStsV1betaExchangeTokenRequest} obj Optional instance to populate.
     * @return {module:model/GoogleIdentityStsV1betaExchangeTokenRequest} The populated <code>GoogleIdentityStsV1betaExchangeTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIdentityStsV1betaExchangeTokenRequest();

            if (data.hasOwnProperty('audience')) {
                obj['audience'] = ApiClient.convertToType(data['audience'], 'String');
            }
            if (data.hasOwnProperty('grantType')) {
                obj['grantType'] = ApiClient.convertToType(data['grantType'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], 'String');
            }
            if (data.hasOwnProperty('requestedTokenType')) {
                obj['requestedTokenType'] = ApiClient.convertToType(data['requestedTokenType'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('subjectToken')) {
                obj['subjectToken'] = ApiClient.convertToType(data['subjectToken'], 'String');
            }
            if (data.hasOwnProperty('subjectTokenType')) {
                obj['subjectTokenType'] = ApiClient.convertToType(data['subjectTokenType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIdentityStsV1betaExchangeTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIdentityStsV1betaExchangeTokenRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audience'] && !(typeof data['audience'] === 'string' || data['audience'] instanceof String)) {
            throw new Error("Expected the field `audience` to be a primitive type in the JSON string but got " + data['audience']);
        }
        // ensure the json data is a string
        if (data['grantType'] && !(typeof data['grantType'] === 'string' || data['grantType'] instanceof String)) {
            throw new Error("Expected the field `grantType` to be a primitive type in the JSON string but got " + data['grantType']);
        }
        // ensure the json data is a string
        if (data['options'] && !(typeof data['options'] === 'string' || data['options'] instanceof String)) {
            throw new Error("Expected the field `options` to be a primitive type in the JSON string but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['requestedTokenType'] && !(typeof data['requestedTokenType'] === 'string' || data['requestedTokenType'] instanceof String)) {
            throw new Error("Expected the field `requestedTokenType` to be a primitive type in the JSON string but got " + data['requestedTokenType']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['subjectToken'] && !(typeof data['subjectToken'] === 'string' || data['subjectToken'] instanceof String)) {
            throw new Error("Expected the field `subjectToken` to be a primitive type in the JSON string but got " + data['subjectToken']);
        }
        // ensure the json data is a string
        if (data['subjectTokenType'] && !(typeof data['subjectTokenType'] === 'string' || data['subjectTokenType'] instanceof String)) {
            throw new Error("Expected the field `subjectTokenType` to be a primitive type in the JSON string but got " + data['subjectTokenType']);
        }

        return true;
    }


}



/**
 * The full resource name of the identity provider. For example, `//iam.googleapis.com/projects//locations/global/workloadIdentityPools//providers/`. Required when exchanging an external credential for a Google access token.
 * @member {String} audience
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['audience'] = undefined;

/**
 * Required. The grant type. Must be `urn:ietf:params:oauth:grant-type:token-exchange`, which indicates a token exchange.
 * @member {String} grantType
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['grantType'] = undefined;

/**
 * A set of features that Security Token Service supports, in addition to the standard OAuth 2.0 token exchange, formatted as a serialized JSON object of Options. The size of the parameter value must not exceed 4096 characters.
 * @member {String} options
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['options'] = undefined;

/**
 * Required. The type of security token. Must be `urn:ietf:params:oauth:token-type:access_token`, which indicates an OAuth 2.0 access token.
 * @member {String} requestedTokenType
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['requestedTokenType'] = undefined;

/**
 * The OAuth 2.0 scopes to include on the resulting access token, formatted as a list of space-delimited, case-sensitive strings. Required when exchanging an external credential for a Google access token.
 * @member {String} scope
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['scope'] = undefined;

/**
 * Required. The input token. This token is either an external credential issued by a workload identity pool provider, or a short-lived access token issued by Google. If the token is an OIDC JWT, it must use the JWT format defined in [RFC 7523](https://tools.ietf.org/html/rfc7523), and the `subject_token_type` must be either `urn:ietf:params:oauth:token-type:jwt` or `urn:ietf:params:oauth:token-type:id_token`. The following headers are required: - `kid`: The identifier of the signing key securing the JWT. - `alg`: The cryptographic algorithm securing the JWT. Must be `RS256` or `ES256`. The following payload fields are required. For more information, see [RFC 7523, Section 3](https://tools.ietf.org/html/rfc7523#section-3): - `iss`: The issuer of the token. The issuer must provide a discovery document at the URL `/.well-known/openid-configuration`, where `` is the value of this field. The document must be formatted according to section 4.2 of the [OIDC 1.0 Discovery specification](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse). - `iat`: The issue time, in seconds, since the Unix epoch. Must be in the past. - `exp`: The expiration time, in seconds, since the Unix epoch. Must be less than 48 hours after `iat`. Shorter expiration times are more secure. If possible, we recommend setting an expiration time less than 6 hours. - `sub`: The identity asserted in the JWT. - `aud`: For workload identity pools, this must be a value specified in the allowed audiences for the workload identity pool provider, or one of the audiences allowed by default if no audiences were specified. See https://cloud.google.com/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools.providers#oidc Example header: ``` { \"alg\": \"RS256\", \"kid\": \"us-east-11\" } ``` Example payload: ``` { \"iss\": \"https://accounts.google.com\", \"iat\": 1517963104, \"exp\": 1517966704, \"aud\": \"//iam.googleapis.com/projects/1234567890123/locations/global/workloadIdentityPools/my-pool/providers/my-provider\", \"sub\": \"113475438248934895348\", \"my_claims\": { \"additional_claim\": \"value\" } } ``` If `subject_token` is for AWS, it must be a serialized `GetCallerIdentity` token. This token contains the same information as a request to the AWS [`GetCallerIdentity()`](https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity) method, as well as the AWS [signature](https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html) for the request information. Use Signature Version 4. Format the request as URL-encoded JSON, and set the `subject_token_type` parameter to `urn:ietf:params:aws:token-type:aws4_request`. The following parameters are required: - `url`: The URL of the AWS STS endpoint for `GetCallerIdentity()`, such as `https://sts.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15`. Regional endpoints are also supported. - `method`: The HTTP request method: `POST`. - `headers`: The HTTP request headers, which must include: - `Authorization`: The request signature. - `x-amz-date`: The time you will send the request, formatted as an [ISO8601 Basic](https://docs.aws.amazon.com/general/latest/gr/sigv4_elements.html#sigv4_elements_date) string. This value is typically set to the current time and is used to help prevent replay attacks. - `host`: The hostname of the `url` field; for example, `sts.amazonaws.com`. - `x-goog-cloud-target-resource`: The full, canonical resource name of the workload identity pool provider, with or without an `https:` prefix. To help ensure data integrity, we recommend including this header in the `SignedHeaders` field of the signed request. For example: //iam.googleapis.com/projects//locations/global/workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations/global/workloadIdentityPools//providers/ If you are using temporary security credentials provided by AWS, you must also include the header `x-amz-security-token`, with the value set to the session token. The following example shows a `GetCallerIdentity` token: ``` { \"headers\": [ {\"key\": \"x-amz-date\", \"value\": \"20200815T015049Z\"}, {\"key\": \"Authorization\", \"value\": \"AWS4-HMAC-SHA256+Credential=$credential,+SignedHeaders=host;x-amz-date;x-goog-cloud-target-resource,+Signature=$signature\"}, {\"key\": \"x-goog-cloud-target-resource\", \"value\": \"//iam.googleapis.com/projects//locations/global/workloadIdentityPools//providers/\"}, {\"key\": \"host\", \"value\": \"sts.amazonaws.com\"} . ], \"method\": \"POST\", \"url\": \"https://sts.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15\" } ``` You can also use a Google-issued OAuth 2.0 access token with this field to obtain an access token with new security attributes applied, such as a Credential Access Boundary. In this case, set `subject_token_type` to `urn:ietf:params:oauth:token-type:access_token`. If an access token already contains security attributes, you cannot apply additional security attributes.
 * @member {String} subjectToken
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['subjectToken'] = undefined;

/**
 * Required. An identifier that indicates the type of the security token in the `subject_token` parameter. Supported values are `urn:ietf:params:oauth:token-type:jwt`, `urn:ietf:params:oauth:token-type:id_token`, `urn:ietf:params:aws:token-type:aws4_request`, and `urn:ietf:params:oauth:token-type:access_token`.
 * @member {String} subjectTokenType
 */
GoogleIdentityStsV1betaExchangeTokenRequest.prototype['subjectTokenType'] = undefined;






export default GoogleIdentityStsV1betaExchangeTokenRequest;

