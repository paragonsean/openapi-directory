/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudFunctionsApi);
  }
}(this, function(expect, CloudFunctionsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudFunctionsApi.CloudFunction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CloudFunction', function() {
    it('should create an instance of CloudFunction', function() {
      // uncomment below and update the code to test CloudFunction
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be.a(CloudFunctionsApi.CloudFunction);
    });

    it('should have the property automaticUpdatePolicy (base name: "automaticUpdatePolicy")', function() {
      // uncomment below and update the code to test the property automaticUpdatePolicy
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property availableMemoryMb (base name: "availableMemoryMb")', function() {
      // uncomment below and update the code to test the property availableMemoryMb
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property buildEnvironmentVariables (base name: "buildEnvironmentVariables")', function() {
      // uncomment below and update the code to test the property buildEnvironmentVariables
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property buildId (base name: "buildId")', function() {
      // uncomment below and update the code to test the property buildId
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property buildName (base name: "buildName")', function() {
      // uncomment below and update the code to test the property buildName
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property buildServiceAccount (base name: "buildServiceAccount")', function() {
      // uncomment below and update the code to test the property buildServiceAccount
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property buildWorkerPool (base name: "buildWorkerPool")', function() {
      // uncomment below and update the code to test the property buildWorkerPool
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property dockerRegistry (base name: "dockerRegistry")', function() {
      // uncomment below and update the code to test the property dockerRegistry
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property dockerRepository (base name: "dockerRepository")', function() {
      // uncomment below and update the code to test the property dockerRepository
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property entryPoint (base name: "entryPoint")', function() {
      // uncomment below and update the code to test the property entryPoint
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariables (base name: "environmentVariables")', function() {
      // uncomment below and update the code to test the property environmentVariables
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property eventTrigger (base name: "eventTrigger")', function() {
      // uncomment below and update the code to test the property eventTrigger
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property httpsTrigger (base name: "httpsTrigger")', function() {
      // uncomment below and update the code to test the property httpsTrigger
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property ingressSettings (base name: "ingressSettings")', function() {
      // uncomment below and update the code to test the property ingressSettings
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyName (base name: "kmsKeyName")', function() {
      // uncomment below and update the code to test the property kmsKeyName
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property maxInstances (base name: "maxInstances")', function() {
      // uncomment below and update the code to test the property maxInstances
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property minInstances (base name: "minInstances")', function() {
      // uncomment below and update the code to test the property minInstances
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property onDeployUpdatePolicy (base name: "onDeployUpdatePolicy")', function() {
      // uncomment below and update the code to test the property onDeployUpdatePolicy
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property runtime (base name: "runtime")', function() {
      // uncomment below and update the code to test the property runtime
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property secretEnvironmentVariables (base name: "secretEnvironmentVariables")', function() {
      // uncomment below and update the code to test the property secretEnvironmentVariables
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property secretVolumes (base name: "secretVolumes")', function() {
      // uncomment below and update the code to test the property secretVolumes
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccountEmail (base name: "serviceAccountEmail")', function() {
      // uncomment below and update the code to test the property serviceAccountEmail
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property sourceArchiveUrl (base name: "sourceArchiveUrl")', function() {
      // uncomment below and update the code to test the property sourceArchiveUrl
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property sourceRepository (base name: "sourceRepository")', function() {
      // uncomment below and update the code to test the property sourceRepository
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property sourceToken (base name: "sourceToken")', function() {
      // uncomment below and update the code to test the property sourceToken
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property sourceUploadUrl (base name: "sourceUploadUrl")', function() {
      // uncomment below and update the code to test the property sourceUploadUrl
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property versionId (base name: "versionId")', function() {
      // uncomment below and update the code to test the property versionId
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property vpcConnector (base name: "vpcConnector")', function() {
      // uncomment below and update the code to test the property vpcConnector
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

    it('should have the property vpcConnectorEgressSettings (base name: "vpcConnectorEgressSettings")', function() {
      // uncomment below and update the code to test the property vpcConnectorEgressSettings
      //var instance = new CloudFunctionsApi.CloudFunction();
      //expect(instance).to.be();
    });

  });

}));
