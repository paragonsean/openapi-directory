/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceRepository model module.
 * @module model/SourceRepository
 * @version v1
 */
class SourceRepository {
    /**
     * Constructs a new <code>SourceRepository</code>.
     * Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
     * @alias module:model/SourceRepository
     */
    constructor() { 
        
        SourceRepository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceRepository} obj Optional instance to populate.
     * @return {module:model/SourceRepository} The populated <code>SourceRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceRepository();

            if (data.hasOwnProperty('deployedUrl')) {
                obj['deployedUrl'] = ApiClient.convertToType(data['deployedUrl'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceRepository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deployedUrl'] && !(typeof data['deployedUrl'] === 'string' || data['deployedUrl'] instanceof String)) {
            throw new Error("Expected the field `deployedUrl` to be a primitive type in the JSON string but got " + data['deployedUrl']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
 * @member {String} deployedUrl
 */
SourceRepository.prototype['deployedUrl'] = undefined;

/**
 * The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/_*_/repos/_*_/revisions/_*_/paths/_*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/_*_/repos/_*_/moveable-aliases/_*_/paths/_*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/_*_/repos/_*_/fixed-aliases/_*_/paths/_*` You may omit `paths/_*` if you want to use the main directory.
 * @member {String} url
 */
SourceRepository.prototype['url'] = undefined;






export default SourceRepository;

