/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventTrigger from './EventTrigger';
import HttpsTrigger from './HttpsTrigger';
import OnDeployUpdatePolicy from './OnDeployUpdatePolicy';
import SecretEnvVar from './SecretEnvVar';
import SecretVolume from './SecretVolume';
import SourceRepository from './SourceRepository';

/**
 * The CloudFunction model module.
 * @module model/CloudFunction
 * @version v1
 */
class CloudFunction {
    /**
     * Constructs a new <code>CloudFunction</code>.
     * Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.
     * @alias module:model/CloudFunction
     */
    constructor() { 
        
        CloudFunction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudFunction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudFunction} obj Optional instance to populate.
     * @return {module:model/CloudFunction} The populated <code>CloudFunction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudFunction();

            if (data.hasOwnProperty('automaticUpdatePolicy')) {
                obj['automaticUpdatePolicy'] = ApiClient.convertToType(data['automaticUpdatePolicy'], Object);
            }
            if (data.hasOwnProperty('availableMemoryMb')) {
                obj['availableMemoryMb'] = ApiClient.convertToType(data['availableMemoryMb'], 'Number');
            }
            if (data.hasOwnProperty('buildEnvironmentVariables')) {
                obj['buildEnvironmentVariables'] = ApiClient.convertToType(data['buildEnvironmentVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('buildId')) {
                obj['buildId'] = ApiClient.convertToType(data['buildId'], 'String');
            }
            if (data.hasOwnProperty('buildName')) {
                obj['buildName'] = ApiClient.convertToType(data['buildName'], 'String');
            }
            if (data.hasOwnProperty('buildServiceAccount')) {
                obj['buildServiceAccount'] = ApiClient.convertToType(data['buildServiceAccount'], 'String');
            }
            if (data.hasOwnProperty('buildWorkerPool')) {
                obj['buildWorkerPool'] = ApiClient.convertToType(data['buildWorkerPool'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dockerRegistry')) {
                obj['dockerRegistry'] = ApiClient.convertToType(data['dockerRegistry'], 'String');
            }
            if (data.hasOwnProperty('dockerRepository')) {
                obj['dockerRepository'] = ApiClient.convertToType(data['dockerRepository'], 'String');
            }
            if (data.hasOwnProperty('entryPoint')) {
                obj['entryPoint'] = ApiClient.convertToType(data['entryPoint'], 'String');
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('eventTrigger')) {
                obj['eventTrigger'] = EventTrigger.constructFromObject(data['eventTrigger']);
            }
            if (data.hasOwnProperty('httpsTrigger')) {
                obj['httpsTrigger'] = HttpsTrigger.constructFromObject(data['httpsTrigger']);
            }
            if (data.hasOwnProperty('ingressSettings')) {
                obj['ingressSettings'] = ApiClient.convertToType(data['ingressSettings'], 'String');
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('maxInstances')) {
                obj['maxInstances'] = ApiClient.convertToType(data['maxInstances'], 'Number');
            }
            if (data.hasOwnProperty('minInstances')) {
                obj['minInstances'] = ApiClient.convertToType(data['minInstances'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('onDeployUpdatePolicy')) {
                obj['onDeployUpdatePolicy'] = OnDeployUpdatePolicy.constructFromObject(data['onDeployUpdatePolicy']);
            }
            if (data.hasOwnProperty('runtime')) {
                obj['runtime'] = ApiClient.convertToType(data['runtime'], 'String');
            }
            if (data.hasOwnProperty('secretEnvironmentVariables')) {
                obj['secretEnvironmentVariables'] = ApiClient.convertToType(data['secretEnvironmentVariables'], [SecretEnvVar]);
            }
            if (data.hasOwnProperty('secretVolumes')) {
                obj['secretVolumes'] = ApiClient.convertToType(data['secretVolumes'], [SecretVolume]);
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('sourceArchiveUrl')) {
                obj['sourceArchiveUrl'] = ApiClient.convertToType(data['sourceArchiveUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceRepository')) {
                obj['sourceRepository'] = SourceRepository.constructFromObject(data['sourceRepository']);
            }
            if (data.hasOwnProperty('sourceToken')) {
                obj['sourceToken'] = ApiClient.convertToType(data['sourceToken'], 'String');
            }
            if (data.hasOwnProperty('sourceUploadUrl')) {
                obj['sourceUploadUrl'] = ApiClient.convertToType(data['sourceUploadUrl'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
            if (data.hasOwnProperty('vpcConnector')) {
                obj['vpcConnector'] = ApiClient.convertToType(data['vpcConnector'], 'String');
            }
            if (data.hasOwnProperty('vpcConnectorEgressSettings')) {
                obj['vpcConnectorEgressSettings'] = ApiClient.convertToType(data['vpcConnectorEgressSettings'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudFunction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudFunction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildId'] && !(typeof data['buildId'] === 'string' || data['buildId'] instanceof String)) {
            throw new Error("Expected the field `buildId` to be a primitive type in the JSON string but got " + data['buildId']);
        }
        // ensure the json data is a string
        if (data['buildName'] && !(typeof data['buildName'] === 'string' || data['buildName'] instanceof String)) {
            throw new Error("Expected the field `buildName` to be a primitive type in the JSON string but got " + data['buildName']);
        }
        // ensure the json data is a string
        if (data['buildServiceAccount'] && !(typeof data['buildServiceAccount'] === 'string' || data['buildServiceAccount'] instanceof String)) {
            throw new Error("Expected the field `buildServiceAccount` to be a primitive type in the JSON string but got " + data['buildServiceAccount']);
        }
        // ensure the json data is a string
        if (data['buildWorkerPool'] && !(typeof data['buildWorkerPool'] === 'string' || data['buildWorkerPool'] instanceof String)) {
            throw new Error("Expected the field `buildWorkerPool` to be a primitive type in the JSON string but got " + data['buildWorkerPool']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dockerRegistry'] && !(typeof data['dockerRegistry'] === 'string' || data['dockerRegistry'] instanceof String)) {
            throw new Error("Expected the field `dockerRegistry` to be a primitive type in the JSON string but got " + data['dockerRegistry']);
        }
        // ensure the json data is a string
        if (data['dockerRepository'] && !(typeof data['dockerRepository'] === 'string' || data['dockerRepository'] instanceof String)) {
            throw new Error("Expected the field `dockerRepository` to be a primitive type in the JSON string but got " + data['dockerRepository']);
        }
        // ensure the json data is a string
        if (data['entryPoint'] && !(typeof data['entryPoint'] === 'string' || data['entryPoint'] instanceof String)) {
            throw new Error("Expected the field `entryPoint` to be a primitive type in the JSON string but got " + data['entryPoint']);
        }
        // validate the optional field `eventTrigger`
        if (data['eventTrigger']) { // data not null
          EventTrigger.validateJSON(data['eventTrigger']);
        }
        // validate the optional field `httpsTrigger`
        if (data['httpsTrigger']) { // data not null
          HttpsTrigger.validateJSON(data['httpsTrigger']);
        }
        // ensure the json data is a string
        if (data['ingressSettings'] && !(typeof data['ingressSettings'] === 'string' || data['ingressSettings'] instanceof String)) {
            throw new Error("Expected the field `ingressSettings` to be a primitive type in the JSON string but got " + data['ingressSettings']);
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `onDeployUpdatePolicy`
        if (data['onDeployUpdatePolicy']) { // data not null
          OnDeployUpdatePolicy.validateJSON(data['onDeployUpdatePolicy']);
        }
        // ensure the json data is a string
        if (data['runtime'] && !(typeof data['runtime'] === 'string' || data['runtime'] instanceof String)) {
            throw new Error("Expected the field `runtime` to be a primitive type in the JSON string but got " + data['runtime']);
        }
        if (data['secretEnvironmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secretEnvironmentVariables'])) {
                throw new Error("Expected the field `secretEnvironmentVariables` to be an array in the JSON data but got " + data['secretEnvironmentVariables']);
            }
            // validate the optional field `secretEnvironmentVariables` (array)
            for (const item of data['secretEnvironmentVariables']) {
                SecretEnvVar.validateJSON(item);
            };
        }
        if (data['secretVolumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secretVolumes'])) {
                throw new Error("Expected the field `secretVolumes` to be an array in the JSON data but got " + data['secretVolumes']);
            }
            // validate the optional field `secretVolumes` (array)
            for (const item of data['secretVolumes']) {
                SecretVolume.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['sourceArchiveUrl'] && !(typeof data['sourceArchiveUrl'] === 'string' || data['sourceArchiveUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceArchiveUrl` to be a primitive type in the JSON string but got " + data['sourceArchiveUrl']);
        }
        // validate the optional field `sourceRepository`
        if (data['sourceRepository']) { // data not null
          SourceRepository.validateJSON(data['sourceRepository']);
        }
        // ensure the json data is a string
        if (data['sourceToken'] && !(typeof data['sourceToken'] === 'string' || data['sourceToken'] instanceof String)) {
            throw new Error("Expected the field `sourceToken` to be a primitive type in the JSON string but got " + data['sourceToken']);
        }
        // ensure the json data is a string
        if (data['sourceUploadUrl'] && !(typeof data['sourceUploadUrl'] === 'string' || data['sourceUploadUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUploadUrl` to be a primitive type in the JSON string but got " + data['sourceUploadUrl']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }
        // ensure the json data is a string
        if (data['vpcConnector'] && !(typeof data['vpcConnector'] === 'string' || data['vpcConnector'] instanceof String)) {
            throw new Error("Expected the field `vpcConnector` to be a primitive type in the JSON string but got " + data['vpcConnector']);
        }
        // ensure the json data is a string
        if (data['vpcConnectorEgressSettings'] && !(typeof data['vpcConnectorEgressSettings'] === 'string' || data['vpcConnectorEgressSettings'] instanceof String)) {
            throw new Error("Expected the field `vpcConnectorEgressSettings` to be a primitive type in the JSON string but got " + data['vpcConnectorEgressSettings']);
        }

        return true;
    }


}



/**
 * Security patches are applied automatically to the runtime without requiring the function to be redeployed.
 * @member {Object} automaticUpdatePolicy
 */
CloudFunction.prototype['automaticUpdatePolicy'] = undefined;

/**
 * The amount of memory in MB available for a function. Defaults to 256MB.
 * @member {Number} availableMemoryMb
 */
CloudFunction.prototype['availableMemoryMb'] = undefined;

/**
 * Build environment variables that shall be available during build time.
 * @member {Object.<String, String>} buildEnvironmentVariables
 */
CloudFunction.prototype['buildEnvironmentVariables'] = undefined;

/**
 * Output only. The Cloud Build ID of the latest successful deployment of the function.
 * @member {String} buildId
 */
CloudFunction.prototype['buildId'] = undefined;

/**
 * Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.
 * @member {String} buildName
 */
CloudFunction.prototype['buildName'] = undefined;

/**
 * Optional. A service account the user provides for use with Cloud Build.
 * @member {String} buildServiceAccount
 */
CloudFunction.prototype['buildServiceAccount'] = undefined;

/**
 * Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
 * @member {String} buildWorkerPool
 */
CloudFunction.prototype['buildWorkerPool'] = undefined;

/**
 * User-provided description of a function.
 * @member {String} description
 */
CloudFunction.prototype['description'] = undefined;

/**
 * Docker Registry to use for this deployment. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.
 * @member {module:model/CloudFunction.DockerRegistryEnum} dockerRegistry
 */
CloudFunction.prototype['dockerRegistry'] = undefined;

/**
 * User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.
 * @member {String} dockerRepository
 */
CloudFunction.prototype['dockerRepository'] = undefined;

/**
 * The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.
 * @member {String} entryPoint
 */
CloudFunction.prototype['entryPoint'] = undefined;

/**
 * Environment variables that shall be available during function execution.
 * @member {Object.<String, String>} environmentVariables
 */
CloudFunction.prototype['environmentVariables'] = undefined;

/**
 * @member {module:model/EventTrigger} eventTrigger
 */
CloudFunction.prototype['eventTrigger'] = undefined;

/**
 * @member {module:model/HttpsTrigger} httpsTrigger
 */
CloudFunction.prototype['httpsTrigger'] = undefined;

/**
 * The ingress settings for the function, controlling what traffic can reach it.
 * @member {module:model/CloudFunction.IngressSettingsEnum} ingressSettings
 */
CloudFunction.prototype['ingressSettings'] = undefined;

/**
 * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
 * @member {String} kmsKeyName
 */
CloudFunction.prototype['kmsKeyName'] = undefined;

/**
 * Labels associated with this Cloud Function.
 * @member {Object.<String, String>} labels
 */
CloudFunction.prototype['labels'] = undefined;

/**
 * The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
 * @member {Number} maxInstances
 */
CloudFunction.prototype['maxInstances'] = undefined;

/**
 * A lower bound for the number function instances that may coexist at a given time.
 * @member {Number} minInstances
 */
CloudFunction.prototype['minInstances'] = undefined;

/**
 * A user-defined name of the function. Function names must be unique globally and match pattern `projects/_*_/locations/_*_/functions/_*`
 * @member {String} name
 */
CloudFunction.prototype['name'] = undefined;

/**
 * Deprecated: use vpc_connector
 * @member {String} network
 */
CloudFunction.prototype['network'] = undefined;

/**
 * @member {module:model/OnDeployUpdatePolicy} onDeployUpdatePolicy
 */
CloudFunction.prototype['onDeployUpdatePolicy'] = undefined;

/**
 * The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
 * @member {String} runtime
 */
CloudFunction.prototype['runtime'] = undefined;

/**
 * Secret environment variables configuration.
 * @member {Array.<module:model/SecretEnvVar>} secretEnvironmentVariables
 */
CloudFunction.prototype['secretEnvironmentVariables'] = undefined;

/**
 * Secret volumes configuration.
 * @member {Array.<module:model/SecretVolume>} secretVolumes
 */
CloudFunction.prototype['secretVolumes'] = undefined;

/**
 * The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
 * @member {String} serviceAccountEmail
 */
CloudFunction.prototype['serviceAccountEmail'] = undefined;

/**
 * The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
 * @member {String} sourceArchiveUrl
 */
CloudFunction.prototype['sourceArchiveUrl'] = undefined;

/**
 * @member {module:model/SourceRepository} sourceRepository
 */
CloudFunction.prototype['sourceRepository'] = undefined;

/**
 * Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
 * @member {String} sourceToken
 */
CloudFunction.prototype['sourceToken'] = undefined;

/**
 * The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
 * @member {String} sourceUploadUrl
 */
CloudFunction.prototype['sourceUploadUrl'] = undefined;

/**
 * Output only. Status of the function deployment.
 * @member {module:model/CloudFunction.StatusEnum} status
 */
CloudFunction.prototype['status'] = undefined;

/**
 * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
 * @member {String} timeout
 */
CloudFunction.prototype['timeout'] = undefined;

/**
 * Output only. The last update timestamp of a Cloud Function.
 * @member {String} updateTime
 */
CloudFunction.prototype['updateTime'] = undefined;

/**
 * Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
 * @member {String} versionId
 */
CloudFunction.prototype['versionId'] = undefined;

/**
 * The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/_*_/locations/_*_/connectors/_*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
 * @member {String} vpcConnector
 */
CloudFunction.prototype['vpcConnector'] = undefined;

/**
 * The egress settings for the connector, controlling what traffic is diverted through it.
 * @member {module:model/CloudFunction.VpcConnectorEgressSettingsEnum} vpcConnectorEgressSettings
 */
CloudFunction.prototype['vpcConnectorEgressSettings'] = undefined;





/**
 * Allowed values for the <code>dockerRegistry</code> property.
 * @enum {String}
 * @readonly
 */
CloudFunction['DockerRegistryEnum'] = {

    /**
     * value: "DOCKER_REGISTRY_UNSPECIFIED"
     * @const
     */
    "DOCKER_REGISTRY_UNSPECIFIED": "DOCKER_REGISTRY_UNSPECIFIED",

    /**
     * value: "CONTAINER_REGISTRY"
     * @const
     */
    "CONTAINER_REGISTRY": "CONTAINER_REGISTRY",

    /**
     * value: "ARTIFACT_REGISTRY"
     * @const
     */
    "ARTIFACT_REGISTRY": "ARTIFACT_REGISTRY"
};


/**
 * Allowed values for the <code>ingressSettings</code> property.
 * @enum {String}
 * @readonly
 */
CloudFunction['IngressSettingsEnum'] = {

    /**
     * value: "INGRESS_SETTINGS_UNSPECIFIED"
     * @const
     */
    "INGRESS_SETTINGS_UNSPECIFIED": "INGRESS_SETTINGS_UNSPECIFIED",

    /**
     * value: "ALLOW_ALL"
     * @const
     */
    "ALLOW_ALL": "ALLOW_ALL",

    /**
     * value: "ALLOW_INTERNAL_ONLY"
     * @const
     */
    "ALLOW_INTERNAL_ONLY": "ALLOW_INTERNAL_ONLY",

    /**
     * value: "ALLOW_INTERNAL_AND_GCLB"
     * @const
     */
    "ALLOW_INTERNAL_AND_GCLB": "ALLOW_INTERNAL_AND_GCLB"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CloudFunction['StatusEnum'] = {

    /**
     * value: "CLOUD_FUNCTION_STATUS_UNSPECIFIED"
     * @const
     */
    "CLOUD_FUNCTION_STATUS_UNSPECIFIED": "CLOUD_FUNCTION_STATUS_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "OFFLINE"
     * @const
     */
    "OFFLINE": "OFFLINE",

    /**
     * value: "DEPLOY_IN_PROGRESS"
     * @const
     */
    "DEPLOY_IN_PROGRESS": "DEPLOY_IN_PROGRESS",

    /**
     * value: "DELETE_IN_PROGRESS"
     * @const
     */
    "DELETE_IN_PROGRESS": "DELETE_IN_PROGRESS",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};


/**
 * Allowed values for the <code>vpcConnectorEgressSettings</code> property.
 * @enum {String}
 * @readonly
 */
CloudFunction['VpcConnectorEgressSettingsEnum'] = {

    /**
     * value: "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED"
     * @const
     */
    "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED": "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",

    /**
     * value: "PRIVATE_RANGES_ONLY"
     * @const
     */
    "PRIVATE_RANGES_ONLY": "PRIVATE_RANGES_ONLY",

    /**
     * value: "ALL_TRAFFIC"
     * @const
     */
    "ALL_TRAFFIC": "ALL_TRAFFIC"
};



export default CloudFunction;

