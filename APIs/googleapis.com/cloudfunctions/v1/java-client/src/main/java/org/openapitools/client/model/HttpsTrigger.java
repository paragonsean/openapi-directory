/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes HttpsTrigger, could be used to connect web hooks to function.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:56.190824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpsTrigger {
  /**
   * The security level for the function.
   */
  @JsonAdapter(SecurityLevelEnum.Adapter.class)
  public enum SecurityLevelEnum {
    SECURITY_LEVEL_UNSPECIFIED("SECURITY_LEVEL_UNSPECIFIED"),
    
    SECURE_ALWAYS("SECURE_ALWAYS"),
    
    SECURE_OPTIONAL("SECURE_OPTIONAL");

    private String value;

    SecurityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityLevelEnum fromValue(String value) {
      for (SecurityLevelEnum b : SecurityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecurityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_LEVEL = "securityLevel";
  @SerializedName(SERIALIZED_NAME_SECURITY_LEVEL)
  private SecurityLevelEnum securityLevel;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public HttpsTrigger() {
  }

  public HttpsTrigger(
     String url
  ) {
    this();
    this.url = url;
  }

  public HttpsTrigger securityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

  /**
   * The security level for the function.
   * @return securityLevel
   */
  @javax.annotation.Nullable
  public SecurityLevelEnum getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
  }


  /**
   * Output only. The deployed url for the function.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpsTrigger httpsTrigger = (HttpsTrigger) o;
    return Objects.equals(this.securityLevel, httpsTrigger.securityLevel) &&
        Objects.equals(this.url, httpsTrigger.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(securityLevel, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpsTrigger {\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("securityLevel");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpsTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpsTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpsTrigger is not found in the empty JSON string", HttpsTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpsTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpsTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("securityLevel") != null && !jsonObj.get("securityLevel").isJsonNull()) && !jsonObj.get("securityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityLevel").toString()));
      }
      // validate the optional field `securityLevel`
      if (jsonObj.get("securityLevel") != null && !jsonObj.get("securityLevel").isJsonNull()) {
        SecurityLevelEnum.validateJsonElement(jsonObj.get("securityLevel"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpsTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpsTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpsTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpsTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpsTrigger>() {
           @Override
           public void write(JsonWriter out, HttpsTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpsTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpsTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpsTrigger
   * @throws IOException if the JSON string is invalid with respect to HttpsTrigger
   */
  public static HttpsTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpsTrigger.class);
  }

  /**
   * Convert an instance of HttpsTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

