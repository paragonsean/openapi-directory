/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudFunctionsV2alphaStateMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each Stage of the deployment process
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:56.190824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudFunctionsV2alphaStage {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Name of the Stage. This will be unique for each Stage.
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    NAME_UNSPECIFIED("NAME_UNSPECIFIED"),
    
    ARTIFACT_REGISTRY("ARTIFACT_REGISTRY"),
    
    BUILD("BUILD"),
    
    SERVICE("SERVICE"),
    
    TRIGGER("TRIGGER"),
    
    SERVICE_ROLLBACK("SERVICE_ROLLBACK"),
    
    TRIGGER_ROLLBACK("TRIGGER_ROLLBACK");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resourceUri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  private String resourceUri;

  /**
   * Current state of the Stage
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    NOT_STARTED("NOT_STARTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    COMPLETE("COMPLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_MESSAGES = "stateMessages";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGES)
  private List<GoogleCloudFunctionsV2alphaStateMessage> stateMessages = new ArrayList<>();

  public GoogleCloudFunctionsV2alphaStage() {
  }

  public GoogleCloudFunctionsV2alphaStage message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Message describing the Stage
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudFunctionsV2alphaStage name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Stage. This will be unique for each Stage.
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }


  public GoogleCloudFunctionsV2alphaStage resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Resource of the Stage
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public GoogleCloudFunctionsV2alphaStage resourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * Link to the current Stage resource
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
  }


  public GoogleCloudFunctionsV2alphaStage state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of the Stage
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudFunctionsV2alphaStage stateMessages(List<GoogleCloudFunctionsV2alphaStateMessage> stateMessages) {
    this.stateMessages = stateMessages;
    return this;
  }

  public GoogleCloudFunctionsV2alphaStage addStateMessagesItem(GoogleCloudFunctionsV2alphaStateMessage stateMessagesItem) {
    if (this.stateMessages == null) {
      this.stateMessages = new ArrayList<>();
    }
    this.stateMessages.add(stateMessagesItem);
    return this;
  }

  /**
   * State messages from the current Stage.
   * @return stateMessages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudFunctionsV2alphaStateMessage> getStateMessages() {
    return stateMessages;
  }

  public void setStateMessages(List<GoogleCloudFunctionsV2alphaStateMessage> stateMessages) {
    this.stateMessages = stateMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudFunctionsV2alphaStage googleCloudFunctionsV2alphaStage = (GoogleCloudFunctionsV2alphaStage) o;
    return Objects.equals(this.message, googleCloudFunctionsV2alphaStage.message) &&
        Objects.equals(this.name, googleCloudFunctionsV2alphaStage.name) &&
        Objects.equals(this.resource, googleCloudFunctionsV2alphaStage.resource) &&
        Objects.equals(this.resourceUri, googleCloudFunctionsV2alphaStage.resourceUri) &&
        Objects.equals(this.state, googleCloudFunctionsV2alphaStage.state) &&
        Objects.equals(this.stateMessages, googleCloudFunctionsV2alphaStage.stateMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, name, resource, resourceUri, state, stateMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudFunctionsV2alphaStage {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMessages: ").append(toIndentedString(stateMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("resource");
    openapiFields.add("resourceUri");
    openapiFields.add("state");
    openapiFields.add("stateMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudFunctionsV2alphaStage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudFunctionsV2alphaStage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudFunctionsV2alphaStage is not found in the empty JSON string", GoogleCloudFunctionsV2alphaStage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudFunctionsV2alphaStage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudFunctionsV2alphaStage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("resourceUri") != null && !jsonObj.get("resourceUri").isJsonNull()) && !jsonObj.get("resourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUri").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("stateMessages") != null && !jsonObj.get("stateMessages").isJsonNull()) {
        JsonArray jsonArraystateMessages = jsonObj.getAsJsonArray("stateMessages");
        if (jsonArraystateMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateMessages` to be an array in the JSON string but got `%s`", jsonObj.get("stateMessages").toString()));
          }

          // validate the optional field `stateMessages` (array)
          for (int i = 0; i < jsonArraystateMessages.size(); i++) {
            GoogleCloudFunctionsV2alphaStateMessage.validateJsonElement(jsonArraystateMessages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudFunctionsV2alphaStage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudFunctionsV2alphaStage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudFunctionsV2alphaStage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudFunctionsV2alphaStage.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudFunctionsV2alphaStage>() {
           @Override
           public void write(JsonWriter out, GoogleCloudFunctionsV2alphaStage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudFunctionsV2alphaStage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudFunctionsV2alphaStage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudFunctionsV2alphaStage
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudFunctionsV2alphaStage
   */
  public static GoogleCloudFunctionsV2alphaStage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudFunctionsV2alphaStage.class);
  }

  /**
   * Convert an instance of GoogleCloudFunctionsV2alphaStage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

