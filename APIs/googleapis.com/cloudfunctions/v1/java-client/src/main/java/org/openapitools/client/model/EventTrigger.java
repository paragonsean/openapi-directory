/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailurePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes EventTrigger, used to request events be sent from another service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:56.190824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventTrigger {
  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_FAILURE_POLICY = "failurePolicy";
  @SerializedName(SERIALIZED_NAME_FAILURE_POLICY)
  private FailurePolicy failurePolicy;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public EventTrigger() {
  }

  public EventTrigger eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Required. The type of event to observe. For example: &#x60;providers/cloud.storage/eventTypes/object.change&#x60; and &#x60;providers/cloud.pubsub/eventTypes/topic.publish&#x60;. Event types match pattern &#x60;providers/_*_/eventTypes/_*.*&#x60;. The pattern contains: 1. namespace: For example, &#x60;cloud.storage&#x60; and &#x60;google.firebase.analytics&#x60;. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type &#x60;object&#x60;. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is &#39;change&#39;. These parts are lower case.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventTrigger failurePolicy(FailurePolicy failurePolicy) {
    this.failurePolicy = failurePolicy;
    return this;
  }

  /**
   * Get failurePolicy
   * @return failurePolicy
   */
  @javax.annotation.Nullable
  public FailurePolicy getFailurePolicy() {
    return failurePolicy;
  }

  public void setFailurePolicy(FailurePolicy failurePolicy) {
    this.failurePolicy = failurePolicy;
  }


  public EventTrigger resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Required. The resource(s) from which to observe events, for example, &#x60;projects/_/buckets/myBucket&#x60;. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the &#x60;CloudFunction&#x60;. 2. The resource type must match the pattern expected for an &#x60;event_type&#x60;. For example, an &#x60;EventTrigger&#x60; that has an &#x60;event_type&#x60; of \&quot;google.pubsub.topic.publish\&quot; should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an &#x60;EventTrigger&#x60;. These will always be returned in the normalized \&quot;long\&quot; format. See each *service&#39;s* documentation for supported formats.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public EventTrigger service(String service) {
    this.service = service;
    return this;
  }

  /**
   * The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, &#x60;storage.googleapis.com&#x60; is the default for all event types in the &#x60;google.storage&#x60; namespace.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTrigger eventTrigger = (EventTrigger) o;
    return Objects.equals(this.eventType, eventTrigger.eventType) &&
        Objects.equals(this.failurePolicy, eventTrigger.failurePolicy) &&
        Objects.equals(this.resource, eventTrigger.resource) &&
        Objects.equals(this.service, eventTrigger.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, failurePolicy, resource, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTrigger {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    failurePolicy: ").append(toIndentedString(failurePolicy)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventType");
    openapiFields.add("failurePolicy");
    openapiFields.add("resource");
    openapiFields.add("service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTrigger is not found in the empty JSON string", EventTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `failurePolicy`
      if (jsonObj.get("failurePolicy") != null && !jsonObj.get("failurePolicy").isJsonNull()) {
        FailurePolicy.validateJsonElement(jsonObj.get("failurePolicy"));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTrigger>() {
           @Override
           public void write(JsonWriter out, EventTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventTrigger
   * @throws IOException if the JSON string is invalid with respect to EventTrigger
   */
  public static EventTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTrigger.class);
  }

  /**
   * Convert an instance of EventTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

