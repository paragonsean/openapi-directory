/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CallFunctionRequest;
import org.openapitools.client.model.CallFunctionResponse;
import org.openapitools.client.model.CloudFunction;
import org.openapitools.client.model.GenerateDownloadUrlRequest;
import org.openapitools.client.model.GenerateDownloadUrlResponse;
import org.openapitools.client.model.GenerateUploadUrlRequest;
import org.openapitools.client.model.GenerateUploadUrlResponse;
import org.openapitools.client.model.ListFunctionsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Synchronously invokes a deployed Cloud Function. To be used for testing purposes as very limited traffic is allowed. For more information on the actual limits, refer to [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsCallTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CallFunctionRequest callFunctionRequest = null;
        CallFunctionResponse response = api.cloudfunctionsProjectsLocationsFunctionsCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, callFunctionRequest);
        // TODO: test validations
    }

    /**
     * Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return &#x60;ALREADY_EXISTS&#x60; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsCreateTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CloudFunction cloudFunction = null;
        Operation response = api.cloudfunctionsProjectsLocationsFunctionsCreate(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cloudFunction);
        // TODO: test validations
    }

    /**
     * Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.cloudfunctionsProjectsLocationsFunctionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within minutes after generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateDownloadUrlRequest generateDownloadUrlRequest = null;
        GenerateDownloadUrlResponse response = api.cloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrl(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateDownloadUrlRequest);
        // TODO: test validations
    }

    /**
     * Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 100MB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * &#x60;content-type: application/zip&#x60; * &#x60;x-goog-content-length-range: 0,104857600&#x60; And this header SHOULD NOT be specified: * &#x60;Authorization: Bearer YOUR_TOKEN&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateUploadUrlRequest generateUploadUrlRequest = null;
        GenerateUploadUrlResponse response = api.cloudfunctionsProjectsLocationsFunctionsGenerateUploadUrl(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateUploadUrlRequest);
        // TODO: test validations
    }

    /**
     * Returns a function with the given name from the requested project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String versionId = null;
        CloudFunction response = api.cloudfunctionsProjectsLocationsFunctionsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, versionId);
        // TODO: test validations
    }

    /**
     * Gets the IAM access control policy for a function. Returns an empty policy if the function exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.cloudfunctionsProjectsLocationsFunctionsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Returns a list of functions that belong to the requested project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFunctionsResponse response = api.cloudfunctionsProjectsLocationsFunctionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates existing function.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        CloudFunction cloudFunction = null;
        Operation response = api.cloudfunctionsProjectsLocationsFunctionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, cloudFunction);
        // TODO: test validations
    }

    /**
     * Sets the IAM access control policy on the specified function. Replaces any existing policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.cloudfunctionsProjectsLocationsFunctionsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Tests the specified permissions against the IAM access control policy for a function. If the function does not exist, this will return an empty set of permissions, not a NOT_FOUND error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsFunctionsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.cloudfunctionsProjectsLocationsFunctionsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudfunctionsProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.cloudfunctionsProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
