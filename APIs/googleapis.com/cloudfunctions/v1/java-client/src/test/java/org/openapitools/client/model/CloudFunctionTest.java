/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EventTrigger;
import org.openapitools.client.model.HttpsTrigger;
import org.openapitools.client.model.OnDeployUpdatePolicy;
import org.openapitools.client.model.SecretEnvVar;
import org.openapitools.client.model.SecretVolume;
import org.openapitools.client.model.SourceRepository;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CloudFunction
 */
public class CloudFunctionTest {
    private final CloudFunction model = new CloudFunction();

    /**
     * Model tests for CloudFunction
     */
    @Test
    public void testCloudFunction() {
        // TODO: test CloudFunction
    }

    /**
     * Test the property 'automaticUpdatePolicy'
     */
    @Test
    public void automaticUpdatePolicyTest() {
        // TODO: test automaticUpdatePolicy
    }

    /**
     * Test the property 'availableMemoryMb'
     */
    @Test
    public void availableMemoryMbTest() {
        // TODO: test availableMemoryMb
    }

    /**
     * Test the property 'buildEnvironmentVariables'
     */
    @Test
    public void buildEnvironmentVariablesTest() {
        // TODO: test buildEnvironmentVariables
    }

    /**
     * Test the property 'buildId'
     */
    @Test
    public void buildIdTest() {
        // TODO: test buildId
    }

    /**
     * Test the property 'buildName'
     */
    @Test
    public void buildNameTest() {
        // TODO: test buildName
    }

    /**
     * Test the property 'buildServiceAccount'
     */
    @Test
    public void buildServiceAccountTest() {
        // TODO: test buildServiceAccount
    }

    /**
     * Test the property 'buildWorkerPool'
     */
    @Test
    public void buildWorkerPoolTest() {
        // TODO: test buildWorkerPool
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'dockerRegistry'
     */
    @Test
    public void dockerRegistryTest() {
        // TODO: test dockerRegistry
    }

    /**
     * Test the property 'dockerRepository'
     */
    @Test
    public void dockerRepositoryTest() {
        // TODO: test dockerRepository
    }

    /**
     * Test the property 'entryPoint'
     */
    @Test
    public void entryPointTest() {
        // TODO: test entryPoint
    }

    /**
     * Test the property 'environmentVariables'
     */
    @Test
    public void environmentVariablesTest() {
        // TODO: test environmentVariables
    }

    /**
     * Test the property 'eventTrigger'
     */
    @Test
    public void eventTriggerTest() {
        // TODO: test eventTrigger
    }

    /**
     * Test the property 'httpsTrigger'
     */
    @Test
    public void httpsTriggerTest() {
        // TODO: test httpsTrigger
    }

    /**
     * Test the property 'ingressSettings'
     */
    @Test
    public void ingressSettingsTest() {
        // TODO: test ingressSettings
    }

    /**
     * Test the property 'kmsKeyName'
     */
    @Test
    public void kmsKeyNameTest() {
        // TODO: test kmsKeyName
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'maxInstances'
     */
    @Test
    public void maxInstancesTest() {
        // TODO: test maxInstances
    }

    /**
     * Test the property 'minInstances'
     */
    @Test
    public void minInstancesTest() {
        // TODO: test minInstances
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'onDeployUpdatePolicy'
     */
    @Test
    public void onDeployUpdatePolicyTest() {
        // TODO: test onDeployUpdatePolicy
    }

    /**
     * Test the property 'runtime'
     */
    @Test
    public void runtimeTest() {
        // TODO: test runtime
    }

    /**
     * Test the property 'secretEnvironmentVariables'
     */
    @Test
    public void secretEnvironmentVariablesTest() {
        // TODO: test secretEnvironmentVariables
    }

    /**
     * Test the property 'secretVolumes'
     */
    @Test
    public void secretVolumesTest() {
        // TODO: test secretVolumes
    }

    /**
     * Test the property 'serviceAccountEmail'
     */
    @Test
    public void serviceAccountEmailTest() {
        // TODO: test serviceAccountEmail
    }

    /**
     * Test the property 'sourceArchiveUrl'
     */
    @Test
    public void sourceArchiveUrlTest() {
        // TODO: test sourceArchiveUrl
    }

    /**
     * Test the property 'sourceRepository'
     */
    @Test
    public void sourceRepositoryTest() {
        // TODO: test sourceRepository
    }

    /**
     * Test the property 'sourceToken'
     */
    @Test
    public void sourceTokenTest() {
        // TODO: test sourceToken
    }

    /**
     * Test the property 'sourceUploadUrl'
     */
    @Test
    public void sourceUploadUrlTest() {
        // TODO: test sourceUploadUrl
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'updateTime'
     */
    @Test
    public void updateTimeTest() {
        // TODO: test updateTime
    }

    /**
     * Test the property 'versionId'
     */
    @Test
    public void versionIdTest() {
        // TODO: test versionId
    }

    /**
     * Test the property 'vpcConnector'
     */
    @Test
    public void vpcConnectorTest() {
        // TODO: test vpcConnector
    }

    /**
     * Test the property 'vpcConnectorEgressSettings'
     */
    @Test
    public void vpcConnectorEgressSettingsTest() {
        // TODO: test vpcConnectorEgressSettings
    }

}
