# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecretVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, version: str=None):
        """SecretVersion - a model defined in OpenAPI

        :param path: The path of this SecretVersion.
        :param version: The version of this SecretVersion.
        """
        self.openapi_types = {
            'path': str,
            'version': str
        }

        self.attribute_map = {
            'path': 'path',
            'version': 'version'
        }

        self._path = path
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretVersion of this SecretVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this SecretVersion.

        Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.

        :return: The path of this SecretVersion.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SecretVersion.

        Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.

        :param path: The path of this SecretVersion.
        :type path: str
        """

        self._path = path

    @property
    def version(self):
        """Gets the version of this SecretVersion.

        Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.

        :return: The version of this SecretVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SecretVersion.

        Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.

        :param version: The version of this SecretVersion.
        :type version: str
        """

        self._version = version
