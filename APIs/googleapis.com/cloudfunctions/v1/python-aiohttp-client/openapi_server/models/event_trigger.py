# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_policy import FailurePolicy
from openapi_server import util


class EventTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None, failure_policy: FailurePolicy=None, resource: str=None, service: str=None):
        """EventTrigger - a model defined in OpenAPI

        :param event_type: The event_type of this EventTrigger.
        :param failure_policy: The failure_policy of this EventTrigger.
        :param resource: The resource of this EventTrigger.
        :param service: The service of this EventTrigger.
        """
        self.openapi_types = {
            'event_type': str,
            'failure_policy': FailurePolicy,
            'resource': str,
            'service': str
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'failure_policy': 'failurePolicy',
            'resource': 'resource',
            'service': 'service'
        }

        self._event_type = event_type
        self._failure_policy = failure_policy
        self._resource = resource
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTrigger of this EventTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this EventTrigger.

        Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.

        :return: The event_type of this EventTrigger.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventTrigger.

        Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.

        :param event_type: The event_type of this EventTrigger.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def failure_policy(self):
        """Gets the failure_policy of this EventTrigger.


        :return: The failure_policy of this EventTrigger.
        :rtype: FailurePolicy
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy):
        """Sets the failure_policy of this EventTrigger.


        :param failure_policy: The failure_policy of this EventTrigger.
        :type failure_policy: FailurePolicy
        """

        self._failure_policy = failure_policy

    @property
    def resource(self):
        """Gets the resource of this EventTrigger.

        Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized \"long\" format. See each *service's* documentation for supported formats.

        :return: The resource of this EventTrigger.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EventTrigger.

        Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized \"long\" format. See each *service's* documentation for supported formats.

        :param resource: The resource of this EventTrigger.
        :type resource: str
        """

        self._resource = resource

    @property
    def service(self):
        """Gets the service of this EventTrigger.

        The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.

        :return: The service of this EventTrigger.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EventTrigger.

        The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.

        :param service: The service of this EventTrigger.
        :type service: str
        """

        self._service = service
