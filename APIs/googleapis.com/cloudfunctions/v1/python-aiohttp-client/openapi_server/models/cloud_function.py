# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_trigger import EventTrigger
from openapi_server.models.https_trigger import HttpsTrigger
from openapi_server.models.on_deploy_update_policy import OnDeployUpdatePolicy
from openapi_server.models.secret_env_var import SecretEnvVar
from openapi_server.models.secret_volume import SecretVolume
from openapi_server.models.source_repository import SourceRepository
from openapi_server import util


class CloudFunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_update_policy: object=None, available_memory_mb: int=None, build_environment_variables: Dict[str, str]=None, build_id: str=None, build_name: str=None, build_service_account: str=None, build_worker_pool: str=None, description: str=None, docker_registry: str=None, docker_repository: str=None, entry_point: str=None, environment_variables: Dict[str, str]=None, event_trigger: EventTrigger=None, https_trigger: HttpsTrigger=None, ingress_settings: str=None, kms_key_name: str=None, labels: Dict[str, str]=None, max_instances: int=None, min_instances: int=None, name: str=None, network: str=None, on_deploy_update_policy: OnDeployUpdatePolicy=None, runtime: str=None, secret_environment_variables: List[SecretEnvVar]=None, secret_volumes: List[SecretVolume]=None, service_account_email: str=None, source_archive_url: str=None, source_repository: SourceRepository=None, source_token: str=None, source_upload_url: str=None, status: str=None, timeout: str=None, update_time: str=None, version_id: str=None, vpc_connector: str=None, vpc_connector_egress_settings: str=None):
        """CloudFunction - a model defined in OpenAPI

        :param automatic_update_policy: The automatic_update_policy of this CloudFunction.
        :param available_memory_mb: The available_memory_mb of this CloudFunction.
        :param build_environment_variables: The build_environment_variables of this CloudFunction.
        :param build_id: The build_id of this CloudFunction.
        :param build_name: The build_name of this CloudFunction.
        :param build_service_account: The build_service_account of this CloudFunction.
        :param build_worker_pool: The build_worker_pool of this CloudFunction.
        :param description: The description of this CloudFunction.
        :param docker_registry: The docker_registry of this CloudFunction.
        :param docker_repository: The docker_repository of this CloudFunction.
        :param entry_point: The entry_point of this CloudFunction.
        :param environment_variables: The environment_variables of this CloudFunction.
        :param event_trigger: The event_trigger of this CloudFunction.
        :param https_trigger: The https_trigger of this CloudFunction.
        :param ingress_settings: The ingress_settings of this CloudFunction.
        :param kms_key_name: The kms_key_name of this CloudFunction.
        :param labels: The labels of this CloudFunction.
        :param max_instances: The max_instances of this CloudFunction.
        :param min_instances: The min_instances of this CloudFunction.
        :param name: The name of this CloudFunction.
        :param network: The network of this CloudFunction.
        :param on_deploy_update_policy: The on_deploy_update_policy of this CloudFunction.
        :param runtime: The runtime of this CloudFunction.
        :param secret_environment_variables: The secret_environment_variables of this CloudFunction.
        :param secret_volumes: The secret_volumes of this CloudFunction.
        :param service_account_email: The service_account_email of this CloudFunction.
        :param source_archive_url: The source_archive_url of this CloudFunction.
        :param source_repository: The source_repository of this CloudFunction.
        :param source_token: The source_token of this CloudFunction.
        :param source_upload_url: The source_upload_url of this CloudFunction.
        :param status: The status of this CloudFunction.
        :param timeout: The timeout of this CloudFunction.
        :param update_time: The update_time of this CloudFunction.
        :param version_id: The version_id of this CloudFunction.
        :param vpc_connector: The vpc_connector of this CloudFunction.
        :param vpc_connector_egress_settings: The vpc_connector_egress_settings of this CloudFunction.
        """
        self.openapi_types = {
            'automatic_update_policy': object,
            'available_memory_mb': int,
            'build_environment_variables': Dict[str, str],
            'build_id': str,
            'build_name': str,
            'build_service_account': str,
            'build_worker_pool': str,
            'description': str,
            'docker_registry': str,
            'docker_repository': str,
            'entry_point': str,
            'environment_variables': Dict[str, str],
            'event_trigger': EventTrigger,
            'https_trigger': HttpsTrigger,
            'ingress_settings': str,
            'kms_key_name': str,
            'labels': Dict[str, str],
            'max_instances': int,
            'min_instances': int,
            'name': str,
            'network': str,
            'on_deploy_update_policy': OnDeployUpdatePolicy,
            'runtime': str,
            'secret_environment_variables': List[SecretEnvVar],
            'secret_volumes': List[SecretVolume],
            'service_account_email': str,
            'source_archive_url': str,
            'source_repository': SourceRepository,
            'source_token': str,
            'source_upload_url': str,
            'status': str,
            'timeout': str,
            'update_time': str,
            'version_id': str,
            'vpc_connector': str,
            'vpc_connector_egress_settings': str
        }

        self.attribute_map = {
            'automatic_update_policy': 'automaticUpdatePolicy',
            'available_memory_mb': 'availableMemoryMb',
            'build_environment_variables': 'buildEnvironmentVariables',
            'build_id': 'buildId',
            'build_name': 'buildName',
            'build_service_account': 'buildServiceAccount',
            'build_worker_pool': 'buildWorkerPool',
            'description': 'description',
            'docker_registry': 'dockerRegistry',
            'docker_repository': 'dockerRepository',
            'entry_point': 'entryPoint',
            'environment_variables': 'environmentVariables',
            'event_trigger': 'eventTrigger',
            'https_trigger': 'httpsTrigger',
            'ingress_settings': 'ingressSettings',
            'kms_key_name': 'kmsKeyName',
            'labels': 'labels',
            'max_instances': 'maxInstances',
            'min_instances': 'minInstances',
            'name': 'name',
            'network': 'network',
            'on_deploy_update_policy': 'onDeployUpdatePolicy',
            'runtime': 'runtime',
            'secret_environment_variables': 'secretEnvironmentVariables',
            'secret_volumes': 'secretVolumes',
            'service_account_email': 'serviceAccountEmail',
            'source_archive_url': 'sourceArchiveUrl',
            'source_repository': 'sourceRepository',
            'source_token': 'sourceToken',
            'source_upload_url': 'sourceUploadUrl',
            'status': 'status',
            'timeout': 'timeout',
            'update_time': 'updateTime',
            'version_id': 'versionId',
            'vpc_connector': 'vpcConnector',
            'vpc_connector_egress_settings': 'vpcConnectorEgressSettings'
        }

        self._automatic_update_policy = automatic_update_policy
        self._available_memory_mb = available_memory_mb
        self._build_environment_variables = build_environment_variables
        self._build_id = build_id
        self._build_name = build_name
        self._build_service_account = build_service_account
        self._build_worker_pool = build_worker_pool
        self._description = description
        self._docker_registry = docker_registry
        self._docker_repository = docker_repository
        self._entry_point = entry_point
        self._environment_variables = environment_variables
        self._event_trigger = event_trigger
        self._https_trigger = https_trigger
        self._ingress_settings = ingress_settings
        self._kms_key_name = kms_key_name
        self._labels = labels
        self._max_instances = max_instances
        self._min_instances = min_instances
        self._name = name
        self._network = network
        self._on_deploy_update_policy = on_deploy_update_policy
        self._runtime = runtime
        self._secret_environment_variables = secret_environment_variables
        self._secret_volumes = secret_volumes
        self._service_account_email = service_account_email
        self._source_archive_url = source_archive_url
        self._source_repository = source_repository
        self._source_token = source_token
        self._source_upload_url = source_upload_url
        self._status = status
        self._timeout = timeout
        self._update_time = update_time
        self._version_id = version_id
        self._vpc_connector = vpc_connector
        self._vpc_connector_egress_settings = vpc_connector_egress_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudFunction of this CloudFunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_update_policy(self):
        """Gets the automatic_update_policy of this CloudFunction.

        Security patches are applied automatically to the runtime without requiring the function to be redeployed.

        :return: The automatic_update_policy of this CloudFunction.
        :rtype: object
        """
        return self._automatic_update_policy

    @automatic_update_policy.setter
    def automatic_update_policy(self, automatic_update_policy):
        """Sets the automatic_update_policy of this CloudFunction.

        Security patches are applied automatically to the runtime without requiring the function to be redeployed.

        :param automatic_update_policy: The automatic_update_policy of this CloudFunction.
        :type automatic_update_policy: object
        """

        self._automatic_update_policy = automatic_update_policy

    @property
    def available_memory_mb(self):
        """Gets the available_memory_mb of this CloudFunction.

        The amount of memory in MB available for a function. Defaults to 256MB.

        :return: The available_memory_mb of this CloudFunction.
        :rtype: int
        """
        return self._available_memory_mb

    @available_memory_mb.setter
    def available_memory_mb(self, available_memory_mb):
        """Sets the available_memory_mb of this CloudFunction.

        The amount of memory in MB available for a function. Defaults to 256MB.

        :param available_memory_mb: The available_memory_mb of this CloudFunction.
        :type available_memory_mb: int
        """

        self._available_memory_mb = available_memory_mb

    @property
    def build_environment_variables(self):
        """Gets the build_environment_variables of this CloudFunction.

        Build environment variables that shall be available during build time.

        :return: The build_environment_variables of this CloudFunction.
        :rtype: Dict[str, str]
        """
        return self._build_environment_variables

    @build_environment_variables.setter
    def build_environment_variables(self, build_environment_variables):
        """Sets the build_environment_variables of this CloudFunction.

        Build environment variables that shall be available during build time.

        :param build_environment_variables: The build_environment_variables of this CloudFunction.
        :type build_environment_variables: Dict[str, str]
        """

        self._build_environment_variables = build_environment_variables

    @property
    def build_id(self):
        """Gets the build_id of this CloudFunction.

        Output only. The Cloud Build ID of the latest successful deployment of the function.

        :return: The build_id of this CloudFunction.
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this CloudFunction.

        Output only. The Cloud Build ID of the latest successful deployment of the function.

        :param build_id: The build_id of this CloudFunction.
        :type build_id: str
        """

        self._build_id = build_id

    @property
    def build_name(self):
        """Gets the build_name of this CloudFunction.

        Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.

        :return: The build_name of this CloudFunction.
        :rtype: str
        """
        return self._build_name

    @build_name.setter
    def build_name(self, build_name):
        """Sets the build_name of this CloudFunction.

        Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.

        :param build_name: The build_name of this CloudFunction.
        :type build_name: str
        """

        self._build_name = build_name

    @property
    def build_service_account(self):
        """Gets the build_service_account of this CloudFunction.

        Optional. A service account the user provides for use with Cloud Build.

        :return: The build_service_account of this CloudFunction.
        :rtype: str
        """
        return self._build_service_account

    @build_service_account.setter
    def build_service_account(self, build_service_account):
        """Sets the build_service_account of this CloudFunction.

        Optional. A service account the user provides for use with Cloud Build.

        :param build_service_account: The build_service_account of this CloudFunction.
        :type build_service_account: str
        """

        self._build_service_account = build_service_account

    @property
    def build_worker_pool(self):
        """Gets the build_worker_pool of this CloudFunction.

        Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.

        :return: The build_worker_pool of this CloudFunction.
        :rtype: str
        """
        return self._build_worker_pool

    @build_worker_pool.setter
    def build_worker_pool(self, build_worker_pool):
        """Sets the build_worker_pool of this CloudFunction.

        Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.

        :param build_worker_pool: The build_worker_pool of this CloudFunction.
        :type build_worker_pool: str
        """

        self._build_worker_pool = build_worker_pool

    @property
    def description(self):
        """Gets the description of this CloudFunction.

        User-provided description of a function.

        :return: The description of this CloudFunction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudFunction.

        User-provided description of a function.

        :param description: The description of this CloudFunction.
        :type description: str
        """

        self._description = description

    @property
    def docker_registry(self):
        """Gets the docker_registry of this CloudFunction.

        Docker Registry to use for this deployment. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.

        :return: The docker_registry of this CloudFunction.
        :rtype: str
        """
        return self._docker_registry

    @docker_registry.setter
    def docker_registry(self, docker_registry):
        """Sets the docker_registry of this CloudFunction.

        Docker Registry to use for this deployment. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.

        :param docker_registry: The docker_registry of this CloudFunction.
        :type docker_registry: str
        """
        allowed_values = ["DOCKER_REGISTRY_UNSPECIFIED", "CONTAINER_REGISTRY", "ARTIFACT_REGISTRY"]  # noqa: E501
        if docker_registry not in allowed_values:
            raise ValueError(
                "Invalid value for `docker_registry` ({0}), must be one of {1}"
                .format(docker_registry, allowed_values)
            )

        self._docker_registry = docker_registry

    @property
    def docker_repository(self):
        """Gets the docker_repository of this CloudFunction.

        User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.

        :return: The docker_repository of this CloudFunction.
        :rtype: str
        """
        return self._docker_repository

    @docker_repository.setter
    def docker_repository(self, docker_repository):
        """Sets the docker_repository of this CloudFunction.

        User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.

        :param docker_repository: The docker_repository of this CloudFunction.
        :type docker_repository: str
        """

        self._docker_repository = docker_repository

    @property
    def entry_point(self):
        """Gets the entry_point of this CloudFunction.

        The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.

        :return: The entry_point of this CloudFunction.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this CloudFunction.

        The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.

        :param entry_point: The entry_point of this CloudFunction.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def environment_variables(self):
        """Gets the environment_variables of this CloudFunction.

        Environment variables that shall be available during function execution.

        :return: The environment_variables of this CloudFunction.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this CloudFunction.

        Environment variables that shall be available during function execution.

        :param environment_variables: The environment_variables of this CloudFunction.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def event_trigger(self):
        """Gets the event_trigger of this CloudFunction.


        :return: The event_trigger of this CloudFunction.
        :rtype: EventTrigger
        """
        return self._event_trigger

    @event_trigger.setter
    def event_trigger(self, event_trigger):
        """Sets the event_trigger of this CloudFunction.


        :param event_trigger: The event_trigger of this CloudFunction.
        :type event_trigger: EventTrigger
        """

        self._event_trigger = event_trigger

    @property
    def https_trigger(self):
        """Gets the https_trigger of this CloudFunction.


        :return: The https_trigger of this CloudFunction.
        :rtype: HttpsTrigger
        """
        return self._https_trigger

    @https_trigger.setter
    def https_trigger(self, https_trigger):
        """Sets the https_trigger of this CloudFunction.


        :param https_trigger: The https_trigger of this CloudFunction.
        :type https_trigger: HttpsTrigger
        """

        self._https_trigger = https_trigger

    @property
    def ingress_settings(self):
        """Gets the ingress_settings of this CloudFunction.

        The ingress settings for the function, controlling what traffic can reach it.

        :return: The ingress_settings of this CloudFunction.
        :rtype: str
        """
        return self._ingress_settings

    @ingress_settings.setter
    def ingress_settings(self, ingress_settings):
        """Sets the ingress_settings of this CloudFunction.

        The ingress settings for the function, controlling what traffic can reach it.

        :param ingress_settings: The ingress_settings of this CloudFunction.
        :type ingress_settings: str
        """
        allowed_values = ["INGRESS_SETTINGS_UNSPECIFIED", "ALLOW_ALL", "ALLOW_INTERNAL_ONLY", "ALLOW_INTERNAL_AND_GCLB"]  # noqa: E501
        if ingress_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `ingress_settings` ({0}), must be one of {1}"
                .format(ingress_settings, allowed_values)
            )

        self._ingress_settings = ingress_settings

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this CloudFunction.

        Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.

        :return: The kms_key_name of this CloudFunction.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this CloudFunction.

        Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.

        :param kms_key_name: The kms_key_name of this CloudFunction.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def labels(self):
        """Gets the labels of this CloudFunction.

        Labels associated with this Cloud Function.

        :return: The labels of this CloudFunction.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CloudFunction.

        Labels associated with this Cloud Function.

        :param labels: The labels of this CloudFunction.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def max_instances(self):
        """Gets the max_instances of this CloudFunction.

        The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.

        :return: The max_instances of this CloudFunction.
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this CloudFunction.

        The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.

        :param max_instances: The max_instances of this CloudFunction.
        :type max_instances: int
        """

        self._max_instances = max_instances

    @property
    def min_instances(self):
        """Gets the min_instances of this CloudFunction.

        A lower bound for the number function instances that may coexist at a given time.

        :return: The min_instances of this CloudFunction.
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this CloudFunction.

        A lower bound for the number function instances that may coexist at a given time.

        :param min_instances: The min_instances of this CloudFunction.
        :type min_instances: int
        """

        self._min_instances = min_instances

    @property
    def name(self):
        """Gets the name of this CloudFunction.

        A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`

        :return: The name of this CloudFunction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudFunction.

        A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`

        :param name: The name of this CloudFunction.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this CloudFunction.

        Deprecated: use vpc_connector

        :return: The network of this CloudFunction.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CloudFunction.

        Deprecated: use vpc_connector

        :param network: The network of this CloudFunction.
        :type network: str
        """

        self._network = network

    @property
    def on_deploy_update_policy(self):
        """Gets the on_deploy_update_policy of this CloudFunction.


        :return: The on_deploy_update_policy of this CloudFunction.
        :rtype: OnDeployUpdatePolicy
        """
        return self._on_deploy_update_policy

    @on_deploy_update_policy.setter
    def on_deploy_update_policy(self, on_deploy_update_policy):
        """Sets the on_deploy_update_policy of this CloudFunction.


        :param on_deploy_update_policy: The on_deploy_update_policy of this CloudFunction.
        :type on_deploy_update_policy: OnDeployUpdatePolicy
        """

        self._on_deploy_update_policy = on_deploy_update_policy

    @property
    def runtime(self):
        """Gets the runtime of this CloudFunction.

        The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).

        :return: The runtime of this CloudFunction.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this CloudFunction.

        The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).

        :param runtime: The runtime of this CloudFunction.
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def secret_environment_variables(self):
        """Gets the secret_environment_variables of this CloudFunction.

        Secret environment variables configuration.

        :return: The secret_environment_variables of this CloudFunction.
        :rtype: List[SecretEnvVar]
        """
        return self._secret_environment_variables

    @secret_environment_variables.setter
    def secret_environment_variables(self, secret_environment_variables):
        """Sets the secret_environment_variables of this CloudFunction.

        Secret environment variables configuration.

        :param secret_environment_variables: The secret_environment_variables of this CloudFunction.
        :type secret_environment_variables: List[SecretEnvVar]
        """

        self._secret_environment_variables = secret_environment_variables

    @property
    def secret_volumes(self):
        """Gets the secret_volumes of this CloudFunction.

        Secret volumes configuration.

        :return: The secret_volumes of this CloudFunction.
        :rtype: List[SecretVolume]
        """
        return self._secret_volumes

    @secret_volumes.setter
    def secret_volumes(self, secret_volumes):
        """Sets the secret_volumes of this CloudFunction.

        Secret volumes configuration.

        :param secret_volumes: The secret_volumes of this CloudFunction.
        :type secret_volumes: List[SecretVolume]
        """

        self._secret_volumes = secret_volumes

    @property
    def service_account_email(self):
        """Gets the service_account_email of this CloudFunction.

        The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.

        :return: The service_account_email of this CloudFunction.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this CloudFunction.

        The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.

        :param service_account_email: The service_account_email of this CloudFunction.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def source_archive_url(self):
        """Gets the source_archive_url of this CloudFunction.

        The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.

        :return: The source_archive_url of this CloudFunction.
        :rtype: str
        """
        return self._source_archive_url

    @source_archive_url.setter
    def source_archive_url(self, source_archive_url):
        """Sets the source_archive_url of this CloudFunction.

        The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.

        :param source_archive_url: The source_archive_url of this CloudFunction.
        :type source_archive_url: str
        """

        self._source_archive_url = source_archive_url

    @property
    def source_repository(self):
        """Gets the source_repository of this CloudFunction.


        :return: The source_repository of this CloudFunction.
        :rtype: SourceRepository
        """
        return self._source_repository

    @source_repository.setter
    def source_repository(self, source_repository):
        """Sets the source_repository of this CloudFunction.


        :param source_repository: The source_repository of this CloudFunction.
        :type source_repository: SourceRepository
        """

        self._source_repository = source_repository

    @property
    def source_token(self):
        """Gets the source_token of this CloudFunction.

        Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :return: The source_token of this CloudFunction.
        :rtype: str
        """
        return self._source_token

    @source_token.setter
    def source_token(self, source_token):
        """Sets the source_token of this CloudFunction.

        Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :param source_token: The source_token of this CloudFunction.
        :type source_token: str
        """

        self._source_token = source_token

    @property
    def source_upload_url(self):
        """Gets the source_upload_url of this CloudFunction.

        The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)

        :return: The source_upload_url of this CloudFunction.
        :rtype: str
        """
        return self._source_upload_url

    @source_upload_url.setter
    def source_upload_url(self, source_upload_url):
        """Sets the source_upload_url of this CloudFunction.

        The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)

        :param source_upload_url: The source_upload_url of this CloudFunction.
        :type source_upload_url: str
        """

        self._source_upload_url = source_upload_url

    @property
    def status(self):
        """Gets the status of this CloudFunction.

        Output only. Status of the function deployment.

        :return: The status of this CloudFunction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloudFunction.

        Output only. Status of the function deployment.

        :param status: The status of this CloudFunction.
        :type status: str
        """
        allowed_values = ["CLOUD_FUNCTION_STATUS_UNSPECIFIED", "ACTIVE", "OFFLINE", "DEPLOY_IN_PROGRESS", "DELETE_IN_PROGRESS", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timeout(self):
        """Gets the timeout of this CloudFunction.

        The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.

        :return: The timeout of this CloudFunction.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CloudFunction.

        The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.

        :param timeout: The timeout of this CloudFunction.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def update_time(self):
        """Gets the update_time of this CloudFunction.

        Output only. The last update timestamp of a Cloud Function.

        :return: The update_time of this CloudFunction.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CloudFunction.

        Output only. The last update timestamp of a Cloud Function.

        :param update_time: The update_time of this CloudFunction.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version_id(self):
        """Gets the version_id of this CloudFunction.

        Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.

        :return: The version_id of this CloudFunction.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this CloudFunction.

        Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.

        :param version_id: The version_id of this CloudFunction.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def vpc_connector(self):
        """Gets the vpc_connector of this CloudFunction.

        The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.

        :return: The vpc_connector of this CloudFunction.
        :rtype: str
        """
        return self._vpc_connector

    @vpc_connector.setter
    def vpc_connector(self, vpc_connector):
        """Sets the vpc_connector of this CloudFunction.

        The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.

        :param vpc_connector: The vpc_connector of this CloudFunction.
        :type vpc_connector: str
        """

        self._vpc_connector = vpc_connector

    @property
    def vpc_connector_egress_settings(self):
        """Gets the vpc_connector_egress_settings of this CloudFunction.

        The egress settings for the connector, controlling what traffic is diverted through it.

        :return: The vpc_connector_egress_settings of this CloudFunction.
        :rtype: str
        """
        return self._vpc_connector_egress_settings

    @vpc_connector_egress_settings.setter
    def vpc_connector_egress_settings(self, vpc_connector_egress_settings):
        """Sets the vpc_connector_egress_settings of this CloudFunction.

        The egress settings for the connector, controlling what traffic is diverted through it.

        :param vpc_connector_egress_settings: The vpc_connector_egress_settings of this CloudFunction.
        :type vpc_connector_egress_settings: str
        """
        allowed_values = ["VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED", "PRIVATE_RANGES_ONLY", "ALL_TRAFFIC"]  # noqa: E501
        if vpc_connector_egress_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `vpc_connector_egress_settings` ({0}), must be one of {1}"
                .format(vpc_connector_egress_settings, allowed_values)
            )

        self._vpc_connector_egress_settings = vpc_connector_egress_settings
