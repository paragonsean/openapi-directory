# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpsTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_level: str=None, url: str=None):
        """HttpsTrigger - a model defined in OpenAPI

        :param security_level: The security_level of this HttpsTrigger.
        :param url: The url of this HttpsTrigger.
        """
        self.openapi_types = {
            'security_level': str,
            'url': str
        }

        self.attribute_map = {
            'security_level': 'securityLevel',
            'url': 'url'
        }

        self._security_level = security_level
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpsTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpsTrigger of this HttpsTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_level(self):
        """Gets the security_level of this HttpsTrigger.

        The security level for the function.

        :return: The security_level of this HttpsTrigger.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this HttpsTrigger.

        The security level for the function.

        :param security_level: The security_level of this HttpsTrigger.
        :type security_level: str
        """
        allowed_values = ["SECURITY_LEVEL_UNSPECIFIED", "SECURE_ALWAYS", "SECURE_OPTIONAL"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def url(self):
        """Gets the url of this HttpsTrigger.

        Output only. The deployed url for the function.

        :return: The url of this HttpsTrigger.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HttpsTrigger.

        Output only. The deployed url for the function.

        :param url: The url of this HttpsTrigger.
        :type url: str
        """

        self._url = url
