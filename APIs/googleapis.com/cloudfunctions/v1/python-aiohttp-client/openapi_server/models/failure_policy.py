# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailurePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retry: object=None):
        """FailurePolicy - a model defined in OpenAPI

        :param retry: The retry of this FailurePolicy.
        """
        self.openapi_types = {
            'retry': object
        }

        self.attribute_map = {
            'retry': 'retry'
        }

        self._retry = retry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailurePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailurePolicy of this FailurePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retry(self):
        """Gets the retry of this FailurePolicy.

        Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.

        :return: The retry of this FailurePolicy.
        :rtype: object
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this FailurePolicy.

        Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.

        :param retry: The retry of this FailurePolicy.
        :type retry: object
        """

        self._retry = retry
