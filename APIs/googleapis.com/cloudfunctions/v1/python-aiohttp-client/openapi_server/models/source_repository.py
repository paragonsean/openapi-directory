# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployed_url: str=None, url: str=None):
        """SourceRepository - a model defined in OpenAPI

        :param deployed_url: The deployed_url of this SourceRepository.
        :param url: The url of this SourceRepository.
        """
        self.openapi_types = {
            'deployed_url': str,
            'url': str
        }

        self.attribute_map = {
            'deployed_url': 'deployedUrl',
            'url': 'url'
        }

        self._deployed_url = deployed_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceRepository of this SourceRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployed_url(self):
        """Gets the deployed_url of this SourceRepository.

        Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.

        :return: The deployed_url of this SourceRepository.
        :rtype: str
        """
        return self._deployed_url

    @deployed_url.setter
    def deployed_url(self, deployed_url):
        """Sets the deployed_url of this SourceRepository.

        Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.

        :param deployed_url: The deployed_url of this SourceRepository.
        :type deployed_url: str
        """

        self._deployed_url = deployed_url

    @property
    def url(self):
        """Gets the url of this SourceRepository.

        The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.

        :return: The url of this SourceRepository.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SourceRepository.

        The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.

        :param url: The url of this SourceRepository.
        :type url: str
        """

        self._url = url
