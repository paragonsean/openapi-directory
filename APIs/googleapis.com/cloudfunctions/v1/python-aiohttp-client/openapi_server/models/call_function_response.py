# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallFunctionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, execution_id: str=None, result: str=None):
        """CallFunctionResponse - a model defined in OpenAPI

        :param error: The error of this CallFunctionResponse.
        :param execution_id: The execution_id of this CallFunctionResponse.
        :param result: The result of this CallFunctionResponse.
        """
        self.openapi_types = {
            'error': str,
            'execution_id': str,
            'result': str
        }

        self.attribute_map = {
            'error': 'error',
            'execution_id': 'executionId',
            'result': 'result'
        }

        self._error = error
        self._execution_id = execution_id
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallFunctionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallFunctionResponse of this CallFunctionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this CallFunctionResponse.

        Either system or user-function generated error. Set if execution was not successful.

        :return: The error of this CallFunctionResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CallFunctionResponse.

        Either system or user-function generated error. Set if execution was not successful.

        :param error: The error of this CallFunctionResponse.
        :type error: str
        """

        self._error = error

    @property
    def execution_id(self):
        """Gets the execution_id of this CallFunctionResponse.

        Execution id of function invocation.

        :return: The execution_id of this CallFunctionResponse.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this CallFunctionResponse.

        Execution id of function invocation.

        :param execution_id: The execution_id of this CallFunctionResponse.
        :type execution_id: str
        """

        self._execution_id = execution_id

    @property
    def result(self):
        """Gets the result of this CallFunctionResponse.

        Result populated for successful execution of synchronous function. Will not be populated if function does not return a result through context.

        :return: The result of this CallFunctionResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CallFunctionResponse.

        Result populated for successful execution of synchronous function. Will not be populated if function does not return a result through context.

        :param result: The result of this CallFunctionResponse.
        :type result: str
        """

        self._result = result
