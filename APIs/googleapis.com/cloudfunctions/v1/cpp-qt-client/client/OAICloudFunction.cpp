/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudFunction::OAICloudFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudFunction::OAICloudFunction() {
    this->initializeModel();
}

OAICloudFunction::~OAICloudFunction() {}

void OAICloudFunction::initializeModel() {

    m_automatic_update_policy_isSet = false;
    m_automatic_update_policy_isValid = false;

    m_available_memory_mb_isSet = false;
    m_available_memory_mb_isValid = false;

    m_build_environment_variables_isSet = false;
    m_build_environment_variables_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_name_isSet = false;
    m_build_name_isValid = false;

    m_build_service_account_isSet = false;
    m_build_service_account_isValid = false;

    m_build_worker_pool_isSet = false;
    m_build_worker_pool_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_docker_registry_isSet = false;
    m_docker_registry_isValid = false;

    m_docker_repository_isSet = false;
    m_docker_repository_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_event_trigger_isSet = false;
    m_event_trigger_isValid = false;

    m_https_trigger_isSet = false;
    m_https_trigger_isValid = false;

    m_ingress_settings_isSet = false;
    m_ingress_settings_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_instances_isSet = false;
    m_max_instances_isValid = false;

    m_min_instances_isSet = false;
    m_min_instances_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_on_deploy_update_policy_isSet = false;
    m_on_deploy_update_policy_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_secret_environment_variables_isSet = false;
    m_secret_environment_variables_isValid = false;

    m_secret_volumes_isSet = false;
    m_secret_volumes_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_source_archive_url_isSet = false;
    m_source_archive_url_isValid = false;

    m_source_repository_isSet = false;
    m_source_repository_isValid = false;

    m_source_token_isSet = false;
    m_source_token_isValid = false;

    m_source_upload_url_isSet = false;
    m_source_upload_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_vpc_connector_isSet = false;
    m_vpc_connector_isValid = false;

    m_vpc_connector_egress_settings_isSet = false;
    m_vpc_connector_egress_settings_isValid = false;
}

void OAICloudFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudFunction::fromJsonObject(QJsonObject json) {

    m_automatic_update_policy_isValid = ::OpenAPI::fromJsonValue(m_automatic_update_policy, json[QString("automaticUpdatePolicy")]);
    m_automatic_update_policy_isSet = !json[QString("automaticUpdatePolicy")].isNull() && m_automatic_update_policy_isValid;

    m_available_memory_mb_isValid = ::OpenAPI::fromJsonValue(m_available_memory_mb, json[QString("availableMemoryMb")]);
    m_available_memory_mb_isSet = !json[QString("availableMemoryMb")].isNull() && m_available_memory_mb_isValid;

    m_build_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_build_environment_variables, json[QString("buildEnvironmentVariables")]);
    m_build_environment_variables_isSet = !json[QString("buildEnvironmentVariables")].isNull() && m_build_environment_variables_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_build_name_isValid = ::OpenAPI::fromJsonValue(m_build_name, json[QString("buildName")]);
    m_build_name_isSet = !json[QString("buildName")].isNull() && m_build_name_isValid;

    m_build_service_account_isValid = ::OpenAPI::fromJsonValue(m_build_service_account, json[QString("buildServiceAccount")]);
    m_build_service_account_isSet = !json[QString("buildServiceAccount")].isNull() && m_build_service_account_isValid;

    m_build_worker_pool_isValid = ::OpenAPI::fromJsonValue(m_build_worker_pool, json[QString("buildWorkerPool")]);
    m_build_worker_pool_isSet = !json[QString("buildWorkerPool")].isNull() && m_build_worker_pool_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_docker_registry_isValid = ::OpenAPI::fromJsonValue(m_docker_registry, json[QString("dockerRegistry")]);
    m_docker_registry_isSet = !json[QString("dockerRegistry")].isNull() && m_docker_registry_isValid;

    m_docker_repository_isValid = ::OpenAPI::fromJsonValue(m_docker_repository, json[QString("dockerRepository")]);
    m_docker_repository_isSet = !json[QString("dockerRepository")].isNull() && m_docker_repository_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("entryPoint")]);
    m_entry_point_isSet = !json[QString("entryPoint")].isNull() && m_entry_point_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_event_trigger_isValid = ::OpenAPI::fromJsonValue(m_event_trigger, json[QString("eventTrigger")]);
    m_event_trigger_isSet = !json[QString("eventTrigger")].isNull() && m_event_trigger_isValid;

    m_https_trigger_isValid = ::OpenAPI::fromJsonValue(m_https_trigger, json[QString("httpsTrigger")]);
    m_https_trigger_isSet = !json[QString("httpsTrigger")].isNull() && m_https_trigger_isValid;

    m_ingress_settings_isValid = ::OpenAPI::fromJsonValue(m_ingress_settings, json[QString("ingressSettings")]);
    m_ingress_settings_isSet = !json[QString("ingressSettings")].isNull() && m_ingress_settings_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_instances_isValid = ::OpenAPI::fromJsonValue(m_max_instances, json[QString("maxInstances")]);
    m_max_instances_isSet = !json[QString("maxInstances")].isNull() && m_max_instances_isValid;

    m_min_instances_isValid = ::OpenAPI::fromJsonValue(m_min_instances, json[QString("minInstances")]);
    m_min_instances_isSet = !json[QString("minInstances")].isNull() && m_min_instances_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_on_deploy_update_policy_isValid = ::OpenAPI::fromJsonValue(m_on_deploy_update_policy, json[QString("onDeployUpdatePolicy")]);
    m_on_deploy_update_policy_isSet = !json[QString("onDeployUpdatePolicy")].isNull() && m_on_deploy_update_policy_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_secret_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_secret_environment_variables, json[QString("secretEnvironmentVariables")]);
    m_secret_environment_variables_isSet = !json[QString("secretEnvironmentVariables")].isNull() && m_secret_environment_variables_isValid;

    m_secret_volumes_isValid = ::OpenAPI::fromJsonValue(m_secret_volumes, json[QString("secretVolumes")]);
    m_secret_volumes_isSet = !json[QString("secretVolumes")].isNull() && m_secret_volumes_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_source_archive_url_isValid = ::OpenAPI::fromJsonValue(m_source_archive_url, json[QString("sourceArchiveUrl")]);
    m_source_archive_url_isSet = !json[QString("sourceArchiveUrl")].isNull() && m_source_archive_url_isValid;

    m_source_repository_isValid = ::OpenAPI::fromJsonValue(m_source_repository, json[QString("sourceRepository")]);
    m_source_repository_isSet = !json[QString("sourceRepository")].isNull() && m_source_repository_isValid;

    m_source_token_isValid = ::OpenAPI::fromJsonValue(m_source_token, json[QString("sourceToken")]);
    m_source_token_isSet = !json[QString("sourceToken")].isNull() && m_source_token_isValid;

    m_source_upload_url_isValid = ::OpenAPI::fromJsonValue(m_source_upload_url, json[QString("sourceUploadUrl")]);
    m_source_upload_url_isSet = !json[QString("sourceUploadUrl")].isNull() && m_source_upload_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_vpc_connector_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector, json[QString("vpcConnector")]);
    m_vpc_connector_isSet = !json[QString("vpcConnector")].isNull() && m_vpc_connector_isValid;

    m_vpc_connector_egress_settings_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_egress_settings, json[QString("vpcConnectorEgressSettings")]);
    m_vpc_connector_egress_settings_isSet = !json[QString("vpcConnectorEgressSettings")].isNull() && m_vpc_connector_egress_settings_isValid;
}

QString OAICloudFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_update_policy_isSet) {
        obj.insert(QString("automaticUpdatePolicy"), ::OpenAPI::toJsonValue(m_automatic_update_policy));
    }
    if (m_available_memory_mb_isSet) {
        obj.insert(QString("availableMemoryMb"), ::OpenAPI::toJsonValue(m_available_memory_mb));
    }
    if (m_build_environment_variables.size() > 0) {
        obj.insert(QString("buildEnvironmentVariables"), ::OpenAPI::toJsonValue(m_build_environment_variables));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_name_isSet) {
        obj.insert(QString("buildName"), ::OpenAPI::toJsonValue(m_build_name));
    }
    if (m_build_service_account_isSet) {
        obj.insert(QString("buildServiceAccount"), ::OpenAPI::toJsonValue(m_build_service_account));
    }
    if (m_build_worker_pool_isSet) {
        obj.insert(QString("buildWorkerPool"), ::OpenAPI::toJsonValue(m_build_worker_pool));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_docker_registry_isSet) {
        obj.insert(QString("dockerRegistry"), ::OpenAPI::toJsonValue(m_docker_registry));
    }
    if (m_docker_repository_isSet) {
        obj.insert(QString("dockerRepository"), ::OpenAPI::toJsonValue(m_docker_repository));
    }
    if (m_entry_point_isSet) {
        obj.insert(QString("entryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_event_trigger.isSet()) {
        obj.insert(QString("eventTrigger"), ::OpenAPI::toJsonValue(m_event_trigger));
    }
    if (m_https_trigger.isSet()) {
        obj.insert(QString("httpsTrigger"), ::OpenAPI::toJsonValue(m_https_trigger));
    }
    if (m_ingress_settings_isSet) {
        obj.insert(QString("ingressSettings"), ::OpenAPI::toJsonValue(m_ingress_settings));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_instances_isSet) {
        obj.insert(QString("maxInstances"), ::OpenAPI::toJsonValue(m_max_instances));
    }
    if (m_min_instances_isSet) {
        obj.insert(QString("minInstances"), ::OpenAPI::toJsonValue(m_min_instances));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_on_deploy_update_policy.isSet()) {
        obj.insert(QString("onDeployUpdatePolicy"), ::OpenAPI::toJsonValue(m_on_deploy_update_policy));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_secret_environment_variables.size() > 0) {
        obj.insert(QString("secretEnvironmentVariables"), ::OpenAPI::toJsonValue(m_secret_environment_variables));
    }
    if (m_secret_volumes.size() > 0) {
        obj.insert(QString("secretVolumes"), ::OpenAPI::toJsonValue(m_secret_volumes));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_source_archive_url_isSet) {
        obj.insert(QString("sourceArchiveUrl"), ::OpenAPI::toJsonValue(m_source_archive_url));
    }
    if (m_source_repository.isSet()) {
        obj.insert(QString("sourceRepository"), ::OpenAPI::toJsonValue(m_source_repository));
    }
    if (m_source_token_isSet) {
        obj.insert(QString("sourceToken"), ::OpenAPI::toJsonValue(m_source_token));
    }
    if (m_source_upload_url_isSet) {
        obj.insert(QString("sourceUploadUrl"), ::OpenAPI::toJsonValue(m_source_upload_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_vpc_connector_isSet) {
        obj.insert(QString("vpcConnector"), ::OpenAPI::toJsonValue(m_vpc_connector));
    }
    if (m_vpc_connector_egress_settings_isSet) {
        obj.insert(QString("vpcConnectorEgressSettings"), ::OpenAPI::toJsonValue(m_vpc_connector_egress_settings));
    }
    return obj;
}

OAIObject OAICloudFunction::getAutomaticUpdatePolicy() const {
    return m_automatic_update_policy;
}
void OAICloudFunction::setAutomaticUpdatePolicy(const OAIObject &automatic_update_policy) {
    m_automatic_update_policy = automatic_update_policy;
    m_automatic_update_policy_isSet = true;
}

bool OAICloudFunction::is_automatic_update_policy_Set() const{
    return m_automatic_update_policy_isSet;
}

bool OAICloudFunction::is_automatic_update_policy_Valid() const{
    return m_automatic_update_policy_isValid;
}

qint32 OAICloudFunction::getAvailableMemoryMb() const {
    return m_available_memory_mb;
}
void OAICloudFunction::setAvailableMemoryMb(const qint32 &available_memory_mb) {
    m_available_memory_mb = available_memory_mb;
    m_available_memory_mb_isSet = true;
}

bool OAICloudFunction::is_available_memory_mb_Set() const{
    return m_available_memory_mb_isSet;
}

bool OAICloudFunction::is_available_memory_mb_Valid() const{
    return m_available_memory_mb_isValid;
}

QMap<QString, QString> OAICloudFunction::getBuildEnvironmentVariables() const {
    return m_build_environment_variables;
}
void OAICloudFunction::setBuildEnvironmentVariables(const QMap<QString, QString> &build_environment_variables) {
    m_build_environment_variables = build_environment_variables;
    m_build_environment_variables_isSet = true;
}

bool OAICloudFunction::is_build_environment_variables_Set() const{
    return m_build_environment_variables_isSet;
}

bool OAICloudFunction::is_build_environment_variables_Valid() const{
    return m_build_environment_variables_isValid;
}

QString OAICloudFunction::getBuildId() const {
    return m_build_id;
}
void OAICloudFunction::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAICloudFunction::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAICloudFunction::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAICloudFunction::getBuildName() const {
    return m_build_name;
}
void OAICloudFunction::setBuildName(const QString &build_name) {
    m_build_name = build_name;
    m_build_name_isSet = true;
}

bool OAICloudFunction::is_build_name_Set() const{
    return m_build_name_isSet;
}

bool OAICloudFunction::is_build_name_Valid() const{
    return m_build_name_isValid;
}

QString OAICloudFunction::getBuildServiceAccount() const {
    return m_build_service_account;
}
void OAICloudFunction::setBuildServiceAccount(const QString &build_service_account) {
    m_build_service_account = build_service_account;
    m_build_service_account_isSet = true;
}

bool OAICloudFunction::is_build_service_account_Set() const{
    return m_build_service_account_isSet;
}

bool OAICloudFunction::is_build_service_account_Valid() const{
    return m_build_service_account_isValid;
}

QString OAICloudFunction::getBuildWorkerPool() const {
    return m_build_worker_pool;
}
void OAICloudFunction::setBuildWorkerPool(const QString &build_worker_pool) {
    m_build_worker_pool = build_worker_pool;
    m_build_worker_pool_isSet = true;
}

bool OAICloudFunction::is_build_worker_pool_Set() const{
    return m_build_worker_pool_isSet;
}

bool OAICloudFunction::is_build_worker_pool_Valid() const{
    return m_build_worker_pool_isValid;
}

QString OAICloudFunction::getDescription() const {
    return m_description;
}
void OAICloudFunction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICloudFunction::is_description_Set() const{
    return m_description_isSet;
}

bool OAICloudFunction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICloudFunction::getDockerRegistry() const {
    return m_docker_registry;
}
void OAICloudFunction::setDockerRegistry(const QString &docker_registry) {
    m_docker_registry = docker_registry;
    m_docker_registry_isSet = true;
}

bool OAICloudFunction::is_docker_registry_Set() const{
    return m_docker_registry_isSet;
}

bool OAICloudFunction::is_docker_registry_Valid() const{
    return m_docker_registry_isValid;
}

QString OAICloudFunction::getDockerRepository() const {
    return m_docker_repository;
}
void OAICloudFunction::setDockerRepository(const QString &docker_repository) {
    m_docker_repository = docker_repository;
    m_docker_repository_isSet = true;
}

bool OAICloudFunction::is_docker_repository_Set() const{
    return m_docker_repository_isSet;
}

bool OAICloudFunction::is_docker_repository_Valid() const{
    return m_docker_repository_isValid;
}

QString OAICloudFunction::getEntryPoint() const {
    return m_entry_point;
}
void OAICloudFunction::setEntryPoint(const QString &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAICloudFunction::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAICloudFunction::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QMap<QString, QString> OAICloudFunction::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAICloudFunction::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAICloudFunction::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAICloudFunction::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

OAIEventTrigger OAICloudFunction::getEventTrigger() const {
    return m_event_trigger;
}
void OAICloudFunction::setEventTrigger(const OAIEventTrigger &event_trigger) {
    m_event_trigger = event_trigger;
    m_event_trigger_isSet = true;
}

bool OAICloudFunction::is_event_trigger_Set() const{
    return m_event_trigger_isSet;
}

bool OAICloudFunction::is_event_trigger_Valid() const{
    return m_event_trigger_isValid;
}

OAIHttpsTrigger OAICloudFunction::getHttpsTrigger() const {
    return m_https_trigger;
}
void OAICloudFunction::setHttpsTrigger(const OAIHttpsTrigger &https_trigger) {
    m_https_trigger = https_trigger;
    m_https_trigger_isSet = true;
}

bool OAICloudFunction::is_https_trigger_Set() const{
    return m_https_trigger_isSet;
}

bool OAICloudFunction::is_https_trigger_Valid() const{
    return m_https_trigger_isValid;
}

QString OAICloudFunction::getIngressSettings() const {
    return m_ingress_settings;
}
void OAICloudFunction::setIngressSettings(const QString &ingress_settings) {
    m_ingress_settings = ingress_settings;
    m_ingress_settings_isSet = true;
}

bool OAICloudFunction::is_ingress_settings_Set() const{
    return m_ingress_settings_isSet;
}

bool OAICloudFunction::is_ingress_settings_Valid() const{
    return m_ingress_settings_isValid;
}

QString OAICloudFunction::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAICloudFunction::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAICloudFunction::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAICloudFunction::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QString> OAICloudFunction::getLabels() const {
    return m_labels;
}
void OAICloudFunction::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICloudFunction::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICloudFunction::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAICloudFunction::getMaxInstances() const {
    return m_max_instances;
}
void OAICloudFunction::setMaxInstances(const qint32 &max_instances) {
    m_max_instances = max_instances;
    m_max_instances_isSet = true;
}

bool OAICloudFunction::is_max_instances_Set() const{
    return m_max_instances_isSet;
}

bool OAICloudFunction::is_max_instances_Valid() const{
    return m_max_instances_isValid;
}

qint32 OAICloudFunction::getMinInstances() const {
    return m_min_instances;
}
void OAICloudFunction::setMinInstances(const qint32 &min_instances) {
    m_min_instances = min_instances;
    m_min_instances_isSet = true;
}

bool OAICloudFunction::is_min_instances_Set() const{
    return m_min_instances_isSet;
}

bool OAICloudFunction::is_min_instances_Valid() const{
    return m_min_instances_isValid;
}

QString OAICloudFunction::getName() const {
    return m_name;
}
void OAICloudFunction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICloudFunction::is_name_Set() const{
    return m_name_isSet;
}

bool OAICloudFunction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICloudFunction::getNetwork() const {
    return m_network;
}
void OAICloudFunction::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICloudFunction::is_network_Set() const{
    return m_network_isSet;
}

bool OAICloudFunction::is_network_Valid() const{
    return m_network_isValid;
}

OAIOnDeployUpdatePolicy OAICloudFunction::getOnDeployUpdatePolicy() const {
    return m_on_deploy_update_policy;
}
void OAICloudFunction::setOnDeployUpdatePolicy(const OAIOnDeployUpdatePolicy &on_deploy_update_policy) {
    m_on_deploy_update_policy = on_deploy_update_policy;
    m_on_deploy_update_policy_isSet = true;
}

bool OAICloudFunction::is_on_deploy_update_policy_Set() const{
    return m_on_deploy_update_policy_isSet;
}

bool OAICloudFunction::is_on_deploy_update_policy_Valid() const{
    return m_on_deploy_update_policy_isValid;
}

QString OAICloudFunction::getRuntime() const {
    return m_runtime;
}
void OAICloudFunction::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAICloudFunction::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAICloudFunction::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QList<OAISecretEnvVar> OAICloudFunction::getSecretEnvironmentVariables() const {
    return m_secret_environment_variables;
}
void OAICloudFunction::setSecretEnvironmentVariables(const QList<OAISecretEnvVar> &secret_environment_variables) {
    m_secret_environment_variables = secret_environment_variables;
    m_secret_environment_variables_isSet = true;
}

bool OAICloudFunction::is_secret_environment_variables_Set() const{
    return m_secret_environment_variables_isSet;
}

bool OAICloudFunction::is_secret_environment_variables_Valid() const{
    return m_secret_environment_variables_isValid;
}

QList<OAISecretVolume> OAICloudFunction::getSecretVolumes() const {
    return m_secret_volumes;
}
void OAICloudFunction::setSecretVolumes(const QList<OAISecretVolume> &secret_volumes) {
    m_secret_volumes = secret_volumes;
    m_secret_volumes_isSet = true;
}

bool OAICloudFunction::is_secret_volumes_Set() const{
    return m_secret_volumes_isSet;
}

bool OAICloudFunction::is_secret_volumes_Valid() const{
    return m_secret_volumes_isValid;
}

QString OAICloudFunction::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAICloudFunction::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAICloudFunction::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAICloudFunction::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAICloudFunction::getSourceArchiveUrl() const {
    return m_source_archive_url;
}
void OAICloudFunction::setSourceArchiveUrl(const QString &source_archive_url) {
    m_source_archive_url = source_archive_url;
    m_source_archive_url_isSet = true;
}

bool OAICloudFunction::is_source_archive_url_Set() const{
    return m_source_archive_url_isSet;
}

bool OAICloudFunction::is_source_archive_url_Valid() const{
    return m_source_archive_url_isValid;
}

OAISourceRepository OAICloudFunction::getSourceRepository() const {
    return m_source_repository;
}
void OAICloudFunction::setSourceRepository(const OAISourceRepository &source_repository) {
    m_source_repository = source_repository;
    m_source_repository_isSet = true;
}

bool OAICloudFunction::is_source_repository_Set() const{
    return m_source_repository_isSet;
}

bool OAICloudFunction::is_source_repository_Valid() const{
    return m_source_repository_isValid;
}

QString OAICloudFunction::getSourceToken() const {
    return m_source_token;
}
void OAICloudFunction::setSourceToken(const QString &source_token) {
    m_source_token = source_token;
    m_source_token_isSet = true;
}

bool OAICloudFunction::is_source_token_Set() const{
    return m_source_token_isSet;
}

bool OAICloudFunction::is_source_token_Valid() const{
    return m_source_token_isValid;
}

QString OAICloudFunction::getSourceUploadUrl() const {
    return m_source_upload_url;
}
void OAICloudFunction::setSourceUploadUrl(const QString &source_upload_url) {
    m_source_upload_url = source_upload_url;
    m_source_upload_url_isSet = true;
}

bool OAICloudFunction::is_source_upload_url_Set() const{
    return m_source_upload_url_isSet;
}

bool OAICloudFunction::is_source_upload_url_Valid() const{
    return m_source_upload_url_isValid;
}

QString OAICloudFunction::getStatus() const {
    return m_status;
}
void OAICloudFunction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICloudFunction::is_status_Set() const{
    return m_status_isSet;
}

bool OAICloudFunction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICloudFunction::getTimeout() const {
    return m_timeout;
}
void OAICloudFunction::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAICloudFunction::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAICloudFunction::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAICloudFunction::getUpdateTime() const {
    return m_update_time;
}
void OAICloudFunction::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICloudFunction::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICloudFunction::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAICloudFunction::getVersionId() const {
    return m_version_id;
}
void OAICloudFunction::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAICloudFunction::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAICloudFunction::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAICloudFunction::getVpcConnector() const {
    return m_vpc_connector;
}
void OAICloudFunction::setVpcConnector(const QString &vpc_connector) {
    m_vpc_connector = vpc_connector;
    m_vpc_connector_isSet = true;
}

bool OAICloudFunction::is_vpc_connector_Set() const{
    return m_vpc_connector_isSet;
}

bool OAICloudFunction::is_vpc_connector_Valid() const{
    return m_vpc_connector_isValid;
}

QString OAICloudFunction::getVpcConnectorEgressSettings() const {
    return m_vpc_connector_egress_settings;
}
void OAICloudFunction::setVpcConnectorEgressSettings(const QString &vpc_connector_egress_settings) {
    m_vpc_connector_egress_settings = vpc_connector_egress_settings;
    m_vpc_connector_egress_settings_isSet = true;
}

bool OAICloudFunction::is_vpc_connector_egress_settings_Set() const{
    return m_vpc_connector_egress_settings_isSet;
}

bool OAICloudFunction::is_vpc_connector_egress_settings_Valid() const{
    return m_vpc_connector_egress_settings_isValid;
}

bool OAICloudFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_update_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_memory_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_worker_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_deploy_update_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_archive_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_egress_settings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
