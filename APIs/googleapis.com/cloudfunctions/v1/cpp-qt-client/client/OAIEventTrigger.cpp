/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTrigger::OAIEventTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTrigger::OAIEventTrigger() {
    this->initializeModel();
}

OAIEventTrigger::~OAIEventTrigger() {}

void OAIEventTrigger::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_failure_policy_isSet = false;
    m_failure_policy_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIEventTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTrigger::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_failure_policy_isValid = ::OpenAPI::fromJsonValue(m_failure_policy, json[QString("failurePolicy")]);
    m_failure_policy_isSet = !json[QString("failurePolicy")].isNull() && m_failure_policy_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIEventTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_failure_policy.isSet()) {
        obj.insert(QString("failurePolicy"), ::OpenAPI::toJsonValue(m_failure_policy));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QString OAIEventTrigger::getEventType() const {
    return m_event_type;
}
void OAIEventTrigger::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventTrigger::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventTrigger::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIFailurePolicy OAIEventTrigger::getFailurePolicy() const {
    return m_failure_policy;
}
void OAIEventTrigger::setFailurePolicy(const OAIFailurePolicy &failure_policy) {
    m_failure_policy = failure_policy;
    m_failure_policy_isSet = true;
}

bool OAIEventTrigger::is_failure_policy_Set() const{
    return m_failure_policy_isSet;
}

bool OAIEventTrigger::is_failure_policy_Valid() const{
    return m_failure_policy_isValid;
}

QString OAIEventTrigger::getResource() const {
    return m_resource;
}
void OAIEventTrigger::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIEventTrigger::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIEventTrigger::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIEventTrigger::getService() const {
    return m_service;
}
void OAIEventTrigger::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIEventTrigger::is_service_Set() const{
    return m_service_isSet;
}

bool OAIEventTrigger::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIEventTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
