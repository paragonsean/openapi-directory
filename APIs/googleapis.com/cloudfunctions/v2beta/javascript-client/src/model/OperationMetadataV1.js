/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OperationMetadataV1 model module.
 * @module model/OperationMetadataV1
 * @version v2beta
 */
class OperationMetadataV1 {
    /**
     * Constructs a new <code>OperationMetadataV1</code>.
     * Metadata describing an Operation
     * @alias module:model/OperationMetadataV1
     */
    constructor() { 
        
        OperationMetadataV1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationMetadataV1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationMetadataV1} obj Optional instance to populate.
     * @return {module:model/OperationMetadataV1} The populated <code>OperationMetadataV1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationMetadataV1();

            if (data.hasOwnProperty('buildId')) {
                obj['buildId'] = ApiClient.convertToType(data['buildId'], 'String');
            }
            if (data.hasOwnProperty('buildName')) {
                obj['buildName'] = ApiClient.convertToType(data['buildName'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ApiClient.convertToType(data['request'], {'String': Object});
            }
            if (data.hasOwnProperty('sourceToken')) {
                obj['sourceToken'] = ApiClient.convertToType(data['sourceToken'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationMetadataV1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationMetadataV1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildId'] && !(typeof data['buildId'] === 'string' || data['buildId'] instanceof String)) {
            throw new Error("Expected the field `buildId` to be a primitive type in the JSON string but got " + data['buildId']);
        }
        // ensure the json data is a string
        if (data['buildName'] && !(typeof data['buildName'] === 'string' || data['buildName'] instanceof String)) {
            throw new Error("Expected the field `buildName` to be a primitive type in the JSON string but got " + data['buildName']);
        }
        // ensure the json data is a string
        if (data['sourceToken'] && !(typeof data['sourceToken'] === 'string' || data['sourceToken'] instanceof String)) {
            throw new Error("Expected the field `sourceToken` to be a primitive type in the JSON string but got " + data['sourceToken']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}



/**
 * The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.
 * @member {String} buildId
 */
OperationMetadataV1.prototype['buildId'] = undefined;

/**
 * The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. `projects//locations//builds/`.
 * @member {String} buildName
 */
OperationMetadataV1.prototype['buildName'] = undefined;

/**
 * The original request that started the operation.
 * @member {Object.<String, Object>} request
 */
OperationMetadataV1.prototype['request'] = undefined;

/**
 * An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
 * @member {String} sourceToken
 */
OperationMetadataV1.prototype['sourceToken'] = undefined;

/**
 * Target of the operation - for example `projects/project-1/locations/region-1/functions/function-1`
 * @member {String} target
 */
OperationMetadataV1.prototype['target'] = undefined;

/**
 * Type of operation.
 * @member {module:model/OperationMetadataV1.TypeEnum} type
 */
OperationMetadataV1.prototype['type'] = undefined;

/**
 * The last update timestamp of the operation.
 * @member {String} updateTime
 */
OperationMetadataV1.prototype['updateTime'] = undefined;

/**
 * Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.
 * @member {String} versionId
 */
OperationMetadataV1.prototype['versionId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OperationMetadataV1['TypeEnum'] = {

    /**
     * value: "OPERATION_UNSPECIFIED"
     * @const
     */
    "OPERATION_UNSPECIFIED": "OPERATION_UNSPECIFIED",

    /**
     * value: "CREATE_FUNCTION"
     * @const
     */
    "CREATE_FUNCTION": "CREATE_FUNCTION",

    /**
     * value: "UPDATE_FUNCTION"
     * @const
     */
    "UPDATE_FUNCTION": "UPDATE_FUNCTION",

    /**
     * value: "DELETE_FUNCTION"
     * @const
     */
    "DELETE_FUNCTION": "DELETE_FUNCTION"
};



export default OperationMetadataV1;

