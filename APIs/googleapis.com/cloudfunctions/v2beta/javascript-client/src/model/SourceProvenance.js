/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepoSource from './RepoSource';
import StorageSource from './StorageSource';

/**
 * The SourceProvenance model module.
 * @module model/SourceProvenance
 * @version v2beta
 */
class SourceProvenance {
    /**
     * Constructs a new <code>SourceProvenance</code>.
     * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
     * @alias module:model/SourceProvenance
     */
    constructor() { 
        
        SourceProvenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceProvenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceProvenance} obj Optional instance to populate.
     * @return {module:model/SourceProvenance} The populated <code>SourceProvenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceProvenance();

            if (data.hasOwnProperty('gitUri')) {
                obj['gitUri'] = ApiClient.convertToType(data['gitUri'], 'String');
            }
            if (data.hasOwnProperty('resolvedRepoSource')) {
                obj['resolvedRepoSource'] = RepoSource.constructFromObject(data['resolvedRepoSource']);
            }
            if (data.hasOwnProperty('resolvedStorageSource')) {
                obj['resolvedStorageSource'] = StorageSource.constructFromObject(data['resolvedStorageSource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceProvenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceProvenance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gitUri'] && !(typeof data['gitUri'] === 'string' || data['gitUri'] instanceof String)) {
            throw new Error("Expected the field `gitUri` to be a primitive type in the JSON string but got " + data['gitUri']);
        }
        // validate the optional field `resolvedRepoSource`
        if (data['resolvedRepoSource']) { // data not null
          RepoSource.validateJSON(data['resolvedRepoSource']);
        }
        // validate the optional field `resolvedStorageSource`
        if (data['resolvedStorageSource']) { // data not null
          StorageSource.validateJSON(data['resolvedStorageSource']);
        }

        return true;
    }


}



/**
 * A copy of the build's `source.git_uri`, if exists, with any commits resolved.
 * @member {String} gitUri
 */
SourceProvenance.prototype['gitUri'] = undefined;

/**
 * @member {module:model/RepoSource} resolvedRepoSource
 */
SourceProvenance.prototype['resolvedRepoSource'] = undefined;

/**
 * @member {module:model/StorageSource} resolvedStorageSource
 */
SourceProvenance.prototype['resolvedStorageSource'] = undefined;






export default SourceProvenance;

