/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudFunctionsApi);
  }
}(this, function(expect, CloudFunctionsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudFunctionsApi.ServiceConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceConfig', function() {
    it('should create an instance of ServiceConfig', function() {
      // uncomment below and update the code to test ServiceConfig
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be.a(CloudFunctionsApi.ServiceConfig);
    });

    it('should have the property allTrafficOnLatestRevision (base name: "allTrafficOnLatestRevision")', function() {
      // uncomment below and update the code to test the property allTrafficOnLatestRevision
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property availableCpu (base name: "availableCpu")', function() {
      // uncomment below and update the code to test the property availableCpu
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property availableMemory (base name: "availableMemory")', function() {
      // uncomment below and update the code to test the property availableMemory
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariables (base name: "environmentVariables")', function() {
      // uncomment below and update the code to test the property environmentVariables
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property ingressSettings (base name: "ingressSettings")', function() {
      // uncomment below and update the code to test the property ingressSettings
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxInstanceCount (base name: "maxInstanceCount")', function() {
      // uncomment below and update the code to test the property maxInstanceCount
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property maxInstanceRequestConcurrency (base name: "maxInstanceRequestConcurrency")', function() {
      // uncomment below and update the code to test the property maxInstanceRequestConcurrency
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property minInstanceCount (base name: "minInstanceCount")', function() {
      // uncomment below and update the code to test the property minInstanceCount
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property secretEnvironmentVariables (base name: "secretEnvironmentVariables")', function() {
      // uncomment below and update the code to test the property secretEnvironmentVariables
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property secretVolumes (base name: "secretVolumes")', function() {
      // uncomment below and update the code to test the property secretVolumes
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property securityLevel (base name: "securityLevel")', function() {
      // uncomment below and update the code to test the property securityLevel
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property service (base name: "service")', function() {
      // uncomment below and update the code to test the property service
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccountEmail (base name: "serviceAccountEmail")', function() {
      // uncomment below and update the code to test the property serviceAccountEmail
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property timeoutSeconds (base name: "timeoutSeconds")', function() {
      // uncomment below and update the code to test the property timeoutSeconds
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property vpcConnector (base name: "vpcConnector")', function() {
      // uncomment below and update the code to test the property vpcConnector
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

    it('should have the property vpcConnectorEgressSettings (base name: "vpcConnectorEgressSettings")', function() {
      // uncomment below and update the code to test the property vpcConnectorEgressSettings
      //var instance = new CloudFunctionsApi.ServiceConfig();
      //expect(instance).to.be();
    });

  });

}));
