/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepoSource;
import org.openapitools.client.model.StorageSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The location of the function source code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:48.874095-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Source {
  public static final String SERIALIZED_NAME_GIT_URI = "gitUri";
  @SerializedName(SERIALIZED_NAME_GIT_URI)
  private String gitUri;

  public static final String SERIALIZED_NAME_REPO_SOURCE = "repoSource";
  @SerializedName(SERIALIZED_NAME_REPO_SOURCE)
  private RepoSource repoSource;

  public static final String SERIALIZED_NAME_STORAGE_SOURCE = "storageSource";
  @SerializedName(SERIALIZED_NAME_STORAGE_SOURCE)
  private StorageSource storageSource;

  public Source() {
  }

  public Source gitUri(String gitUri) {
    this.gitUri = gitUri;
    return this;
  }

  /**
   * If provided, get the source from GitHub repository. This option is valid only for GCF 1st Gen function. Example: https://github.com///blob//
   * @return gitUri
   */
  @javax.annotation.Nullable
  public String getGitUri() {
    return gitUri;
  }

  public void setGitUri(String gitUri) {
    this.gitUri = gitUri;
  }


  public Source repoSource(RepoSource repoSource) {
    this.repoSource = repoSource;
    return this;
  }

  /**
   * Get repoSource
   * @return repoSource
   */
  @javax.annotation.Nullable
  public RepoSource getRepoSource() {
    return repoSource;
  }

  public void setRepoSource(RepoSource repoSource) {
    this.repoSource = repoSource;
  }


  public Source storageSource(StorageSource storageSource) {
    this.storageSource = storageSource;
    return this;
  }

  /**
   * Get storageSource
   * @return storageSource
   */
  @javax.annotation.Nullable
  public StorageSource getStorageSource() {
    return storageSource;
  }

  public void setStorageSource(StorageSource storageSource) {
    this.storageSource = storageSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.gitUri, source.gitUri) &&
        Objects.equals(this.repoSource, source.repoSource) &&
        Objects.equals(this.storageSource, source.storageSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gitUri, repoSource, storageSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    gitUri: ").append(toIndentedString(gitUri)).append("\n");
    sb.append("    repoSource: ").append(toIndentedString(repoSource)).append("\n");
    sb.append("    storageSource: ").append(toIndentedString(storageSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gitUri");
    openapiFields.add("repoSource");
    openapiFields.add("storageSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Source
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Source.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Source is not found in the empty JSON string", Source.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Source.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Source` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gitUri") != null && !jsonObj.get("gitUri").isJsonNull()) && !jsonObj.get("gitUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitUri").toString()));
      }
      // validate the optional field `repoSource`
      if (jsonObj.get("repoSource") != null && !jsonObj.get("repoSource").isJsonNull()) {
        RepoSource.validateJsonElement(jsonObj.get("repoSource"));
      }
      // validate the optional field `storageSource`
      if (jsonObj.get("storageSource") != null && !jsonObj.get("storageSource").isJsonNull()) {
        StorageSource.validateJsonElement(jsonObj.get("storageSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Source.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Source' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Source> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Source.class));

       return (TypeAdapter<T>) new TypeAdapter<Source>() {
           @Override
           public void write(JsonWriter out, Source value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Source read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Source given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Source
   * @throws IOException if the JSON string is invalid with respect to Source
   */
  public static Source fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Source.class);
  }

  /**
   * Convert an instance of Source to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

