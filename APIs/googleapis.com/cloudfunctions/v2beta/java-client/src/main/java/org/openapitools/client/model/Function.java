/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BuildConfig;
import org.openapitools.client.model.EventTrigger;
import org.openapitools.client.model.GoogleCloudFunctionsV2betaStateMessage;
import org.openapitools.client.model.ServiceConfig;
import org.openapitools.client.model.UpgradeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:48.874095-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Function {
  public static final String SERIALIZED_NAME_BUILD_CONFIG = "buildConfig";
  @SerializedName(SERIALIZED_NAME_BUILD_CONFIG)
  private BuildConfig buildConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Describe whether the function is 1st Gen or 2nd Gen.
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
  public enum EnvironmentEnum {
    ENVIRONMENT_UNSPECIFIED("ENVIRONMENT_UNSPECIFIED"),
    
    GEN_1("GEN_1"),
    
    GEN_2("GEN_2");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String value) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnvironmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private EnvironmentEnum environment;

  public static final String SERIALIZED_NAME_EVENT_TRIGGER = "eventTrigger";
  @SerializedName(SERIALIZED_NAME_EVENT_TRIGGER)
  private EventTrigger eventTrigger;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SERVICE_CONFIG = "serviceConfig";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG)
  private ServiceConfig serviceConfig;

  /**
   * Output only. State of the function.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    FAILED("FAILED"),
    
    DEPLOYING("DEPLOYING"),
    
    DELETING("DELETING"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_MESSAGES = "stateMessages";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGES)
  private List<GoogleCloudFunctionsV2betaStateMessage> stateMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UPGRADE_INFO = "upgradeInfo";
  @SerializedName(SERIALIZED_NAME_UPGRADE_INFO)
  private UpgradeInfo upgradeInfo;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Function() {
  }

  public Function(
     String createTime, 
     Boolean satisfiesPzs, 
     StateEnum state, 
     List<GoogleCloudFunctionsV2betaStateMessage> stateMessages, 
     String updateTime, 
     String url
  ) {
    this();
    this.createTime = createTime;
    this.satisfiesPzs = satisfiesPzs;
    this.state = state;
    this.stateMessages = stateMessages;
    this.updateTime = updateTime;
    this.url = url;
  }

  public Function buildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
    return this;
  }

  /**
   * Get buildConfig
   * @return buildConfig
   */
  @javax.annotation.Nullable
  public BuildConfig getBuildConfig() {
    return buildConfig;
  }

  public void setBuildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
  }


  /**
   * Output only. The create timestamp of a Cloud Function. This is only applicable to 2nd Gen functions.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Function description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User-provided description of a function.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Function environment(EnvironmentEnum environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Describe whether the function is 1st Gen or 2nd Gen.
   * @return environment
   */
  @javax.annotation.Nullable
  public EnvironmentEnum getEnvironment() {
    return environment;
  }

  public void setEnvironment(EnvironmentEnum environment) {
    this.environment = environment;
  }


  public Function eventTrigger(EventTrigger eventTrigger) {
    this.eventTrigger = eventTrigger;
    return this;
  }

  /**
   * Get eventTrigger
   * @return eventTrigger
   */
  @javax.annotation.Nullable
  public EventTrigger getEventTrigger() {
    return eventTrigger;
  }

  public void setEventTrigger(EventTrigger eventTrigger) {
    this.eventTrigger = eventTrigger;
  }


  public Function kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * [Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern &#x60;projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}&#x60;.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public Function labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Function putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels associated with this Cloud Function.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Function name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-defined name of the function. Function names must be unique globally and match pattern &#x60;projects/_*_/locations/_*_/functions/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  public Function serviceConfig(ServiceConfig serviceConfig) {
    this.serviceConfig = serviceConfig;
    return this;
  }

  /**
   * Get serviceConfig
   * @return serviceConfig
   */
  @javax.annotation.Nullable
  public ServiceConfig getServiceConfig() {
    return serviceConfig;
  }

  public void setServiceConfig(ServiceConfig serviceConfig) {
    this.serviceConfig = serviceConfig;
  }


  /**
   * Output only. State of the function.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. State Messages for this Cloud Function.
   * @return stateMessages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudFunctionsV2betaStateMessage> getStateMessages() {
    return stateMessages;
  }



  /**
   * Output only. The last update timestamp of a Cloud Function.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Function upgradeInfo(UpgradeInfo upgradeInfo) {
    this.upgradeInfo = upgradeInfo;
    return this;
  }

  /**
   * Get upgradeInfo
   * @return upgradeInfo
   */
  @javax.annotation.Nullable
  public UpgradeInfo getUpgradeInfo() {
    return upgradeInfo;
  }

  public void setUpgradeInfo(UpgradeInfo upgradeInfo) {
    this.upgradeInfo = upgradeInfo;
  }


  /**
   * Output only. The deployed url for the function.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Function function = (Function) o;
    return Objects.equals(this.buildConfig, function.buildConfig) &&
        Objects.equals(this.createTime, function.createTime) &&
        Objects.equals(this.description, function.description) &&
        Objects.equals(this.environment, function.environment) &&
        Objects.equals(this.eventTrigger, function.eventTrigger) &&
        Objects.equals(this.kmsKeyName, function.kmsKeyName) &&
        Objects.equals(this.labels, function.labels) &&
        Objects.equals(this.name, function.name) &&
        Objects.equals(this.satisfiesPzs, function.satisfiesPzs) &&
        Objects.equals(this.serviceConfig, function.serviceConfig) &&
        Objects.equals(this.state, function.state) &&
        Objects.equals(this.stateMessages, function.stateMessages) &&
        Objects.equals(this.updateTime, function.updateTime) &&
        Objects.equals(this.upgradeInfo, function.upgradeInfo) &&
        Objects.equals(this.url, function.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildConfig, createTime, description, environment, eventTrigger, kmsKeyName, labels, name, satisfiesPzs, serviceConfig, state, stateMessages, updateTime, upgradeInfo, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Function {\n");
    sb.append("    buildConfig: ").append(toIndentedString(buildConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    eventTrigger: ").append(toIndentedString(eventTrigger)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    serviceConfig: ").append(toIndentedString(serviceConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMessages: ").append(toIndentedString(stateMessages)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    upgradeInfo: ").append(toIndentedString(upgradeInfo)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildConfig");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("environment");
    openapiFields.add("eventTrigger");
    openapiFields.add("kmsKeyName");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("serviceConfig");
    openapiFields.add("state");
    openapiFields.add("stateMessages");
    openapiFields.add("updateTime");
    openapiFields.add("upgradeInfo");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Function
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Function.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Function is not found in the empty JSON string", Function.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Function.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Function` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buildConfig`
      if (jsonObj.get("buildConfig") != null && !jsonObj.get("buildConfig").isJsonNull()) {
        BuildConfig.validateJsonElement(jsonObj.get("buildConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        EnvironmentEnum.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `eventTrigger`
      if (jsonObj.get("eventTrigger") != null && !jsonObj.get("eventTrigger").isJsonNull()) {
        EventTrigger.validateJsonElement(jsonObj.get("eventTrigger"));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `serviceConfig`
      if (jsonObj.get("serviceConfig") != null && !jsonObj.get("serviceConfig").isJsonNull()) {
        ServiceConfig.validateJsonElement(jsonObj.get("serviceConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("stateMessages") != null && !jsonObj.get("stateMessages").isJsonNull()) {
        JsonArray jsonArraystateMessages = jsonObj.getAsJsonArray("stateMessages");
        if (jsonArraystateMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateMessages` to be an array in the JSON string but got `%s`", jsonObj.get("stateMessages").toString()));
          }

          // validate the optional field `stateMessages` (array)
          for (int i = 0; i < jsonArraystateMessages.size(); i++) {
            GoogleCloudFunctionsV2betaStateMessage.validateJsonElement(jsonArraystateMessages.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `upgradeInfo`
      if (jsonObj.get("upgradeInfo") != null && !jsonObj.get("upgradeInfo").isJsonNull()) {
        UpgradeInfo.validateJsonElement(jsonObj.get("upgradeInfo"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Function.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Function' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Function> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Function.class));

       return (TypeAdapter<T>) new TypeAdapter<Function>() {
           @Override
           public void write(JsonWriter out, Function value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Function read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Function given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Function
   * @throws IOException if the JSON string is invalid with respect to Function
   */
  public static Function fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Function.class);
  }

  /**
   * Convert an instance of Function to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

