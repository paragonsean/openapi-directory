/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepoSource;
import org.openapitools.client.model.StorageSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:48.874095-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceProvenance {
  public static final String SERIALIZED_NAME_GIT_URI = "gitUri";
  @SerializedName(SERIALIZED_NAME_GIT_URI)
  private String gitUri;

  public static final String SERIALIZED_NAME_RESOLVED_REPO_SOURCE = "resolvedRepoSource";
  @SerializedName(SERIALIZED_NAME_RESOLVED_REPO_SOURCE)
  private RepoSource resolvedRepoSource;

  public static final String SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE = "resolvedStorageSource";
  @SerializedName(SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE)
  private StorageSource resolvedStorageSource;

  public SourceProvenance() {
  }

  public SourceProvenance gitUri(String gitUri) {
    this.gitUri = gitUri;
    return this;
  }

  /**
   * A copy of the build&#39;s &#x60;source.git_uri&#x60;, if exists, with any commits resolved.
   * @return gitUri
   */
  @javax.annotation.Nullable
  public String getGitUri() {
    return gitUri;
  }

  public void setGitUri(String gitUri) {
    this.gitUri = gitUri;
  }


  public SourceProvenance resolvedRepoSource(RepoSource resolvedRepoSource) {
    this.resolvedRepoSource = resolvedRepoSource;
    return this;
  }

  /**
   * Get resolvedRepoSource
   * @return resolvedRepoSource
   */
  @javax.annotation.Nullable
  public RepoSource getResolvedRepoSource() {
    return resolvedRepoSource;
  }

  public void setResolvedRepoSource(RepoSource resolvedRepoSource) {
    this.resolvedRepoSource = resolvedRepoSource;
  }


  public SourceProvenance resolvedStorageSource(StorageSource resolvedStorageSource) {
    this.resolvedStorageSource = resolvedStorageSource;
    return this;
  }

  /**
   * Get resolvedStorageSource
   * @return resolvedStorageSource
   */
  @javax.annotation.Nullable
  public StorageSource getResolvedStorageSource() {
    return resolvedStorageSource;
  }

  public void setResolvedStorageSource(StorageSource resolvedStorageSource) {
    this.resolvedStorageSource = resolvedStorageSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceProvenance sourceProvenance = (SourceProvenance) o;
    return Objects.equals(this.gitUri, sourceProvenance.gitUri) &&
        Objects.equals(this.resolvedRepoSource, sourceProvenance.resolvedRepoSource) &&
        Objects.equals(this.resolvedStorageSource, sourceProvenance.resolvedStorageSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gitUri, resolvedRepoSource, resolvedStorageSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceProvenance {\n");
    sb.append("    gitUri: ").append(toIndentedString(gitUri)).append("\n");
    sb.append("    resolvedRepoSource: ").append(toIndentedString(resolvedRepoSource)).append("\n");
    sb.append("    resolvedStorageSource: ").append(toIndentedString(resolvedStorageSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gitUri");
    openapiFields.add("resolvedRepoSource");
    openapiFields.add("resolvedStorageSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceProvenance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceProvenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceProvenance is not found in the empty JSON string", SourceProvenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceProvenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceProvenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gitUri") != null && !jsonObj.get("gitUri").isJsonNull()) && !jsonObj.get("gitUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitUri").toString()));
      }
      // validate the optional field `resolvedRepoSource`
      if (jsonObj.get("resolvedRepoSource") != null && !jsonObj.get("resolvedRepoSource").isJsonNull()) {
        RepoSource.validateJsonElement(jsonObj.get("resolvedRepoSource"));
      }
      // validate the optional field `resolvedStorageSource`
      if (jsonObj.get("resolvedStorageSource") != null && !jsonObj.get("resolvedStorageSource").isJsonNull()) {
        StorageSource.validateJsonElement(jsonObj.get("resolvedStorageSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceProvenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceProvenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceProvenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceProvenance.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceProvenance>() {
           @Override
           public void write(JsonWriter out, SourceProvenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceProvenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceProvenance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceProvenance
   * @throws IOException if the JSON string is invalid with respect to SourceProvenance
   */
  public static SourceProvenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceProvenance.class);
  }

  /**
   * Convert an instance of SourceProvenance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

