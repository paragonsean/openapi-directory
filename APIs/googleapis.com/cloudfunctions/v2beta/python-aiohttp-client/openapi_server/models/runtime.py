# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Runtime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decommission_date: ModelDate=None, deprecation_date: ModelDate=None, display_name: str=None, environment: str=None, name: str=None, stage: str=None, warnings: List[str]=None):
        """Runtime - a model defined in OpenAPI

        :param decommission_date: The decommission_date of this Runtime.
        :param deprecation_date: The deprecation_date of this Runtime.
        :param display_name: The display_name of this Runtime.
        :param environment: The environment of this Runtime.
        :param name: The name of this Runtime.
        :param stage: The stage of this Runtime.
        :param warnings: The warnings of this Runtime.
        """
        self.openapi_types = {
            'decommission_date': ModelDate,
            'deprecation_date': ModelDate,
            'display_name': str,
            'environment': str,
            'name': str,
            'stage': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'decommission_date': 'decommissionDate',
            'deprecation_date': 'deprecationDate',
            'display_name': 'displayName',
            'environment': 'environment',
            'name': 'name',
            'stage': 'stage',
            'warnings': 'warnings'
        }

        self._decommission_date = decommission_date
        self._deprecation_date = deprecation_date
        self._display_name = display_name
        self._environment = environment
        self._name = name
        self._stage = stage
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Runtime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Runtime of this Runtime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decommission_date(self):
        """Gets the decommission_date of this Runtime.


        :return: The decommission_date of this Runtime.
        :rtype: ModelDate
        """
        return self._decommission_date

    @decommission_date.setter
    def decommission_date(self, decommission_date):
        """Sets the decommission_date of this Runtime.


        :param decommission_date: The decommission_date of this Runtime.
        :type decommission_date: ModelDate
        """

        self._decommission_date = decommission_date

    @property
    def deprecation_date(self):
        """Gets the deprecation_date of this Runtime.


        :return: The deprecation_date of this Runtime.
        :rtype: ModelDate
        """
        return self._deprecation_date

    @deprecation_date.setter
    def deprecation_date(self, deprecation_date):
        """Sets the deprecation_date of this Runtime.


        :param deprecation_date: The deprecation_date of this Runtime.
        :type deprecation_date: ModelDate
        """

        self._deprecation_date = deprecation_date

    @property
    def display_name(self):
        """Gets the display_name of this Runtime.

        The user facing name, eg 'Go 1.13', 'Node.js 12', etc.

        :return: The display_name of this Runtime.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Runtime.

        The user facing name, eg 'Go 1.13', 'Node.js 12', etc.

        :param display_name: The display_name of this Runtime.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment(self):
        """Gets the environment of this Runtime.

        The environment for the runtime.

        :return: The environment of this Runtime.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Runtime.

        The environment for the runtime.

        :param environment: The environment of this Runtime.
        :type environment: str
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "GEN_1", "GEN_2"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def name(self):
        """Gets the name of this Runtime.

        The name of the runtime, e.g., 'go113', 'nodejs12', etc.

        :return: The name of this Runtime.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Runtime.

        The name of the runtime, e.g., 'go113', 'nodejs12', etc.

        :param name: The name of this Runtime.
        :type name: str
        """

        self._name = name

    @property
    def stage(self):
        """Gets the stage of this Runtime.

        The stage of life this runtime is in, e.g., BETA, GA, etc.

        :return: The stage of this Runtime.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Runtime.

        The stage of life this runtime is in, e.g., BETA, GA, etc.

        :param stage: The stage of this Runtime.
        :type stage: str
        """
        allowed_values = ["RUNTIME_STAGE_UNSPECIFIED", "DEVELOPMENT", "ALPHA", "BETA", "GA", "DEPRECATED", "DECOMMISSIONED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def warnings(self):
        """Gets the warnings of this Runtime.

        Warning messages, e.g., a deprecation warning.

        :return: The warnings of this Runtime.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Runtime.

        Warning messages, e.g., a deprecation warning.

        :param warnings: The warnings of this Runtime.
        :type warnings: List[str]
        """

        self._warnings = warnings
