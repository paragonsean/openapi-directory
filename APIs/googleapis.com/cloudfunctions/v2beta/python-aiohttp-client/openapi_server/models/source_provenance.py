# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repo_source import RepoSource
from openapi_server.models.storage_source import StorageSource
from openapi_server import util


class SourceProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, git_uri: str=None, resolved_repo_source: RepoSource=None, resolved_storage_source: StorageSource=None):
        """SourceProvenance - a model defined in OpenAPI

        :param git_uri: The git_uri of this SourceProvenance.
        :param resolved_repo_source: The resolved_repo_source of this SourceProvenance.
        :param resolved_storage_source: The resolved_storage_source of this SourceProvenance.
        """
        self.openapi_types = {
            'git_uri': str,
            'resolved_repo_source': RepoSource,
            'resolved_storage_source': StorageSource
        }

        self.attribute_map = {
            'git_uri': 'gitUri',
            'resolved_repo_source': 'resolvedRepoSource',
            'resolved_storage_source': 'resolvedStorageSource'
        }

        self._git_uri = git_uri
        self._resolved_repo_source = resolved_repo_source
        self._resolved_storage_source = resolved_storage_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceProvenance of this SourceProvenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def git_uri(self):
        """Gets the git_uri of this SourceProvenance.

        A copy of the build's `source.git_uri`, if exists, with any commits resolved.

        :return: The git_uri of this SourceProvenance.
        :rtype: str
        """
        return self._git_uri

    @git_uri.setter
    def git_uri(self, git_uri):
        """Sets the git_uri of this SourceProvenance.

        A copy of the build's `source.git_uri`, if exists, with any commits resolved.

        :param git_uri: The git_uri of this SourceProvenance.
        :type git_uri: str
        """

        self._git_uri = git_uri

    @property
    def resolved_repo_source(self):
        """Gets the resolved_repo_source of this SourceProvenance.


        :return: The resolved_repo_source of this SourceProvenance.
        :rtype: RepoSource
        """
        return self._resolved_repo_source

    @resolved_repo_source.setter
    def resolved_repo_source(self, resolved_repo_source):
        """Sets the resolved_repo_source of this SourceProvenance.


        :param resolved_repo_source: The resolved_repo_source of this SourceProvenance.
        :type resolved_repo_source: RepoSource
        """

        self._resolved_repo_source = resolved_repo_source

    @property
    def resolved_storage_source(self):
        """Gets the resolved_storage_source of this SourceProvenance.


        :return: The resolved_storage_source of this SourceProvenance.
        :rtype: StorageSource
        """
        return self._resolved_storage_source

    @resolved_storage_source.setter
    def resolved_storage_source(self, resolved_storage_source):
        """Sets the resolved_storage_source of this SourceProvenance.


        :param resolved_storage_source: The resolved_storage_source of this SourceProvenance.
        :type resolved_storage_source: StorageSource
        """

        self._resolved_storage_source = resolved_storage_source
