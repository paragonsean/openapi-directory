# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateUploadUrlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: str=None, kms_key_name: str=None):
        """GenerateUploadUrlRequest - a model defined in OpenAPI

        :param environment: The environment of this GenerateUploadUrlRequest.
        :param kms_key_name: The kms_key_name of this GenerateUploadUrlRequest.
        """
        self.openapi_types = {
            'environment': str,
            'kms_key_name': str
        }

        self.attribute_map = {
            'environment': 'environment',
            'kms_key_name': 'kmsKeyName'
        }

        self._environment = environment
        self._kms_key_name = kms_key_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateUploadUrlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateUploadUrlRequest of this GenerateUploadUrlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this GenerateUploadUrlRequest.

        The function environment the generated upload url will be used for. The upload url for 2nd Gen functions can also be used for 1st gen functions, but not vice versa. If not specified, 2nd generation-style upload URLs are generated.

        :return: The environment of this GenerateUploadUrlRequest.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this GenerateUploadUrlRequest.

        The function environment the generated upload url will be used for. The upload url for 2nd Gen functions can also be used for 1st gen functions, but not vice versa. If not specified, 2nd generation-style upload URLs are generated.

        :param environment: The environment of this GenerateUploadUrlRequest.
        :type environment: str
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "GEN_1", "GEN_2"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this GenerateUploadUrlRequest.

        [Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in intermediate Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to an intermediate Cloud Storage bucket. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred).

        :return: The kms_key_name of this GenerateUploadUrlRequest.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this GenerateUploadUrlRequest.

        [Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in intermediate Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to an intermediate Cloud Storage bucket. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred).

        :param kms_key_name: The kms_key_name of this GenerateUploadUrlRequest.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name
