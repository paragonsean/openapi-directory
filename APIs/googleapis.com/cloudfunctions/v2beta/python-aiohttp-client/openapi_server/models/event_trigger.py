# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_filter import EventFilter
from openapi_server import util


class EventTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, event_filters: List[EventFilter]=None, event_type: str=None, pubsub_topic: str=None, retry_policy: str=None, service: str=None, service_account_email: str=None, trigger: str=None, trigger_region: str=None):
        """EventTrigger - a model defined in OpenAPI

        :param channel: The channel of this EventTrigger.
        :param event_filters: The event_filters of this EventTrigger.
        :param event_type: The event_type of this EventTrigger.
        :param pubsub_topic: The pubsub_topic of this EventTrigger.
        :param retry_policy: The retry_policy of this EventTrigger.
        :param service: The service of this EventTrigger.
        :param service_account_email: The service_account_email of this EventTrigger.
        :param trigger: The trigger of this EventTrigger.
        :param trigger_region: The trigger_region of this EventTrigger.
        """
        self.openapi_types = {
            'channel': str,
            'event_filters': List[EventFilter],
            'event_type': str,
            'pubsub_topic': str,
            'retry_policy': str,
            'service': str,
            'service_account_email': str,
            'trigger': str,
            'trigger_region': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'event_filters': 'eventFilters',
            'event_type': 'eventType',
            'pubsub_topic': 'pubsubTopic',
            'retry_policy': 'retryPolicy',
            'service': 'service',
            'service_account_email': 'serviceAccountEmail',
            'trigger': 'trigger',
            'trigger_region': 'triggerRegion'
        }

        self._channel = channel
        self._event_filters = event_filters
        self._event_type = event_type
        self._pubsub_topic = pubsub_topic
        self._retry_policy = retry_policy
        self._service = service
        self._service_account_email = service_account_email
        self._trigger = trigger
        self._trigger_region = trigger_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTrigger of this EventTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this EventTrigger.

        Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.

        :return: The channel of this EventTrigger.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this EventTrigger.

        Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.

        :param channel: The channel of this EventTrigger.
        :type channel: str
        """

        self._channel = channel

    @property
    def event_filters(self):
        """Gets the event_filters of this EventTrigger.

        Criteria used to filter events.

        :return: The event_filters of this EventTrigger.
        :rtype: List[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """Sets the event_filters of this EventTrigger.

        Criteria used to filter events.

        :param event_filters: The event_filters of this EventTrigger.
        :type event_filters: List[EventFilter]
        """

        self._event_filters = event_filters

    @property
    def event_type(self):
        """Gets the event_type of this EventTrigger.

        Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.

        :return: The event_type of this EventTrigger.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventTrigger.

        Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.

        :param event_type: The event_type of this EventTrigger.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def pubsub_topic(self):
        """Gets the pubsub_topic of this EventTrigger.

        Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.

        :return: The pubsub_topic of this EventTrigger.
        :rtype: str
        """
        return self._pubsub_topic

    @pubsub_topic.setter
    def pubsub_topic(self, pubsub_topic):
        """Sets the pubsub_topic of this EventTrigger.

        Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.

        :param pubsub_topic: The pubsub_topic of this EventTrigger.
        :type pubsub_topic: str
        """

        self._pubsub_topic = pubsub_topic

    @property
    def retry_policy(self):
        """Gets the retry_policy of this EventTrigger.

        Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).

        :return: The retry_policy of this EventTrigger.
        :rtype: str
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this EventTrigger.

        Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).

        :param retry_policy: The retry_policy of this EventTrigger.
        :type retry_policy: str
        """
        allowed_values = ["RETRY_POLICY_UNSPECIFIED", "RETRY_POLICY_DO_NOT_RETRY", "RETRY_POLICY_RETRY"]  # noqa: E501
        if retry_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `retry_policy` ({0}), must be one of {1}"
                .format(retry_policy, allowed_values)
            )

        self._retry_policy = retry_policy

    @property
    def service(self):
        """Gets the service of this EventTrigger.

        Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace. The field is only applicable to 1st Gen functions.

        :return: The service of this EventTrigger.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EventTrigger.

        Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace. The field is only applicable to 1st Gen functions.

        :param service: The service of this EventTrigger.
        :type service: str
        """

        self._service = service

    @property
    def service_account_email(self):
        """Gets the service_account_email of this EventTrigger.

        Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.

        :return: The service_account_email of this EventTrigger.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this EventTrigger.

        Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.

        :param service_account_email: The service_account_email of this EventTrigger.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def trigger(self):
        """Gets the trigger of this EventTrigger.

        Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.

        :return: The trigger of this EventTrigger.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this EventTrigger.

        Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.

        :param trigger: The trigger of this EventTrigger.
        :type trigger: str
        """

        self._trigger = trigger

    @property
    def trigger_region(self):
        """Gets the trigger_region of this EventTrigger.

        The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.

        :return: The trigger_region of this EventTrigger.
        :rtype: str
        """
        return self._trigger_region

    @trigger_region.setter
    def trigger_region(self, trigger_region):
        """Sets the trigger_region of this EventTrigger.

        The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.

        :param trigger_region: The trigger_region of this EventTrigger.
        :type trigger_region: str
        """

        self._trigger_region = trigger_region
