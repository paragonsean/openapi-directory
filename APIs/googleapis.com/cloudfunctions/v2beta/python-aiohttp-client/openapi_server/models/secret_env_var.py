# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecretEnvVar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, project_id: str=None, secret: str=None, version: str=None):
        """SecretEnvVar - a model defined in OpenAPI

        :param key: The key of this SecretEnvVar.
        :param project_id: The project_id of this SecretEnvVar.
        :param secret: The secret of this SecretEnvVar.
        :param version: The version of this SecretEnvVar.
        """
        self.openapi_types = {
            'key': str,
            'project_id': str,
            'secret': str,
            'version': str
        }

        self.attribute_map = {
            'key': 'key',
            'project_id': 'projectId',
            'secret': 'secret',
            'version': 'version'
        }

        self._key = key
        self._project_id = project_id
        self._secret = secret
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretEnvVar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretEnvVar of this SecretEnvVar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this SecretEnvVar.

        Name of the environment variable.

        :return: The key of this SecretEnvVar.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SecretEnvVar.

        Name of the environment variable.

        :param key: The key of this SecretEnvVar.
        :type key: str
        """

        self._key = key

    @property
    def project_id(self):
        """Gets the project_id of this SecretEnvVar.

        Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.

        :return: The project_id of this SecretEnvVar.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SecretEnvVar.

        Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.

        :param project_id: The project_id of this SecretEnvVar.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def secret(self):
        """Gets the secret of this SecretEnvVar.

        Name of the secret in secret manager (not the full resource name).

        :return: The secret of this SecretEnvVar.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this SecretEnvVar.

        Name of the secret in secret manager (not the full resource name).

        :param secret: The secret of this SecretEnvVar.
        :type secret: str
        """

        self._secret = secret

    @property
    def version(self):
        """Gets the version of this SecretEnvVar.

        Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.

        :return: The version of this SecretEnvVar.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SecretEnvVar.

        Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.

        :param version: The version of this SecretEnvVar.
        :type version: str
        """

        self._version = version
