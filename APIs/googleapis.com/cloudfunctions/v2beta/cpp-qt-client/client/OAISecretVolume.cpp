/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretVolume::OAISecretVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretVolume::OAISecretVolume() {
    this->initializeModel();
}

OAISecretVolume::~OAISecretVolume() {}

void OAISecretVolume::initializeModel() {

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAISecretVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretVolume::fromJsonObject(QJsonObject json) {

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAISecretVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAISecretVolume::getMountPath() const {
    return m_mount_path;
}
void OAISecretVolume::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAISecretVolume::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAISecretVolume::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

QString OAISecretVolume::getProjectId() const {
    return m_project_id;
}
void OAISecretVolume::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISecretVolume::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISecretVolume::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISecretVolume::getSecret() const {
    return m_secret;
}
void OAISecretVolume::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAISecretVolume::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAISecretVolume::is_secret_Valid() const{
    return m_secret_isValid;
}

QList<OAISecretVersion> OAISecretVolume::getVersions() const {
    return m_versions;
}
void OAISecretVolume::setVersions(const QList<OAISecretVersion> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAISecretVolume::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAISecretVolume::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAISecretVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
