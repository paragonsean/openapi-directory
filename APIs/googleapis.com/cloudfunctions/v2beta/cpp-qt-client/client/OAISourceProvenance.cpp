/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceProvenance::OAISourceProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceProvenance::OAISourceProvenance() {
    this->initializeModel();
}

OAISourceProvenance::~OAISourceProvenance() {}

void OAISourceProvenance::initializeModel() {

    m_git_uri_isSet = false;
    m_git_uri_isValid = false;

    m_resolved_repo_source_isSet = false;
    m_resolved_repo_source_isValid = false;

    m_resolved_storage_source_isSet = false;
    m_resolved_storage_source_isValid = false;
}

void OAISourceProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceProvenance::fromJsonObject(QJsonObject json) {

    m_git_uri_isValid = ::OpenAPI::fromJsonValue(m_git_uri, json[QString("gitUri")]);
    m_git_uri_isSet = !json[QString("gitUri")].isNull() && m_git_uri_isValid;

    m_resolved_repo_source_isValid = ::OpenAPI::fromJsonValue(m_resolved_repo_source, json[QString("resolvedRepoSource")]);
    m_resolved_repo_source_isSet = !json[QString("resolvedRepoSource")].isNull() && m_resolved_repo_source_isValid;

    m_resolved_storage_source_isValid = ::OpenAPI::fromJsonValue(m_resolved_storage_source, json[QString("resolvedStorageSource")]);
    m_resolved_storage_source_isSet = !json[QString("resolvedStorageSource")].isNull() && m_resolved_storage_source_isValid;
}

QString OAISourceProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_git_uri_isSet) {
        obj.insert(QString("gitUri"), ::OpenAPI::toJsonValue(m_git_uri));
    }
    if (m_resolved_repo_source.isSet()) {
        obj.insert(QString("resolvedRepoSource"), ::OpenAPI::toJsonValue(m_resolved_repo_source));
    }
    if (m_resolved_storage_source.isSet()) {
        obj.insert(QString("resolvedStorageSource"), ::OpenAPI::toJsonValue(m_resolved_storage_source));
    }
    return obj;
}

QString OAISourceProvenance::getGitUri() const {
    return m_git_uri;
}
void OAISourceProvenance::setGitUri(const QString &git_uri) {
    m_git_uri = git_uri;
    m_git_uri_isSet = true;
}

bool OAISourceProvenance::is_git_uri_Set() const{
    return m_git_uri_isSet;
}

bool OAISourceProvenance::is_git_uri_Valid() const{
    return m_git_uri_isValid;
}

OAIRepoSource OAISourceProvenance::getResolvedRepoSource() const {
    return m_resolved_repo_source;
}
void OAISourceProvenance::setResolvedRepoSource(const OAIRepoSource &resolved_repo_source) {
    m_resolved_repo_source = resolved_repo_source;
    m_resolved_repo_source_isSet = true;
}

bool OAISourceProvenance::is_resolved_repo_source_Set() const{
    return m_resolved_repo_source_isSet;
}

bool OAISourceProvenance::is_resolved_repo_source_Valid() const{
    return m_resolved_repo_source_isValid;
}

OAIStorageSource OAISourceProvenance::getResolvedStorageSource() const {
    return m_resolved_storage_source;
}
void OAISourceProvenance::setResolvedStorageSource(const OAIStorageSource &resolved_storage_source) {
    m_resolved_storage_source = resolved_storage_source;
    m_resolved_storage_source_isSet = true;
}

bool OAISourceProvenance::is_resolved_storage_source_Set() const{
    return m_resolved_storage_source_isSet;
}

bool OAISourceProvenance::is_resolved_storage_source_Valid() const{
    return m_resolved_storage_source_isValid;
}

bool OAISourceProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_git_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_repo_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
