/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventTrigger.h
 *
 * Describes EventTrigger, used to request events to be sent from another service.
 */

#ifndef OAIEventTrigger_H
#define OAIEventTrigger_H

#include <QJsonObject>

#include "OAIEventFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventFilter;

class OAIEventTrigger : public OAIObject {
public:
    OAIEventTrigger();
    OAIEventTrigger(QString json);
    ~OAIEventTrigger() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QList<OAIEventFilter> getEventFilters() const;
    void setEventFilters(const QList<OAIEventFilter> &event_filters);
    bool is_event_filters_Set() const;
    bool is_event_filters_Valid() const;

    QString getEventType() const;
    void setEventType(const QString &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    QString getPubsubTopic() const;
    void setPubsubTopic(const QString &pubsub_topic);
    bool is_pubsub_topic_Set() const;
    bool is_pubsub_topic_Valid() const;

    QString getRetryPolicy() const;
    void setRetryPolicy(const QString &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    QString getServiceAccountEmail() const;
    void setServiceAccountEmail(const QString &service_account_email);
    bool is_service_account_email_Set() const;
    bool is_service_account_email_Valid() const;

    QString getTrigger() const;
    void setTrigger(const QString &trigger);
    bool is_trigger_Set() const;
    bool is_trigger_Valid() const;

    QString getTriggerRegion() const;
    void setTriggerRegion(const QString &trigger_region);
    bool is_trigger_region_Set() const;
    bool is_trigger_region_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QList<OAIEventFilter> m_event_filters;
    bool m_event_filters_isSet;
    bool m_event_filters_isValid;

    QString m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    QString m_pubsub_topic;
    bool m_pubsub_topic_isSet;
    bool m_pubsub_topic_isValid;

    QString m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    QString m_service_account_email;
    bool m_service_account_email_isSet;
    bool m_service_account_email_isValid;

    QString m_trigger;
    bool m_trigger_isSet;
    bool m_trigger_isValid;

    QString m_trigger_region;
    bool m_trigger_region_isSet;
    bool m_trigger_region_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventTrigger)

#endif // OAIEventTrigger_H
