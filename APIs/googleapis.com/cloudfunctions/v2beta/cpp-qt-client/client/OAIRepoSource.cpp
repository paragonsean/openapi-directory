/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoSource::OAIRepoSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoSource::OAIRepoSource() {
    this->initializeModel();
}

OAIRepoSource::~OAIRepoSource() {}

void OAIRepoSource::initializeModel() {

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_repo_name_isSet = false;
    m_repo_name_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;
}

void OAIRepoSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoSource::fromJsonObject(QJsonObject json) {

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("branchName")]);
    m_branch_name_isSet = !json[QString("branchName")].isNull() && m_branch_name_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commitSha")]);
    m_commit_sha_isSet = !json[QString("commitSha")].isNull() && m_commit_sha_isValid;

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_repo_name_isValid = ::OpenAPI::fromJsonValue(m_repo_name, json[QString("repoName")]);
    m_repo_name_isSet = !json[QString("repoName")].isNull() && m_repo_name_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tagName")]);
    m_tag_name_isSet = !json[QString("tagName")].isNull() && m_tag_name_isValid;
}

QString OAIRepoSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoSource::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_name_isSet) {
        obj.insert(QString("branchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commitSha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_repo_name_isSet) {
        obj.insert(QString("repoName"), ::OpenAPI::toJsonValue(m_repo_name));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tagName"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    return obj;
}

QString OAIRepoSource::getBranchName() const {
    return m_branch_name;
}
void OAIRepoSource::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIRepoSource::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIRepoSource::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAIRepoSource::getCommitSha() const {
    return m_commit_sha;
}
void OAIRepoSource::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAIRepoSource::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAIRepoSource::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QString OAIRepoSource::getDir() const {
    return m_dir;
}
void OAIRepoSource::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIRepoSource::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIRepoSource::is_dir_Valid() const{
    return m_dir_isValid;
}

QString OAIRepoSource::getProjectId() const {
    return m_project_id;
}
void OAIRepoSource::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIRepoSource::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIRepoSource::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIRepoSource::getRepoName() const {
    return m_repo_name;
}
void OAIRepoSource::setRepoName(const QString &repo_name) {
    m_repo_name = repo_name;
    m_repo_name_isSet = true;
}

bool OAIRepoSource::is_repo_name_Set() const{
    return m_repo_name_isSet;
}

bool OAIRepoSource::is_repo_name_Valid() const{
    return m_repo_name_isValid;
}

QString OAIRepoSource::getTagName() const {
    return m_tag_name;
}
void OAIRepoSource::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAIRepoSource::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAIRepoSource::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

bool OAIRepoSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
