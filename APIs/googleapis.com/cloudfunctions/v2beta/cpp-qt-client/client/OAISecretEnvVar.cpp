/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretEnvVar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretEnvVar::OAISecretEnvVar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretEnvVar::OAISecretEnvVar() {
    this->initializeModel();
}

OAISecretEnvVar::~OAISecretEnvVar() {}

void OAISecretEnvVar::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISecretEnvVar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretEnvVar::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISecretEnvVar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretEnvVar::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISecretEnvVar::getKey() const {
    return m_key;
}
void OAISecretEnvVar::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISecretEnvVar::is_key_Set() const{
    return m_key_isSet;
}

bool OAISecretEnvVar::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISecretEnvVar::getProjectId() const {
    return m_project_id;
}
void OAISecretEnvVar::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISecretEnvVar::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISecretEnvVar::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISecretEnvVar::getSecret() const {
    return m_secret;
}
void OAISecretEnvVar::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAISecretEnvVar::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAISecretEnvVar::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAISecretEnvVar::getVersion() const {
    return m_version;
}
void OAISecretEnvVar::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISecretEnvVar::is_version_Set() const{
    return m_version_isSet;
}

bool OAISecretEnvVar::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISecretEnvVar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretEnvVar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
