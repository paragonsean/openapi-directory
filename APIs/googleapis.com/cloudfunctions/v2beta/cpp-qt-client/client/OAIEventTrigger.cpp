/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTrigger::OAIEventTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTrigger::OAIEventTrigger() {
    this->initializeModel();
}

OAIEventTrigger::~OAIEventTrigger() {}

void OAIEventTrigger::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_event_filters_isSet = false;
    m_event_filters_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_pubsub_topic_isSet = false;
    m_pubsub_topic_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_trigger_region_isSet = false;
    m_trigger_region_isValid = false;
}

void OAIEventTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTrigger::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_event_filters_isValid = ::OpenAPI::fromJsonValue(m_event_filters, json[QString("eventFilters")]);
    m_event_filters_isSet = !json[QString("eventFilters")].isNull() && m_event_filters_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_pubsub_topic, json[QString("pubsubTopic")]);
    m_pubsub_topic_isSet = !json[QString("pubsubTopic")].isNull() && m_pubsub_topic_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_trigger_region_isValid = ::OpenAPI::fromJsonValue(m_trigger_region, json[QString("triggerRegion")]);
    m_trigger_region_isSet = !json[QString("triggerRegion")].isNull() && m_trigger_region_isValid;
}

QString OAIEventTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_event_filters.size() > 0) {
        obj.insert(QString("eventFilters"), ::OpenAPI::toJsonValue(m_event_filters));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_pubsub_topic_isSet) {
        obj.insert(QString("pubsubTopic"), ::OpenAPI::toJsonValue(m_pubsub_topic));
    }
    if (m_retry_policy_isSet) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_trigger_region_isSet) {
        obj.insert(QString("triggerRegion"), ::OpenAPI::toJsonValue(m_trigger_region));
    }
    return obj;
}

QString OAIEventTrigger::getChannel() const {
    return m_channel;
}
void OAIEventTrigger::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIEventTrigger::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIEventTrigger::is_channel_Valid() const{
    return m_channel_isValid;
}

QList<OAIEventFilter> OAIEventTrigger::getEventFilters() const {
    return m_event_filters;
}
void OAIEventTrigger::setEventFilters(const QList<OAIEventFilter> &event_filters) {
    m_event_filters = event_filters;
    m_event_filters_isSet = true;
}

bool OAIEventTrigger::is_event_filters_Set() const{
    return m_event_filters_isSet;
}

bool OAIEventTrigger::is_event_filters_Valid() const{
    return m_event_filters_isValid;
}

QString OAIEventTrigger::getEventType() const {
    return m_event_type;
}
void OAIEventTrigger::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventTrigger::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventTrigger::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventTrigger::getPubsubTopic() const {
    return m_pubsub_topic;
}
void OAIEventTrigger::setPubsubTopic(const QString &pubsub_topic) {
    m_pubsub_topic = pubsub_topic;
    m_pubsub_topic_isSet = true;
}

bool OAIEventTrigger::is_pubsub_topic_Set() const{
    return m_pubsub_topic_isSet;
}

bool OAIEventTrigger::is_pubsub_topic_Valid() const{
    return m_pubsub_topic_isValid;
}

QString OAIEventTrigger::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIEventTrigger::setRetryPolicy(const QString &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIEventTrigger::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIEventTrigger::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

QString OAIEventTrigger::getService() const {
    return m_service;
}
void OAIEventTrigger::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIEventTrigger::is_service_Set() const{
    return m_service_isSet;
}

bool OAIEventTrigger::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIEventTrigger::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIEventTrigger::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIEventTrigger::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIEventTrigger::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAIEventTrigger::getTrigger() const {
    return m_trigger;
}
void OAIEventTrigger::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIEventTrigger::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIEventTrigger::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIEventTrigger::getTriggerRegion() const {
    return m_trigger_region;
}
void OAIEventTrigger::setTriggerRegion(const QString &trigger_region) {
    m_trigger_region = trigger_region;
    m_trigger_region_isSet = true;
}

bool OAIEventTrigger::is_trigger_region_Set() const{
    return m_trigger_region_isSet;
}

bool OAIEventTrigger::is_trigger_region_Valid() const{
    return m_trigger_region_isValid;
}

bool OAIEventTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
