# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_config import BuildConfig
from openapi_server.models.event_trigger import EventTrigger
from openapi_server.models.google_cloud_functions_v2alpha_state_message import GoogleCloudFunctionsV2alphaStateMessage
from openapi_server.models.service_config import ServiceConfig
from openapi_server.models.upgrade_info import UpgradeInfo
from openapi_server import util


class Function(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_config: BuildConfig=None, create_time: str=None, description: str=None, environment: str=None, event_trigger: EventTrigger=None, kms_key_name: str=None, labels: Dict[str, str]=None, name: str=None, satisfies_pzs: bool=None, service_config: ServiceConfig=None, state: str=None, state_messages: List[GoogleCloudFunctionsV2alphaStateMessage]=None, update_time: str=None, upgrade_info: UpgradeInfo=None, url: str=None):
        """Function - a model defined in OpenAPI

        :param build_config: The build_config of this Function.
        :param create_time: The create_time of this Function.
        :param description: The description of this Function.
        :param environment: The environment of this Function.
        :param event_trigger: The event_trigger of this Function.
        :param kms_key_name: The kms_key_name of this Function.
        :param labels: The labels of this Function.
        :param name: The name of this Function.
        :param satisfies_pzs: The satisfies_pzs of this Function.
        :param service_config: The service_config of this Function.
        :param state: The state of this Function.
        :param state_messages: The state_messages of this Function.
        :param update_time: The update_time of this Function.
        :param upgrade_info: The upgrade_info of this Function.
        :param url: The url of this Function.
        """
        self.openapi_types = {
            'build_config': BuildConfig,
            'create_time': str,
            'description': str,
            'environment': str,
            'event_trigger': EventTrigger,
            'kms_key_name': str,
            'labels': Dict[str, str],
            'name': str,
            'satisfies_pzs': bool,
            'service_config': ServiceConfig,
            'state': str,
            'state_messages': List[GoogleCloudFunctionsV2alphaStateMessage],
            'update_time': str,
            'upgrade_info': UpgradeInfo,
            'url': str
        }

        self.attribute_map = {
            'build_config': 'buildConfig',
            'create_time': 'createTime',
            'description': 'description',
            'environment': 'environment',
            'event_trigger': 'eventTrigger',
            'kms_key_name': 'kmsKeyName',
            'labels': 'labels',
            'name': 'name',
            'satisfies_pzs': 'satisfiesPzs',
            'service_config': 'serviceConfig',
            'state': 'state',
            'state_messages': 'stateMessages',
            'update_time': 'updateTime',
            'upgrade_info': 'upgradeInfo',
            'url': 'url'
        }

        self._build_config = build_config
        self._create_time = create_time
        self._description = description
        self._environment = environment
        self._event_trigger = event_trigger
        self._kms_key_name = kms_key_name
        self._labels = labels
        self._name = name
        self._satisfies_pzs = satisfies_pzs
        self._service_config = service_config
        self._state = state
        self._state_messages = state_messages
        self._update_time = update_time
        self._upgrade_info = upgrade_info
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Function':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Function of this Function.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_config(self):
        """Gets the build_config of this Function.


        :return: The build_config of this Function.
        :rtype: BuildConfig
        """
        return self._build_config

    @build_config.setter
    def build_config(self, build_config):
        """Sets the build_config of this Function.


        :param build_config: The build_config of this Function.
        :type build_config: BuildConfig
        """

        self._build_config = build_config

    @property
    def create_time(self):
        """Gets the create_time of this Function.

        Output only. The create timestamp of a Cloud Function. This is only applicable to 2nd Gen functions.

        :return: The create_time of this Function.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Function.

        Output only. The create timestamp of a Cloud Function. This is only applicable to 2nd Gen functions.

        :param create_time: The create_time of this Function.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Function.

        User-provided description of a function.

        :return: The description of this Function.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Function.

        User-provided description of a function.

        :param description: The description of this Function.
        :type description: str
        """

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this Function.

        Describe whether the function is 1st Gen or 2nd Gen.

        :return: The environment of this Function.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Function.

        Describe whether the function is 1st Gen or 2nd Gen.

        :param environment: The environment of this Function.
        :type environment: str
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "GEN_1", "GEN_2"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def event_trigger(self):
        """Gets the event_trigger of this Function.


        :return: The event_trigger of this Function.
        :rtype: EventTrigger
        """
        return self._event_trigger

    @event_trigger.setter
    def event_trigger(self, event_trigger):
        """Sets the event_trigger of this Function.


        :param event_trigger: The event_trigger of this Function.
        :type event_trigger: EventTrigger
        """

        self._event_trigger = event_trigger

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Function.

        [Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :return: The kms_key_name of this Function.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Function.

        [Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.

        :param kms_key_name: The kms_key_name of this Function.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def labels(self):
        """Gets the labels of this Function.

        Labels associated with this Cloud Function.

        :return: The labels of this Function.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Function.

        Labels associated with this Cloud Function.

        :param labels: The labels of this Function.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Function.

        A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`

        :return: The name of this Function.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Function.

        A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`

        :param name: The name of this Function.
        :type name: str
        """

        self._name = name

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Function.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Function.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Function.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Function.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def service_config(self):
        """Gets the service_config of this Function.


        :return: The service_config of this Function.
        :rtype: ServiceConfig
        """
        return self._service_config

    @service_config.setter
    def service_config(self, service_config):
        """Sets the service_config of this Function.


        :param service_config: The service_config of this Function.
        :type service_config: ServiceConfig
        """

        self._service_config = service_config

    @property
    def state(self):
        """Gets the state of this Function.

        Output only. State of the function.

        :return: The state of this Function.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Function.

        Output only. State of the function.

        :param state: The state of this Function.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "FAILED", "DEPLOYING", "DELETING", "UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_messages(self):
        """Gets the state_messages of this Function.

        Output only. State Messages for this Cloud Function.

        :return: The state_messages of this Function.
        :rtype: List[GoogleCloudFunctionsV2alphaStateMessage]
        """
        return self._state_messages

    @state_messages.setter
    def state_messages(self, state_messages):
        """Sets the state_messages of this Function.

        Output only. State Messages for this Cloud Function.

        :param state_messages: The state_messages of this Function.
        :type state_messages: List[GoogleCloudFunctionsV2alphaStateMessage]
        """

        self._state_messages = state_messages

    @property
    def update_time(self):
        """Gets the update_time of this Function.

        Output only. The last update timestamp of a Cloud Function.

        :return: The update_time of this Function.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Function.

        Output only. The last update timestamp of a Cloud Function.

        :param update_time: The update_time of this Function.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade_info(self):
        """Gets the upgrade_info of this Function.


        :return: The upgrade_info of this Function.
        :rtype: UpgradeInfo
        """
        return self._upgrade_info

    @upgrade_info.setter
    def upgrade_info(self, upgrade_info):
        """Sets the upgrade_info of this Function.


        :param upgrade_info: The upgrade_info of this Function.
        :type upgrade_info: UpgradeInfo
        """

        self._upgrade_info = upgrade_info

    @property
    def url(self):
        """Gets the url of this Function.

        Output only. The deployed url for the function.

        :return: The url of this Function.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Function.

        Output only. The deployed url for the function.

        :param url: The url of this Function.
        :type url: str
        """

        self._url = url
