# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationMetadataV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_id: str=None, build_name: str=None, request: Dict[str, object]=None, source_token: str=None, target: str=None, type: str=None, update_time: str=None, version_id: str=None):
        """OperationMetadataV1 - a model defined in OpenAPI

        :param build_id: The build_id of this OperationMetadataV1.
        :param build_name: The build_name of this OperationMetadataV1.
        :param request: The request of this OperationMetadataV1.
        :param source_token: The source_token of this OperationMetadataV1.
        :param target: The target of this OperationMetadataV1.
        :param type: The type of this OperationMetadataV1.
        :param update_time: The update_time of this OperationMetadataV1.
        :param version_id: The version_id of this OperationMetadataV1.
        """
        self.openapi_types = {
            'build_id': str,
            'build_name': str,
            'request': Dict[str, object],
            'source_token': str,
            'target': str,
            'type': str,
            'update_time': str,
            'version_id': str
        }

        self.attribute_map = {
            'build_id': 'buildId',
            'build_name': 'buildName',
            'request': 'request',
            'source_token': 'sourceToken',
            'target': 'target',
            'type': 'type',
            'update_time': 'updateTime',
            'version_id': 'versionId'
        }

        self._build_id = build_id
        self._build_name = build_name
        self._request = request
        self._source_token = source_token
        self._target = target
        self._type = type
        self._update_time = update_time
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadataV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadataV1 of this OperationMetadataV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_id(self):
        """Gets the build_id of this OperationMetadataV1.

        The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.

        :return: The build_id of this OperationMetadataV1.
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this OperationMetadataV1.

        The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.

        :param build_id: The build_id of this OperationMetadataV1.
        :type build_id: str
        """

        self._build_id = build_id

    @property
    def build_name(self):
        """Gets the build_name of this OperationMetadataV1.

        The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. `projects//locations//builds/`.

        :return: The build_name of this OperationMetadataV1.
        :rtype: str
        """
        return self._build_name

    @build_name.setter
    def build_name(self, build_name):
        """Sets the build_name of this OperationMetadataV1.

        The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. `projects//locations//builds/`.

        :param build_name: The build_name of this OperationMetadataV1.
        :type build_name: str
        """

        self._build_name = build_name

    @property
    def request(self):
        """Gets the request of this OperationMetadataV1.

        The original request that started the operation.

        :return: The request of this OperationMetadataV1.
        :rtype: Dict[str, object]
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this OperationMetadataV1.

        The original request that started the operation.

        :param request: The request of this OperationMetadataV1.
        :type request: Dict[str, object]
        """

        self._request = request

    @property
    def source_token(self):
        """Gets the source_token of this OperationMetadataV1.

        An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :return: The source_token of this OperationMetadataV1.
        :rtype: str
        """
        return self._source_token

    @source_token.setter
    def source_token(self, source_token):
        """Sets the source_token of this OperationMetadataV1.

        An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :param source_token: The source_token of this OperationMetadataV1.
        :type source_token: str
        """

        self._source_token = source_token

    @property
    def target(self):
        """Gets the target of this OperationMetadataV1.

        Target of the operation - for example `projects/project-1/locations/region-1/functions/function-1`

        :return: The target of this OperationMetadataV1.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this OperationMetadataV1.

        Target of the operation - for example `projects/project-1/locations/region-1/functions/function-1`

        :param target: The target of this OperationMetadataV1.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this OperationMetadataV1.

        Type of operation.

        :return: The type of this OperationMetadataV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperationMetadataV1.

        Type of operation.

        :param type: The type of this OperationMetadataV1.
        :type type: str
        """
        allowed_values = ["OPERATION_UNSPECIFIED", "CREATE_FUNCTION", "UPDATE_FUNCTION", "DELETE_FUNCTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this OperationMetadataV1.

        The last update timestamp of the operation.

        :return: The update_time of this OperationMetadataV1.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OperationMetadataV1.

        The last update timestamp of the operation.

        :param update_time: The update_time of this OperationMetadataV1.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version_id(self):
        """Gets the version_id of this OperationMetadataV1.

        Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.

        :return: The version_id of this OperationMetadataV1.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this OperationMetadataV1.

        Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.

        :param version_id: The version_id of this OperationMetadataV1.
        :type version_id: str
        """

        self._version_id = version_id
