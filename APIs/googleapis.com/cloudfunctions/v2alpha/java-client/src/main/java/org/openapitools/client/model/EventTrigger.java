/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes EventTrigger, used to request events to be sent from another service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:56.157616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventTrigger {
  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_EVENT_FILTERS = "eventFilters";
  @SerializedName(SERIALIZED_NAME_EVENT_FILTERS)
  private List<EventFilter> eventFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_PUBSUB_TOPIC = "pubsubTopic";
  @SerializedName(SERIALIZED_NAME_PUBSUB_TOPIC)
  private String pubsubTopic;

  /**
   * Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).
   */
  @JsonAdapter(RetryPolicyEnum.Adapter.class)
  public enum RetryPolicyEnum {
    UNSPECIFIED("RETRY_POLICY_UNSPECIFIED"),
    
    DO_NOT_RETRY("RETRY_POLICY_DO_NOT_RETRY"),
    
    RETRY("RETRY_POLICY_RETRY");

    private String value;

    RetryPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetryPolicyEnum fromValue(String value) {
      for (RetryPolicyEnum b : RetryPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetryPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetryPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetryPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetryPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RetryPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private RetryPolicyEnum retryPolicy;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL = "serviceAccountEmail";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL)
  private String serviceAccountEmail;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private String trigger;

  public static final String SERIALIZED_NAME_TRIGGER_REGION = "triggerRegion";
  @SerializedName(SERIALIZED_NAME_TRIGGER_REGION)
  private String triggerRegion;

  public EventTrigger() {
  }

  public EventTrigger(
     String trigger
  ) {
    this();
    this.trigger = trigger;
  }

  public EventTrigger channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Optional. The name of the channel associated with the trigger in &#x60;projects/{project}/locations/{location}/channels/{channel}&#x60; format. You must provide a channel to receive events from Eventarc SaaS partners.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public EventTrigger eventFilters(List<EventFilter> eventFilters) {
    this.eventFilters = eventFilters;
    return this;
  }

  public EventTrigger addEventFiltersItem(EventFilter eventFiltersItem) {
    if (this.eventFilters == null) {
      this.eventFilters = new ArrayList<>();
    }
    this.eventFilters.add(eventFiltersItem);
    return this;
  }

  /**
   * Criteria used to filter events.
   * @return eventFilters
   */
  @javax.annotation.Nullable
  public List<EventFilter> getEventFilters() {
    return eventFilters;
  }

  public void setEventFilters(List<EventFilter> eventFilters) {
    this.eventFilters = eventFilters;
  }


  public EventTrigger eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Required. The type of event to observe. For example: &#x60;google.cloud.audit.log.v1.written&#x60; or &#x60;google.cloud.pubsub.topic.v1.messagePublished&#x60;.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventTrigger pubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
    return this;
  }

  /**
   * Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: &#x60;projects/{project}/topics/{topic}&#x60;. This is only valid for events of type &#x60;google.cloud.pubsub.topic.v1.messagePublished&#x60;. The topic provided here will not be deleted at function deletion.
   * @return pubsubTopic
   */
  @javax.annotation.Nullable
  public String getPubsubTopic() {
    return pubsubTopic;
  }

  public void setPubsubTopic(String pubsubTopic) {
    this.pubsubTopic = pubsubTopic;
  }


  public EventTrigger retryPolicy(RetryPolicyEnum retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public RetryPolicyEnum getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(RetryPolicyEnum retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public EventTrigger service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, &#x60;storage.googleapis.com&#x60; is the default for all event types in the &#x60;google.storage&#x60; namespace. The field is only applicable to 1st Gen functions.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public EventTrigger serviceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
    return this;
  }

  /**
   * Optional. The email of the trigger&#39;s service account. The service account must have permission to invoke Cloud Run services, the permission is &#x60;run.routes.invoke&#x60;. If empty, defaults to the Compute Engine default service account: &#x60;{project_number}-compute@developer.gserviceaccount.com&#x60;.
   * @return serviceAccountEmail
   */
  @javax.annotation.Nullable
  public String getServiceAccountEmail() {
    return serviceAccountEmail;
  }

  public void setServiceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
  }


  /**
   * Output only. The resource name of the Eventarc trigger. The format of this field is &#x60;projects/{project}/locations/{region}/triggers/{trigger}&#x60;.
   * @return trigger
   */
  @javax.annotation.Nullable
  public String getTrigger() {
    return trigger;
  }



  public EventTrigger triggerRegion(String triggerRegion) {
    this.triggerRegion = triggerRegion;
    return this;
  }

  /**
   * The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.
   * @return triggerRegion
   */
  @javax.annotation.Nullable
  public String getTriggerRegion() {
    return triggerRegion;
  }

  public void setTriggerRegion(String triggerRegion) {
    this.triggerRegion = triggerRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTrigger eventTrigger = (EventTrigger) o;
    return Objects.equals(this.channel, eventTrigger.channel) &&
        Objects.equals(this.eventFilters, eventTrigger.eventFilters) &&
        Objects.equals(this.eventType, eventTrigger.eventType) &&
        Objects.equals(this.pubsubTopic, eventTrigger.pubsubTopic) &&
        Objects.equals(this.retryPolicy, eventTrigger.retryPolicy) &&
        Objects.equals(this.service, eventTrigger.service) &&
        Objects.equals(this.serviceAccountEmail, eventTrigger.serviceAccountEmail) &&
        Objects.equals(this.trigger, eventTrigger.trigger) &&
        Objects.equals(this.triggerRegion, eventTrigger.triggerRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, eventFilters, eventType, pubsubTopic, retryPolicy, service, serviceAccountEmail, trigger, triggerRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTrigger {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    eventFilters: ").append(toIndentedString(eventFilters)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    pubsubTopic: ").append(toIndentedString(pubsubTopic)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    serviceAccountEmail: ").append(toIndentedString(serviceAccountEmail)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    triggerRegion: ").append(toIndentedString(triggerRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("eventFilters");
    openapiFields.add("eventType");
    openapiFields.add("pubsubTopic");
    openapiFields.add("retryPolicy");
    openapiFields.add("service");
    openapiFields.add("serviceAccountEmail");
    openapiFields.add("trigger");
    openapiFields.add("triggerRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTrigger is not found in the empty JSON string", EventTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (jsonObj.get("eventFilters") != null && !jsonObj.get("eventFilters").isJsonNull()) {
        JsonArray jsonArrayeventFilters = jsonObj.getAsJsonArray("eventFilters");
        if (jsonArrayeventFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventFilters` to be an array in the JSON string but got `%s`", jsonObj.get("eventFilters").toString()));
          }

          // validate the optional field `eventFilters` (array)
          for (int i = 0; i < jsonArrayeventFilters.size(); i++) {
            EventFilter.validateJsonElement(jsonArrayeventFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("pubsubTopic") != null && !jsonObj.get("pubsubTopic").isJsonNull()) && !jsonObj.get("pubsubTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubsubTopic").toString()));
      }
      if ((jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) && !jsonObj.get("retryPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retryPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retryPolicy").toString()));
      }
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        RetryPolicyEnum.validateJsonElement(jsonObj.get("retryPolicy"));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("serviceAccountEmail") != null && !jsonObj.get("serviceAccountEmail").isJsonNull()) && !jsonObj.get("serviceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountEmail").toString()));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      if ((jsonObj.get("triggerRegion") != null && !jsonObj.get("triggerRegion").isJsonNull()) && !jsonObj.get("triggerRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerRegion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTrigger>() {
           @Override
           public void write(JsonWriter out, EventTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventTrigger
   * @throws IOException if the JSON string is invalid with respect to EventTrigger
   */
  public static EventTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTrigger.class);
  }

  /**
   * Convert an instance of EventTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

