/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The Runtime model module.
 * @module model/Runtime
 * @version v2alpha
 */
class Runtime {
    /**
     * Constructs a new <code>Runtime</code>.
     * Describes a runtime and any special information (e.g., deprecation status) related to it.
     * @alias module:model/Runtime
     */
    constructor() { 
        
        Runtime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Runtime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Runtime} obj Optional instance to populate.
     * @return {module:model/Runtime} The populated <code>Runtime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Runtime();

            if (data.hasOwnProperty('decommissionDate')) {
                obj['decommissionDate'] = ModelDate.constructFromObject(data['decommissionDate']);
            }
            if (data.hasOwnProperty('deprecationDate')) {
                obj['deprecationDate'] = ModelDate.constructFromObject(data['deprecationDate']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Runtime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Runtime</code>.
     */
    static validateJSON(data) {
        // validate the optional field `decommissionDate`
        if (data['decommissionDate']) { // data not null
          ModelDate.validateJSON(data['decommissionDate']);
        }
        // validate the optional field `deprecationDate`
        if (data['deprecationDate']) { // data not null
          ModelDate.validateJSON(data['deprecationDate']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['stage'] && !(typeof data['stage'] === 'string' || data['stage'] instanceof String)) {
            throw new Error("Expected the field `stage` to be a primitive type in the JSON string but got " + data['stage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} decommissionDate
 */
Runtime.prototype['decommissionDate'] = undefined;

/**
 * @member {module:model/ModelDate} deprecationDate
 */
Runtime.prototype['deprecationDate'] = undefined;

/**
 * The user facing name, eg 'Go 1.13', 'Node.js 12', etc.
 * @member {String} displayName
 */
Runtime.prototype['displayName'] = undefined;

/**
 * The environment for the runtime.
 * @member {module:model/Runtime.EnvironmentEnum} environment
 */
Runtime.prototype['environment'] = undefined;

/**
 * The name of the runtime, e.g., 'go113', 'nodejs12', etc.
 * @member {String} name
 */
Runtime.prototype['name'] = undefined;

/**
 * The stage of life this runtime is in, e.g., BETA, GA, etc.
 * @member {module:model/Runtime.StageEnum} stage
 */
Runtime.prototype['stage'] = undefined;

/**
 * Warning messages, e.g., a deprecation warning.
 * @member {Array.<String>} warnings
 */
Runtime.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>environment</code> property.
 * @enum {String}
 * @readonly
 */
Runtime['EnvironmentEnum'] = {

    /**
     * value: "ENVIRONMENT_UNSPECIFIED"
     * @const
     */
    "ENVIRONMENT_UNSPECIFIED": "ENVIRONMENT_UNSPECIFIED",

    /**
     * value: "GEN_1"
     * @const
     */
    "GEN_1": "GEN_1",

    /**
     * value: "GEN_2"
     * @const
     */
    "GEN_2": "GEN_2"
};


/**
 * Allowed values for the <code>stage</code> property.
 * @enum {String}
 * @readonly
 */
Runtime['StageEnum'] = {

    /**
     * value: "RUNTIME_STAGE_UNSPECIFIED"
     * @const
     */
    "RUNTIME_STAGE_UNSPECIFIED": "RUNTIME_STAGE_UNSPECIFIED",

    /**
     * value: "DEVELOPMENT"
     * @const
     */
    "DEVELOPMENT": "DEVELOPMENT",

    /**
     * value: "ALPHA"
     * @const
     */
    "ALPHA": "ALPHA",

    /**
     * value: "BETA"
     * @const
     */
    "BETA": "BETA",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED",

    /**
     * value: "DECOMMISSIONED"
     * @const
     */
    "DECOMMISSIONED": "DECOMMISSIONED"
};



export default Runtime;

