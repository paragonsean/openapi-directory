/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventFilter from './EventFilter';

/**
 * The EventTrigger model module.
 * @module model/EventTrigger
 * @version v2alpha
 */
class EventTrigger {
    /**
     * Constructs a new <code>EventTrigger</code>.
     * Describes EventTrigger, used to request events to be sent from another service.
     * @alias module:model/EventTrigger
     */
    constructor() { 
        
        EventTrigger.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTrigger} obj Optional instance to populate.
     * @return {module:model/EventTrigger} The populated <code>EventTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTrigger();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('eventFilters')) {
                obj['eventFilters'] = ApiClient.convertToType(data['eventFilters'], [EventFilter]);
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('pubsubTopic')) {
                obj['pubsubTopic'] = ApiClient.convertToType(data['pubsubTopic'], 'String');
            }
            if (data.hasOwnProperty('retryPolicy')) {
                obj['retryPolicy'] = ApiClient.convertToType(data['retryPolicy'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
            if (data.hasOwnProperty('triggerRegion')) {
                obj['triggerRegion'] = ApiClient.convertToType(data['triggerRegion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTrigger</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        if (data['eventFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventFilters'])) {
                throw new Error("Expected the field `eventFilters` to be an array in the JSON data but got " + data['eventFilters']);
            }
            // validate the optional field `eventFilters` (array)
            for (const item of data['eventFilters']) {
                EventFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['pubsubTopic'] && !(typeof data['pubsubTopic'] === 'string' || data['pubsubTopic'] instanceof String)) {
            throw new Error("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got " + data['pubsubTopic']);
        }
        // ensure the json data is a string
        if (data['retryPolicy'] && !(typeof data['retryPolicy'] === 'string' || data['retryPolicy'] instanceof String)) {
            throw new Error("Expected the field `retryPolicy` to be a primitive type in the JSON string but got " + data['retryPolicy']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['trigger'] && !(typeof data['trigger'] === 'string' || data['trigger'] instanceof String)) {
            throw new Error("Expected the field `trigger` to be a primitive type in the JSON string but got " + data['trigger']);
        }
        // ensure the json data is a string
        if (data['triggerRegion'] && !(typeof data['triggerRegion'] === 'string' || data['triggerRegion'] instanceof String)) {
            throw new Error("Expected the field `triggerRegion` to be a primitive type in the JSON string but got " + data['triggerRegion']);
        }

        return true;
    }


}



/**
 * Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
 * @member {String} channel
 */
EventTrigger.prototype['channel'] = undefined;

/**
 * Criteria used to filter events.
 * @member {Array.<module:model/EventFilter>} eventFilters
 */
EventTrigger.prototype['eventFilters'] = undefined;

/**
 * Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.
 * @member {String} eventType
 */
EventTrigger.prototype['eventType'] = undefined;

/**
 * Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.
 * @member {String} pubsubTopic
 */
EventTrigger.prototype['pubsubTopic'] = undefined;

/**
 * Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).
 * @member {module:model/EventTrigger.RetryPolicyEnum} retryPolicy
 */
EventTrigger.prototype['retryPolicy'] = undefined;

/**
 * Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace. The field is only applicable to 1st Gen functions.
 * @member {String} service
 */
EventTrigger.prototype['service'] = undefined;

/**
 * Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.
 * @member {String} serviceAccountEmail
 */
EventTrigger.prototype['serviceAccountEmail'] = undefined;

/**
 * Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.
 * @member {String} trigger
 */
EventTrigger.prototype['trigger'] = undefined;

/**
 * The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.
 * @member {String} triggerRegion
 */
EventTrigger.prototype['triggerRegion'] = undefined;





/**
 * Allowed values for the <code>retryPolicy</code> property.
 * @enum {String}
 * @readonly
 */
EventTrigger['RetryPolicyEnum'] = {

    /**
     * value: "RETRY_POLICY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "RETRY_POLICY_UNSPECIFIED",

    /**
     * value: "RETRY_POLICY_DO_NOT_RETRY"
     * @const
     */
    "DO_NOT_RETRY": "RETRY_POLICY_DO_NOT_RETRY",

    /**
     * value: "RETRY_POLICY_RETRY"
     * @const
     */
    "RETRY": "RETRY_POLICY_RETRY"
};



export default EventTrigger;

