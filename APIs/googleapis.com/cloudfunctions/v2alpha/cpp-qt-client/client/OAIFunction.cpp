/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunction::OAIFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunction::OAIFunction() {
    this->initializeModel();
}

OAIFunction::~OAIFunction() {}

void OAIFunction::initializeModel() {

    m_build_config_isSet = false;
    m_build_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_event_trigger_isSet = false;
    m_event_trigger_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_service_config_isSet = false;
    m_service_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_messages_isSet = false;
    m_state_messages_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_info_isSet = false;
    m_upgrade_info_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunction::fromJsonObject(QJsonObject json) {

    m_build_config_isValid = ::OpenAPI::fromJsonValue(m_build_config, json[QString("buildConfig")]);
    m_build_config_isSet = !json[QString("buildConfig")].isNull() && m_build_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_event_trigger_isValid = ::OpenAPI::fromJsonValue(m_event_trigger, json[QString("eventTrigger")]);
    m_event_trigger_isSet = !json[QString("eventTrigger")].isNull() && m_event_trigger_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_service_config_isValid = ::OpenAPI::fromJsonValue(m_service_config, json[QString("serviceConfig")]);
    m_service_config_isSet = !json[QString("serviceConfig")].isNull() && m_service_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_messages_isValid = ::OpenAPI::fromJsonValue(m_state_messages, json[QString("stateMessages")]);
    m_state_messages_isSet = !json[QString("stateMessages")].isNull() && m_state_messages_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_info_isValid = ::OpenAPI::fromJsonValue(m_upgrade_info, json[QString("upgradeInfo")]);
    m_upgrade_info_isSet = !json[QString("upgradeInfo")].isNull() && m_upgrade_info_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_build_config.isSet()) {
        obj.insert(QString("buildConfig"), ::OpenAPI::toJsonValue(m_build_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_event_trigger.isSet()) {
        obj.insert(QString("eventTrigger"), ::OpenAPI::toJsonValue(m_event_trigger));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_service_config.isSet()) {
        obj.insert(QString("serviceConfig"), ::OpenAPI::toJsonValue(m_service_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_messages.size() > 0) {
        obj.insert(QString("stateMessages"), ::OpenAPI::toJsonValue(m_state_messages));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade_info.isSet()) {
        obj.insert(QString("upgradeInfo"), ::OpenAPI::toJsonValue(m_upgrade_info));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIBuildConfig OAIFunction::getBuildConfig() const {
    return m_build_config;
}
void OAIFunction::setBuildConfig(const OAIBuildConfig &build_config) {
    m_build_config = build_config;
    m_build_config_isSet = true;
}

bool OAIFunction::is_build_config_Set() const{
    return m_build_config_isSet;
}

bool OAIFunction::is_build_config_Valid() const{
    return m_build_config_isValid;
}

QString OAIFunction::getCreateTime() const {
    return m_create_time;
}
void OAIFunction::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFunction::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFunction::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFunction::getDescription() const {
    return m_description;
}
void OAIFunction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFunction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFunction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFunction::getEnvironment() const {
    return m_environment;
}
void OAIFunction::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIFunction::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIFunction::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIEventTrigger OAIFunction::getEventTrigger() const {
    return m_event_trigger;
}
void OAIFunction::setEventTrigger(const OAIEventTrigger &event_trigger) {
    m_event_trigger = event_trigger;
    m_event_trigger_isSet = true;
}

bool OAIFunction::is_event_trigger_Set() const{
    return m_event_trigger_isSet;
}

bool OAIFunction::is_event_trigger_Valid() const{
    return m_event_trigger_isValid;
}

QString OAIFunction::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIFunction::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIFunction::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIFunction::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QString> OAIFunction::getLabels() const {
    return m_labels;
}
void OAIFunction::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFunction::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFunction::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIFunction::getName() const {
    return m_name;
}
void OAIFunction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunction::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFunction::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIFunction::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIFunction::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIFunction::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAIServiceConfig OAIFunction::getServiceConfig() const {
    return m_service_config;
}
void OAIFunction::setServiceConfig(const OAIServiceConfig &service_config) {
    m_service_config = service_config;
    m_service_config_isSet = true;
}

bool OAIFunction::is_service_config_Set() const{
    return m_service_config_isSet;
}

bool OAIFunction::is_service_config_Valid() const{
    return m_service_config_isValid;
}

QString OAIFunction::getState() const {
    return m_state;
}
void OAIFunction::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFunction::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFunction::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIGoogleCloudFunctionsV2alphaStateMessage> OAIFunction::getStateMessages() const {
    return m_state_messages;
}
void OAIFunction::setStateMessages(const QList<OAIGoogleCloudFunctionsV2alphaStateMessage> &state_messages) {
    m_state_messages = state_messages;
    m_state_messages_isSet = true;
}

bool OAIFunction::is_state_messages_Set() const{
    return m_state_messages_isSet;
}

bool OAIFunction::is_state_messages_Valid() const{
    return m_state_messages_isValid;
}

QString OAIFunction::getUpdateTime() const {
    return m_update_time;
}
void OAIFunction::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFunction::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFunction::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUpgradeInfo OAIFunction::getUpgradeInfo() const {
    return m_upgrade_info;
}
void OAIFunction::setUpgradeInfo(const OAIUpgradeInfo &upgrade_info) {
    m_upgrade_info = upgrade_info;
    m_upgrade_info_isSet = true;
}

bool OAIFunction::is_upgrade_info_Set() const{
    return m_upgrade_info_isSet;
}

bool OAIFunction::is_upgrade_info_Valid() const{
    return m_upgrade_info_isValid;
}

QString OAIFunction::getUrl() const {
    return m_url;
}
void OAIFunction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFunction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFunction::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
