/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFilter::OAIEventFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFilter::OAIEventFilter() {
    this->initializeModel();
}

OAIEventFilter::~OAIEventFilter() {}

void OAIEventFilter::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEventFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFilter::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEventFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_isSet) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEventFilter::getAttribute() const {
    return m_attribute;
}
void OAIEventFilter::setAttribute(const QString &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIEventFilter::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIEventFilter::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QString OAIEventFilter::getROperator() const {
    return m_r_operator;
}
void OAIEventFilter::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIEventFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIEventFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIEventFilter::getValue() const {
    return m_value;
}
void OAIEventFilter::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEventFilter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEventFilter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEventFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
