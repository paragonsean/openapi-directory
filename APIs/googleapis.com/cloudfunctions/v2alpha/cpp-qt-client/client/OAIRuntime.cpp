/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntime::OAIRuntime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntime::OAIRuntime() {
    this->initializeModel();
}

OAIRuntime::~OAIRuntime() {}

void OAIRuntime::initializeModel() {

    m_decommission_date_isSet = false;
    m_decommission_date_isValid = false;

    m_deprecation_date_isSet = false;
    m_deprecation_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIRuntime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntime::fromJsonObject(QJsonObject json) {

    m_decommission_date_isValid = ::OpenAPI::fromJsonValue(m_decommission_date, json[QString("decommissionDate")]);
    m_decommission_date_isSet = !json[QString("decommissionDate")].isNull() && m_decommission_date_isValid;

    m_deprecation_date_isValid = ::OpenAPI::fromJsonValue(m_deprecation_date, json[QString("deprecationDate")]);
    m_deprecation_date_isSet = !json[QString("deprecationDate")].isNull() && m_deprecation_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIRuntime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntime::asJsonObject() const {
    QJsonObject obj;
    if (m_decommission_date.isSet()) {
        obj.insert(QString("decommissionDate"), ::OpenAPI::toJsonValue(m_decommission_date));
    }
    if (m_deprecation_date.isSet()) {
        obj.insert(QString("deprecationDate"), ::OpenAPI::toJsonValue(m_deprecation_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIDate OAIRuntime::getDecommissionDate() const {
    return m_decommission_date;
}
void OAIRuntime::setDecommissionDate(const OAIDate &decommission_date) {
    m_decommission_date = decommission_date;
    m_decommission_date_isSet = true;
}

bool OAIRuntime::is_decommission_date_Set() const{
    return m_decommission_date_isSet;
}

bool OAIRuntime::is_decommission_date_Valid() const{
    return m_decommission_date_isValid;
}

OAIDate OAIRuntime::getDeprecationDate() const {
    return m_deprecation_date;
}
void OAIRuntime::setDeprecationDate(const OAIDate &deprecation_date) {
    m_deprecation_date = deprecation_date;
    m_deprecation_date_isSet = true;
}

bool OAIRuntime::is_deprecation_date_Set() const{
    return m_deprecation_date_isSet;
}

bool OAIRuntime::is_deprecation_date_Valid() const{
    return m_deprecation_date_isValid;
}

QString OAIRuntime::getDisplayName() const {
    return m_display_name;
}
void OAIRuntime::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRuntime::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRuntime::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRuntime::getEnvironment() const {
    return m_environment;
}
void OAIRuntime::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRuntime::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRuntime::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIRuntime::getName() const {
    return m_name;
}
void OAIRuntime::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuntime::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuntime::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRuntime::getStage() const {
    return m_stage;
}
void OAIRuntime::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIRuntime::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIRuntime::is_stage_Valid() const{
    return m_stage_isValid;
}

QList<QString> OAIRuntime::getWarnings() const {
    return m_warnings;
}
void OAIRuntime::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIRuntime::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIRuntime::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIRuntime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decommission_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
