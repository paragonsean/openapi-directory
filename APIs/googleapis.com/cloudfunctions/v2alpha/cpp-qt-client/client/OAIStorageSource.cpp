/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageSource::OAIStorageSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageSource::OAIStorageSource() {
    this->initializeModel();
}

OAIStorageSource::~OAIStorageSource() {}

void OAIStorageSource::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIStorageSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageSource::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;
}

QString OAIStorageSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageSource::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAIStorageSource::getBucket() const {
    return m_bucket;
}
void OAIStorageSource::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIStorageSource::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIStorageSource::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIStorageSource::getGeneration() const {
    return m_generation;
}
void OAIStorageSource::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIStorageSource::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIStorageSource::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIStorageSource::getObject() const {
    return m_object;
}
void OAIStorageSource::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIStorageSource::is_object_Set() const{
    return m_object_isSet;
}

bool OAIStorageSource::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIStorageSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
