# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_config import BuildConfig
from openapi_server.models.event_trigger import EventTrigger
from openapi_server.models.service_config import ServiceConfig
from openapi_server import util


class UpgradeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_config: BuildConfig=None, event_trigger: EventTrigger=None, service_config: ServiceConfig=None, upgrade_state: str=None):
        """UpgradeInfo - a model defined in OpenAPI

        :param build_config: The build_config of this UpgradeInfo.
        :param event_trigger: The event_trigger of this UpgradeInfo.
        :param service_config: The service_config of this UpgradeInfo.
        :param upgrade_state: The upgrade_state of this UpgradeInfo.
        """
        self.openapi_types = {
            'build_config': BuildConfig,
            'event_trigger': EventTrigger,
            'service_config': ServiceConfig,
            'upgrade_state': str
        }

        self.attribute_map = {
            'build_config': 'buildConfig',
            'event_trigger': 'eventTrigger',
            'service_config': 'serviceConfig',
            'upgrade_state': 'upgradeState'
        }

        self._build_config = build_config
        self._event_trigger = event_trigger
        self._service_config = service_config
        self._upgrade_state = upgrade_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeInfo of this UpgradeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_config(self):
        """Gets the build_config of this UpgradeInfo.


        :return: The build_config of this UpgradeInfo.
        :rtype: BuildConfig
        """
        return self._build_config

    @build_config.setter
    def build_config(self, build_config):
        """Sets the build_config of this UpgradeInfo.


        :param build_config: The build_config of this UpgradeInfo.
        :type build_config: BuildConfig
        """

        self._build_config = build_config

    @property
    def event_trigger(self):
        """Gets the event_trigger of this UpgradeInfo.


        :return: The event_trigger of this UpgradeInfo.
        :rtype: EventTrigger
        """
        return self._event_trigger

    @event_trigger.setter
    def event_trigger(self, event_trigger):
        """Sets the event_trigger of this UpgradeInfo.


        :param event_trigger: The event_trigger of this UpgradeInfo.
        :type event_trigger: EventTrigger
        """

        self._event_trigger = event_trigger

    @property
    def service_config(self):
        """Gets the service_config of this UpgradeInfo.


        :return: The service_config of this UpgradeInfo.
        :rtype: ServiceConfig
        """
        return self._service_config

    @service_config.setter
    def service_config(self, service_config):
        """Sets the service_config of this UpgradeInfo.


        :param service_config: The service_config of this UpgradeInfo.
        :type service_config: ServiceConfig
        """

        self._service_config = service_config

    @property
    def upgrade_state(self):
        """Gets the upgrade_state of this UpgradeInfo.

        UpgradeState of the function

        :return: The upgrade_state of this UpgradeInfo.
        :rtype: str
        """
        return self._upgrade_state

    @upgrade_state.setter
    def upgrade_state(self, upgrade_state):
        """Sets the upgrade_state of this UpgradeInfo.

        UpgradeState of the function

        :param upgrade_state: The upgrade_state of this UpgradeInfo.
        :type upgrade_state: str
        """
        allowed_values = ["UPGRADE_STATE_UNSPECIFIED", "ELIGIBLE_FOR_2ND_GEN_UPGRADE", "UPGRADE_OPERATION_IN_PROGRESS", "SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL", "SETUP_FUNCTION_UPGRADE_CONFIG_ERROR", "ABORT_FUNCTION_UPGRADE_ERROR", "REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL", "REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR", "ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR", "COMMIT_FUNCTION_UPGRADE_ERROR"]  # noqa: E501
        if upgrade_state not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_state` ({0}), must be one of {1}"
                .format(upgrade_state, allowed_values)
            )

        self._upgrade_state = upgrade_state
