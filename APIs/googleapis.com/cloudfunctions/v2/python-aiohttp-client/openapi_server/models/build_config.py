# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_deploy_update_policy import OnDeployUpdatePolicy
from openapi_server.models.source import Source
from openapi_server.models.source_provenance import SourceProvenance
from openapi_server import util


class BuildConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_update_policy: object=None, build: str=None, docker_registry: str=None, docker_repository: str=None, entry_point: str=None, environment_variables: Dict[str, str]=None, on_deploy_update_policy: OnDeployUpdatePolicy=None, runtime: str=None, service_account: str=None, source: Source=None, source_provenance: SourceProvenance=None, source_token: str=None, worker_pool: str=None):
        """BuildConfig - a model defined in OpenAPI

        :param automatic_update_policy: The automatic_update_policy of this BuildConfig.
        :param build: The build of this BuildConfig.
        :param docker_registry: The docker_registry of this BuildConfig.
        :param docker_repository: The docker_repository of this BuildConfig.
        :param entry_point: The entry_point of this BuildConfig.
        :param environment_variables: The environment_variables of this BuildConfig.
        :param on_deploy_update_policy: The on_deploy_update_policy of this BuildConfig.
        :param runtime: The runtime of this BuildConfig.
        :param service_account: The service_account of this BuildConfig.
        :param source: The source of this BuildConfig.
        :param source_provenance: The source_provenance of this BuildConfig.
        :param source_token: The source_token of this BuildConfig.
        :param worker_pool: The worker_pool of this BuildConfig.
        """
        self.openapi_types = {
            'automatic_update_policy': object,
            'build': str,
            'docker_registry': str,
            'docker_repository': str,
            'entry_point': str,
            'environment_variables': Dict[str, str],
            'on_deploy_update_policy': OnDeployUpdatePolicy,
            'runtime': str,
            'service_account': str,
            'source': Source,
            'source_provenance': SourceProvenance,
            'source_token': str,
            'worker_pool': str
        }

        self.attribute_map = {
            'automatic_update_policy': 'automaticUpdatePolicy',
            'build': 'build',
            'docker_registry': 'dockerRegistry',
            'docker_repository': 'dockerRepository',
            'entry_point': 'entryPoint',
            'environment_variables': 'environmentVariables',
            'on_deploy_update_policy': 'onDeployUpdatePolicy',
            'runtime': 'runtime',
            'service_account': 'serviceAccount',
            'source': 'source',
            'source_provenance': 'sourceProvenance',
            'source_token': 'sourceToken',
            'worker_pool': 'workerPool'
        }

        self._automatic_update_policy = automatic_update_policy
        self._build = build
        self._docker_registry = docker_registry
        self._docker_repository = docker_repository
        self._entry_point = entry_point
        self._environment_variables = environment_variables
        self._on_deploy_update_policy = on_deploy_update_policy
        self._runtime = runtime
        self._service_account = service_account
        self._source = source
        self._source_provenance = source_provenance
        self._source_token = source_token
        self._worker_pool = worker_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildConfig of this BuildConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_update_policy(self):
        """Gets the automatic_update_policy of this BuildConfig.

        Security patches are applied automatically to the runtime without requiring the function to be redeployed.

        :return: The automatic_update_policy of this BuildConfig.
        :rtype: object
        """
        return self._automatic_update_policy

    @automatic_update_policy.setter
    def automatic_update_policy(self, automatic_update_policy):
        """Sets the automatic_update_policy of this BuildConfig.

        Security patches are applied automatically to the runtime without requiring the function to be redeployed.

        :param automatic_update_policy: The automatic_update_policy of this BuildConfig.
        :type automatic_update_policy: object
        """

        self._automatic_update_policy = automatic_update_policy

    @property
    def build(self):
        """Gets the build of this BuildConfig.

        Output only. The Cloud Build name of the latest successful deployment of the function.

        :return: The build of this BuildConfig.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this BuildConfig.

        Output only. The Cloud Build name of the latest successful deployment of the function.

        :param build: The build of this BuildConfig.
        :type build: str
        """

        self._build = build

    @property
    def docker_registry(self):
        """Gets the docker_registry of this BuildConfig.

        Docker Registry to use for this deployment. This configuration is only applicable to 1st Gen functions, 2nd Gen functions can only use Artifact Registry. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.

        :return: The docker_registry of this BuildConfig.
        :rtype: str
        """
        return self._docker_registry

    @docker_registry.setter
    def docker_registry(self, docker_registry):
        """Sets the docker_registry of this BuildConfig.

        Docker Registry to use for this deployment. This configuration is only applicable to 1st Gen functions, 2nd Gen functions can only use Artifact Registry. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.

        :param docker_registry: The docker_registry of this BuildConfig.
        :type docker_registry: str
        """
        allowed_values = ["DOCKER_REGISTRY_UNSPECIFIED", "CONTAINER_REGISTRY", "ARTIFACT_REGISTRY"]  # noqa: E501
        if docker_registry not in allowed_values:
            raise ValueError(
                "Invalid value for `docker_registry` ({0}), must be one of {1}"
                .format(docker_registry, allowed_values)
            )

        self._docker_registry = docker_registry

    @property
    def docker_repository(self):
        """Gets the docker_repository of this BuildConfig.

        Repository in Artifact Registry to which the function docker image will be pushed after it is built by Cloud Build. If specified by user, it is created and managed by user with a customer managed encryption key. Otherwise, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.

        :return: The docker_repository of this BuildConfig.
        :rtype: str
        """
        return self._docker_repository

    @docker_repository.setter
    def docker_repository(self, docker_repository):
        """Sets the docker_repository of this BuildConfig.

        Repository in Artifact Registry to which the function docker image will be pushed after it is built by Cloud Build. If specified by user, it is created and managed by user with a customer managed encryption key. Otherwise, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.

        :param docker_repository: The docker_repository of this BuildConfig.
        :type docker_repository: str
        """

        self._docker_repository = docker_repository

    @property
    def entry_point(self):
        """Gets the entry_point of this BuildConfig.

        The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`.

        :return: The entry_point of this BuildConfig.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this BuildConfig.

        The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`.

        :param entry_point: The entry_point of this BuildConfig.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def environment_variables(self):
        """Gets the environment_variables of this BuildConfig.

        User-provided build-time environment variables for the function

        :return: The environment_variables of this BuildConfig.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this BuildConfig.

        User-provided build-time environment variables for the function

        :param environment_variables: The environment_variables of this BuildConfig.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def on_deploy_update_policy(self):
        """Gets the on_deploy_update_policy of this BuildConfig.


        :return: The on_deploy_update_policy of this BuildConfig.
        :rtype: OnDeployUpdatePolicy
        """
        return self._on_deploy_update_policy

    @on_deploy_update_policy.setter
    def on_deploy_update_policy(self, on_deploy_update_policy):
        """Sets the on_deploy_update_policy of this BuildConfig.


        :param on_deploy_update_policy: The on_deploy_update_policy of this BuildConfig.
        :type on_deploy_update_policy: OnDeployUpdatePolicy
        """

        self._on_deploy_update_policy = on_deploy_update_policy

    @property
    def runtime(self):
        """Gets the runtime of this BuildConfig.

        The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).

        :return: The runtime of this BuildConfig.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this BuildConfig.

        The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).

        :param runtime: The runtime of this BuildConfig.
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def service_account(self):
        """Gets the service_account of this BuildConfig.

        [Preview] Service account to be used for building the container

        :return: The service_account of this BuildConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this BuildConfig.

        [Preview] Service account to be used for building the container

        :param service_account: The service_account of this BuildConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def source(self):
        """Gets the source of this BuildConfig.


        :return: The source of this BuildConfig.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BuildConfig.


        :param source: The source of this BuildConfig.
        :type source: Source
        """

        self._source = source

    @property
    def source_provenance(self):
        """Gets the source_provenance of this BuildConfig.


        :return: The source_provenance of this BuildConfig.
        :rtype: SourceProvenance
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance):
        """Sets the source_provenance of this BuildConfig.


        :param source_provenance: The source_provenance of this BuildConfig.
        :type source_provenance: SourceProvenance
        """

        self._source_provenance = source_provenance

    @property
    def source_token(self):
        """Gets the source_token of this BuildConfig.

        An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :return: The source_token of this BuildConfig.
        :rtype: str
        """
        return self._source_token

    @source_token.setter
    def source_token(self, source_token):
        """Sets the source_token of this BuildConfig.

        An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.

        :param source_token: The source_token of this BuildConfig.
        :type source_token: str
        """

        self._source_token = source_token

    @property
    def worker_pool(self):
        """Gets the worker_pool of this BuildConfig.

        Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.

        :return: The worker_pool of this BuildConfig.
        :rtype: str
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this BuildConfig.

        Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.

        :param worker_pool: The worker_pool of this BuildConfig.
        :type worker_pool: str
        """

        self._worker_pool = worker_pool
