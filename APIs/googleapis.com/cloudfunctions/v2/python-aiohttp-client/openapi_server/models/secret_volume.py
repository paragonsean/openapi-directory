# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secret_version import SecretVersion
from openapi_server import util


class SecretVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mount_path: str=None, project_id: str=None, secret: str=None, versions: List[SecretVersion]=None):
        """SecretVolume - a model defined in OpenAPI

        :param mount_path: The mount_path of this SecretVolume.
        :param project_id: The project_id of this SecretVolume.
        :param secret: The secret of this SecretVolume.
        :param versions: The versions of this SecretVolume.
        """
        self.openapi_types = {
            'mount_path': str,
            'project_id': str,
            'secret': str,
            'versions': List[SecretVersion]
        }

        self.attribute_map = {
            'mount_path': 'mountPath',
            'project_id': 'projectId',
            'secret': 'secret',
            'versions': 'versions'
        }

        self._mount_path = mount_path
        self._project_id = project_id
        self._secret = secret
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretVolume of this SecretVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_path(self):
        """Gets the mount_path of this SecretVolume.

        The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets

        :return: The mount_path of this SecretVolume.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this SecretVolume.

        The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets

        :param mount_path: The mount_path of this SecretVolume.
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def project_id(self):
        """Gets the project_id of this SecretVolume.

        Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.

        :return: The project_id of this SecretVolume.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SecretVolume.

        Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.

        :param project_id: The project_id of this SecretVolume.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def secret(self):
        """Gets the secret of this SecretVolume.

        Name of the secret in secret manager (not the full resource name).

        :return: The secret of this SecretVolume.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this SecretVolume.

        Name of the secret in secret manager (not the full resource name).

        :param secret: The secret of this SecretVolume.
        :type secret: str
        """

        self._secret = secret

    @property
    def versions(self):
        """Gets the versions of this SecretVolume.

        List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.

        :return: The versions of this SecretVolume.
        :rtype: List[SecretVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this SecretVolume.

        List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.

        :param versions: The versions of this SecretVolume.
        :type versions: List[SecretVersion]
        """

        self._versions = versions
