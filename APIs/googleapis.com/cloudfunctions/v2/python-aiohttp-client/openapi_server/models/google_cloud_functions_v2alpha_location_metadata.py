# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudFunctionsV2alphaLocationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environments: List[str]=None):
        """GoogleCloudFunctionsV2alphaLocationMetadata - a model defined in OpenAPI

        :param environments: The environments of this GoogleCloudFunctionsV2alphaLocationMetadata.
        """
        self.openapi_types = {
            'environments': List[str]
        }

        self.attribute_map = {
            'environments': 'environments'
        }

        self._environments = environments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudFunctionsV2alphaLocationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudFunctionsV2alphaLocationMetadata of this GoogleCloudFunctionsV2alphaLocationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environments(self):
        """Gets the environments of this GoogleCloudFunctionsV2alphaLocationMetadata.

        The Cloud Function environments this location supports.

        :return: The environments of this GoogleCloudFunctionsV2alphaLocationMetadata.
        :rtype: List[str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this GoogleCloudFunctionsV2alphaLocationMetadata.

        The Cloud Function environments this location supports.

        :param environments: The environments of this GoogleCloudFunctionsV2alphaLocationMetadata.
        :type environments: List[str]
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "GEN_1", "GEN_2"]  # noqa: E501
        if not set(environments).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `environments` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(environments) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._environments = environments
