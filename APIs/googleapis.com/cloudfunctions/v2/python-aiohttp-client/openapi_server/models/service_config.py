# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secret_env_var import SecretEnvVar
from openapi_server.models.secret_volume import SecretVolume
from openapi_server import util


class ServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_traffic_on_latest_revision: bool=None, available_cpu: str=None, available_memory: str=None, environment_variables: Dict[str, str]=None, ingress_settings: str=None, max_instance_count: int=None, max_instance_request_concurrency: int=None, min_instance_count: int=None, revision: str=None, secret_environment_variables: List[SecretEnvVar]=None, secret_volumes: List[SecretVolume]=None, security_level: str=None, service: str=None, service_account_email: str=None, timeout_seconds: int=None, uri: str=None, vpc_connector: str=None, vpc_connector_egress_settings: str=None):
        """ServiceConfig - a model defined in OpenAPI

        :param all_traffic_on_latest_revision: The all_traffic_on_latest_revision of this ServiceConfig.
        :param available_cpu: The available_cpu of this ServiceConfig.
        :param available_memory: The available_memory of this ServiceConfig.
        :param environment_variables: The environment_variables of this ServiceConfig.
        :param ingress_settings: The ingress_settings of this ServiceConfig.
        :param max_instance_count: The max_instance_count of this ServiceConfig.
        :param max_instance_request_concurrency: The max_instance_request_concurrency of this ServiceConfig.
        :param min_instance_count: The min_instance_count of this ServiceConfig.
        :param revision: The revision of this ServiceConfig.
        :param secret_environment_variables: The secret_environment_variables of this ServiceConfig.
        :param secret_volumes: The secret_volumes of this ServiceConfig.
        :param security_level: The security_level of this ServiceConfig.
        :param service: The service of this ServiceConfig.
        :param service_account_email: The service_account_email of this ServiceConfig.
        :param timeout_seconds: The timeout_seconds of this ServiceConfig.
        :param uri: The uri of this ServiceConfig.
        :param vpc_connector: The vpc_connector of this ServiceConfig.
        :param vpc_connector_egress_settings: The vpc_connector_egress_settings of this ServiceConfig.
        """
        self.openapi_types = {
            'all_traffic_on_latest_revision': bool,
            'available_cpu': str,
            'available_memory': str,
            'environment_variables': Dict[str, str],
            'ingress_settings': str,
            'max_instance_count': int,
            'max_instance_request_concurrency': int,
            'min_instance_count': int,
            'revision': str,
            'secret_environment_variables': List[SecretEnvVar],
            'secret_volumes': List[SecretVolume],
            'security_level': str,
            'service': str,
            'service_account_email': str,
            'timeout_seconds': int,
            'uri': str,
            'vpc_connector': str,
            'vpc_connector_egress_settings': str
        }

        self.attribute_map = {
            'all_traffic_on_latest_revision': 'allTrafficOnLatestRevision',
            'available_cpu': 'availableCpu',
            'available_memory': 'availableMemory',
            'environment_variables': 'environmentVariables',
            'ingress_settings': 'ingressSettings',
            'max_instance_count': 'maxInstanceCount',
            'max_instance_request_concurrency': 'maxInstanceRequestConcurrency',
            'min_instance_count': 'minInstanceCount',
            'revision': 'revision',
            'secret_environment_variables': 'secretEnvironmentVariables',
            'secret_volumes': 'secretVolumes',
            'security_level': 'securityLevel',
            'service': 'service',
            'service_account_email': 'serviceAccountEmail',
            'timeout_seconds': 'timeoutSeconds',
            'uri': 'uri',
            'vpc_connector': 'vpcConnector',
            'vpc_connector_egress_settings': 'vpcConnectorEgressSettings'
        }

        self._all_traffic_on_latest_revision = all_traffic_on_latest_revision
        self._available_cpu = available_cpu
        self._available_memory = available_memory
        self._environment_variables = environment_variables
        self._ingress_settings = ingress_settings
        self._max_instance_count = max_instance_count
        self._max_instance_request_concurrency = max_instance_request_concurrency
        self._min_instance_count = min_instance_count
        self._revision = revision
        self._secret_environment_variables = secret_environment_variables
        self._secret_volumes = secret_volumes
        self._security_level = security_level
        self._service = service
        self._service_account_email = service_account_email
        self._timeout_seconds = timeout_seconds
        self._uri = uri
        self._vpc_connector = vpc_connector
        self._vpc_connector_egress_settings = vpc_connector_egress_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConfig of this ServiceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_traffic_on_latest_revision(self):
        """Gets the all_traffic_on_latest_revision of this ServiceConfig.

        Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.

        :return: The all_traffic_on_latest_revision of this ServiceConfig.
        :rtype: bool
        """
        return self._all_traffic_on_latest_revision

    @all_traffic_on_latest_revision.setter
    def all_traffic_on_latest_revision(self, all_traffic_on_latest_revision):
        """Sets the all_traffic_on_latest_revision of this ServiceConfig.

        Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.

        :param all_traffic_on_latest_revision: The all_traffic_on_latest_revision of this ServiceConfig.
        :type all_traffic_on_latest_revision: bool
        """

        self._all_traffic_on_latest_revision = all_traffic_on_latest_revision

    @property
    def available_cpu(self):
        """Gets the available_cpu of this ServiceConfig.

        The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU

        :return: The available_cpu of this ServiceConfig.
        :rtype: str
        """
        return self._available_cpu

    @available_cpu.setter
    def available_cpu(self, available_cpu):
        """Sets the available_cpu of this ServiceConfig.

        The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU

        :param available_cpu: The available_cpu of this ServiceConfig.
        :type available_cpu: str
        """

        self._available_cpu = available_cpu

    @property
    def available_memory(self):
        """Gets the available_memory of this ServiceConfig.

        The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.

        :return: The available_memory of this ServiceConfig.
        :rtype: str
        """
        return self._available_memory

    @available_memory.setter
    def available_memory(self, available_memory):
        """Sets the available_memory of this ServiceConfig.

        The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.

        :param available_memory: The available_memory of this ServiceConfig.
        :type available_memory: str
        """

        self._available_memory = available_memory

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ServiceConfig.

        Environment variables that shall be available during function execution.

        :return: The environment_variables of this ServiceConfig.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ServiceConfig.

        Environment variables that shall be available during function execution.

        :param environment_variables: The environment_variables of this ServiceConfig.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def ingress_settings(self):
        """Gets the ingress_settings of this ServiceConfig.

        The ingress settings for the function, controlling what traffic can reach it.

        :return: The ingress_settings of this ServiceConfig.
        :rtype: str
        """
        return self._ingress_settings

    @ingress_settings.setter
    def ingress_settings(self, ingress_settings):
        """Sets the ingress_settings of this ServiceConfig.

        The ingress settings for the function, controlling what traffic can reach it.

        :param ingress_settings: The ingress_settings of this ServiceConfig.
        :type ingress_settings: str
        """
        allowed_values = ["INGRESS_SETTINGS_UNSPECIFIED", "ALLOW_ALL", "ALLOW_INTERNAL_ONLY", "ALLOW_INTERNAL_AND_GCLB"]  # noqa: E501
        if ingress_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `ingress_settings` ({0}), must be one of {1}"
                .format(ingress_settings, allowed_values)
            )

        self._ingress_settings = ingress_settings

    @property
    def max_instance_count(self):
        """Gets the max_instance_count of this ServiceConfig.

        The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.

        :return: The max_instance_count of this ServiceConfig.
        :rtype: int
        """
        return self._max_instance_count

    @max_instance_count.setter
    def max_instance_count(self, max_instance_count):
        """Sets the max_instance_count of this ServiceConfig.

        The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.

        :param max_instance_count: The max_instance_count of this ServiceConfig.
        :type max_instance_count: int
        """

        self._max_instance_count = max_instance_count

    @property
    def max_instance_request_concurrency(self):
        """Gets the max_instance_request_concurrency of this ServiceConfig.

        Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.

        :return: The max_instance_request_concurrency of this ServiceConfig.
        :rtype: int
        """
        return self._max_instance_request_concurrency

    @max_instance_request_concurrency.setter
    def max_instance_request_concurrency(self, max_instance_request_concurrency):
        """Sets the max_instance_request_concurrency of this ServiceConfig.

        Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.

        :param max_instance_request_concurrency: The max_instance_request_concurrency of this ServiceConfig.
        :type max_instance_request_concurrency: int
        """

        self._max_instance_request_concurrency = max_instance_request_concurrency

    @property
    def min_instance_count(self):
        """Gets the min_instance_count of this ServiceConfig.

        The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.

        :return: The min_instance_count of this ServiceConfig.
        :rtype: int
        """
        return self._min_instance_count

    @min_instance_count.setter
    def min_instance_count(self, min_instance_count):
        """Sets the min_instance_count of this ServiceConfig.

        The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.

        :param min_instance_count: The min_instance_count of this ServiceConfig.
        :type min_instance_count: int
        """

        self._min_instance_count = min_instance_count

    @property
    def revision(self):
        """Gets the revision of this ServiceConfig.

        Output only. The name of service revision.

        :return: The revision of this ServiceConfig.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ServiceConfig.

        Output only. The name of service revision.

        :param revision: The revision of this ServiceConfig.
        :type revision: str
        """

        self._revision = revision

    @property
    def secret_environment_variables(self):
        """Gets the secret_environment_variables of this ServiceConfig.

        Secret environment variables configuration.

        :return: The secret_environment_variables of this ServiceConfig.
        :rtype: List[SecretEnvVar]
        """
        return self._secret_environment_variables

    @secret_environment_variables.setter
    def secret_environment_variables(self, secret_environment_variables):
        """Sets the secret_environment_variables of this ServiceConfig.

        Secret environment variables configuration.

        :param secret_environment_variables: The secret_environment_variables of this ServiceConfig.
        :type secret_environment_variables: List[SecretEnvVar]
        """

        self._secret_environment_variables = secret_environment_variables

    @property
    def secret_volumes(self):
        """Gets the secret_volumes of this ServiceConfig.

        Secret volumes configuration.

        :return: The secret_volumes of this ServiceConfig.
        :rtype: List[SecretVolume]
        """
        return self._secret_volumes

    @secret_volumes.setter
    def secret_volumes(self, secret_volumes):
        """Sets the secret_volumes of this ServiceConfig.

        Secret volumes configuration.

        :param secret_volumes: The secret_volumes of this ServiceConfig.
        :type secret_volumes: List[SecretVolume]
        """

        self._secret_volumes = secret_volumes

    @property
    def security_level(self):
        """Gets the security_level of this ServiceConfig.

        Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.

        :return: The security_level of this ServiceConfig.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this ServiceConfig.

        Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.

        :param security_level: The security_level of this ServiceConfig.
        :type security_level: str
        """
        allowed_values = ["SECURITY_LEVEL_UNSPECIFIED", "SECURE_ALWAYS", "SECURE_OPTIONAL"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def service(self):
        """Gets the service of this ServiceConfig.

        Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`

        :return: The service of this ServiceConfig.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServiceConfig.

        Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`

        :param service: The service of this ServiceConfig.
        :type service: str
        """

        self._service = service

    @property
    def service_account_email(self):
        """Gets the service_account_email of this ServiceConfig.

        The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.

        :return: The service_account_email of this ServiceConfig.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this ServiceConfig.

        The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.

        :param service_account_email: The service_account_email of this ServiceConfig.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this ServiceConfig.

        The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.

        :return: The timeout_seconds of this ServiceConfig.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this ServiceConfig.

        The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.

        :param timeout_seconds: The timeout_seconds of this ServiceConfig.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def uri(self):
        """Gets the uri of this ServiceConfig.

        Output only. URI of the Service deployed.

        :return: The uri of this ServiceConfig.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ServiceConfig.

        Output only. URI of the Service deployed.

        :param uri: The uri of this ServiceConfig.
        :type uri: str
        """

        self._uri = uri

    @property
    def vpc_connector(self):
        """Gets the vpc_connector of this ServiceConfig.

        The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`.

        :return: The vpc_connector of this ServiceConfig.
        :rtype: str
        """
        return self._vpc_connector

    @vpc_connector.setter
    def vpc_connector(self, vpc_connector):
        """Sets the vpc_connector of this ServiceConfig.

        The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`.

        :param vpc_connector: The vpc_connector of this ServiceConfig.
        :type vpc_connector: str
        """

        self._vpc_connector = vpc_connector

    @property
    def vpc_connector_egress_settings(self):
        """Gets the vpc_connector_egress_settings of this ServiceConfig.

        The egress settings for the connector, controlling what traffic is diverted through it.

        :return: The vpc_connector_egress_settings of this ServiceConfig.
        :rtype: str
        """
        return self._vpc_connector_egress_settings

    @vpc_connector_egress_settings.setter
    def vpc_connector_egress_settings(self, vpc_connector_egress_settings):
        """Sets the vpc_connector_egress_settings of this ServiceConfig.

        The egress settings for the connector, controlling what traffic is diverted through it.

        :param vpc_connector_egress_settings: The vpc_connector_egress_settings of this ServiceConfig.
        :type vpc_connector_egress_settings: str
        """
        allowed_values = ["VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED", "PRIVATE_RANGES_ONLY", "ALL_TRAFFIC"]  # noqa: E501
        if vpc_connector_egress_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `vpc_connector_egress_settings` ({0}), must be one of {1}"
                .format(vpc_connector_egress_settings, allowed_values)
            )

        self._vpc_connector_egress_settings = vpc_connector_egress_settings
