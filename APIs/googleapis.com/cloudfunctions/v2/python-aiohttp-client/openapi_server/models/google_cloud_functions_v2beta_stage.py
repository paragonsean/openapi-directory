# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_functions_v2beta_state_message import GoogleCloudFunctionsV2betaStateMessage
from openapi_server import util


class GoogleCloudFunctionsV2betaStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name: str=None, resource: str=None, resource_uri: str=None, state: str=None, state_messages: List[GoogleCloudFunctionsV2betaStateMessage]=None):
        """GoogleCloudFunctionsV2betaStage - a model defined in OpenAPI

        :param message: The message of this GoogleCloudFunctionsV2betaStage.
        :param name: The name of this GoogleCloudFunctionsV2betaStage.
        :param resource: The resource of this GoogleCloudFunctionsV2betaStage.
        :param resource_uri: The resource_uri of this GoogleCloudFunctionsV2betaStage.
        :param state: The state of this GoogleCloudFunctionsV2betaStage.
        :param state_messages: The state_messages of this GoogleCloudFunctionsV2betaStage.
        """
        self.openapi_types = {
            'message': str,
            'name': str,
            'resource': str,
            'resource_uri': str,
            'state': str,
            'state_messages': List[GoogleCloudFunctionsV2betaStateMessage]
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'resource': 'resource',
            'resource_uri': 'resourceUri',
            'state': 'state',
            'state_messages': 'stateMessages'
        }

        self._message = message
        self._name = name
        self._resource = resource
        self._resource_uri = resource_uri
        self._state = state
        self._state_messages = state_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudFunctionsV2betaStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudFunctionsV2betaStage of this GoogleCloudFunctionsV2betaStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this GoogleCloudFunctionsV2betaStage.

        Message describing the Stage

        :return: The message of this GoogleCloudFunctionsV2betaStage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudFunctionsV2betaStage.

        Message describing the Stage

        :param message: The message of this GoogleCloudFunctionsV2betaStage.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this GoogleCloudFunctionsV2betaStage.

        Name of the Stage. This will be unique for each Stage.

        :return: The name of this GoogleCloudFunctionsV2betaStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudFunctionsV2betaStage.

        Name of the Stage. This will be unique for each Stage.

        :param name: The name of this GoogleCloudFunctionsV2betaStage.
        :type name: str
        """
        allowed_values = ["NAME_UNSPECIFIED", "ARTIFACT_REGISTRY", "BUILD", "SERVICE", "TRIGGER", "SERVICE_ROLLBACK", "TRIGGER_ROLLBACK"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def resource(self):
        """Gets the resource of this GoogleCloudFunctionsV2betaStage.

        Resource of the Stage

        :return: The resource of this GoogleCloudFunctionsV2betaStage.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GoogleCloudFunctionsV2betaStage.

        Resource of the Stage

        :param resource: The resource of this GoogleCloudFunctionsV2betaStage.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_uri(self):
        """Gets the resource_uri of this GoogleCloudFunctionsV2betaStage.

        Link to the current Stage resource

        :return: The resource_uri of this GoogleCloudFunctionsV2betaStage.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this GoogleCloudFunctionsV2betaStage.

        Link to the current Stage resource

        :param resource_uri: The resource_uri of this GoogleCloudFunctionsV2betaStage.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def state(self):
        """Gets the state of this GoogleCloudFunctionsV2betaStage.

        Current state of the Stage

        :return: The state of this GoogleCloudFunctionsV2betaStage.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudFunctionsV2betaStage.

        Current state of the Stage

        :param state: The state of this GoogleCloudFunctionsV2betaStage.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NOT_STARTED", "IN_PROGRESS", "COMPLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_messages(self):
        """Gets the state_messages of this GoogleCloudFunctionsV2betaStage.

        State messages from the current Stage.

        :return: The state_messages of this GoogleCloudFunctionsV2betaStage.
        :rtype: List[GoogleCloudFunctionsV2betaStateMessage]
        """
        return self._state_messages

    @state_messages.setter
    def state_messages(self, state_messages):
        """Sets the state_messages of this GoogleCloudFunctionsV2betaStage.

        State messages from the current Stage.

        :param state_messages: The state_messages of this GoogleCloudFunctionsV2betaStage.
        :type state_messages: List[GoogleCloudFunctionsV2betaStateMessage]
        """

        self._state_messages = state_messages
