/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing an Operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:52.976289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationMetadataV1 {
  public static final String SERIALIZED_NAME_BUILD_ID = "buildId";
  @SerializedName(SERIALIZED_NAME_BUILD_ID)
  private String buildId;

  public static final String SERIALIZED_NAME_BUILD_NAME = "buildName";
  @SerializedName(SERIALIZED_NAME_BUILD_NAME)
  private String buildName;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Map<String, Object> request = new HashMap<>();

  public static final String SERIALIZED_NAME_SOURCE_TOKEN = "sourceToken";
  @SerializedName(SERIALIZED_NAME_SOURCE_TOKEN)
  private String sourceToken;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  /**
   * Type of operation.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    OPERATION_UNSPECIFIED("OPERATION_UNSPECIFIED"),
    
    CREATE_FUNCTION("CREATE_FUNCTION"),
    
    UPDATE_FUNCTION("UPDATE_FUNCTION"),
    
    DELETE_FUNCTION("DELETE_FUNCTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public OperationMetadataV1() {
  }

  public OperationMetadataV1 buildId(String buildId) {
    this.buildId = buildId;
    return this;
  }

  /**
   * The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.
   * @return buildId
   */
  @javax.annotation.Nullable
  public String getBuildId() {
    return buildId;
  }

  public void setBuildId(String buildId) {
    this.buildId = buildId;
  }


  public OperationMetadataV1 buildName(String buildName) {
    this.buildName = buildName;
    return this;
  }

  /**
   * The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. &#x60;projects//locations//builds/&#x60;.
   * @return buildName
   */
  @javax.annotation.Nullable
  public String getBuildName() {
    return buildName;
  }

  public void setBuildName(String buildName) {
    this.buildName = buildName;
  }


  public OperationMetadataV1 request(Map<String, Object> request) {
    this.request = request;
    return this;
  }

  public OperationMetadataV1 putRequestItem(String key, Object requestItem) {
    if (this.request == null) {
      this.request = new HashMap<>();
    }
    this.request.put(key, requestItem);
    return this;
  }

  /**
   * The original request that started the operation.
   * @return request
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRequest() {
    return request;
  }

  public void setRequest(Map<String, Object> request) {
    this.request = request;
  }


  public OperationMetadataV1 sourceToken(String sourceToken) {
    this.sourceToken = sourceToken;
    return this;
  }

  /**
   * An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
   * @return sourceToken
   */
  @javax.annotation.Nullable
  public String getSourceToken() {
    return sourceToken;
  }

  public void setSourceToken(String sourceToken) {
    this.sourceToken = sourceToken;
  }


  public OperationMetadataV1 target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Target of the operation - for example &#x60;projects/project-1/locations/region-1/functions/function-1&#x60;
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public OperationMetadataV1 type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of operation.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public OperationMetadataV1 updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The last update timestamp of the operation.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public OperationMetadataV1 versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationMetadataV1 operationMetadataV1 = (OperationMetadataV1) o;
    return Objects.equals(this.buildId, operationMetadataV1.buildId) &&
        Objects.equals(this.buildName, operationMetadataV1.buildName) &&
        Objects.equals(this.request, operationMetadataV1.request) &&
        Objects.equals(this.sourceToken, operationMetadataV1.sourceToken) &&
        Objects.equals(this.target, operationMetadataV1.target) &&
        Objects.equals(this.type, operationMetadataV1.type) &&
        Objects.equals(this.updateTime, operationMetadataV1.updateTime) &&
        Objects.equals(this.versionId, operationMetadataV1.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildId, buildName, request, sourceToken, target, type, updateTime, versionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationMetadataV1 {\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    buildName: ").append(toIndentedString(buildName)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    sourceToken: ").append(toIndentedString(sourceToken)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildId");
    openapiFields.add("buildName");
    openapiFields.add("request");
    openapiFields.add("sourceToken");
    openapiFields.add("target");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("versionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationMetadataV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationMetadataV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationMetadataV1 is not found in the empty JSON string", OperationMetadataV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationMetadataV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationMetadataV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildId") != null && !jsonObj.get("buildId").isJsonNull()) && !jsonObj.get("buildId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildId").toString()));
      }
      if ((jsonObj.get("buildName") != null && !jsonObj.get("buildName").isJsonNull()) && !jsonObj.get("buildName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildName").toString()));
      }
      if ((jsonObj.get("sourceToken") != null && !jsonObj.get("sourceToken").isJsonNull()) && !jsonObj.get("sourceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceToken").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationMetadataV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationMetadataV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationMetadataV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationMetadataV1.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationMetadataV1>() {
           @Override
           public void write(JsonWriter out, OperationMetadataV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationMetadataV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationMetadataV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationMetadataV1
   * @throws IOException if the JSON string is invalid with respect to OperationMetadataV1
   */
  public static OperationMetadataV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationMetadataV1.class);
  }

  /**
   * Convert an instance of OperationMetadataV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

