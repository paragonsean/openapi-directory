/*
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildConfig;
import org.openapitools.client.model.EventTrigger;
import org.openapitools.client.model.ServiceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information related to: * A function&#39;s eligibility for 1st Gen to 2nd Gen migration * Current state of migration for function undergoing migration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:52.976289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeInfo {
  public static final String SERIALIZED_NAME_BUILD_CONFIG = "buildConfig";
  @SerializedName(SERIALIZED_NAME_BUILD_CONFIG)
  private BuildConfig buildConfig;

  public static final String SERIALIZED_NAME_EVENT_TRIGGER = "eventTrigger";
  @SerializedName(SERIALIZED_NAME_EVENT_TRIGGER)
  private EventTrigger eventTrigger;

  public static final String SERIALIZED_NAME_SERVICE_CONFIG = "serviceConfig";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG)
  private ServiceConfig serviceConfig;

  /**
   * UpgradeState of the function
   */
  @JsonAdapter(UpgradeStateEnum.Adapter.class)
  public enum UpgradeStateEnum {
    UPGRADE_STATE_UNSPECIFIED("UPGRADE_STATE_UNSPECIFIED"),
    
    ELIGIBLE_FOR_2_ND_GEN_UPGRADE("ELIGIBLE_FOR_2ND_GEN_UPGRADE"),
    
    UPGRADE_OPERATION_IN_PROGRESS("UPGRADE_OPERATION_IN_PROGRESS"),
    
    SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL("SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL"),
    
    SETUP_FUNCTION_UPGRADE_CONFIG_ERROR("SETUP_FUNCTION_UPGRADE_CONFIG_ERROR"),
    
    ABORT_FUNCTION_UPGRADE_ERROR("ABORT_FUNCTION_UPGRADE_ERROR"),
    
    REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL("REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL"),
    
    REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR("REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR"),
    
    ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR("ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR"),
    
    COMMIT_FUNCTION_UPGRADE_ERROR("COMMIT_FUNCTION_UPGRADE_ERROR");

    private String value;

    UpgradeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpgradeStateEnum fromValue(String value) {
      for (UpgradeStateEnum b : UpgradeStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpgradeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpgradeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpgradeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpgradeStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpgradeStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "upgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private UpgradeStateEnum upgradeState;

  public UpgradeInfo() {
  }

  public UpgradeInfo buildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
    return this;
  }

  /**
   * Get buildConfig
   * @return buildConfig
   */
  @javax.annotation.Nullable
  public BuildConfig getBuildConfig() {
    return buildConfig;
  }

  public void setBuildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
  }


  public UpgradeInfo eventTrigger(EventTrigger eventTrigger) {
    this.eventTrigger = eventTrigger;
    return this;
  }

  /**
   * Get eventTrigger
   * @return eventTrigger
   */
  @javax.annotation.Nullable
  public EventTrigger getEventTrigger() {
    return eventTrigger;
  }

  public void setEventTrigger(EventTrigger eventTrigger) {
    this.eventTrigger = eventTrigger;
  }


  public UpgradeInfo serviceConfig(ServiceConfig serviceConfig) {
    this.serviceConfig = serviceConfig;
    return this;
  }

  /**
   * Get serviceConfig
   * @return serviceConfig
   */
  @javax.annotation.Nullable
  public ServiceConfig getServiceConfig() {
    return serviceConfig;
  }

  public void setServiceConfig(ServiceConfig serviceConfig) {
    this.serviceConfig = serviceConfig;
  }


  public UpgradeInfo upgradeState(UpgradeStateEnum upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * UpgradeState of the function
   * @return upgradeState
   */
  @javax.annotation.Nullable
  public UpgradeStateEnum getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(UpgradeStateEnum upgradeState) {
    this.upgradeState = upgradeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeInfo upgradeInfo = (UpgradeInfo) o;
    return Objects.equals(this.buildConfig, upgradeInfo.buildConfig) &&
        Objects.equals(this.eventTrigger, upgradeInfo.eventTrigger) &&
        Objects.equals(this.serviceConfig, upgradeInfo.serviceConfig) &&
        Objects.equals(this.upgradeState, upgradeInfo.upgradeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildConfig, eventTrigger, serviceConfig, upgradeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeInfo {\n");
    sb.append("    buildConfig: ").append(toIndentedString(buildConfig)).append("\n");
    sb.append("    eventTrigger: ").append(toIndentedString(eventTrigger)).append("\n");
    sb.append("    serviceConfig: ").append(toIndentedString(serviceConfig)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildConfig");
    openapiFields.add("eventTrigger");
    openapiFields.add("serviceConfig");
    openapiFields.add("upgradeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeInfo is not found in the empty JSON string", UpgradeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buildConfig`
      if (jsonObj.get("buildConfig") != null && !jsonObj.get("buildConfig").isJsonNull()) {
        BuildConfig.validateJsonElement(jsonObj.get("buildConfig"));
      }
      // validate the optional field `eventTrigger`
      if (jsonObj.get("eventTrigger") != null && !jsonObj.get("eventTrigger").isJsonNull()) {
        EventTrigger.validateJsonElement(jsonObj.get("eventTrigger"));
      }
      // validate the optional field `serviceConfig`
      if (jsonObj.get("serviceConfig") != null && !jsonObj.get("serviceConfig").isJsonNull()) {
        ServiceConfig.validateJsonElement(jsonObj.get("serviceConfig"));
      }
      if ((jsonObj.get("upgradeState") != null && !jsonObj.get("upgradeState").isJsonNull()) && !jsonObj.get("upgradeState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeState").toString()));
      }
      // validate the optional field `upgradeState`
      if (jsonObj.get("upgradeState") != null && !jsonObj.get("upgradeState").isJsonNull()) {
        UpgradeStateEnum.validateJsonElement(jsonObj.get("upgradeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeInfo>() {
           @Override
           public void write(JsonWriter out, UpgradeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeInfo
   * @throws IOException if the JSON string is invalid with respect to UpgradeInfo
   */
  public static UpgradeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeInfo.class);
  }

  /**
   * Convert an instance of UpgradeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

