/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMetadataV1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMetadataV1::OAIOperationMetadataV1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMetadataV1::OAIOperationMetadataV1() {
    this->initializeModel();
}

OAIOperationMetadataV1::~OAIOperationMetadataV1() {}

void OAIOperationMetadataV1::initializeModel() {

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_name_isSet = false;
    m_build_name_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_source_token_isSet = false;
    m_source_token_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIOperationMetadataV1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationMetadataV1::fromJsonObject(QJsonObject json) {

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_build_name_isValid = ::OpenAPI::fromJsonValue(m_build_name, json[QString("buildName")]);
    m_build_name_isSet = !json[QString("buildName")].isNull() && m_build_name_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_source_token_isValid = ::OpenAPI::fromJsonValue(m_source_token, json[QString("sourceToken")]);
    m_source_token_isSet = !json[QString("sourceToken")].isNull() && m_source_token_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIOperationMetadataV1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationMetadataV1::asJsonObject() const {
    QJsonObject obj;
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_name_isSet) {
        obj.insert(QString("buildName"), ::OpenAPI::toJsonValue(m_build_name));
    }
    if (m_request.size() > 0) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_source_token_isSet) {
        obj.insert(QString("sourceToken"), ::OpenAPI::toJsonValue(m_source_token));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIOperationMetadataV1::getBuildId() const {
    return m_build_id;
}
void OAIOperationMetadataV1::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIOperationMetadataV1::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIOperationMetadataV1::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIOperationMetadataV1::getBuildName() const {
    return m_build_name;
}
void OAIOperationMetadataV1::setBuildName(const QString &build_name) {
    m_build_name = build_name;
    m_build_name_isSet = true;
}

bool OAIOperationMetadataV1::is_build_name_Set() const{
    return m_build_name_isSet;
}

bool OAIOperationMetadataV1::is_build_name_Valid() const{
    return m_build_name_isValid;
}

QMap<QString, QJsonValue> OAIOperationMetadataV1::getRequest() const {
    return m_request;
}
void OAIOperationMetadataV1::setRequest(const QMap<QString, QJsonValue> &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIOperationMetadataV1::is_request_Set() const{
    return m_request_isSet;
}

bool OAIOperationMetadataV1::is_request_Valid() const{
    return m_request_isValid;
}

QString OAIOperationMetadataV1::getSourceToken() const {
    return m_source_token;
}
void OAIOperationMetadataV1::setSourceToken(const QString &source_token) {
    m_source_token = source_token;
    m_source_token_isSet = true;
}

bool OAIOperationMetadataV1::is_source_token_Set() const{
    return m_source_token_isSet;
}

bool OAIOperationMetadataV1::is_source_token_Valid() const{
    return m_source_token_isValid;
}

QString OAIOperationMetadataV1::getTarget() const {
    return m_target;
}
void OAIOperationMetadataV1::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIOperationMetadataV1::is_target_Set() const{
    return m_target_isSet;
}

bool OAIOperationMetadataV1::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIOperationMetadataV1::getType() const {
    return m_type;
}
void OAIOperationMetadataV1::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOperationMetadataV1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOperationMetadataV1::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOperationMetadataV1::getUpdateTime() const {
    return m_update_time;
}
void OAIOperationMetadataV1::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOperationMetadataV1::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOperationMetadataV1::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIOperationMetadataV1::getVersionId() const {
    return m_version_id;
}
void OAIOperationMetadataV1::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIOperationMetadataV1::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIOperationMetadataV1::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIOperationMetadataV1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationMetadataV1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
