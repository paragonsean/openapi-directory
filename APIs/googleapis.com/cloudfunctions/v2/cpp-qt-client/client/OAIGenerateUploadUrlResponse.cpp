/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateUploadUrlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateUploadUrlResponse::OAIGenerateUploadUrlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateUploadUrlResponse::OAIGenerateUploadUrlResponse() {
    this->initializeModel();
}

OAIGenerateUploadUrlResponse::~OAIGenerateUploadUrlResponse() {}

void OAIGenerateUploadUrlResponse::initializeModel() {

    m_storage_source_isSet = false;
    m_storage_source_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;
}

void OAIGenerateUploadUrlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateUploadUrlResponse::fromJsonObject(QJsonObject json) {

    m_storage_source_isValid = ::OpenAPI::fromJsonValue(m_storage_source, json[QString("storageSource")]);
    m_storage_source_isSet = !json[QString("storageSource")].isNull() && m_storage_source_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("uploadUrl")]);
    m_upload_url_isSet = !json[QString("uploadUrl")].isNull() && m_upload_url_isValid;
}

QString OAIGenerateUploadUrlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateUploadUrlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_source.isSet()) {
        obj.insert(QString("storageSource"), ::OpenAPI::toJsonValue(m_storage_source));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("uploadUrl"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    return obj;
}

OAIStorageSource OAIGenerateUploadUrlResponse::getStorageSource() const {
    return m_storage_source;
}
void OAIGenerateUploadUrlResponse::setStorageSource(const OAIStorageSource &storage_source) {
    m_storage_source = storage_source;
    m_storage_source_isSet = true;
}

bool OAIGenerateUploadUrlResponse::is_storage_source_Set() const{
    return m_storage_source_isSet;
}

bool OAIGenerateUploadUrlResponse::is_storage_source_Valid() const{
    return m_storage_source_isValid;
}

QString OAIGenerateUploadUrlResponse::getUploadUrl() const {
    return m_upload_url;
}
void OAIGenerateUploadUrlResponse::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAIGenerateUploadUrlResponse::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAIGenerateUploadUrlResponse::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

bool OAIGenerateUploadUrlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateUploadUrlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
