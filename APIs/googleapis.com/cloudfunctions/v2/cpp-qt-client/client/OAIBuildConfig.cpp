/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildConfig::OAIBuildConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildConfig::OAIBuildConfig() {
    this->initializeModel();
}

OAIBuildConfig::~OAIBuildConfig() {}

void OAIBuildConfig::initializeModel() {

    m_automatic_update_policy_isSet = false;
    m_automatic_update_policy_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_docker_registry_isSet = false;
    m_docker_registry_isValid = false;

    m_docker_repository_isSet = false;
    m_docker_repository_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_on_deploy_update_policy_isSet = false;
    m_on_deploy_update_policy_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_provenance_isSet = false;
    m_source_provenance_isValid = false;

    m_source_token_isSet = false;
    m_source_token_isValid = false;

    m_worker_pool_isSet = false;
    m_worker_pool_isValid = false;
}

void OAIBuildConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildConfig::fromJsonObject(QJsonObject json) {

    m_automatic_update_policy_isValid = ::OpenAPI::fromJsonValue(m_automatic_update_policy, json[QString("automaticUpdatePolicy")]);
    m_automatic_update_policy_isSet = !json[QString("automaticUpdatePolicy")].isNull() && m_automatic_update_policy_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_docker_registry_isValid = ::OpenAPI::fromJsonValue(m_docker_registry, json[QString("dockerRegistry")]);
    m_docker_registry_isSet = !json[QString("dockerRegistry")].isNull() && m_docker_registry_isValid;

    m_docker_repository_isValid = ::OpenAPI::fromJsonValue(m_docker_repository, json[QString("dockerRepository")]);
    m_docker_repository_isSet = !json[QString("dockerRepository")].isNull() && m_docker_repository_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("entryPoint")]);
    m_entry_point_isSet = !json[QString("entryPoint")].isNull() && m_entry_point_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_on_deploy_update_policy_isValid = ::OpenAPI::fromJsonValue(m_on_deploy_update_policy, json[QString("onDeployUpdatePolicy")]);
    m_on_deploy_update_policy_isSet = !json[QString("onDeployUpdatePolicy")].isNull() && m_on_deploy_update_policy_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_provenance_isValid = ::OpenAPI::fromJsonValue(m_source_provenance, json[QString("sourceProvenance")]);
    m_source_provenance_isSet = !json[QString("sourceProvenance")].isNull() && m_source_provenance_isValid;

    m_source_token_isValid = ::OpenAPI::fromJsonValue(m_source_token, json[QString("sourceToken")]);
    m_source_token_isSet = !json[QString("sourceToken")].isNull() && m_source_token_isValid;

    m_worker_pool_isValid = ::OpenAPI::fromJsonValue(m_worker_pool, json[QString("workerPool")]);
    m_worker_pool_isSet = !json[QString("workerPool")].isNull() && m_worker_pool_isValid;
}

QString OAIBuildConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_update_policy_isSet) {
        obj.insert(QString("automaticUpdatePolicy"), ::OpenAPI::toJsonValue(m_automatic_update_policy));
    }
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_docker_registry_isSet) {
        obj.insert(QString("dockerRegistry"), ::OpenAPI::toJsonValue(m_docker_registry));
    }
    if (m_docker_repository_isSet) {
        obj.insert(QString("dockerRepository"), ::OpenAPI::toJsonValue(m_docker_repository));
    }
    if (m_entry_point_isSet) {
        obj.insert(QString("entryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_on_deploy_update_policy.isSet()) {
        obj.insert(QString("onDeployUpdatePolicy"), ::OpenAPI::toJsonValue(m_on_deploy_update_policy));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_provenance.isSet()) {
        obj.insert(QString("sourceProvenance"), ::OpenAPI::toJsonValue(m_source_provenance));
    }
    if (m_source_token_isSet) {
        obj.insert(QString("sourceToken"), ::OpenAPI::toJsonValue(m_source_token));
    }
    if (m_worker_pool_isSet) {
        obj.insert(QString("workerPool"), ::OpenAPI::toJsonValue(m_worker_pool));
    }
    return obj;
}

OAIObject OAIBuildConfig::getAutomaticUpdatePolicy() const {
    return m_automatic_update_policy;
}
void OAIBuildConfig::setAutomaticUpdatePolicy(const OAIObject &automatic_update_policy) {
    m_automatic_update_policy = automatic_update_policy;
    m_automatic_update_policy_isSet = true;
}

bool OAIBuildConfig::is_automatic_update_policy_Set() const{
    return m_automatic_update_policy_isSet;
}

bool OAIBuildConfig::is_automatic_update_policy_Valid() const{
    return m_automatic_update_policy_isValid;
}

QString OAIBuildConfig::getBuild() const {
    return m_build;
}
void OAIBuildConfig::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIBuildConfig::is_build_Set() const{
    return m_build_isSet;
}

bool OAIBuildConfig::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIBuildConfig::getDockerRegistry() const {
    return m_docker_registry;
}
void OAIBuildConfig::setDockerRegistry(const QString &docker_registry) {
    m_docker_registry = docker_registry;
    m_docker_registry_isSet = true;
}

bool OAIBuildConfig::is_docker_registry_Set() const{
    return m_docker_registry_isSet;
}

bool OAIBuildConfig::is_docker_registry_Valid() const{
    return m_docker_registry_isValid;
}

QString OAIBuildConfig::getDockerRepository() const {
    return m_docker_repository;
}
void OAIBuildConfig::setDockerRepository(const QString &docker_repository) {
    m_docker_repository = docker_repository;
    m_docker_repository_isSet = true;
}

bool OAIBuildConfig::is_docker_repository_Set() const{
    return m_docker_repository_isSet;
}

bool OAIBuildConfig::is_docker_repository_Valid() const{
    return m_docker_repository_isValid;
}

QString OAIBuildConfig::getEntryPoint() const {
    return m_entry_point;
}
void OAIBuildConfig::setEntryPoint(const QString &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAIBuildConfig::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAIBuildConfig::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QMap<QString, QString> OAIBuildConfig::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIBuildConfig::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIBuildConfig::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIBuildConfig::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

OAIOnDeployUpdatePolicy OAIBuildConfig::getOnDeployUpdatePolicy() const {
    return m_on_deploy_update_policy;
}
void OAIBuildConfig::setOnDeployUpdatePolicy(const OAIOnDeployUpdatePolicy &on_deploy_update_policy) {
    m_on_deploy_update_policy = on_deploy_update_policy;
    m_on_deploy_update_policy_isSet = true;
}

bool OAIBuildConfig::is_on_deploy_update_policy_Set() const{
    return m_on_deploy_update_policy_isSet;
}

bool OAIBuildConfig::is_on_deploy_update_policy_Valid() const{
    return m_on_deploy_update_policy_isValid;
}

QString OAIBuildConfig::getRuntime() const {
    return m_runtime;
}
void OAIBuildConfig::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIBuildConfig::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIBuildConfig::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAIBuildConfig::getServiceAccount() const {
    return m_service_account;
}
void OAIBuildConfig::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIBuildConfig::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIBuildConfig::is_service_account_Valid() const{
    return m_service_account_isValid;
}

OAISource OAIBuildConfig::getSource() const {
    return m_source;
}
void OAIBuildConfig::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIBuildConfig::is_source_Set() const{
    return m_source_isSet;
}

bool OAIBuildConfig::is_source_Valid() const{
    return m_source_isValid;
}

OAISourceProvenance OAIBuildConfig::getSourceProvenance() const {
    return m_source_provenance;
}
void OAIBuildConfig::setSourceProvenance(const OAISourceProvenance &source_provenance) {
    m_source_provenance = source_provenance;
    m_source_provenance_isSet = true;
}

bool OAIBuildConfig::is_source_provenance_Set() const{
    return m_source_provenance_isSet;
}

bool OAIBuildConfig::is_source_provenance_Valid() const{
    return m_source_provenance_isValid;
}

QString OAIBuildConfig::getSourceToken() const {
    return m_source_token;
}
void OAIBuildConfig::setSourceToken(const QString &source_token) {
    m_source_token = source_token;
    m_source_token_isSet = true;
}

bool OAIBuildConfig::is_source_token_Set() const{
    return m_source_token_isSet;
}

bool OAIBuildConfig::is_source_token_Valid() const{
    return m_source_token_isValid;
}

QString OAIBuildConfig::getWorkerPool() const {
    return m_worker_pool;
}
void OAIBuildConfig::setWorkerPool(const QString &worker_pool) {
    m_worker_pool = worker_pool;
    m_worker_pool_isSet = true;
}

bool OAIBuildConfig::is_worker_pool_Set() const{
    return m_worker_pool_isSet;
}

bool OAIBuildConfig::is_worker_pool_Valid() const{
    return m_worker_pool_isValid;
}

bool OAIBuildConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_update_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_deploy_update_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
