/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLogConfig::OAIAuditLogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLogConfig::OAIAuditLogConfig() {
    this->initializeModel();
}

OAIAuditLogConfig::~OAIAuditLogConfig() {}

void OAIAuditLogConfig::initializeModel() {

    m_exempted_members_isSet = false;
    m_exempted_members_isValid = false;

    m_log_type_isSet = false;
    m_log_type_isValid = false;
}

void OAIAuditLogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLogConfig::fromJsonObject(QJsonObject json) {

    m_exempted_members_isValid = ::OpenAPI::fromJsonValue(m_exempted_members, json[QString("exemptedMembers")]);
    m_exempted_members_isSet = !json[QString("exemptedMembers")].isNull() && m_exempted_members_isValid;

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("logType")]);
    m_log_type_isSet = !json[QString("logType")].isNull() && m_log_type_isValid;
}

QString OAIAuditLogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_exempted_members.size() > 0) {
        obj.insert(QString("exemptedMembers"), ::OpenAPI::toJsonValue(m_exempted_members));
    }
    if (m_log_type_isSet) {
        obj.insert(QString("logType"), ::OpenAPI::toJsonValue(m_log_type));
    }
    return obj;
}

QList<QString> OAIAuditLogConfig::getExemptedMembers() const {
    return m_exempted_members;
}
void OAIAuditLogConfig::setExemptedMembers(const QList<QString> &exempted_members) {
    m_exempted_members = exempted_members;
    m_exempted_members_isSet = true;
}

bool OAIAuditLogConfig::is_exempted_members_Set() const{
    return m_exempted_members_isSet;
}

bool OAIAuditLogConfig::is_exempted_members_Valid() const{
    return m_exempted_members_isValid;
}

QString OAIAuditLogConfig::getLogType() const {
    return m_log_type;
}
void OAIAuditLogConfig::setLogType(const QString &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAIAuditLogConfig::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAIAuditLogConfig::is_log_type_Valid() const{
    return m_log_type_isValid;
}

bool OAIAuditLogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exempted_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
