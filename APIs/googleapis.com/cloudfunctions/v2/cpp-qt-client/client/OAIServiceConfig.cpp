/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceConfig::OAIServiceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceConfig::OAIServiceConfig() {
    this->initializeModel();
}

OAIServiceConfig::~OAIServiceConfig() {}

void OAIServiceConfig::initializeModel() {

    m_all_traffic_on_latest_revision_isSet = false;
    m_all_traffic_on_latest_revision_isValid = false;

    m_available_cpu_isSet = false;
    m_available_cpu_isValid = false;

    m_available_memory_isSet = false;
    m_available_memory_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_ingress_settings_isSet = false;
    m_ingress_settings_isValid = false;

    m_max_instance_count_isSet = false;
    m_max_instance_count_isValid = false;

    m_max_instance_request_concurrency_isSet = false;
    m_max_instance_request_concurrency_isValid = false;

    m_min_instance_count_isSet = false;
    m_min_instance_count_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_secret_environment_variables_isSet = false;
    m_secret_environment_variables_isValid = false;

    m_secret_volumes_isSet = false;
    m_secret_volumes_isValid = false;

    m_security_level_isSet = false;
    m_security_level_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_vpc_connector_isSet = false;
    m_vpc_connector_isValid = false;

    m_vpc_connector_egress_settings_isSet = false;
    m_vpc_connector_egress_settings_isValid = false;
}

void OAIServiceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceConfig::fromJsonObject(QJsonObject json) {

    m_all_traffic_on_latest_revision_isValid = ::OpenAPI::fromJsonValue(m_all_traffic_on_latest_revision, json[QString("allTrafficOnLatestRevision")]);
    m_all_traffic_on_latest_revision_isSet = !json[QString("allTrafficOnLatestRevision")].isNull() && m_all_traffic_on_latest_revision_isValid;

    m_available_cpu_isValid = ::OpenAPI::fromJsonValue(m_available_cpu, json[QString("availableCpu")]);
    m_available_cpu_isSet = !json[QString("availableCpu")].isNull() && m_available_cpu_isValid;

    m_available_memory_isValid = ::OpenAPI::fromJsonValue(m_available_memory, json[QString("availableMemory")]);
    m_available_memory_isSet = !json[QString("availableMemory")].isNull() && m_available_memory_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_ingress_settings_isValid = ::OpenAPI::fromJsonValue(m_ingress_settings, json[QString("ingressSettings")]);
    m_ingress_settings_isSet = !json[QString("ingressSettings")].isNull() && m_ingress_settings_isValid;

    m_max_instance_count_isValid = ::OpenAPI::fromJsonValue(m_max_instance_count, json[QString("maxInstanceCount")]);
    m_max_instance_count_isSet = !json[QString("maxInstanceCount")].isNull() && m_max_instance_count_isValid;

    m_max_instance_request_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_instance_request_concurrency, json[QString("maxInstanceRequestConcurrency")]);
    m_max_instance_request_concurrency_isSet = !json[QString("maxInstanceRequestConcurrency")].isNull() && m_max_instance_request_concurrency_isValid;

    m_min_instance_count_isValid = ::OpenAPI::fromJsonValue(m_min_instance_count, json[QString("minInstanceCount")]);
    m_min_instance_count_isSet = !json[QString("minInstanceCount")].isNull() && m_min_instance_count_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_secret_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_secret_environment_variables, json[QString("secretEnvironmentVariables")]);
    m_secret_environment_variables_isSet = !json[QString("secretEnvironmentVariables")].isNull() && m_secret_environment_variables_isValid;

    m_secret_volumes_isValid = ::OpenAPI::fromJsonValue(m_secret_volumes, json[QString("secretVolumes")]);
    m_secret_volumes_isSet = !json[QString("secretVolumes")].isNull() && m_secret_volumes_isValid;

    m_security_level_isValid = ::OpenAPI::fromJsonValue(m_security_level, json[QString("securityLevel")]);
    m_security_level_isSet = !json[QString("securityLevel")].isNull() && m_security_level_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_vpc_connector_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector, json[QString("vpcConnector")]);
    m_vpc_connector_isSet = !json[QString("vpcConnector")].isNull() && m_vpc_connector_isValid;

    m_vpc_connector_egress_settings_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector_egress_settings, json[QString("vpcConnectorEgressSettings")]);
    m_vpc_connector_egress_settings_isSet = !json[QString("vpcConnectorEgressSettings")].isNull() && m_vpc_connector_egress_settings_isValid;
}

QString OAIServiceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_all_traffic_on_latest_revision_isSet) {
        obj.insert(QString("allTrafficOnLatestRevision"), ::OpenAPI::toJsonValue(m_all_traffic_on_latest_revision));
    }
    if (m_available_cpu_isSet) {
        obj.insert(QString("availableCpu"), ::OpenAPI::toJsonValue(m_available_cpu));
    }
    if (m_available_memory_isSet) {
        obj.insert(QString("availableMemory"), ::OpenAPI::toJsonValue(m_available_memory));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_ingress_settings_isSet) {
        obj.insert(QString("ingressSettings"), ::OpenAPI::toJsonValue(m_ingress_settings));
    }
    if (m_max_instance_count_isSet) {
        obj.insert(QString("maxInstanceCount"), ::OpenAPI::toJsonValue(m_max_instance_count));
    }
    if (m_max_instance_request_concurrency_isSet) {
        obj.insert(QString("maxInstanceRequestConcurrency"), ::OpenAPI::toJsonValue(m_max_instance_request_concurrency));
    }
    if (m_min_instance_count_isSet) {
        obj.insert(QString("minInstanceCount"), ::OpenAPI::toJsonValue(m_min_instance_count));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_secret_environment_variables.size() > 0) {
        obj.insert(QString("secretEnvironmentVariables"), ::OpenAPI::toJsonValue(m_secret_environment_variables));
    }
    if (m_secret_volumes.size() > 0) {
        obj.insert(QString("secretVolumes"), ::OpenAPI::toJsonValue(m_secret_volumes));
    }
    if (m_security_level_isSet) {
        obj.insert(QString("securityLevel"), ::OpenAPI::toJsonValue(m_security_level));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_vpc_connector_isSet) {
        obj.insert(QString("vpcConnector"), ::OpenAPI::toJsonValue(m_vpc_connector));
    }
    if (m_vpc_connector_egress_settings_isSet) {
        obj.insert(QString("vpcConnectorEgressSettings"), ::OpenAPI::toJsonValue(m_vpc_connector_egress_settings));
    }
    return obj;
}

bool OAIServiceConfig::isAllTrafficOnLatestRevision() const {
    return m_all_traffic_on_latest_revision;
}
void OAIServiceConfig::setAllTrafficOnLatestRevision(const bool &all_traffic_on_latest_revision) {
    m_all_traffic_on_latest_revision = all_traffic_on_latest_revision;
    m_all_traffic_on_latest_revision_isSet = true;
}

bool OAIServiceConfig::is_all_traffic_on_latest_revision_Set() const{
    return m_all_traffic_on_latest_revision_isSet;
}

bool OAIServiceConfig::is_all_traffic_on_latest_revision_Valid() const{
    return m_all_traffic_on_latest_revision_isValid;
}

QString OAIServiceConfig::getAvailableCpu() const {
    return m_available_cpu;
}
void OAIServiceConfig::setAvailableCpu(const QString &available_cpu) {
    m_available_cpu = available_cpu;
    m_available_cpu_isSet = true;
}

bool OAIServiceConfig::is_available_cpu_Set() const{
    return m_available_cpu_isSet;
}

bool OAIServiceConfig::is_available_cpu_Valid() const{
    return m_available_cpu_isValid;
}

QString OAIServiceConfig::getAvailableMemory() const {
    return m_available_memory;
}
void OAIServiceConfig::setAvailableMemory(const QString &available_memory) {
    m_available_memory = available_memory;
    m_available_memory_isSet = true;
}

bool OAIServiceConfig::is_available_memory_Set() const{
    return m_available_memory_isSet;
}

bool OAIServiceConfig::is_available_memory_Valid() const{
    return m_available_memory_isValid;
}

QMap<QString, QString> OAIServiceConfig::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIServiceConfig::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIServiceConfig::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIServiceConfig::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIServiceConfig::getIngressSettings() const {
    return m_ingress_settings;
}
void OAIServiceConfig::setIngressSettings(const QString &ingress_settings) {
    m_ingress_settings = ingress_settings;
    m_ingress_settings_isSet = true;
}

bool OAIServiceConfig::is_ingress_settings_Set() const{
    return m_ingress_settings_isSet;
}

bool OAIServiceConfig::is_ingress_settings_Valid() const{
    return m_ingress_settings_isValid;
}

qint32 OAIServiceConfig::getMaxInstanceCount() const {
    return m_max_instance_count;
}
void OAIServiceConfig::setMaxInstanceCount(const qint32 &max_instance_count) {
    m_max_instance_count = max_instance_count;
    m_max_instance_count_isSet = true;
}

bool OAIServiceConfig::is_max_instance_count_Set() const{
    return m_max_instance_count_isSet;
}

bool OAIServiceConfig::is_max_instance_count_Valid() const{
    return m_max_instance_count_isValid;
}

qint32 OAIServiceConfig::getMaxInstanceRequestConcurrency() const {
    return m_max_instance_request_concurrency;
}
void OAIServiceConfig::setMaxInstanceRequestConcurrency(const qint32 &max_instance_request_concurrency) {
    m_max_instance_request_concurrency = max_instance_request_concurrency;
    m_max_instance_request_concurrency_isSet = true;
}

bool OAIServiceConfig::is_max_instance_request_concurrency_Set() const{
    return m_max_instance_request_concurrency_isSet;
}

bool OAIServiceConfig::is_max_instance_request_concurrency_Valid() const{
    return m_max_instance_request_concurrency_isValid;
}

qint32 OAIServiceConfig::getMinInstanceCount() const {
    return m_min_instance_count;
}
void OAIServiceConfig::setMinInstanceCount(const qint32 &min_instance_count) {
    m_min_instance_count = min_instance_count;
    m_min_instance_count_isSet = true;
}

bool OAIServiceConfig::is_min_instance_count_Set() const{
    return m_min_instance_count_isSet;
}

bool OAIServiceConfig::is_min_instance_count_Valid() const{
    return m_min_instance_count_isValid;
}

QString OAIServiceConfig::getRevision() const {
    return m_revision;
}
void OAIServiceConfig::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIServiceConfig::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIServiceConfig::is_revision_Valid() const{
    return m_revision_isValid;
}

QList<OAISecretEnvVar> OAIServiceConfig::getSecretEnvironmentVariables() const {
    return m_secret_environment_variables;
}
void OAIServiceConfig::setSecretEnvironmentVariables(const QList<OAISecretEnvVar> &secret_environment_variables) {
    m_secret_environment_variables = secret_environment_variables;
    m_secret_environment_variables_isSet = true;
}

bool OAIServiceConfig::is_secret_environment_variables_Set() const{
    return m_secret_environment_variables_isSet;
}

bool OAIServiceConfig::is_secret_environment_variables_Valid() const{
    return m_secret_environment_variables_isValid;
}

QList<OAISecretVolume> OAIServiceConfig::getSecretVolumes() const {
    return m_secret_volumes;
}
void OAIServiceConfig::setSecretVolumes(const QList<OAISecretVolume> &secret_volumes) {
    m_secret_volumes = secret_volumes;
    m_secret_volumes_isSet = true;
}

bool OAIServiceConfig::is_secret_volumes_Set() const{
    return m_secret_volumes_isSet;
}

bool OAIServiceConfig::is_secret_volumes_Valid() const{
    return m_secret_volumes_isValid;
}

QString OAIServiceConfig::getSecurityLevel() const {
    return m_security_level;
}
void OAIServiceConfig::setSecurityLevel(const QString &security_level) {
    m_security_level = security_level;
    m_security_level_isSet = true;
}

bool OAIServiceConfig::is_security_level_Set() const{
    return m_security_level_isSet;
}

bool OAIServiceConfig::is_security_level_Valid() const{
    return m_security_level_isValid;
}

QString OAIServiceConfig::getService() const {
    return m_service;
}
void OAIServiceConfig::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIServiceConfig::is_service_Set() const{
    return m_service_isSet;
}

bool OAIServiceConfig::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIServiceConfig::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIServiceConfig::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIServiceConfig::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIServiceConfig::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

qint32 OAIServiceConfig::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAIServiceConfig::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAIServiceConfig::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAIServiceConfig::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

QString OAIServiceConfig::getUri() const {
    return m_uri;
}
void OAIServiceConfig::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIServiceConfig::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIServiceConfig::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIServiceConfig::getVpcConnector() const {
    return m_vpc_connector;
}
void OAIServiceConfig::setVpcConnector(const QString &vpc_connector) {
    m_vpc_connector = vpc_connector;
    m_vpc_connector_isSet = true;
}

bool OAIServiceConfig::is_vpc_connector_Set() const{
    return m_vpc_connector_isSet;
}

bool OAIServiceConfig::is_vpc_connector_Valid() const{
    return m_vpc_connector_isValid;
}

QString OAIServiceConfig::getVpcConnectorEgressSettings() const {
    return m_vpc_connector_egress_settings;
}
void OAIServiceConfig::setVpcConnectorEgressSettings(const QString &vpc_connector_egress_settings) {
    m_vpc_connector_egress_settings = vpc_connector_egress_settings;
    m_vpc_connector_egress_settings_isSet = true;
}

bool OAIServiceConfig::is_vpc_connector_egress_settings_Set() const{
    return m_vpc_connector_egress_settings_isSet;
}

bool OAIServiceConfig::is_vpc_connector_egress_settings_Valid() const{
    return m_vpc_connector_egress_settings_isValid;
}

bool OAIServiceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_traffic_on_latest_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_request_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector_egress_settings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
