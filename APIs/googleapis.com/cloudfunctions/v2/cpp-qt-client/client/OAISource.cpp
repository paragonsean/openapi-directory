/**
 * Cloud Functions API
 * Manages lightweight user-provided functions executed in response to events.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_git_uri_isSet = false;
    m_git_uri_isValid = false;

    m_repo_source_isSet = false;
    m_repo_source_isValid = false;

    m_storage_source_isSet = false;
    m_storage_source_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_git_uri_isValid = ::OpenAPI::fromJsonValue(m_git_uri, json[QString("gitUri")]);
    m_git_uri_isSet = !json[QString("gitUri")].isNull() && m_git_uri_isValid;

    m_repo_source_isValid = ::OpenAPI::fromJsonValue(m_repo_source, json[QString("repoSource")]);
    m_repo_source_isSet = !json[QString("repoSource")].isNull() && m_repo_source_isValid;

    m_storage_source_isValid = ::OpenAPI::fromJsonValue(m_storage_source, json[QString("storageSource")]);
    m_storage_source_isSet = !json[QString("storageSource")].isNull() && m_storage_source_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_git_uri_isSet) {
        obj.insert(QString("gitUri"), ::OpenAPI::toJsonValue(m_git_uri));
    }
    if (m_repo_source.isSet()) {
        obj.insert(QString("repoSource"), ::OpenAPI::toJsonValue(m_repo_source));
    }
    if (m_storage_source.isSet()) {
        obj.insert(QString("storageSource"), ::OpenAPI::toJsonValue(m_storage_source));
    }
    return obj;
}

QString OAISource::getGitUri() const {
    return m_git_uri;
}
void OAISource::setGitUri(const QString &git_uri) {
    m_git_uri = git_uri;
    m_git_uri_isSet = true;
}

bool OAISource::is_git_uri_Set() const{
    return m_git_uri_isSet;
}

bool OAISource::is_git_uri_Valid() const{
    return m_git_uri_isValid;
}

OAIRepoSource OAISource::getRepoSource() const {
    return m_repo_source;
}
void OAISource::setRepoSource(const OAIRepoSource &repo_source) {
    m_repo_source = repo_source;
    m_repo_source_isSet = true;
}

bool OAISource::is_repo_source_Set() const{
    return m_repo_source_isSet;
}

bool OAISource::is_repo_source_Valid() const{
    return m_repo_source_isValid;
}

OAIStorageSource OAISource::getStorageSource() const {
    return m_storage_source;
}
void OAISource::setStorageSource(const OAIStorageSource &storage_source) {
    m_storage_source = storage_source;
    m_storage_source_isSet = true;
}

bool OAISource::is_storage_source_Set() const{
    return m_storage_source_isSet;
}

bool OAISource::is_storage_source_Valid() const{
    return m_storage_source_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_git_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
