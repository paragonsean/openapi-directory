# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_checks_report_v1alpha_check_citation import GoogleChecksReportV1alphaCheckCitation
from openapi_server.models.google_checks_report_v1alpha_check_evidence import GoogleChecksReportV1alphaCheckEvidence
from openapi_server.models.google_checks_report_v1alpha_check_state_metadata import GoogleChecksReportV1alphaCheckStateMetadata
from openapi_server import util


class GoogleChecksReportV1alphaCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, citations: List[GoogleChecksReportV1alphaCheckCitation]=None, evidence: GoogleChecksReportV1alphaCheckEvidence=None, region_codes: List[str]=None, severity: str=None, state: str=None, state_metadata: GoogleChecksReportV1alphaCheckStateMetadata=None, type: str=None):
        """GoogleChecksReportV1alphaCheck - a model defined in OpenAPI

        :param citations: The citations of this GoogleChecksReportV1alphaCheck.
        :param evidence: The evidence of this GoogleChecksReportV1alphaCheck.
        :param region_codes: The region_codes of this GoogleChecksReportV1alphaCheck.
        :param severity: The severity of this GoogleChecksReportV1alphaCheck.
        :param state: The state of this GoogleChecksReportV1alphaCheck.
        :param state_metadata: The state_metadata of this GoogleChecksReportV1alphaCheck.
        :param type: The type of this GoogleChecksReportV1alphaCheck.
        """
        self.openapi_types = {
            'citations': List[GoogleChecksReportV1alphaCheckCitation],
            'evidence': GoogleChecksReportV1alphaCheckEvidence,
            'region_codes': List[str],
            'severity': str,
            'state': str,
            'state_metadata': GoogleChecksReportV1alphaCheckStateMetadata,
            'type': str
        }

        self.attribute_map = {
            'citations': 'citations',
            'evidence': 'evidence',
            'region_codes': 'regionCodes',
            'severity': 'severity',
            'state': 'state',
            'state_metadata': 'stateMetadata',
            'type': 'type'
        }

        self._citations = citations
        self._evidence = evidence
        self._region_codes = region_codes
        self._severity = severity
        self._state = state
        self._state_metadata = state_metadata
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChecksReportV1alphaCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChecksReportV1alphaCheck of this GoogleChecksReportV1alphaCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def citations(self):
        """Gets the citations of this GoogleChecksReportV1alphaCheck.

        Regulations and policies that serve as the legal basis for the check.

        :return: The citations of this GoogleChecksReportV1alphaCheck.
        :rtype: List[GoogleChecksReportV1alphaCheckCitation]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this GoogleChecksReportV1alphaCheck.

        Regulations and policies that serve as the legal basis for the check.

        :param citations: The citations of this GoogleChecksReportV1alphaCheck.
        :type citations: List[GoogleChecksReportV1alphaCheckCitation]
        """

        self._citations = citations

    @property
    def evidence(self):
        """Gets the evidence of this GoogleChecksReportV1alphaCheck.


        :return: The evidence of this GoogleChecksReportV1alphaCheck.
        :rtype: GoogleChecksReportV1alphaCheckEvidence
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this GoogleChecksReportV1alphaCheck.


        :param evidence: The evidence of this GoogleChecksReportV1alphaCheck.
        :type evidence: GoogleChecksReportV1alphaCheckEvidence
        """

        self._evidence = evidence

    @property
    def region_codes(self):
        """Gets the region_codes of this GoogleChecksReportV1alphaCheck.

        Regions that are impacted by the check. For more info, see https://google.aip.dev/143#countries-and-regions.

        :return: The region_codes of this GoogleChecksReportV1alphaCheck.
        :rtype: List[str]
        """
        return self._region_codes

    @region_codes.setter
    def region_codes(self, region_codes):
        """Sets the region_codes of this GoogleChecksReportV1alphaCheck.

        Regions that are impacted by the check. For more info, see https://google.aip.dev/143#countries-and-regions.

        :param region_codes: The region_codes of this GoogleChecksReportV1alphaCheck.
        :type region_codes: List[str]
        """

        self._region_codes = region_codes

    @property
    def severity(self):
        """Gets the severity of this GoogleChecksReportV1alphaCheck.

        The urgency or risk level of the check.

        :return: The severity of this GoogleChecksReportV1alphaCheck.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GoogleChecksReportV1alphaCheck.

        The urgency or risk level of the check.

        :param severity: The severity of this GoogleChecksReportV1alphaCheck.
        :type severity: str
        """
        allowed_values = ["CHECK_SEVERITY_UNSPECIFIED", "PRIORITY", "POTENTIAL", "OPPORTUNITY"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def state(self):
        """Gets the state of this GoogleChecksReportV1alphaCheck.

        The result after running the check.

        :return: The state of this GoogleChecksReportV1alphaCheck.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleChecksReportV1alphaCheck.

        The result after running the check.

        :param state: The state of this GoogleChecksReportV1alphaCheck.
        :type state: str
        """
        allowed_values = ["CHECK_STATE_UNSPECIFIED", "PASSED", "FAILED", "UNCHECKED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_metadata(self):
        """Gets the state_metadata of this GoogleChecksReportV1alphaCheck.


        :return: The state_metadata of this GoogleChecksReportV1alphaCheck.
        :rtype: GoogleChecksReportV1alphaCheckStateMetadata
        """
        return self._state_metadata

    @state_metadata.setter
    def state_metadata(self, state_metadata):
        """Sets the state_metadata of this GoogleChecksReportV1alphaCheck.


        :param state_metadata: The state_metadata of this GoogleChecksReportV1alphaCheck.
        :type state_metadata: GoogleChecksReportV1alphaCheckStateMetadata
        """

        self._state_metadata = state_metadata

    @property
    def type(self):
        """Gets the type of this GoogleChecksReportV1alphaCheck.

        The type of check that was run. A type will only appear once in a report's list of checks.

        :return: The type of this GoogleChecksReportV1alphaCheck.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleChecksReportV1alphaCheck.

        The type of check that was run. A type will only appear once in a report's list of checks.

        :param type: The type of this GoogleChecksReportV1alphaCheck.
        :type type: str
        """
        allowed_values = ["CHECK_TYPE_UNSPECIFIED", "STORE_LISTING_PRIVACY_POLICY_LINK_PRESENT", "PRIVACY_POLICY_UPDATE_DATE_RECENT", "PRIVACY_POLICY_GDPR_GENERAL_RULES", "PRIVACY_POLICY_CCPA_GENERAL_RULES", "PRIVACY_POLICY_COLLECTION_CATEGORIES_DATA_NOTICE", "PRIVACY_POLICY_PROCESSING_PURPOSE_DATA_NOTICE", "PRIVACY_POLICY_SHARING_CATEGORIES_DATA_NOTICE", "PRIVACY_POLICY_DATA_RETENTION_NOTICE", "PRIVACY_POLICY_CONTACT_DETAILS_NOTICE", "PRIVACY_POLICY_CHILDREN_GENERAL_RULES", "PRIVACY_POLICY_DATA_TYPE_PHONE_NUMBER", "PRIVACY_POLICY_DATA_TYPE_USER_ACCOUNT_INFO", "PRIVACY_POLICY_DATA_TYPE_PRECISE_LOCATION", "PRIVACY_POLICY_DATA_TYPE_DEVICE_ID", "PRIVACY_POLICY_DATA_TYPE_APPS_ON_DEVICE", "PRIVACY_POLICY_DATA_TYPE_CONTACTS", "PRIVACY_POLICY_DATA_TYPE_TEXT_MESSAGES", "PRIVACY_POLICY_DATA_TYPE_PII", "PRIVACY_POLICY_DATA_TYPE_PII_CATEGORIES", "PRIVACY_POLICY_DATA_TYPE_HEALTH_AND_BIOMETRIC", "PRIVACY_POLICY_BRAZIL_LGPD_GENERAL_RULES", "PRIVACY_POLICY_VIRGINIA_VCDPA_GENERAL_RULES", "PRIVACY_POLICY_AFFILIATION_MENTION", "PRIVACY_POLICY_RIGHT_TO_DELETE_NOTICE", "PRIVACY_POLICY_RIGHT_TO_ACCESS_NOTICE", "PRIVACY_POLICY_RIGHT_TO_RECTIFICATION_NOTICE", "PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SELLING_NOTICE", "PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SHARING_NOTICE", "PRIVACY_POLICY_RIGHT_TO_OPT_OUT_FROM_SELLING_NOTICE", "PRIVACY_POLICY_METHOD_TO_OPT_OUT_FROM_SELLING_OR_SHARING_NOTICE", "PRIVACY_POLICY_DATA_CONTROLLER_IDENTITY", "PRIVACY_POLICY_DPO_CONTACT_DETAILS", "PRIVACY_POLICY_RIGHT_TO_LODGE_A_COMPLAINT", "PRIVACY_POLICY_LEGAL_BASIS", "PRIVACY_POLICY_CHILDREN_INFO_COLLECTION", "PRIVACY_POLICY_CHILDREN_INFO_USAGE_PURPOSES", "PRIVACY_POLICY_CHILDREN_INFO_DISCLOSURE_PRACTICES", "PRIVACY_POLICY_CHILDREN_INFO_PUBLICITY", "PRIVACY_POLICY_PARENTS_METHOD_OF_INFO_DELETION", "PRIVACY_POLICY_PARENTS_METHOD_TO_INFO_REVIEW", "PRIVACY_POLICY_PARENTS_METHOD_TO_STOP_FURTHER_INFO_COLLECTION_USE", "PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_DELETION", "PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_REVIEW", "PRIVACY_POLICY_PARENTS_RIGHT_TO_STOP_FURTHER_INFO_COLLECTION_USE", "PRIVACY_POLICY_PSL_APPROXIMATE_LOCATION", "PRIVACY_POLICY_PSL_PRECISE_LOCATION", "PRIVACY_POLICY_PSL_NAME", "PRIVACY_POLICY_PSL_EMAIL_ADDRESS", "PRIVACY_POLICY_PSL_USER_IDENTIFIERS", "PRIVACY_POLICY_PSL_ADDRESS", "PRIVACY_POLICY_PSL_PHONE_NUMBER", "PRIVACY_POLICY_PSL_RACE_AND_ETHNICITY", "PRIVACY_POLICY_PSL_CREDIT_SCORE", "PRIVACY_POLICY_PSL_PURCHASE_HISTORY", "PRIVACY_POLICY_PSL_HEALTH_INFO", "PRIVACY_POLICY_PSL_FITNESS_INFO", "PRIVACY_POLICY_PSL_EMAIL_MESSAGES", "PRIVACY_POLICY_PSL_TEXT_MESSAGES", "PRIVACY_POLICY_PSL_PHOTOS", "PRIVACY_POLICY_PSL_VIDEOS", "PRIVACY_POLICY_PSL_MUSIC_FILES", "PRIVACY_POLICY_PSL_VOICE_OR_SOUND_RECORDINGS", "PRIVACY_POLICY_PSL_FILES_AND_DOCS", "PRIVACY_POLICY_PSL_CALENDAR_EVENTS", "PRIVACY_POLICY_PSL_CONTACTS", "PRIVACY_POLICY_PSL_APP_INTERACTIONS", "PRIVACY_POLICY_PSL_IN_APP_SEARCH_HISTORY", "PRIVACY_POLICY_PSL_WEB_BROWSING_HISTORY", "PRIVACY_POLICY_PSL_INSTALLED_APPS", "PRIVACY_POLICY_PSL_CRASH_LOGS", "PRIVACY_POLICY_PSL_DIAGNOSTICS", "PRIVACY_POLICY_PSL_DEVICE_OR_OTHER_IDS", "DATA_MONITORING_NEW_ENDPOINT", "DATA_MONITORING_NEW_PERMISSION", "DATA_MONITORING_NEW_DATA_TYPE", "DATA_MONITORING_NEW_SDK", "DATA_MONITORING_ENCRYPTION", "DATA_MONITORING_NEW_DATA_TYPE_VERSION_DIFF", "DATA_MONITORING_NEW_ENDPOINT_VERSION_DIFF", "DATA_MONITORING_NEW_PERMISSION_VERSION_DIFF", "DATA_MONITORING_NEW_SDK_VERSION_DIFF", "DATA_MONITORING_SDKS_DENYLIST_VIOLATION", "DATA_MONITORING_PERMISSIONS_DENYLIST_VIOLATION", "DATA_MONITORING_ENDPOINTS_DENYLIST_VIOLATION", "DATA_MONITORING_OUTDATED_SDK_VERSION", "DATA_MONITORING_CRITICAL_SDK_ISSUE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
