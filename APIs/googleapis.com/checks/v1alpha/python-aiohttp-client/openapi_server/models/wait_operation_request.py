# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaitOperationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timeout: str=None):
        """WaitOperationRequest - a model defined in OpenAPI

        :param timeout: The timeout of this WaitOperationRequest.
        """
        self.openapi_types = {
            'timeout': str
        }

        self.attribute_map = {
            'timeout': 'timeout'
        }

        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaitOperationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaitOperationRequest of this WaitOperationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timeout(self):
        """Gets the timeout of this WaitOperationRequest.

        The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.

        :return: The timeout of this WaitOperationRequest.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this WaitOperationRequest.

        The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.

        :param timeout: The timeout of this WaitOperationRequest.
        :type timeout: str
        """

        self._timeout = timeout
