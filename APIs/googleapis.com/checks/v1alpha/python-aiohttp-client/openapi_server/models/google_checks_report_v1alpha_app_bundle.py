# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChecksReportV1alphaAppBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_id: str=None, code_reference_id: str=None, release_type: str=None, version: str=None, version_id: str=None):
        """GoogleChecksReportV1alphaAppBundle - a model defined in OpenAPI

        :param bundle_id: The bundle_id of this GoogleChecksReportV1alphaAppBundle.
        :param code_reference_id: The code_reference_id of this GoogleChecksReportV1alphaAppBundle.
        :param release_type: The release_type of this GoogleChecksReportV1alphaAppBundle.
        :param version: The version of this GoogleChecksReportV1alphaAppBundle.
        :param version_id: The version_id of this GoogleChecksReportV1alphaAppBundle.
        """
        self.openapi_types = {
            'bundle_id': str,
            'code_reference_id': str,
            'release_type': str,
            'version': str,
            'version_id': str
        }

        self.attribute_map = {
            'bundle_id': 'bundleId',
            'code_reference_id': 'codeReferenceId',
            'release_type': 'releaseType',
            'version': 'version',
            'version_id': 'versionId'
        }

        self._bundle_id = bundle_id
        self._code_reference_id = code_reference_id
        self._release_type = release_type
        self._version = version
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChecksReportV1alphaAppBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChecksReportV1alphaAppBundle of this GoogleChecksReportV1alphaAppBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_id(self):
        """Gets the bundle_id of this GoogleChecksReportV1alphaAppBundle.

        Unique id of the bundle. For example: \"com.google.Gmail\".

        :return: The bundle_id of this GoogleChecksReportV1alphaAppBundle.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this GoogleChecksReportV1alphaAppBundle.

        Unique id of the bundle. For example: \"com.google.Gmail\".

        :param bundle_id: The bundle_id of this GoogleChecksReportV1alphaAppBundle.
        :type bundle_id: str
        """

        self._bundle_id = bundle_id

    @property
    def code_reference_id(self):
        """Gets the code_reference_id of this GoogleChecksReportV1alphaAppBundle.

        Git commit hash or changelist number associated with the release.

        :return: The code_reference_id of this GoogleChecksReportV1alphaAppBundle.
        :rtype: str
        """
        return self._code_reference_id

    @code_reference_id.setter
    def code_reference_id(self, code_reference_id):
        """Sets the code_reference_id of this GoogleChecksReportV1alphaAppBundle.

        Git commit hash or changelist number associated with the release.

        :param code_reference_id: The code_reference_id of this GoogleChecksReportV1alphaAppBundle.
        :type code_reference_id: str
        """

        self._code_reference_id = code_reference_id

    @property
    def release_type(self):
        """Gets the release_type of this GoogleChecksReportV1alphaAppBundle.

        Identifies the type of release.

        :return: The release_type of this GoogleChecksReportV1alphaAppBundle.
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this GoogleChecksReportV1alphaAppBundle.

        Identifies the type of release.

        :param release_type: The release_type of this GoogleChecksReportV1alphaAppBundle.
        :type release_type: str
        """
        allowed_values = ["APP_BUNDLE_RELEASE_TYPE_UNSPECIFIED", "PUBLIC", "PRE_RELEASE"]  # noqa: E501
        if release_type not in allowed_values:
            raise ValueError(
                "Invalid value for `release_type` ({0}), must be one of {1}"
                .format(release_type, allowed_values)
            )

        self._release_type = release_type

    @property
    def version(self):
        """Gets the version of this GoogleChecksReportV1alphaAppBundle.

        The user-visible version of the bundle such as the Android `versionName` or iOS `CFBundleShortVersionString`. For example: \"7.21.1\".

        :return: The version of this GoogleChecksReportV1alphaAppBundle.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GoogleChecksReportV1alphaAppBundle.

        The user-visible version of the bundle such as the Android `versionName` or iOS `CFBundleShortVersionString`. For example: \"7.21.1\".

        :param version: The version of this GoogleChecksReportV1alphaAppBundle.
        :type version: str
        """

        self._version = version

    @property
    def version_id(self):
        """Gets the version_id of this GoogleChecksReportV1alphaAppBundle.

        The version used throughout the operating system and store to identify the build such as the Android `versionCode` or iOS `CFBundleVersion`.

        :return: The version_id of this GoogleChecksReportV1alphaAppBundle.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GoogleChecksReportV1alphaAppBundle.

        The version used throughout the operating system and store to identify the build such as the Android `versionCode` or iOS `CFBundleVersion`.

        :param version_id: The version_id of this GoogleChecksReportV1alphaAppBundle.
        :type version_id: str
        """

        self._version_id = version_id
