/**
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChecksReportV1alphaPolicyFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChecksReportV1alphaPolicyFragment::OAIGoogleChecksReportV1alphaPolicyFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChecksReportV1alphaPolicyFragment::OAIGoogleChecksReportV1alphaPolicyFragment() {
    this->initializeModel();
}

OAIGoogleChecksReportV1alphaPolicyFragment::~OAIGoogleChecksReportV1alphaPolicyFragment() {}

void OAIGoogleChecksReportV1alphaPolicyFragment::initializeModel() {

    m_html_content_isSet = false;
    m_html_content_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;
}

void OAIGoogleChecksReportV1alphaPolicyFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChecksReportV1alphaPolicyFragment::fromJsonObject(QJsonObject json) {

    m_html_content_isValid = ::OpenAPI::fromJsonValue(m_html_content, json[QString("htmlContent")]);
    m_html_content_isSet = !json[QString("htmlContent")].isNull() && m_html_content_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;
}

QString OAIGoogleChecksReportV1alphaPolicyFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChecksReportV1alphaPolicyFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_html_content_isSet) {
        obj.insert(QString("htmlContent"), ::OpenAPI::toJsonValue(m_html_content));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    return obj;
}

QString OAIGoogleChecksReportV1alphaPolicyFragment::getHtmlContent() const {
    return m_html_content;
}
void OAIGoogleChecksReportV1alphaPolicyFragment::setHtmlContent(const QString &html_content) {
    m_html_content = html_content;
    m_html_content_isSet = true;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::is_html_content_Set() const{
    return m_html_content_isSet;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::is_html_content_Valid() const{
    return m_html_content_isValid;
}

QString OAIGoogleChecksReportV1alphaPolicyFragment::getSourceUri() const {
    return m_source_uri;
}
void OAIGoogleChecksReportV1alphaPolicyFragment::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChecksReportV1alphaPolicyFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
