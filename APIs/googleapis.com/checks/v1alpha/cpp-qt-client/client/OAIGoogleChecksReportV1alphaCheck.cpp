/**
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChecksReportV1alphaCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChecksReportV1alphaCheck::OAIGoogleChecksReportV1alphaCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChecksReportV1alphaCheck::OAIGoogleChecksReportV1alphaCheck() {
    this->initializeModel();
}

OAIGoogleChecksReportV1alphaCheck::~OAIGoogleChecksReportV1alphaCheck() {}

void OAIGoogleChecksReportV1alphaCheck::initializeModel() {

    m_citations_isSet = false;
    m_citations_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_region_codes_isSet = false;
    m_region_codes_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_metadata_isSet = false;
    m_state_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleChecksReportV1alphaCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChecksReportV1alphaCheck::fromJsonObject(QJsonObject json) {

    m_citations_isValid = ::OpenAPI::fromJsonValue(m_citations, json[QString("citations")]);
    m_citations_isSet = !json[QString("citations")].isNull() && m_citations_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_region_codes_isValid = ::OpenAPI::fromJsonValue(m_region_codes, json[QString("regionCodes")]);
    m_region_codes_isSet = !json[QString("regionCodes")].isNull() && m_region_codes_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_metadata_isValid = ::OpenAPI::fromJsonValue(m_state_metadata, json[QString("stateMetadata")]);
    m_state_metadata_isSet = !json[QString("stateMetadata")].isNull() && m_state_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleChecksReportV1alphaCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChecksReportV1alphaCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_citations.size() > 0) {
        obj.insert(QString("citations"), ::OpenAPI::toJsonValue(m_citations));
    }
    if (m_evidence.isSet()) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_region_codes.size() > 0) {
        obj.insert(QString("regionCodes"), ::OpenAPI::toJsonValue(m_region_codes));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_metadata.isSet()) {
        obj.insert(QString("stateMetadata"), ::OpenAPI::toJsonValue(m_state_metadata));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIGoogleChecksReportV1alphaCheckCitation> OAIGoogleChecksReportV1alphaCheck::getCitations() const {
    return m_citations;
}
void OAIGoogleChecksReportV1alphaCheck::setCitations(const QList<OAIGoogleChecksReportV1alphaCheckCitation> &citations) {
    m_citations = citations;
    m_citations_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_citations_Set() const{
    return m_citations_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_citations_Valid() const{
    return m_citations_isValid;
}

OAIGoogleChecksReportV1alphaCheckEvidence OAIGoogleChecksReportV1alphaCheck::getEvidence() const {
    return m_evidence;
}
void OAIGoogleChecksReportV1alphaCheck::setEvidence(const OAIGoogleChecksReportV1alphaCheckEvidence &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QList<QString> OAIGoogleChecksReportV1alphaCheck::getRegionCodes() const {
    return m_region_codes;
}
void OAIGoogleChecksReportV1alphaCheck::setRegionCodes(const QList<QString> &region_codes) {
    m_region_codes = region_codes;
    m_region_codes_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_region_codes_Set() const{
    return m_region_codes_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_region_codes_Valid() const{
    return m_region_codes_isValid;
}

QString OAIGoogleChecksReportV1alphaCheck::getSeverity() const {
    return m_severity;
}
void OAIGoogleChecksReportV1alphaCheck::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIGoogleChecksReportV1alphaCheck::getState() const {
    return m_state;
}
void OAIGoogleChecksReportV1alphaCheck::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleChecksReportV1alphaCheckStateMetadata OAIGoogleChecksReportV1alphaCheck::getStateMetadata() const {
    return m_state_metadata;
}
void OAIGoogleChecksReportV1alphaCheck::setStateMetadata(const OAIGoogleChecksReportV1alphaCheckStateMetadata &state_metadata) {
    m_state_metadata = state_metadata;
    m_state_metadata_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_state_metadata_Set() const{
    return m_state_metadata_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_state_metadata_Valid() const{
    return m_state_metadata_isValid;
}

QString OAIGoogleChecksReportV1alphaCheck::getType() const {
    return m_type;
}
void OAIGoogleChecksReportV1alphaCheck::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleChecksReportV1alphaCheck::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleChecksReportV1alphaCheck::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleChecksReportV1alphaCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChecksReportV1alphaCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
