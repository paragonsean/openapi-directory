/*
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChecksReportV1alphaCheckCitation;
import org.openapitools.client.model.GoogleChecksReportV1alphaCheckEvidence;
import org.openapitools.client.model.GoogleChecksReportV1alphaCheckStateMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A check that was run on your app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:21.291746-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChecksReportV1alphaCheck {
  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<GoogleChecksReportV1alphaCheckCitation> citations = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private GoogleChecksReportV1alphaCheckEvidence evidence;

  public static final String SERIALIZED_NAME_REGION_CODES = "regionCodes";
  @SerializedName(SERIALIZED_NAME_REGION_CODES)
  private List<String> regionCodes = new ArrayList<>();

  /**
   * The urgency or risk level of the check.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    CHECK_SEVERITY_UNSPECIFIED("CHECK_SEVERITY_UNSPECIFIED"),
    
    PRIORITY("PRIORITY"),
    
    POTENTIAL("POTENTIAL"),
    
    OPPORTUNITY("OPPORTUNITY");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * The result after running the check.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CHECK_STATE_UNSPECIFIED("CHECK_STATE_UNSPECIFIED"),
    
    PASSED("PASSED"),
    
    FAILED("FAILED"),
    
    UNCHECKED("UNCHECKED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_METADATA = "stateMetadata";
  @SerializedName(SERIALIZED_NAME_STATE_METADATA)
  private GoogleChecksReportV1alphaCheckStateMetadata stateMetadata;

  /**
   * The type of check that was run. A type will only appear once in a report&#39;s list of checks.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHECK_TYPE_UNSPECIFIED("CHECK_TYPE_UNSPECIFIED"),
    
    STORE_LISTING_PRIVACY_POLICY_LINK_PRESENT("STORE_LISTING_PRIVACY_POLICY_LINK_PRESENT"),
    
    PRIVACY_POLICY_UPDATE_DATE_RECENT("PRIVACY_POLICY_UPDATE_DATE_RECENT"),
    
    PRIVACY_POLICY_GDPR_GENERAL_RULES("PRIVACY_POLICY_GDPR_GENERAL_RULES"),
    
    PRIVACY_POLICY_CCPA_GENERAL_RULES("PRIVACY_POLICY_CCPA_GENERAL_RULES"),
    
    PRIVACY_POLICY_COLLECTION_CATEGORIES_DATA_NOTICE("PRIVACY_POLICY_COLLECTION_CATEGORIES_DATA_NOTICE"),
    
    PRIVACY_POLICY_PROCESSING_PURPOSE_DATA_NOTICE("PRIVACY_POLICY_PROCESSING_PURPOSE_DATA_NOTICE"),
    
    PRIVACY_POLICY_SHARING_CATEGORIES_DATA_NOTICE("PRIVACY_POLICY_SHARING_CATEGORIES_DATA_NOTICE"),
    
    PRIVACY_POLICY_DATA_RETENTION_NOTICE("PRIVACY_POLICY_DATA_RETENTION_NOTICE"),
    
    PRIVACY_POLICY_CONTACT_DETAILS_NOTICE("PRIVACY_POLICY_CONTACT_DETAILS_NOTICE"),
    
    PRIVACY_POLICY_CHILDREN_GENERAL_RULES("PRIVACY_POLICY_CHILDREN_GENERAL_RULES"),
    
    PRIVACY_POLICY_DATA_TYPE_PHONE_NUMBER("PRIVACY_POLICY_DATA_TYPE_PHONE_NUMBER"),
    
    PRIVACY_POLICY_DATA_TYPE_USER_ACCOUNT_INFO("PRIVACY_POLICY_DATA_TYPE_USER_ACCOUNT_INFO"),
    
    PRIVACY_POLICY_DATA_TYPE_PRECISE_LOCATION("PRIVACY_POLICY_DATA_TYPE_PRECISE_LOCATION"),
    
    PRIVACY_POLICY_DATA_TYPE_DEVICE_ID("PRIVACY_POLICY_DATA_TYPE_DEVICE_ID"),
    
    PRIVACY_POLICY_DATA_TYPE_APPS_ON_DEVICE("PRIVACY_POLICY_DATA_TYPE_APPS_ON_DEVICE"),
    
    PRIVACY_POLICY_DATA_TYPE_CONTACTS("PRIVACY_POLICY_DATA_TYPE_CONTACTS"),
    
    PRIVACY_POLICY_DATA_TYPE_TEXT_MESSAGES("PRIVACY_POLICY_DATA_TYPE_TEXT_MESSAGES"),
    
    PRIVACY_POLICY_DATA_TYPE_PII("PRIVACY_POLICY_DATA_TYPE_PII"),
    
    PRIVACY_POLICY_DATA_TYPE_PII_CATEGORIES("PRIVACY_POLICY_DATA_TYPE_PII_CATEGORIES"),
    
    PRIVACY_POLICY_DATA_TYPE_HEALTH_AND_BIOMETRIC("PRIVACY_POLICY_DATA_TYPE_HEALTH_AND_BIOMETRIC"),
    
    PRIVACY_POLICY_BRAZIL_LGPD_GENERAL_RULES("PRIVACY_POLICY_BRAZIL_LGPD_GENERAL_RULES"),
    
    PRIVACY_POLICY_VIRGINIA_VCDPA_GENERAL_RULES("PRIVACY_POLICY_VIRGINIA_VCDPA_GENERAL_RULES"),
    
    PRIVACY_POLICY_AFFILIATION_MENTION("PRIVACY_POLICY_AFFILIATION_MENTION"),
    
    PRIVACY_POLICY_RIGHT_TO_DELETE_NOTICE("PRIVACY_POLICY_RIGHT_TO_DELETE_NOTICE"),
    
    PRIVACY_POLICY_RIGHT_TO_ACCESS_NOTICE("PRIVACY_POLICY_RIGHT_TO_ACCESS_NOTICE"),
    
    PRIVACY_POLICY_RIGHT_TO_RECTIFICATION_NOTICE("PRIVACY_POLICY_RIGHT_TO_RECTIFICATION_NOTICE"),
    
    PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SELLING_NOTICE("PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SELLING_NOTICE"),
    
    PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SHARING_NOTICE("PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SHARING_NOTICE"),
    
    PRIVACY_POLICY_RIGHT_TO_OPT_OUT_FROM_SELLING_NOTICE("PRIVACY_POLICY_RIGHT_TO_OPT_OUT_FROM_SELLING_NOTICE"),
    
    PRIVACY_POLICY_METHOD_TO_OPT_OUT_FROM_SELLING_OR_SHARING_NOTICE("PRIVACY_POLICY_METHOD_TO_OPT_OUT_FROM_SELLING_OR_SHARING_NOTICE"),
    
    PRIVACY_POLICY_DATA_CONTROLLER_IDENTITY("PRIVACY_POLICY_DATA_CONTROLLER_IDENTITY"),
    
    PRIVACY_POLICY_DPO_CONTACT_DETAILS("PRIVACY_POLICY_DPO_CONTACT_DETAILS"),
    
    PRIVACY_POLICY_RIGHT_TO_LODGE_A_COMPLAINT("PRIVACY_POLICY_RIGHT_TO_LODGE_A_COMPLAINT"),
    
    PRIVACY_POLICY_LEGAL_BASIS("PRIVACY_POLICY_LEGAL_BASIS"),
    
    PRIVACY_POLICY_CHILDREN_INFO_COLLECTION("PRIVACY_POLICY_CHILDREN_INFO_COLLECTION"),
    
    PRIVACY_POLICY_CHILDREN_INFO_USAGE_PURPOSES("PRIVACY_POLICY_CHILDREN_INFO_USAGE_PURPOSES"),
    
    PRIVACY_POLICY_CHILDREN_INFO_DISCLOSURE_PRACTICES("PRIVACY_POLICY_CHILDREN_INFO_DISCLOSURE_PRACTICES"),
    
    PRIVACY_POLICY_CHILDREN_INFO_PUBLICITY("PRIVACY_POLICY_CHILDREN_INFO_PUBLICITY"),
    
    PRIVACY_POLICY_PARENTS_METHOD_OF_INFO_DELETION("PRIVACY_POLICY_PARENTS_METHOD_OF_INFO_DELETION"),
    
    PRIVACY_POLICY_PARENTS_METHOD_TO_INFO_REVIEW("PRIVACY_POLICY_PARENTS_METHOD_TO_INFO_REVIEW"),
    
    PRIVACY_POLICY_PARENTS_METHOD_TO_STOP_FURTHER_INFO_COLLECTION_USE("PRIVACY_POLICY_PARENTS_METHOD_TO_STOP_FURTHER_INFO_COLLECTION_USE"),
    
    PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_DELETION("PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_DELETION"),
    
    PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_REVIEW("PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_REVIEW"),
    
    PRIVACY_POLICY_PARENTS_RIGHT_TO_STOP_FURTHER_INFO_COLLECTION_USE("PRIVACY_POLICY_PARENTS_RIGHT_TO_STOP_FURTHER_INFO_COLLECTION_USE"),
    
    PRIVACY_POLICY_PSL_APPROXIMATE_LOCATION("PRIVACY_POLICY_PSL_APPROXIMATE_LOCATION"),
    
    PRIVACY_POLICY_PSL_PRECISE_LOCATION("PRIVACY_POLICY_PSL_PRECISE_LOCATION"),
    
    PRIVACY_POLICY_PSL_NAME("PRIVACY_POLICY_PSL_NAME"),
    
    PRIVACY_POLICY_PSL_EMAIL_ADDRESS("PRIVACY_POLICY_PSL_EMAIL_ADDRESS"),
    
    PRIVACY_POLICY_PSL_USER_IDENTIFIERS("PRIVACY_POLICY_PSL_USER_IDENTIFIERS"),
    
    PRIVACY_POLICY_PSL_ADDRESS("PRIVACY_POLICY_PSL_ADDRESS"),
    
    PRIVACY_POLICY_PSL_PHONE_NUMBER("PRIVACY_POLICY_PSL_PHONE_NUMBER"),
    
    PRIVACY_POLICY_PSL_RACE_AND_ETHNICITY("PRIVACY_POLICY_PSL_RACE_AND_ETHNICITY"),
    
    PRIVACY_POLICY_PSL_CREDIT_SCORE("PRIVACY_POLICY_PSL_CREDIT_SCORE"),
    
    PRIVACY_POLICY_PSL_PURCHASE_HISTORY("PRIVACY_POLICY_PSL_PURCHASE_HISTORY"),
    
    PRIVACY_POLICY_PSL_HEALTH_INFO("PRIVACY_POLICY_PSL_HEALTH_INFO"),
    
    PRIVACY_POLICY_PSL_FITNESS_INFO("PRIVACY_POLICY_PSL_FITNESS_INFO"),
    
    PRIVACY_POLICY_PSL_EMAIL_MESSAGES("PRIVACY_POLICY_PSL_EMAIL_MESSAGES"),
    
    PRIVACY_POLICY_PSL_TEXT_MESSAGES("PRIVACY_POLICY_PSL_TEXT_MESSAGES"),
    
    PRIVACY_POLICY_PSL_PHOTOS("PRIVACY_POLICY_PSL_PHOTOS"),
    
    PRIVACY_POLICY_PSL_VIDEOS("PRIVACY_POLICY_PSL_VIDEOS"),
    
    PRIVACY_POLICY_PSL_MUSIC_FILES("PRIVACY_POLICY_PSL_MUSIC_FILES"),
    
    PRIVACY_POLICY_PSL_VOICE_OR_SOUND_RECORDINGS("PRIVACY_POLICY_PSL_VOICE_OR_SOUND_RECORDINGS"),
    
    PRIVACY_POLICY_PSL_FILES_AND_DOCS("PRIVACY_POLICY_PSL_FILES_AND_DOCS"),
    
    PRIVACY_POLICY_PSL_CALENDAR_EVENTS("PRIVACY_POLICY_PSL_CALENDAR_EVENTS"),
    
    PRIVACY_POLICY_PSL_CONTACTS("PRIVACY_POLICY_PSL_CONTACTS"),
    
    PRIVACY_POLICY_PSL_APP_INTERACTIONS("PRIVACY_POLICY_PSL_APP_INTERACTIONS"),
    
    PRIVACY_POLICY_PSL_IN_APP_SEARCH_HISTORY("PRIVACY_POLICY_PSL_IN_APP_SEARCH_HISTORY"),
    
    PRIVACY_POLICY_PSL_WEB_BROWSING_HISTORY("PRIVACY_POLICY_PSL_WEB_BROWSING_HISTORY"),
    
    PRIVACY_POLICY_PSL_INSTALLED_APPS("PRIVACY_POLICY_PSL_INSTALLED_APPS"),
    
    PRIVACY_POLICY_PSL_CRASH_LOGS("PRIVACY_POLICY_PSL_CRASH_LOGS"),
    
    PRIVACY_POLICY_PSL_DIAGNOSTICS("PRIVACY_POLICY_PSL_DIAGNOSTICS"),
    
    PRIVACY_POLICY_PSL_DEVICE_OR_OTHER_IDS("PRIVACY_POLICY_PSL_DEVICE_OR_OTHER_IDS"),
    
    DATA_MONITORING_NEW_ENDPOINT("DATA_MONITORING_NEW_ENDPOINT"),
    
    DATA_MONITORING_NEW_PERMISSION("DATA_MONITORING_NEW_PERMISSION"),
    
    DATA_MONITORING_NEW_DATA_TYPE("DATA_MONITORING_NEW_DATA_TYPE"),
    
    DATA_MONITORING_NEW_SDK("DATA_MONITORING_NEW_SDK"),
    
    DATA_MONITORING_ENCRYPTION("DATA_MONITORING_ENCRYPTION"),
    
    DATA_MONITORING_NEW_DATA_TYPE_VERSION_DIFF("DATA_MONITORING_NEW_DATA_TYPE_VERSION_DIFF"),
    
    DATA_MONITORING_NEW_ENDPOINT_VERSION_DIFF("DATA_MONITORING_NEW_ENDPOINT_VERSION_DIFF"),
    
    DATA_MONITORING_NEW_PERMISSION_VERSION_DIFF("DATA_MONITORING_NEW_PERMISSION_VERSION_DIFF"),
    
    DATA_MONITORING_NEW_SDK_VERSION_DIFF("DATA_MONITORING_NEW_SDK_VERSION_DIFF"),
    
    DATA_MONITORING_SDKS_DENYLIST_VIOLATION("DATA_MONITORING_SDKS_DENYLIST_VIOLATION"),
    
    DATA_MONITORING_PERMISSIONS_DENYLIST_VIOLATION("DATA_MONITORING_PERMISSIONS_DENYLIST_VIOLATION"),
    
    DATA_MONITORING_ENDPOINTS_DENYLIST_VIOLATION("DATA_MONITORING_ENDPOINTS_DENYLIST_VIOLATION"),
    
    DATA_MONITORING_OUTDATED_SDK_VERSION("DATA_MONITORING_OUTDATED_SDK_VERSION"),
    
    DATA_MONITORING_CRITICAL_SDK_ISSUE("DATA_MONITORING_CRITICAL_SDK_ISSUE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleChecksReportV1alphaCheck() {
  }

  public GoogleChecksReportV1alphaCheck citations(List<GoogleChecksReportV1alphaCheckCitation> citations) {
    this.citations = citations;
    return this;
  }

  public GoogleChecksReportV1alphaCheck addCitationsItem(GoogleChecksReportV1alphaCheckCitation citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

  /**
   * Regulations and policies that serve as the legal basis for the check.
   * @return citations
   */
  @javax.annotation.Nullable
  public List<GoogleChecksReportV1alphaCheckCitation> getCitations() {
    return citations;
  }

  public void setCitations(List<GoogleChecksReportV1alphaCheckCitation> citations) {
    this.citations = citations;
  }


  public GoogleChecksReportV1alphaCheck evidence(GoogleChecksReportV1alphaCheckEvidence evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public GoogleChecksReportV1alphaCheckEvidence getEvidence() {
    return evidence;
  }

  public void setEvidence(GoogleChecksReportV1alphaCheckEvidence evidence) {
    this.evidence = evidence;
  }


  public GoogleChecksReportV1alphaCheck regionCodes(List<String> regionCodes) {
    this.regionCodes = regionCodes;
    return this;
  }

  public GoogleChecksReportV1alphaCheck addRegionCodesItem(String regionCodesItem) {
    if (this.regionCodes == null) {
      this.regionCodes = new ArrayList<>();
    }
    this.regionCodes.add(regionCodesItem);
    return this;
  }

  /**
   * Regions that are impacted by the check. For more info, see https://google.aip.dev/143#countries-and-regions.
   * @return regionCodes
   */
  @javax.annotation.Nullable
  public List<String> getRegionCodes() {
    return regionCodes;
  }

  public void setRegionCodes(List<String> regionCodes) {
    this.regionCodes = regionCodes;
  }


  public GoogleChecksReportV1alphaCheck severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The urgency or risk level of the check.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public GoogleChecksReportV1alphaCheck state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The result after running the check.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleChecksReportV1alphaCheck stateMetadata(GoogleChecksReportV1alphaCheckStateMetadata stateMetadata) {
    this.stateMetadata = stateMetadata;
    return this;
  }

  /**
   * Get stateMetadata
   * @return stateMetadata
   */
  @javax.annotation.Nullable
  public GoogleChecksReportV1alphaCheckStateMetadata getStateMetadata() {
    return stateMetadata;
  }

  public void setStateMetadata(GoogleChecksReportV1alphaCheckStateMetadata stateMetadata) {
    this.stateMetadata = stateMetadata;
  }


  public GoogleChecksReportV1alphaCheck type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of check that was run. A type will only appear once in a report&#39;s list of checks.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChecksReportV1alphaCheck googleChecksReportV1alphaCheck = (GoogleChecksReportV1alphaCheck) o;
    return Objects.equals(this.citations, googleChecksReportV1alphaCheck.citations) &&
        Objects.equals(this.evidence, googleChecksReportV1alphaCheck.evidence) &&
        Objects.equals(this.regionCodes, googleChecksReportV1alphaCheck.regionCodes) &&
        Objects.equals(this.severity, googleChecksReportV1alphaCheck.severity) &&
        Objects.equals(this.state, googleChecksReportV1alphaCheck.state) &&
        Objects.equals(this.stateMetadata, googleChecksReportV1alphaCheck.stateMetadata) &&
        Objects.equals(this.type, googleChecksReportV1alphaCheck.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citations, evidence, regionCodes, severity, state, stateMetadata, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChecksReportV1alphaCheck {\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    regionCodes: ").append(toIndentedString(regionCodes)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMetadata: ").append(toIndentedString(stateMetadata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citations");
    openapiFields.add("evidence");
    openapiFields.add("regionCodes");
    openapiFields.add("severity");
    openapiFields.add("state");
    openapiFields.add("stateMetadata");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChecksReportV1alphaCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChecksReportV1alphaCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChecksReportV1alphaCheck is not found in the empty JSON string", GoogleChecksReportV1alphaCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChecksReportV1alphaCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChecksReportV1alphaCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        JsonArray jsonArraycitations = jsonObj.getAsJsonArray("citations");
        if (jsonArraycitations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citations` to be an array in the JSON string but got `%s`", jsonObj.get("citations").toString()));
          }

          // validate the optional field `citations` (array)
          for (int i = 0; i < jsonArraycitations.size(); i++) {
            GoogleChecksReportV1alphaCheckCitation.validateJsonElement(jsonArraycitations.get(i));
          };
        }
      }
      // validate the optional field `evidence`
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        GoogleChecksReportV1alphaCheckEvidence.validateJsonElement(jsonObj.get("evidence"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regionCodes") != null && !jsonObj.get("regionCodes").isJsonNull() && !jsonObj.get("regionCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCodes` to be an array in the JSON string but got `%s`", jsonObj.get("regionCodes").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stateMetadata`
      if (jsonObj.get("stateMetadata") != null && !jsonObj.get("stateMetadata").isJsonNull()) {
        GoogleChecksReportV1alphaCheckStateMetadata.validateJsonElement(jsonObj.get("stateMetadata"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChecksReportV1alphaCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChecksReportV1alphaCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChecksReportV1alphaCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChecksReportV1alphaCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChecksReportV1alphaCheck>() {
           @Override
           public void write(JsonWriter out, GoogleChecksReportV1alphaCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChecksReportV1alphaCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChecksReportV1alphaCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChecksReportV1alphaCheck
   * @throws IOException if the JSON string is invalid with respect to GoogleChecksReportV1alphaCheck
   */
  public static GoogleChecksReportV1alphaCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChecksReportV1alphaCheck.class);
  }

  /**
   * Convert an instance of GoogleChecksReportV1alphaCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

