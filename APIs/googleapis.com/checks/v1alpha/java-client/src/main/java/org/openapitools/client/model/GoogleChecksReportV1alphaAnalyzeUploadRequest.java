/*
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for ReportService.AnalyzeUpload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:21.291746-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChecksReportV1alphaAnalyzeUploadRequest {
  /**
   * Optional. The type of the uploaded app binary. If not provided, the server assumes APK file for Android and IPA file for iOS.
   */
  @JsonAdapter(AppBinaryFileTypeEnum.Adapter.class)
  public enum AppBinaryFileTypeEnum {
    APP_BINARY_FILE_TYPE_UNSPECIFIED("APP_BINARY_FILE_TYPE_UNSPECIFIED"),
    
    ANDROID_APK("ANDROID_APK"),
    
    ANDROID_AAB("ANDROID_AAB"),
    
    IOS_IPA("IOS_IPA");

    private String value;

    AppBinaryFileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppBinaryFileTypeEnum fromValue(String value) {
      for (AppBinaryFileTypeEnum b : AppBinaryFileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppBinaryFileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppBinaryFileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppBinaryFileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppBinaryFileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppBinaryFileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_BINARY_FILE_TYPE = "appBinaryFileType";
  @SerializedName(SERIALIZED_NAME_APP_BINARY_FILE_TYPE)
  private AppBinaryFileTypeEnum appBinaryFileType;

  public static final String SERIALIZED_NAME_CODE_REFERENCE_ID = "codeReferenceId";
  @SerializedName(SERIALIZED_NAME_CODE_REFERENCE_ID)
  private String codeReferenceId;

  public GoogleChecksReportV1alphaAnalyzeUploadRequest() {
  }

  public GoogleChecksReportV1alphaAnalyzeUploadRequest appBinaryFileType(AppBinaryFileTypeEnum appBinaryFileType) {
    this.appBinaryFileType = appBinaryFileType;
    return this;
  }

  /**
   * Optional. The type of the uploaded app binary. If not provided, the server assumes APK file for Android and IPA file for iOS.
   * @return appBinaryFileType
   */
  @javax.annotation.Nullable
  public AppBinaryFileTypeEnum getAppBinaryFileType() {
    return appBinaryFileType;
  }

  public void setAppBinaryFileType(AppBinaryFileTypeEnum appBinaryFileType) {
    this.appBinaryFileType = appBinaryFileType;
  }


  public GoogleChecksReportV1alphaAnalyzeUploadRequest codeReferenceId(String codeReferenceId) {
    this.codeReferenceId = codeReferenceId;
    return this;
  }

  /**
   * Optional. Git commit hash or changelist number associated with the upload.
   * @return codeReferenceId
   */
  @javax.annotation.Nullable
  public String getCodeReferenceId() {
    return codeReferenceId;
  }

  public void setCodeReferenceId(String codeReferenceId) {
    this.codeReferenceId = codeReferenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChecksReportV1alphaAnalyzeUploadRequest googleChecksReportV1alphaAnalyzeUploadRequest = (GoogleChecksReportV1alphaAnalyzeUploadRequest) o;
    return Objects.equals(this.appBinaryFileType, googleChecksReportV1alphaAnalyzeUploadRequest.appBinaryFileType) &&
        Objects.equals(this.codeReferenceId, googleChecksReportV1alphaAnalyzeUploadRequest.codeReferenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appBinaryFileType, codeReferenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChecksReportV1alphaAnalyzeUploadRequest {\n");
    sb.append("    appBinaryFileType: ").append(toIndentedString(appBinaryFileType)).append("\n");
    sb.append("    codeReferenceId: ").append(toIndentedString(codeReferenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appBinaryFileType");
    openapiFields.add("codeReferenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChecksReportV1alphaAnalyzeUploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChecksReportV1alphaAnalyzeUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChecksReportV1alphaAnalyzeUploadRequest is not found in the empty JSON string", GoogleChecksReportV1alphaAnalyzeUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChecksReportV1alphaAnalyzeUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChecksReportV1alphaAnalyzeUploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appBinaryFileType") != null && !jsonObj.get("appBinaryFileType").isJsonNull()) && !jsonObj.get("appBinaryFileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appBinaryFileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appBinaryFileType").toString()));
      }
      // validate the optional field `appBinaryFileType`
      if (jsonObj.get("appBinaryFileType") != null && !jsonObj.get("appBinaryFileType").isJsonNull()) {
        AppBinaryFileTypeEnum.validateJsonElement(jsonObj.get("appBinaryFileType"));
      }
      if ((jsonObj.get("codeReferenceId") != null && !jsonObj.get("codeReferenceId").isJsonNull()) && !jsonObj.get("codeReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeReferenceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChecksReportV1alphaAnalyzeUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChecksReportV1alphaAnalyzeUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChecksReportV1alphaAnalyzeUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChecksReportV1alphaAnalyzeUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChecksReportV1alphaAnalyzeUploadRequest>() {
           @Override
           public void write(JsonWriter out, GoogleChecksReportV1alphaAnalyzeUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChecksReportV1alphaAnalyzeUploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChecksReportV1alphaAnalyzeUploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChecksReportV1alphaAnalyzeUploadRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleChecksReportV1alphaAnalyzeUploadRequest
   */
  public static GoogleChecksReportV1alphaAnalyzeUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChecksReportV1alphaAnalyzeUploadRequest.class);
  }

  /**
   * Convert an instance of GoogleChecksReportV1alphaAnalyzeUploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

