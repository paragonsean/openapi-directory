/*
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChecksReportV1alphaAppBundle;
import org.openapitools.client.model.GoogleChecksReportV1alphaCheck;
import org.openapitools.client.model.GoogleChecksReportV1alphaDataMonitoring;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Privacy report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:21.291746-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChecksReportV1alphaReport {
  public static final String SERIALIZED_NAME_APP_BUNDLE = "appBundle";
  @SerializedName(SERIALIZED_NAME_APP_BUNDLE)
  private GoogleChecksReportV1alphaAppBundle appBundle;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<GoogleChecksReportV1alphaCheck> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_MONITORING = "dataMonitoring";
  @SerializedName(SERIALIZED_NAME_DATA_MONITORING)
  private GoogleChecksReportV1alphaDataMonitoring dataMonitoring;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESULTS_URI = "resultsUri";
  @SerializedName(SERIALIZED_NAME_RESULTS_URI)
  private String resultsUri;

  public GoogleChecksReportV1alphaReport() {
  }

  public GoogleChecksReportV1alphaReport appBundle(GoogleChecksReportV1alphaAppBundle appBundle) {
    this.appBundle = appBundle;
    return this;
  }

  /**
   * Get appBundle
   * @return appBundle
   */
  @javax.annotation.Nullable
  public GoogleChecksReportV1alphaAppBundle getAppBundle() {
    return appBundle;
  }

  public void setAppBundle(GoogleChecksReportV1alphaAppBundle appBundle) {
    this.appBundle = appBundle;
  }


  public GoogleChecksReportV1alphaReport checks(List<GoogleChecksReportV1alphaCheck> checks) {
    this.checks = checks;
    return this;
  }

  public GoogleChecksReportV1alphaReport addChecksItem(GoogleChecksReportV1alphaCheck checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

  /**
   * List of checks that were run on the app bundle.
   * @return checks
   */
  @javax.annotation.Nullable
  public List<GoogleChecksReportV1alphaCheck> getChecks() {
    return checks;
  }

  public void setChecks(List<GoogleChecksReportV1alphaCheck> checks) {
    this.checks = checks;
  }


  public GoogleChecksReportV1alphaReport dataMonitoring(GoogleChecksReportV1alphaDataMonitoring dataMonitoring) {
    this.dataMonitoring = dataMonitoring;
    return this;
  }

  /**
   * Get dataMonitoring
   * @return dataMonitoring
   */
  @javax.annotation.Nullable
  public GoogleChecksReportV1alphaDataMonitoring getDataMonitoring() {
    return dataMonitoring;
  }

  public void setDataMonitoring(GoogleChecksReportV1alphaDataMonitoring dataMonitoring) {
    this.dataMonitoring = dataMonitoring;
  }


  public GoogleChecksReportV1alphaReport name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name of the report.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleChecksReportV1alphaReport resultsUri(String resultsUri) {
    this.resultsUri = resultsUri;
    return this;
  }

  /**
   * A URL to view results.
   * @return resultsUri
   */
  @javax.annotation.Nullable
  public String getResultsUri() {
    return resultsUri;
  }

  public void setResultsUri(String resultsUri) {
    this.resultsUri = resultsUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChecksReportV1alphaReport googleChecksReportV1alphaReport = (GoogleChecksReportV1alphaReport) o;
    return Objects.equals(this.appBundle, googleChecksReportV1alphaReport.appBundle) &&
        Objects.equals(this.checks, googleChecksReportV1alphaReport.checks) &&
        Objects.equals(this.dataMonitoring, googleChecksReportV1alphaReport.dataMonitoring) &&
        Objects.equals(this.name, googleChecksReportV1alphaReport.name) &&
        Objects.equals(this.resultsUri, googleChecksReportV1alphaReport.resultsUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appBundle, checks, dataMonitoring, name, resultsUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChecksReportV1alphaReport {\n");
    sb.append("    appBundle: ").append(toIndentedString(appBundle)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    dataMonitoring: ").append(toIndentedString(dataMonitoring)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resultsUri: ").append(toIndentedString(resultsUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appBundle");
    openapiFields.add("checks");
    openapiFields.add("dataMonitoring");
    openapiFields.add("name");
    openapiFields.add("resultsUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChecksReportV1alphaReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChecksReportV1alphaReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChecksReportV1alphaReport is not found in the empty JSON string", GoogleChecksReportV1alphaReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChecksReportV1alphaReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChecksReportV1alphaReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appBundle`
      if (jsonObj.get("appBundle") != null && !jsonObj.get("appBundle").isJsonNull()) {
        GoogleChecksReportV1alphaAppBundle.validateJsonElement(jsonObj.get("appBundle"));
      }
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) {
        JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
        if (jsonArraychecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
          }

          // validate the optional field `checks` (array)
          for (int i = 0; i < jsonArraychecks.size(); i++) {
            GoogleChecksReportV1alphaCheck.validateJsonElement(jsonArraychecks.get(i));
          };
        }
      }
      // validate the optional field `dataMonitoring`
      if (jsonObj.get("dataMonitoring") != null && !jsonObj.get("dataMonitoring").isJsonNull()) {
        GoogleChecksReportV1alphaDataMonitoring.validateJsonElement(jsonObj.get("dataMonitoring"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resultsUri") != null && !jsonObj.get("resultsUri").isJsonNull()) && !jsonObj.get("resultsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultsUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChecksReportV1alphaReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChecksReportV1alphaReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChecksReportV1alphaReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChecksReportV1alphaReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChecksReportV1alphaReport>() {
           @Override
           public void write(JsonWriter out, GoogleChecksReportV1alphaReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChecksReportV1alphaReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChecksReportV1alphaReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChecksReportV1alphaReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChecksReportV1alphaReport
   */
  public static GoogleChecksReportV1alphaReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChecksReportV1alphaReport.class);
  }

  /**
   * Convert an instance of GoogleChecksReportV1alphaReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

