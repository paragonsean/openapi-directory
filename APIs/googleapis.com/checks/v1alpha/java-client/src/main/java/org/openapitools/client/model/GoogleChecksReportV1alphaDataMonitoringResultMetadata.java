/*
 * Checks API
 * The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a data monitoring result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:21.291746-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChecksReportV1alphaDataMonitoringResultMetadata {
  /**
   * Gets or Sets badges
   */
  @JsonAdapter(BadgesEnum.Adapter.class)
  public enum BadgesEnum {
    DATA_MONITORING_RESULT_BADGE_UNSPECIFIED("DATA_MONITORING_RESULT_BADGE_UNSPECIFIED"),
    
    NEW("NEW");

    private String value;

    BadgesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BadgesEnum fromValue(String value) {
      for (BadgesEnum b : BadgesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BadgesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BadgesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BadgesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BadgesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BadgesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BADGES = "badges";
  @SerializedName(SERIALIZED_NAME_BADGES)
  private List<BadgesEnum> badges = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_DETECTED_TIME = "firstDetectedTime";
  @SerializedName(SERIALIZED_NAME_FIRST_DETECTED_TIME)
  private String firstDetectedTime;

  public static final String SERIALIZED_NAME_LAST_DETECTED_APP_VERSION = "lastDetectedAppVersion";
  @SerializedName(SERIALIZED_NAME_LAST_DETECTED_APP_VERSION)
  private String lastDetectedAppVersion;

  public static final String SERIALIZED_NAME_LAST_DETECTED_TIME = "lastDetectedTime";
  @SerializedName(SERIALIZED_NAME_LAST_DETECTED_TIME)
  private String lastDetectedTime;

  public GoogleChecksReportV1alphaDataMonitoringResultMetadata() {
  }

  public GoogleChecksReportV1alphaDataMonitoringResultMetadata badges(List<BadgesEnum> badges) {
    this.badges = badges;
    return this;
  }

  public GoogleChecksReportV1alphaDataMonitoringResultMetadata addBadgesItem(BadgesEnum badgesItem) {
    if (this.badges == null) {
      this.badges = new ArrayList<>();
    }
    this.badges.add(badgesItem);
    return this;
  }

  /**
   * Badges that apply to this result.
   * @return badges
   */
  @javax.annotation.Nullable
  public List<BadgesEnum> getBadges() {
    return badges;
  }

  public void setBadges(List<BadgesEnum> badges) {
    this.badges = badges;
  }


  public GoogleChecksReportV1alphaDataMonitoringResultMetadata firstDetectedTime(String firstDetectedTime) {
    this.firstDetectedTime = firstDetectedTime;
    return this;
  }

  /**
   * The timestamp when this result was first detected within the last 8 weeks. If not set, it wasn&#39;t detected within the last 8 weeks.
   * @return firstDetectedTime
   */
  @javax.annotation.Nullable
  public String getFirstDetectedTime() {
    return firstDetectedTime;
  }

  public void setFirstDetectedTime(String firstDetectedTime) {
    this.firstDetectedTime = firstDetectedTime;
  }


  public GoogleChecksReportV1alphaDataMonitoringResultMetadata lastDetectedAppVersion(String lastDetectedAppVersion) {
    this.lastDetectedAppVersion = lastDetectedAppVersion;
    return this;
  }

  /**
   * Your app&#39;s version name when this result was last detected within the last 8 weeks. If not set, it wasn&#39;t detected within the last 8 weeks.
   * @return lastDetectedAppVersion
   */
  @javax.annotation.Nullable
  public String getLastDetectedAppVersion() {
    return lastDetectedAppVersion;
  }

  public void setLastDetectedAppVersion(String lastDetectedAppVersion) {
    this.lastDetectedAppVersion = lastDetectedAppVersion;
  }


  public GoogleChecksReportV1alphaDataMonitoringResultMetadata lastDetectedTime(String lastDetectedTime) {
    this.lastDetectedTime = lastDetectedTime;
    return this;
  }

  /**
   * The timestamp when this result was last detected within the last 8 weeks. If not set, it wasn&#39;t detected within the last 8 weeks.
   * @return lastDetectedTime
   */
  @javax.annotation.Nullable
  public String getLastDetectedTime() {
    return lastDetectedTime;
  }

  public void setLastDetectedTime(String lastDetectedTime) {
    this.lastDetectedTime = lastDetectedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChecksReportV1alphaDataMonitoringResultMetadata googleChecksReportV1alphaDataMonitoringResultMetadata = (GoogleChecksReportV1alphaDataMonitoringResultMetadata) o;
    return Objects.equals(this.badges, googleChecksReportV1alphaDataMonitoringResultMetadata.badges) &&
        Objects.equals(this.firstDetectedTime, googleChecksReportV1alphaDataMonitoringResultMetadata.firstDetectedTime) &&
        Objects.equals(this.lastDetectedAppVersion, googleChecksReportV1alphaDataMonitoringResultMetadata.lastDetectedAppVersion) &&
        Objects.equals(this.lastDetectedTime, googleChecksReportV1alphaDataMonitoringResultMetadata.lastDetectedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badges, firstDetectedTime, lastDetectedAppVersion, lastDetectedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChecksReportV1alphaDataMonitoringResultMetadata {\n");
    sb.append("    badges: ").append(toIndentedString(badges)).append("\n");
    sb.append("    firstDetectedTime: ").append(toIndentedString(firstDetectedTime)).append("\n");
    sb.append("    lastDetectedAppVersion: ").append(toIndentedString(lastDetectedAppVersion)).append("\n");
    sb.append("    lastDetectedTime: ").append(toIndentedString(lastDetectedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badges");
    openapiFields.add("firstDetectedTime");
    openapiFields.add("lastDetectedAppVersion");
    openapiFields.add("lastDetectedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChecksReportV1alphaDataMonitoringResultMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChecksReportV1alphaDataMonitoringResultMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChecksReportV1alphaDataMonitoringResultMetadata is not found in the empty JSON string", GoogleChecksReportV1alphaDataMonitoringResultMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChecksReportV1alphaDataMonitoringResultMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChecksReportV1alphaDataMonitoringResultMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("badges") != null && !jsonObj.get("badges").isJsonNull() && !jsonObj.get("badges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `badges` to be an array in the JSON string but got `%s`", jsonObj.get("badges").toString()));
      }
      if ((jsonObj.get("firstDetectedTime") != null && !jsonObj.get("firstDetectedTime").isJsonNull()) && !jsonObj.get("firstDetectedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstDetectedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstDetectedTime").toString()));
      }
      if ((jsonObj.get("lastDetectedAppVersion") != null && !jsonObj.get("lastDetectedAppVersion").isJsonNull()) && !jsonObj.get("lastDetectedAppVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDetectedAppVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDetectedAppVersion").toString()));
      }
      if ((jsonObj.get("lastDetectedTime") != null && !jsonObj.get("lastDetectedTime").isJsonNull()) && !jsonObj.get("lastDetectedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDetectedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDetectedTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChecksReportV1alphaDataMonitoringResultMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChecksReportV1alphaDataMonitoringResultMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChecksReportV1alphaDataMonitoringResultMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChecksReportV1alphaDataMonitoringResultMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChecksReportV1alphaDataMonitoringResultMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleChecksReportV1alphaDataMonitoringResultMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChecksReportV1alphaDataMonitoringResultMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChecksReportV1alphaDataMonitoringResultMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChecksReportV1alphaDataMonitoringResultMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleChecksReportV1alphaDataMonitoringResultMetadata
   */
  public static GoogleChecksReportV1alphaDataMonitoringResultMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChecksReportV1alphaDataMonitoringResultMetadata.class);
  }

  /**
   * Convert an instance of GoogleChecksReportV1alphaDataMonitoringResultMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

