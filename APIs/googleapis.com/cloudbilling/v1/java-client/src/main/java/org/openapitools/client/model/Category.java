/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the category hierarchy of a SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:16.458931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_RESOURCE_FAMILY = "resourceFamily";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FAMILY)
  private String resourceFamily;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_SERVICE_DISPLAY_NAME = "serviceDisplayName";
  @SerializedName(SERIALIZED_NAME_SERVICE_DISPLAY_NAME)
  private String serviceDisplayName;

  public static final String SERIALIZED_NAME_USAGE_TYPE = "usageType";
  @SerializedName(SERIALIZED_NAME_USAGE_TYPE)
  private String usageType;

  public Category() {
  }

  public Category resourceFamily(String resourceFamily) {
    this.resourceFamily = resourceFamily;
    return this;
  }

  /**
   * The type of product the SKU refers to. Example: \&quot;Compute\&quot;, \&quot;Storage\&quot;, \&quot;Network\&quot;, \&quot;ApplicationServices\&quot; etc.
   * @return resourceFamily
   */
  @javax.annotation.Nullable
  public String getResourceFamily() {
    return resourceFamily;
  }

  public void setResourceFamily(String resourceFamily) {
    this.resourceFamily = resourceFamily;
  }


  public Category resourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  /**
   * A group classification for related SKUs. Example: \&quot;RAM\&quot;, \&quot;GPU\&quot;, \&quot;Prediction\&quot;, \&quot;Ops\&quot;, \&quot;GoogleEgress\&quot; etc.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }

  public void setResourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
  }


  public Category serviceDisplayName(String serviceDisplayName) {
    this.serviceDisplayName = serviceDisplayName;
    return this;
  }

  /**
   * The display name of the service this SKU belongs to.
   * @return serviceDisplayName
   */
  @javax.annotation.Nullable
  public String getServiceDisplayName() {
    return serviceDisplayName;
  }

  public void setServiceDisplayName(String serviceDisplayName) {
    this.serviceDisplayName = serviceDisplayName;
  }


  public Category usageType(String usageType) {
    this.usageType = usageType;
    return this;
  }

  /**
   * Represents how the SKU is consumed. Example: \&quot;OnDemand\&quot;, \&quot;Preemptible\&quot;, \&quot;Commit1Mo\&quot;, \&quot;Commit1Yr\&quot; etc.
   * @return usageType
   */
  @javax.annotation.Nullable
  public String getUsageType() {
    return usageType;
  }

  public void setUsageType(String usageType) {
    this.usageType = usageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.resourceFamily, category.resourceFamily) &&
        Objects.equals(this.resourceGroup, category.resourceGroup) &&
        Objects.equals(this.serviceDisplayName, category.serviceDisplayName) &&
        Objects.equals(this.usageType, category.usageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceFamily, resourceGroup, serviceDisplayName, usageType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    resourceFamily: ").append(toIndentedString(resourceFamily)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    serviceDisplayName: ").append(toIndentedString(serviceDisplayName)).append("\n");
    sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceFamily");
    openapiFields.add("resourceGroup");
    openapiFields.add("serviceDisplayName");
    openapiFields.add("usageType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resourceFamily") != null && !jsonObj.get("resourceFamily").isJsonNull()) && !jsonObj.get("resourceFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceFamily").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("serviceDisplayName") != null && !jsonObj.get("serviceDisplayName").isJsonNull()) && !jsonObj.get("serviceDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDisplayName").toString()));
      }
      if ((jsonObj.get("usageType") != null && !jsonObj.get("usageType").isJsonNull()) && !jsonObj.get("usageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

