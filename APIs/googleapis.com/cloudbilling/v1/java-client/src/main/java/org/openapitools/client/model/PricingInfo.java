/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregationInfo;
import org.openapitools.client.model.PricingExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the pricing information for a SKU at a single point of time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:16.458931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingInfo {
  public static final String SERIALIZED_NAME_AGGREGATION_INFO = "aggregationInfo";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_INFO)
  private AggregationInfo aggregationInfo;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_RATE = "currencyConversionRate";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_RATE)
  private Double currencyConversionRate;

  public static final String SERIALIZED_NAME_EFFECTIVE_TIME = "effectiveTime";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_TIME)
  private String effectiveTime;

  public static final String SERIALIZED_NAME_PRICING_EXPRESSION = "pricingExpression";
  @SerializedName(SERIALIZED_NAME_PRICING_EXPRESSION)
  private PricingExpression pricingExpression;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public PricingInfo() {
  }

  public PricingInfo aggregationInfo(AggregationInfo aggregationInfo) {
    this.aggregationInfo = aggregationInfo;
    return this;
  }

  /**
   * Get aggregationInfo
   * @return aggregationInfo
   */
  @javax.annotation.Nullable
  public AggregationInfo getAggregationInfo() {
    return aggregationInfo;
  }

  public void setAggregationInfo(AggregationInfo aggregationInfo) {
    this.aggregationInfo = aggregationInfo;
  }


  public PricingInfo currencyConversionRate(Double currencyConversionRate) {
    this.currencyConversionRate = currencyConversionRate;
    return this;
  }

  /**
   * Conversion rate used for currency conversion, from USD to the currency specified in the request. This includes any surcharge collected for billing in non USD currency. If a currency is not specified in the request this defaults to 1.0. Example: USD * currency_conversion_rate &#x3D; JPY
   * @return currencyConversionRate
   */
  @javax.annotation.Nullable
  public Double getCurrencyConversionRate() {
    return currencyConversionRate;
  }

  public void setCurrencyConversionRate(Double currencyConversionRate) {
    this.currencyConversionRate = currencyConversionRate;
  }


  public PricingInfo effectiveTime(String effectiveTime) {
    this.effectiveTime = effectiveTime;
    return this;
  }

  /**
   * The timestamp from which this pricing was effective within the requested time range. This is guaranteed to be greater than or equal to the start_time field in the request and less than the end_time field in the request. If a time range was not specified in the request this field will be equivalent to a time within the last 12 hours, indicating the latest pricing info.
   * @return effectiveTime
   */
  @javax.annotation.Nullable
  public String getEffectiveTime() {
    return effectiveTime;
  }

  public void setEffectiveTime(String effectiveTime) {
    this.effectiveTime = effectiveTime;
  }


  public PricingInfo pricingExpression(PricingExpression pricingExpression) {
    this.pricingExpression = pricingExpression;
    return this;
  }

  /**
   * Get pricingExpression
   * @return pricingExpression
   */
  @javax.annotation.Nullable
  public PricingExpression getPricingExpression() {
    return pricingExpression;
  }

  public void setPricingExpression(PricingExpression pricingExpression) {
    this.pricingExpression = pricingExpression;
  }


  public PricingInfo summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * An optional human readable summary of the pricing information, has a maximum length of 256 characters.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingInfo pricingInfo = (PricingInfo) o;
    return Objects.equals(this.aggregationInfo, pricingInfo.aggregationInfo) &&
        Objects.equals(this.currencyConversionRate, pricingInfo.currencyConversionRate) &&
        Objects.equals(this.effectiveTime, pricingInfo.effectiveTime) &&
        Objects.equals(this.pricingExpression, pricingInfo.pricingExpression) &&
        Objects.equals(this.summary, pricingInfo.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationInfo, currencyConversionRate, effectiveTime, pricingExpression, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingInfo {\n");
    sb.append("    aggregationInfo: ").append(toIndentedString(aggregationInfo)).append("\n");
    sb.append("    currencyConversionRate: ").append(toIndentedString(currencyConversionRate)).append("\n");
    sb.append("    effectiveTime: ").append(toIndentedString(effectiveTime)).append("\n");
    sb.append("    pricingExpression: ").append(toIndentedString(pricingExpression)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationInfo");
    openapiFields.add("currencyConversionRate");
    openapiFields.add("effectiveTime");
    openapiFields.add("pricingExpression");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingInfo is not found in the empty JSON string", PricingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregationInfo`
      if (jsonObj.get("aggregationInfo") != null && !jsonObj.get("aggregationInfo").isJsonNull()) {
        AggregationInfo.validateJsonElement(jsonObj.get("aggregationInfo"));
      }
      if ((jsonObj.get("effectiveTime") != null && !jsonObj.get("effectiveTime").isJsonNull()) && !jsonObj.get("effectiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveTime").toString()));
      }
      // validate the optional field `pricingExpression`
      if (jsonObj.get("pricingExpression") != null && !jsonObj.get("pricingExpression").isJsonNull()) {
        PricingExpression.validateJsonElement(jsonObj.get("pricingExpression"));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingInfo>() {
           @Override
           public void write(JsonWriter out, PricingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingInfo
   * @throws IOException if the JSON string is invalid with respect to PricingInfo
   */
  public static PricingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingInfo.class);
  }

  /**
   * Convert an instance of PricingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

