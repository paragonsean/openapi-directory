/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulation of billing information for a Google Cloud Console project. A project has at most one associated billing account at a time (but a billing account can be assigned to multiple projects).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:16.458931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectBillingInfo {
  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_NAME = "billingAccountName";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_NAME)
  private String billingAccountName;

  public static final String SERIALIZED_NAME_BILLING_ENABLED = "billingEnabled";
  @SerializedName(SERIALIZED_NAME_BILLING_ENABLED)
  private Boolean billingEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public ProjectBillingInfo() {
  }

  public ProjectBillingInfo(
     Boolean billingEnabled, 
     String name, 
     String projectId
  ) {
    this();
    this.billingEnabled = billingEnabled;
    this.name = name;
    this.projectId = projectId;
  }

  public ProjectBillingInfo billingAccountName(String billingAccountName) {
    this.billingAccountName = billingAccountName;
    return this;
  }

  /**
   * The resource name of the billing account associated with the project, if any. For example, &#x60;billingAccounts/012345-567890-ABCDEF&#x60;.
   * @return billingAccountName
   */
  @javax.annotation.Nullable
  public String getBillingAccountName() {
    return billingAccountName;
  }

  public void setBillingAccountName(String billingAccountName) {
    this.billingAccountName = billingAccountName;
  }


  /**
   * Output only. True if the project is associated with an open billing account, to which usage on the project is charged. False if the project is associated with a closed billing account, or no billing account at all, and therefore cannot use paid services.
   * @return billingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBillingEnabled() {
    return billingEnabled;
  }



  /**
   * Output only. The resource name for the &#x60;ProjectBillingInfo&#x60;; has the form &#x60;projects/{project_id}/billingInfo&#x60;. For example, the resource name for the billing information for project &#x60;tokyo-rain-123&#x60; would be &#x60;projects/tokyo-rain-123/billingInfo&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The ID of the project that this &#x60;ProjectBillingInfo&#x60; represents, such as &#x60;tokyo-rain-123&#x60;. This is a convenience field so that you don&#39;t need to parse the &#x60;name&#x60; field to obtain a project ID.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectBillingInfo projectBillingInfo = (ProjectBillingInfo) o;
    return Objects.equals(this.billingAccountName, projectBillingInfo.billingAccountName) &&
        Objects.equals(this.billingEnabled, projectBillingInfo.billingEnabled) &&
        Objects.equals(this.name, projectBillingInfo.name) &&
        Objects.equals(this.projectId, projectBillingInfo.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAccountName, billingEnabled, name, projectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectBillingInfo {\n");
    sb.append("    billingAccountName: ").append(toIndentedString(billingAccountName)).append("\n");
    sb.append("    billingEnabled: ").append(toIndentedString(billingEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAccountName");
    openapiFields.add("billingEnabled");
    openapiFields.add("name");
    openapiFields.add("projectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectBillingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectBillingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectBillingInfo is not found in the empty JSON string", ProjectBillingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectBillingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectBillingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingAccountName") != null && !jsonObj.get("billingAccountName").isJsonNull()) && !jsonObj.get("billingAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectBillingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectBillingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectBillingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectBillingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectBillingInfo>() {
           @Override
           public void write(JsonWriter out, ProjectBillingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectBillingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectBillingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectBillingInfo
   * @throws IOException if the JSON string is invalid with respect to ProjectBillingInfo
   */
  public static ProjectBillingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectBillingInfo.class);
  }

  /**
   * Convert an instance of ProjectBillingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

