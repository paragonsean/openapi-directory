/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the aggregation level and interval for pricing of a single SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:16.458931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregationInfo {
  public static final String SERIALIZED_NAME_AGGREGATION_COUNT = "aggregationCount";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_COUNT)
  private Integer aggregationCount;

  /**
   * Gets or Sets aggregationInterval
   */
  @JsonAdapter(AggregationIntervalEnum.Adapter.class)
  public enum AggregationIntervalEnum {
    AGGREGATION_INTERVAL_UNSPECIFIED("AGGREGATION_INTERVAL_UNSPECIFIED"),
    
    DAILY("DAILY"),
    
    MONTHLY("MONTHLY");

    private String value;

    AggregationIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationIntervalEnum fromValue(String value) {
      for (AggregationIntervalEnum b : AggregationIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_INTERVAL = "aggregationInterval";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_INTERVAL)
  private AggregationIntervalEnum aggregationInterval;

  /**
   * Gets or Sets aggregationLevel
   */
  @JsonAdapter(AggregationLevelEnum.Adapter.class)
  public enum AggregationLevelEnum {
    AGGREGATION_LEVEL_UNSPECIFIED("AGGREGATION_LEVEL_UNSPECIFIED"),
    
    ACCOUNT("ACCOUNT"),
    
    PROJECT("PROJECT");

    private String value;

    AggregationLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationLevelEnum fromValue(String value) {
      for (AggregationLevelEnum b : AggregationLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_LEVEL = "aggregationLevel";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_LEVEL)
  private AggregationLevelEnum aggregationLevel;

  public AggregationInfo() {
  }

  public AggregationInfo aggregationCount(Integer aggregationCount) {
    this.aggregationCount = aggregationCount;
    return this;
  }

  /**
   * The number of intervals to aggregate over. Example: If aggregation_level is \&quot;DAILY\&quot; and aggregation_count is 14, aggregation will be over 14 days.
   * @return aggregationCount
   */
  @javax.annotation.Nullable
  public Integer getAggregationCount() {
    return aggregationCount;
  }

  public void setAggregationCount(Integer aggregationCount) {
    this.aggregationCount = aggregationCount;
  }


  public AggregationInfo aggregationInterval(AggregationIntervalEnum aggregationInterval) {
    this.aggregationInterval = aggregationInterval;
    return this;
  }

  /**
   * Get aggregationInterval
   * @return aggregationInterval
   */
  @javax.annotation.Nullable
  public AggregationIntervalEnum getAggregationInterval() {
    return aggregationInterval;
  }

  public void setAggregationInterval(AggregationIntervalEnum aggregationInterval) {
    this.aggregationInterval = aggregationInterval;
  }


  public AggregationInfo aggregationLevel(AggregationLevelEnum aggregationLevel) {
    this.aggregationLevel = aggregationLevel;
    return this;
  }

  /**
   * Get aggregationLevel
   * @return aggregationLevel
   */
  @javax.annotation.Nullable
  public AggregationLevelEnum getAggregationLevel() {
    return aggregationLevel;
  }

  public void setAggregationLevel(AggregationLevelEnum aggregationLevel) {
    this.aggregationLevel = aggregationLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationInfo aggregationInfo = (AggregationInfo) o;
    return Objects.equals(this.aggregationCount, aggregationInfo.aggregationCount) &&
        Objects.equals(this.aggregationInterval, aggregationInfo.aggregationInterval) &&
        Objects.equals(this.aggregationLevel, aggregationInfo.aggregationLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationCount, aggregationInterval, aggregationLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationInfo {\n");
    sb.append("    aggregationCount: ").append(toIndentedString(aggregationCount)).append("\n");
    sb.append("    aggregationInterval: ").append(toIndentedString(aggregationInterval)).append("\n");
    sb.append("    aggregationLevel: ").append(toIndentedString(aggregationLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationCount");
    openapiFields.add("aggregationInterval");
    openapiFields.add("aggregationLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationInfo is not found in the empty JSON string", AggregationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationInterval") != null && !jsonObj.get("aggregationInterval").isJsonNull()) && !jsonObj.get("aggregationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationInterval").toString()));
      }
      // validate the optional field `aggregationInterval`
      if (jsonObj.get("aggregationInterval") != null && !jsonObj.get("aggregationInterval").isJsonNull()) {
        AggregationIntervalEnum.validateJsonElement(jsonObj.get("aggregationInterval"));
      }
      if ((jsonObj.get("aggregationLevel") != null && !jsonObj.get("aggregationLevel").isJsonNull()) && !jsonObj.get("aggregationLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationLevel").toString()));
      }
      // validate the optional field `aggregationLevel`
      if (jsonObj.get("aggregationLevel") != null && !jsonObj.get("aggregationLevel").isJsonNull()) {
        AggregationLevelEnum.validateJsonElement(jsonObj.get("aggregationLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationInfo>() {
           @Override
           public void write(JsonWriter out, AggregationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregationInfo
   * @throws IOException if the JSON string is invalid with respect to AggregationInfo
   */
  public static AggregationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationInfo.class);
  }

  /**
   * Convert an instance of AggregationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

