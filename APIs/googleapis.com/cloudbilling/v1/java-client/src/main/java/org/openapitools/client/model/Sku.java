/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.GeoTaxonomy;
import org.openapitools.client.model.PricingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates a single SKU in Google Cloud Platform
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:16.458931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sku {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GEO_TAXONOMY = "geoTaxonomy";
  @SerializedName(SERIALIZED_NAME_GEO_TAXONOMY)
  private GeoTaxonomy geoTaxonomy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICING_INFO = "pricingInfo";
  @SerializedName(SERIALIZED_NAME_PRICING_INFO)
  private List<PricingInfo> pricingInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public static final String SERIALIZED_NAME_SERVICE_REGIONS = "serviceRegions";
  @SerializedName(SERIALIZED_NAME_SERVICE_REGIONS)
  private List<String> serviceRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public Sku() {
  }

  public Sku category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public Sku description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human readable description of the SKU, has a maximum length of 256 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Sku geoTaxonomy(GeoTaxonomy geoTaxonomy) {
    this.geoTaxonomy = geoTaxonomy;
    return this;
  }

  /**
   * Get geoTaxonomy
   * @return geoTaxonomy
   */
  @javax.annotation.Nullable
  public GeoTaxonomy getGeoTaxonomy() {
    return geoTaxonomy;
  }

  public void setGeoTaxonomy(GeoTaxonomy geoTaxonomy) {
    this.geoTaxonomy = geoTaxonomy;
  }


  public Sku name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name for the SKU. Example: \&quot;services/DA34-426B-A397/skus/AA95-CD31-42FE\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sku pricingInfo(List<PricingInfo> pricingInfo) {
    this.pricingInfo = pricingInfo;
    return this;
  }

  public Sku addPricingInfoItem(PricingInfo pricingInfoItem) {
    if (this.pricingInfo == null) {
      this.pricingInfo = new ArrayList<>();
    }
    this.pricingInfo.add(pricingInfoItem);
    return this;
  }

  /**
   * A timeline of pricing info for this SKU in chronological order.
   * @return pricingInfo
   */
  @javax.annotation.Nullable
  public List<PricingInfo> getPricingInfo() {
    return pricingInfo;
  }

  public void setPricingInfo(List<PricingInfo> pricingInfo) {
    this.pricingInfo = pricingInfo;
  }


  public Sku serviceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
    return this;
  }

  /**
   * Identifies the service provider. This is &#39;Google&#39; for first party services in Google Cloud Platform.
   * @return serviceProviderName
   */
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }

  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }


  public Sku serviceRegions(List<String> serviceRegions) {
    this.serviceRegions = serviceRegions;
    return this;
  }

  public Sku addServiceRegionsItem(String serviceRegionsItem) {
    if (this.serviceRegions == null) {
      this.serviceRegions = new ArrayList<>();
    }
    this.serviceRegions.add(serviceRegionsItem);
    return this;
  }

  /**
   * List of service regions this SKU is offered at. Example: \&quot;asia-east1\&quot; Service regions can be found at https://cloud.google.com/about/locations/
   * @return serviceRegions
   */
  @javax.annotation.Nullable
  public List<String> getServiceRegions() {
    return serviceRegions;
  }

  public void setServiceRegions(List<String> serviceRegions) {
    this.serviceRegions = serviceRegions;
  }


  public Sku skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * The identifier for the SKU. Example: \&quot;AA95-CD31-42FE\&quot;
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sku sku = (Sku) o;
    return Objects.equals(this.category, sku.category) &&
        Objects.equals(this.description, sku.description) &&
        Objects.equals(this.geoTaxonomy, sku.geoTaxonomy) &&
        Objects.equals(this.name, sku.name) &&
        Objects.equals(this.pricingInfo, sku.pricingInfo) &&
        Objects.equals(this.serviceProviderName, sku.serviceProviderName) &&
        Objects.equals(this.serviceRegions, sku.serviceRegions) &&
        Objects.equals(this.skuId, sku.skuId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, description, geoTaxonomy, name, pricingInfo, serviceProviderName, serviceRegions, skuId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sku {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    geoTaxonomy: ").append(toIndentedString(geoTaxonomy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pricingInfo: ").append(toIndentedString(pricingInfo)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("    serviceRegions: ").append(toIndentedString(serviceRegions)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("geoTaxonomy");
    openapiFields.add("name");
    openapiFields.add("pricingInfo");
    openapiFields.add("serviceProviderName");
    openapiFields.add("serviceRegions");
    openapiFields.add("skuId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sku is not found in the empty JSON string", Sku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `geoTaxonomy`
      if (jsonObj.get("geoTaxonomy") != null && !jsonObj.get("geoTaxonomy").isJsonNull()) {
        GeoTaxonomy.validateJsonElement(jsonObj.get("geoTaxonomy"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("pricingInfo") != null && !jsonObj.get("pricingInfo").isJsonNull()) {
        JsonArray jsonArraypricingInfo = jsonObj.getAsJsonArray("pricingInfo");
        if (jsonArraypricingInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pricingInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pricingInfo` to be an array in the JSON string but got `%s`", jsonObj.get("pricingInfo").toString()));
          }

          // validate the optional field `pricingInfo` (array)
          for (int i = 0; i < jsonArraypricingInfo.size(); i++) {
            PricingInfo.validateJsonElement(jsonArraypricingInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceRegions") != null && !jsonObj.get("serviceRegions").isJsonNull() && !jsonObj.get("serviceRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceRegions` to be an array in the JSON string but got `%s`", jsonObj.get("serviceRegions").toString()));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sku.class));

       return (TypeAdapter<T>) new TypeAdapter<Sku>() {
           @Override
           public void write(JsonWriter out, Sku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sku
   * @throws IOException if the JSON string is invalid with respect to Sku
   */
  public static Sku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sku.class);
  }

  /**
   * Convert an instance of Sku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

