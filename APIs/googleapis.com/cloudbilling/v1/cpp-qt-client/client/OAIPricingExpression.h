/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPricingExpression.h
 *
 * Expresses a mathematical pricing formula. For Example:- &#x60;usage_unit: GBy&#x60; &#x60;tiered_rates:&#x60; &#x60;[start_usage_amount: 20, unit_price: $10]&#x60; &#x60;[start_usage_amount: 100, unit_price: $5]&#x60; The above expresses a pricing formula where the first 20GB is free, the next 80GB is priced at $10 per GB followed by $5 per GB for additional usage.
 */

#ifndef OAIPricingExpression_H
#define OAIPricingExpression_H

#include <QJsonObject>

#include "OAITierRate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITierRate;

class OAIPricingExpression : public OAIObject {
public:
    OAIPricingExpression();
    OAIPricingExpression(QString json);
    ~OAIPricingExpression() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaseUnit() const;
    void setBaseUnit(const QString &base_unit);
    bool is_base_unit_Set() const;
    bool is_base_unit_Valid() const;

    double getBaseUnitConversionFactor() const;
    void setBaseUnitConversionFactor(const double &base_unit_conversion_factor);
    bool is_base_unit_conversion_factor_Set() const;
    bool is_base_unit_conversion_factor_Valid() const;

    QString getBaseUnitDescription() const;
    void setBaseUnitDescription(const QString &base_unit_description);
    bool is_base_unit_description_Set() const;
    bool is_base_unit_description_Valid() const;

    double getDisplayQuantity() const;
    void setDisplayQuantity(const double &display_quantity);
    bool is_display_quantity_Set() const;
    bool is_display_quantity_Valid() const;

    QList<OAITierRate> getTieredRates() const;
    void setTieredRates(const QList<OAITierRate> &tiered_rates);
    bool is_tiered_rates_Set() const;
    bool is_tiered_rates_Valid() const;

    QString getUsageUnit() const;
    void setUsageUnit(const QString &usage_unit);
    bool is_usage_unit_Set() const;
    bool is_usage_unit_Valid() const;

    QString getUsageUnitDescription() const;
    void setUsageUnitDescription(const QString &usage_unit_description);
    bool is_usage_unit_description_Set() const;
    bool is_usage_unit_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_unit;
    bool m_base_unit_isSet;
    bool m_base_unit_isValid;

    double m_base_unit_conversion_factor;
    bool m_base_unit_conversion_factor_isSet;
    bool m_base_unit_conversion_factor_isValid;

    QString m_base_unit_description;
    bool m_base_unit_description_isSet;
    bool m_base_unit_description_isValid;

    double m_display_quantity;
    bool m_display_quantity_isSet;
    bool m_display_quantity_isValid;

    QList<OAITierRate> m_tiered_rates;
    bool m_tiered_rates_isSet;
    bool m_tiered_rates_isValid;

    QString m_usage_unit;
    bool m_usage_unit_isSet;
    bool m_usage_unit_isValid;

    QString m_usage_unit_description;
    bool m_usage_unit_description_isSet;
    bool m_usage_unit_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPricingExpression)

#endif // OAIPricingExpression_H
