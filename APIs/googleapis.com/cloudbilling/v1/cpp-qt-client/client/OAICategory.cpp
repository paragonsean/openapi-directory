/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_resource_family_isSet = false;
    m_resource_family_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_service_display_name_isSet = false;
    m_service_display_name_isValid = false;

    m_usage_type_isSet = false;
    m_usage_type_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_resource_family_isValid = ::OpenAPI::fromJsonValue(m_resource_family, json[QString("resourceFamily")]);
    m_resource_family_isSet = !json[QString("resourceFamily")].isNull() && m_resource_family_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_service_display_name_isValid = ::OpenAPI::fromJsonValue(m_service_display_name, json[QString("serviceDisplayName")]);
    m_service_display_name_isSet = !json[QString("serviceDisplayName")].isNull() && m_service_display_name_isValid;

    m_usage_type_isValid = ::OpenAPI::fromJsonValue(m_usage_type, json[QString("usageType")]);
    m_usage_type_isSet = !json[QString("usageType")].isNull() && m_usage_type_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_family_isSet) {
        obj.insert(QString("resourceFamily"), ::OpenAPI::toJsonValue(m_resource_family));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_service_display_name_isSet) {
        obj.insert(QString("serviceDisplayName"), ::OpenAPI::toJsonValue(m_service_display_name));
    }
    if (m_usage_type_isSet) {
        obj.insert(QString("usageType"), ::OpenAPI::toJsonValue(m_usage_type));
    }
    return obj;
}

QString OAICategory::getResourceFamily() const {
    return m_resource_family;
}
void OAICategory::setResourceFamily(const QString &resource_family) {
    m_resource_family = resource_family;
    m_resource_family_isSet = true;
}

bool OAICategory::is_resource_family_Set() const{
    return m_resource_family_isSet;
}

bool OAICategory::is_resource_family_Valid() const{
    return m_resource_family_isValid;
}

QString OAICategory::getResourceGroup() const {
    return m_resource_group;
}
void OAICategory::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAICategory::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAICategory::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAICategory::getServiceDisplayName() const {
    return m_service_display_name;
}
void OAICategory::setServiceDisplayName(const QString &service_display_name) {
    m_service_display_name = service_display_name;
    m_service_display_name_isSet = true;
}

bool OAICategory::is_service_display_name_Set() const{
    return m_service_display_name_isSet;
}

bool OAICategory::is_service_display_name_Valid() const{
    return m_service_display_name_isValid;
}

QString OAICategory::getUsageType() const {
    return m_usage_type;
}
void OAICategory::setUsageType(const QString &usage_type) {
    m_usage_type = usage_type;
    m_usage_type_isSet = true;
}

bool OAICategory::is_usage_type_Set() const{
    return m_usage_type_isSet;
}

bool OAICategory::is_usage_type_Valid() const{
    return m_usage_type_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
