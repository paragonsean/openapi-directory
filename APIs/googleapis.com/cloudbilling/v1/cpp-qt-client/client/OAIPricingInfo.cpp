/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingInfo::OAIPricingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingInfo::OAIPricingInfo() {
    this->initializeModel();
}

OAIPricingInfo::~OAIPricingInfo() {}

void OAIPricingInfo::initializeModel() {

    m_aggregation_info_isSet = false;
    m_aggregation_info_isValid = false;

    m_currency_conversion_rate_isSet = false;
    m_currency_conversion_rate_isValid = false;

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;

    m_pricing_expression_isSet = false;
    m_pricing_expression_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIPricingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingInfo::fromJsonObject(QJsonObject json) {

    m_aggregation_info_isValid = ::OpenAPI::fromJsonValue(m_aggregation_info, json[QString("aggregationInfo")]);
    m_aggregation_info_isSet = !json[QString("aggregationInfo")].isNull() && m_aggregation_info_isValid;

    m_currency_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_conversion_rate, json[QString("currencyConversionRate")]);
    m_currency_conversion_rate_isSet = !json[QString("currencyConversionRate")].isNull() && m_currency_conversion_rate_isValid;

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;

    m_pricing_expression_isValid = ::OpenAPI::fromJsonValue(m_pricing_expression, json[QString("pricingExpression")]);
    m_pricing_expression_isSet = !json[QString("pricingExpression")].isNull() && m_pricing_expression_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIPricingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_info.isSet()) {
        obj.insert(QString("aggregationInfo"), ::OpenAPI::toJsonValue(m_aggregation_info));
    }
    if (m_currency_conversion_rate_isSet) {
        obj.insert(QString("currencyConversionRate"), ::OpenAPI::toJsonValue(m_currency_conversion_rate));
    }
    if (m_effective_time_isSet) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    if (m_pricing_expression.isSet()) {
        obj.insert(QString("pricingExpression"), ::OpenAPI::toJsonValue(m_pricing_expression));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

OAIAggregationInfo OAIPricingInfo::getAggregationInfo() const {
    return m_aggregation_info;
}
void OAIPricingInfo::setAggregationInfo(const OAIAggregationInfo &aggregation_info) {
    m_aggregation_info = aggregation_info;
    m_aggregation_info_isSet = true;
}

bool OAIPricingInfo::is_aggregation_info_Set() const{
    return m_aggregation_info_isSet;
}

bool OAIPricingInfo::is_aggregation_info_Valid() const{
    return m_aggregation_info_isValid;
}

double OAIPricingInfo::getCurrencyConversionRate() const {
    return m_currency_conversion_rate;
}
void OAIPricingInfo::setCurrencyConversionRate(const double &currency_conversion_rate) {
    m_currency_conversion_rate = currency_conversion_rate;
    m_currency_conversion_rate_isSet = true;
}

bool OAIPricingInfo::is_currency_conversion_rate_Set() const{
    return m_currency_conversion_rate_isSet;
}

bool OAIPricingInfo::is_currency_conversion_rate_Valid() const{
    return m_currency_conversion_rate_isValid;
}

QString OAIPricingInfo::getEffectiveTime() const {
    return m_effective_time;
}
void OAIPricingInfo::setEffectiveTime(const QString &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIPricingInfo::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIPricingInfo::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

OAIPricingExpression OAIPricingInfo::getPricingExpression() const {
    return m_pricing_expression;
}
void OAIPricingInfo::setPricingExpression(const OAIPricingExpression &pricing_expression) {
    m_pricing_expression = pricing_expression;
    m_pricing_expression_isSet = true;
}

bool OAIPricingInfo::is_pricing_expression_Set() const{
    return m_pricing_expression_isSet;
}

bool OAIPricingInfo::is_pricing_expression_Valid() const{
    return m_pricing_expression_isValid;
}

QString OAIPricingInfo::getSummary() const {
    return m_summary;
}
void OAIPricingInfo::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPricingInfo::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPricingInfo::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIPricingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
