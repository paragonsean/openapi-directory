/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISku::OAISku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISku::OAISku() {
    this->initializeModel();
}

OAISku::~OAISku() {}

void OAISku::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_geo_taxonomy_isSet = false;
    m_geo_taxonomy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pricing_info_isSet = false;
    m_pricing_info_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;

    m_service_regions_isSet = false;
    m_service_regions_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;
}

void OAISku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISku::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_geo_taxonomy_isValid = ::OpenAPI::fromJsonValue(m_geo_taxonomy, json[QString("geoTaxonomy")]);
    m_geo_taxonomy_isSet = !json[QString("geoTaxonomy")].isNull() && m_geo_taxonomy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pricing_info_isValid = ::OpenAPI::fromJsonValue(m_pricing_info, json[QString("pricingInfo")]);
    m_pricing_info_isSet = !json[QString("pricingInfo")].isNull() && m_pricing_info_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("serviceProviderName")]);
    m_service_provider_name_isSet = !json[QString("serviceProviderName")].isNull() && m_service_provider_name_isValid;

    m_service_regions_isValid = ::OpenAPI::fromJsonValue(m_service_regions, json[QString("serviceRegions")]);
    m_service_regions_isSet = !json[QString("serviceRegions")].isNull() && m_service_regions_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;
}

QString OAISku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISku::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_geo_taxonomy.isSet()) {
        obj.insert(QString("geoTaxonomy"), ::OpenAPI::toJsonValue(m_geo_taxonomy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pricing_info.size() > 0) {
        obj.insert(QString("pricingInfo"), ::OpenAPI::toJsonValue(m_pricing_info));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("serviceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    if (m_service_regions.size() > 0) {
        obj.insert(QString("serviceRegions"), ::OpenAPI::toJsonValue(m_service_regions));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    return obj;
}

OAICategory OAISku::getCategory() const {
    return m_category;
}
void OAISku::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISku::is_category_Set() const{
    return m_category_isSet;
}

bool OAISku::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISku::getDescription() const {
    return m_description;
}
void OAISku::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISku::is_description_Set() const{
    return m_description_isSet;
}

bool OAISku::is_description_Valid() const{
    return m_description_isValid;
}

OAIGeoTaxonomy OAISku::getGeoTaxonomy() const {
    return m_geo_taxonomy;
}
void OAISku::setGeoTaxonomy(const OAIGeoTaxonomy &geo_taxonomy) {
    m_geo_taxonomy = geo_taxonomy;
    m_geo_taxonomy_isSet = true;
}

bool OAISku::is_geo_taxonomy_Set() const{
    return m_geo_taxonomy_isSet;
}

bool OAISku::is_geo_taxonomy_Valid() const{
    return m_geo_taxonomy_isValid;
}

QString OAISku::getName() const {
    return m_name;
}
void OAISku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISku::is_name_Set() const{
    return m_name_isSet;
}

bool OAISku::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPricingInfo> OAISku::getPricingInfo() const {
    return m_pricing_info;
}
void OAISku::setPricingInfo(const QList<OAIPricingInfo> &pricing_info) {
    m_pricing_info = pricing_info;
    m_pricing_info_isSet = true;
}

bool OAISku::is_pricing_info_Set() const{
    return m_pricing_info_isSet;
}

bool OAISku::is_pricing_info_Valid() const{
    return m_pricing_info_isValid;
}

QString OAISku::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAISku::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAISku::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAISku::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

QList<QString> OAISku::getServiceRegions() const {
    return m_service_regions;
}
void OAISku::setServiceRegions(const QList<QString> &service_regions) {
    m_service_regions = service_regions;
    m_service_regions_isSet = true;
}

bool OAISku::is_service_regions_Set() const{
    return m_service_regions_isSet;
}

bool OAISku::is_service_regions_Valid() const{
    return m_service_regions_isValid;
}

QString OAISku::getSkuId() const {
    return m_sku_id;
}
void OAISku::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISku::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISku::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

bool OAISku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_taxonomy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISku::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
