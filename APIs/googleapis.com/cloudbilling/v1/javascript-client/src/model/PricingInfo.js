/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationInfo from './AggregationInfo';
import PricingExpression from './PricingExpression';

/**
 * The PricingInfo model module.
 * @module model/PricingInfo
 * @version v1
 */
class PricingInfo {
    /**
     * Constructs a new <code>PricingInfo</code>.
     * Represents the pricing information for a SKU at a single point of time.
     * @alias module:model/PricingInfo
     */
    constructor() { 
        
        PricingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PricingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricingInfo} obj Optional instance to populate.
     * @return {module:model/PricingInfo} The populated <code>PricingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricingInfo();

            if (data.hasOwnProperty('aggregationInfo')) {
                obj['aggregationInfo'] = AggregationInfo.constructFromObject(data['aggregationInfo']);
            }
            if (data.hasOwnProperty('currencyConversionRate')) {
                obj['currencyConversionRate'] = ApiClient.convertToType(data['currencyConversionRate'], 'Number');
            }
            if (data.hasOwnProperty('effectiveTime')) {
                obj['effectiveTime'] = ApiClient.convertToType(data['effectiveTime'], 'String');
            }
            if (data.hasOwnProperty('pricingExpression')) {
                obj['pricingExpression'] = PricingExpression.constructFromObject(data['pricingExpression']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricingInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregationInfo`
        if (data['aggregationInfo']) { // data not null
          AggregationInfo.validateJSON(data['aggregationInfo']);
        }
        // ensure the json data is a string
        if (data['effectiveTime'] && !(typeof data['effectiveTime'] === 'string' || data['effectiveTime'] instanceof String)) {
            throw new Error("Expected the field `effectiveTime` to be a primitive type in the JSON string but got " + data['effectiveTime']);
        }
        // validate the optional field `pricingExpression`
        if (data['pricingExpression']) { // data not null
          PricingExpression.validateJSON(data['pricingExpression']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregationInfo} aggregationInfo
 */
PricingInfo.prototype['aggregationInfo'] = undefined;

/**
 * Conversion rate used for currency conversion, from USD to the currency specified in the request. This includes any surcharge collected for billing in non USD currency. If a currency is not specified in the request this defaults to 1.0. Example: USD * currency_conversion_rate = JPY
 * @member {Number} currencyConversionRate
 */
PricingInfo.prototype['currencyConversionRate'] = undefined;

/**
 * The timestamp from which this pricing was effective within the requested time range. This is guaranteed to be greater than or equal to the start_time field in the request and less than the end_time field in the request. If a time range was not specified in the request this field will be equivalent to a time within the last 12 hours, indicating the latest pricing info.
 * @member {String} effectiveTime
 */
PricingInfo.prototype['effectiveTime'] = undefined;

/**
 * @member {module:model/PricingExpression} pricingExpression
 */
PricingInfo.prototype['pricingExpression'] = undefined;

/**
 * An optional human readable summary of the pricing information, has a maximum length of 256 characters.
 * @member {String} summary
 */
PricingInfo.prototype['summary'] = undefined;






export default PricingInfo;

