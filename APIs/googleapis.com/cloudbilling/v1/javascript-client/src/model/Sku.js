/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import GeoTaxonomy from './GeoTaxonomy';
import PricingInfo from './PricingInfo';

/**
 * The Sku model module.
 * @module model/Sku
 * @version v1
 */
class Sku {
    /**
     * Constructs a new <code>Sku</code>.
     * Encapsulates a single SKU in Google Cloud Platform
     * @alias module:model/Sku
     */
    constructor() { 
        
        Sku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sku} obj Optional instance to populate.
     * @return {module:model/Sku} The populated <code>Sku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sku();

            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('geoTaxonomy')) {
                obj['geoTaxonomy'] = GeoTaxonomy.constructFromObject(data['geoTaxonomy']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pricingInfo')) {
                obj['pricingInfo'] = ApiClient.convertToType(data['pricingInfo'], [PricingInfo]);
            }
            if (data.hasOwnProperty('serviceProviderName')) {
                obj['serviceProviderName'] = ApiClient.convertToType(data['serviceProviderName'], 'String');
            }
            if (data.hasOwnProperty('serviceRegions')) {
                obj['serviceRegions'] = ApiClient.convertToType(data['serviceRegions'], ['String']);
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sku</code>.
     */
    static validateJSON(data) {
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `geoTaxonomy`
        if (data['geoTaxonomy']) { // data not null
          GeoTaxonomy.validateJSON(data['geoTaxonomy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['pricingInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pricingInfo'])) {
                throw new Error("Expected the field `pricingInfo` to be an array in the JSON data but got " + data['pricingInfo']);
            }
            // validate the optional field `pricingInfo` (array)
            for (const item of data['pricingInfo']) {
                PricingInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceProviderName'] && !(typeof data['serviceProviderName'] === 'string' || data['serviceProviderName'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got " + data['serviceProviderName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceRegions'])) {
            throw new Error("Expected the field `serviceRegions` to be an array in the JSON data but got " + data['serviceRegions']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Category} category
 */
Sku.prototype['category'] = undefined;

/**
 * A human readable description of the SKU, has a maximum length of 256 characters.
 * @member {String} description
 */
Sku.prototype['description'] = undefined;

/**
 * @member {module:model/GeoTaxonomy} geoTaxonomy
 */
Sku.prototype['geoTaxonomy'] = undefined;

/**
 * The resource name for the SKU. Example: \"services/DA34-426B-A397/skus/AA95-CD31-42FE\"
 * @member {String} name
 */
Sku.prototype['name'] = undefined;

/**
 * A timeline of pricing info for this SKU in chronological order.
 * @member {Array.<module:model/PricingInfo>} pricingInfo
 */
Sku.prototype['pricingInfo'] = undefined;

/**
 * Identifies the service provider. This is 'Google' for first party services in Google Cloud Platform.
 * @member {String} serviceProviderName
 */
Sku.prototype['serviceProviderName'] = undefined;

/**
 * List of service regions this SKU is offered at. Example: \"asia-east1\" Service regions can be found at https://cloud.google.com/about/locations/
 * @member {Array.<String>} serviceRegions
 */
Sku.prototype['serviceRegions'] = undefined;

/**
 * The identifier for the SKU. Example: \"AA95-CD31-42FE\"
 * @member {String} skuId
 */
Sku.prototype['skuId'] = undefined;






export default Sku;

