/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TierRate from './TierRate';

/**
 * The PricingExpression model module.
 * @module model/PricingExpression
 * @version v1
 */
class PricingExpression {
    /**
     * Constructs a new <code>PricingExpression</code>.
     * Expresses a mathematical pricing formula. For Example:- &#x60;usage_unit: GBy&#x60; &#x60;tiered_rates:&#x60; &#x60;[start_usage_amount: 20, unit_price: $10]&#x60; &#x60;[start_usage_amount: 100, unit_price: $5]&#x60; The above expresses a pricing formula where the first 20GB is free, the next 80GB is priced at $10 per GB followed by $5 per GB for additional usage.
     * @alias module:model/PricingExpression
     */
    constructor() { 
        
        PricingExpression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PricingExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricingExpression} obj Optional instance to populate.
     * @return {module:model/PricingExpression} The populated <code>PricingExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricingExpression();

            if (data.hasOwnProperty('baseUnit')) {
                obj['baseUnit'] = ApiClient.convertToType(data['baseUnit'], 'String');
            }
            if (data.hasOwnProperty('baseUnitConversionFactor')) {
                obj['baseUnitConversionFactor'] = ApiClient.convertToType(data['baseUnitConversionFactor'], 'Number');
            }
            if (data.hasOwnProperty('baseUnitDescription')) {
                obj['baseUnitDescription'] = ApiClient.convertToType(data['baseUnitDescription'], 'String');
            }
            if (data.hasOwnProperty('displayQuantity')) {
                obj['displayQuantity'] = ApiClient.convertToType(data['displayQuantity'], 'Number');
            }
            if (data.hasOwnProperty('tieredRates')) {
                obj['tieredRates'] = ApiClient.convertToType(data['tieredRates'], [TierRate]);
            }
            if (data.hasOwnProperty('usageUnit')) {
                obj['usageUnit'] = ApiClient.convertToType(data['usageUnit'], 'String');
            }
            if (data.hasOwnProperty('usageUnitDescription')) {
                obj['usageUnitDescription'] = ApiClient.convertToType(data['usageUnitDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricingExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricingExpression</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseUnit'] && !(typeof data['baseUnit'] === 'string' || data['baseUnit'] instanceof String)) {
            throw new Error("Expected the field `baseUnit` to be a primitive type in the JSON string but got " + data['baseUnit']);
        }
        // ensure the json data is a string
        if (data['baseUnitDescription'] && !(typeof data['baseUnitDescription'] === 'string' || data['baseUnitDescription'] instanceof String)) {
            throw new Error("Expected the field `baseUnitDescription` to be a primitive type in the JSON string but got " + data['baseUnitDescription']);
        }
        if (data['tieredRates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tieredRates'])) {
                throw new Error("Expected the field `tieredRates` to be an array in the JSON data but got " + data['tieredRates']);
            }
            // validate the optional field `tieredRates` (array)
            for (const item of data['tieredRates']) {
                TierRate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['usageUnit'] && !(typeof data['usageUnit'] === 'string' || data['usageUnit'] instanceof String)) {
            throw new Error("Expected the field `usageUnit` to be a primitive type in the JSON string but got " + data['usageUnit']);
        }
        // ensure the json data is a string
        if (data['usageUnitDescription'] && !(typeof data['usageUnitDescription'] === 'string' || data['usageUnitDescription'] instanceof String)) {
            throw new Error("Expected the field `usageUnitDescription` to be a primitive type in the JSON string but got " + data['usageUnitDescription']);
        }

        return true;
    }


}



/**
 * The base unit for the SKU which is the unit used in usage exports. Example: \"By\"
 * @member {String} baseUnit
 */
PricingExpression.prototype['baseUnit'] = undefined;

/**
 * Conversion factor for converting from price per usage_unit to price per base_unit, and start_usage_amount to start_usage_amount in base_unit. unit_price / base_unit_conversion_factor = price per base_unit. start_usage_amount * base_unit_conversion_factor = start_usage_amount in base_unit.
 * @member {Number} baseUnitConversionFactor
 */
PricingExpression.prototype['baseUnitConversionFactor'] = undefined;

/**
 * The base unit in human readable form. Example: \"byte\".
 * @member {String} baseUnitDescription
 */
PricingExpression.prototype['baseUnitDescription'] = undefined;

/**
 * The recommended quantity of units for displaying pricing info. When displaying pricing info it is recommended to display: (unit_price * display_quantity) per display_quantity usage_unit. This field does not affect the pricing formula and is for display purposes only. Example: If the unit_price is \"0.0001 USD\", the usage_unit is \"GB\" and the display_quantity is \"1000\" then the recommended way of displaying the pricing info is \"0.10 USD per 1000 GB\"
 * @member {Number} displayQuantity
 */
PricingExpression.prototype['displayQuantity'] = undefined;

/**
 * The list of tiered rates for this pricing. The total cost is computed by applying each of the tiered rates on usage. This repeated list is sorted by ascending order of start_usage_amount.
 * @member {Array.<module:model/TierRate>} tieredRates
 */
PricingExpression.prototype['tieredRates'] = undefined;

/**
 * The short hand for unit of usage this pricing is specified in. Example: usage_unit of \"GiBy\" means that usage is specified in \"Gibi Byte\".
 * @member {String} usageUnit
 */
PricingExpression.prototype['usageUnit'] = undefined;

/**
 * The unit of usage in human readable form. Example: \"gibi byte\".
 * @member {String} usageUnitDescription
 */
PricingExpression.prototype['usageUnitDescription'] = undefined;






export default PricingExpression;

