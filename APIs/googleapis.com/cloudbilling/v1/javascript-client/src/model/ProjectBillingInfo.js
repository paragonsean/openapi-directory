/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectBillingInfo model module.
 * @module model/ProjectBillingInfo
 * @version v1
 */
class ProjectBillingInfo {
    /**
     * Constructs a new <code>ProjectBillingInfo</code>.
     * Encapsulation of billing information for a Google Cloud Console project. A project has at most one associated billing account at a time (but a billing account can be assigned to multiple projects).
     * @alias module:model/ProjectBillingInfo
     */
    constructor() { 
        
        ProjectBillingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectBillingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectBillingInfo} obj Optional instance to populate.
     * @return {module:model/ProjectBillingInfo} The populated <code>ProjectBillingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectBillingInfo();

            if (data.hasOwnProperty('billingAccountName')) {
                obj['billingAccountName'] = ApiClient.convertToType(data['billingAccountName'], 'String');
            }
            if (data.hasOwnProperty('billingEnabled')) {
                obj['billingEnabled'] = ApiClient.convertToType(data['billingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectBillingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectBillingInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingAccountName'] && !(typeof data['billingAccountName'] === 'string' || data['billingAccountName'] instanceof String)) {
            throw new Error("Expected the field `billingAccountName` to be a primitive type in the JSON string but got " + data['billingAccountName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }

        return true;
    }


}



/**
 * The resource name of the billing account associated with the project, if any. For example, `billingAccounts/012345-567890-ABCDEF`.
 * @member {String} billingAccountName
 */
ProjectBillingInfo.prototype['billingAccountName'] = undefined;

/**
 * Output only. True if the project is associated with an open billing account, to which usage on the project is charged. False if the project is associated with a closed billing account, or no billing account at all, and therefore cannot use paid services.
 * @member {Boolean} billingEnabled
 */
ProjectBillingInfo.prototype['billingEnabled'] = undefined;

/**
 * Output only. The resource name for the `ProjectBillingInfo`; has the form `projects/{project_id}/billingInfo`. For example, the resource name for the billing information for project `tokyo-rain-123` would be `projects/tokyo-rain-123/billingInfo`.
 * @member {String} name
 */
ProjectBillingInfo.prototype['name'] = undefined;

/**
 * Output only. The ID of the project that this `ProjectBillingInfo` represents, such as `tokyo-rain-123`. This is a convenience field so that you don't need to parse the `name` field to obtain a project ID.
 * @member {String} projectId
 */
ProjectBillingInfo.prototype['projectId'] = undefined;






export default ProjectBillingInfo;

