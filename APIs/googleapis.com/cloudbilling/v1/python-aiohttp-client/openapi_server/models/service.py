# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_entity_name: str=None, display_name: str=None, name: str=None, service_id: str=None):
        """Service - a model defined in OpenAPI

        :param business_entity_name: The business_entity_name of this Service.
        :param display_name: The display_name of this Service.
        :param name: The name of this Service.
        :param service_id: The service_id of this Service.
        """
        self.openapi_types = {
            'business_entity_name': str,
            'display_name': str,
            'name': str,
            'service_id': str
        }

        self.attribute_map = {
            'business_entity_name': 'businessEntityName',
            'display_name': 'displayName',
            'name': 'name',
            'service_id': 'serviceId'
        }

        self._business_entity_name = business_entity_name
        self._display_name = display_name
        self._name = name
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_entity_name(self):
        """Gets the business_entity_name of this Service.

        The business under which the service is offered. Ex. \"businessEntities/GCP\", \"businessEntities/Maps\"

        :return: The business_entity_name of this Service.
        :rtype: str
        """
        return self._business_entity_name

    @business_entity_name.setter
    def business_entity_name(self, business_entity_name):
        """Sets the business_entity_name of this Service.

        The business under which the service is offered. Ex. \"businessEntities/GCP\", \"businessEntities/Maps\"

        :param business_entity_name: The business_entity_name of this Service.
        :type business_entity_name: str
        """

        self._business_entity_name = business_entity_name

    @property
    def display_name(self):
        """Gets the display_name of this Service.

        A human readable display name for this service.

        :return: The display_name of this Service.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Service.

        A human readable display name for this service.

        :param display_name: The display_name of this Service.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Service.

        The resource name for the service. Example: \"services/DA34-426B-A397\"

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The resource name for the service. Example: \"services/DA34-426B-A397\"

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def service_id(self):
        """Gets the service_id of this Service.

        The identifier for the service. Example: \"DA34-426B-A397\"

        :return: The service_id of this Service.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Service.

        The identifier for the service. Example: \"DA34-426B-A397\"

        :param service_id: The service_id of this Service.
        :type service_id: str
        """

        self._service_id = service_id
