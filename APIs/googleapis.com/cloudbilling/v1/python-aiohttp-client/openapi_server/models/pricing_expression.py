# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tier_rate import TierRate
from openapi_server import util


class PricingExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_unit: str=None, base_unit_conversion_factor: float=None, base_unit_description: str=None, display_quantity: float=None, tiered_rates: List[TierRate]=None, usage_unit: str=None, usage_unit_description: str=None):
        """PricingExpression - a model defined in OpenAPI

        :param base_unit: The base_unit of this PricingExpression.
        :param base_unit_conversion_factor: The base_unit_conversion_factor of this PricingExpression.
        :param base_unit_description: The base_unit_description of this PricingExpression.
        :param display_quantity: The display_quantity of this PricingExpression.
        :param tiered_rates: The tiered_rates of this PricingExpression.
        :param usage_unit: The usage_unit of this PricingExpression.
        :param usage_unit_description: The usage_unit_description of this PricingExpression.
        """
        self.openapi_types = {
            'base_unit': str,
            'base_unit_conversion_factor': float,
            'base_unit_description': str,
            'display_quantity': float,
            'tiered_rates': List[TierRate],
            'usage_unit': str,
            'usage_unit_description': str
        }

        self.attribute_map = {
            'base_unit': 'baseUnit',
            'base_unit_conversion_factor': 'baseUnitConversionFactor',
            'base_unit_description': 'baseUnitDescription',
            'display_quantity': 'displayQuantity',
            'tiered_rates': 'tieredRates',
            'usage_unit': 'usageUnit',
            'usage_unit_description': 'usageUnitDescription'
        }

        self._base_unit = base_unit
        self._base_unit_conversion_factor = base_unit_conversion_factor
        self._base_unit_description = base_unit_description
        self._display_quantity = display_quantity
        self._tiered_rates = tiered_rates
        self._usage_unit = usage_unit
        self._usage_unit_description = usage_unit_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingExpression of this PricingExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_unit(self):
        """Gets the base_unit of this PricingExpression.

        The base unit for the SKU which is the unit used in usage exports. Example: \"By\"

        :return: The base_unit of this PricingExpression.
        :rtype: str
        """
        return self._base_unit

    @base_unit.setter
    def base_unit(self, base_unit):
        """Sets the base_unit of this PricingExpression.

        The base unit for the SKU which is the unit used in usage exports. Example: \"By\"

        :param base_unit: The base_unit of this PricingExpression.
        :type base_unit: str
        """

        self._base_unit = base_unit

    @property
    def base_unit_conversion_factor(self):
        """Gets the base_unit_conversion_factor of this PricingExpression.

        Conversion factor for converting from price per usage_unit to price per base_unit, and start_usage_amount to start_usage_amount in base_unit. unit_price / base_unit_conversion_factor = price per base_unit. start_usage_amount * base_unit_conversion_factor = start_usage_amount in base_unit.

        :return: The base_unit_conversion_factor of this PricingExpression.
        :rtype: float
        """
        return self._base_unit_conversion_factor

    @base_unit_conversion_factor.setter
    def base_unit_conversion_factor(self, base_unit_conversion_factor):
        """Sets the base_unit_conversion_factor of this PricingExpression.

        Conversion factor for converting from price per usage_unit to price per base_unit, and start_usage_amount to start_usage_amount in base_unit. unit_price / base_unit_conversion_factor = price per base_unit. start_usage_amount * base_unit_conversion_factor = start_usage_amount in base_unit.

        :param base_unit_conversion_factor: The base_unit_conversion_factor of this PricingExpression.
        :type base_unit_conversion_factor: float
        """

        self._base_unit_conversion_factor = base_unit_conversion_factor

    @property
    def base_unit_description(self):
        """Gets the base_unit_description of this PricingExpression.

        The base unit in human readable form. Example: \"byte\".

        :return: The base_unit_description of this PricingExpression.
        :rtype: str
        """
        return self._base_unit_description

    @base_unit_description.setter
    def base_unit_description(self, base_unit_description):
        """Sets the base_unit_description of this PricingExpression.

        The base unit in human readable form. Example: \"byte\".

        :param base_unit_description: The base_unit_description of this PricingExpression.
        :type base_unit_description: str
        """

        self._base_unit_description = base_unit_description

    @property
    def display_quantity(self):
        """Gets the display_quantity of this PricingExpression.

        The recommended quantity of units for displaying pricing info. When displaying pricing info it is recommended to display: (unit_price * display_quantity) per display_quantity usage_unit. This field does not affect the pricing formula and is for display purposes only. Example: If the unit_price is \"0.0001 USD\", the usage_unit is \"GB\" and the display_quantity is \"1000\" then the recommended way of displaying the pricing info is \"0.10 USD per 1000 GB\"

        :return: The display_quantity of this PricingExpression.
        :rtype: float
        """
        return self._display_quantity

    @display_quantity.setter
    def display_quantity(self, display_quantity):
        """Sets the display_quantity of this PricingExpression.

        The recommended quantity of units for displaying pricing info. When displaying pricing info it is recommended to display: (unit_price * display_quantity) per display_quantity usage_unit. This field does not affect the pricing formula and is for display purposes only. Example: If the unit_price is \"0.0001 USD\", the usage_unit is \"GB\" and the display_quantity is \"1000\" then the recommended way of displaying the pricing info is \"0.10 USD per 1000 GB\"

        :param display_quantity: The display_quantity of this PricingExpression.
        :type display_quantity: float
        """

        self._display_quantity = display_quantity

    @property
    def tiered_rates(self):
        """Gets the tiered_rates of this PricingExpression.

        The list of tiered rates for this pricing. The total cost is computed by applying each of the tiered rates on usage. This repeated list is sorted by ascending order of start_usage_amount.

        :return: The tiered_rates of this PricingExpression.
        :rtype: List[TierRate]
        """
        return self._tiered_rates

    @tiered_rates.setter
    def tiered_rates(self, tiered_rates):
        """Sets the tiered_rates of this PricingExpression.

        The list of tiered rates for this pricing. The total cost is computed by applying each of the tiered rates on usage. This repeated list is sorted by ascending order of start_usage_amount.

        :param tiered_rates: The tiered_rates of this PricingExpression.
        :type tiered_rates: List[TierRate]
        """

        self._tiered_rates = tiered_rates

    @property
    def usage_unit(self):
        """Gets the usage_unit of this PricingExpression.

        The short hand for unit of usage this pricing is specified in. Example: usage_unit of \"GiBy\" means that usage is specified in \"Gibi Byte\".

        :return: The usage_unit of this PricingExpression.
        :rtype: str
        """
        return self._usage_unit

    @usage_unit.setter
    def usage_unit(self, usage_unit):
        """Sets the usage_unit of this PricingExpression.

        The short hand for unit of usage this pricing is specified in. Example: usage_unit of \"GiBy\" means that usage is specified in \"Gibi Byte\".

        :param usage_unit: The usage_unit of this PricingExpression.
        :type usage_unit: str
        """

        self._usage_unit = usage_unit

    @property
    def usage_unit_description(self):
        """Gets the usage_unit_description of this PricingExpression.

        The unit of usage in human readable form. Example: \"gibi byte\".

        :return: The usage_unit_description of this PricingExpression.
        :rtype: str
        """
        return self._usage_unit_description

    @usage_unit_description.setter
    def usage_unit_description(self, usage_unit_description):
        """Sets the usage_unit_description of this PricingExpression.

        The unit of usage in human readable form. Example: \"gibi byte\".

        :param usage_unit_description: The usage_unit_description of this PricingExpression.
        :type usage_unit_description: str
        """

        self._usage_unit_description = usage_unit_description
