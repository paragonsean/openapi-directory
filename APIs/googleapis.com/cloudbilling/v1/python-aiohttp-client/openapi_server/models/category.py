# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_family: str=None, resource_group: str=None, service_display_name: str=None, usage_type: str=None):
        """Category - a model defined in OpenAPI

        :param resource_family: The resource_family of this Category.
        :param resource_group: The resource_group of this Category.
        :param service_display_name: The service_display_name of this Category.
        :param usage_type: The usage_type of this Category.
        """
        self.openapi_types = {
            'resource_family': str,
            'resource_group': str,
            'service_display_name': str,
            'usage_type': str
        }

        self.attribute_map = {
            'resource_family': 'resourceFamily',
            'resource_group': 'resourceGroup',
            'service_display_name': 'serviceDisplayName',
            'usage_type': 'usageType'
        }

        self._resource_family = resource_family
        self._resource_group = resource_group
        self._service_display_name = service_display_name
        self._usage_type = usage_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_family(self):
        """Gets the resource_family of this Category.

        The type of product the SKU refers to. Example: \"Compute\", \"Storage\", \"Network\", \"ApplicationServices\" etc.

        :return: The resource_family of this Category.
        :rtype: str
        """
        return self._resource_family

    @resource_family.setter
    def resource_family(self, resource_family):
        """Sets the resource_family of this Category.

        The type of product the SKU refers to. Example: \"Compute\", \"Storage\", \"Network\", \"ApplicationServices\" etc.

        :param resource_family: The resource_family of this Category.
        :type resource_family: str
        """

        self._resource_family = resource_family

    @property
    def resource_group(self):
        """Gets the resource_group of this Category.

        A group classification for related SKUs. Example: \"RAM\", \"GPU\", \"Prediction\", \"Ops\", \"GoogleEgress\" etc.

        :return: The resource_group of this Category.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this Category.

        A group classification for related SKUs. Example: \"RAM\", \"GPU\", \"Prediction\", \"Ops\", \"GoogleEgress\" etc.

        :param resource_group: The resource_group of this Category.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def service_display_name(self):
        """Gets the service_display_name of this Category.

        The display name of the service this SKU belongs to.

        :return: The service_display_name of this Category.
        :rtype: str
        """
        return self._service_display_name

    @service_display_name.setter
    def service_display_name(self, service_display_name):
        """Sets the service_display_name of this Category.

        The display name of the service this SKU belongs to.

        :param service_display_name: The service_display_name of this Category.
        :type service_display_name: str
        """

        self._service_display_name = service_display_name

    @property
    def usage_type(self):
        """Gets the usage_type of this Category.

        Represents how the SKU is consumed. Example: \"OnDemand\", \"Preemptible\", \"Commit1Mo\", \"Commit1Yr\" etc.

        :return: The usage_type of this Category.
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this Category.

        Represents how the SKU is consumed. Example: \"OnDemand\", \"Preemptible\", \"Commit1Mo\", \"Commit1Yr\" etc.

        :param usage_type: The usage_type of this Category.
        :type usage_type: str
        """

        self._usage_type = usage_type
