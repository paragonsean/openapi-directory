# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class TierRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_usage_amount: float=None, unit_price: Money=None):
        """TierRate - a model defined in OpenAPI

        :param start_usage_amount: The start_usage_amount of this TierRate.
        :param unit_price: The unit_price of this TierRate.
        """
        self.openapi_types = {
            'start_usage_amount': float,
            'unit_price': Money
        }

        self.attribute_map = {
            'start_usage_amount': 'startUsageAmount',
            'unit_price': 'unitPrice'
        }

        self._start_usage_amount = start_usage_amount
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TierRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TierRate of this TierRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_usage_amount(self):
        """Gets the start_usage_amount of this TierRate.

        Usage is priced at this rate only after this amount. Example: start_usage_amount of 10 indicates that the usage will be priced at the unit_price after the first 10 usage_units.

        :return: The start_usage_amount of this TierRate.
        :rtype: float
        """
        return self._start_usage_amount

    @start_usage_amount.setter
    def start_usage_amount(self, start_usage_amount):
        """Sets the start_usage_amount of this TierRate.

        Usage is priced at this rate only after this amount. Example: start_usage_amount of 10 indicates that the usage will be priced at the unit_price after the first 10 usage_units.

        :param start_usage_amount: The start_usage_amount of this TierRate.
        :type start_usage_amount: float
        """

        self._start_usage_amount = start_usage_amount

    @property
    def unit_price(self):
        """Gets the unit_price of this TierRate.


        :return: The unit_price of this TierRate.
        :rtype: Money
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this TierRate.


        :param unit_price: The unit_price of this TierRate.
        :type unit_price: Money
        """

        self._unit_price = unit_price
