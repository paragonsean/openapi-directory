# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_info import AggregationInfo
from openapi_server.models.pricing_expression import PricingExpression
from openapi_server import util


class PricingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_info: AggregationInfo=None, currency_conversion_rate: float=None, effective_time: str=None, pricing_expression: PricingExpression=None, summary: str=None):
        """PricingInfo - a model defined in OpenAPI

        :param aggregation_info: The aggregation_info of this PricingInfo.
        :param currency_conversion_rate: The currency_conversion_rate of this PricingInfo.
        :param effective_time: The effective_time of this PricingInfo.
        :param pricing_expression: The pricing_expression of this PricingInfo.
        :param summary: The summary of this PricingInfo.
        """
        self.openapi_types = {
            'aggregation_info': AggregationInfo,
            'currency_conversion_rate': float,
            'effective_time': str,
            'pricing_expression': PricingExpression,
            'summary': str
        }

        self.attribute_map = {
            'aggregation_info': 'aggregationInfo',
            'currency_conversion_rate': 'currencyConversionRate',
            'effective_time': 'effectiveTime',
            'pricing_expression': 'pricingExpression',
            'summary': 'summary'
        }

        self._aggregation_info = aggregation_info
        self._currency_conversion_rate = currency_conversion_rate
        self._effective_time = effective_time
        self._pricing_expression = pricing_expression
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingInfo of this PricingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_info(self):
        """Gets the aggregation_info of this PricingInfo.


        :return: The aggregation_info of this PricingInfo.
        :rtype: AggregationInfo
        """
        return self._aggregation_info

    @aggregation_info.setter
    def aggregation_info(self, aggregation_info):
        """Sets the aggregation_info of this PricingInfo.


        :param aggregation_info: The aggregation_info of this PricingInfo.
        :type aggregation_info: AggregationInfo
        """

        self._aggregation_info = aggregation_info

    @property
    def currency_conversion_rate(self):
        """Gets the currency_conversion_rate of this PricingInfo.

        Conversion rate used for currency conversion, from USD to the currency specified in the request. This includes any surcharge collected for billing in non USD currency. If a currency is not specified in the request this defaults to 1.0. Example: USD * currency_conversion_rate = JPY

        :return: The currency_conversion_rate of this PricingInfo.
        :rtype: float
        """
        return self._currency_conversion_rate

    @currency_conversion_rate.setter
    def currency_conversion_rate(self, currency_conversion_rate):
        """Sets the currency_conversion_rate of this PricingInfo.

        Conversion rate used for currency conversion, from USD to the currency specified in the request. This includes any surcharge collected for billing in non USD currency. If a currency is not specified in the request this defaults to 1.0. Example: USD * currency_conversion_rate = JPY

        :param currency_conversion_rate: The currency_conversion_rate of this PricingInfo.
        :type currency_conversion_rate: float
        """

        self._currency_conversion_rate = currency_conversion_rate

    @property
    def effective_time(self):
        """Gets the effective_time of this PricingInfo.

        The timestamp from which this pricing was effective within the requested time range. This is guaranteed to be greater than or equal to the start_time field in the request and less than the end_time field in the request. If a time range was not specified in the request this field will be equivalent to a time within the last 12 hours, indicating the latest pricing info.

        :return: The effective_time of this PricingInfo.
        :rtype: str
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this PricingInfo.

        The timestamp from which this pricing was effective within the requested time range. This is guaranteed to be greater than or equal to the start_time field in the request and less than the end_time field in the request. If a time range was not specified in the request this field will be equivalent to a time within the last 12 hours, indicating the latest pricing info.

        :param effective_time: The effective_time of this PricingInfo.
        :type effective_time: str
        """

        self._effective_time = effective_time

    @property
    def pricing_expression(self):
        """Gets the pricing_expression of this PricingInfo.


        :return: The pricing_expression of this PricingInfo.
        :rtype: PricingExpression
        """
        return self._pricing_expression

    @pricing_expression.setter
    def pricing_expression(self, pricing_expression):
        """Sets the pricing_expression of this PricingInfo.


        :param pricing_expression: The pricing_expression of this PricingInfo.
        :type pricing_expression: PricingExpression
        """

        self._pricing_expression = pricing_expression

    @property
    def summary(self):
        """Gets the summary of this PricingInfo.

        An optional human readable summary of the pricing information, has a maximum length of 256 characters.

        :return: The summary of this PricingInfo.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PricingInfo.

        An optional human readable summary of the pricing information, has a maximum length of 256 characters.

        :param summary: The summary of this PricingInfo.
        :type summary: str
        """

        self._summary = summary
