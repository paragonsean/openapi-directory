/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Commitment from './Commitment';
import ScenarioConfig from './ScenarioConfig';
import Workload from './Workload';

/**
 * The CostScenario model module.
 * @module model/CostScenario
 * @version v1beta
 */
class CostScenario {
    /**
     * Constructs a new <code>CostScenario</code>.
     * Encapsulates all the information needed to perform a cost estimate. It includes a specification of the Google Cloud usage whose costs are estimated, and configuration options.
     * @alias module:model/CostScenario
     */
    constructor() { 
        
        CostScenario.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CostScenario</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostScenario} obj Optional instance to populate.
     * @return {module:model/CostScenario} The populated <code>CostScenario</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostScenario();

            if (data.hasOwnProperty('commitments')) {
                obj['commitments'] = ApiClient.convertToType(data['commitments'], [Commitment]);
            }
            if (data.hasOwnProperty('scenarioConfig')) {
                obj['scenarioConfig'] = ScenarioConfig.constructFromObject(data['scenarioConfig']);
            }
            if (data.hasOwnProperty('workloads')) {
                obj['workloads'] = ApiClient.convertToType(data['workloads'], [Workload]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CostScenario</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CostScenario</code>.
     */
    static validateJSON(data) {
        if (data['commitments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commitments'])) {
                throw new Error("Expected the field `commitments` to be an array in the JSON data but got " + data['commitments']);
            }
            // validate the optional field `commitments` (array)
            for (const item of data['commitments']) {
                Commitment.validateJSON(item);
            };
        }
        // validate the optional field `scenarioConfig`
        if (data['scenarioConfig']) { // data not null
          ScenarioConfig.validateJSON(data['scenarioConfig']);
        }
        if (data['workloads']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workloads'])) {
                throw new Error("Expected the field `workloads` to be an array in the JSON data but got " + data['workloads']);
            }
            // validate the optional field `workloads` (array)
            for (const item of data['workloads']) {
                Workload.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * New commitments to estimate the costs for. The cost of the commitments will be included in the estimate result and discounts the commitment entitles will be included in the workload cost estimates. A maximum of 100 workloads can be provided.
 * @member {Array.<module:model/Commitment>} commitments
 */
CostScenario.prototype['commitments'] = undefined;

/**
 * @member {module:model/ScenarioConfig} scenarioConfig
 */
CostScenario.prototype['scenarioConfig'] = undefined;

/**
 * The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.
 * @member {Array.<module:model/Workload>} workloads
 */
CostScenario.prototype['workloads'] = undefined;






export default CostScenario;

