/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EstimationTimePoint from './EstimationTimePoint';
import Rate from './Rate';

/**
 * The Price model module.
 * @module model/Price
 * @version v1beta
 */
class Price {
    /**
     * Constructs a new <code>Price</code>.
     * The price of a SKU at a point int time.
     * @alias module:model/Price
     */
    constructor() { 
        
        Price.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Price</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Price} obj Optional instance to populate.
     * @return {module:model/Price} The populated <code>Price</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Price();

            if (data.hasOwnProperty('effectiveTime')) {
                obj['effectiveTime'] = EstimationTimePoint.constructFromObject(data['effectiveTime']);
            }
            if (data.hasOwnProperty('priceType')) {
                obj['priceType'] = ApiClient.convertToType(data['priceType'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = Rate.constructFromObject(data['rate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Price</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Price</code>.
     */
    static validateJSON(data) {
        // validate the optional field `effectiveTime`
        if (data['effectiveTime']) { // data not null
          EstimationTimePoint.validateJSON(data['effectiveTime']);
        }
        // ensure the json data is a string
        if (data['priceType'] && !(typeof data['priceType'] === 'string' || data['priceType'] instanceof String)) {
            throw new Error("Expected the field `priceType` to be a primitive type in the JSON string but got " + data['priceType']);
        }
        // validate the optional field `rate`
        if (data['rate']) { // data not null
          Rate.validateJSON(data['rate']);
        }

        return true;
    }


}



/**
 * @member {module:model/EstimationTimePoint} effectiveTime
 */
Price.prototype['effectiveTime'] = undefined;

/**
 * The type of price. Possible values: \"RATE\"
 * @member {String} priceType
 */
Price.prototype['priceType'] = undefined;

/**
 * @member {module:model/Rate} rate
 */
Price.prototype['rate'] = undefined;






export default Price;

