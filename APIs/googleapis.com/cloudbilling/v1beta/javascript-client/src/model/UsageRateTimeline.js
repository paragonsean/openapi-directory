/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageRateTimelineEntry from './UsageRateTimelineEntry';

/**
 * The UsageRateTimeline model module.
 * @module model/UsageRateTimeline
 * @version v1beta
 */
class UsageRateTimeline {
    /**
     * Constructs a new <code>UsageRateTimeline</code>.
     * A timeline of usage rates. Consists of a series of entries, each of which specifies a constant rate of usage during a time interval. Each entry contains an effective time. The usage rate is in effect from that time until the effective time of the subsequent entry, or, for the last entry, for the remaining portion of estimation time frame. Effective times are specified as an offset into the estimation time frame. Usage is considered to be zero until the &#x60;effective_time&#x60; of the first entry. All subsequent entries must have an effective time greater than the previous entry and less than the estimate time frame. The effective time on all entries must be an integer number of hours.
     * @alias module:model/UsageRateTimeline
     */
    constructor() { 
        
        UsageRateTimeline.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsageRateTimeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageRateTimeline} obj Optional instance to populate.
     * @return {module:model/UsageRateTimeline} The populated <code>UsageRateTimeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageRateTimeline();

            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('usageRateTimelineEntries')) {
                obj['usageRateTimelineEntries'] = ApiClient.convertToType(data['usageRateTimelineEntries'], [UsageRateTimelineEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageRateTimeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageRateTimeline</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        if (data['usageRateTimelineEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usageRateTimelineEntries'])) {
                throw new Error("Expected the field `usageRateTimelineEntries` to be an array in the JSON data but got " + data['usageRateTimelineEntries']);
            }
            // validate the optional field `usageRateTimelineEntries` (array)
            for (const item of data['usageRateTimelineEntries']) {
                UsageRateTimelineEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an instance, the correct unit is provided in the error message. The supported units are a subset of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr` year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: ``` Expression = Component { \".\" Component } { \"/\" Component } ; Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ] | Annotation | \"1\" ; UNIT = TIME-UNIT | STORAGE-UNIT | DATA-UNIT | COUNT-UNIT Annotation = \"{\" NAME \"}\" ; ``` Examples: * Request per second: `1/s` or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`
 * @member {String} unit
 */
UsageRateTimeline.prototype['unit'] = undefined;

/**
 * The timeline entries. Each entry has a start time and usage rate. The start time specifies the effective time of the usage rate. The entries must be sorted by start time in an increasing order.
 * @member {Array.<module:model/UsageRateTimelineEntry>} usageRateTimelineEntries
 */
UsageRateTimeline.prototype['usageRateTimelineEntries'] = undefined;






export default UsageRateTimeline;

