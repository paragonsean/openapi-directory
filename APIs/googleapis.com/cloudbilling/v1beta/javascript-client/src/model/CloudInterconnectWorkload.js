/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Usage from './Usage';
import VlanAttachment from './VlanAttachment';

/**
 * The CloudInterconnectWorkload model module.
 * @module model/CloudInterconnectWorkload
 * @version v1beta
 */
class CloudInterconnectWorkload {
    /**
     * Constructs a new <code>CloudInterconnectWorkload</code>.
     * Specifies usage for Cloud Interconnect resources.
     * @alias module:model/CloudInterconnectWorkload
     */
    constructor() { 
        
        CloudInterconnectWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudInterconnectWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudInterconnectWorkload} obj Optional instance to populate.
     * @return {module:model/CloudInterconnectWorkload} The populated <code>CloudInterconnectWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudInterconnectWorkload();

            if (data.hasOwnProperty('interconnectAttachments')) {
                obj['interconnectAttachments'] = ApiClient.convertToType(data['interconnectAttachments'], [VlanAttachment]);
            }
            if (data.hasOwnProperty('interconnectType')) {
                obj['interconnectType'] = ApiClient.convertToType(data['interconnectType'], 'String');
            }
            if (data.hasOwnProperty('linkType')) {
                obj['linkType'] = ApiClient.convertToType(data['linkType'], 'String');
            }
            if (data.hasOwnProperty('provisionedLinkCount')) {
                obj['provisionedLinkCount'] = Usage.constructFromObject(data['provisionedLinkCount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudInterconnectWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudInterconnectWorkload</code>.
     */
    static validateJSON(data) {
        if (data['interconnectAttachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interconnectAttachments'])) {
                throw new Error("Expected the field `interconnectAttachments` to be an array in the JSON data but got " + data['interconnectAttachments']);
            }
            // validate the optional field `interconnectAttachments` (array)
            for (const item of data['interconnectAttachments']) {
                VlanAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['interconnectType'] && !(typeof data['interconnectType'] === 'string' || data['interconnectType'] instanceof String)) {
            throw new Error("Expected the field `interconnectType` to be a primitive type in the JSON string but got " + data['interconnectType']);
        }
        // ensure the json data is a string
        if (data['linkType'] && !(typeof data['linkType'] === 'string' || data['linkType'] instanceof String)) {
            throw new Error("Expected the field `linkType` to be a primitive type in the JSON string but got " + data['linkType']);
        }
        // validate the optional field `provisionedLinkCount`
        if (data['provisionedLinkCount']) { // data not null
          Usage.validateJSON(data['provisionedLinkCount']);
        }

        return true;
    }


}



/**
 * VLAN attachment used for interconnect.
 * @member {Array.<module:model/VlanAttachment>} interconnectAttachments
 */
CloudInterconnectWorkload.prototype['interconnectAttachments'] = undefined;

/**
 * VLAN attachment type
 * @member {module:model/CloudInterconnectWorkload.InterconnectTypeEnum} interconnectType
 */
CloudInterconnectWorkload.prototype['interconnectType'] = undefined;

/**
 * Interconnect circuit link type.
 * @member {module:model/CloudInterconnectWorkload.LinkTypeEnum} linkType
 */
CloudInterconnectWorkload.prototype['linkType'] = undefined;

/**
 * @member {module:model/Usage} provisionedLinkCount
 */
CloudInterconnectWorkload.prototype['provisionedLinkCount'] = undefined;





/**
 * Allowed values for the <code>interconnectType</code> property.
 * @enum {String}
 * @readonly
 */
CloudInterconnectWorkload['InterconnectTypeEnum'] = {

    /**
     * value: "INTERCONNECT_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "INTERCONNECT_TYPE_UNSPECIFIED",

    /**
     * value: "INTERCONNECT_TYPE_DEDICATED"
     * @const
     */
    "DEDICATED": "INTERCONNECT_TYPE_DEDICATED",

    /**
     * value: "INTERCONNECT_TYPE_PARTNER"
     * @const
     */
    "PARTNER": "INTERCONNECT_TYPE_PARTNER"
};


/**
 * Allowed values for the <code>linkType</code> property.
 * @enum {String}
 * @readonly
 */
CloudInterconnectWorkload['LinkTypeEnum'] = {

    /**
     * value: "LINK_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "LINK_TYPE_UNSPECIFIED",

    /**
     * value: "LINK_TYPE_ETHERNET_10G_LR"
     * @const
     */
    "ETHERNET_10G_LR": "LINK_TYPE_ETHERNET_10G_LR",

    /**
     * value: "LINK_TYPE_ETHERNET_100G_LR"
     * @const
     */
    "ETHERNET_100G_LR": "LINK_TYPE_ETHERNET_100G_LR"
};



export default CloudInterconnectWorkload;

