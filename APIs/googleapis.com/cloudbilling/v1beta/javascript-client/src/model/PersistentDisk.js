/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Usage from './Usage';

/**
 * The PersistentDisk model module.
 * @module model/PersistentDisk
 * @version v1beta
 */
class PersistentDisk {
    /**
     * Constructs a new <code>PersistentDisk</code>.
     * Specification of a persistent disk attached to a VM.
     * @alias module:model/PersistentDisk
     */
    constructor() { 
        
        PersistentDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersistentDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersistentDisk} obj Optional instance to populate.
     * @return {module:model/PersistentDisk} The populated <code>PersistentDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersistentDisk();

            if (data.hasOwnProperty('diskSize')) {
                obj['diskSize'] = Usage.constructFromObject(data['diskSize']);
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('provisionedIops')) {
                obj['provisionedIops'] = Usage.constructFromObject(data['provisionedIops']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersistentDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersistentDisk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `diskSize`
        if (data['diskSize']) { // data not null
          Usage.validateJSON(data['diskSize']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // validate the optional field `provisionedIops`
        if (data['provisionedIops']) { // data not null
          Usage.validateJSON(data['provisionedIops']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * @member {module:model/Usage} diskSize
 */
PersistentDisk.prototype['diskSize'] = undefined;

/**
 * The [disk type](https://cloud.google.com/compute/docs/disks#disk-types). For example: \"pd-standard\".
 * @member {String} diskType
 */
PersistentDisk.prototype['diskType'] = undefined;

/**
 * @member {module:model/Usage} provisionedIops
 */
PersistentDisk.prototype['provisionedIops'] = undefined;

/**
 * The geographic scope of the disk. Defaults to `SCOPE_ZONAL` if not specified.
 * @member {module:model/PersistentDisk.ScopeEnum} scope
 */
PersistentDisk.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
PersistentDisk['ScopeEnum'] = {

    /**
     * value: "SCOPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SCOPE_UNSPECIFIED",

    /**
     * value: "SCOPE_ZONAL"
     * @const
     */
    "ZONAL": "SCOPE_ZONAL",

    /**
     * value: "SCOPE_REGIONAL"
     * @const
     */
    "REGIONAL": "SCOPE_REGIONAL"
};



export default PersistentDisk;

