/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RateTier from './RateTier';

/**
 * The Rate model module.
 * @module model/Rate
 * @version v1beta
 */
class Rate {
    /**
     * Constructs a new <code>Rate</code>.
     * A SKU price consisting of tiered rates.
     * @alias module:model/Rate
     */
    constructor() { 
        
        Rate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rate} obj Optional instance to populate.
     * @return {module:model/Rate} The populated <code>Rate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rate();

            if (data.hasOwnProperty('tiers')) {
                obj['tiers'] = ApiClient.convertToType(data['tiers'], [RateTier]);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('unitCount')) {
                obj['unitCount'] = ApiClient.convertToType(data['unitCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rate</code>.
     */
    static validateJSON(data) {
        if (data['tiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tiers'])) {
                throw new Error("Expected the field `tiers` to be an array in the JSON data but got " + data['tiers']);
            }
            // validate the optional field `tiers` (array)
            for (const item of data['tiers']) {
                RateTier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * The service tiers.
 * @member {Array.<module:model/RateTier>} tiers
 */
Rate.prototype['tiers'] = undefined;

/**
 * The SKU's pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this field will show 'By'. The `start_amount` field in each tier will be in this unit.
 * @member {String} unit
 */
Rate.prototype['unit'] = undefined;

/**
 * The SKU's count for the pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this column will show 1000000.
 * @member {Number} unitCount
 */
Rate.prototype['unitCount'] = undefined;






export default Rate;

