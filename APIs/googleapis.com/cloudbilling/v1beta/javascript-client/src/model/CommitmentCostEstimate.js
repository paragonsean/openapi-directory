/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CostEstimate from './CostEstimate';
import SkuCostEstimate from './SkuCostEstimate';

/**
 * The CommitmentCostEstimate model module.
 * @module model/CommitmentCostEstimate
 * @version v1beta
 */
class CommitmentCostEstimate {
    /**
     * Constructs a new <code>CommitmentCostEstimate</code>.
     * Estimated cost for a commitment.
     * @alias module:model/CommitmentCostEstimate
     */
    constructor() { 
        
        CommitmentCostEstimate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitmentCostEstimate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitmentCostEstimate} obj Optional instance to populate.
     * @return {module:model/CommitmentCostEstimate} The populated <code>CommitmentCostEstimate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitmentCostEstimate();

            if (data.hasOwnProperty('commitmentTotalCostEstimate')) {
                obj['commitmentTotalCostEstimate'] = CostEstimate.constructFromObject(data['commitmentTotalCostEstimate']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('skuCostEstimates')) {
                obj['skuCostEstimates'] = ApiClient.convertToType(data['skuCostEstimates'], [SkuCostEstimate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitmentCostEstimate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitmentCostEstimate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `commitmentTotalCostEstimate`
        if (data['commitmentTotalCostEstimate']) { // data not null
          CostEstimate.validateJSON(data['commitmentTotalCostEstimate']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['skuCostEstimates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skuCostEstimates'])) {
                throw new Error("Expected the field `skuCostEstimates` to be an array in the JSON data but got " + data['skuCostEstimates']);
            }
            // validate the optional field `skuCostEstimates` (array)
            for (const item of data['skuCostEstimates']) {
                SkuCostEstimate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/CostEstimate} commitmentTotalCostEstimate
 */
CommitmentCostEstimate.prototype['commitmentTotalCostEstimate'] = undefined;

/**
 * The name of the commitment, as specified in the `CostScenario`.
 * @member {String} name
 */
CommitmentCostEstimate.prototype['name'] = undefined;

/**
 * Estimated costs for each SKU in the commitment.
 * @member {Array.<module:model/SkuCostEstimate>} skuCostEstimates
 */
CommitmentCostEstimate.prototype['skuCostEstimates'] = undefined;






export default CommitmentCostEstimate;

