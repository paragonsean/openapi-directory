/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GuestAccelerator from './GuestAccelerator';
import MachineType from './MachineType';
import PersistentDisk from './PersistentDisk';
import Usage from './Usage';

/**
 * The ComputeVmWorkload model module.
 * @module model/ComputeVmWorkload
 * @version v1beta
 */
class ComputeVmWorkload {
    /**
     * Constructs a new <code>ComputeVmWorkload</code>.
     * Specificies usage of a set of identical compute VM instances.
     * @alias module:model/ComputeVmWorkload
     */
    constructor() { 
        
        ComputeVmWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeVmWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeVmWorkload} obj Optional instance to populate.
     * @return {module:model/ComputeVmWorkload} The populated <code>ComputeVmWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeVmWorkload();

            if (data.hasOwnProperty('enableConfidentialCompute')) {
                obj['enableConfidentialCompute'] = ApiClient.convertToType(data['enableConfidentialCompute'], 'Boolean');
            }
            if (data.hasOwnProperty('guestAccelerator')) {
                obj['guestAccelerator'] = GuestAccelerator.constructFromObject(data['guestAccelerator']);
            }
            if (data.hasOwnProperty('instancesRunning')) {
                obj['instancesRunning'] = Usage.constructFromObject(data['instancesRunning']);
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], ['String']);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = MachineType.constructFromObject(data['machineType']);
            }
            if (data.hasOwnProperty('persistentDisks')) {
                obj['persistentDisks'] = ApiClient.convertToType(data['persistentDisks'], [PersistentDisk]);
            }
            if (data.hasOwnProperty('preemptible')) {
                obj['preemptible'] = ApiClient.convertToType(data['preemptible'], 'Boolean');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeVmWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeVmWorkload</code>.
     */
    static validateJSON(data) {
        // validate the optional field `guestAccelerator`
        if (data['guestAccelerator']) { // data not null
          GuestAccelerator.validateJSON(data['guestAccelerator']);
        }
        // validate the optional field `instancesRunning`
        if (data['instancesRunning']) { // data not null
          Usage.validateJSON(data['instancesRunning']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['licenses'])) {
            throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
        }
        // validate the optional field `machineType`
        if (data['machineType']) { // data not null
          MachineType.validateJSON(data['machineType']);
        }
        if (data['persistentDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['persistentDisks'])) {
                throw new Error("Expected the field `persistentDisks` to be an array in the JSON data but got " + data['persistentDisks']);
            }
            // validate the optional field `persistentDisks` (array)
            for (const item of data['persistentDisks']) {
                PersistentDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }

        return true;
    }


}



/**
 * Defines whether each instance has confidential compute enabled.
 * @member {Boolean} enableConfidentialCompute
 */
ComputeVmWorkload.prototype['enableConfidentialCompute'] = undefined;

/**
 * @member {module:model/GuestAccelerator} guestAccelerator
 */
ComputeVmWorkload.prototype['guestAccelerator'] = undefined;

/**
 * @member {module:model/Usage} instancesRunning
 */
ComputeVmWorkload.prototype['instancesRunning'] = undefined;

/**
 * Premium image licenses used by each instance.
 * @member {Array.<String>} licenses
 */
ComputeVmWorkload.prototype['licenses'] = undefined;

/**
 * @member {module:model/MachineType} machineType
 */
ComputeVmWorkload.prototype['machineType'] = undefined;

/**
 * Persistent disks attached to each instance. Must include a boot disk.
 * @member {Array.<module:model/PersistentDisk>} persistentDisks
 */
ComputeVmWorkload.prototype['persistentDisks'] = undefined;

/**
 * Defines whether each instance is preemptible.
 * @member {Boolean} preemptible
 */
ComputeVmWorkload.prototype['preemptible'] = undefined;

/**
 * The [region](https://cloud.google.com/compute/docs/regions-zones) where the VMs run. For example: \"us-central1\".
 * @member {String} region
 */
ComputeVmWorkload.prototype['region'] = undefined;






export default ComputeVmWorkload;

