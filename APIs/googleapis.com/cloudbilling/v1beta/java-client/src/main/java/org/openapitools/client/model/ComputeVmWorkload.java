/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GuestAccelerator;
import org.openapitools.client.model.MachineType;
import org.openapitools.client.model.PersistentDisk;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specificies usage of a set of identical compute VM instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputeVmWorkload {
  public static final String SERIALIZED_NAME_ENABLE_CONFIDENTIAL_COMPUTE = "enableConfidentialCompute";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONFIDENTIAL_COMPUTE)
  private Boolean enableConfidentialCompute;

  public static final String SERIALIZED_NAME_GUEST_ACCELERATOR = "guestAccelerator";
  @SerializedName(SERIALIZED_NAME_GUEST_ACCELERATOR)
  private GuestAccelerator guestAccelerator;

  public static final String SERIALIZED_NAME_INSTANCES_RUNNING = "instancesRunning";
  @SerializedName(SERIALIZED_NAME_INSTANCES_RUNNING)
  private Usage instancesRunning;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<String> licenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private MachineType machineType;

  public static final String SERIALIZED_NAME_PERSISTENT_DISKS = "persistentDisks";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_DISKS)
  private List<PersistentDisk> persistentDisks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREEMPTIBLE = "preemptible";
  @SerializedName(SERIALIZED_NAME_PREEMPTIBLE)
  private Boolean preemptible;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public ComputeVmWorkload() {
  }

  public ComputeVmWorkload enableConfidentialCompute(Boolean enableConfidentialCompute) {
    this.enableConfidentialCompute = enableConfidentialCompute;
    return this;
  }

  /**
   * Defines whether each instance has confidential compute enabled.
   * @return enableConfidentialCompute
   */
  @javax.annotation.Nullable
  public Boolean getEnableConfidentialCompute() {
    return enableConfidentialCompute;
  }

  public void setEnableConfidentialCompute(Boolean enableConfidentialCompute) {
    this.enableConfidentialCompute = enableConfidentialCompute;
  }


  public ComputeVmWorkload guestAccelerator(GuestAccelerator guestAccelerator) {
    this.guestAccelerator = guestAccelerator;
    return this;
  }

  /**
   * Get guestAccelerator
   * @return guestAccelerator
   */
  @javax.annotation.Nullable
  public GuestAccelerator getGuestAccelerator() {
    return guestAccelerator;
  }

  public void setGuestAccelerator(GuestAccelerator guestAccelerator) {
    this.guestAccelerator = guestAccelerator;
  }


  public ComputeVmWorkload instancesRunning(Usage instancesRunning) {
    this.instancesRunning = instancesRunning;
    return this;
  }

  /**
   * Get instancesRunning
   * @return instancesRunning
   */
  @javax.annotation.Nullable
  public Usage getInstancesRunning() {
    return instancesRunning;
  }

  public void setInstancesRunning(Usage instancesRunning) {
    this.instancesRunning = instancesRunning;
  }


  public ComputeVmWorkload licenses(List<String> licenses) {
    this.licenses = licenses;
    return this;
  }

  public ComputeVmWorkload addLicensesItem(String licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

  /**
   * Premium image licenses used by each instance.
   * @return licenses
   */
  @javax.annotation.Nullable
  public List<String> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<String> licenses) {
    this.licenses = licenses;
  }


  public ComputeVmWorkload machineType(MachineType machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Get machineType
   * @return machineType
   */
  @javax.annotation.Nullable
  public MachineType getMachineType() {
    return machineType;
  }

  public void setMachineType(MachineType machineType) {
    this.machineType = machineType;
  }


  public ComputeVmWorkload persistentDisks(List<PersistentDisk> persistentDisks) {
    this.persistentDisks = persistentDisks;
    return this;
  }

  public ComputeVmWorkload addPersistentDisksItem(PersistentDisk persistentDisksItem) {
    if (this.persistentDisks == null) {
      this.persistentDisks = new ArrayList<>();
    }
    this.persistentDisks.add(persistentDisksItem);
    return this;
  }

  /**
   * Persistent disks attached to each instance. Must include a boot disk.
   * @return persistentDisks
   */
  @javax.annotation.Nullable
  public List<PersistentDisk> getPersistentDisks() {
    return persistentDisks;
  }

  public void setPersistentDisks(List<PersistentDisk> persistentDisks) {
    this.persistentDisks = persistentDisks;
  }


  public ComputeVmWorkload preemptible(Boolean preemptible) {
    this.preemptible = preemptible;
    return this;
  }

  /**
   * Defines whether each instance is preemptible.
   * @return preemptible
   */
  @javax.annotation.Nullable
  public Boolean getPreemptible() {
    return preemptible;
  }

  public void setPreemptible(Boolean preemptible) {
    this.preemptible = preemptible;
  }


  public ComputeVmWorkload region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The [region](https://cloud.google.com/compute/docs/regions-zones) where the VMs run. For example: \&quot;us-central1\&quot;.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputeVmWorkload computeVmWorkload = (ComputeVmWorkload) o;
    return Objects.equals(this.enableConfidentialCompute, computeVmWorkload.enableConfidentialCompute) &&
        Objects.equals(this.guestAccelerator, computeVmWorkload.guestAccelerator) &&
        Objects.equals(this.instancesRunning, computeVmWorkload.instancesRunning) &&
        Objects.equals(this.licenses, computeVmWorkload.licenses) &&
        Objects.equals(this.machineType, computeVmWorkload.machineType) &&
        Objects.equals(this.persistentDisks, computeVmWorkload.persistentDisks) &&
        Objects.equals(this.preemptible, computeVmWorkload.preemptible) &&
        Objects.equals(this.region, computeVmWorkload.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableConfidentialCompute, guestAccelerator, instancesRunning, licenses, machineType, persistentDisks, preemptible, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputeVmWorkload {\n");
    sb.append("    enableConfidentialCompute: ").append(toIndentedString(enableConfidentialCompute)).append("\n");
    sb.append("    guestAccelerator: ").append(toIndentedString(guestAccelerator)).append("\n");
    sb.append("    instancesRunning: ").append(toIndentedString(instancesRunning)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    persistentDisks: ").append(toIndentedString(persistentDisks)).append("\n");
    sb.append("    preemptible: ").append(toIndentedString(preemptible)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableConfidentialCompute");
    openapiFields.add("guestAccelerator");
    openapiFields.add("instancesRunning");
    openapiFields.add("licenses");
    openapiFields.add("machineType");
    openapiFields.add("persistentDisks");
    openapiFields.add("preemptible");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputeVmWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputeVmWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputeVmWorkload is not found in the empty JSON string", ComputeVmWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputeVmWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputeVmWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `guestAccelerator`
      if (jsonObj.get("guestAccelerator") != null && !jsonObj.get("guestAccelerator").isJsonNull()) {
        GuestAccelerator.validateJsonElement(jsonObj.get("guestAccelerator"));
      }
      // validate the optional field `instancesRunning`
      if (jsonObj.get("instancesRunning") != null && !jsonObj.get("instancesRunning").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("instancesRunning"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull() && !jsonObj.get("licenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
      }
      // validate the optional field `machineType`
      if (jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) {
        MachineType.validateJsonElement(jsonObj.get("machineType"));
      }
      if (jsonObj.get("persistentDisks") != null && !jsonObj.get("persistentDisks").isJsonNull()) {
        JsonArray jsonArraypersistentDisks = jsonObj.getAsJsonArray("persistentDisks");
        if (jsonArraypersistentDisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persistentDisks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persistentDisks` to be an array in the JSON string but got `%s`", jsonObj.get("persistentDisks").toString()));
          }

          // validate the optional field `persistentDisks` (array)
          for (int i = 0; i < jsonArraypersistentDisks.size(); i++) {
            PersistentDisk.validateJsonElement(jsonArraypersistentDisks.get(i));
          };
        }
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputeVmWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputeVmWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputeVmWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputeVmWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputeVmWorkload>() {
           @Override
           public void write(JsonWriter out, ComputeVmWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputeVmWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputeVmWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputeVmWorkload
   * @throws IOException if the JSON string is invalid with respect to ComputeVmWorkload
   */
  public static ComputeVmWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputeVmWorkload.class);
  }

  /**
   * Convert an instance of ComputeVmWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

