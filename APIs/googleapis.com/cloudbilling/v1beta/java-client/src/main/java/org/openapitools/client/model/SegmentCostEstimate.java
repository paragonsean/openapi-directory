/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommitmentCostEstimate;
import org.openapitools.client.model.CostEstimate;
import org.openapitools.client.model.EstimationTimePoint;
import org.openapitools.client.model.WorkloadCostEstimate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Workload cost estimates for a single time segment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentCostEstimate {
  public static final String SERIALIZED_NAME_COMMITMENT_COST_ESTIMATES = "commitmentCostEstimates";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_COST_ESTIMATES)
  private List<CommitmentCostEstimate> commitmentCostEstimates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENT_START_TIME = "segmentStartTime";
  @SerializedName(SERIALIZED_NAME_SEGMENT_START_TIME)
  private EstimationTimePoint segmentStartTime;

  public static final String SERIALIZED_NAME_SEGMENT_TOTAL_COST_ESTIMATE = "segmentTotalCostEstimate";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TOTAL_COST_ESTIMATE)
  private CostEstimate segmentTotalCostEstimate;

  public static final String SERIALIZED_NAME_WORKLOAD_COST_ESTIMATES = "workloadCostEstimates";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_COST_ESTIMATES)
  private List<WorkloadCostEstimate> workloadCostEstimates = new ArrayList<>();

  public SegmentCostEstimate() {
  }

  public SegmentCostEstimate commitmentCostEstimates(List<CommitmentCostEstimate> commitmentCostEstimates) {
    this.commitmentCostEstimates = commitmentCostEstimates;
    return this;
  }

  public SegmentCostEstimate addCommitmentCostEstimatesItem(CommitmentCostEstimate commitmentCostEstimatesItem) {
    if (this.commitmentCostEstimates == null) {
      this.commitmentCostEstimates = new ArrayList<>();
    }
    this.commitmentCostEstimates.add(commitmentCostEstimatesItem);
    return this;
  }

  /**
   * Estimated costs for each commitment.
   * @return commitmentCostEstimates
   */
  @javax.annotation.Nullable
  public List<CommitmentCostEstimate> getCommitmentCostEstimates() {
    return commitmentCostEstimates;
  }

  public void setCommitmentCostEstimates(List<CommitmentCostEstimate> commitmentCostEstimates) {
    this.commitmentCostEstimates = commitmentCostEstimates;
  }


  public SegmentCostEstimate segmentStartTime(EstimationTimePoint segmentStartTime) {
    this.segmentStartTime = segmentStartTime;
    return this;
  }

  /**
   * Get segmentStartTime
   * @return segmentStartTime
   */
  @javax.annotation.Nullable
  public EstimationTimePoint getSegmentStartTime() {
    return segmentStartTime;
  }

  public void setSegmentStartTime(EstimationTimePoint segmentStartTime) {
    this.segmentStartTime = segmentStartTime;
  }


  public SegmentCostEstimate segmentTotalCostEstimate(CostEstimate segmentTotalCostEstimate) {
    this.segmentTotalCostEstimate = segmentTotalCostEstimate;
    return this;
  }

  /**
   * Get segmentTotalCostEstimate
   * @return segmentTotalCostEstimate
   */
  @javax.annotation.Nullable
  public CostEstimate getSegmentTotalCostEstimate() {
    return segmentTotalCostEstimate;
  }

  public void setSegmentTotalCostEstimate(CostEstimate segmentTotalCostEstimate) {
    this.segmentTotalCostEstimate = segmentTotalCostEstimate;
  }


  public SegmentCostEstimate workloadCostEstimates(List<WorkloadCostEstimate> workloadCostEstimates) {
    this.workloadCostEstimates = workloadCostEstimates;
    return this;
  }

  public SegmentCostEstimate addWorkloadCostEstimatesItem(WorkloadCostEstimate workloadCostEstimatesItem) {
    if (this.workloadCostEstimates == null) {
      this.workloadCostEstimates = new ArrayList<>();
    }
    this.workloadCostEstimates.add(workloadCostEstimatesItem);
    return this;
  }

  /**
   * Estimated costs for each workload.
   * @return workloadCostEstimates
   */
  @javax.annotation.Nullable
  public List<WorkloadCostEstimate> getWorkloadCostEstimates() {
    return workloadCostEstimates;
  }

  public void setWorkloadCostEstimates(List<WorkloadCostEstimate> workloadCostEstimates) {
    this.workloadCostEstimates = workloadCostEstimates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentCostEstimate segmentCostEstimate = (SegmentCostEstimate) o;
    return Objects.equals(this.commitmentCostEstimates, segmentCostEstimate.commitmentCostEstimates) &&
        Objects.equals(this.segmentStartTime, segmentCostEstimate.segmentStartTime) &&
        Objects.equals(this.segmentTotalCostEstimate, segmentCostEstimate.segmentTotalCostEstimate) &&
        Objects.equals(this.workloadCostEstimates, segmentCostEstimate.workloadCostEstimates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitmentCostEstimates, segmentStartTime, segmentTotalCostEstimate, workloadCostEstimates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentCostEstimate {\n");
    sb.append("    commitmentCostEstimates: ").append(toIndentedString(commitmentCostEstimates)).append("\n");
    sb.append("    segmentStartTime: ").append(toIndentedString(segmentStartTime)).append("\n");
    sb.append("    segmentTotalCostEstimate: ").append(toIndentedString(segmentTotalCostEstimate)).append("\n");
    sb.append("    workloadCostEstimates: ").append(toIndentedString(workloadCostEstimates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitmentCostEstimates");
    openapiFields.add("segmentStartTime");
    openapiFields.add("segmentTotalCostEstimate");
    openapiFields.add("workloadCostEstimates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentCostEstimate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentCostEstimate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentCostEstimate is not found in the empty JSON string", SegmentCostEstimate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentCostEstimate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentCostEstimate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commitmentCostEstimates") != null && !jsonObj.get("commitmentCostEstimates").isJsonNull()) {
        JsonArray jsonArraycommitmentCostEstimates = jsonObj.getAsJsonArray("commitmentCostEstimates");
        if (jsonArraycommitmentCostEstimates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commitmentCostEstimates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commitmentCostEstimates` to be an array in the JSON string but got `%s`", jsonObj.get("commitmentCostEstimates").toString()));
          }

          // validate the optional field `commitmentCostEstimates` (array)
          for (int i = 0; i < jsonArraycommitmentCostEstimates.size(); i++) {
            CommitmentCostEstimate.validateJsonElement(jsonArraycommitmentCostEstimates.get(i));
          };
        }
      }
      // validate the optional field `segmentStartTime`
      if (jsonObj.get("segmentStartTime") != null && !jsonObj.get("segmentStartTime").isJsonNull()) {
        EstimationTimePoint.validateJsonElement(jsonObj.get("segmentStartTime"));
      }
      // validate the optional field `segmentTotalCostEstimate`
      if (jsonObj.get("segmentTotalCostEstimate") != null && !jsonObj.get("segmentTotalCostEstimate").isJsonNull()) {
        CostEstimate.validateJsonElement(jsonObj.get("segmentTotalCostEstimate"));
      }
      if (jsonObj.get("workloadCostEstimates") != null && !jsonObj.get("workloadCostEstimates").isJsonNull()) {
        JsonArray jsonArrayworkloadCostEstimates = jsonObj.getAsJsonArray("workloadCostEstimates");
        if (jsonArrayworkloadCostEstimates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workloadCostEstimates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workloadCostEstimates` to be an array in the JSON string but got `%s`", jsonObj.get("workloadCostEstimates").toString()));
          }

          // validate the optional field `workloadCostEstimates` (array)
          for (int i = 0; i < jsonArrayworkloadCostEstimates.size(); i++) {
            WorkloadCostEstimate.validateJsonElement(jsonArrayworkloadCostEstimates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentCostEstimate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentCostEstimate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentCostEstimate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentCostEstimate.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentCostEstimate>() {
           @Override
           public void write(JsonWriter out, SegmentCostEstimate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentCostEstimate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentCostEstimate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentCostEstimate
   * @throws IOException if the JSON string is invalid with respect to SegmentCostEstimate
   */
  public static SegmentCostEstimate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentCostEstimate.class);
  }

  /**
   * Convert an instance of SegmentCostEstimate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

