/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specify a Premium Tier Internet Data Transfer networking workload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PremiumTierEgressWorkload {
  /**
   * Where the data is sent to.
   */
  @JsonAdapter(DestinationContinentEnum.Adapter.class)
  public enum DestinationContinentEnum {
    UNSPECIFIED("DESTINATION_CONTINENT_UNSPECIFIED"),
    
    ASIA_PACIFIC("DESTINATION_CONTINENT_ASIA_PACIFIC"),
    
    AFRICA("DESTINATION_CONTINENT_AFRICA"),
    
    NORTH_AMERICA("DESTINATION_CONTINENT_NORTH_AMERICA"),
    
    AUTRALIA("DESTINATION_CONTINENT_AUTRALIA"),
    
    CENTRAL_AMERICA("DESTINATION_CONTINENT_CENTRAL_AMERICA"),
    
    CHINA("DESTINATION_CONTINENT_CHINA"),
    
    EASTERN_EUROPE("DESTINATION_CONTINENT_EASTERN_EUROPE"),
    
    WESTERN_EUROPE("DESTINATION_CONTINENT_WESTERN_EUROPE"),
    
    EMEA("DESTINATION_CONTINENT_EMEA"),
    
    INDIA("DESTINATION_CONTINENT_INDIA"),
    
    MIDDLE_EAST("DESTINATION_CONTINENT_MIDDLE_EAST"),
    
    SOUTH_AMERICA("DESTINATION_CONTINENT_SOUTH_AMERICA");

    private String value;

    DestinationContinentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationContinentEnum fromValue(String value) {
      for (DestinationContinentEnum b : DestinationContinentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationContinentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationContinentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationContinentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationContinentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationContinentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_CONTINENT = "destinationContinent";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONTINENT)
  private DestinationContinentEnum destinationContinent;

  public static final String SERIALIZED_NAME_EGRESS_RATE = "egressRate";
  @SerializedName(SERIALIZED_NAME_EGRESS_RATE)
  private Usage egressRate;

  public static final String SERIALIZED_NAME_SOURCE_REGION = "sourceRegion";
  @SerializedName(SERIALIZED_NAME_SOURCE_REGION)
  private String sourceRegion;

  public PremiumTierEgressWorkload() {
  }

  public PremiumTierEgressWorkload destinationContinent(DestinationContinentEnum destinationContinent) {
    this.destinationContinent = destinationContinent;
    return this;
  }

  /**
   * Where the data is sent to.
   * @return destinationContinent
   */
  @javax.annotation.Nullable
  public DestinationContinentEnum getDestinationContinent() {
    return destinationContinent;
  }

  public void setDestinationContinent(DestinationContinentEnum destinationContinent) {
    this.destinationContinent = destinationContinent;
  }


  public PremiumTierEgressWorkload egressRate(Usage egressRate) {
    this.egressRate = egressRate;
    return this;
  }

  /**
   * Get egressRate
   * @return egressRate
   */
  @javax.annotation.Nullable
  public Usage getEgressRate() {
    return egressRate;
  }

  public void setEgressRate(Usage egressRate) {
    this.egressRate = egressRate;
  }


  public PremiumTierEgressWorkload sourceRegion(String sourceRegion) {
    this.sourceRegion = sourceRegion;
    return this;
  }

  /**
   * Which [region](https://cloud.google.com/compute/docs/regions-zones) the data comes from.
   * @return sourceRegion
   */
  @javax.annotation.Nullable
  public String getSourceRegion() {
    return sourceRegion;
  }

  public void setSourceRegion(String sourceRegion) {
    this.sourceRegion = sourceRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PremiumTierEgressWorkload premiumTierEgressWorkload = (PremiumTierEgressWorkload) o;
    return Objects.equals(this.destinationContinent, premiumTierEgressWorkload.destinationContinent) &&
        Objects.equals(this.egressRate, premiumTierEgressWorkload.egressRate) &&
        Objects.equals(this.sourceRegion, premiumTierEgressWorkload.sourceRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationContinent, egressRate, sourceRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PremiumTierEgressWorkload {\n");
    sb.append("    destinationContinent: ").append(toIndentedString(destinationContinent)).append("\n");
    sb.append("    egressRate: ").append(toIndentedString(egressRate)).append("\n");
    sb.append("    sourceRegion: ").append(toIndentedString(sourceRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationContinent");
    openapiFields.add("egressRate");
    openapiFields.add("sourceRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PremiumTierEgressWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PremiumTierEgressWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PremiumTierEgressWorkload is not found in the empty JSON string", PremiumTierEgressWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PremiumTierEgressWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PremiumTierEgressWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationContinent") != null && !jsonObj.get("destinationContinent").isJsonNull()) && !jsonObj.get("destinationContinent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationContinent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationContinent").toString()));
      }
      // validate the optional field `destinationContinent`
      if (jsonObj.get("destinationContinent") != null && !jsonObj.get("destinationContinent").isJsonNull()) {
        DestinationContinentEnum.validateJsonElement(jsonObj.get("destinationContinent"));
      }
      // validate the optional field `egressRate`
      if (jsonObj.get("egressRate") != null && !jsonObj.get("egressRate").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("egressRate"));
      }
      if ((jsonObj.get("sourceRegion") != null && !jsonObj.get("sourceRegion").isJsonNull()) && !jsonObj.get("sourceRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceRegion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PremiumTierEgressWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PremiumTierEgressWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PremiumTierEgressWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PremiumTierEgressWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<PremiumTierEgressWorkload>() {
           @Override
           public void write(JsonWriter out, PremiumTierEgressWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PremiumTierEgressWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PremiumTierEgressWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PremiumTierEgressWorkload
   * @throws IOException if the JSON string is invalid with respect to PremiumTierEgressWorkload
   */
  public static PremiumTierEgressWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PremiumTierEgressWorkload.class);
  }

  /**
   * Convert an instance of PremiumTierEgressWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

