/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CostEstimate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Estimated cost for usage on a SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkuCostEstimate {
  public static final String SERIALIZED_NAME_COST_ESTIMATE = "costEstimate";
  @SerializedName(SERIALIZED_NAME_COST_ESTIMATE)
  private CostEstimate costEstimate;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_USAGE_AMOUNT = "usageAmount";
  @SerializedName(SERIALIZED_NAME_USAGE_AMOUNT)
  private Double usageAmount;

  public static final String SERIALIZED_NAME_USAGE_UNIT = "usageUnit";
  @SerializedName(SERIALIZED_NAME_USAGE_UNIT)
  private String usageUnit;

  public SkuCostEstimate() {
  }

  public SkuCostEstimate costEstimate(CostEstimate costEstimate) {
    this.costEstimate = costEstimate;
    return this;
  }

  /**
   * Get costEstimate
   * @return costEstimate
   */
  @javax.annotation.Nullable
  public CostEstimate getCostEstimate() {
    return costEstimate;
  }

  public void setCostEstimate(CostEstimate costEstimate) {
    this.costEstimate = costEstimate;
  }


  public SkuCostEstimate sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The resource name for the SKU. Example: \&quot;services/DA34-426B-A397/skus/AA95-CD31-42FE\&quot; More information about the SKU can be found in the &#x60;skus&#x60; field of the &#x60;CostEstimationResult&#x60;.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public SkuCostEstimate usageAmount(Double usageAmount) {
    this.usageAmount = usageAmount;
    return this;
  }

  /**
   * The amount of usage on this SKU.
   * @return usageAmount
   */
  @javax.annotation.Nullable
  public Double getUsageAmount() {
    return usageAmount;
  }

  public void setUsageAmount(Double usageAmount) {
    this.usageAmount = usageAmount;
  }


  public SkuCostEstimate usageUnit(String usageUnit) {
    this.usageUnit = usageUnit;
    return this;
  }

  /**
   * The unit for the usage on this SKU.
   * @return usageUnit
   */
  @javax.annotation.Nullable
  public String getUsageUnit() {
    return usageUnit;
  }

  public void setUsageUnit(String usageUnit) {
    this.usageUnit = usageUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuCostEstimate skuCostEstimate = (SkuCostEstimate) o;
    return Objects.equals(this.costEstimate, skuCostEstimate.costEstimate) &&
        Objects.equals(this.sku, skuCostEstimate.sku) &&
        Objects.equals(this.usageAmount, skuCostEstimate.usageAmount) &&
        Objects.equals(this.usageUnit, skuCostEstimate.usageUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costEstimate, sku, usageAmount, usageUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuCostEstimate {\n");
    sb.append("    costEstimate: ").append(toIndentedString(costEstimate)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    usageAmount: ").append(toIndentedString(usageAmount)).append("\n");
    sb.append("    usageUnit: ").append(toIndentedString(usageUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costEstimate");
    openapiFields.add("sku");
    openapiFields.add("usageAmount");
    openapiFields.add("usageUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkuCostEstimate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkuCostEstimate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuCostEstimate is not found in the empty JSON string", SkuCostEstimate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkuCostEstimate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuCostEstimate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `costEstimate`
      if (jsonObj.get("costEstimate") != null && !jsonObj.get("costEstimate").isJsonNull()) {
        CostEstimate.validateJsonElement(jsonObj.get("costEstimate"));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("usageUnit") != null && !jsonObj.get("usageUnit").isJsonNull()) && !jsonObj.get("usageUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuCostEstimate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuCostEstimate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuCostEstimate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuCostEstimate.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuCostEstimate>() {
           @Override
           public void write(JsonWriter out, SkuCostEstimate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuCostEstimate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkuCostEstimate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkuCostEstimate
   * @throws IOException if the JSON string is invalid with respect to SkuCostEstimate
   */
  public static SkuCostEstimate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuCostEstimate.class);
  }

  /**
   * Convert an instance of SkuCostEstimate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

