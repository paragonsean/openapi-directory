/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the regions for Cache Fill.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CacheFillRegions {
  /**
   * The destination region for cache fill.
   */
  @JsonAdapter(DestinationRegionEnum.Adapter.class)
  public enum DestinationRegionEnum {
    UNSPECIFIED("CACHE_FILL_DESTINATION_REGION_UNSPECIFIED"),
    
    ASIA_PACIFIC("CACHE_FILL_DESTINATION_REGION_ASIA_PACIFIC"),
    
    EUROPE("CACHE_FILL_DESTINATION_REGION_EUROPE"),
    
    NORTH_AMERICA("CACHE_FILL_DESTINATION_REGION_NORTH_AMERICA"),
    
    OCEANIA("CACHE_FILL_DESTINATION_REGION_OCEANIA"),
    
    SOUTH_AMERICA("CACHE_FILL_DESTINATION_REGION_SOUTH_AMERICA"),
    
    CHINA("CACHE_FILL_DESTINATION_REGION_CHINA"),
    
    OTHERS("CACHE_FILL_DESTINATION_REGION_OTHERS");

    private String value;

    DestinationRegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationRegionEnum fromValue(String value) {
      for (DestinationRegionEnum b : DestinationRegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationRegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationRegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationRegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationRegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationRegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_REGION = "destinationRegion";
  @SerializedName(SERIALIZED_NAME_DESTINATION_REGION)
  private DestinationRegionEnum destinationRegion;

  /**
   * The source region for cache fill.
   */
  @JsonAdapter(SourceRegionEnum.Adapter.class)
  public enum SourceRegionEnum {
    SOURCE_REGION_UNSPECIFIED("CACHE_FILL_SOURCE_REGION_UNSPECIFIED"),
    
    REGION_ASIA_PACIFIC("CACHE_FILL_REGION_ASIA_PACIFIC"),
    
    SOURCE_REGION_EUROPE("CACHE_FILL_SOURCE_REGION_EUROPE"),
    
    SOURCE_REGION_NORTH_AMERICA("CACHE_FILL_SOURCE_REGION_NORTH_AMERICA"),
    
    SOURCE_REGION_OCEANIA("CACHE_FILL_SOURCE_REGION_OCEANIA"),
    
    SOURCE_REGION_SOUTH_AMERICA("CACHE_FILL_SOURCE_REGION_SOUTH_AMERICA");

    private String value;

    SourceRegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceRegionEnum fromValue(String value) {
      for (SourceRegionEnum b : SourceRegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceRegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceRegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceRegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceRegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceRegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_REGION = "sourceRegion";
  @SerializedName(SERIALIZED_NAME_SOURCE_REGION)
  private SourceRegionEnum sourceRegion;

  public CacheFillRegions() {
  }

  public CacheFillRegions destinationRegion(DestinationRegionEnum destinationRegion) {
    this.destinationRegion = destinationRegion;
    return this;
  }

  /**
   * The destination region for cache fill.
   * @return destinationRegion
   */
  @javax.annotation.Nullable
  public DestinationRegionEnum getDestinationRegion() {
    return destinationRegion;
  }

  public void setDestinationRegion(DestinationRegionEnum destinationRegion) {
    this.destinationRegion = destinationRegion;
  }


  public CacheFillRegions sourceRegion(SourceRegionEnum sourceRegion) {
    this.sourceRegion = sourceRegion;
    return this;
  }

  /**
   * The source region for cache fill.
   * @return sourceRegion
   */
  @javax.annotation.Nullable
  public SourceRegionEnum getSourceRegion() {
    return sourceRegion;
  }

  public void setSourceRegion(SourceRegionEnum sourceRegion) {
    this.sourceRegion = sourceRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheFillRegions cacheFillRegions = (CacheFillRegions) o;
    return Objects.equals(this.destinationRegion, cacheFillRegions.destinationRegion) &&
        Objects.equals(this.sourceRegion, cacheFillRegions.sourceRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationRegion, sourceRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheFillRegions {\n");
    sb.append("    destinationRegion: ").append(toIndentedString(destinationRegion)).append("\n");
    sb.append("    sourceRegion: ").append(toIndentedString(sourceRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationRegion");
    openapiFields.add("sourceRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CacheFillRegions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheFillRegions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheFillRegions is not found in the empty JSON string", CacheFillRegions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheFillRegions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheFillRegions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationRegion") != null && !jsonObj.get("destinationRegion").isJsonNull()) && !jsonObj.get("destinationRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationRegion").toString()));
      }
      // validate the optional field `destinationRegion`
      if (jsonObj.get("destinationRegion") != null && !jsonObj.get("destinationRegion").isJsonNull()) {
        DestinationRegionEnum.validateJsonElement(jsonObj.get("destinationRegion"));
      }
      if ((jsonObj.get("sourceRegion") != null && !jsonObj.get("sourceRegion").isJsonNull()) && !jsonObj.get("sourceRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceRegion").toString()));
      }
      // validate the optional field `sourceRegion`
      if (jsonObj.get("sourceRegion") != null && !jsonObj.get("sourceRegion").isJsonNull()) {
        SourceRegionEnum.validateJsonElement(jsonObj.get("sourceRegion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheFillRegions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheFillRegions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheFillRegions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheFillRegions.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheFillRegions>() {
           @Override
           public void write(JsonWriter out, CacheFillRegions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheFillRegions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CacheFillRegions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CacheFillRegions
   * @throws IOException if the JSON string is invalid with respect to CacheFillRegions
   */
  public static CacheFillRegions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheFillRegions.class);
  }

  /**
   * Convert an instance of CacheFillRegions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

