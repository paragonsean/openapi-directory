/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Commitment;
import org.openapitools.client.model.ScenarioConfig;
import org.openapitools.client.model.Workload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates all the information needed to perform a cost estimate. It includes a specification of the Google Cloud usage whose costs are estimated, and configuration options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CostScenario {
  public static final String SERIALIZED_NAME_COMMITMENTS = "commitments";
  @SerializedName(SERIALIZED_NAME_COMMITMENTS)
  private List<Commitment> commitments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCENARIO_CONFIG = "scenarioConfig";
  @SerializedName(SERIALIZED_NAME_SCENARIO_CONFIG)
  private ScenarioConfig scenarioConfig;

  public static final String SERIALIZED_NAME_WORKLOADS = "workloads";
  @SerializedName(SERIALIZED_NAME_WORKLOADS)
  private List<Workload> workloads = new ArrayList<>();

  public CostScenario() {
  }

  public CostScenario commitments(List<Commitment> commitments) {
    this.commitments = commitments;
    return this;
  }

  public CostScenario addCommitmentsItem(Commitment commitmentsItem) {
    if (this.commitments == null) {
      this.commitments = new ArrayList<>();
    }
    this.commitments.add(commitmentsItem);
    return this;
  }

  /**
   * New commitments to estimate the costs for. The cost of the commitments will be included in the estimate result and discounts the commitment entitles will be included in the workload cost estimates. A maximum of 100 workloads can be provided.
   * @return commitments
   */
  @javax.annotation.Nullable
  public List<Commitment> getCommitments() {
    return commitments;
  }

  public void setCommitments(List<Commitment> commitments) {
    this.commitments = commitments;
  }


  public CostScenario scenarioConfig(ScenarioConfig scenarioConfig) {
    this.scenarioConfig = scenarioConfig;
    return this;
  }

  /**
   * Get scenarioConfig
   * @return scenarioConfig
   */
  @javax.annotation.Nullable
  public ScenarioConfig getScenarioConfig() {
    return scenarioConfig;
  }

  public void setScenarioConfig(ScenarioConfig scenarioConfig) {
    this.scenarioConfig = scenarioConfig;
  }


  public CostScenario workloads(List<Workload> workloads) {
    this.workloads = workloads;
    return this;
  }

  public CostScenario addWorkloadsItem(Workload workloadsItem) {
    if (this.workloads == null) {
      this.workloads = new ArrayList<>();
    }
    this.workloads.add(workloadsItem);
    return this;
  }

  /**
   * The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.
   * @return workloads
   */
  @javax.annotation.Nullable
  public List<Workload> getWorkloads() {
    return workloads;
  }

  public void setWorkloads(List<Workload> workloads) {
    this.workloads = workloads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostScenario costScenario = (CostScenario) o;
    return Objects.equals(this.commitments, costScenario.commitments) &&
        Objects.equals(this.scenarioConfig, costScenario.scenarioConfig) &&
        Objects.equals(this.workloads, costScenario.workloads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitments, scenarioConfig, workloads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostScenario {\n");
    sb.append("    commitments: ").append(toIndentedString(commitments)).append("\n");
    sb.append("    scenarioConfig: ").append(toIndentedString(scenarioConfig)).append("\n");
    sb.append("    workloads: ").append(toIndentedString(workloads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitments");
    openapiFields.add("scenarioConfig");
    openapiFields.add("workloads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CostScenario
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CostScenario.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostScenario is not found in the empty JSON string", CostScenario.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CostScenario.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CostScenario` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commitments") != null && !jsonObj.get("commitments").isJsonNull()) {
        JsonArray jsonArraycommitments = jsonObj.getAsJsonArray("commitments");
        if (jsonArraycommitments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commitments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commitments` to be an array in the JSON string but got `%s`", jsonObj.get("commitments").toString()));
          }

          // validate the optional field `commitments` (array)
          for (int i = 0; i < jsonArraycommitments.size(); i++) {
            Commitment.validateJsonElement(jsonArraycommitments.get(i));
          };
        }
      }
      // validate the optional field `scenarioConfig`
      if (jsonObj.get("scenarioConfig") != null && !jsonObj.get("scenarioConfig").isJsonNull()) {
        ScenarioConfig.validateJsonElement(jsonObj.get("scenarioConfig"));
      }
      if (jsonObj.get("workloads") != null && !jsonObj.get("workloads").isJsonNull()) {
        JsonArray jsonArrayworkloads = jsonObj.getAsJsonArray("workloads");
        if (jsonArrayworkloads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workloads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workloads` to be an array in the JSON string but got `%s`", jsonObj.get("workloads").toString()));
          }

          // validate the optional field `workloads` (array)
          for (int i = 0; i < jsonArrayworkloads.size(); i++) {
            Workload.validateJsonElement(jsonArrayworkloads.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostScenario.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostScenario' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostScenario> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostScenario.class));

       return (TypeAdapter<T>) new TypeAdapter<CostScenario>() {
           @Override
           public void write(JsonWriter out, CostScenario value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CostScenario read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CostScenario given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CostScenario
   * @throws IOException if the JSON string is invalid with respect to CostScenario
   */
  public static CostScenario fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostScenario.class);
  }

  /**
   * Convert an instance of CostScenario to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

