/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification of a custom machine type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomMachineType {
  public static final String SERIALIZED_NAME_MACHINE_SERIES = "machineSeries";
  @SerializedName(SERIALIZED_NAME_MACHINE_SERIES)
  private String machineSeries;

  public static final String SERIALIZED_NAME_MEMORY_SIZE_GB = "memorySizeGb";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE_GB)
  private Double memorySizeGb;

  public static final String SERIALIZED_NAME_VIRTUAL_CPU_COUNT = "virtualCpuCount";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_CPU_COUNT)
  private String virtualCpuCount;

  public CustomMachineType() {
  }

  public CustomMachineType machineSeries(String machineSeries) {
    this.machineSeries = machineSeries;
    return this;
  }

  /**
   * Required. The machine series. Only certain [machine series](https://cloud.google.com/compute/docs/general-purpose-machines#custom_machine_types) support custom configurations. For example: \&quot;n1\&quot;.
   * @return machineSeries
   */
  @javax.annotation.Nullable
  public String getMachineSeries() {
    return machineSeries;
  }

  public void setMachineSeries(String machineSeries) {
    this.machineSeries = machineSeries;
  }


  public CustomMachineType memorySizeGb(Double memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Required. Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB). Each [machine series](https://cloud.google.com/compute/docs/machine-types#machine_type_comparison) has limitations on allowed values for the ratio of memory-to-vCPU count.
   * @return memorySizeGb
   */
  @javax.annotation.Nullable
  public Double getMemorySizeGb() {
    return memorySizeGb;
  }

  public void setMemorySizeGb(Double memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
  }


  public CustomMachineType virtualCpuCount(String virtualCpuCount) {
    this.virtualCpuCount = virtualCpuCount;
    return this;
  }

  /**
   * Required. The number of vCPUs. The allowed values depend on the [machine series](https://cloud.google.com/compute/docs/machine-types#machine_type_comparison).
   * @return virtualCpuCount
   */
  @javax.annotation.Nullable
  public String getVirtualCpuCount() {
    return virtualCpuCount;
  }

  public void setVirtualCpuCount(String virtualCpuCount) {
    this.virtualCpuCount = virtualCpuCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomMachineType customMachineType = (CustomMachineType) o;
    return Objects.equals(this.machineSeries, customMachineType.machineSeries) &&
        Objects.equals(this.memorySizeGb, customMachineType.memorySizeGb) &&
        Objects.equals(this.virtualCpuCount, customMachineType.virtualCpuCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(machineSeries, memorySizeGb, virtualCpuCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomMachineType {\n");
    sb.append("    machineSeries: ").append(toIndentedString(machineSeries)).append("\n");
    sb.append("    memorySizeGb: ").append(toIndentedString(memorySizeGb)).append("\n");
    sb.append("    virtualCpuCount: ").append(toIndentedString(virtualCpuCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("machineSeries");
    openapiFields.add("memorySizeGb");
    openapiFields.add("virtualCpuCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomMachineType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomMachineType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomMachineType is not found in the empty JSON string", CustomMachineType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomMachineType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomMachineType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("machineSeries") != null && !jsonObj.get("machineSeries").isJsonNull()) && !jsonObj.get("machineSeries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineSeries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineSeries").toString()));
      }
      if ((jsonObj.get("virtualCpuCount") != null && !jsonObj.get("virtualCpuCount").isJsonNull()) && !jsonObj.get("virtualCpuCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualCpuCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualCpuCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomMachineType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomMachineType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomMachineType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomMachineType.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomMachineType>() {
           @Override
           public void write(JsonWriter out, CustomMachineType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomMachineType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomMachineType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomMachineType
   * @throws IOException if the JSON string is invalid with respect to CustomMachineType
   */
  public static CustomMachineType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomMachineType.class);
  }

  /**
   * Convert an instance of CustomMachineType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

