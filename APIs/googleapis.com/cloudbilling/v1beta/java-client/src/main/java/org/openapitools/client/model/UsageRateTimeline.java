/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UsageRateTimelineEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A timeline of usage rates. Consists of a series of entries, each of which specifies a constant rate of usage during a time interval. Each entry contains an effective time. The usage rate is in effect from that time until the effective time of the subsequent entry, or, for the last entry, for the remaining portion of estimation time frame. Effective times are specified as an offset into the estimation time frame. Usage is considered to be zero until the &#x60;effective_time&#x60; of the first entry. All subsequent entries must have an effective time greater than the previous entry and less than the estimate time frame. The effective time on all entries must be an integer number of hours.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageRateTimeline {
  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_USAGE_RATE_TIMELINE_ENTRIES = "usageRateTimelineEntries";
  @SerializedName(SERIALIZED_NAME_USAGE_RATE_TIMELINE_ENTRIES)
  private List<UsageRateTimelineEntry> usageRateTimelineEntries = new ArrayList<>();

  public UsageRateTimeline() {
  }

  public UsageRateTimeline unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an instance, the correct unit is provided in the error message. The supported units are a subset of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units (TIME-UNIT)** * &#x60;s&#x60; second * &#x60;min&#x60; minute * &#x60;h&#x60; hour * &#x60;d&#x60; day * &#x60;wk&#x60; week * &#x60;mo&#x60; month * &#x60;yr&#x60; year * &#x60;ms&#x60; millisecond * &#x60;us&#x60; microsecond * &#x60;ns&#x60; nanosecond * **Basic storage units (BASIC-STORAGE-UNIT)** * &#x60;bit&#x60; bit * &#x60;By&#x60; byte * **Count units (COUNT-UNIT)** * &#x60;count&#x60; count * **Prefixes (PREFIX)** * &#x60;k&#x60; kilo (10^3) * &#x60;M&#x60; mega (10^6) * &#x60;G&#x60; giga (10^9) * &#x60;T&#x60; tera (10^12) * &#x60;P&#x60; peta (10^15) * &#x60;Ki&#x60; kibi (2^10) * &#x60;Mi&#x60; mebi (2^20) * &#x60;Gi&#x60; gibi (2^30) * &#x60;Ti&#x60; tebi (2^40) * &#x60;Pi&#x60; pebi (2^50) **Grammar** The grammar also includes these connectors: * &#x60;/&#x60; division or ratio (as an infix operator). For example: &#x60;kBy/{email}&#x60; or &#x60;MiBy/10ms&#x60;. * &#x60;.&#x60; multiplication or composition (as an infix operator). For example: &#x60;GBy.d&#x60; or &#x60;k{watt}.h&#x60;. The grammar for a unit is as follows: &#x60;&#x60;&#x60; Expression &#x3D; Component { \&quot;.\&quot; Component } { \&quot;/\&quot; Component } ; Component &#x3D; ( [ PREFIX ] UNIT | \&quot;%\&quot; ) [ Annotation ] | Annotation | \&quot;1\&quot; ; UNIT &#x3D; TIME-UNIT | STORAGE-UNIT | DATA-UNIT | COUNT-UNIT Annotation &#x3D; \&quot;{\&quot; NAME \&quot;}\&quot; ; &#x60;&#x60;&#x60; Examples: * Request per second: &#x60;1/s&#x60; or &#x60;{requests}/s&#x60; * GibiBytes: &#x60;GiBy&#x60; * GibiBytes * seconds: &#x60;GiBy.s&#x60;
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public UsageRateTimeline usageRateTimelineEntries(List<UsageRateTimelineEntry> usageRateTimelineEntries) {
    this.usageRateTimelineEntries = usageRateTimelineEntries;
    return this;
  }

  public UsageRateTimeline addUsageRateTimelineEntriesItem(UsageRateTimelineEntry usageRateTimelineEntriesItem) {
    if (this.usageRateTimelineEntries == null) {
      this.usageRateTimelineEntries = new ArrayList<>();
    }
    this.usageRateTimelineEntries.add(usageRateTimelineEntriesItem);
    return this;
  }

  /**
   * The timeline entries. Each entry has a start time and usage rate. The start time specifies the effective time of the usage rate. The entries must be sorted by start time in an increasing order.
   * @return usageRateTimelineEntries
   */
  @javax.annotation.Nullable
  public List<UsageRateTimelineEntry> getUsageRateTimelineEntries() {
    return usageRateTimelineEntries;
  }

  public void setUsageRateTimelineEntries(List<UsageRateTimelineEntry> usageRateTimelineEntries) {
    this.usageRateTimelineEntries = usageRateTimelineEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageRateTimeline usageRateTimeline = (UsageRateTimeline) o;
    return Objects.equals(this.unit, usageRateTimeline.unit) &&
        Objects.equals(this.usageRateTimelineEntries, usageRateTimeline.usageRateTimelineEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unit, usageRateTimelineEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageRateTimeline {\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    usageRateTimelineEntries: ").append(toIndentedString(usageRateTimelineEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unit");
    openapiFields.add("usageRateTimelineEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageRateTimeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageRateTimeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageRateTimeline is not found in the empty JSON string", UsageRateTimeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageRateTimeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageRateTimeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (jsonObj.get("usageRateTimelineEntries") != null && !jsonObj.get("usageRateTimelineEntries").isJsonNull()) {
        JsonArray jsonArrayusageRateTimelineEntries = jsonObj.getAsJsonArray("usageRateTimelineEntries");
        if (jsonArrayusageRateTimelineEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usageRateTimelineEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usageRateTimelineEntries` to be an array in the JSON string but got `%s`", jsonObj.get("usageRateTimelineEntries").toString()));
          }

          // validate the optional field `usageRateTimelineEntries` (array)
          for (int i = 0; i < jsonArrayusageRateTimelineEntries.size(); i++) {
            UsageRateTimelineEntry.validateJsonElement(jsonArrayusageRateTimelineEntries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageRateTimeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageRateTimeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageRateTimeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageRateTimeline.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageRateTimeline>() {
           @Override
           public void write(JsonWriter out, UsageRateTimeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageRateTimeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageRateTimeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageRateTimeline
   * @throws IOException if the JSON string is invalid with respect to UsageRateTimeline
   */
  public static UsageRateTimeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageRateTimeline.class);
  }

  /**
   * Convert an instance of UsageRateTimeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

