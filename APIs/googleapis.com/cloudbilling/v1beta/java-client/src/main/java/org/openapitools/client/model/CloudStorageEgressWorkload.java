/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification of a network type. Network data transfer within Google Cloud applies when you move or copy data from one Cloud Storage bucket to another or when another Google Cloud service accesses data in your Cloud Storage bucket.This includes the network data transfer within Google Cloud and the general network usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudStorageEgressWorkload {
  /**
   * Where the data is sent to.
   */
  @JsonAdapter(DestinationContinentEnum.Adapter.class)
  public enum DestinationContinentEnum {
    UNSPECIFIED("DESTINATION_CONTINENT_UNSPECIFIED"),
    
    ASIA_PACIFIC("DESTINATION_CONTINENT_ASIA_PACIFIC"),
    
    AUTRALIA("DESTINATION_CONTINENT_AUTRALIA"),
    
    EUROPE("DESTINATION_CONTINENT_EUROPE"),
    
    NORTH_AMERICA("DESTINATION_CONTINENT_NORTH_AMERICA"),
    
    SOUTH_AMERICA("DESTINATION_CONTINENT_SOUTH_AMERICA");

    private String value;

    DestinationContinentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationContinentEnum fromValue(String value) {
      for (DestinationContinentEnum b : DestinationContinentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationContinentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationContinentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationContinentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationContinentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationContinentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_CONTINENT = "destinationContinent";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONTINENT)
  private DestinationContinentEnum destinationContinent;

  public static final String SERIALIZED_NAME_EGRESS_RATE = "egressRate";
  @SerializedName(SERIALIZED_NAME_EGRESS_RATE)
  private Usage egressRate;

  /**
   * Where the data comes from.
   */
  @JsonAdapter(SourceContinentEnum.Adapter.class)
  public enum SourceContinentEnum {
    UNSPECIFIED("SOURCE_CONTINENT_UNSPECIFIED"),
    
    ASIA_PACIFIC("SOURCE_CONTINENT_ASIA_PACIFIC"),
    
    AUSTRALIA("SOURCE_CONTINENT_AUSTRALIA"),
    
    EUROPE("SOURCE_CONTINENT_EUROPE"),
    
    NORTH_AMERICA("SOURCE_CONTINENT_NORTH_AMERICA"),
    
    SOUTH_AMERICA("SOURCE_CONTINENT_SOUTH_AMERICA");

    private String value;

    SourceContinentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceContinentEnum fromValue(String value) {
      for (SourceContinentEnum b : SourceContinentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceContinentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceContinentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceContinentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceContinentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceContinentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_CONTINENT = "sourceContinent";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONTINENT)
  private SourceContinentEnum sourceContinent;

  public CloudStorageEgressWorkload() {
  }

  public CloudStorageEgressWorkload destinationContinent(DestinationContinentEnum destinationContinent) {
    this.destinationContinent = destinationContinent;
    return this;
  }

  /**
   * Where the data is sent to.
   * @return destinationContinent
   */
  @javax.annotation.Nullable
  public DestinationContinentEnum getDestinationContinent() {
    return destinationContinent;
  }

  public void setDestinationContinent(DestinationContinentEnum destinationContinent) {
    this.destinationContinent = destinationContinent;
  }


  public CloudStorageEgressWorkload egressRate(Usage egressRate) {
    this.egressRate = egressRate;
    return this;
  }

  /**
   * Get egressRate
   * @return egressRate
   */
  @javax.annotation.Nullable
  public Usage getEgressRate() {
    return egressRate;
  }

  public void setEgressRate(Usage egressRate) {
    this.egressRate = egressRate;
  }


  public CloudStorageEgressWorkload sourceContinent(SourceContinentEnum sourceContinent) {
    this.sourceContinent = sourceContinent;
    return this;
  }

  /**
   * Where the data comes from.
   * @return sourceContinent
   */
  @javax.annotation.Nullable
  public SourceContinentEnum getSourceContinent() {
    return sourceContinent;
  }

  public void setSourceContinent(SourceContinentEnum sourceContinent) {
    this.sourceContinent = sourceContinent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudStorageEgressWorkload cloudStorageEgressWorkload = (CloudStorageEgressWorkload) o;
    return Objects.equals(this.destinationContinent, cloudStorageEgressWorkload.destinationContinent) &&
        Objects.equals(this.egressRate, cloudStorageEgressWorkload.egressRate) &&
        Objects.equals(this.sourceContinent, cloudStorageEgressWorkload.sourceContinent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationContinent, egressRate, sourceContinent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudStorageEgressWorkload {\n");
    sb.append("    destinationContinent: ").append(toIndentedString(destinationContinent)).append("\n");
    sb.append("    egressRate: ").append(toIndentedString(egressRate)).append("\n");
    sb.append("    sourceContinent: ").append(toIndentedString(sourceContinent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationContinent");
    openapiFields.add("egressRate");
    openapiFields.add("sourceContinent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudStorageEgressWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudStorageEgressWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudStorageEgressWorkload is not found in the empty JSON string", CloudStorageEgressWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudStorageEgressWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudStorageEgressWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationContinent") != null && !jsonObj.get("destinationContinent").isJsonNull()) && !jsonObj.get("destinationContinent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationContinent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationContinent").toString()));
      }
      // validate the optional field `destinationContinent`
      if (jsonObj.get("destinationContinent") != null && !jsonObj.get("destinationContinent").isJsonNull()) {
        DestinationContinentEnum.validateJsonElement(jsonObj.get("destinationContinent"));
      }
      // validate the optional field `egressRate`
      if (jsonObj.get("egressRate") != null && !jsonObj.get("egressRate").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("egressRate"));
      }
      if ((jsonObj.get("sourceContinent") != null && !jsonObj.get("sourceContinent").isJsonNull()) && !jsonObj.get("sourceContinent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceContinent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceContinent").toString()));
      }
      // validate the optional field `sourceContinent`
      if (jsonObj.get("sourceContinent") != null && !jsonObj.get("sourceContinent").isJsonNull()) {
        SourceContinentEnum.validateJsonElement(jsonObj.get("sourceContinent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudStorageEgressWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudStorageEgressWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudStorageEgressWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudStorageEgressWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudStorageEgressWorkload>() {
           @Override
           public void write(JsonWriter out, CloudStorageEgressWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudStorageEgressWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudStorageEgressWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudStorageEgressWorkload
   * @throws IOException if the JSON string is invalid with respect to CloudStorageEgressWorkload
   */
  public static CloudStorageEgressWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudStorageEgressWorkload.class);
  }

  /**
   * Convert an instance of CloudStorageEgressWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

