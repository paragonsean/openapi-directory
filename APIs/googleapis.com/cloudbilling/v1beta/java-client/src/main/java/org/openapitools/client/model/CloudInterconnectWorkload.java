/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Usage;
import org.openapitools.client.model.VlanAttachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies usage for Cloud Interconnect resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudInterconnectWorkload {
  public static final String SERIALIZED_NAME_INTERCONNECT_ATTACHMENTS = "interconnectAttachments";
  @SerializedName(SERIALIZED_NAME_INTERCONNECT_ATTACHMENTS)
  private List<VlanAttachment> interconnectAttachments = new ArrayList<>();

  /**
   * VLAN attachment type
   */
  @JsonAdapter(InterconnectTypeEnum.Adapter.class)
  public enum InterconnectTypeEnum {
    UNSPECIFIED("INTERCONNECT_TYPE_UNSPECIFIED"),
    
    DEDICATED("INTERCONNECT_TYPE_DEDICATED"),
    
    PARTNER("INTERCONNECT_TYPE_PARTNER");

    private String value;

    InterconnectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterconnectTypeEnum fromValue(String value) {
      for (InterconnectTypeEnum b : InterconnectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterconnectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterconnectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterconnectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterconnectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterconnectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERCONNECT_TYPE = "interconnectType";
  @SerializedName(SERIALIZED_NAME_INTERCONNECT_TYPE)
  private InterconnectTypeEnum interconnectType;

  /**
   * Interconnect circuit link type.
   */
  @JsonAdapter(LinkTypeEnum.Adapter.class)
  public enum LinkTypeEnum {
    UNSPECIFIED("LINK_TYPE_UNSPECIFIED"),
    
    ETHERNET_10_G_LR("LINK_TYPE_ETHERNET_10G_LR"),
    
    ETHERNET_100_G_LR("LINK_TYPE_ETHERNET_100G_LR");

    private String value;

    LinkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkTypeEnum fromValue(String value) {
      for (LinkTypeEnum b : LinkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINK_TYPE = "linkType";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private LinkTypeEnum linkType;

  public static final String SERIALIZED_NAME_PROVISIONED_LINK_COUNT = "provisionedLinkCount";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_LINK_COUNT)
  private Usage provisionedLinkCount;

  public CloudInterconnectWorkload() {
  }

  public CloudInterconnectWorkload interconnectAttachments(List<VlanAttachment> interconnectAttachments) {
    this.interconnectAttachments = interconnectAttachments;
    return this;
  }

  public CloudInterconnectWorkload addInterconnectAttachmentsItem(VlanAttachment interconnectAttachmentsItem) {
    if (this.interconnectAttachments == null) {
      this.interconnectAttachments = new ArrayList<>();
    }
    this.interconnectAttachments.add(interconnectAttachmentsItem);
    return this;
  }

  /**
   * VLAN attachment used for interconnect.
   * @return interconnectAttachments
   */
  @javax.annotation.Nullable
  public List<VlanAttachment> getInterconnectAttachments() {
    return interconnectAttachments;
  }

  public void setInterconnectAttachments(List<VlanAttachment> interconnectAttachments) {
    this.interconnectAttachments = interconnectAttachments;
  }


  public CloudInterconnectWorkload interconnectType(InterconnectTypeEnum interconnectType) {
    this.interconnectType = interconnectType;
    return this;
  }

  /**
   * VLAN attachment type
   * @return interconnectType
   */
  @javax.annotation.Nullable
  public InterconnectTypeEnum getInterconnectType() {
    return interconnectType;
  }

  public void setInterconnectType(InterconnectTypeEnum interconnectType) {
    this.interconnectType = interconnectType;
  }


  public CloudInterconnectWorkload linkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
    return this;
  }

  /**
   * Interconnect circuit link type.
   * @return linkType
   */
  @javax.annotation.Nullable
  public LinkTypeEnum getLinkType() {
    return linkType;
  }

  public void setLinkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
  }


  public CloudInterconnectWorkload provisionedLinkCount(Usage provisionedLinkCount) {
    this.provisionedLinkCount = provisionedLinkCount;
    return this;
  }

  /**
   * Get provisionedLinkCount
   * @return provisionedLinkCount
   */
  @javax.annotation.Nullable
  public Usage getProvisionedLinkCount() {
    return provisionedLinkCount;
  }

  public void setProvisionedLinkCount(Usage provisionedLinkCount) {
    this.provisionedLinkCount = provisionedLinkCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudInterconnectWorkload cloudInterconnectWorkload = (CloudInterconnectWorkload) o;
    return Objects.equals(this.interconnectAttachments, cloudInterconnectWorkload.interconnectAttachments) &&
        Objects.equals(this.interconnectType, cloudInterconnectWorkload.interconnectType) &&
        Objects.equals(this.linkType, cloudInterconnectWorkload.linkType) &&
        Objects.equals(this.provisionedLinkCount, cloudInterconnectWorkload.provisionedLinkCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interconnectAttachments, interconnectType, linkType, provisionedLinkCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudInterconnectWorkload {\n");
    sb.append("    interconnectAttachments: ").append(toIndentedString(interconnectAttachments)).append("\n");
    sb.append("    interconnectType: ").append(toIndentedString(interconnectType)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    provisionedLinkCount: ").append(toIndentedString(provisionedLinkCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interconnectAttachments");
    openapiFields.add("interconnectType");
    openapiFields.add("linkType");
    openapiFields.add("provisionedLinkCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudInterconnectWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudInterconnectWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudInterconnectWorkload is not found in the empty JSON string", CloudInterconnectWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudInterconnectWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudInterconnectWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("interconnectAttachments") != null && !jsonObj.get("interconnectAttachments").isJsonNull()) {
        JsonArray jsonArrayinterconnectAttachments = jsonObj.getAsJsonArray("interconnectAttachments");
        if (jsonArrayinterconnectAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interconnectAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interconnectAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("interconnectAttachments").toString()));
          }

          // validate the optional field `interconnectAttachments` (array)
          for (int i = 0; i < jsonArrayinterconnectAttachments.size(); i++) {
            VlanAttachment.validateJsonElement(jsonArrayinterconnectAttachments.get(i));
          };
        }
      }
      if ((jsonObj.get("interconnectType") != null && !jsonObj.get("interconnectType").isJsonNull()) && !jsonObj.get("interconnectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interconnectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interconnectType").toString()));
      }
      // validate the optional field `interconnectType`
      if (jsonObj.get("interconnectType") != null && !jsonObj.get("interconnectType").isJsonNull()) {
        InterconnectTypeEnum.validateJsonElement(jsonObj.get("interconnectType"));
      }
      if ((jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) && !jsonObj.get("linkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkType").toString()));
      }
      // validate the optional field `linkType`
      if (jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) {
        LinkTypeEnum.validateJsonElement(jsonObj.get("linkType"));
      }
      // validate the optional field `provisionedLinkCount`
      if (jsonObj.get("provisionedLinkCount") != null && !jsonObj.get("provisionedLinkCount").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("provisionedLinkCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudInterconnectWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudInterconnectWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudInterconnectWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudInterconnectWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudInterconnectWorkload>() {
           @Override
           public void write(JsonWriter out, CloudInterconnectWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudInterconnectWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudInterconnectWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudInterconnectWorkload
   * @throws IOException if the JSON string is invalid with respect to CloudInterconnectWorkload
   */
  public static CloudInterconnectWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudInterconnectWorkload.class);
  }

  /**
   * Convert an instance of CloudInterconnectWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

