/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies usage for Cloud CDN Data Transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudCdnEgressWorkload {
  /**
   * The destination for the cache data transfer.
   */
  @JsonAdapter(CacheEgressDestinationEnum.Adapter.class)
  public enum CacheEgressDestinationEnum {
    UNSPECIFIED("CACHE_EGRESS_DESTINATION_UNSPECIFIED"),
    
    ASIA_PACIFIC("CACHE_EGRESS_DESTINATION_ASIA_PACIFIC"),
    
    CHINA("CACHE_EGRESS_DESTINATION_CHINA"),
    
    EUROPE("CACHE_EGRESS_DESTINATION_EUROPE"),
    
    NORTH_AMERICA("CACHE_EGRESS_DESTINATION_NORTH_AMERICA"),
    
    OCEANIA("CACHE_EGRESS_DESTINATION_OCEANIA"),
    
    LATIN_AMERICA("CACHE_EGRESS_DESTINATION_LATIN_AMERICA"),
    
    OTHER_DESTINATIONS("CACHE_EGRESS_DESTINATION_OTHER_DESTINATIONS");

    private String value;

    CacheEgressDestinationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CacheEgressDestinationEnum fromValue(String value) {
      for (CacheEgressDestinationEnum b : CacheEgressDestinationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CacheEgressDestinationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CacheEgressDestinationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CacheEgressDestinationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CacheEgressDestinationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CacheEgressDestinationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHE_EGRESS_DESTINATION = "cacheEgressDestination";
  @SerializedName(SERIALIZED_NAME_CACHE_EGRESS_DESTINATION)
  private CacheEgressDestinationEnum cacheEgressDestination;

  public static final String SERIALIZED_NAME_CACHE_EGRESS_RATE = "cacheEgressRate";
  @SerializedName(SERIALIZED_NAME_CACHE_EGRESS_RATE)
  private Usage cacheEgressRate;

  public CloudCdnEgressWorkload() {
  }

  public CloudCdnEgressWorkload cacheEgressDestination(CacheEgressDestinationEnum cacheEgressDestination) {
    this.cacheEgressDestination = cacheEgressDestination;
    return this;
  }

  /**
   * The destination for the cache data transfer.
   * @return cacheEgressDestination
   */
  @javax.annotation.Nullable
  public CacheEgressDestinationEnum getCacheEgressDestination() {
    return cacheEgressDestination;
  }

  public void setCacheEgressDestination(CacheEgressDestinationEnum cacheEgressDestination) {
    this.cacheEgressDestination = cacheEgressDestination;
  }


  public CloudCdnEgressWorkload cacheEgressRate(Usage cacheEgressRate) {
    this.cacheEgressRate = cacheEgressRate;
    return this;
  }

  /**
   * Get cacheEgressRate
   * @return cacheEgressRate
   */
  @javax.annotation.Nullable
  public Usage getCacheEgressRate() {
    return cacheEgressRate;
  }

  public void setCacheEgressRate(Usage cacheEgressRate) {
    this.cacheEgressRate = cacheEgressRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudCdnEgressWorkload cloudCdnEgressWorkload = (CloudCdnEgressWorkload) o;
    return Objects.equals(this.cacheEgressDestination, cloudCdnEgressWorkload.cacheEgressDestination) &&
        Objects.equals(this.cacheEgressRate, cloudCdnEgressWorkload.cacheEgressRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheEgressDestination, cacheEgressRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudCdnEgressWorkload {\n");
    sb.append("    cacheEgressDestination: ").append(toIndentedString(cacheEgressDestination)).append("\n");
    sb.append("    cacheEgressRate: ").append(toIndentedString(cacheEgressRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheEgressDestination");
    openapiFields.add("cacheEgressRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudCdnEgressWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudCdnEgressWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudCdnEgressWorkload is not found in the empty JSON string", CloudCdnEgressWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudCdnEgressWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudCdnEgressWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cacheEgressDestination") != null && !jsonObj.get("cacheEgressDestination").isJsonNull()) && !jsonObj.get("cacheEgressDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cacheEgressDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cacheEgressDestination").toString()));
      }
      // validate the optional field `cacheEgressDestination`
      if (jsonObj.get("cacheEgressDestination") != null && !jsonObj.get("cacheEgressDestination").isJsonNull()) {
        CacheEgressDestinationEnum.validateJsonElement(jsonObj.get("cacheEgressDestination"));
      }
      // validate the optional field `cacheEgressRate`
      if (jsonObj.get("cacheEgressRate") != null && !jsonObj.get("cacheEgressRate").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("cacheEgressRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudCdnEgressWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudCdnEgressWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudCdnEgressWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudCdnEgressWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudCdnEgressWorkload>() {
           @Override
           public void write(JsonWriter out, CloudCdnEgressWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudCdnEgressWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudCdnEgressWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudCdnEgressWorkload
   * @throws IOException if the JSON string is invalid with respect to CloudCdnEgressWorkload
   */
  public static CloudCdnEgressWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudCdnEgressWorkload.class);
  }

  /**
   * Convert an instance of CloudCdnEgressWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

