/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DualRegional;
import org.openapitools.client.model.MultiRegional;
import org.openapitools.client.model.Regional;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies usage of Cloud Storage resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudStorageWorkload {
  public static final String SERIALIZED_NAME_DATA_RETRIEVAL = "dataRetrieval";
  @SerializedName(SERIALIZED_NAME_DATA_RETRIEVAL)
  private Usage dataRetrieval;

  public static final String SERIALIZED_NAME_DATA_STORED = "dataStored";
  @SerializedName(SERIALIZED_NAME_DATA_STORED)
  private Usage dataStored;

  public static final String SERIALIZED_NAME_DUAL_REGION = "dualRegion";
  @SerializedName(SERIALIZED_NAME_DUAL_REGION)
  private DualRegional dualRegion;

  public static final String SERIALIZED_NAME_MULTI_REGION = "multiRegion";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION)
  private MultiRegional multiRegion;

  public static final String SERIALIZED_NAME_OPERATION_A = "operationA";
  @SerializedName(SERIALIZED_NAME_OPERATION_A)
  private Usage operationA;

  public static final String SERIALIZED_NAME_OPERATION_B = "operationB";
  @SerializedName(SERIALIZED_NAME_OPERATION_B)
  private Usage operationB;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private Regional region;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private String storageClass;

  public CloudStorageWorkload() {
  }

  public CloudStorageWorkload dataRetrieval(Usage dataRetrieval) {
    this.dataRetrieval = dataRetrieval;
    return this;
  }

  /**
   * Get dataRetrieval
   * @return dataRetrieval
   */
  @javax.annotation.Nullable
  public Usage getDataRetrieval() {
    return dataRetrieval;
  }

  public void setDataRetrieval(Usage dataRetrieval) {
    this.dataRetrieval = dataRetrieval;
  }


  public CloudStorageWorkload dataStored(Usage dataStored) {
    this.dataStored = dataStored;
    return this;
  }

  /**
   * Get dataStored
   * @return dataStored
   */
  @javax.annotation.Nullable
  public Usage getDataStored() {
    return dataStored;
  }

  public void setDataStored(Usage dataStored) {
    this.dataStored = dataStored;
  }


  public CloudStorageWorkload dualRegion(DualRegional dualRegion) {
    this.dualRegion = dualRegion;
    return this;
  }

  /**
   * Get dualRegion
   * @return dualRegion
   */
  @javax.annotation.Nullable
  public DualRegional getDualRegion() {
    return dualRegion;
  }

  public void setDualRegion(DualRegional dualRegion) {
    this.dualRegion = dualRegion;
  }


  public CloudStorageWorkload multiRegion(MultiRegional multiRegion) {
    this.multiRegion = multiRegion;
    return this;
  }

  /**
   * Get multiRegion
   * @return multiRegion
   */
  @javax.annotation.Nullable
  public MultiRegional getMultiRegion() {
    return multiRegion;
  }

  public void setMultiRegion(MultiRegional multiRegion) {
    this.multiRegion = multiRegion;
  }


  public CloudStorageWorkload operationA(Usage operationA) {
    this.operationA = operationA;
    return this;
  }

  /**
   * Get operationA
   * @return operationA
   */
  @javax.annotation.Nullable
  public Usage getOperationA() {
    return operationA;
  }

  public void setOperationA(Usage operationA) {
    this.operationA = operationA;
  }


  public CloudStorageWorkload operationB(Usage operationB) {
    this.operationB = operationB;
    return this;
  }

  /**
   * Get operationB
   * @return operationB
   */
  @javax.annotation.Nullable
  public Usage getOperationB() {
    return operationB;
  }

  public void setOperationB(Usage operationB) {
    this.operationB = operationB;
  }


  public CloudStorageWorkload region(Regional region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public Regional getRegion() {
    return region;
  }

  public void setRegion(Regional region) {
    this.region = region;
  }


  public CloudStorageWorkload storageClass(String storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * The [storage class](https://cloud.google.com/storage/docs/storage-classes#classes) of the data and operation. For example: \&quot;standard\&quot; and \&quot;nearline\&quot;.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public String getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(String storageClass) {
    this.storageClass = storageClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudStorageWorkload cloudStorageWorkload = (CloudStorageWorkload) o;
    return Objects.equals(this.dataRetrieval, cloudStorageWorkload.dataRetrieval) &&
        Objects.equals(this.dataStored, cloudStorageWorkload.dataStored) &&
        Objects.equals(this.dualRegion, cloudStorageWorkload.dualRegion) &&
        Objects.equals(this.multiRegion, cloudStorageWorkload.multiRegion) &&
        Objects.equals(this.operationA, cloudStorageWorkload.operationA) &&
        Objects.equals(this.operationB, cloudStorageWorkload.operationB) &&
        Objects.equals(this.region, cloudStorageWorkload.region) &&
        Objects.equals(this.storageClass, cloudStorageWorkload.storageClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRetrieval, dataStored, dualRegion, multiRegion, operationA, operationB, region, storageClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudStorageWorkload {\n");
    sb.append("    dataRetrieval: ").append(toIndentedString(dataRetrieval)).append("\n");
    sb.append("    dataStored: ").append(toIndentedString(dataStored)).append("\n");
    sb.append("    dualRegion: ").append(toIndentedString(dualRegion)).append("\n");
    sb.append("    multiRegion: ").append(toIndentedString(multiRegion)).append("\n");
    sb.append("    operationA: ").append(toIndentedString(operationA)).append("\n");
    sb.append("    operationB: ").append(toIndentedString(operationB)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataRetrieval");
    openapiFields.add("dataStored");
    openapiFields.add("dualRegion");
    openapiFields.add("multiRegion");
    openapiFields.add("operationA");
    openapiFields.add("operationB");
    openapiFields.add("region");
    openapiFields.add("storageClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudStorageWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudStorageWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudStorageWorkload is not found in the empty JSON string", CloudStorageWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudStorageWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudStorageWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataRetrieval`
      if (jsonObj.get("dataRetrieval") != null && !jsonObj.get("dataRetrieval").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("dataRetrieval"));
      }
      // validate the optional field `dataStored`
      if (jsonObj.get("dataStored") != null && !jsonObj.get("dataStored").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("dataStored"));
      }
      // validate the optional field `dualRegion`
      if (jsonObj.get("dualRegion") != null && !jsonObj.get("dualRegion").isJsonNull()) {
        DualRegional.validateJsonElement(jsonObj.get("dualRegion"));
      }
      // validate the optional field `multiRegion`
      if (jsonObj.get("multiRegion") != null && !jsonObj.get("multiRegion").isJsonNull()) {
        MultiRegional.validateJsonElement(jsonObj.get("multiRegion"));
      }
      // validate the optional field `operationA`
      if (jsonObj.get("operationA") != null && !jsonObj.get("operationA").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("operationA"));
      }
      // validate the optional field `operationB`
      if (jsonObj.get("operationB") != null && !jsonObj.get("operationB").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("operationB"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        Regional.validateJsonElement(jsonObj.get("region"));
      }
      if ((jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) && !jsonObj.get("storageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClass").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudStorageWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudStorageWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudStorageWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudStorageWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudStorageWorkload>() {
           @Override
           public void write(JsonWriter out, CloudStorageWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudStorageWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudStorageWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudStorageWorkload
   * @throws IOException if the JSON string is invalid with respect to CloudStorageWorkload
   */
  public static CloudStorageWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudStorageWorkload.class);
  }

  /**
   * Convert an instance of CloudStorageWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

