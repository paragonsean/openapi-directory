/*
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CacheFillRegions;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies usage for Cloud CDN resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:15.055795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudCdnWorkload {
  /**
   * The source service for the cache fill.
   */
  @JsonAdapter(CacheFillOriginServiceEnum.Adapter.class)
  public enum CacheFillOriginServiceEnum {
    UNSPECIFIED("CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED"),
    
    GOOGLE_CLOUD_STORAGE_BUCKET("CACHE_FILL_ORIGIN_SERVICE_GOOGLE_CLOUD_STORAGE_BUCKET"),
    
    BACKEND_SERVICE("CACHE_FILL_ORIGIN_SERVICE_BACKEND_SERVICE");

    private String value;

    CacheFillOriginServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CacheFillOriginServiceEnum fromValue(String value) {
      for (CacheFillOriginServiceEnum b : CacheFillOriginServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CacheFillOriginServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CacheFillOriginServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CacheFillOriginServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CacheFillOriginServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CacheFillOriginServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHE_FILL_ORIGIN_SERVICE = "cacheFillOriginService";
  @SerializedName(SERIALIZED_NAME_CACHE_FILL_ORIGIN_SERVICE)
  private CacheFillOriginServiceEnum cacheFillOriginService;

  public static final String SERIALIZED_NAME_CACHE_FILL_RATE = "cacheFillRate";
  @SerializedName(SERIALIZED_NAME_CACHE_FILL_RATE)
  private Usage cacheFillRate;

  public static final String SERIALIZED_NAME_CACHE_FILL_REGIONS = "cacheFillRegions";
  @SerializedName(SERIALIZED_NAME_CACHE_FILL_REGIONS)
  private CacheFillRegions cacheFillRegions;

  public static final String SERIALIZED_NAME_CACHE_LOOK_UP_RATE = "cacheLookUpRate";
  @SerializedName(SERIALIZED_NAME_CACHE_LOOK_UP_RATE)
  private Usage cacheLookUpRate;

  public CloudCdnWorkload() {
  }

  public CloudCdnWorkload cacheFillOriginService(CacheFillOriginServiceEnum cacheFillOriginService) {
    this.cacheFillOriginService = cacheFillOriginService;
    return this;
  }

  /**
   * The source service for the cache fill.
   * @return cacheFillOriginService
   */
  @javax.annotation.Nullable
  public CacheFillOriginServiceEnum getCacheFillOriginService() {
    return cacheFillOriginService;
  }

  public void setCacheFillOriginService(CacheFillOriginServiceEnum cacheFillOriginService) {
    this.cacheFillOriginService = cacheFillOriginService;
  }


  public CloudCdnWorkload cacheFillRate(Usage cacheFillRate) {
    this.cacheFillRate = cacheFillRate;
    return this;
  }

  /**
   * Get cacheFillRate
   * @return cacheFillRate
   */
  @javax.annotation.Nullable
  public Usage getCacheFillRate() {
    return cacheFillRate;
  }

  public void setCacheFillRate(Usage cacheFillRate) {
    this.cacheFillRate = cacheFillRate;
  }


  public CloudCdnWorkload cacheFillRegions(CacheFillRegions cacheFillRegions) {
    this.cacheFillRegions = cacheFillRegions;
    return this;
  }

  /**
   * Get cacheFillRegions
   * @return cacheFillRegions
   */
  @javax.annotation.Nullable
  public CacheFillRegions getCacheFillRegions() {
    return cacheFillRegions;
  }

  public void setCacheFillRegions(CacheFillRegions cacheFillRegions) {
    this.cacheFillRegions = cacheFillRegions;
  }


  public CloudCdnWorkload cacheLookUpRate(Usage cacheLookUpRate) {
    this.cacheLookUpRate = cacheLookUpRate;
    return this;
  }

  /**
   * Get cacheLookUpRate
   * @return cacheLookUpRate
   */
  @javax.annotation.Nullable
  public Usage getCacheLookUpRate() {
    return cacheLookUpRate;
  }

  public void setCacheLookUpRate(Usage cacheLookUpRate) {
    this.cacheLookUpRate = cacheLookUpRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudCdnWorkload cloudCdnWorkload = (CloudCdnWorkload) o;
    return Objects.equals(this.cacheFillOriginService, cloudCdnWorkload.cacheFillOriginService) &&
        Objects.equals(this.cacheFillRate, cloudCdnWorkload.cacheFillRate) &&
        Objects.equals(this.cacheFillRegions, cloudCdnWorkload.cacheFillRegions) &&
        Objects.equals(this.cacheLookUpRate, cloudCdnWorkload.cacheLookUpRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheFillOriginService, cacheFillRate, cacheFillRegions, cacheLookUpRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudCdnWorkload {\n");
    sb.append("    cacheFillOriginService: ").append(toIndentedString(cacheFillOriginService)).append("\n");
    sb.append("    cacheFillRate: ").append(toIndentedString(cacheFillRate)).append("\n");
    sb.append("    cacheFillRegions: ").append(toIndentedString(cacheFillRegions)).append("\n");
    sb.append("    cacheLookUpRate: ").append(toIndentedString(cacheLookUpRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheFillOriginService");
    openapiFields.add("cacheFillRate");
    openapiFields.add("cacheFillRegions");
    openapiFields.add("cacheLookUpRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudCdnWorkload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudCdnWorkload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudCdnWorkload is not found in the empty JSON string", CloudCdnWorkload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudCdnWorkload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudCdnWorkload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cacheFillOriginService") != null && !jsonObj.get("cacheFillOriginService").isJsonNull()) && !jsonObj.get("cacheFillOriginService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cacheFillOriginService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cacheFillOriginService").toString()));
      }
      // validate the optional field `cacheFillOriginService`
      if (jsonObj.get("cacheFillOriginService") != null && !jsonObj.get("cacheFillOriginService").isJsonNull()) {
        CacheFillOriginServiceEnum.validateJsonElement(jsonObj.get("cacheFillOriginService"));
      }
      // validate the optional field `cacheFillRate`
      if (jsonObj.get("cacheFillRate") != null && !jsonObj.get("cacheFillRate").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("cacheFillRate"));
      }
      // validate the optional field `cacheFillRegions`
      if (jsonObj.get("cacheFillRegions") != null && !jsonObj.get("cacheFillRegions").isJsonNull()) {
        CacheFillRegions.validateJsonElement(jsonObj.get("cacheFillRegions"));
      }
      // validate the optional field `cacheLookUpRate`
      if (jsonObj.get("cacheLookUpRate") != null && !jsonObj.get("cacheLookUpRate").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("cacheLookUpRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudCdnWorkload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudCdnWorkload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudCdnWorkload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudCdnWorkload.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudCdnWorkload>() {
           @Override
           public void write(JsonWriter out, CloudCdnWorkload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudCdnWorkload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudCdnWorkload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudCdnWorkload
   * @throws IOException if the JSON string is invalid with respect to CloudCdnWorkload
   */
  public static CloudCdnWorkload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudCdnWorkload.class);
  }

  /**
   * Convert an instance of CloudCdnWorkload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

