# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_accelerator import GuestAccelerator
from openapi_server.models.machine_type import MachineType
from openapi_server.models.persistent_disk import PersistentDisk
from openapi_server.models.usage import Usage
from openapi_server import util


class ComputeVmWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_confidential_compute: bool=None, guest_accelerator: GuestAccelerator=None, instances_running: Usage=None, licenses: List[str]=None, machine_type: MachineType=None, persistent_disks: List[PersistentDisk]=None, preemptible: bool=None, region: str=None):
        """ComputeVmWorkload - a model defined in OpenAPI

        :param enable_confidential_compute: The enable_confidential_compute of this ComputeVmWorkload.
        :param guest_accelerator: The guest_accelerator of this ComputeVmWorkload.
        :param instances_running: The instances_running of this ComputeVmWorkload.
        :param licenses: The licenses of this ComputeVmWorkload.
        :param machine_type: The machine_type of this ComputeVmWorkload.
        :param persistent_disks: The persistent_disks of this ComputeVmWorkload.
        :param preemptible: The preemptible of this ComputeVmWorkload.
        :param region: The region of this ComputeVmWorkload.
        """
        self.openapi_types = {
            'enable_confidential_compute': bool,
            'guest_accelerator': GuestAccelerator,
            'instances_running': Usage,
            'licenses': List[str],
            'machine_type': MachineType,
            'persistent_disks': List[PersistentDisk],
            'preemptible': bool,
            'region': str
        }

        self.attribute_map = {
            'enable_confidential_compute': 'enableConfidentialCompute',
            'guest_accelerator': 'guestAccelerator',
            'instances_running': 'instancesRunning',
            'licenses': 'licenses',
            'machine_type': 'machineType',
            'persistent_disks': 'persistentDisks',
            'preemptible': 'preemptible',
            'region': 'region'
        }

        self._enable_confidential_compute = enable_confidential_compute
        self._guest_accelerator = guest_accelerator
        self._instances_running = instances_running
        self._licenses = licenses
        self._machine_type = machine_type
        self._persistent_disks = persistent_disks
        self._preemptible = preemptible
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeVmWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeVmWorkload of this ComputeVmWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_confidential_compute(self):
        """Gets the enable_confidential_compute of this ComputeVmWorkload.

        Defines whether each instance has confidential compute enabled.

        :return: The enable_confidential_compute of this ComputeVmWorkload.
        :rtype: bool
        """
        return self._enable_confidential_compute

    @enable_confidential_compute.setter
    def enable_confidential_compute(self, enable_confidential_compute):
        """Sets the enable_confidential_compute of this ComputeVmWorkload.

        Defines whether each instance has confidential compute enabled.

        :param enable_confidential_compute: The enable_confidential_compute of this ComputeVmWorkload.
        :type enable_confidential_compute: bool
        """

        self._enable_confidential_compute = enable_confidential_compute

    @property
    def guest_accelerator(self):
        """Gets the guest_accelerator of this ComputeVmWorkload.


        :return: The guest_accelerator of this ComputeVmWorkload.
        :rtype: GuestAccelerator
        """
        return self._guest_accelerator

    @guest_accelerator.setter
    def guest_accelerator(self, guest_accelerator):
        """Sets the guest_accelerator of this ComputeVmWorkload.


        :param guest_accelerator: The guest_accelerator of this ComputeVmWorkload.
        :type guest_accelerator: GuestAccelerator
        """

        self._guest_accelerator = guest_accelerator

    @property
    def instances_running(self):
        """Gets the instances_running of this ComputeVmWorkload.


        :return: The instances_running of this ComputeVmWorkload.
        :rtype: Usage
        """
        return self._instances_running

    @instances_running.setter
    def instances_running(self, instances_running):
        """Sets the instances_running of this ComputeVmWorkload.


        :param instances_running: The instances_running of this ComputeVmWorkload.
        :type instances_running: Usage
        """

        self._instances_running = instances_running

    @property
    def licenses(self):
        """Gets the licenses of this ComputeVmWorkload.

        Premium image licenses used by each instance.

        :return: The licenses of this ComputeVmWorkload.
        :rtype: List[str]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ComputeVmWorkload.

        Premium image licenses used by each instance.

        :param licenses: The licenses of this ComputeVmWorkload.
        :type licenses: List[str]
        """

        self._licenses = licenses

    @property
    def machine_type(self):
        """Gets the machine_type of this ComputeVmWorkload.


        :return: The machine_type of this ComputeVmWorkload.
        :rtype: MachineType
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this ComputeVmWorkload.


        :param machine_type: The machine_type of this ComputeVmWorkload.
        :type machine_type: MachineType
        """

        self._machine_type = machine_type

    @property
    def persistent_disks(self):
        """Gets the persistent_disks of this ComputeVmWorkload.

        Persistent disks attached to each instance. Must include a boot disk.

        :return: The persistent_disks of this ComputeVmWorkload.
        :rtype: List[PersistentDisk]
        """
        return self._persistent_disks

    @persistent_disks.setter
    def persistent_disks(self, persistent_disks):
        """Sets the persistent_disks of this ComputeVmWorkload.

        Persistent disks attached to each instance. Must include a boot disk.

        :param persistent_disks: The persistent_disks of this ComputeVmWorkload.
        :type persistent_disks: List[PersistentDisk]
        """

        self._persistent_disks = persistent_disks

    @property
    def preemptible(self):
        """Gets the preemptible of this ComputeVmWorkload.

        Defines whether each instance is preemptible.

        :return: The preemptible of this ComputeVmWorkload.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this ComputeVmWorkload.

        Defines whether each instance is preemptible.

        :param preemptible: The preemptible of this ComputeVmWorkload.
        :type preemptible: bool
        """

        self._preemptible = preemptible

    @property
    def region(self):
        """Gets the region of this ComputeVmWorkload.

        The [region](https://cloud.google.com/compute/docs/regions-zones) where the VMs run. For example: \"us-central1\".

        :return: The region of this ComputeVmWorkload.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ComputeVmWorkload.

        The [region](https://cloud.google.com/compute/docs/regions-zones) where the VMs run. For example: \"us-central1\".

        :param region: The region of this ComputeVmWorkload.
        :type region: str
        """

        self._region = region
