# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_billing_skugroupskus_v1beta_geo_taxonomy_multi_regional import GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyMultiRegional
from openapi_server.models.google_cloud_billing_skugroupskus_v1beta_geo_taxonomy_regional import GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyRegional
from openapi_server import util


class GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_metadata: object=None, multi_regional_metadata: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyMultiRegional=None, regional_metadata: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyRegional=None, type: str=None):
        """GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy - a model defined in OpenAPI

        :param global_metadata: The global_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :param multi_regional_metadata: The multi_regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :param regional_metadata: The regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :param type: The type of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        """
        self.openapi_types = {
            'global_metadata': object,
            'multi_regional_metadata': GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyMultiRegional,
            'regional_metadata': GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyRegional,
            'type': str
        }

        self.attribute_map = {
            'global_metadata': 'globalMetadata',
            'multi_regional_metadata': 'multiRegionalMetadata',
            'regional_metadata': 'regionalMetadata',
            'type': 'type'
        }

        self._global_metadata = global_metadata
        self._multi_regional_metadata = multi_regional_metadata
        self._regional_metadata = regional_metadata
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_metadata(self):
        """Gets the global_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.

        Encapsulates a global geographic taxonomy.

        :return: The global_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :rtype: object
        """
        return self._global_metadata

    @global_metadata.setter
    def global_metadata(self, global_metadata):
        """Sets the global_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.

        Encapsulates a global geographic taxonomy.

        :param global_metadata: The global_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :type global_metadata: object
        """

        self._global_metadata = global_metadata

    @property
    def multi_regional_metadata(self):
        """Gets the multi_regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.


        :return: The multi_regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :rtype: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyMultiRegional
        """
        return self._multi_regional_metadata

    @multi_regional_metadata.setter
    def multi_regional_metadata(self, multi_regional_metadata):
        """Sets the multi_regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.


        :param multi_regional_metadata: The multi_regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :type multi_regional_metadata: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyMultiRegional
        """

        self._multi_regional_metadata = multi_regional_metadata

    @property
    def regional_metadata(self):
        """Gets the regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.


        :return: The regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :rtype: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyRegional
        """
        return self._regional_metadata

    @regional_metadata.setter
    def regional_metadata(self, regional_metadata):
        """Sets the regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.


        :param regional_metadata: The regional_metadata of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :type regional_metadata: GoogleCloudBillingSkugroupskusV1betaGeoTaxonomyRegional
        """

        self._regional_metadata = regional_metadata

    @property
    def type(self):
        """Gets the type of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.

        Type of geographic taxonomy associated with the SKU group SKU.

        :return: The type of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.

        Type of geographic taxonomy associated with the SKU group SKU.

        :param type: The type of this GoogleCloudBillingSkugroupskusV1betaGeoTaxonomy.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_GLOBAL", "TYPE_REGIONAL", "TYPE_MULTI_REGIONAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
