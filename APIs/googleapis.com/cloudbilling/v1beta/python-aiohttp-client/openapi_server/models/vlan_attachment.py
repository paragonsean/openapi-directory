# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server import util


class VlanAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth: str=None, vlan_count: Usage=None):
        """VlanAttachment - a model defined in OpenAPI

        :param bandwidth: The bandwidth of this VlanAttachment.
        :param vlan_count: The vlan_count of this VlanAttachment.
        """
        self.openapi_types = {
            'bandwidth': str,
            'vlan_count': Usage
        }

        self.attribute_map = {
            'bandwidth': 'bandwidth',
            'vlan_count': 'vlanCount'
        }

        self._bandwidth = bandwidth
        self._vlan_count = vlan_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VlanAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VlanAttachment of this VlanAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth(self):
        """Gets the bandwidth of this VlanAttachment.

        Capacities in the [pricing table](https://cloud.google.com/vpc/network-pricing#interconnect-pricing) Examples of capacity are: 50/100/200/300/400/500-Mbps, 1/2/5/10/20/50-Gbps.

        :return: The bandwidth of this VlanAttachment.
        :rtype: str
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this VlanAttachment.

        Capacities in the [pricing table](https://cloud.google.com/vpc/network-pricing#interconnect-pricing) Examples of capacity are: 50/100/200/300/400/500-Mbps, 1/2/5/10/20/50-Gbps.

        :param bandwidth: The bandwidth of this VlanAttachment.
        :type bandwidth: str
        """
        allowed_values = ["BANDWIDTH_UNSPECIFIED", "BANDWIDTH_BPS_50M", "BANDWIDTH_BPS_100M", "BANDWIDTH_BPS_200M", "BANDWIDTH_BPS_300M", "BANDWIDTH_BPS_400M", "BANDWIDTH_BPS_500M", "BANDWIDTH_BPS_1G", "BANDWIDTH_BPS_2G", "BANDWIDTH_BPS_5G", "BANDWIDTH_BPS_10G", "BANDWIDTH_BPS_20G", "BANDWIDTH_BPS_50G"]  # noqa: E501
        if bandwidth not in allowed_values:
            raise ValueError(
                "Invalid value for `bandwidth` ({0}), must be one of {1}"
                .format(bandwidth, allowed_values)
            )

        self._bandwidth = bandwidth

    @property
    def vlan_count(self):
        """Gets the vlan_count of this VlanAttachment.


        :return: The vlan_count of this VlanAttachment.
        :rtype: Usage
        """
        return self._vlan_count

    @vlan_count.setter
    def vlan_count(self, vlan_count):
        """Sets the vlan_count of this VlanAttachment.


        :param vlan_count: The vlan_count of this VlanAttachment.
        :type vlan_count: Usage
        """

        self._vlan_count = vlan_count
