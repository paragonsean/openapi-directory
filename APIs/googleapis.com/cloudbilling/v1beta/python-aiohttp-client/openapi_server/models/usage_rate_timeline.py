# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_rate_timeline_entry import UsageRateTimelineEntry
from openapi_server import util


class UsageRateTimeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unit: str=None, usage_rate_timeline_entries: List[UsageRateTimelineEntry]=None):
        """UsageRateTimeline - a model defined in OpenAPI

        :param unit: The unit of this UsageRateTimeline.
        :param usage_rate_timeline_entries: The usage_rate_timeline_entries of this UsageRateTimeline.
        """
        self.openapi_types = {
            'unit': str,
            'usage_rate_timeline_entries': List[UsageRateTimelineEntry]
        }

        self.attribute_map = {
            'unit': 'unit',
            'usage_rate_timeline_entries': 'usageRateTimelineEntries'
        }

        self._unit = unit
        self._usage_rate_timeline_entries = usage_rate_timeline_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageRateTimeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageRateTimeline of this UsageRateTimeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unit(self):
        """Gets the unit of this UsageRateTimeline.

        The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an instance, the correct unit is provided in the error message. The supported units are a subset of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr` year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: ``` Expression = Component { \".\" Component } { \"/\" Component } ; Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ] | Annotation | \"1\" ; UNIT = TIME-UNIT | STORAGE-UNIT | DATA-UNIT | COUNT-UNIT Annotation = \"{\" NAME \"}\" ; ``` Examples: * Request per second: `1/s` or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`

        :return: The unit of this UsageRateTimeline.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this UsageRateTimeline.

        The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an instance, the correct unit is provided in the error message. The supported units are a subset of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr` year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: ``` Expression = Component { \".\" Component } { \"/\" Component } ; Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ] | Annotation | \"1\" ; UNIT = TIME-UNIT | STORAGE-UNIT | DATA-UNIT | COUNT-UNIT Annotation = \"{\" NAME \"}\" ; ``` Examples: * Request per second: `1/s` or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`

        :param unit: The unit of this UsageRateTimeline.
        :type unit: str
        """

        self._unit = unit

    @property
    def usage_rate_timeline_entries(self):
        """Gets the usage_rate_timeline_entries of this UsageRateTimeline.

        The timeline entries. Each entry has a start time and usage rate. The start time specifies the effective time of the usage rate. The entries must be sorted by start time in an increasing order.

        :return: The usage_rate_timeline_entries of this UsageRateTimeline.
        :rtype: List[UsageRateTimelineEntry]
        """
        return self._usage_rate_timeline_entries

    @usage_rate_timeline_entries.setter
    def usage_rate_timeline_entries(self, usage_rate_timeline_entries):
        """Sets the usage_rate_timeline_entries of this UsageRateTimeline.

        The timeline entries. Each entry has a start time and usage rate. The start time specifies the effective time of the usage rate. The entries must be sorted by start time in an increasing order.

        :param usage_rate_timeline_entries: The usage_rate_timeline_entries of this UsageRateTimeline.
        :type usage_rate_timeline_entries: List[UsageRateTimelineEntry]
        """

        self._usage_rate_timeline_entries = usage_rate_timeline_entries
