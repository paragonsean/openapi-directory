# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.estimation_time_point import EstimationTimePoint
from openapi_server.models.rate import Rate
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_time: EstimationTimePoint=None, price_type: str=None, rate: Rate=None):
        """Price - a model defined in OpenAPI

        :param effective_time: The effective_time of this Price.
        :param price_type: The price_type of this Price.
        :param rate: The rate of this Price.
        """
        self.openapi_types = {
            'effective_time': EstimationTimePoint,
            'price_type': str,
            'rate': Rate
        }

        self.attribute_map = {
            'effective_time': 'effectiveTime',
            'price_type': 'priceType',
            'rate': 'rate'
        }

        self._effective_time = effective_time
        self._price_type = price_type
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_time(self):
        """Gets the effective_time of this Price.


        :return: The effective_time of this Price.
        :rtype: EstimationTimePoint
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this Price.


        :param effective_time: The effective_time of this Price.
        :type effective_time: EstimationTimePoint
        """

        self._effective_time = effective_time

    @property
    def price_type(self):
        """Gets the price_type of this Price.

        The type of price. Possible values: \"RATE\"

        :return: The price_type of this Price.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this Price.

        The type of price. Possible values: \"RATE\"

        :param price_type: The price_type of this Price.
        :type price_type: str
        """

        self._price_type = price_type

    @property
    def rate(self):
        """Gets the rate of this Price.


        :return: The rate of this Price.
        :rtype: Rate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Price.


        :param rate: The rate of this Price.
        :type rate: Rate
        """

        self._rate = rate
