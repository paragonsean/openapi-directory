# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commitment import Commitment
from openapi_server.models.scenario_config import ScenarioConfig
from openapi_server.models.workload import Workload
from openapi_server import util


class CostScenario(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitments: List[Commitment]=None, scenario_config: ScenarioConfig=None, workloads: List[Workload]=None):
        """CostScenario - a model defined in OpenAPI

        :param commitments: The commitments of this CostScenario.
        :param scenario_config: The scenario_config of this CostScenario.
        :param workloads: The workloads of this CostScenario.
        """
        self.openapi_types = {
            'commitments': List[Commitment],
            'scenario_config': ScenarioConfig,
            'workloads': List[Workload]
        }

        self.attribute_map = {
            'commitments': 'commitments',
            'scenario_config': 'scenarioConfig',
            'workloads': 'workloads'
        }

        self._commitments = commitments
        self._scenario_config = scenario_config
        self._workloads = workloads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostScenario':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostScenario of this CostScenario.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitments(self):
        """Gets the commitments of this CostScenario.

        New commitments to estimate the costs for. The cost of the commitments will be included in the estimate result and discounts the commitment entitles will be included in the workload cost estimates. A maximum of 100 workloads can be provided.

        :return: The commitments of this CostScenario.
        :rtype: List[Commitment]
        """
        return self._commitments

    @commitments.setter
    def commitments(self, commitments):
        """Sets the commitments of this CostScenario.

        New commitments to estimate the costs for. The cost of the commitments will be included in the estimate result and discounts the commitment entitles will be included in the workload cost estimates. A maximum of 100 workloads can be provided.

        :param commitments: The commitments of this CostScenario.
        :type commitments: List[Commitment]
        """

        self._commitments = commitments

    @property
    def scenario_config(self):
        """Gets the scenario_config of this CostScenario.


        :return: The scenario_config of this CostScenario.
        :rtype: ScenarioConfig
        """
        return self._scenario_config

    @scenario_config.setter
    def scenario_config(self, scenario_config):
        """Sets the scenario_config of this CostScenario.


        :param scenario_config: The scenario_config of this CostScenario.
        :type scenario_config: ScenarioConfig
        """

        self._scenario_config = scenario_config

    @property
    def workloads(self):
        """Gets the workloads of this CostScenario.

        The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.

        :return: The workloads of this CostScenario.
        :rtype: List[Workload]
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this CostScenario.

        The Google Cloud usage whose costs are estimated. A maximum of 100 workloads can be provided.

        :param workloads: The workloads of this CostScenario.
        :type workloads: List[Workload]
        """

        self._workloads = workloads
