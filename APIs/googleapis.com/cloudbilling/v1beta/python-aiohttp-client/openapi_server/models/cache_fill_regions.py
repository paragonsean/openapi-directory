# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CacheFillRegions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_region: str=None, source_region: str=None):
        """CacheFillRegions - a model defined in OpenAPI

        :param destination_region: The destination_region of this CacheFillRegions.
        :param source_region: The source_region of this CacheFillRegions.
        """
        self.openapi_types = {
            'destination_region': str,
            'source_region': str
        }

        self.attribute_map = {
            'destination_region': 'destinationRegion',
            'source_region': 'sourceRegion'
        }

        self._destination_region = destination_region
        self._source_region = source_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheFillRegions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheFillRegions of this CacheFillRegions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_region(self):
        """Gets the destination_region of this CacheFillRegions.

        The destination region for cache fill.

        :return: The destination_region of this CacheFillRegions.
        :rtype: str
        """
        return self._destination_region

    @destination_region.setter
    def destination_region(self, destination_region):
        """Sets the destination_region of this CacheFillRegions.

        The destination region for cache fill.

        :param destination_region: The destination_region of this CacheFillRegions.
        :type destination_region: str
        """
        allowed_values = ["CACHE_FILL_DESTINATION_REGION_UNSPECIFIED", "CACHE_FILL_DESTINATION_REGION_ASIA_PACIFIC", "CACHE_FILL_DESTINATION_REGION_EUROPE", "CACHE_FILL_DESTINATION_REGION_NORTH_AMERICA", "CACHE_FILL_DESTINATION_REGION_OCEANIA", "CACHE_FILL_DESTINATION_REGION_SOUTH_AMERICA", "CACHE_FILL_DESTINATION_REGION_CHINA", "CACHE_FILL_DESTINATION_REGION_OTHERS"]  # noqa: E501
        if destination_region not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_region` ({0}), must be one of {1}"
                .format(destination_region, allowed_values)
            )

        self._destination_region = destination_region

    @property
    def source_region(self):
        """Gets the source_region of this CacheFillRegions.

        The source region for cache fill.

        :return: The source_region of this CacheFillRegions.
        :rtype: str
        """
        return self._source_region

    @source_region.setter
    def source_region(self, source_region):
        """Sets the source_region of this CacheFillRegions.

        The source region for cache fill.

        :param source_region: The source_region of this CacheFillRegions.
        :type source_region: str
        """
        allowed_values = ["CACHE_FILL_SOURCE_REGION_UNSPECIFIED", "CACHE_FILL_REGION_ASIA_PACIFIC", "CACHE_FILL_SOURCE_REGION_EUROPE", "CACHE_FILL_SOURCE_REGION_NORTH_AMERICA", "CACHE_FILL_SOURCE_REGION_OCEANIA", "CACHE_FILL_SOURCE_REGION_SOUTH_AMERICA"]  # noqa: E501
        if source_region not in allowed_values:
            raise ValueError(
                "Invalid value for `source_region` ({0}), must be one of {1}"
                .format(source_region, allowed_values)
            )

        self._source_region = source_region
