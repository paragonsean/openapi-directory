# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server.models.vlan_attachment import VlanAttachment
from openapi_server import util


class CloudInterconnectWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interconnect_attachments: List[VlanAttachment]=None, interconnect_type: str=None, link_type: str=None, provisioned_link_count: Usage=None):
        """CloudInterconnectWorkload - a model defined in OpenAPI

        :param interconnect_attachments: The interconnect_attachments of this CloudInterconnectWorkload.
        :param interconnect_type: The interconnect_type of this CloudInterconnectWorkload.
        :param link_type: The link_type of this CloudInterconnectWorkload.
        :param provisioned_link_count: The provisioned_link_count of this CloudInterconnectWorkload.
        """
        self.openapi_types = {
            'interconnect_attachments': List[VlanAttachment],
            'interconnect_type': str,
            'link_type': str,
            'provisioned_link_count': Usage
        }

        self.attribute_map = {
            'interconnect_attachments': 'interconnectAttachments',
            'interconnect_type': 'interconnectType',
            'link_type': 'linkType',
            'provisioned_link_count': 'provisionedLinkCount'
        }

        self._interconnect_attachments = interconnect_attachments
        self._interconnect_type = interconnect_type
        self._link_type = link_type
        self._provisioned_link_count = provisioned_link_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudInterconnectWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudInterconnectWorkload of this CloudInterconnectWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interconnect_attachments(self):
        """Gets the interconnect_attachments of this CloudInterconnectWorkload.

        VLAN attachment used for interconnect.

        :return: The interconnect_attachments of this CloudInterconnectWorkload.
        :rtype: List[VlanAttachment]
        """
        return self._interconnect_attachments

    @interconnect_attachments.setter
    def interconnect_attachments(self, interconnect_attachments):
        """Sets the interconnect_attachments of this CloudInterconnectWorkload.

        VLAN attachment used for interconnect.

        :param interconnect_attachments: The interconnect_attachments of this CloudInterconnectWorkload.
        :type interconnect_attachments: List[VlanAttachment]
        """

        self._interconnect_attachments = interconnect_attachments

    @property
    def interconnect_type(self):
        """Gets the interconnect_type of this CloudInterconnectWorkload.

        VLAN attachment type

        :return: The interconnect_type of this CloudInterconnectWorkload.
        :rtype: str
        """
        return self._interconnect_type

    @interconnect_type.setter
    def interconnect_type(self, interconnect_type):
        """Sets the interconnect_type of this CloudInterconnectWorkload.

        VLAN attachment type

        :param interconnect_type: The interconnect_type of this CloudInterconnectWorkload.
        :type interconnect_type: str
        """
        allowed_values = ["INTERCONNECT_TYPE_UNSPECIFIED", "INTERCONNECT_TYPE_DEDICATED", "INTERCONNECT_TYPE_PARTNER"]  # noqa: E501
        if interconnect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interconnect_type` ({0}), must be one of {1}"
                .format(interconnect_type, allowed_values)
            )

        self._interconnect_type = interconnect_type

    @property
    def link_type(self):
        """Gets the link_type of this CloudInterconnectWorkload.

        Interconnect circuit link type.

        :return: The link_type of this CloudInterconnectWorkload.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this CloudInterconnectWorkload.

        Interconnect circuit link type.

        :param link_type: The link_type of this CloudInterconnectWorkload.
        :type link_type: str
        """
        allowed_values = ["LINK_TYPE_UNSPECIFIED", "LINK_TYPE_ETHERNET_10G_LR", "LINK_TYPE_ETHERNET_100G_LR"]  # noqa: E501
        if link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `link_type` ({0}), must be one of {1}"
                .format(link_type, allowed_values)
            )

        self._link_type = link_type

    @property
    def provisioned_link_count(self):
        """Gets the provisioned_link_count of this CloudInterconnectWorkload.


        :return: The provisioned_link_count of this CloudInterconnectWorkload.
        :rtype: Usage
        """
        return self._provisioned_link_count

    @provisioned_link_count.setter
    def provisioned_link_count(self, provisioned_link_count):
        """Sets the provisioned_link_count of this CloudInterconnectWorkload.


        :param provisioned_link_count: The provisioned_link_count of this CloudInterconnectWorkload.
        :type provisioned_link_count: Usage
        """

        self._provisioned_link_count = provisioned_link_count
