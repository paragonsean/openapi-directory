# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_estimate import CostEstimate
from openapi_server import util


class SkuCostEstimate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_estimate: CostEstimate=None, sku: str=None, usage_amount: float=None, usage_unit: str=None):
        """SkuCostEstimate - a model defined in OpenAPI

        :param cost_estimate: The cost_estimate of this SkuCostEstimate.
        :param sku: The sku of this SkuCostEstimate.
        :param usage_amount: The usage_amount of this SkuCostEstimate.
        :param usage_unit: The usage_unit of this SkuCostEstimate.
        """
        self.openapi_types = {
            'cost_estimate': CostEstimate,
            'sku': str,
            'usage_amount': float,
            'usage_unit': str
        }

        self.attribute_map = {
            'cost_estimate': 'costEstimate',
            'sku': 'sku',
            'usage_amount': 'usageAmount',
            'usage_unit': 'usageUnit'
        }

        self._cost_estimate = cost_estimate
        self._sku = sku
        self._usage_amount = usage_amount
        self._usage_unit = usage_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuCostEstimate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuCostEstimate of this SkuCostEstimate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_estimate(self):
        """Gets the cost_estimate of this SkuCostEstimate.


        :return: The cost_estimate of this SkuCostEstimate.
        :rtype: CostEstimate
        """
        return self._cost_estimate

    @cost_estimate.setter
    def cost_estimate(self, cost_estimate):
        """Sets the cost_estimate of this SkuCostEstimate.


        :param cost_estimate: The cost_estimate of this SkuCostEstimate.
        :type cost_estimate: CostEstimate
        """

        self._cost_estimate = cost_estimate

    @property
    def sku(self):
        """Gets the sku of this SkuCostEstimate.

        The resource name for the SKU. Example: \"services/DA34-426B-A397/skus/AA95-CD31-42FE\" More information about the SKU can be found in the `skus` field of the `CostEstimationResult`.

        :return: The sku of this SkuCostEstimate.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SkuCostEstimate.

        The resource name for the SKU. Example: \"services/DA34-426B-A397/skus/AA95-CD31-42FE\" More information about the SKU can be found in the `skus` field of the `CostEstimationResult`.

        :param sku: The sku of this SkuCostEstimate.
        :type sku: str
        """

        self._sku = sku

    @property
    def usage_amount(self):
        """Gets the usage_amount of this SkuCostEstimate.

        The amount of usage on this SKU.

        :return: The usage_amount of this SkuCostEstimate.
        :rtype: float
        """
        return self._usage_amount

    @usage_amount.setter
    def usage_amount(self, usage_amount):
        """Sets the usage_amount of this SkuCostEstimate.

        The amount of usage on this SKU.

        :param usage_amount: The usage_amount of this SkuCostEstimate.
        :type usage_amount: float
        """

        self._usage_amount = usage_amount

    @property
    def usage_unit(self):
        """Gets the usage_unit of this SkuCostEstimate.

        The unit for the usage on this SKU.

        :return: The usage_unit of this SkuCostEstimate.
        :rtype: str
        """
        return self._usage_unit

    @usage_unit.setter
    def usage_unit(self, usage_unit):
        """Sets the usage_unit of this SkuCostEstimate.

        The unit for the usage on this SKU.

        :param usage_unit: The usage_unit of this SkuCostEstimate.
        :type usage_unit: str
        """

        self._usage_unit = usage_unit
