# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_accelerator import GuestAccelerator
from openapi_server import util


class VmResourceBasedCud(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guest_accelerator: GuestAccelerator=None, machine_series: str=None, memory_size_gb: float=None, plan: str=None, region: str=None, virtual_cpu_count: str=None):
        """VmResourceBasedCud - a model defined in OpenAPI

        :param guest_accelerator: The guest_accelerator of this VmResourceBasedCud.
        :param machine_series: The machine_series of this VmResourceBasedCud.
        :param memory_size_gb: The memory_size_gb of this VmResourceBasedCud.
        :param plan: The plan of this VmResourceBasedCud.
        :param region: The region of this VmResourceBasedCud.
        :param virtual_cpu_count: The virtual_cpu_count of this VmResourceBasedCud.
        """
        self.openapi_types = {
            'guest_accelerator': GuestAccelerator,
            'machine_series': str,
            'memory_size_gb': float,
            'plan': str,
            'region': str,
            'virtual_cpu_count': str
        }

        self.attribute_map = {
            'guest_accelerator': 'guestAccelerator',
            'machine_series': 'machineSeries',
            'memory_size_gb': 'memorySizeGb',
            'plan': 'plan',
            'region': 'region',
            'virtual_cpu_count': 'virtualCpuCount'
        }

        self._guest_accelerator = guest_accelerator
        self._machine_series = machine_series
        self._memory_size_gb = memory_size_gb
        self._plan = plan
        self._region = region
        self._virtual_cpu_count = virtual_cpu_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmResourceBasedCud':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmResourceBasedCud of this VmResourceBasedCud.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guest_accelerator(self):
        """Gets the guest_accelerator of this VmResourceBasedCud.


        :return: The guest_accelerator of this VmResourceBasedCud.
        :rtype: GuestAccelerator
        """
        return self._guest_accelerator

    @guest_accelerator.setter
    def guest_accelerator(self, guest_accelerator):
        """Sets the guest_accelerator of this VmResourceBasedCud.


        :param guest_accelerator: The guest_accelerator of this VmResourceBasedCud.
        :type guest_accelerator: GuestAccelerator
        """

        self._guest_accelerator = guest_accelerator

    @property
    def machine_series(self):
        """Gets the machine_series of this VmResourceBasedCud.

        The machine series for CUD. For example: \"n1\" for general purpose N1 machine type commitments. \"n2\" for general purpose N2 machine type commitments. \"e2\" for general purpose E2 machine type commitments. \"n2d\" for general purpose N2D machine type commitments. \"t2d\" for general purpose T2D machine type commitments. \"c2\"/\"c2d\" for compute-optimized commitments. \"m1\"/\"m2\" for the memory-optimized commitments. \"a2' for the accelerator-optimized commitments.

        :return: The machine_series of this VmResourceBasedCud.
        :rtype: str
        """
        return self._machine_series

    @machine_series.setter
    def machine_series(self, machine_series):
        """Sets the machine_series of this VmResourceBasedCud.

        The machine series for CUD. For example: \"n1\" for general purpose N1 machine type commitments. \"n2\" for general purpose N2 machine type commitments. \"e2\" for general purpose E2 machine type commitments. \"n2d\" for general purpose N2D machine type commitments. \"t2d\" for general purpose T2D machine type commitments. \"c2\"/\"c2d\" for compute-optimized commitments. \"m1\"/\"m2\" for the memory-optimized commitments. \"a2' for the accelerator-optimized commitments.

        :param machine_series: The machine_series of this VmResourceBasedCud.
        :type machine_series: str
        """

        self._machine_series = machine_series

    @property
    def memory_size_gb(self):
        """Gets the memory_size_gb of this VmResourceBasedCud.

        Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).

        :return: The memory_size_gb of this VmResourceBasedCud.
        :rtype: float
        """
        return self._memory_size_gb

    @memory_size_gb.setter
    def memory_size_gb(self, memory_size_gb):
        """Sets the memory_size_gb of this VmResourceBasedCud.

        Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).

        :param memory_size_gb: The memory_size_gb of this VmResourceBasedCud.
        :type memory_size_gb: float
        """

        self._memory_size_gb = memory_size_gb

    @property
    def plan(self):
        """Gets the plan of this VmResourceBasedCud.

        Commitment usage plan.

        :return: The plan of this VmResourceBasedCud.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this VmResourceBasedCud.

        Commitment usage plan.

        :param plan: The plan of this VmResourceBasedCud.
        :type plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "TWELVE_MONTH", "THIRTY_SIX_MONTH"]  # noqa: E501
        if plan not in allowed_values:
            raise ValueError(
                "Invalid value for `plan` ({0}), must be one of {1}"
                .format(plan, allowed_values)
            )

        self._plan = plan

    @property
    def region(self):
        """Gets the region of this VmResourceBasedCud.

        The region where the VM runs. For example: \"us-central1\"

        :return: The region of this VmResourceBasedCud.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this VmResourceBasedCud.

        The region where the VM runs. For example: \"us-central1\"

        :param region: The region of this VmResourceBasedCud.
        :type region: str
        """

        self._region = region

    @property
    def virtual_cpu_count(self):
        """Gets the virtual_cpu_count of this VmResourceBasedCud.

        The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or odd.

        :return: The virtual_cpu_count of this VmResourceBasedCud.
        :rtype: str
        """
        return self._virtual_cpu_count

    @virtual_cpu_count.setter
    def virtual_cpu_count(self, virtual_cpu_count):
        """Sets the virtual_cpu_count of this VmResourceBasedCud.

        The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or odd.

        :param virtual_cpu_count: The virtual_cpu_count of this VmResourceBasedCud.
        :type virtual_cpu_count: str
        """

        self._virtual_cpu_count = virtual_cpu_count
