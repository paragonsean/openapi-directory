# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_estimate import CostEstimate
from openapi_server.models.sku_cost_estimate import SkuCostEstimate
from openapi_server import util


class WorkloadCostEstimate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, sku_cost_estimates: List[SkuCostEstimate]=None, workload_total_cost_estimate: CostEstimate=None):
        """WorkloadCostEstimate - a model defined in OpenAPI

        :param name: The name of this WorkloadCostEstimate.
        :param sku_cost_estimates: The sku_cost_estimates of this WorkloadCostEstimate.
        :param workload_total_cost_estimate: The workload_total_cost_estimate of this WorkloadCostEstimate.
        """
        self.openapi_types = {
            'name': str,
            'sku_cost_estimates': List[SkuCostEstimate],
            'workload_total_cost_estimate': CostEstimate
        }

        self.attribute_map = {
            'name': 'name',
            'sku_cost_estimates': 'skuCostEstimates',
            'workload_total_cost_estimate': 'workloadTotalCostEstimate'
        }

        self._name = name
        self._sku_cost_estimates = sku_cost_estimates
        self._workload_total_cost_estimate = workload_total_cost_estimate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadCostEstimate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadCostEstimate of this WorkloadCostEstimate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WorkloadCostEstimate.

        The name of the workload, as specified in the `CostScenario`.

        :return: The name of this WorkloadCostEstimate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkloadCostEstimate.

        The name of the workload, as specified in the `CostScenario`.

        :param name: The name of this WorkloadCostEstimate.
        :type name: str
        """

        self._name = name

    @property
    def sku_cost_estimates(self):
        """Gets the sku_cost_estimates of this WorkloadCostEstimate.

        Estimated costs for each SKU in the workload.

        :return: The sku_cost_estimates of this WorkloadCostEstimate.
        :rtype: List[SkuCostEstimate]
        """
        return self._sku_cost_estimates

    @sku_cost_estimates.setter
    def sku_cost_estimates(self, sku_cost_estimates):
        """Sets the sku_cost_estimates of this WorkloadCostEstimate.

        Estimated costs for each SKU in the workload.

        :param sku_cost_estimates: The sku_cost_estimates of this WorkloadCostEstimate.
        :type sku_cost_estimates: List[SkuCostEstimate]
        """

        self._sku_cost_estimates = sku_cost_estimates

    @property
    def workload_total_cost_estimate(self):
        """Gets the workload_total_cost_estimate of this WorkloadCostEstimate.


        :return: The workload_total_cost_estimate of this WorkloadCostEstimate.
        :rtype: CostEstimate
        """
        return self._workload_total_cost_estimate

    @workload_total_cost_estimate.setter
    def workload_total_cost_estimate(self, workload_total_cost_estimate):
        """Sets the workload_total_cost_estimate of this WorkloadCostEstimate.


        :param workload_total_cost_estimate: The workload_total_cost_estimate of this WorkloadCostEstimate.
        :type workload_total_cost_estimate: CostEstimate
        """

        self._workload_total_cost_estimate = workload_total_cost_estimate
