# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commitment_cost_estimate import CommitmentCostEstimate
from openapi_server.models.cost_estimate import CostEstimate
from openapi_server.models.estimation_time_point import EstimationTimePoint
from openapi_server.models.workload_cost_estimate import WorkloadCostEstimate
from openapi_server import util


class SegmentCostEstimate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_cost_estimates: List[CommitmentCostEstimate]=None, segment_start_time: EstimationTimePoint=None, segment_total_cost_estimate: CostEstimate=None, workload_cost_estimates: List[WorkloadCostEstimate]=None):
        """SegmentCostEstimate - a model defined in OpenAPI

        :param commitment_cost_estimates: The commitment_cost_estimates of this SegmentCostEstimate.
        :param segment_start_time: The segment_start_time of this SegmentCostEstimate.
        :param segment_total_cost_estimate: The segment_total_cost_estimate of this SegmentCostEstimate.
        :param workload_cost_estimates: The workload_cost_estimates of this SegmentCostEstimate.
        """
        self.openapi_types = {
            'commitment_cost_estimates': List[CommitmentCostEstimate],
            'segment_start_time': EstimationTimePoint,
            'segment_total_cost_estimate': CostEstimate,
            'workload_cost_estimates': List[WorkloadCostEstimate]
        }

        self.attribute_map = {
            'commitment_cost_estimates': 'commitmentCostEstimates',
            'segment_start_time': 'segmentStartTime',
            'segment_total_cost_estimate': 'segmentTotalCostEstimate',
            'workload_cost_estimates': 'workloadCostEstimates'
        }

        self._commitment_cost_estimates = commitment_cost_estimates
        self._segment_start_time = segment_start_time
        self._segment_total_cost_estimate = segment_total_cost_estimate
        self._workload_cost_estimates = workload_cost_estimates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentCostEstimate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentCostEstimate of this SegmentCostEstimate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_cost_estimates(self):
        """Gets the commitment_cost_estimates of this SegmentCostEstimate.

        Estimated costs for each commitment.

        :return: The commitment_cost_estimates of this SegmentCostEstimate.
        :rtype: List[CommitmentCostEstimate]
        """
        return self._commitment_cost_estimates

    @commitment_cost_estimates.setter
    def commitment_cost_estimates(self, commitment_cost_estimates):
        """Sets the commitment_cost_estimates of this SegmentCostEstimate.

        Estimated costs for each commitment.

        :param commitment_cost_estimates: The commitment_cost_estimates of this SegmentCostEstimate.
        :type commitment_cost_estimates: List[CommitmentCostEstimate]
        """

        self._commitment_cost_estimates = commitment_cost_estimates

    @property
    def segment_start_time(self):
        """Gets the segment_start_time of this SegmentCostEstimate.


        :return: The segment_start_time of this SegmentCostEstimate.
        :rtype: EstimationTimePoint
        """
        return self._segment_start_time

    @segment_start_time.setter
    def segment_start_time(self, segment_start_time):
        """Sets the segment_start_time of this SegmentCostEstimate.


        :param segment_start_time: The segment_start_time of this SegmentCostEstimate.
        :type segment_start_time: EstimationTimePoint
        """

        self._segment_start_time = segment_start_time

    @property
    def segment_total_cost_estimate(self):
        """Gets the segment_total_cost_estimate of this SegmentCostEstimate.


        :return: The segment_total_cost_estimate of this SegmentCostEstimate.
        :rtype: CostEstimate
        """
        return self._segment_total_cost_estimate

    @segment_total_cost_estimate.setter
    def segment_total_cost_estimate(self, segment_total_cost_estimate):
        """Sets the segment_total_cost_estimate of this SegmentCostEstimate.


        :param segment_total_cost_estimate: The segment_total_cost_estimate of this SegmentCostEstimate.
        :type segment_total_cost_estimate: CostEstimate
        """

        self._segment_total_cost_estimate = segment_total_cost_estimate

    @property
    def workload_cost_estimates(self):
        """Gets the workload_cost_estimates of this SegmentCostEstimate.

        Estimated costs for each workload.

        :return: The workload_cost_estimates of this SegmentCostEstimate.
        :rtype: List[WorkloadCostEstimate]
        """
        return self._workload_cost_estimates

    @workload_cost_estimates.setter
    def workload_cost_estimates(self, workload_cost_estimates):
        """Sets the workload_cost_estimates of this SegmentCostEstimate.

        Estimated costs for each workload.

        :param workload_cost_estimates: The workload_cost_estimates of this SegmentCostEstimate.
        :type workload_cost_estimates: List[WorkloadCostEstimate]
        """

        self._workload_cost_estimates = workload_cost_estimates
