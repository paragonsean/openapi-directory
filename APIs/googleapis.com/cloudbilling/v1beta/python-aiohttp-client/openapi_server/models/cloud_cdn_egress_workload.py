# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server import util


class CloudCdnEgressWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_egress_destination: str=None, cache_egress_rate: Usage=None):
        """CloudCdnEgressWorkload - a model defined in OpenAPI

        :param cache_egress_destination: The cache_egress_destination of this CloudCdnEgressWorkload.
        :param cache_egress_rate: The cache_egress_rate of this CloudCdnEgressWorkload.
        """
        self.openapi_types = {
            'cache_egress_destination': str,
            'cache_egress_rate': Usage
        }

        self.attribute_map = {
            'cache_egress_destination': 'cacheEgressDestination',
            'cache_egress_rate': 'cacheEgressRate'
        }

        self._cache_egress_destination = cache_egress_destination
        self._cache_egress_rate = cache_egress_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudCdnEgressWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudCdnEgressWorkload of this CloudCdnEgressWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_egress_destination(self):
        """Gets the cache_egress_destination of this CloudCdnEgressWorkload.

        The destination for the cache data transfer.

        :return: The cache_egress_destination of this CloudCdnEgressWorkload.
        :rtype: str
        """
        return self._cache_egress_destination

    @cache_egress_destination.setter
    def cache_egress_destination(self, cache_egress_destination):
        """Sets the cache_egress_destination of this CloudCdnEgressWorkload.

        The destination for the cache data transfer.

        :param cache_egress_destination: The cache_egress_destination of this CloudCdnEgressWorkload.
        :type cache_egress_destination: str
        """
        allowed_values = ["CACHE_EGRESS_DESTINATION_UNSPECIFIED", "CACHE_EGRESS_DESTINATION_ASIA_PACIFIC", "CACHE_EGRESS_DESTINATION_CHINA", "CACHE_EGRESS_DESTINATION_EUROPE", "CACHE_EGRESS_DESTINATION_NORTH_AMERICA", "CACHE_EGRESS_DESTINATION_OCEANIA", "CACHE_EGRESS_DESTINATION_LATIN_AMERICA", "CACHE_EGRESS_DESTINATION_OTHER_DESTINATIONS"]  # noqa: E501
        if cache_egress_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_egress_destination` ({0}), must be one of {1}"
                .format(cache_egress_destination, allowed_values)
            )

        self._cache_egress_destination = cache_egress_destination

    @property
    def cache_egress_rate(self):
        """Gets the cache_egress_rate of this CloudCdnEgressWorkload.


        :return: The cache_egress_rate of this CloudCdnEgressWorkload.
        :rtype: Usage
        """
        return self._cache_egress_rate

    @cache_egress_rate.setter
    def cache_egress_rate(self, cache_egress_rate):
        """Sets the cache_egress_rate of this CloudCdnEgressWorkload.


        :param cache_egress_rate: The cache_egress_rate of this CloudCdnEgressWorkload.
        :type cache_egress_rate: Usage
        """

        self._cache_egress_rate = cache_egress_rate
