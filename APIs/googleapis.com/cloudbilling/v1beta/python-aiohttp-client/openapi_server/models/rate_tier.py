# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class RateTier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: Money=None, start_amount: float=None):
        """RateTier - a model defined in OpenAPI

        :param price: The price of this RateTier.
        :param start_amount: The start_amount of this RateTier.
        """
        self.openapi_types = {
            'price': Money,
            'start_amount': float
        }

        self.attribute_map = {
            'price': 'price',
            'start_amount': 'startAmount'
        }

        self._price = price
        self._start_amount = start_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateTier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateTier of this RateTier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this RateTier.


        :return: The price of this RateTier.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RateTier.


        :param price: The price of this RateTier.
        :type price: Money
        """

        self._price = price

    @property
    def start_amount(self):
        """Gets the start_amount of this RateTier.

        The magnitude of usage in which the tier interval begins. Example: \"From 100 GiBi the price is $1 per byte\" implies `start_amount` = 100

        :return: The start_amount of this RateTier.
        :rtype: float
        """
        return self._start_amount

    @start_amount.setter
    def start_amount(self, start_amount):
        """Sets the start_amount of this RateTier.

        The magnitude of usage in which the tier interval begins. Example: \"From 100 GiBi the price is $1 per byte\" implies `start_amount` = 100

        :param start_amount: The start_amount of this RateTier.
        :type start_amount: float
        """

        self._start_amount = start_amount
