# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server import util


class CloudInterconnectEgressWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, egress_rate: Usage=None, interconnect_connection_location: str=None):
        """CloudInterconnectEgressWorkload - a model defined in OpenAPI

        :param egress_rate: The egress_rate of this CloudInterconnectEgressWorkload.
        :param interconnect_connection_location: The interconnect_connection_location of this CloudInterconnectEgressWorkload.
        """
        self.openapi_types = {
            'egress_rate': Usage,
            'interconnect_connection_location': str
        }

        self.attribute_map = {
            'egress_rate': 'egressRate',
            'interconnect_connection_location': 'interconnectConnectionLocation'
        }

        self._egress_rate = egress_rate
        self._interconnect_connection_location = interconnect_connection_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudInterconnectEgressWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudInterconnectEgressWorkload of this CloudInterconnectEgressWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress_rate(self):
        """Gets the egress_rate of this CloudInterconnectEgressWorkload.


        :return: The egress_rate of this CloudInterconnectEgressWorkload.
        :rtype: Usage
        """
        return self._egress_rate

    @egress_rate.setter
    def egress_rate(self, egress_rate):
        """Sets the egress_rate of this CloudInterconnectEgressWorkload.


        :param egress_rate: The egress_rate of this CloudInterconnectEgressWorkload.
        :type egress_rate: Usage
        """

        self._egress_rate = egress_rate

    @property
    def interconnect_connection_location(self):
        """Gets the interconnect_connection_location of this CloudInterconnectEgressWorkload.

        Locations in the [Interconnect connection location table](https://cloud.google.com/vpc/network-pricing#interconnect-pricing). These are the Interconnect Data Transfer charges.

        :return: The interconnect_connection_location of this CloudInterconnectEgressWorkload.
        :rtype: str
        """
        return self._interconnect_connection_location

    @interconnect_connection_location.setter
    def interconnect_connection_location(self, interconnect_connection_location):
        """Sets the interconnect_connection_location of this CloudInterconnectEgressWorkload.

        Locations in the [Interconnect connection location table](https://cloud.google.com/vpc/network-pricing#interconnect-pricing). These are the Interconnect Data Transfer charges.

        :param interconnect_connection_location: The interconnect_connection_location of this CloudInterconnectEgressWorkload.
        :type interconnect_connection_location: str
        """
        allowed_values = ["INTERCONNECT_CONNECTION_LOCATION_UNSPECIFIED", "INTERCONNECT_CONNECTION_LOCATION_ASIA", "INTERCONNECT_CONNECTION_LOCATION_EUROPE", "INTERCONNECT_CONNECTION_LOCATION_NORTH_AMERICA", "INTERCONNECT_CONNECTION_LOCATION_SOUTH_AMERICA", "INTERCONNECT_CONNECTION_LOCATION_AUSTRALIA"]  # noqa: E501
        if interconnect_connection_location not in allowed_values:
            raise ValueError(
                "Invalid value for `interconnect_connection_location` ({0}), must be one of {1}"
                .format(interconnect_connection_location, allowed_values)
            )

        self._interconnect_connection_location = interconnect_connection_location
