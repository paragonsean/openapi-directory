# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vm_resource_based_cud import VmResourceBasedCud
from openapi_server import util


class Commitment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, vm_resource_based_cud: VmResourceBasedCud=None):
        """Commitment - a model defined in OpenAPI

        :param name: The name of this Commitment.
        :param vm_resource_based_cud: The vm_resource_based_cud of this Commitment.
        """
        self.openapi_types = {
            'name': str,
            'vm_resource_based_cud': VmResourceBasedCud
        }

        self.attribute_map = {
            'name': 'name',
            'vm_resource_based_cud': 'vmResourceBasedCud'
        }

        self._name = name
        self._vm_resource_based_cud = vm_resource_based_cud

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Commitment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Commitment of this Commitment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Commitment.

        Required. A name for this commitment. All commitments in a CostScenario must have unique names. Each name may be at most 128 characters long.

        :return: The name of this Commitment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Commitment.

        Required. A name for this commitment. All commitments in a CostScenario must have unique names. Each name may be at most 128 characters long.

        :param name: The name of this Commitment.
        :type name: str
        """

        self._name = name

    @property
    def vm_resource_based_cud(self):
        """Gets the vm_resource_based_cud of this Commitment.


        :return: The vm_resource_based_cud of this Commitment.
        :rtype: VmResourceBasedCud
        """
        return self._vm_resource_based_cud

    @vm_resource_based_cud.setter
    def vm_resource_based_cud(self, vm_resource_based_cud):
        """Sets the vm_resource_based_cud of this Commitment.


        :param vm_resource_based_cud: The vm_resource_based_cud of this Commitment.
        :type vm_resource_based_cud: VmResourceBasedCud
        """

        self._vm_resource_based_cud = vm_resource_based_cud
