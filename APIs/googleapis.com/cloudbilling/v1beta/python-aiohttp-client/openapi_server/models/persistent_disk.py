# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server import util


class PersistentDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_size: Usage=None, disk_type: str=None, provisioned_iops: Usage=None, scope: str=None):
        """PersistentDisk - a model defined in OpenAPI

        :param disk_size: The disk_size of this PersistentDisk.
        :param disk_type: The disk_type of this PersistentDisk.
        :param provisioned_iops: The provisioned_iops of this PersistentDisk.
        :param scope: The scope of this PersistentDisk.
        """
        self.openapi_types = {
            'disk_size': Usage,
            'disk_type': str,
            'provisioned_iops': Usage,
            'scope': str
        }

        self.attribute_map = {
            'disk_size': 'diskSize',
            'disk_type': 'diskType',
            'provisioned_iops': 'provisionedIops',
            'scope': 'scope'
        }

        self._disk_size = disk_size
        self._disk_type = disk_type
        self._provisioned_iops = provisioned_iops
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersistentDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersistentDisk of this PersistentDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_size(self):
        """Gets the disk_size of this PersistentDisk.


        :return: The disk_size of this PersistentDisk.
        :rtype: Usage
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this PersistentDisk.


        :param disk_size: The disk_size of this PersistentDisk.
        :type disk_size: Usage
        """

        self._disk_size = disk_size

    @property
    def disk_type(self):
        """Gets the disk_type of this PersistentDisk.

        The [disk type](https://cloud.google.com/compute/docs/disks#disk-types). For example: \"pd-standard\".

        :return: The disk_type of this PersistentDisk.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this PersistentDisk.

        The [disk type](https://cloud.google.com/compute/docs/disks#disk-types). For example: \"pd-standard\".

        :param disk_type: The disk_type of this PersistentDisk.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def provisioned_iops(self):
        """Gets the provisioned_iops of this PersistentDisk.


        :return: The provisioned_iops of this PersistentDisk.
        :rtype: Usage
        """
        return self._provisioned_iops

    @provisioned_iops.setter
    def provisioned_iops(self, provisioned_iops):
        """Sets the provisioned_iops of this PersistentDisk.


        :param provisioned_iops: The provisioned_iops of this PersistentDisk.
        :type provisioned_iops: Usage
        """

        self._provisioned_iops = provisioned_iops

    @property
    def scope(self):
        """Gets the scope of this PersistentDisk.

        The geographic scope of the disk. Defaults to `SCOPE_ZONAL` if not specified.

        :return: The scope of this PersistentDisk.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PersistentDisk.

        The geographic scope of the disk. Defaults to `SCOPE_ZONAL` if not specified.

        :param scope: The scope of this PersistentDisk.
        :type scope: str
        """
        allowed_values = ["SCOPE_UNSPECIFIED", "SCOPE_ZONAL", "SCOPE_REGIONAL"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
