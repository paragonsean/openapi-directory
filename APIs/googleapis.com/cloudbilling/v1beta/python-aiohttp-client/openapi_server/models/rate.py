# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rate_tier import RateTier
from openapi_server import util


class Rate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tiers: List[RateTier]=None, unit: str=None, unit_count: float=None):
        """Rate - a model defined in OpenAPI

        :param tiers: The tiers of this Rate.
        :param unit: The unit of this Rate.
        :param unit_count: The unit_count of this Rate.
        """
        self.openapi_types = {
            'tiers': List[RateTier],
            'unit': str,
            'unit_count': float
        }

        self.attribute_map = {
            'tiers': 'tiers',
            'unit': 'unit',
            'unit_count': 'unitCount'
        }

        self._tiers = tiers
        self._unit = unit
        self._unit_count = unit_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rate of this Rate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tiers(self):
        """Gets the tiers of this Rate.

        The service tiers.

        :return: The tiers of this Rate.
        :rtype: List[RateTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this Rate.

        The service tiers.

        :param tiers: The tiers of this Rate.
        :type tiers: List[RateTier]
        """

        self._tiers = tiers

    @property
    def unit(self):
        """Gets the unit of this Rate.

        The SKU's pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this field will show 'By'. The `start_amount` field in each tier will be in this unit.

        :return: The unit of this Rate.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Rate.

        The SKU's pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this field will show 'By'. The `start_amount` field in each tier will be in this unit.

        :param unit: The unit of this Rate.
        :type unit: str
        """

        self._unit = unit

    @property
    def unit_count(self):
        """Gets the unit_count of this Rate.

        The SKU's count for the pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this column will show 1000000.

        :return: The unit_count of this Rate.
        :rtype: float
        """
        return self._unit_count

    @unit_count.setter
    def unit_count(self, unit_count):
        """Sets the unit_count of this Rate.

        The SKU's count for the pricing unit. For example, if the tier price is $1 per 1000000 Bytes, then this column will show 1000000.

        :param unit_count: The unit_count of this Rate.
        :type unit_count: float
        """

        self._unit_count = unit_count
