# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage import Usage
from openapi_server import util


class InterRegionEgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_region: str=None, egress_rate: Usage=None, source_region: str=None):
        """InterRegionEgress - a model defined in OpenAPI

        :param destination_region: The destination_region of this InterRegionEgress.
        :param egress_rate: The egress_rate of this InterRegionEgress.
        :param source_region: The source_region of this InterRegionEgress.
        """
        self.openapi_types = {
            'destination_region': str,
            'egress_rate': Usage,
            'source_region': str
        }

        self.attribute_map = {
            'destination_region': 'destinationRegion',
            'egress_rate': 'egressRate',
            'source_region': 'sourceRegion'
        }

        self._destination_region = destination_region
        self._egress_rate = egress_rate
        self._source_region = source_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterRegionEgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterRegionEgress of this InterRegionEgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_region(self):
        """Gets the destination_region of this InterRegionEgress.

        Which [region](https://cloud.google.com/compute/docs/regions-zones) the data is transferred to.

        :return: The destination_region of this InterRegionEgress.
        :rtype: str
        """
        return self._destination_region

    @destination_region.setter
    def destination_region(self, destination_region):
        """Sets the destination_region of this InterRegionEgress.

        Which [region](https://cloud.google.com/compute/docs/regions-zones) the data is transferred to.

        :param destination_region: The destination_region of this InterRegionEgress.
        :type destination_region: str
        """

        self._destination_region = destination_region

    @property
    def egress_rate(self):
        """Gets the egress_rate of this InterRegionEgress.


        :return: The egress_rate of this InterRegionEgress.
        :rtype: Usage
        """
        return self._egress_rate

    @egress_rate.setter
    def egress_rate(self, egress_rate):
        """Sets the egress_rate of this InterRegionEgress.


        :param egress_rate: The egress_rate of this InterRegionEgress.
        :type egress_rate: Usage
        """

        self._egress_rate = egress_rate

    @property
    def source_region(self):
        """Gets the source_region of this InterRegionEgress.

        Which [region](https://cloud.google.com/compute/docs/regions-zones) the data is transferred from.

        :return: The source_region of this InterRegionEgress.
        :rtype: str
        """
        return self._source_region

    @source_region.setter
    def source_region(self, source_region):
        """Sets the source_region of this InterRegionEgress.

        Which [region](https://cloud.google.com/compute/docs/regions-zones) the data is transferred from.

        :param source_region: The source_region of this InterRegionEgress.
        :type source_region: str
        """

        self._source_region = source_region
