# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dual_regional import DualRegional
from openapi_server.models.multi_regional import MultiRegional
from openapi_server.models.regional import Regional
from openapi_server.models.usage import Usage
from openapi_server import util


class CloudStorageWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_retrieval: Usage=None, data_stored: Usage=None, dual_region: DualRegional=None, multi_region: MultiRegional=None, operation_a: Usage=None, operation_b: Usage=None, region: Regional=None, storage_class: str=None):
        """CloudStorageWorkload - a model defined in OpenAPI

        :param data_retrieval: The data_retrieval of this CloudStorageWorkload.
        :param data_stored: The data_stored of this CloudStorageWorkload.
        :param dual_region: The dual_region of this CloudStorageWorkload.
        :param multi_region: The multi_region of this CloudStorageWorkload.
        :param operation_a: The operation_a of this CloudStorageWorkload.
        :param operation_b: The operation_b of this CloudStorageWorkload.
        :param region: The region of this CloudStorageWorkload.
        :param storage_class: The storage_class of this CloudStorageWorkload.
        """
        self.openapi_types = {
            'data_retrieval': Usage,
            'data_stored': Usage,
            'dual_region': DualRegional,
            'multi_region': MultiRegional,
            'operation_a': Usage,
            'operation_b': Usage,
            'region': Regional,
            'storage_class': str
        }

        self.attribute_map = {
            'data_retrieval': 'dataRetrieval',
            'data_stored': 'dataStored',
            'dual_region': 'dualRegion',
            'multi_region': 'multiRegion',
            'operation_a': 'operationA',
            'operation_b': 'operationB',
            'region': 'region',
            'storage_class': 'storageClass'
        }

        self._data_retrieval = data_retrieval
        self._data_stored = data_stored
        self._dual_region = dual_region
        self._multi_region = multi_region
        self._operation_a = operation_a
        self._operation_b = operation_b
        self._region = region
        self._storage_class = storage_class

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudStorageWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudStorageWorkload of this CloudStorageWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_retrieval(self):
        """Gets the data_retrieval of this CloudStorageWorkload.


        :return: The data_retrieval of this CloudStorageWorkload.
        :rtype: Usage
        """
        return self._data_retrieval

    @data_retrieval.setter
    def data_retrieval(self, data_retrieval):
        """Sets the data_retrieval of this CloudStorageWorkload.


        :param data_retrieval: The data_retrieval of this CloudStorageWorkload.
        :type data_retrieval: Usage
        """

        self._data_retrieval = data_retrieval

    @property
    def data_stored(self):
        """Gets the data_stored of this CloudStorageWorkload.


        :return: The data_stored of this CloudStorageWorkload.
        :rtype: Usage
        """
        return self._data_stored

    @data_stored.setter
    def data_stored(self, data_stored):
        """Sets the data_stored of this CloudStorageWorkload.


        :param data_stored: The data_stored of this CloudStorageWorkload.
        :type data_stored: Usage
        """

        self._data_stored = data_stored

    @property
    def dual_region(self):
        """Gets the dual_region of this CloudStorageWorkload.


        :return: The dual_region of this CloudStorageWorkload.
        :rtype: DualRegional
        """
        return self._dual_region

    @dual_region.setter
    def dual_region(self, dual_region):
        """Sets the dual_region of this CloudStorageWorkload.


        :param dual_region: The dual_region of this CloudStorageWorkload.
        :type dual_region: DualRegional
        """

        self._dual_region = dual_region

    @property
    def multi_region(self):
        """Gets the multi_region of this CloudStorageWorkload.


        :return: The multi_region of this CloudStorageWorkload.
        :rtype: MultiRegional
        """
        return self._multi_region

    @multi_region.setter
    def multi_region(self, multi_region):
        """Sets the multi_region of this CloudStorageWorkload.


        :param multi_region: The multi_region of this CloudStorageWorkload.
        :type multi_region: MultiRegional
        """

        self._multi_region = multi_region

    @property
    def operation_a(self):
        """Gets the operation_a of this CloudStorageWorkload.


        :return: The operation_a of this CloudStorageWorkload.
        :rtype: Usage
        """
        return self._operation_a

    @operation_a.setter
    def operation_a(self, operation_a):
        """Sets the operation_a of this CloudStorageWorkload.


        :param operation_a: The operation_a of this CloudStorageWorkload.
        :type operation_a: Usage
        """

        self._operation_a = operation_a

    @property
    def operation_b(self):
        """Gets the operation_b of this CloudStorageWorkload.


        :return: The operation_b of this CloudStorageWorkload.
        :rtype: Usage
        """
        return self._operation_b

    @operation_b.setter
    def operation_b(self, operation_b):
        """Sets the operation_b of this CloudStorageWorkload.


        :param operation_b: The operation_b of this CloudStorageWorkload.
        :type operation_b: Usage
        """

        self._operation_b = operation_b

    @property
    def region(self):
        """Gets the region of this CloudStorageWorkload.


        :return: The region of this CloudStorageWorkload.
        :rtype: Regional
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudStorageWorkload.


        :param region: The region of this CloudStorageWorkload.
        :type region: Regional
        """

        self._region = region

    @property
    def storage_class(self):
        """Gets the storage_class of this CloudStorageWorkload.

        The [storage class](https://cloud.google.com/storage/docs/storage-classes#classes) of the data and operation. For example: \"standard\" and \"nearline\".

        :return: The storage_class of this CloudStorageWorkload.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this CloudStorageWorkload.

        The [storage class](https://cloud.google.com/storage/docs/storage-classes#classes) of the data and operation. For example: \"standard\" and \"nearline\".

        :param storage_class: The storage_class of this CloudStorageWorkload.
        :type storage_class: str
        """

        self._storage_class = storage_class
