# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_estimate import CostEstimate
from openapi_server.models.sku_cost_estimate import SkuCostEstimate
from openapi_server import util


class CommitmentCostEstimate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_total_cost_estimate: CostEstimate=None, name: str=None, sku_cost_estimates: List[SkuCostEstimate]=None):
        """CommitmentCostEstimate - a model defined in OpenAPI

        :param commitment_total_cost_estimate: The commitment_total_cost_estimate of this CommitmentCostEstimate.
        :param name: The name of this CommitmentCostEstimate.
        :param sku_cost_estimates: The sku_cost_estimates of this CommitmentCostEstimate.
        """
        self.openapi_types = {
            'commitment_total_cost_estimate': CostEstimate,
            'name': str,
            'sku_cost_estimates': List[SkuCostEstimate]
        }

        self.attribute_map = {
            'commitment_total_cost_estimate': 'commitmentTotalCostEstimate',
            'name': 'name',
            'sku_cost_estimates': 'skuCostEstimates'
        }

        self._commitment_total_cost_estimate = commitment_total_cost_estimate
        self._name = name
        self._sku_cost_estimates = sku_cost_estimates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitmentCostEstimate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitmentCostEstimate of this CommitmentCostEstimate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_total_cost_estimate(self):
        """Gets the commitment_total_cost_estimate of this CommitmentCostEstimate.


        :return: The commitment_total_cost_estimate of this CommitmentCostEstimate.
        :rtype: CostEstimate
        """
        return self._commitment_total_cost_estimate

    @commitment_total_cost_estimate.setter
    def commitment_total_cost_estimate(self, commitment_total_cost_estimate):
        """Sets the commitment_total_cost_estimate of this CommitmentCostEstimate.


        :param commitment_total_cost_estimate: The commitment_total_cost_estimate of this CommitmentCostEstimate.
        :type commitment_total_cost_estimate: CostEstimate
        """

        self._commitment_total_cost_estimate = commitment_total_cost_estimate

    @property
    def name(self):
        """Gets the name of this CommitmentCostEstimate.

        The name of the commitment, as specified in the `CostScenario`.

        :return: The name of this CommitmentCostEstimate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommitmentCostEstimate.

        The name of the commitment, as specified in the `CostScenario`.

        :param name: The name of this CommitmentCostEstimate.
        :type name: str
        """

        self._name = name

    @property
    def sku_cost_estimates(self):
        """Gets the sku_cost_estimates of this CommitmentCostEstimate.

        Estimated costs for each SKU in the commitment.

        :return: The sku_cost_estimates of this CommitmentCostEstimate.
        :rtype: List[SkuCostEstimate]
        """
        return self._sku_cost_estimates

    @sku_cost_estimates.setter
    def sku_cost_estimates(self, sku_cost_estimates):
        """Sets the sku_cost_estimates of this CommitmentCostEstimate.

        Estimated costs for each SKU in the commitment.

        :param sku_cost_estimates: The sku_cost_estimates of this CommitmentCostEstimate.
        :type sku_cost_estimates: List[SkuCostEstimate]
        """

        self._sku_cost_estimates = sku_cost_estimates
