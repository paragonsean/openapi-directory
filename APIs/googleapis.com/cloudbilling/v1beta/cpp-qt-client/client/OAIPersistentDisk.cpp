/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersistentDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersistentDisk::OAIPersistentDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersistentDisk::OAIPersistentDisk() {
    this->initializeModel();
}

OAIPersistentDisk::~OAIPersistentDisk() {}

void OAIPersistentDisk::initializeModel() {

    m_disk_size_isSet = false;
    m_disk_size_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_provisioned_iops_isSet = false;
    m_provisioned_iops_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIPersistentDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersistentDisk::fromJsonObject(QJsonObject json) {

    m_disk_size_isValid = ::OpenAPI::fromJsonValue(m_disk_size, json[QString("diskSize")]);
    m_disk_size_isSet = !json[QString("diskSize")].isNull() && m_disk_size_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_provisioned_iops_isValid = ::OpenAPI::fromJsonValue(m_provisioned_iops, json[QString("provisionedIops")]);
    m_provisioned_iops_isSet = !json[QString("provisionedIops")].isNull() && m_provisioned_iops_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIPersistentDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersistentDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_size.isSet()) {
        obj.insert(QString("diskSize"), ::OpenAPI::toJsonValue(m_disk_size));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_provisioned_iops.isSet()) {
        obj.insert(QString("provisionedIops"), ::OpenAPI::toJsonValue(m_provisioned_iops));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

OAIUsage OAIPersistentDisk::getDiskSize() const {
    return m_disk_size;
}
void OAIPersistentDisk::setDiskSize(const OAIUsage &disk_size) {
    m_disk_size = disk_size;
    m_disk_size_isSet = true;
}

bool OAIPersistentDisk::is_disk_size_Set() const{
    return m_disk_size_isSet;
}

bool OAIPersistentDisk::is_disk_size_Valid() const{
    return m_disk_size_isValid;
}

QString OAIPersistentDisk::getDiskType() const {
    return m_disk_type;
}
void OAIPersistentDisk::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIPersistentDisk::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIPersistentDisk::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

OAIUsage OAIPersistentDisk::getProvisionedIops() const {
    return m_provisioned_iops;
}
void OAIPersistentDisk::setProvisionedIops(const OAIUsage &provisioned_iops) {
    m_provisioned_iops = provisioned_iops;
    m_provisioned_iops_isSet = true;
}

bool OAIPersistentDisk::is_provisioned_iops_Set() const{
    return m_provisioned_iops_isSet;
}

bool OAIPersistentDisk::is_provisioned_iops_Valid() const{
    return m_provisioned_iops_isValid;
}

QString OAIPersistentDisk::getScope() const {
    return m_scope;
}
void OAIPersistentDisk::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIPersistentDisk::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIPersistentDisk::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIPersistentDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_iops.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersistentDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
