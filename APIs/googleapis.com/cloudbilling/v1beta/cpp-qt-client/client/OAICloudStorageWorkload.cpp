/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudStorageWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudStorageWorkload::OAICloudStorageWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudStorageWorkload::OAICloudStorageWorkload() {
    this->initializeModel();
}

OAICloudStorageWorkload::~OAICloudStorageWorkload() {}

void OAICloudStorageWorkload::initializeModel() {

    m_data_retrieval_isSet = false;
    m_data_retrieval_isValid = false;

    m_data_stored_isSet = false;
    m_data_stored_isValid = false;

    m_dual_region_isSet = false;
    m_dual_region_isValid = false;

    m_multi_region_isSet = false;
    m_multi_region_isValid = false;

    m_operation_a_isSet = false;
    m_operation_a_isValid = false;

    m_operation_b_isSet = false;
    m_operation_b_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;
}

void OAICloudStorageWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudStorageWorkload::fromJsonObject(QJsonObject json) {

    m_data_retrieval_isValid = ::OpenAPI::fromJsonValue(m_data_retrieval, json[QString("dataRetrieval")]);
    m_data_retrieval_isSet = !json[QString("dataRetrieval")].isNull() && m_data_retrieval_isValid;

    m_data_stored_isValid = ::OpenAPI::fromJsonValue(m_data_stored, json[QString("dataStored")]);
    m_data_stored_isSet = !json[QString("dataStored")].isNull() && m_data_stored_isValid;

    m_dual_region_isValid = ::OpenAPI::fromJsonValue(m_dual_region, json[QString("dualRegion")]);
    m_dual_region_isSet = !json[QString("dualRegion")].isNull() && m_dual_region_isValid;

    m_multi_region_isValid = ::OpenAPI::fromJsonValue(m_multi_region, json[QString("multiRegion")]);
    m_multi_region_isSet = !json[QString("multiRegion")].isNull() && m_multi_region_isValid;

    m_operation_a_isValid = ::OpenAPI::fromJsonValue(m_operation_a, json[QString("operationA")]);
    m_operation_a_isSet = !json[QString("operationA")].isNull() && m_operation_a_isValid;

    m_operation_b_isValid = ::OpenAPI::fromJsonValue(m_operation_b, json[QString("operationB")]);
    m_operation_b_isSet = !json[QString("operationB")].isNull() && m_operation_b_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("storageClass")]);
    m_storage_class_isSet = !json[QString("storageClass")].isNull() && m_storage_class_isValid;
}

QString OAICloudStorageWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudStorageWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_data_retrieval.isSet()) {
        obj.insert(QString("dataRetrieval"), ::OpenAPI::toJsonValue(m_data_retrieval));
    }
    if (m_data_stored.isSet()) {
        obj.insert(QString("dataStored"), ::OpenAPI::toJsonValue(m_data_stored));
    }
    if (m_dual_region.isSet()) {
        obj.insert(QString("dualRegion"), ::OpenAPI::toJsonValue(m_dual_region));
    }
    if (m_multi_region.isSet()) {
        obj.insert(QString("multiRegion"), ::OpenAPI::toJsonValue(m_multi_region));
    }
    if (m_operation_a.isSet()) {
        obj.insert(QString("operationA"), ::OpenAPI::toJsonValue(m_operation_a));
    }
    if (m_operation_b.isSet()) {
        obj.insert(QString("operationB"), ::OpenAPI::toJsonValue(m_operation_b));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_storage_class_isSet) {
        obj.insert(QString("storageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    return obj;
}

OAIUsage OAICloudStorageWorkload::getDataRetrieval() const {
    return m_data_retrieval;
}
void OAICloudStorageWorkload::setDataRetrieval(const OAIUsage &data_retrieval) {
    m_data_retrieval = data_retrieval;
    m_data_retrieval_isSet = true;
}

bool OAICloudStorageWorkload::is_data_retrieval_Set() const{
    return m_data_retrieval_isSet;
}

bool OAICloudStorageWorkload::is_data_retrieval_Valid() const{
    return m_data_retrieval_isValid;
}

OAIUsage OAICloudStorageWorkload::getDataStored() const {
    return m_data_stored;
}
void OAICloudStorageWorkload::setDataStored(const OAIUsage &data_stored) {
    m_data_stored = data_stored;
    m_data_stored_isSet = true;
}

bool OAICloudStorageWorkload::is_data_stored_Set() const{
    return m_data_stored_isSet;
}

bool OAICloudStorageWorkload::is_data_stored_Valid() const{
    return m_data_stored_isValid;
}

OAIDualRegional OAICloudStorageWorkload::getDualRegion() const {
    return m_dual_region;
}
void OAICloudStorageWorkload::setDualRegion(const OAIDualRegional &dual_region) {
    m_dual_region = dual_region;
    m_dual_region_isSet = true;
}

bool OAICloudStorageWorkload::is_dual_region_Set() const{
    return m_dual_region_isSet;
}

bool OAICloudStorageWorkload::is_dual_region_Valid() const{
    return m_dual_region_isValid;
}

OAIMultiRegional OAICloudStorageWorkload::getMultiRegion() const {
    return m_multi_region;
}
void OAICloudStorageWorkload::setMultiRegion(const OAIMultiRegional &multi_region) {
    m_multi_region = multi_region;
    m_multi_region_isSet = true;
}

bool OAICloudStorageWorkload::is_multi_region_Set() const{
    return m_multi_region_isSet;
}

bool OAICloudStorageWorkload::is_multi_region_Valid() const{
    return m_multi_region_isValid;
}

OAIUsage OAICloudStorageWorkload::getOperationA() const {
    return m_operation_a;
}
void OAICloudStorageWorkload::setOperationA(const OAIUsage &operation_a) {
    m_operation_a = operation_a;
    m_operation_a_isSet = true;
}

bool OAICloudStorageWorkload::is_operation_a_Set() const{
    return m_operation_a_isSet;
}

bool OAICloudStorageWorkload::is_operation_a_Valid() const{
    return m_operation_a_isValid;
}

OAIUsage OAICloudStorageWorkload::getOperationB() const {
    return m_operation_b;
}
void OAICloudStorageWorkload::setOperationB(const OAIUsage &operation_b) {
    m_operation_b = operation_b;
    m_operation_b_isSet = true;
}

bool OAICloudStorageWorkload::is_operation_b_Set() const{
    return m_operation_b_isSet;
}

bool OAICloudStorageWorkload::is_operation_b_Valid() const{
    return m_operation_b_isValid;
}

OAIRegional OAICloudStorageWorkload::getRegion() const {
    return m_region;
}
void OAICloudStorageWorkload::setRegion(const OAIRegional &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAICloudStorageWorkload::is_region_Set() const{
    return m_region_isSet;
}

bool OAICloudStorageWorkload::is_region_Valid() const{
    return m_region_isValid;
}

QString OAICloudStorageWorkload::getStorageClass() const {
    return m_storage_class;
}
void OAICloudStorageWorkload::setStorageClass(const QString &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAICloudStorageWorkload::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAICloudStorageWorkload::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

bool OAICloudStorageWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_retrieval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_stored.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dual_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_b.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudStorageWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
