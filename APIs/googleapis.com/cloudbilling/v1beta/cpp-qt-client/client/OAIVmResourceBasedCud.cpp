/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmResourceBasedCud.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmResourceBasedCud::OAIVmResourceBasedCud(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmResourceBasedCud::OAIVmResourceBasedCud() {
    this->initializeModel();
}

OAIVmResourceBasedCud::~OAIVmResourceBasedCud() {}

void OAIVmResourceBasedCud::initializeModel() {

    m_guest_accelerator_isSet = false;
    m_guest_accelerator_isValid = false;

    m_machine_series_isSet = false;
    m_machine_series_isValid = false;

    m_memory_size_gb_isSet = false;
    m_memory_size_gb_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_virtual_cpu_count_isSet = false;
    m_virtual_cpu_count_isValid = false;
}

void OAIVmResourceBasedCud::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmResourceBasedCud::fromJsonObject(QJsonObject json) {

    m_guest_accelerator_isValid = ::OpenAPI::fromJsonValue(m_guest_accelerator, json[QString("guestAccelerator")]);
    m_guest_accelerator_isSet = !json[QString("guestAccelerator")].isNull() && m_guest_accelerator_isValid;

    m_machine_series_isValid = ::OpenAPI::fromJsonValue(m_machine_series, json[QString("machineSeries")]);
    m_machine_series_isSet = !json[QString("machineSeries")].isNull() && m_machine_series_isValid;

    m_memory_size_gb_isValid = ::OpenAPI::fromJsonValue(m_memory_size_gb, json[QString("memorySizeGb")]);
    m_memory_size_gb_isSet = !json[QString("memorySizeGb")].isNull() && m_memory_size_gb_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_virtual_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_virtual_cpu_count, json[QString("virtualCpuCount")]);
    m_virtual_cpu_count_isSet = !json[QString("virtualCpuCount")].isNull() && m_virtual_cpu_count_isValid;
}

QString OAIVmResourceBasedCud::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmResourceBasedCud::asJsonObject() const {
    QJsonObject obj;
    if (m_guest_accelerator.isSet()) {
        obj.insert(QString("guestAccelerator"), ::OpenAPI::toJsonValue(m_guest_accelerator));
    }
    if (m_machine_series_isSet) {
        obj.insert(QString("machineSeries"), ::OpenAPI::toJsonValue(m_machine_series));
    }
    if (m_memory_size_gb_isSet) {
        obj.insert(QString("memorySizeGb"), ::OpenAPI::toJsonValue(m_memory_size_gb));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_virtual_cpu_count_isSet) {
        obj.insert(QString("virtualCpuCount"), ::OpenAPI::toJsonValue(m_virtual_cpu_count));
    }
    return obj;
}

OAIGuestAccelerator OAIVmResourceBasedCud::getGuestAccelerator() const {
    return m_guest_accelerator;
}
void OAIVmResourceBasedCud::setGuestAccelerator(const OAIGuestAccelerator &guest_accelerator) {
    m_guest_accelerator = guest_accelerator;
    m_guest_accelerator_isSet = true;
}

bool OAIVmResourceBasedCud::is_guest_accelerator_Set() const{
    return m_guest_accelerator_isSet;
}

bool OAIVmResourceBasedCud::is_guest_accelerator_Valid() const{
    return m_guest_accelerator_isValid;
}

QString OAIVmResourceBasedCud::getMachineSeries() const {
    return m_machine_series;
}
void OAIVmResourceBasedCud::setMachineSeries(const QString &machine_series) {
    m_machine_series = machine_series;
    m_machine_series_isSet = true;
}

bool OAIVmResourceBasedCud::is_machine_series_Set() const{
    return m_machine_series_isSet;
}

bool OAIVmResourceBasedCud::is_machine_series_Valid() const{
    return m_machine_series_isValid;
}

double OAIVmResourceBasedCud::getMemorySizeGb() const {
    return m_memory_size_gb;
}
void OAIVmResourceBasedCud::setMemorySizeGb(const double &memory_size_gb) {
    m_memory_size_gb = memory_size_gb;
    m_memory_size_gb_isSet = true;
}

bool OAIVmResourceBasedCud::is_memory_size_gb_Set() const{
    return m_memory_size_gb_isSet;
}

bool OAIVmResourceBasedCud::is_memory_size_gb_Valid() const{
    return m_memory_size_gb_isValid;
}

QString OAIVmResourceBasedCud::getPlan() const {
    return m_plan;
}
void OAIVmResourceBasedCud::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIVmResourceBasedCud::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIVmResourceBasedCud::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIVmResourceBasedCud::getRegion() const {
    return m_region;
}
void OAIVmResourceBasedCud::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIVmResourceBasedCud::is_region_Set() const{
    return m_region_isSet;
}

bool OAIVmResourceBasedCud::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIVmResourceBasedCud::getVirtualCpuCount() const {
    return m_virtual_cpu_count;
}
void OAIVmResourceBasedCud::setVirtualCpuCount(const QString &virtual_cpu_count) {
    m_virtual_cpu_count = virtual_cpu_count;
    m_virtual_cpu_count_isSet = true;
}

bool OAIVmResourceBasedCud::is_virtual_cpu_count_Set() const{
    return m_virtual_cpu_count_isSet;
}

bool OAIVmResourceBasedCud::is_virtual_cpu_count_Valid() const{
    return m_virtual_cpu_count_isValid;
}

bool OAIVmResourceBasedCud::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_guest_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmResourceBasedCud::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
