/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentCostEstimate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentCostEstimate::OAISegmentCostEstimate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentCostEstimate::OAISegmentCostEstimate() {
    this->initializeModel();
}

OAISegmentCostEstimate::~OAISegmentCostEstimate() {}

void OAISegmentCostEstimate::initializeModel() {

    m_commitment_cost_estimates_isSet = false;
    m_commitment_cost_estimates_isValid = false;

    m_segment_start_time_isSet = false;
    m_segment_start_time_isValid = false;

    m_segment_total_cost_estimate_isSet = false;
    m_segment_total_cost_estimate_isValid = false;

    m_workload_cost_estimates_isSet = false;
    m_workload_cost_estimates_isValid = false;
}

void OAISegmentCostEstimate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentCostEstimate::fromJsonObject(QJsonObject json) {

    m_commitment_cost_estimates_isValid = ::OpenAPI::fromJsonValue(m_commitment_cost_estimates, json[QString("commitmentCostEstimates")]);
    m_commitment_cost_estimates_isSet = !json[QString("commitmentCostEstimates")].isNull() && m_commitment_cost_estimates_isValid;

    m_segment_start_time_isValid = ::OpenAPI::fromJsonValue(m_segment_start_time, json[QString("segmentStartTime")]);
    m_segment_start_time_isSet = !json[QString("segmentStartTime")].isNull() && m_segment_start_time_isValid;

    m_segment_total_cost_estimate_isValid = ::OpenAPI::fromJsonValue(m_segment_total_cost_estimate, json[QString("segmentTotalCostEstimate")]);
    m_segment_total_cost_estimate_isSet = !json[QString("segmentTotalCostEstimate")].isNull() && m_segment_total_cost_estimate_isValid;

    m_workload_cost_estimates_isValid = ::OpenAPI::fromJsonValue(m_workload_cost_estimates, json[QString("workloadCostEstimates")]);
    m_workload_cost_estimates_isSet = !json[QString("workloadCostEstimates")].isNull() && m_workload_cost_estimates_isValid;
}

QString OAISegmentCostEstimate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentCostEstimate::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_cost_estimates.size() > 0) {
        obj.insert(QString("commitmentCostEstimates"), ::OpenAPI::toJsonValue(m_commitment_cost_estimates));
    }
    if (m_segment_start_time.isSet()) {
        obj.insert(QString("segmentStartTime"), ::OpenAPI::toJsonValue(m_segment_start_time));
    }
    if (m_segment_total_cost_estimate.isSet()) {
        obj.insert(QString("segmentTotalCostEstimate"), ::OpenAPI::toJsonValue(m_segment_total_cost_estimate));
    }
    if (m_workload_cost_estimates.size() > 0) {
        obj.insert(QString("workloadCostEstimates"), ::OpenAPI::toJsonValue(m_workload_cost_estimates));
    }
    return obj;
}

QList<OAICommitmentCostEstimate> OAISegmentCostEstimate::getCommitmentCostEstimates() const {
    return m_commitment_cost_estimates;
}
void OAISegmentCostEstimate::setCommitmentCostEstimates(const QList<OAICommitmentCostEstimate> &commitment_cost_estimates) {
    m_commitment_cost_estimates = commitment_cost_estimates;
    m_commitment_cost_estimates_isSet = true;
}

bool OAISegmentCostEstimate::is_commitment_cost_estimates_Set() const{
    return m_commitment_cost_estimates_isSet;
}

bool OAISegmentCostEstimate::is_commitment_cost_estimates_Valid() const{
    return m_commitment_cost_estimates_isValid;
}

OAIEstimationTimePoint OAISegmentCostEstimate::getSegmentStartTime() const {
    return m_segment_start_time;
}
void OAISegmentCostEstimate::setSegmentStartTime(const OAIEstimationTimePoint &segment_start_time) {
    m_segment_start_time = segment_start_time;
    m_segment_start_time_isSet = true;
}

bool OAISegmentCostEstimate::is_segment_start_time_Set() const{
    return m_segment_start_time_isSet;
}

bool OAISegmentCostEstimate::is_segment_start_time_Valid() const{
    return m_segment_start_time_isValid;
}

OAICostEstimate OAISegmentCostEstimate::getSegmentTotalCostEstimate() const {
    return m_segment_total_cost_estimate;
}
void OAISegmentCostEstimate::setSegmentTotalCostEstimate(const OAICostEstimate &segment_total_cost_estimate) {
    m_segment_total_cost_estimate = segment_total_cost_estimate;
    m_segment_total_cost_estimate_isSet = true;
}

bool OAISegmentCostEstimate::is_segment_total_cost_estimate_Set() const{
    return m_segment_total_cost_estimate_isSet;
}

bool OAISegmentCostEstimate::is_segment_total_cost_estimate_Valid() const{
    return m_segment_total_cost_estimate_isValid;
}

QList<OAIWorkloadCostEstimate> OAISegmentCostEstimate::getWorkloadCostEstimates() const {
    return m_workload_cost_estimates;
}
void OAISegmentCostEstimate::setWorkloadCostEstimates(const QList<OAIWorkloadCostEstimate> &workload_cost_estimates) {
    m_workload_cost_estimates = workload_cost_estimates;
    m_workload_cost_estimates_isSet = true;
}

bool OAISegmentCostEstimate::is_workload_cost_estimates_Set() const{
    return m_workload_cost_estimates_isSet;
}

bool OAISegmentCostEstimate::is_workload_cost_estimates_Valid() const{
    return m_workload_cost_estimates_isValid;
}

bool OAISegmentCostEstimate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_cost_estimates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_total_cost_estimate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_cost_estimates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentCostEstimate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
