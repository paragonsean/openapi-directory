/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageRateTimelineEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageRateTimelineEntry::OAIUsageRateTimelineEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageRateTimelineEntry::OAIUsageRateTimelineEntry() {
    this->initializeModel();
}

OAIUsageRateTimelineEntry::~OAIUsageRateTimelineEntry() {}

void OAIUsageRateTimelineEntry::initializeModel() {

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;

    m_usage_rate_isSet = false;
    m_usage_rate_isValid = false;
}

void OAIUsageRateTimelineEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageRateTimelineEntry::fromJsonObject(QJsonObject json) {

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;

    m_usage_rate_isValid = ::OpenAPI::fromJsonValue(m_usage_rate, json[QString("usageRate")]);
    m_usage_rate_isSet = !json[QString("usageRate")].isNull() && m_usage_rate_isValid;
}

QString OAIUsageRateTimelineEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageRateTimelineEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_time.isSet()) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    if (m_usage_rate_isSet) {
        obj.insert(QString("usageRate"), ::OpenAPI::toJsonValue(m_usage_rate));
    }
    return obj;
}

OAIEstimationTimePoint OAIUsageRateTimelineEntry::getEffectiveTime() const {
    return m_effective_time;
}
void OAIUsageRateTimelineEntry::setEffectiveTime(const OAIEstimationTimePoint &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIUsageRateTimelineEntry::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIUsageRateTimelineEntry::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

double OAIUsageRateTimelineEntry::getUsageRate() const {
    return m_usage_rate;
}
void OAIUsageRateTimelineEntry::setUsageRate(const double &usage_rate) {
    m_usage_rate = usage_rate;
    m_usage_rate_isSet = true;
}

bool OAIUsageRateTimelineEntry::is_usage_rate_Set() const{
    return m_usage_rate_isSet;
}

bool OAIUsageRateTimelineEntry::is_usage_rate_Valid() const{
    return m_usage_rate_isValid;
}

bool OAIUsageRateTimelineEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageRateTimelineEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
