/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudCdnWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudCdnWorkload::OAICloudCdnWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudCdnWorkload::OAICloudCdnWorkload() {
    this->initializeModel();
}

OAICloudCdnWorkload::~OAICloudCdnWorkload() {}

void OAICloudCdnWorkload::initializeModel() {

    m_cache_fill_origin_service_isSet = false;
    m_cache_fill_origin_service_isValid = false;

    m_cache_fill_rate_isSet = false;
    m_cache_fill_rate_isValid = false;

    m_cache_fill_regions_isSet = false;
    m_cache_fill_regions_isValid = false;

    m_cache_look_up_rate_isSet = false;
    m_cache_look_up_rate_isValid = false;
}

void OAICloudCdnWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudCdnWorkload::fromJsonObject(QJsonObject json) {

    m_cache_fill_origin_service_isValid = ::OpenAPI::fromJsonValue(m_cache_fill_origin_service, json[QString("cacheFillOriginService")]);
    m_cache_fill_origin_service_isSet = !json[QString("cacheFillOriginService")].isNull() && m_cache_fill_origin_service_isValid;

    m_cache_fill_rate_isValid = ::OpenAPI::fromJsonValue(m_cache_fill_rate, json[QString("cacheFillRate")]);
    m_cache_fill_rate_isSet = !json[QString("cacheFillRate")].isNull() && m_cache_fill_rate_isValid;

    m_cache_fill_regions_isValid = ::OpenAPI::fromJsonValue(m_cache_fill_regions, json[QString("cacheFillRegions")]);
    m_cache_fill_regions_isSet = !json[QString("cacheFillRegions")].isNull() && m_cache_fill_regions_isValid;

    m_cache_look_up_rate_isValid = ::OpenAPI::fromJsonValue(m_cache_look_up_rate, json[QString("cacheLookUpRate")]);
    m_cache_look_up_rate_isSet = !json[QString("cacheLookUpRate")].isNull() && m_cache_look_up_rate_isValid;
}

QString OAICloudCdnWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudCdnWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_fill_origin_service_isSet) {
        obj.insert(QString("cacheFillOriginService"), ::OpenAPI::toJsonValue(m_cache_fill_origin_service));
    }
    if (m_cache_fill_rate.isSet()) {
        obj.insert(QString("cacheFillRate"), ::OpenAPI::toJsonValue(m_cache_fill_rate));
    }
    if (m_cache_fill_regions.isSet()) {
        obj.insert(QString("cacheFillRegions"), ::OpenAPI::toJsonValue(m_cache_fill_regions));
    }
    if (m_cache_look_up_rate.isSet()) {
        obj.insert(QString("cacheLookUpRate"), ::OpenAPI::toJsonValue(m_cache_look_up_rate));
    }
    return obj;
}

QString OAICloudCdnWorkload::getCacheFillOriginService() const {
    return m_cache_fill_origin_service;
}
void OAICloudCdnWorkload::setCacheFillOriginService(const QString &cache_fill_origin_service) {
    m_cache_fill_origin_service = cache_fill_origin_service;
    m_cache_fill_origin_service_isSet = true;
}

bool OAICloudCdnWorkload::is_cache_fill_origin_service_Set() const{
    return m_cache_fill_origin_service_isSet;
}

bool OAICloudCdnWorkload::is_cache_fill_origin_service_Valid() const{
    return m_cache_fill_origin_service_isValid;
}

OAIUsage OAICloudCdnWorkload::getCacheFillRate() const {
    return m_cache_fill_rate;
}
void OAICloudCdnWorkload::setCacheFillRate(const OAIUsage &cache_fill_rate) {
    m_cache_fill_rate = cache_fill_rate;
    m_cache_fill_rate_isSet = true;
}

bool OAICloudCdnWorkload::is_cache_fill_rate_Set() const{
    return m_cache_fill_rate_isSet;
}

bool OAICloudCdnWorkload::is_cache_fill_rate_Valid() const{
    return m_cache_fill_rate_isValid;
}

OAICacheFillRegions OAICloudCdnWorkload::getCacheFillRegions() const {
    return m_cache_fill_regions;
}
void OAICloudCdnWorkload::setCacheFillRegions(const OAICacheFillRegions &cache_fill_regions) {
    m_cache_fill_regions = cache_fill_regions;
    m_cache_fill_regions_isSet = true;
}

bool OAICloudCdnWorkload::is_cache_fill_regions_Set() const{
    return m_cache_fill_regions_isSet;
}

bool OAICloudCdnWorkload::is_cache_fill_regions_Valid() const{
    return m_cache_fill_regions_isValid;
}

OAIUsage OAICloudCdnWorkload::getCacheLookUpRate() const {
    return m_cache_look_up_rate;
}
void OAICloudCdnWorkload::setCacheLookUpRate(const OAIUsage &cache_look_up_rate) {
    m_cache_look_up_rate = cache_look_up_rate;
    m_cache_look_up_rate_isSet = true;
}

bool OAICloudCdnWorkload::is_cache_look_up_rate_Set() const{
    return m_cache_look_up_rate_isSet;
}

bool OAICloudCdnWorkload::is_cache_look_up_rate_Valid() const{
    return m_cache_look_up_rate_isValid;
}

bool OAICloudCdnWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_fill_origin_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_fill_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_fill_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_look_up_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudCdnWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
