/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudInterconnectWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudInterconnectWorkload::OAICloudInterconnectWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudInterconnectWorkload::OAICloudInterconnectWorkload() {
    this->initializeModel();
}

OAICloudInterconnectWorkload::~OAICloudInterconnectWorkload() {}

void OAICloudInterconnectWorkload::initializeModel() {

    m_interconnect_attachments_isSet = false;
    m_interconnect_attachments_isValid = false;

    m_interconnect_type_isSet = false;
    m_interconnect_type_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_provisioned_link_count_isSet = false;
    m_provisioned_link_count_isValid = false;
}

void OAICloudInterconnectWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudInterconnectWorkload::fromJsonObject(QJsonObject json) {

    m_interconnect_attachments_isValid = ::OpenAPI::fromJsonValue(m_interconnect_attachments, json[QString("interconnectAttachments")]);
    m_interconnect_attachments_isSet = !json[QString("interconnectAttachments")].isNull() && m_interconnect_attachments_isValid;

    m_interconnect_type_isValid = ::OpenAPI::fromJsonValue(m_interconnect_type, json[QString("interconnectType")]);
    m_interconnect_type_isSet = !json[QString("interconnectType")].isNull() && m_interconnect_type_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("linkType")]);
    m_link_type_isSet = !json[QString("linkType")].isNull() && m_link_type_isValid;

    m_provisioned_link_count_isValid = ::OpenAPI::fromJsonValue(m_provisioned_link_count, json[QString("provisionedLinkCount")]);
    m_provisioned_link_count_isSet = !json[QString("provisionedLinkCount")].isNull() && m_provisioned_link_count_isValid;
}

QString OAICloudInterconnectWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudInterconnectWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_interconnect_attachments.size() > 0) {
        obj.insert(QString("interconnectAttachments"), ::OpenAPI::toJsonValue(m_interconnect_attachments));
    }
    if (m_interconnect_type_isSet) {
        obj.insert(QString("interconnectType"), ::OpenAPI::toJsonValue(m_interconnect_type));
    }
    if (m_link_type_isSet) {
        obj.insert(QString("linkType"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_provisioned_link_count.isSet()) {
        obj.insert(QString("provisionedLinkCount"), ::OpenAPI::toJsonValue(m_provisioned_link_count));
    }
    return obj;
}

QList<OAIVlanAttachment> OAICloudInterconnectWorkload::getInterconnectAttachments() const {
    return m_interconnect_attachments;
}
void OAICloudInterconnectWorkload::setInterconnectAttachments(const QList<OAIVlanAttachment> &interconnect_attachments) {
    m_interconnect_attachments = interconnect_attachments;
    m_interconnect_attachments_isSet = true;
}

bool OAICloudInterconnectWorkload::is_interconnect_attachments_Set() const{
    return m_interconnect_attachments_isSet;
}

bool OAICloudInterconnectWorkload::is_interconnect_attachments_Valid() const{
    return m_interconnect_attachments_isValid;
}

QString OAICloudInterconnectWorkload::getInterconnectType() const {
    return m_interconnect_type;
}
void OAICloudInterconnectWorkload::setInterconnectType(const QString &interconnect_type) {
    m_interconnect_type = interconnect_type;
    m_interconnect_type_isSet = true;
}

bool OAICloudInterconnectWorkload::is_interconnect_type_Set() const{
    return m_interconnect_type_isSet;
}

bool OAICloudInterconnectWorkload::is_interconnect_type_Valid() const{
    return m_interconnect_type_isValid;
}

QString OAICloudInterconnectWorkload::getLinkType() const {
    return m_link_type;
}
void OAICloudInterconnectWorkload::setLinkType(const QString &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAICloudInterconnectWorkload::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAICloudInterconnectWorkload::is_link_type_Valid() const{
    return m_link_type_isValid;
}

OAIUsage OAICloudInterconnectWorkload::getProvisionedLinkCount() const {
    return m_provisioned_link_count;
}
void OAICloudInterconnectWorkload::setProvisionedLinkCount(const OAIUsage &provisioned_link_count) {
    m_provisioned_link_count = provisioned_link_count;
    m_provisioned_link_count_isSet = true;
}

bool OAICloudInterconnectWorkload::is_provisioned_link_count_Set() const{
    return m_provisioned_link_count_isSet;
}

bool OAICloudInterconnectWorkload::is_provisioned_link_count_Valid() const{
    return m_provisioned_link_count_isValid;
}

bool OAICloudInterconnectWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interconnect_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interconnect_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_link_count.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudInterconnectWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
