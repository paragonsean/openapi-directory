/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeVmWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeVmWorkload::OAIComputeVmWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeVmWorkload::OAIComputeVmWorkload() {
    this->initializeModel();
}

OAIComputeVmWorkload::~OAIComputeVmWorkload() {}

void OAIComputeVmWorkload::initializeModel() {

    m_enable_confidential_compute_isSet = false;
    m_enable_confidential_compute_isValid = false;

    m_guest_accelerator_isSet = false;
    m_guest_accelerator_isValid = false;

    m_instances_running_isSet = false;
    m_instances_running_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_persistent_disks_isSet = false;
    m_persistent_disks_isValid = false;

    m_preemptible_isSet = false;
    m_preemptible_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIComputeVmWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeVmWorkload::fromJsonObject(QJsonObject json) {

    m_enable_confidential_compute_isValid = ::OpenAPI::fromJsonValue(m_enable_confidential_compute, json[QString("enableConfidentialCompute")]);
    m_enable_confidential_compute_isSet = !json[QString("enableConfidentialCompute")].isNull() && m_enable_confidential_compute_isValid;

    m_guest_accelerator_isValid = ::OpenAPI::fromJsonValue(m_guest_accelerator, json[QString("guestAccelerator")]);
    m_guest_accelerator_isSet = !json[QString("guestAccelerator")].isNull() && m_guest_accelerator_isValid;

    m_instances_running_isValid = ::OpenAPI::fromJsonValue(m_instances_running, json[QString("instancesRunning")]);
    m_instances_running_isSet = !json[QString("instancesRunning")].isNull() && m_instances_running_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_persistent_disks_isValid = ::OpenAPI::fromJsonValue(m_persistent_disks, json[QString("persistentDisks")]);
    m_persistent_disks_isSet = !json[QString("persistentDisks")].isNull() && m_persistent_disks_isValid;

    m_preemptible_isValid = ::OpenAPI::fromJsonValue(m_preemptible, json[QString("preemptible")]);
    m_preemptible_isSet = !json[QString("preemptible")].isNull() && m_preemptible_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIComputeVmWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeVmWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_confidential_compute_isSet) {
        obj.insert(QString("enableConfidentialCompute"), ::OpenAPI::toJsonValue(m_enable_confidential_compute));
    }
    if (m_guest_accelerator.isSet()) {
        obj.insert(QString("guestAccelerator"), ::OpenAPI::toJsonValue(m_guest_accelerator));
    }
    if (m_instances_running.isSet()) {
        obj.insert(QString("instancesRunning"), ::OpenAPI::toJsonValue(m_instances_running));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_machine_type.isSet()) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_persistent_disks.size() > 0) {
        obj.insert(QString("persistentDisks"), ::OpenAPI::toJsonValue(m_persistent_disks));
    }
    if (m_preemptible_isSet) {
        obj.insert(QString("preemptible"), ::OpenAPI::toJsonValue(m_preemptible));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

bool OAIComputeVmWorkload::isEnableConfidentialCompute() const {
    return m_enable_confidential_compute;
}
void OAIComputeVmWorkload::setEnableConfidentialCompute(const bool &enable_confidential_compute) {
    m_enable_confidential_compute = enable_confidential_compute;
    m_enable_confidential_compute_isSet = true;
}

bool OAIComputeVmWorkload::is_enable_confidential_compute_Set() const{
    return m_enable_confidential_compute_isSet;
}

bool OAIComputeVmWorkload::is_enable_confidential_compute_Valid() const{
    return m_enable_confidential_compute_isValid;
}

OAIGuestAccelerator OAIComputeVmWorkload::getGuestAccelerator() const {
    return m_guest_accelerator;
}
void OAIComputeVmWorkload::setGuestAccelerator(const OAIGuestAccelerator &guest_accelerator) {
    m_guest_accelerator = guest_accelerator;
    m_guest_accelerator_isSet = true;
}

bool OAIComputeVmWorkload::is_guest_accelerator_Set() const{
    return m_guest_accelerator_isSet;
}

bool OAIComputeVmWorkload::is_guest_accelerator_Valid() const{
    return m_guest_accelerator_isValid;
}

OAIUsage OAIComputeVmWorkload::getInstancesRunning() const {
    return m_instances_running;
}
void OAIComputeVmWorkload::setInstancesRunning(const OAIUsage &instances_running) {
    m_instances_running = instances_running;
    m_instances_running_isSet = true;
}

bool OAIComputeVmWorkload::is_instances_running_Set() const{
    return m_instances_running_isSet;
}

bool OAIComputeVmWorkload::is_instances_running_Valid() const{
    return m_instances_running_isValid;
}

QList<QString> OAIComputeVmWorkload::getLicenses() const {
    return m_licenses;
}
void OAIComputeVmWorkload::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIComputeVmWorkload::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIComputeVmWorkload::is_licenses_Valid() const{
    return m_licenses_isValid;
}

OAIMachineType OAIComputeVmWorkload::getMachineType() const {
    return m_machine_type;
}
void OAIComputeVmWorkload::setMachineType(const OAIMachineType &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIComputeVmWorkload::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIComputeVmWorkload::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QList<OAIPersistentDisk> OAIComputeVmWorkload::getPersistentDisks() const {
    return m_persistent_disks;
}
void OAIComputeVmWorkload::setPersistentDisks(const QList<OAIPersistentDisk> &persistent_disks) {
    m_persistent_disks = persistent_disks;
    m_persistent_disks_isSet = true;
}

bool OAIComputeVmWorkload::is_persistent_disks_Set() const{
    return m_persistent_disks_isSet;
}

bool OAIComputeVmWorkload::is_persistent_disks_Valid() const{
    return m_persistent_disks_isValid;
}

bool OAIComputeVmWorkload::isPreemptible() const {
    return m_preemptible;
}
void OAIComputeVmWorkload::setPreemptible(const bool &preemptible) {
    m_preemptible = preemptible;
    m_preemptible_isSet = true;
}

bool OAIComputeVmWorkload::is_preemptible_Set() const{
    return m_preemptible_isSet;
}

bool OAIComputeVmWorkload::is_preemptible_Valid() const{
    return m_preemptible_isValid;
}

QString OAIComputeVmWorkload::getRegion() const {
    return m_region;
}
void OAIComputeVmWorkload::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIComputeVmWorkload::is_region_Set() const{
    return m_region_isSet;
}

bool OAIComputeVmWorkload::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIComputeVmWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_confidential_compute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_running.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preemptible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeVmWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
