/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmToVmEgressWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmToVmEgressWorkload::OAIVmToVmEgressWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmToVmEgressWorkload::OAIVmToVmEgressWorkload() {
    this->initializeModel();
}

OAIVmToVmEgressWorkload::~OAIVmToVmEgressWorkload() {}

void OAIVmToVmEgressWorkload::initializeModel() {

    m_inter_region_egress_isSet = false;
    m_inter_region_egress_isValid = false;

    m_intra_region_egress_isSet = false;
    m_intra_region_egress_isValid = false;
}

void OAIVmToVmEgressWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmToVmEgressWorkload::fromJsonObject(QJsonObject json) {

    m_inter_region_egress_isValid = ::OpenAPI::fromJsonValue(m_inter_region_egress, json[QString("interRegionEgress")]);
    m_inter_region_egress_isSet = !json[QString("interRegionEgress")].isNull() && m_inter_region_egress_isValid;

    m_intra_region_egress_isValid = ::OpenAPI::fromJsonValue(m_intra_region_egress, json[QString("intraRegionEgress")]);
    m_intra_region_egress_isSet = !json[QString("intraRegionEgress")].isNull() && m_intra_region_egress_isValid;
}

QString OAIVmToVmEgressWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmToVmEgressWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_inter_region_egress.isSet()) {
        obj.insert(QString("interRegionEgress"), ::OpenAPI::toJsonValue(m_inter_region_egress));
    }
    if (m_intra_region_egress.isSet()) {
        obj.insert(QString("intraRegionEgress"), ::OpenAPI::toJsonValue(m_intra_region_egress));
    }
    return obj;
}

OAIInterRegionEgress OAIVmToVmEgressWorkload::getInterRegionEgress() const {
    return m_inter_region_egress;
}
void OAIVmToVmEgressWorkload::setInterRegionEgress(const OAIInterRegionEgress &inter_region_egress) {
    m_inter_region_egress = inter_region_egress;
    m_inter_region_egress_isSet = true;
}

bool OAIVmToVmEgressWorkload::is_inter_region_egress_Set() const{
    return m_inter_region_egress_isSet;
}

bool OAIVmToVmEgressWorkload::is_inter_region_egress_Valid() const{
    return m_inter_region_egress_isValid;
}

OAIIntraRegionEgress OAIVmToVmEgressWorkload::getIntraRegionEgress() const {
    return m_intra_region_egress;
}
void OAIVmToVmEgressWorkload::setIntraRegionEgress(const OAIIntraRegionEgress &intra_region_egress) {
    m_intra_region_egress = intra_region_egress;
    m_intra_region_egress_isSet = true;
}

bool OAIVmToVmEgressWorkload::is_intra_region_egress_Set() const{
    return m_intra_region_egress_isSet;
}

bool OAIVmToVmEgressWorkload::is_intra_region_egress_Valid() const{
    return m_intra_region_egress_isValid;
}

bool OAIVmToVmEgressWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inter_region_egress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intra_region_egress.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmToVmEgressWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
