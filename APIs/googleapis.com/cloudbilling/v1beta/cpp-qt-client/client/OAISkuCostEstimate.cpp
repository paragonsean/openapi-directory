/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuCostEstimate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuCostEstimate::OAISkuCostEstimate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuCostEstimate::OAISkuCostEstimate() {
    this->initializeModel();
}

OAISkuCostEstimate::~OAISkuCostEstimate() {}

void OAISkuCostEstimate::initializeModel() {

    m_cost_estimate_isSet = false;
    m_cost_estimate_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_usage_amount_isSet = false;
    m_usage_amount_isValid = false;

    m_usage_unit_isSet = false;
    m_usage_unit_isValid = false;
}

void OAISkuCostEstimate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuCostEstimate::fromJsonObject(QJsonObject json) {

    m_cost_estimate_isValid = ::OpenAPI::fromJsonValue(m_cost_estimate, json[QString("costEstimate")]);
    m_cost_estimate_isSet = !json[QString("costEstimate")].isNull() && m_cost_estimate_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_usage_amount_isValid = ::OpenAPI::fromJsonValue(m_usage_amount, json[QString("usageAmount")]);
    m_usage_amount_isSet = !json[QString("usageAmount")].isNull() && m_usage_amount_isValid;

    m_usage_unit_isValid = ::OpenAPI::fromJsonValue(m_usage_unit, json[QString("usageUnit")]);
    m_usage_unit_isSet = !json[QString("usageUnit")].isNull() && m_usage_unit_isValid;
}

QString OAISkuCostEstimate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuCostEstimate::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_estimate.isSet()) {
        obj.insert(QString("costEstimate"), ::OpenAPI::toJsonValue(m_cost_estimate));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_usage_amount_isSet) {
        obj.insert(QString("usageAmount"), ::OpenAPI::toJsonValue(m_usage_amount));
    }
    if (m_usage_unit_isSet) {
        obj.insert(QString("usageUnit"), ::OpenAPI::toJsonValue(m_usage_unit));
    }
    return obj;
}

OAICostEstimate OAISkuCostEstimate::getCostEstimate() const {
    return m_cost_estimate;
}
void OAISkuCostEstimate::setCostEstimate(const OAICostEstimate &cost_estimate) {
    m_cost_estimate = cost_estimate;
    m_cost_estimate_isSet = true;
}

bool OAISkuCostEstimate::is_cost_estimate_Set() const{
    return m_cost_estimate_isSet;
}

bool OAISkuCostEstimate::is_cost_estimate_Valid() const{
    return m_cost_estimate_isValid;
}

QString OAISkuCostEstimate::getSku() const {
    return m_sku;
}
void OAISkuCostEstimate::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAISkuCostEstimate::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAISkuCostEstimate::is_sku_Valid() const{
    return m_sku_isValid;
}

double OAISkuCostEstimate::getUsageAmount() const {
    return m_usage_amount;
}
void OAISkuCostEstimate::setUsageAmount(const double &usage_amount) {
    m_usage_amount = usage_amount;
    m_usage_amount_isSet = true;
}

bool OAISkuCostEstimate::is_usage_amount_Set() const{
    return m_usage_amount_isSet;
}

bool OAISkuCostEstimate::is_usage_amount_Valid() const{
    return m_usage_amount_isValid;
}

QString OAISkuCostEstimate::getUsageUnit() const {
    return m_usage_unit;
}
void OAISkuCostEstimate::setUsageUnit(const QString &usage_unit) {
    m_usage_unit = usage_unit;
    m_usage_unit_isSet = true;
}

bool OAISkuCostEstimate::is_usage_unit_Set() const{
    return m_usage_unit_isSet;
}

bool OAISkuCostEstimate::is_usage_unit_Valid() const{
    return m_usage_unit_isValid;
}

bool OAISkuCostEstimate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_estimate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuCostEstimate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
