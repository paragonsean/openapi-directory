/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrice::OAIPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrice::OAIPrice() {
    this->initializeModel();
}

OAIPrice::~OAIPrice() {}

void OAIPrice::initializeModel() {

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAIPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrice::fromJsonObject(QJsonObject json) {

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;
}

QString OAIPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_time.isSet()) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_rate.isSet()) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

OAIEstimationTimePoint OAIPrice::getEffectiveTime() const {
    return m_effective_time;
}
void OAIPrice::setEffectiveTime(const OAIEstimationTimePoint &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIPrice::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIPrice::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

QString OAIPrice::getPriceType() const {
    return m_price_type;
}
void OAIPrice::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAIPrice::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAIPrice::is_price_type_Valid() const{
    return m_price_type_isValid;
}

OAIRate OAIPrice::getRate() const {
    return m_rate;
}
void OAIPrice::setRate(const OAIRate &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIPrice::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIPrice::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAIPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
