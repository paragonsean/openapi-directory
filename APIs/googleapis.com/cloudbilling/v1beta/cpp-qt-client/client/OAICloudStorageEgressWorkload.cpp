/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudStorageEgressWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudStorageEgressWorkload::OAICloudStorageEgressWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudStorageEgressWorkload::OAICloudStorageEgressWorkload() {
    this->initializeModel();
}

OAICloudStorageEgressWorkload::~OAICloudStorageEgressWorkload() {}

void OAICloudStorageEgressWorkload::initializeModel() {

    m_destination_continent_isSet = false;
    m_destination_continent_isValid = false;

    m_egress_rate_isSet = false;
    m_egress_rate_isValid = false;

    m_source_continent_isSet = false;
    m_source_continent_isValid = false;
}

void OAICloudStorageEgressWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudStorageEgressWorkload::fromJsonObject(QJsonObject json) {

    m_destination_continent_isValid = ::OpenAPI::fromJsonValue(m_destination_continent, json[QString("destinationContinent")]);
    m_destination_continent_isSet = !json[QString("destinationContinent")].isNull() && m_destination_continent_isValid;

    m_egress_rate_isValid = ::OpenAPI::fromJsonValue(m_egress_rate, json[QString("egressRate")]);
    m_egress_rate_isSet = !json[QString("egressRate")].isNull() && m_egress_rate_isValid;

    m_source_continent_isValid = ::OpenAPI::fromJsonValue(m_source_continent, json[QString("sourceContinent")]);
    m_source_continent_isSet = !json[QString("sourceContinent")].isNull() && m_source_continent_isValid;
}

QString OAICloudStorageEgressWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudStorageEgressWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_continent_isSet) {
        obj.insert(QString("destinationContinent"), ::OpenAPI::toJsonValue(m_destination_continent));
    }
    if (m_egress_rate.isSet()) {
        obj.insert(QString("egressRate"), ::OpenAPI::toJsonValue(m_egress_rate));
    }
    if (m_source_continent_isSet) {
        obj.insert(QString("sourceContinent"), ::OpenAPI::toJsonValue(m_source_continent));
    }
    return obj;
}

QString OAICloudStorageEgressWorkload::getDestinationContinent() const {
    return m_destination_continent;
}
void OAICloudStorageEgressWorkload::setDestinationContinent(const QString &destination_continent) {
    m_destination_continent = destination_continent;
    m_destination_continent_isSet = true;
}

bool OAICloudStorageEgressWorkload::is_destination_continent_Set() const{
    return m_destination_continent_isSet;
}

bool OAICloudStorageEgressWorkload::is_destination_continent_Valid() const{
    return m_destination_continent_isValid;
}

OAIUsage OAICloudStorageEgressWorkload::getEgressRate() const {
    return m_egress_rate;
}
void OAICloudStorageEgressWorkload::setEgressRate(const OAIUsage &egress_rate) {
    m_egress_rate = egress_rate;
    m_egress_rate_isSet = true;
}

bool OAICloudStorageEgressWorkload::is_egress_rate_Set() const{
    return m_egress_rate_isSet;
}

bool OAICloudStorageEgressWorkload::is_egress_rate_Valid() const{
    return m_egress_rate_isValid;
}

QString OAICloudStorageEgressWorkload::getSourceContinent() const {
    return m_source_continent;
}
void OAICloudStorageEgressWorkload::setSourceContinent(const QString &source_continent) {
    m_source_continent = source_continent;
    m_source_continent_isSet = true;
}

bool OAICloudStorageEgressWorkload::is_source_continent_Set() const{
    return m_source_continent_isSet;
}

bool OAICloudStorageEgressWorkload::is_source_continent_Valid() const{
    return m_source_continent_isValid;
}

bool OAICloudStorageEgressWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_continent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudStorageEgressWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
