/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostScenario::OAICostScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostScenario::OAICostScenario() {
    this->initializeModel();
}

OAICostScenario::~OAICostScenario() {}

void OAICostScenario::initializeModel() {

    m_commitments_isSet = false;
    m_commitments_isValid = false;

    m_scenario_config_isSet = false;
    m_scenario_config_isValid = false;

    m_workloads_isSet = false;
    m_workloads_isValid = false;
}

void OAICostScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostScenario::fromJsonObject(QJsonObject json) {

    m_commitments_isValid = ::OpenAPI::fromJsonValue(m_commitments, json[QString("commitments")]);
    m_commitments_isSet = !json[QString("commitments")].isNull() && m_commitments_isValid;

    m_scenario_config_isValid = ::OpenAPI::fromJsonValue(m_scenario_config, json[QString("scenarioConfig")]);
    m_scenario_config_isSet = !json[QString("scenarioConfig")].isNull() && m_scenario_config_isValid;

    m_workloads_isValid = ::OpenAPI::fromJsonValue(m_workloads, json[QString("workloads")]);
    m_workloads_isSet = !json[QString("workloads")].isNull() && m_workloads_isValid;
}

QString OAICostScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_commitments.size() > 0) {
        obj.insert(QString("commitments"), ::OpenAPI::toJsonValue(m_commitments));
    }
    if (m_scenario_config.isSet()) {
        obj.insert(QString("scenarioConfig"), ::OpenAPI::toJsonValue(m_scenario_config));
    }
    if (m_workloads.size() > 0) {
        obj.insert(QString("workloads"), ::OpenAPI::toJsonValue(m_workloads));
    }
    return obj;
}

QList<OAICommitment> OAICostScenario::getCommitments() const {
    return m_commitments;
}
void OAICostScenario::setCommitments(const QList<OAICommitment> &commitments) {
    m_commitments = commitments;
    m_commitments_isSet = true;
}

bool OAICostScenario::is_commitments_Set() const{
    return m_commitments_isSet;
}

bool OAICostScenario::is_commitments_Valid() const{
    return m_commitments_isValid;
}

OAIScenarioConfig OAICostScenario::getScenarioConfig() const {
    return m_scenario_config;
}
void OAICostScenario::setScenarioConfig(const OAIScenarioConfig &scenario_config) {
    m_scenario_config = scenario_config;
    m_scenario_config_isSet = true;
}

bool OAICostScenario::is_scenario_config_Set() const{
    return m_scenario_config_isSet;
}

bool OAICostScenario::is_scenario_config_Valid() const{
    return m_scenario_config_isValid;
}

QList<OAIWorkload> OAICostScenario::getWorkloads() const {
    return m_workloads;
}
void OAICostScenario::setWorkloads(const QList<OAIWorkload> &workloads) {
    m_workloads = workloads;
    m_workloads_isSet = true;
}

bool OAICostScenario::is_workloads_Set() const{
    return m_workloads_isSet;
}

bool OAICostScenario::is_workloads_Valid() const{
    return m_workloads_isValid;
}

bool OAICostScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
