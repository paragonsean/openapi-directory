/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheFillRegions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheFillRegions::OAICacheFillRegions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheFillRegions::OAICacheFillRegions() {
    this->initializeModel();
}

OAICacheFillRegions::~OAICacheFillRegions() {}

void OAICacheFillRegions::initializeModel() {

    m_destination_region_isSet = false;
    m_destination_region_isValid = false;

    m_source_region_isSet = false;
    m_source_region_isValid = false;
}

void OAICacheFillRegions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheFillRegions::fromJsonObject(QJsonObject json) {

    m_destination_region_isValid = ::OpenAPI::fromJsonValue(m_destination_region, json[QString("destinationRegion")]);
    m_destination_region_isSet = !json[QString("destinationRegion")].isNull() && m_destination_region_isValid;

    m_source_region_isValid = ::OpenAPI::fromJsonValue(m_source_region, json[QString("sourceRegion")]);
    m_source_region_isSet = !json[QString("sourceRegion")].isNull() && m_source_region_isValid;
}

QString OAICacheFillRegions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheFillRegions::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_region_isSet) {
        obj.insert(QString("destinationRegion"), ::OpenAPI::toJsonValue(m_destination_region));
    }
    if (m_source_region_isSet) {
        obj.insert(QString("sourceRegion"), ::OpenAPI::toJsonValue(m_source_region));
    }
    return obj;
}

QString OAICacheFillRegions::getDestinationRegion() const {
    return m_destination_region;
}
void OAICacheFillRegions::setDestinationRegion(const QString &destination_region) {
    m_destination_region = destination_region;
    m_destination_region_isSet = true;
}

bool OAICacheFillRegions::is_destination_region_Set() const{
    return m_destination_region_isSet;
}

bool OAICacheFillRegions::is_destination_region_Valid() const{
    return m_destination_region_isValid;
}

QString OAICacheFillRegions::getSourceRegion() const {
    return m_source_region;
}
void OAICacheFillRegions::setSourceRegion(const QString &source_region) {
    m_source_region = source_region;
    m_source_region_isSet = true;
}

bool OAICacheFillRegions::is_source_region_Set() const{
    return m_source_region_isSet;
}

bool OAICacheFillRegions::is_source_region_Valid() const{
    return m_source_region_isValid;
}

bool OAICacheFillRegions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheFillRegions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
