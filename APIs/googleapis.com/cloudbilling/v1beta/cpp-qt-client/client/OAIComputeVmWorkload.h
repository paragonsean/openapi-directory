/**
 * Cloud Billing API
 * Allows developers to manage billing for their Google Cloud Platform projects programmatically.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComputeVmWorkload.h
 *
 * Specificies usage of a set of identical compute VM instances.
 */

#ifndef OAIComputeVmWorkload_H
#define OAIComputeVmWorkload_H

#include <QJsonObject>

#include "OAIGuestAccelerator.h"
#include "OAIMachineType.h"
#include "OAIPersistentDisk.h"
#include "OAIUsage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGuestAccelerator;
class OAIUsage;
class OAIMachineType;
class OAIPersistentDisk;

class OAIComputeVmWorkload : public OAIObject {
public:
    OAIComputeVmWorkload();
    OAIComputeVmWorkload(QString json);
    ~OAIComputeVmWorkload() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnableConfidentialCompute() const;
    void setEnableConfidentialCompute(const bool &enable_confidential_compute);
    bool is_enable_confidential_compute_Set() const;
    bool is_enable_confidential_compute_Valid() const;

    OAIGuestAccelerator getGuestAccelerator() const;
    void setGuestAccelerator(const OAIGuestAccelerator &guest_accelerator);
    bool is_guest_accelerator_Set() const;
    bool is_guest_accelerator_Valid() const;

    OAIUsage getInstancesRunning() const;
    void setInstancesRunning(const OAIUsage &instances_running);
    bool is_instances_running_Set() const;
    bool is_instances_running_Valid() const;

    QList<QString> getLicenses() const;
    void setLicenses(const QList<QString> &licenses);
    bool is_licenses_Set() const;
    bool is_licenses_Valid() const;

    OAIMachineType getMachineType() const;
    void setMachineType(const OAIMachineType &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    QList<OAIPersistentDisk> getPersistentDisks() const;
    void setPersistentDisks(const QList<OAIPersistentDisk> &persistent_disks);
    bool is_persistent_disks_Set() const;
    bool is_persistent_disks_Valid() const;

    bool isPreemptible() const;
    void setPreemptible(const bool &preemptible);
    bool is_preemptible_Set() const;
    bool is_preemptible_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_confidential_compute;
    bool m_enable_confidential_compute_isSet;
    bool m_enable_confidential_compute_isValid;

    OAIGuestAccelerator m_guest_accelerator;
    bool m_guest_accelerator_isSet;
    bool m_guest_accelerator_isValid;

    OAIUsage m_instances_running;
    bool m_instances_running_isSet;
    bool m_instances_running_isValid;

    QList<QString> m_licenses;
    bool m_licenses_isSet;
    bool m_licenses_isValid;

    OAIMachineType m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    QList<OAIPersistentDisk> m_persistent_disks;
    bool m_persistent_disks_isSet;
    bool m_persistent_disks_isValid;

    bool m_preemptible;
    bool m_preemptible_isSet;
    bool m_preemptible_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComputeVmWorkload)

#endif // OAIComputeVmWorkload_H
