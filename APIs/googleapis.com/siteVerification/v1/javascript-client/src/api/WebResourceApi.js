/**
 * Google Site Verification API
 * Verifies ownership of websites or domains with Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SiteVerificationWebResourceGettokenRequest from '../model/SiteVerificationWebResourceGettokenRequest';
import SiteVerificationWebResourceGettokenResponse from '../model/SiteVerificationWebResourceGettokenResponse';
import SiteVerificationWebResourceListResponse from '../model/SiteVerificationWebResourceListResponse';
import SiteVerificationWebResourceResource from '../model/SiteVerificationWebResourceResource';

/**
* WebResource service.
* @module api/WebResourceApi
* @version v1
*/
export default class WebResourceApi {

    /**
    * Constructs a new WebResourceApi. 
    * @alias module:api/WebResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the siteVerificationWebResourceDelete operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relinquish ownership of a website or domain.
     * @param {String} id The id of a verified site or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/WebResourceApi~siteVerificationWebResourceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    siteVerificationWebResourceDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling siteVerificationWebResourceDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webResource/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourceGet operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the most current data for a website or domain.
     * @param {String} id The id of a verified site or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/WebResourceApi~siteVerificationWebResourceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceResource}
     */
    siteVerificationWebResourceGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling siteVerificationWebResourceGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceResource;
      return this.apiClient.callApi(
        '/webResource/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourceGetToken operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceGetTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceGettokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a verification token for placing on a website or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/SiteVerificationWebResourceGettokenRequest} [siteVerificationWebResourceGettokenRequest] 
     * @param {module:api/WebResourceApi~siteVerificationWebResourceGetTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceGettokenResponse}
     */
    siteVerificationWebResourceGetToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['siteVerificationWebResourceGettokenRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceGettokenResponse;
      return this.apiClient.callApi(
        '/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourceInsert operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempt verification of a website or domain.
     * @param {String} verificationMethod The method to use for verifying a site or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/SiteVerificationWebResourceResource} [siteVerificationWebResourceResource] 
     * @param {module:api/WebResourceApi~siteVerificationWebResourceInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceResource}
     */
    siteVerificationWebResourceInsert(verificationMethod, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteVerificationWebResourceResource'];
      // verify the required parameter 'verificationMethod' is set
      if (verificationMethod === undefined || verificationMethod === null) {
        throw new Error("Missing the required parameter 'verificationMethod' when calling siteVerificationWebResourceInsert");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'verificationMethod': verificationMethod
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceResource;
      return this.apiClient.callApi(
        '/webResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourceList operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of your verified websites and domains.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/WebResourceApi~siteVerificationWebResourceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceListResponse}
     */
    siteVerificationWebResourceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceListResponse;
      return this.apiClient.callApi(
        '/webResource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourcePatch operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourcePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the list of owners for your website or domain. This method supports patch semantics.
     * @param {String} id The id of a verified site or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/SiteVerificationWebResourceResource} [siteVerificationWebResourceResource] 
     * @param {module:api/WebResourceApi~siteVerificationWebResourcePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceResource}
     */
    siteVerificationWebResourcePatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteVerificationWebResourceResource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling siteVerificationWebResourcePatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceResource;
      return this.apiClient.callApi(
        '/webResource/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the siteVerificationWebResourceUpdate operation.
     * @callback module:api/WebResourceApi~siteVerificationWebResourceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteVerificationWebResourceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the list of owners for your website or domain.
     * @param {String} id The id of a verified site or domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/SiteVerificationWebResourceResource} [siteVerificationWebResourceResource] 
     * @param {module:api/WebResourceApi~siteVerificationWebResourceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteVerificationWebResourceResource}
     */
    siteVerificationWebResourceUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['siteVerificationWebResourceResource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling siteVerificationWebResourceUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteVerificationWebResourceResource;
      return this.apiClient.callApi(
        '/webResource/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
