/**
 * Google Site Verification API
 * Verifies ownership of websites or domains with Google.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteVerificationWebResourceResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteVerificationWebResourceResource::OAISiteVerificationWebResourceResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteVerificationWebResourceResource::OAISiteVerificationWebResourceResource() {
    this->initializeModel();
}

OAISiteVerificationWebResourceResource::~OAISiteVerificationWebResourceResource() {}

void OAISiteVerificationWebResourceResource::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;
}

void OAISiteVerificationWebResourceResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteVerificationWebResourceResource::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;
}

QString OAISiteVerificationWebResourceResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteVerificationWebResourceResource::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    return obj;
}

QString OAISiteVerificationWebResourceResource::getId() const {
    return m_id;
}
void OAISiteVerificationWebResourceResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISiteVerificationWebResourceResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAISiteVerificationWebResourceResource::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAISiteVerificationWebResourceResource::getOwners() const {
    return m_owners;
}
void OAISiteVerificationWebResourceResource::setOwners(const QList<QString> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAISiteVerificationWebResourceResource::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAISiteVerificationWebResourceResource::is_owners_Valid() const{
    return m_owners_isValid;
}

OAISiteVerificationWebResourceResource_site OAISiteVerificationWebResourceResource::getSite() const {
    return m_site;
}
void OAISiteVerificationWebResourceResource::setSite(const OAISiteVerificationWebResourceResource_site &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAISiteVerificationWebResourceResource::is_site_Set() const{
    return m_site_isSet;
}

bool OAISiteVerificationWebResourceResource::is_site_Valid() const{
    return m_site_isValid;
}

bool OAISiteVerificationWebResourceResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteVerificationWebResourceResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
