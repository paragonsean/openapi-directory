/**
 * Google Site Verification API
 * Verifies ownership of websites or domains with Google.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebResourceApi_H
#define OAI_OAIWebResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISiteVerificationWebResourceGettokenRequest.h"
#include "OAISiteVerificationWebResourceGettokenResponse.h"
#include "OAISiteVerificationWebResourceListResponse.h"
#include "OAISiteVerificationWebResourceResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebResourceApi : public QObject {
    Q_OBJECT

public:
    OAIWebResourceApi(const int timeOut = 0);
    ~OAIWebResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void siteVerification_webResource_delete(const QString &id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void siteVerification_webResource_get(const QString &id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_site_verification_web_resource_gettoken_request OAISiteVerificationWebResourceGettokenRequest [optional]
    */
    virtual void siteVerification_webResource_getToken(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceGettokenRequest> &oai_site_verification_web_resource_gettoken_request = ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceGettokenRequest>());

    /**
    * @param[in]  verification_method QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_site_verification_web_resource_resource OAISiteVerificationWebResourceResource [optional]
    */
    virtual void siteVerification_webResource_insert(const QString &verification_method, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource> &oai_site_verification_web_resource_resource = ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void siteVerification_webResource_list(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_site_verification_web_resource_resource OAISiteVerificationWebResourceResource [optional]
    */
    virtual void siteVerification_webResource_patch(const QString &id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource> &oai_site_verification_web_resource_resource = ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_site_verification_web_resource_resource OAISiteVerificationWebResourceResource [optional]
    */
    virtual void siteVerification_webResource_update(const QString &id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource> &oai_site_verification_web_resource_resource = ::OpenAPI::OptionalParam<OAISiteVerificationWebResourceResource>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void siteVerification_webResource_deleteCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_getCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_getTokenCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_insertCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_listCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_patchCallback(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void siteVerification_webResource_deleteSignal();
    void siteVerification_webResource_getSignal(OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_getTokenSignal(OAISiteVerificationWebResourceGettokenResponse summary);
    void siteVerification_webResource_insertSignal(OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_listSignal(OAISiteVerificationWebResourceListResponse summary);
    void siteVerification_webResource_patchSignal(OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_updateSignal(OAISiteVerificationWebResourceResource summary);


    void siteVerification_webResource_deleteSignalFull(OAIHttpRequestWorker *worker);
    void siteVerification_webResource_getSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_getTokenSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceGettokenResponse summary);
    void siteVerification_webResource_insertSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_listSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceListResponse summary);
    void siteVerification_webResource_patchSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceResource summary);
    void siteVerification_webResource_updateSignalFull(OAIHttpRequestWorker *worker, OAISiteVerificationWebResourceResource summary);

    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_deleteSignalError() instead")
    void siteVerification_webResource_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_getSignalError() instead")
    void siteVerification_webResource_getSignalE(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_getSignalError(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_getTokenSignalError() instead")
    void siteVerification_webResource_getTokenSignalE(OAISiteVerificationWebResourceGettokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_getTokenSignalError(OAISiteVerificationWebResourceGettokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_insertSignalError() instead")
    void siteVerification_webResource_insertSignalE(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_insertSignalError(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_listSignalError() instead")
    void siteVerification_webResource_listSignalE(OAISiteVerificationWebResourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_listSignalError(OAISiteVerificationWebResourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_patchSignalError() instead")
    void siteVerification_webResource_patchSignalE(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_patchSignalError(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_updateSignalError() instead")
    void siteVerification_webResource_updateSignalE(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_updateSignalError(OAISiteVerificationWebResourceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_deleteSignalErrorFull() instead")
    void siteVerification_webResource_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_getSignalErrorFull() instead")
    void siteVerification_webResource_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_getTokenSignalErrorFull() instead")
    void siteVerification_webResource_getTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_getTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_insertSignalErrorFull() instead")
    void siteVerification_webResource_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_listSignalErrorFull() instead")
    void siteVerification_webResource_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_patchSignalErrorFull() instead")
    void siteVerification_webResource_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use siteVerification_webResource_updateSignalErrorFull() instead")
    void siteVerification_webResource_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void siteVerification_webResource_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
