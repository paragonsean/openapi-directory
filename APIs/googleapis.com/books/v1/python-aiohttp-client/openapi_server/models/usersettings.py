# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usersettings_notes_export import UsersettingsNotesExport
from openapi_server.models.usersettings_notification import UsersettingsNotification
from openapi_server import util


class Usersettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, notes_export: UsersettingsNotesExport=None, notification: UsersettingsNotification=None):
        """Usersettings - a model defined in OpenAPI

        :param kind: The kind of this Usersettings.
        :param notes_export: The notes_export of this Usersettings.
        :param notification: The notification of this Usersettings.
        """
        self.openapi_types = {
            'kind': str,
            'notes_export': UsersettingsNotesExport,
            'notification': UsersettingsNotification
        }

        self.attribute_map = {
            'kind': 'kind',
            'notes_export': 'notesExport',
            'notification': 'notification'
        }

        self._kind = kind
        self._notes_export = notes_export
        self._notification = notification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Usersettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Usersettings of this Usersettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this Usersettings.

        Resource type.

        :return: The kind of this Usersettings.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Usersettings.

        Resource type.

        :param kind: The kind of this Usersettings.
        :type kind: str
        """

        self._kind = kind

    @property
    def notes_export(self):
        """Gets the notes_export of this Usersettings.


        :return: The notes_export of this Usersettings.
        :rtype: UsersettingsNotesExport
        """
        return self._notes_export

    @notes_export.setter
    def notes_export(self, notes_export):
        """Sets the notes_export of this Usersettings.


        :param notes_export: The notes_export of this Usersettings.
        :type notes_export: UsersettingsNotesExport
        """

        self._notes_export = notes_export

    @property
    def notification(self):
        """Gets the notification of this Usersettings.


        :return: The notification of this Usersettings.
        :rtype: UsersettingsNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Usersettings.


        :param notification: The notification of this Usersettings.
        :type notification: UsersettingsNotification
        """

        self._notification = notification
