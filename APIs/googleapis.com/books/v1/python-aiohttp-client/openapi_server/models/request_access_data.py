# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.concurrent_access_restriction import ConcurrentAccessRestriction
from openapi_server.models.download_access_restriction import DownloadAccessRestriction
from openapi_server import util


class RequestAccessData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_access: ConcurrentAccessRestriction=None, download_access: DownloadAccessRestriction=None, kind: str=None):
        """RequestAccessData - a model defined in OpenAPI

        :param concurrent_access: The concurrent_access of this RequestAccessData.
        :param download_access: The download_access of this RequestAccessData.
        :param kind: The kind of this RequestAccessData.
        """
        self.openapi_types = {
            'concurrent_access': ConcurrentAccessRestriction,
            'download_access': DownloadAccessRestriction,
            'kind': str
        }

        self.attribute_map = {
            'concurrent_access': 'concurrentAccess',
            'download_access': 'downloadAccess',
            'kind': 'kind'
        }

        self._concurrent_access = concurrent_access
        self._download_access = download_access
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestAccessData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestAccessData of this RequestAccessData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_access(self):
        """Gets the concurrent_access of this RequestAccessData.


        :return: The concurrent_access of this RequestAccessData.
        :rtype: ConcurrentAccessRestriction
        """
        return self._concurrent_access

    @concurrent_access.setter
    def concurrent_access(self, concurrent_access):
        """Sets the concurrent_access of this RequestAccessData.


        :param concurrent_access: The concurrent_access of this RequestAccessData.
        :type concurrent_access: ConcurrentAccessRestriction
        """

        self._concurrent_access = concurrent_access

    @property
    def download_access(self):
        """Gets the download_access of this RequestAccessData.


        :return: The download_access of this RequestAccessData.
        :rtype: DownloadAccessRestriction
        """
        return self._download_access

    @download_access.setter
    def download_access(self, download_access):
        """Sets the download_access of this RequestAccessData.


        :param download_access: The download_access of this RequestAccessData.
        :type download_access: DownloadAccessRestriction
        """

        self._download_access = download_access

    @property
    def kind(self):
        """Gets the kind of this RequestAccessData.

        Resource type.

        :return: The kind of this RequestAccessData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RequestAccessData.

        Resource type.

        :param kind: The kind of this RequestAccessData.
        :type kind: str
        """

        self._kind = kind
