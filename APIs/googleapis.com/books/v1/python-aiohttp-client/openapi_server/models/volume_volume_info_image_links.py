# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeVolumeInfoImageLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extra_large: str=None, large: str=None, medium: str=None, small: str=None, small_thumbnail: str=None, thumbnail: str=None):
        """VolumeVolumeInfoImageLinks - a model defined in OpenAPI

        :param extra_large: The extra_large of this VolumeVolumeInfoImageLinks.
        :param large: The large of this VolumeVolumeInfoImageLinks.
        :param medium: The medium of this VolumeVolumeInfoImageLinks.
        :param small: The small of this VolumeVolumeInfoImageLinks.
        :param small_thumbnail: The small_thumbnail of this VolumeVolumeInfoImageLinks.
        :param thumbnail: The thumbnail of this VolumeVolumeInfoImageLinks.
        """
        self.openapi_types = {
            'extra_large': str,
            'large': str,
            'medium': str,
            'small': str,
            'small_thumbnail': str,
            'thumbnail': str
        }

        self.attribute_map = {
            'extra_large': 'extraLarge',
            'large': 'large',
            'medium': 'medium',
            'small': 'small',
            'small_thumbnail': 'smallThumbnail',
            'thumbnail': 'thumbnail'
        }

        self._extra_large = extra_large
        self._large = large
        self._medium = medium
        self._small = small
        self._small_thumbnail = small_thumbnail
        self._thumbnail = thumbnail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeVolumeInfoImageLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_volumeInfo_imageLinks of this VolumeVolumeInfoImageLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extra_large(self):
        """Gets the extra_large of this VolumeVolumeInfoImageLinks.

        Image link for extra large size (width of ~1280 pixels). (In LITE projection)

        :return: The extra_large of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._extra_large

    @extra_large.setter
    def extra_large(self, extra_large):
        """Sets the extra_large of this VolumeVolumeInfoImageLinks.

        Image link for extra large size (width of ~1280 pixels). (In LITE projection)

        :param extra_large: The extra_large of this VolumeVolumeInfoImageLinks.
        :type extra_large: str
        """

        self._extra_large = extra_large

    @property
    def large(self):
        """Gets the large of this VolumeVolumeInfoImageLinks.

        Image link for large size (width of ~800 pixels). (In LITE projection)

        :return: The large of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._large

    @large.setter
    def large(self, large):
        """Sets the large of this VolumeVolumeInfoImageLinks.

        Image link for large size (width of ~800 pixels). (In LITE projection)

        :param large: The large of this VolumeVolumeInfoImageLinks.
        :type large: str
        """

        self._large = large

    @property
    def medium(self):
        """Gets the medium of this VolumeVolumeInfoImageLinks.

        Image link for medium size (width of ~575 pixels). (In LITE projection)

        :return: The medium of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this VolumeVolumeInfoImageLinks.

        Image link for medium size (width of ~575 pixels). (In LITE projection)

        :param medium: The medium of this VolumeVolumeInfoImageLinks.
        :type medium: str
        """

        self._medium = medium

    @property
    def small(self):
        """Gets the small of this VolumeVolumeInfoImageLinks.

        Image link for small size (width of ~300 pixels). (In LITE projection)

        :return: The small of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this VolumeVolumeInfoImageLinks.

        Image link for small size (width of ~300 pixels). (In LITE projection)

        :param small: The small of this VolumeVolumeInfoImageLinks.
        :type small: str
        """

        self._small = small

    @property
    def small_thumbnail(self):
        """Gets the small_thumbnail of this VolumeVolumeInfoImageLinks.

        Image link for small thumbnail size (width of ~80 pixels). (In LITE projection)

        :return: The small_thumbnail of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._small_thumbnail

    @small_thumbnail.setter
    def small_thumbnail(self, small_thumbnail):
        """Sets the small_thumbnail of this VolumeVolumeInfoImageLinks.

        Image link for small thumbnail size (width of ~80 pixels). (In LITE projection)

        :param small_thumbnail: The small_thumbnail of this VolumeVolumeInfoImageLinks.
        :type small_thumbnail: str
        """

        self._small_thumbnail = small_thumbnail

    @property
    def thumbnail(self):
        """Gets the thumbnail of this VolumeVolumeInfoImageLinks.

        Image link for thumbnail size (width of ~128 pixels). (In LITE projection)

        :return: The thumbnail of this VolumeVolumeInfoImageLinks.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this VolumeVolumeInfoImageLinks.

        Image link for thumbnail size (width of ~128 pixels). (In LITE projection)

        :param thumbnail: The thumbnail of this VolumeVolumeInfoImageLinks.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail
