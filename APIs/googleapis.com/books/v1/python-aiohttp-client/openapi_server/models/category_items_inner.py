# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoryItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge_url: str=None, category_id: str=None, name: str=None):
        """CategoryItemsInner - a model defined in OpenAPI

        :param badge_url: The badge_url of this CategoryItemsInner.
        :param category_id: The category_id of this CategoryItemsInner.
        :param name: The name of this CategoryItemsInner.
        """
        self.openapi_types = {
            'badge_url': str,
            'category_id': str,
            'name': str
        }

        self.attribute_map = {
            'badge_url': 'badgeUrl',
            'category_id': 'categoryId',
            'name': 'name'
        }

        self._badge_url = badge_url
        self._category_id = category_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category_items_inner of this CategoryItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge_url(self):
        """Gets the badge_url of this CategoryItemsInner.


        :return: The badge_url of this CategoryItemsInner.
        :rtype: str
        """
        return self._badge_url

    @badge_url.setter
    def badge_url(self, badge_url):
        """Sets the badge_url of this CategoryItemsInner.


        :param badge_url: The badge_url of this CategoryItemsInner.
        :type badge_url: str
        """

        self._badge_url = badge_url

    @property
    def category_id(self):
        """Gets the category_id of this CategoryItemsInner.


        :return: The category_id of this CategoryItemsInner.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CategoryItemsInner.


        :param category_id: The category_id of this CategoryItemsInner.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def name(self):
        """Gets the name of this CategoryItemsInner.


        :return: The name of this CategoryItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryItemsInner.


        :param name: The name of this CategoryItemsInner.
        :type name: str
        """

        self._name = name
