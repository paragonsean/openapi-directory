# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation import Annotation
from openapi_server import util


class Annotations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[Annotation]=None, kind: str=None, next_page_token: str=None, total_items: int=None):
        """Annotations - a model defined in OpenAPI

        :param items: The items of this Annotations.
        :param kind: The kind of this Annotations.
        :param next_page_token: The next_page_token of this Annotations.
        :param total_items: The total_items of this Annotations.
        """
        self.openapi_types = {
            'items': List[Annotation],
            'kind': str,
            'next_page_token': str,
            'total_items': int
        }

        self.attribute_map = {
            'items': 'items',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'total_items': 'totalItems'
        }

        self._items = items
        self._kind = kind
        self._next_page_token = next_page_token
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotations of this Annotations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this Annotations.

        A list of annotations.

        :return: The items of this Annotations.
        :rtype: List[Annotation]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Annotations.

        A list of annotations.

        :param items: The items of this Annotations.
        :type items: List[Annotation]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this Annotations.

        Resource type.

        :return: The kind of this Annotations.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Annotations.

        Resource type.

        :param kind: The kind of this Annotations.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this Annotations.

        Token to pass in for pagination for the next page. This will not be present if this request does not have more results.

        :return: The next_page_token of this Annotations.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this Annotations.

        Token to pass in for pagination for the next page. This will not be present if this request does not have more results.

        :param next_page_token: The next_page_token of this Annotations.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def total_items(self):
        """Gets the total_items of this Annotations.

        Total number of annotations found. This may be greater than the number of notes returned in this response if results have been paginated.

        :return: The total_items of this Annotations.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this Annotations.

        Total number of annotations found. This may be greater than the number of notes returned in this response if results have been paginated.

        :param total_items: The total_items of this Annotations.
        :type total_items: int
        """

        self._total_items = total_items
