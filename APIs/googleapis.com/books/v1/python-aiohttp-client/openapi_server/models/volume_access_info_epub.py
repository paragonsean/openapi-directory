# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeAccessInfoEpub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acs_token_link: str=None, download_link: str=None, is_available: bool=None):
        """VolumeAccessInfoEpub - a model defined in OpenAPI

        :param acs_token_link: The acs_token_link of this VolumeAccessInfoEpub.
        :param download_link: The download_link of this VolumeAccessInfoEpub.
        :param is_available: The is_available of this VolumeAccessInfoEpub.
        """
        self.openapi_types = {
            'acs_token_link': str,
            'download_link': str,
            'is_available': bool
        }

        self.attribute_map = {
            'acs_token_link': 'acsTokenLink',
            'download_link': 'downloadLink',
            'is_available': 'isAvailable'
        }

        self._acs_token_link = acs_token_link
        self._download_link = download_link
        self._is_available = is_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeAccessInfoEpub':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_accessInfo_epub of this VolumeAccessInfoEpub.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acs_token_link(self):
        """Gets the acs_token_link of this VolumeAccessInfoEpub.

        URL to retrieve ACS token for epub download. (In LITE projection.)

        :return: The acs_token_link of this VolumeAccessInfoEpub.
        :rtype: str
        """
        return self._acs_token_link

    @acs_token_link.setter
    def acs_token_link(self, acs_token_link):
        """Sets the acs_token_link of this VolumeAccessInfoEpub.

        URL to retrieve ACS token for epub download. (In LITE projection.)

        :param acs_token_link: The acs_token_link of this VolumeAccessInfoEpub.
        :type acs_token_link: str
        """

        self._acs_token_link = acs_token_link

    @property
    def download_link(self):
        """Gets the download_link of this VolumeAccessInfoEpub.

        URL to download epub. (In LITE projection.)

        :return: The download_link of this VolumeAccessInfoEpub.
        :rtype: str
        """
        return self._download_link

    @download_link.setter
    def download_link(self, download_link):
        """Sets the download_link of this VolumeAccessInfoEpub.

        URL to download epub. (In LITE projection.)

        :param download_link: The download_link of this VolumeAccessInfoEpub.
        :type download_link: str
        """

        self._download_link = download_link

    @property
    def is_available(self):
        """Gets the is_available of this VolumeAccessInfoEpub.

        Is a flowing text epub available either as public domain or for purchase. (In LITE projection.)

        :return: The is_available of this VolumeAccessInfoEpub.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this VolumeAccessInfoEpub.

        Is a flowing text epub available either as public domain or for purchase. (In LITE projection.)

        :param is_available: The is_available of this VolumeAccessInfoEpub.
        :type is_available: bool
        """

        self._is_available = is_available
