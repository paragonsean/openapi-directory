# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geolayerdata import Geolayerdata
from openapi_server import util


class GeoAnnotationdata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_type: str=None, data: Geolayerdata=None, encoded_data: str=None, id: str=None, kind: str=None, layer_id: str=None, self_link: str=None, updated: str=None, volume_id: str=None):
        """GeoAnnotationdata - a model defined in OpenAPI

        :param annotation_type: The annotation_type of this GeoAnnotationdata.
        :param data: The data of this GeoAnnotationdata.
        :param encoded_data: The encoded_data of this GeoAnnotationdata.
        :param id: The id of this GeoAnnotationdata.
        :param kind: The kind of this GeoAnnotationdata.
        :param layer_id: The layer_id of this GeoAnnotationdata.
        :param self_link: The self_link of this GeoAnnotationdata.
        :param updated: The updated of this GeoAnnotationdata.
        :param volume_id: The volume_id of this GeoAnnotationdata.
        """
        self.openapi_types = {
            'annotation_type': str,
            'data': Geolayerdata,
            'encoded_data': str,
            'id': str,
            'kind': str,
            'layer_id': str,
            'self_link': str,
            'updated': str,
            'volume_id': str
        }

        self.attribute_map = {
            'annotation_type': 'annotationType',
            'data': 'data',
            'encoded_data': 'encodedData',
            'id': 'id',
            'kind': 'kind',
            'layer_id': 'layerId',
            'self_link': 'selfLink',
            'updated': 'updated',
            'volume_id': 'volumeId'
        }

        self._annotation_type = annotation_type
        self._data = data
        self._encoded_data = encoded_data
        self._id = id
        self._kind = kind
        self._layer_id = layer_id
        self._self_link = self_link
        self._updated = updated
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoAnnotationdata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoAnnotationdata of this GeoAnnotationdata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_type(self):
        """Gets the annotation_type of this GeoAnnotationdata.

        The type of annotation this data is for.

        :return: The annotation_type of this GeoAnnotationdata.
        :rtype: str
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this GeoAnnotationdata.

        The type of annotation this data is for.

        :param annotation_type: The annotation_type of this GeoAnnotationdata.
        :type annotation_type: str
        """

        self._annotation_type = annotation_type

    @property
    def data(self):
        """Gets the data of this GeoAnnotationdata.


        :return: The data of this GeoAnnotationdata.
        :rtype: Geolayerdata
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GeoAnnotationdata.


        :param data: The data of this GeoAnnotationdata.
        :type data: Geolayerdata
        """

        self._data = data

    @property
    def encoded_data(self):
        """Gets the encoded_data of this GeoAnnotationdata.

        Base64 encoded data for this annotation data.

        :return: The encoded_data of this GeoAnnotationdata.
        :rtype: str
        """
        return self._encoded_data

    @encoded_data.setter
    def encoded_data(self, encoded_data):
        """Sets the encoded_data of this GeoAnnotationdata.

        Base64 encoded data for this annotation data.

        :param encoded_data: The encoded_data of this GeoAnnotationdata.
        :type encoded_data: str
        """

        self._encoded_data = encoded_data

    @property
    def id(self):
        """Gets the id of this GeoAnnotationdata.

        Unique id for this annotation data.

        :return: The id of this GeoAnnotationdata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeoAnnotationdata.

        Unique id for this annotation data.

        :param id: The id of this GeoAnnotationdata.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this GeoAnnotationdata.

        Resource Type

        :return: The kind of this GeoAnnotationdata.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this GeoAnnotationdata.

        Resource Type

        :param kind: The kind of this GeoAnnotationdata.
        :type kind: str
        """

        self._kind = kind

    @property
    def layer_id(self):
        """Gets the layer_id of this GeoAnnotationdata.

        The Layer id for this data. *

        :return: The layer_id of this GeoAnnotationdata.
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this GeoAnnotationdata.

        The Layer id for this data. *

        :param layer_id: The layer_id of this GeoAnnotationdata.
        :type layer_id: str
        """

        self._layer_id = layer_id

    @property
    def self_link(self):
        """Gets the self_link of this GeoAnnotationdata.

        URL for this resource. *

        :return: The self_link of this GeoAnnotationdata.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this GeoAnnotationdata.

        URL for this resource. *

        :param self_link: The self_link of this GeoAnnotationdata.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def updated(self):
        """Gets the updated of this GeoAnnotationdata.

        Timestamp for the last time this data was updated. (RFC 3339 UTC date-time format).

        :return: The updated of this GeoAnnotationdata.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GeoAnnotationdata.

        Timestamp for the last time this data was updated. (RFC 3339 UTC date-time format).

        :param updated: The updated of this GeoAnnotationdata.
        :type updated: str
        """

        self._updated = updated

    @property
    def volume_id(self):
        """Gets the volume_id of this GeoAnnotationdata.

        The volume id for this data. *

        :return: The volume_id of this GeoAnnotationdata.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this GeoAnnotationdata.

        The volume id for this data. *

        :param volume_id: The volume_id of this GeoAnnotationdata.
        :type volume_id: str
        """

        self._volume_id = volume_id
