# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reading_position import ReadingPosition
from openapi_server.models.review import Review
from openapi_server.models.volume_user_info_copy import VolumeUserInfoCopy
from openapi_server.models.volume_user_info_family_sharing import VolumeUserInfoFamilySharing
from openapi_server.models.volume_user_info_rental_period import VolumeUserInfoRentalPeriod
from openapi_server.models.volume_user_info_user_uploaded_volume_info import VolumeUserInfoUserUploadedVolumeInfo
from openapi_server import util


class VolumeUserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquired_time: str=None, acquisition_type: int=None, copy: VolumeUserInfoCopy=None, entitlement_type: int=None, family_sharing: VolumeUserInfoFamilySharing=None, is_family_shared_from_user: bool=None, is_family_shared_to_user: bool=None, is_family_sharing_allowed: bool=None, is_family_sharing_disabled_by_fop: bool=None, is_in_my_books: bool=None, is_preordered: bool=None, is_purchased: bool=None, is_uploaded: bool=None, reading_position: ReadingPosition=None, rental_period: VolumeUserInfoRentalPeriod=None, rental_state: str=None, review: Review=None, updated: str=None, user_uploaded_volume_info: VolumeUserInfoUserUploadedVolumeInfo=None):
        """VolumeUserInfo - a model defined in OpenAPI

        :param acquired_time: The acquired_time of this VolumeUserInfo.
        :param acquisition_type: The acquisition_type of this VolumeUserInfo.
        :param copy: The copy of this VolumeUserInfo.
        :param entitlement_type: The entitlement_type of this VolumeUserInfo.
        :param family_sharing: The family_sharing of this VolumeUserInfo.
        :param is_family_shared_from_user: The is_family_shared_from_user of this VolumeUserInfo.
        :param is_family_shared_to_user: The is_family_shared_to_user of this VolumeUserInfo.
        :param is_family_sharing_allowed: The is_family_sharing_allowed of this VolumeUserInfo.
        :param is_family_sharing_disabled_by_fop: The is_family_sharing_disabled_by_fop of this VolumeUserInfo.
        :param is_in_my_books: The is_in_my_books of this VolumeUserInfo.
        :param is_preordered: The is_preordered of this VolumeUserInfo.
        :param is_purchased: The is_purchased of this VolumeUserInfo.
        :param is_uploaded: The is_uploaded of this VolumeUserInfo.
        :param reading_position: The reading_position of this VolumeUserInfo.
        :param rental_period: The rental_period of this VolumeUserInfo.
        :param rental_state: The rental_state of this VolumeUserInfo.
        :param review: The review of this VolumeUserInfo.
        :param updated: The updated of this VolumeUserInfo.
        :param user_uploaded_volume_info: The user_uploaded_volume_info of this VolumeUserInfo.
        """
        self.openapi_types = {
            'acquired_time': str,
            'acquisition_type': int,
            'copy': VolumeUserInfoCopy,
            'entitlement_type': int,
            'family_sharing': VolumeUserInfoFamilySharing,
            'is_family_shared_from_user': bool,
            'is_family_shared_to_user': bool,
            'is_family_sharing_allowed': bool,
            'is_family_sharing_disabled_by_fop': bool,
            'is_in_my_books': bool,
            'is_preordered': bool,
            'is_purchased': bool,
            'is_uploaded': bool,
            'reading_position': ReadingPosition,
            'rental_period': VolumeUserInfoRentalPeriod,
            'rental_state': str,
            'review': Review,
            'updated': str,
            'user_uploaded_volume_info': VolumeUserInfoUserUploadedVolumeInfo
        }

        self.attribute_map = {
            'acquired_time': 'acquiredTime',
            'acquisition_type': 'acquisitionType',
            'copy': 'copy',
            'entitlement_type': 'entitlementType',
            'family_sharing': 'familySharing',
            'is_family_shared_from_user': 'isFamilySharedFromUser',
            'is_family_shared_to_user': 'isFamilySharedToUser',
            'is_family_sharing_allowed': 'isFamilySharingAllowed',
            'is_family_sharing_disabled_by_fop': 'isFamilySharingDisabledByFop',
            'is_in_my_books': 'isInMyBooks',
            'is_preordered': 'isPreordered',
            'is_purchased': 'isPurchased',
            'is_uploaded': 'isUploaded',
            'reading_position': 'readingPosition',
            'rental_period': 'rentalPeriod',
            'rental_state': 'rentalState',
            'review': 'review',
            'updated': 'updated',
            'user_uploaded_volume_info': 'userUploadedVolumeInfo'
        }

        self._acquired_time = acquired_time
        self._acquisition_type = acquisition_type
        self._copy = copy
        self._entitlement_type = entitlement_type
        self._family_sharing = family_sharing
        self._is_family_shared_from_user = is_family_shared_from_user
        self._is_family_shared_to_user = is_family_shared_to_user
        self._is_family_sharing_allowed = is_family_sharing_allowed
        self._is_family_sharing_disabled_by_fop = is_family_sharing_disabled_by_fop
        self._is_in_my_books = is_in_my_books
        self._is_preordered = is_preordered
        self._is_purchased = is_purchased
        self._is_uploaded = is_uploaded
        self._reading_position = reading_position
        self._rental_period = rental_period
        self._rental_state = rental_state
        self._review = review
        self._updated = updated
        self._user_uploaded_volume_info = user_uploaded_volume_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeUserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_userInfo of this VolumeUserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquired_time(self):
        """Gets the acquired_time of this VolumeUserInfo.

        Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.

        :return: The acquired_time of this VolumeUserInfo.
        :rtype: str
        """
        return self._acquired_time

    @acquired_time.setter
    def acquired_time(self, acquired_time):
        """Sets the acquired_time of this VolumeUserInfo.

        Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.

        :param acquired_time: The acquired_time of this VolumeUserInfo.
        :type acquired_time: str
        """

        self._acquired_time = acquired_time

    @property
    def acquisition_type(self):
        """Gets the acquisition_type of this VolumeUserInfo.

        How this volume was acquired.

        :return: The acquisition_type of this VolumeUserInfo.
        :rtype: int
        """
        return self._acquisition_type

    @acquisition_type.setter
    def acquisition_type(self, acquisition_type):
        """Sets the acquisition_type of this VolumeUserInfo.

        How this volume was acquired.

        :param acquisition_type: The acquisition_type of this VolumeUserInfo.
        :type acquisition_type: int
        """

        self._acquisition_type = acquisition_type

    @property
    def copy(self):
        """Gets the copy of this VolumeUserInfo.


        :return: The copy of this VolumeUserInfo.
        :rtype: VolumeUserInfoCopy
        """
        return self._copy

    @copy.setter
    def copy(self, copy):
        """Sets the copy of this VolumeUserInfo.


        :param copy: The copy of this VolumeUserInfo.
        :type copy: VolumeUserInfoCopy
        """

        self._copy = copy

    @property
    def entitlement_type(self):
        """Gets the entitlement_type of this VolumeUserInfo.

        Whether this volume is purchased, sample, pd download etc.

        :return: The entitlement_type of this VolumeUserInfo.
        :rtype: int
        """
        return self._entitlement_type

    @entitlement_type.setter
    def entitlement_type(self, entitlement_type):
        """Sets the entitlement_type of this VolumeUserInfo.

        Whether this volume is purchased, sample, pd download etc.

        :param entitlement_type: The entitlement_type of this VolumeUserInfo.
        :type entitlement_type: int
        """

        self._entitlement_type = entitlement_type

    @property
    def family_sharing(self):
        """Gets the family_sharing of this VolumeUserInfo.


        :return: The family_sharing of this VolumeUserInfo.
        :rtype: VolumeUserInfoFamilySharing
        """
        return self._family_sharing

    @family_sharing.setter
    def family_sharing(self, family_sharing):
        """Sets the family_sharing of this VolumeUserInfo.


        :param family_sharing: The family_sharing of this VolumeUserInfo.
        :type family_sharing: VolumeUserInfoFamilySharing
        """

        self._family_sharing = family_sharing

    @property
    def is_family_shared_from_user(self):
        """Gets the is_family_shared_from_user of this VolumeUserInfo.

        Whether or not the user shared this volume with the family.

        :return: The is_family_shared_from_user of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_family_shared_from_user

    @is_family_shared_from_user.setter
    def is_family_shared_from_user(self, is_family_shared_from_user):
        """Sets the is_family_shared_from_user of this VolumeUserInfo.

        Whether or not the user shared this volume with the family.

        :param is_family_shared_from_user: The is_family_shared_from_user of this VolumeUserInfo.
        :type is_family_shared_from_user: bool
        """

        self._is_family_shared_from_user = is_family_shared_from_user

    @property
    def is_family_shared_to_user(self):
        """Gets the is_family_shared_to_user of this VolumeUserInfo.

        Whether or not the user received this volume through family sharing.

        :return: The is_family_shared_to_user of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_family_shared_to_user

    @is_family_shared_to_user.setter
    def is_family_shared_to_user(self, is_family_shared_to_user):
        """Sets the is_family_shared_to_user of this VolumeUserInfo.

        Whether or not the user received this volume through family sharing.

        :param is_family_shared_to_user: The is_family_shared_to_user of this VolumeUserInfo.
        :type is_family_shared_to_user: bool
        """

        self._is_family_shared_to_user = is_family_shared_to_user

    @property
    def is_family_sharing_allowed(self):
        """Gets the is_family_sharing_allowed of this VolumeUserInfo.

        Deprecated: Replaced by familySharing.

        :return: The is_family_sharing_allowed of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_family_sharing_allowed

    @is_family_sharing_allowed.setter
    def is_family_sharing_allowed(self, is_family_sharing_allowed):
        """Sets the is_family_sharing_allowed of this VolumeUserInfo.

        Deprecated: Replaced by familySharing.

        :param is_family_sharing_allowed: The is_family_sharing_allowed of this VolumeUserInfo.
        :type is_family_sharing_allowed: bool
        """

        self._is_family_sharing_allowed = is_family_sharing_allowed

    @property
    def is_family_sharing_disabled_by_fop(self):
        """Gets the is_family_sharing_disabled_by_fop of this VolumeUserInfo.

        Deprecated: Replaced by familySharing.

        :return: The is_family_sharing_disabled_by_fop of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_family_sharing_disabled_by_fop

    @is_family_sharing_disabled_by_fop.setter
    def is_family_sharing_disabled_by_fop(self, is_family_sharing_disabled_by_fop):
        """Sets the is_family_sharing_disabled_by_fop of this VolumeUserInfo.

        Deprecated: Replaced by familySharing.

        :param is_family_sharing_disabled_by_fop: The is_family_sharing_disabled_by_fop of this VolumeUserInfo.
        :type is_family_sharing_disabled_by_fop: bool
        """

        self._is_family_sharing_disabled_by_fop = is_family_sharing_disabled_by_fop

    @property
    def is_in_my_books(self):
        """Gets the is_in_my_books of this VolumeUserInfo.

        Whether or not this volume is currently in \"my books.\"

        :return: The is_in_my_books of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_in_my_books

    @is_in_my_books.setter
    def is_in_my_books(self, is_in_my_books):
        """Sets the is_in_my_books of this VolumeUserInfo.

        Whether or not this volume is currently in \"my books.\"

        :param is_in_my_books: The is_in_my_books of this VolumeUserInfo.
        :type is_in_my_books: bool
        """

        self._is_in_my_books = is_in_my_books

    @property
    def is_preordered(self):
        """Gets the is_preordered of this VolumeUserInfo.

        Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)

        :return: The is_preordered of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_preordered

    @is_preordered.setter
    def is_preordered(self, is_preordered):
        """Sets the is_preordered of this VolumeUserInfo.

        Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)

        :param is_preordered: The is_preordered of this VolumeUserInfo.
        :type is_preordered: bool
        """

        self._is_preordered = is_preordered

    @property
    def is_purchased(self):
        """Gets the is_purchased of this VolumeUserInfo.

        Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)

        :return: The is_purchased of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_purchased

    @is_purchased.setter
    def is_purchased(self, is_purchased):
        """Sets the is_purchased of this VolumeUserInfo.

        Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)

        :param is_purchased: The is_purchased of this VolumeUserInfo.
        :type is_purchased: bool
        """

        self._is_purchased = is_purchased

    @property
    def is_uploaded(self):
        """Gets the is_uploaded of this VolumeUserInfo.

        Whether or not this volume was user uploaded.

        :return: The is_uploaded of this VolumeUserInfo.
        :rtype: bool
        """
        return self._is_uploaded

    @is_uploaded.setter
    def is_uploaded(self, is_uploaded):
        """Sets the is_uploaded of this VolumeUserInfo.

        Whether or not this volume was user uploaded.

        :param is_uploaded: The is_uploaded of this VolumeUserInfo.
        :type is_uploaded: bool
        """

        self._is_uploaded = is_uploaded

    @property
    def reading_position(self):
        """Gets the reading_position of this VolumeUserInfo.


        :return: The reading_position of this VolumeUserInfo.
        :rtype: ReadingPosition
        """
        return self._reading_position

    @reading_position.setter
    def reading_position(self, reading_position):
        """Sets the reading_position of this VolumeUserInfo.


        :param reading_position: The reading_position of this VolumeUserInfo.
        :type reading_position: ReadingPosition
        """

        self._reading_position = reading_position

    @property
    def rental_period(self):
        """Gets the rental_period of this VolumeUserInfo.


        :return: The rental_period of this VolumeUserInfo.
        :rtype: VolumeUserInfoRentalPeriod
        """
        return self._rental_period

    @rental_period.setter
    def rental_period(self, rental_period):
        """Sets the rental_period of this VolumeUserInfo.


        :param rental_period: The rental_period of this VolumeUserInfo.
        :type rental_period: VolumeUserInfoRentalPeriod
        """

        self._rental_period = rental_period

    @property
    def rental_state(self):
        """Gets the rental_state of this VolumeUserInfo.

        Whether this book is an active or an expired rental.

        :return: The rental_state of this VolumeUserInfo.
        :rtype: str
        """
        return self._rental_state

    @rental_state.setter
    def rental_state(self, rental_state):
        """Sets the rental_state of this VolumeUserInfo.

        Whether this book is an active or an expired rental.

        :param rental_state: The rental_state of this VolumeUserInfo.
        :type rental_state: str
        """

        self._rental_state = rental_state

    @property
    def review(self):
        """Gets the review of this VolumeUserInfo.


        :return: The review of this VolumeUserInfo.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this VolumeUserInfo.


        :param review: The review of this VolumeUserInfo.
        :type review: Review
        """

        self._review = review

    @property
    def updated(self):
        """Gets the updated of this VolumeUserInfo.

        Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).

        :return: The updated of this VolumeUserInfo.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this VolumeUserInfo.

        Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).

        :param updated: The updated of this VolumeUserInfo.
        :type updated: str
        """

        self._updated = updated

    @property
    def user_uploaded_volume_info(self):
        """Gets the user_uploaded_volume_info of this VolumeUserInfo.


        :return: The user_uploaded_volume_info of this VolumeUserInfo.
        :rtype: VolumeUserInfoUserUploadedVolumeInfo
        """
        return self._user_uploaded_volume_info

    @user_uploaded_volume_info.setter
    def user_uploaded_volume_info(self, user_uploaded_volume_info):
        """Sets the user_uploaded_volume_info of this VolumeUserInfo.


        :param user_uploaded_volume_info: The user_uploaded_volume_info of this VolumeUserInfo.
        :type user_uploaded_volume_info: VolumeUserInfoUserUploadedVolumeInfo
        """

        self._user_uploaded_volume_info = user_uploaded_volume_info
