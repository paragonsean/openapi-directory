# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.download_access_restriction import DownloadAccessRestriction
from openapi_server.models.volume_access_info_epub import VolumeAccessInfoEpub
from openapi_server.models.volume_access_info_pdf import VolumeAccessInfoPdf
from openapi_server import util


class VolumeAccessInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_view_status: str=None, country: str=None, download_access: DownloadAccessRestriction=None, drive_imported_content_link: str=None, embeddable: bool=None, epub: VolumeAccessInfoEpub=None, explicit_offline_license_management: bool=None, pdf: VolumeAccessInfoPdf=None, public_domain: bool=None, quote_sharing_allowed: bool=None, text_to_speech_permission: str=None, view_order_url: str=None, viewability: str=None, web_reader_link: str=None):
        """VolumeAccessInfo - a model defined in OpenAPI

        :param access_view_status: The access_view_status of this VolumeAccessInfo.
        :param country: The country of this VolumeAccessInfo.
        :param download_access: The download_access of this VolumeAccessInfo.
        :param drive_imported_content_link: The drive_imported_content_link of this VolumeAccessInfo.
        :param embeddable: The embeddable of this VolumeAccessInfo.
        :param epub: The epub of this VolumeAccessInfo.
        :param explicit_offline_license_management: The explicit_offline_license_management of this VolumeAccessInfo.
        :param pdf: The pdf of this VolumeAccessInfo.
        :param public_domain: The public_domain of this VolumeAccessInfo.
        :param quote_sharing_allowed: The quote_sharing_allowed of this VolumeAccessInfo.
        :param text_to_speech_permission: The text_to_speech_permission of this VolumeAccessInfo.
        :param view_order_url: The view_order_url of this VolumeAccessInfo.
        :param viewability: The viewability of this VolumeAccessInfo.
        :param web_reader_link: The web_reader_link of this VolumeAccessInfo.
        """
        self.openapi_types = {
            'access_view_status': str,
            'country': str,
            'download_access': DownloadAccessRestriction,
            'drive_imported_content_link': str,
            'embeddable': bool,
            'epub': VolumeAccessInfoEpub,
            'explicit_offline_license_management': bool,
            'pdf': VolumeAccessInfoPdf,
            'public_domain': bool,
            'quote_sharing_allowed': bool,
            'text_to_speech_permission': str,
            'view_order_url': str,
            'viewability': str,
            'web_reader_link': str
        }

        self.attribute_map = {
            'access_view_status': 'accessViewStatus',
            'country': 'country',
            'download_access': 'downloadAccess',
            'drive_imported_content_link': 'driveImportedContentLink',
            'embeddable': 'embeddable',
            'epub': 'epub',
            'explicit_offline_license_management': 'explicitOfflineLicenseManagement',
            'pdf': 'pdf',
            'public_domain': 'publicDomain',
            'quote_sharing_allowed': 'quoteSharingAllowed',
            'text_to_speech_permission': 'textToSpeechPermission',
            'view_order_url': 'viewOrderUrl',
            'viewability': 'viewability',
            'web_reader_link': 'webReaderLink'
        }

        self._access_view_status = access_view_status
        self._country = country
        self._download_access = download_access
        self._drive_imported_content_link = drive_imported_content_link
        self._embeddable = embeddable
        self._epub = epub
        self._explicit_offline_license_management = explicit_offline_license_management
        self._pdf = pdf
        self._public_domain = public_domain
        self._quote_sharing_allowed = quote_sharing_allowed
        self._text_to_speech_permission = text_to_speech_permission
        self._view_order_url = view_order_url
        self._viewability = viewability
        self._web_reader_link = web_reader_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeAccessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_accessInfo of this VolumeAccessInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_view_status(self):
        """Gets the access_view_status of this VolumeAccessInfo.

        Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)

        :return: The access_view_status of this VolumeAccessInfo.
        :rtype: str
        """
        return self._access_view_status

    @access_view_status.setter
    def access_view_status(self, access_view_status):
        """Sets the access_view_status of this VolumeAccessInfo.

        Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)

        :param access_view_status: The access_view_status of this VolumeAccessInfo.
        :type access_view_status: str
        """

        self._access_view_status = access_view_status

    @property
    def country(self):
        """Gets the country of this VolumeAccessInfo.

        The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)

        :return: The country of this VolumeAccessInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this VolumeAccessInfo.

        The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)

        :param country: The country of this VolumeAccessInfo.
        :type country: str
        """

        self._country = country

    @property
    def download_access(self):
        """Gets the download_access of this VolumeAccessInfo.


        :return: The download_access of this VolumeAccessInfo.
        :rtype: DownloadAccessRestriction
        """
        return self._download_access

    @download_access.setter
    def download_access(self, download_access):
        """Sets the download_access of this VolumeAccessInfo.


        :param download_access: The download_access of this VolumeAccessInfo.
        :type download_access: DownloadAccessRestriction
        """

        self._download_access = download_access

    @property
    def drive_imported_content_link(self):
        """Gets the drive_imported_content_link of this VolumeAccessInfo.

        URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.

        :return: The drive_imported_content_link of this VolumeAccessInfo.
        :rtype: str
        """
        return self._drive_imported_content_link

    @drive_imported_content_link.setter
    def drive_imported_content_link(self, drive_imported_content_link):
        """Sets the drive_imported_content_link of this VolumeAccessInfo.

        URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.

        :param drive_imported_content_link: The drive_imported_content_link of this VolumeAccessInfo.
        :type drive_imported_content_link: str
        """

        self._drive_imported_content_link = drive_imported_content_link

    @property
    def embeddable(self):
        """Gets the embeddable of this VolumeAccessInfo.

        Whether this volume can be embedded in a viewport using the Embedded Viewer API.

        :return: The embeddable of this VolumeAccessInfo.
        :rtype: bool
        """
        return self._embeddable

    @embeddable.setter
    def embeddable(self, embeddable):
        """Sets the embeddable of this VolumeAccessInfo.

        Whether this volume can be embedded in a viewport using the Embedded Viewer API.

        :param embeddable: The embeddable of this VolumeAccessInfo.
        :type embeddable: bool
        """

        self._embeddable = embeddable

    @property
    def epub(self):
        """Gets the epub of this VolumeAccessInfo.


        :return: The epub of this VolumeAccessInfo.
        :rtype: VolumeAccessInfoEpub
        """
        return self._epub

    @epub.setter
    def epub(self, epub):
        """Sets the epub of this VolumeAccessInfo.


        :param epub: The epub of this VolumeAccessInfo.
        :type epub: VolumeAccessInfoEpub
        """

        self._epub = epub

    @property
    def explicit_offline_license_management(self):
        """Gets the explicit_offline_license_management of this VolumeAccessInfo.

        Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.

        :return: The explicit_offline_license_management of this VolumeAccessInfo.
        :rtype: bool
        """
        return self._explicit_offline_license_management

    @explicit_offline_license_management.setter
    def explicit_offline_license_management(self, explicit_offline_license_management):
        """Sets the explicit_offline_license_management of this VolumeAccessInfo.

        Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.

        :param explicit_offline_license_management: The explicit_offline_license_management of this VolumeAccessInfo.
        :type explicit_offline_license_management: bool
        """

        self._explicit_offline_license_management = explicit_offline_license_management

    @property
    def pdf(self):
        """Gets the pdf of this VolumeAccessInfo.


        :return: The pdf of this VolumeAccessInfo.
        :rtype: VolumeAccessInfoPdf
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this VolumeAccessInfo.


        :param pdf: The pdf of this VolumeAccessInfo.
        :type pdf: VolumeAccessInfoPdf
        """

        self._pdf = pdf

    @property
    def public_domain(self):
        """Gets the public_domain of this VolumeAccessInfo.

        Whether or not this book is public domain in the country listed above.

        :return: The public_domain of this VolumeAccessInfo.
        :rtype: bool
        """
        return self._public_domain

    @public_domain.setter
    def public_domain(self, public_domain):
        """Sets the public_domain of this VolumeAccessInfo.

        Whether or not this book is public domain in the country listed above.

        :param public_domain: The public_domain of this VolumeAccessInfo.
        :type public_domain: bool
        """

        self._public_domain = public_domain

    @property
    def quote_sharing_allowed(self):
        """Gets the quote_sharing_allowed of this VolumeAccessInfo.

        Whether quote sharing is allowed for this volume.

        :return: The quote_sharing_allowed of this VolumeAccessInfo.
        :rtype: bool
        """
        return self._quote_sharing_allowed

    @quote_sharing_allowed.setter
    def quote_sharing_allowed(self, quote_sharing_allowed):
        """Sets the quote_sharing_allowed of this VolumeAccessInfo.

        Whether quote sharing is allowed for this volume.

        :param quote_sharing_allowed: The quote_sharing_allowed of this VolumeAccessInfo.
        :type quote_sharing_allowed: bool
        """

        self._quote_sharing_allowed = quote_sharing_allowed

    @property
    def text_to_speech_permission(self):
        """Gets the text_to_speech_permission of this VolumeAccessInfo.

        Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.

        :return: The text_to_speech_permission of this VolumeAccessInfo.
        :rtype: str
        """
        return self._text_to_speech_permission

    @text_to_speech_permission.setter
    def text_to_speech_permission(self, text_to_speech_permission):
        """Sets the text_to_speech_permission of this VolumeAccessInfo.

        Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.

        :param text_to_speech_permission: The text_to_speech_permission of this VolumeAccessInfo.
        :type text_to_speech_permission: str
        """

        self._text_to_speech_permission = text_to_speech_permission

    @property
    def view_order_url(self):
        """Gets the view_order_url of this VolumeAccessInfo.

        For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.

        :return: The view_order_url of this VolumeAccessInfo.
        :rtype: str
        """
        return self._view_order_url

    @view_order_url.setter
    def view_order_url(self, view_order_url):
        """Sets the view_order_url of this VolumeAccessInfo.

        For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.

        :param view_order_url: The view_order_url of this VolumeAccessInfo.
        :type view_order_url: str
        """

        self._view_order_url = view_order_url

    @property
    def viewability(self):
        """Gets the viewability of this VolumeAccessInfo.

        The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.

        :return: The viewability of this VolumeAccessInfo.
        :rtype: str
        """
        return self._viewability

    @viewability.setter
    def viewability(self, viewability):
        """Sets the viewability of this VolumeAccessInfo.

        The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.

        :param viewability: The viewability of this VolumeAccessInfo.
        :type viewability: str
        """

        self._viewability = viewability

    @property
    def web_reader_link(self):
        """Gets the web_reader_link of this VolumeAccessInfo.

        URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.

        :return: The web_reader_link of this VolumeAccessInfo.
        :rtype: str
        """
        return self._web_reader_link

    @web_reader_link.setter
    def web_reader_link(self, web_reader_link):
        """Sets the web_reader_link of this VolumeAccessInfo.

        URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.

        :param web_reader_link: The web_reader_link of this VolumeAccessInfo.
        :type web_reader_link: str
        """

        self._web_reader_link = web_reader_link
