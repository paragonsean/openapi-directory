# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volumeseriesinfo_volume_series_inner_issue_inner import VolumeseriesinfoVolumeSeriesInnerIssueInner
from openapi_server import util


class VolumeseriesinfoVolumeSeriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue: List[VolumeseriesinfoVolumeSeriesInnerIssueInner]=None, order_number: int=None, series_book_type: str=None, series_id: str=None):
        """VolumeseriesinfoVolumeSeriesInner - a model defined in OpenAPI

        :param issue: The issue of this VolumeseriesinfoVolumeSeriesInner.
        :param order_number: The order_number of this VolumeseriesinfoVolumeSeriesInner.
        :param series_book_type: The series_book_type of this VolumeseriesinfoVolumeSeriesInner.
        :param series_id: The series_id of this VolumeseriesinfoVolumeSeriesInner.
        """
        self.openapi_types = {
            'issue': List[VolumeseriesinfoVolumeSeriesInnerIssueInner],
            'order_number': int,
            'series_book_type': str,
            'series_id': str
        }

        self.attribute_map = {
            'issue': 'issue',
            'order_number': 'orderNumber',
            'series_book_type': 'seriesBookType',
            'series_id': 'seriesId'
        }

        self._issue = issue
        self._order_number = order_number
        self._series_book_type = series_book_type
        self._series_id = series_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeseriesinfoVolumeSeriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volumeseriesinfo_volumeSeries_inner of this VolumeseriesinfoVolumeSeriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue(self):
        """Gets the issue of this VolumeseriesinfoVolumeSeriesInner.

        List of issues. Applicable only for Collection Edition and Omnibus.

        :return: The issue of this VolumeseriesinfoVolumeSeriesInner.
        :rtype: List[VolumeseriesinfoVolumeSeriesInnerIssueInner]
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this VolumeseriesinfoVolumeSeriesInner.

        List of issues. Applicable only for Collection Edition and Omnibus.

        :param issue: The issue of this VolumeseriesinfoVolumeSeriesInner.
        :type issue: List[VolumeseriesinfoVolumeSeriesInnerIssueInner]
        """

        self._issue = issue

    @property
    def order_number(self):
        """Gets the order_number of this VolumeseriesinfoVolumeSeriesInner.

        The book order number in the series.

        :return: The order_number of this VolumeseriesinfoVolumeSeriesInner.
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this VolumeseriesinfoVolumeSeriesInner.

        The book order number in the series.

        :param order_number: The order_number of this VolumeseriesinfoVolumeSeriesInner.
        :type order_number: int
        """

        self._order_number = order_number

    @property
    def series_book_type(self):
        """Gets the series_book_type of this VolumeseriesinfoVolumeSeriesInner.

        The book type in the context of series. Examples - Single Issue, Collection Edition, etc.

        :return: The series_book_type of this VolumeseriesinfoVolumeSeriesInner.
        :rtype: str
        """
        return self._series_book_type

    @series_book_type.setter
    def series_book_type(self, series_book_type):
        """Sets the series_book_type of this VolumeseriesinfoVolumeSeriesInner.

        The book type in the context of series. Examples - Single Issue, Collection Edition, etc.

        :param series_book_type: The series_book_type of this VolumeseriesinfoVolumeSeriesInner.
        :type series_book_type: str
        """

        self._series_book_type = series_book_type

    @property
    def series_id(self):
        """Gets the series_id of this VolumeseriesinfoVolumeSeriesInner.

        The series id.

        :return: The series_id of this VolumeseriesinfoVolumeSeriesInner.
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this VolumeseriesinfoVolumeSeriesInner.

        The series id.

        :param series_id: The series_id of this VolumeseriesinfoVolumeSeriesInner.
        :type series_id: str
        """

        self._series_id = series_id
