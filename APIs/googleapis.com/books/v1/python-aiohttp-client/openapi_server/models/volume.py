# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_access_info import VolumeAccessInfo
from openapi_server.models.volume_layer_info import VolumeLayerInfo
from openapi_server.models.volume_recommended_info import VolumeRecommendedInfo
from openapi_server.models.volume_sale_info import VolumeSaleInfo
from openapi_server.models.volume_search_info import VolumeSearchInfo
from openapi_server.models.volume_user_info import VolumeUserInfo
from openapi_server.models.volume_volume_info import VolumeVolumeInfo
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_info: VolumeAccessInfo=None, etag: str=None, id: str=None, kind: str=None, layer_info: VolumeLayerInfo=None, recommended_info: VolumeRecommendedInfo=None, sale_info: VolumeSaleInfo=None, search_info: VolumeSearchInfo=None, self_link: str=None, user_info: VolumeUserInfo=None, volume_info: VolumeVolumeInfo=None):
        """Volume - a model defined in OpenAPI

        :param access_info: The access_info of this Volume.
        :param etag: The etag of this Volume.
        :param id: The id of this Volume.
        :param kind: The kind of this Volume.
        :param layer_info: The layer_info of this Volume.
        :param recommended_info: The recommended_info of this Volume.
        :param sale_info: The sale_info of this Volume.
        :param search_info: The search_info of this Volume.
        :param self_link: The self_link of this Volume.
        :param user_info: The user_info of this Volume.
        :param volume_info: The volume_info of this Volume.
        """
        self.openapi_types = {
            'access_info': VolumeAccessInfo,
            'etag': str,
            'id': str,
            'kind': str,
            'layer_info': VolumeLayerInfo,
            'recommended_info': VolumeRecommendedInfo,
            'sale_info': VolumeSaleInfo,
            'search_info': VolumeSearchInfo,
            'self_link': str,
            'user_info': VolumeUserInfo,
            'volume_info': VolumeVolumeInfo
        }

        self.attribute_map = {
            'access_info': 'accessInfo',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'layer_info': 'layerInfo',
            'recommended_info': 'recommendedInfo',
            'sale_info': 'saleInfo',
            'search_info': 'searchInfo',
            'self_link': 'selfLink',
            'user_info': 'userInfo',
            'volume_info': 'volumeInfo'
        }

        self._access_info = access_info
        self._etag = etag
        self._id = id
        self._kind = kind
        self._layer_info = layer_info
        self._recommended_info = recommended_info
        self._sale_info = sale_info
        self._search_info = search_info
        self._self_link = self_link
        self._user_info = user_info
        self._volume_info = volume_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_info(self):
        """Gets the access_info of this Volume.


        :return: The access_info of this Volume.
        :rtype: VolumeAccessInfo
        """
        return self._access_info

    @access_info.setter
    def access_info(self, access_info):
        """Sets the access_info of this Volume.


        :param access_info: The access_info of this Volume.
        :type access_info: VolumeAccessInfo
        """

        self._access_info = access_info

    @property
    def etag(self):
        """Gets the etag of this Volume.

        Opaque identifier for a specific version of a volume resource. (In LITE projection)

        :return: The etag of this Volume.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Volume.

        Opaque identifier for a specific version of a volume resource. (In LITE projection)

        :param etag: The etag of this Volume.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Volume.

        Unique identifier for a volume. (In LITE projection.)

        :return: The id of this Volume.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.

        Unique identifier for a volume. (In LITE projection.)

        :param id: The id of this Volume.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Volume.

        Resource type for a volume. (In LITE projection.)

        :return: The kind of this Volume.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Volume.

        Resource type for a volume. (In LITE projection.)

        :param kind: The kind of this Volume.
        :type kind: str
        """

        self._kind = kind

    @property
    def layer_info(self):
        """Gets the layer_info of this Volume.


        :return: The layer_info of this Volume.
        :rtype: VolumeLayerInfo
        """
        return self._layer_info

    @layer_info.setter
    def layer_info(self, layer_info):
        """Sets the layer_info of this Volume.


        :param layer_info: The layer_info of this Volume.
        :type layer_info: VolumeLayerInfo
        """

        self._layer_info = layer_info

    @property
    def recommended_info(self):
        """Gets the recommended_info of this Volume.


        :return: The recommended_info of this Volume.
        :rtype: VolumeRecommendedInfo
        """
        return self._recommended_info

    @recommended_info.setter
    def recommended_info(self, recommended_info):
        """Sets the recommended_info of this Volume.


        :param recommended_info: The recommended_info of this Volume.
        :type recommended_info: VolumeRecommendedInfo
        """

        self._recommended_info = recommended_info

    @property
    def sale_info(self):
        """Gets the sale_info of this Volume.


        :return: The sale_info of this Volume.
        :rtype: VolumeSaleInfo
        """
        return self._sale_info

    @sale_info.setter
    def sale_info(self, sale_info):
        """Sets the sale_info of this Volume.


        :param sale_info: The sale_info of this Volume.
        :type sale_info: VolumeSaleInfo
        """

        self._sale_info = sale_info

    @property
    def search_info(self):
        """Gets the search_info of this Volume.


        :return: The search_info of this Volume.
        :rtype: VolumeSearchInfo
        """
        return self._search_info

    @search_info.setter
    def search_info(self, search_info):
        """Sets the search_info of this Volume.


        :param search_info: The search_info of this Volume.
        :type search_info: VolumeSearchInfo
        """

        self._search_info = search_info

    @property
    def self_link(self):
        """Gets the self_link of this Volume.

        URL to this resource. (In LITE projection.)

        :return: The self_link of this Volume.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Volume.

        URL to this resource. (In LITE projection.)

        :param self_link: The self_link of this Volume.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def user_info(self):
        """Gets the user_info of this Volume.


        :return: The user_info of this Volume.
        :rtype: VolumeUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this Volume.


        :param user_info: The user_info of this Volume.
        :type user_info: VolumeUserInfo
        """

        self._user_info = user_info

    @property
    def volume_info(self):
        """Gets the volume_info of this Volume.


        :return: The volume_info of this Volume.
        :rtype: VolumeVolumeInfo
        """
        return self._volume_info

    @volume_info.setter
    def volume_info(self, volume_info):
        """Sets the volume_info of this Volume.


        :param volume_info: The volume_info of this Volume.
        :type volume_info: VolumeVolumeInfo
        """

        self._volume_info = volume_info
