# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volumeannotation_content_ranges import VolumeannotationContentRanges
from openapi_server import util


class Volumeannotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_data_id: str=None, annotation_data_link: str=None, annotation_type: str=None, content_ranges: VolumeannotationContentRanges=None, data: str=None, deleted: bool=None, id: str=None, kind: str=None, layer_id: str=None, page_ids: List[str]=None, selected_text: str=None, self_link: str=None, updated: str=None, volume_id: str=None):
        """Volumeannotation - a model defined in OpenAPI

        :param annotation_data_id: The annotation_data_id of this Volumeannotation.
        :param annotation_data_link: The annotation_data_link of this Volumeannotation.
        :param annotation_type: The annotation_type of this Volumeannotation.
        :param content_ranges: The content_ranges of this Volumeannotation.
        :param data: The data of this Volumeannotation.
        :param deleted: The deleted of this Volumeannotation.
        :param id: The id of this Volumeannotation.
        :param kind: The kind of this Volumeannotation.
        :param layer_id: The layer_id of this Volumeannotation.
        :param page_ids: The page_ids of this Volumeannotation.
        :param selected_text: The selected_text of this Volumeannotation.
        :param self_link: The self_link of this Volumeannotation.
        :param updated: The updated of this Volumeannotation.
        :param volume_id: The volume_id of this Volumeannotation.
        """
        self.openapi_types = {
            'annotation_data_id': str,
            'annotation_data_link': str,
            'annotation_type': str,
            'content_ranges': VolumeannotationContentRanges,
            'data': str,
            'deleted': bool,
            'id': str,
            'kind': str,
            'layer_id': str,
            'page_ids': List[str],
            'selected_text': str,
            'self_link': str,
            'updated': str,
            'volume_id': str
        }

        self.attribute_map = {
            'annotation_data_id': 'annotationDataId',
            'annotation_data_link': 'annotationDataLink',
            'annotation_type': 'annotationType',
            'content_ranges': 'contentRanges',
            'data': 'data',
            'deleted': 'deleted',
            'id': 'id',
            'kind': 'kind',
            'layer_id': 'layerId',
            'page_ids': 'pageIds',
            'selected_text': 'selectedText',
            'self_link': 'selfLink',
            'updated': 'updated',
            'volume_id': 'volumeId'
        }

        self._annotation_data_id = annotation_data_id
        self._annotation_data_link = annotation_data_link
        self._annotation_type = annotation_type
        self._content_ranges = content_ranges
        self._data = data
        self._deleted = deleted
        self._id = id
        self._kind = kind
        self._layer_id = layer_id
        self._page_ids = page_ids
        self._selected_text = selected_text
        self._self_link = self_link
        self._updated = updated
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volumeannotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volumeannotation of this Volumeannotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_data_id(self):
        """Gets the annotation_data_id of this Volumeannotation.

        The annotation data id for this volume annotation.

        :return: The annotation_data_id of this Volumeannotation.
        :rtype: str
        """
        return self._annotation_data_id

    @annotation_data_id.setter
    def annotation_data_id(self, annotation_data_id):
        """Sets the annotation_data_id of this Volumeannotation.

        The annotation data id for this volume annotation.

        :param annotation_data_id: The annotation_data_id of this Volumeannotation.
        :type annotation_data_id: str
        """

        self._annotation_data_id = annotation_data_id

    @property
    def annotation_data_link(self):
        """Gets the annotation_data_link of this Volumeannotation.

        Link to get data for this annotation.

        :return: The annotation_data_link of this Volumeannotation.
        :rtype: str
        """
        return self._annotation_data_link

    @annotation_data_link.setter
    def annotation_data_link(self, annotation_data_link):
        """Sets the annotation_data_link of this Volumeannotation.

        Link to get data for this annotation.

        :param annotation_data_link: The annotation_data_link of this Volumeannotation.
        :type annotation_data_link: str
        """

        self._annotation_data_link = annotation_data_link

    @property
    def annotation_type(self):
        """Gets the annotation_type of this Volumeannotation.

        The type of annotation this is.

        :return: The annotation_type of this Volumeannotation.
        :rtype: str
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this Volumeannotation.

        The type of annotation this is.

        :param annotation_type: The annotation_type of this Volumeannotation.
        :type annotation_type: str
        """

        self._annotation_type = annotation_type

    @property
    def content_ranges(self):
        """Gets the content_ranges of this Volumeannotation.


        :return: The content_ranges of this Volumeannotation.
        :rtype: VolumeannotationContentRanges
        """
        return self._content_ranges

    @content_ranges.setter
    def content_ranges(self, content_ranges):
        """Sets the content_ranges of this Volumeannotation.


        :param content_ranges: The content_ranges of this Volumeannotation.
        :type content_ranges: VolumeannotationContentRanges
        """

        self._content_ranges = content_ranges

    @property
    def data(self):
        """Gets the data of this Volumeannotation.

        Data for this annotation.

        :return: The data of this Volumeannotation.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Volumeannotation.

        Data for this annotation.

        :param data: The data of this Volumeannotation.
        :type data: str
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this Volumeannotation.

        Indicates that this annotation is deleted.

        :return: The deleted of this Volumeannotation.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Volumeannotation.

        Indicates that this annotation is deleted.

        :param deleted: The deleted of this Volumeannotation.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Volumeannotation.

        Unique id of this volume annotation.

        :return: The id of this Volumeannotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volumeannotation.

        Unique id of this volume annotation.

        :param id: The id of this Volumeannotation.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Volumeannotation.

        Resource Type

        :return: The kind of this Volumeannotation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Volumeannotation.

        Resource Type

        :param kind: The kind of this Volumeannotation.
        :type kind: str
        """

        self._kind = kind

    @property
    def layer_id(self):
        """Gets the layer_id of this Volumeannotation.

        The Layer this annotation is for.

        :return: The layer_id of this Volumeannotation.
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this Volumeannotation.

        The Layer this annotation is for.

        :param layer_id: The layer_id of this Volumeannotation.
        :type layer_id: str
        """

        self._layer_id = layer_id

    @property
    def page_ids(self):
        """Gets the page_ids of this Volumeannotation.

        Pages the annotation spans.

        :return: The page_ids of this Volumeannotation.
        :rtype: List[str]
        """
        return self._page_ids

    @page_ids.setter
    def page_ids(self, page_ids):
        """Sets the page_ids of this Volumeannotation.

        Pages the annotation spans.

        :param page_ids: The page_ids of this Volumeannotation.
        :type page_ids: List[str]
        """

        self._page_ids = page_ids

    @property
    def selected_text(self):
        """Gets the selected_text of this Volumeannotation.

        Excerpt from the volume.

        :return: The selected_text of this Volumeannotation.
        :rtype: str
        """
        return self._selected_text

    @selected_text.setter
    def selected_text(self, selected_text):
        """Sets the selected_text of this Volumeannotation.

        Excerpt from the volume.

        :param selected_text: The selected_text of this Volumeannotation.
        :type selected_text: str
        """

        self._selected_text = selected_text

    @property
    def self_link(self):
        """Gets the self_link of this Volumeannotation.

        URL to this resource.

        :return: The self_link of this Volumeannotation.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Volumeannotation.

        URL to this resource.

        :param self_link: The self_link of this Volumeannotation.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def updated(self):
        """Gets the updated of this Volumeannotation.

        Timestamp for the last time this anntoation was updated. (RFC 3339 UTC date-time format).

        :return: The updated of this Volumeannotation.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Volumeannotation.

        Timestamp for the last time this anntoation was updated. (RFC 3339 UTC date-time format).

        :param updated: The updated of this Volumeannotation.
        :type updated: str
        """

        self._updated = updated

    @property
    def volume_id(self):
        """Gets the volume_id of this Volumeannotation.

        The Volume this annotation is for.

        :return: The volume_id of this Volumeannotation.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this Volumeannotation.

        The Volume this annotation is for.

        :param volume_id: The volume_id of this Volumeannotation.
        :type volume_id: str
        """

        self._volume_id = volume_id
