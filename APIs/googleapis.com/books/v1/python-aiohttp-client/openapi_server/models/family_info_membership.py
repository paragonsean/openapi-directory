# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FamilyInfoMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquire_permission: str=None, age_group: str=None, allowed_maturity_rating: str=None, is_in_family: bool=None, role: str=None):
        """FamilyInfoMembership - a model defined in OpenAPI

        :param acquire_permission: The acquire_permission of this FamilyInfoMembership.
        :param age_group: The age_group of this FamilyInfoMembership.
        :param allowed_maturity_rating: The allowed_maturity_rating of this FamilyInfoMembership.
        :param is_in_family: The is_in_family of this FamilyInfoMembership.
        :param role: The role of this FamilyInfoMembership.
        """
        self.openapi_types = {
            'acquire_permission': str,
            'age_group': str,
            'allowed_maturity_rating': str,
            'is_in_family': bool,
            'role': str
        }

        self.attribute_map = {
            'acquire_permission': 'acquirePermission',
            'age_group': 'ageGroup',
            'allowed_maturity_rating': 'allowedMaturityRating',
            'is_in_family': 'isInFamily',
            'role': 'role'
        }

        self._acquire_permission = acquire_permission
        self._age_group = age_group
        self._allowed_maturity_rating = allowed_maturity_rating
        self._is_in_family = is_in_family
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FamilyInfoMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FamilyInfo_membership of this FamilyInfoMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquire_permission(self):
        """Gets the acquire_permission of this FamilyInfoMembership.

        Restrictions on user buying and acquiring content.

        :return: The acquire_permission of this FamilyInfoMembership.
        :rtype: str
        """
        return self._acquire_permission

    @acquire_permission.setter
    def acquire_permission(self, acquire_permission):
        """Sets the acquire_permission of this FamilyInfoMembership.

        Restrictions on user buying and acquiring content.

        :param acquire_permission: The acquire_permission of this FamilyInfoMembership.
        :type acquire_permission: str
        """

        self._acquire_permission = acquire_permission

    @property
    def age_group(self):
        """Gets the age_group of this FamilyInfoMembership.

        The age group of the user.

        :return: The age_group of this FamilyInfoMembership.
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this FamilyInfoMembership.

        The age group of the user.

        :param age_group: The age_group of this FamilyInfoMembership.
        :type age_group: str
        """

        self._age_group = age_group

    @property
    def allowed_maturity_rating(self):
        """Gets the allowed_maturity_rating of this FamilyInfoMembership.

        The maximum allowed maturity rating for the user.

        :return: The allowed_maturity_rating of this FamilyInfoMembership.
        :rtype: str
        """
        return self._allowed_maturity_rating

    @allowed_maturity_rating.setter
    def allowed_maturity_rating(self, allowed_maturity_rating):
        """Sets the allowed_maturity_rating of this FamilyInfoMembership.

        The maximum allowed maturity rating for the user.

        :param allowed_maturity_rating: The allowed_maturity_rating of this FamilyInfoMembership.
        :type allowed_maturity_rating: str
        """

        self._allowed_maturity_rating = allowed_maturity_rating

    @property
    def is_in_family(self):
        """Gets the is_in_family of this FamilyInfoMembership.


        :return: The is_in_family of this FamilyInfoMembership.
        :rtype: bool
        """
        return self._is_in_family

    @is_in_family.setter
    def is_in_family(self, is_in_family):
        """Sets the is_in_family of this FamilyInfoMembership.


        :param is_in_family: The is_in_family of this FamilyInfoMembership.
        :type is_in_family: bool
        """

        self._is_in_family = is_in_family

    @property
    def role(self):
        """Gets the role of this FamilyInfoMembership.

        The role of the user in the family.

        :return: The role of this FamilyInfoMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this FamilyInfoMembership.

        The role of the user in the family.

        :param role: The role of this FamilyInfoMembership.
        :type role: str
        """

        self._role = role
