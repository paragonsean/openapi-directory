# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConcurrentAccessRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_allowed: bool=None, kind: str=None, max_concurrent_devices: int=None, message: str=None, nonce: str=None, reason_code: str=None, restricted: bool=None, signature: str=None, source: str=None, time_window_seconds: int=None, volume_id: str=None):
        """ConcurrentAccessRestriction - a model defined in OpenAPI

        :param device_allowed: The device_allowed of this ConcurrentAccessRestriction.
        :param kind: The kind of this ConcurrentAccessRestriction.
        :param max_concurrent_devices: The max_concurrent_devices of this ConcurrentAccessRestriction.
        :param message: The message of this ConcurrentAccessRestriction.
        :param nonce: The nonce of this ConcurrentAccessRestriction.
        :param reason_code: The reason_code of this ConcurrentAccessRestriction.
        :param restricted: The restricted of this ConcurrentAccessRestriction.
        :param signature: The signature of this ConcurrentAccessRestriction.
        :param source: The source of this ConcurrentAccessRestriction.
        :param time_window_seconds: The time_window_seconds of this ConcurrentAccessRestriction.
        :param volume_id: The volume_id of this ConcurrentAccessRestriction.
        """
        self.openapi_types = {
            'device_allowed': bool,
            'kind': str,
            'max_concurrent_devices': int,
            'message': str,
            'nonce': str,
            'reason_code': str,
            'restricted': bool,
            'signature': str,
            'source': str,
            'time_window_seconds': int,
            'volume_id': str
        }

        self.attribute_map = {
            'device_allowed': 'deviceAllowed',
            'kind': 'kind',
            'max_concurrent_devices': 'maxConcurrentDevices',
            'message': 'message',
            'nonce': 'nonce',
            'reason_code': 'reasonCode',
            'restricted': 'restricted',
            'signature': 'signature',
            'source': 'source',
            'time_window_seconds': 'timeWindowSeconds',
            'volume_id': 'volumeId'
        }

        self._device_allowed = device_allowed
        self._kind = kind
        self._max_concurrent_devices = max_concurrent_devices
        self._message = message
        self._nonce = nonce
        self._reason_code = reason_code
        self._restricted = restricted
        self._signature = signature
        self._source = source
        self._time_window_seconds = time_window_seconds
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConcurrentAccessRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConcurrentAccessRestriction of this ConcurrentAccessRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_allowed(self):
        """Gets the device_allowed of this ConcurrentAccessRestriction.

        Whether access is granted for this (user, device, volume).

        :return: The device_allowed of this ConcurrentAccessRestriction.
        :rtype: bool
        """
        return self._device_allowed

    @device_allowed.setter
    def device_allowed(self, device_allowed):
        """Sets the device_allowed of this ConcurrentAccessRestriction.

        Whether access is granted for this (user, device, volume).

        :param device_allowed: The device_allowed of this ConcurrentAccessRestriction.
        :type device_allowed: bool
        """

        self._device_allowed = device_allowed

    @property
    def kind(self):
        """Gets the kind of this ConcurrentAccessRestriction.

        Resource type.

        :return: The kind of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ConcurrentAccessRestriction.

        Resource type.

        :param kind: The kind of this ConcurrentAccessRestriction.
        :type kind: str
        """

        self._kind = kind

    @property
    def max_concurrent_devices(self):
        """Gets the max_concurrent_devices of this ConcurrentAccessRestriction.

        The maximum number of concurrent access licenses for this volume.

        :return: The max_concurrent_devices of this ConcurrentAccessRestriction.
        :rtype: int
        """
        return self._max_concurrent_devices

    @max_concurrent_devices.setter
    def max_concurrent_devices(self, max_concurrent_devices):
        """Sets the max_concurrent_devices of this ConcurrentAccessRestriction.

        The maximum number of concurrent access licenses for this volume.

        :param max_concurrent_devices: The max_concurrent_devices of this ConcurrentAccessRestriction.
        :type max_concurrent_devices: int
        """

        self._max_concurrent_devices = max_concurrent_devices

    @property
    def message(self):
        """Gets the message of this ConcurrentAccessRestriction.

        Error/warning message.

        :return: The message of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConcurrentAccessRestriction.

        Error/warning message.

        :param message: The message of this ConcurrentAccessRestriction.
        :type message: str
        """

        self._message = message

    @property
    def nonce(self):
        """Gets the nonce of this ConcurrentAccessRestriction.

        Client nonce for verification. Download access and client-validation only.

        :return: The nonce of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this ConcurrentAccessRestriction.

        Client nonce for verification. Download access and client-validation only.

        :param nonce: The nonce of this ConcurrentAccessRestriction.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def reason_code(self):
        """Gets the reason_code of this ConcurrentAccessRestriction.

        Error/warning reason code.

        :return: The reason_code of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ConcurrentAccessRestriction.

        Error/warning reason code.

        :param reason_code: The reason_code of this ConcurrentAccessRestriction.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def restricted(self):
        """Gets the restricted of this ConcurrentAccessRestriction.

        Whether this volume has any concurrent access restrictions.

        :return: The restricted of this ConcurrentAccessRestriction.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this ConcurrentAccessRestriction.

        Whether this volume has any concurrent access restrictions.

        :param restricted: The restricted of this ConcurrentAccessRestriction.
        :type restricted: bool
        """

        self._restricted = restricted

    @property
    def signature(self):
        """Gets the signature of this ConcurrentAccessRestriction.

        Response signature.

        :return: The signature of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ConcurrentAccessRestriction.

        Response signature.

        :param signature: The signature of this ConcurrentAccessRestriction.
        :type signature: str
        """

        self._signature = signature

    @property
    def source(self):
        """Gets the source of this ConcurrentAccessRestriction.

        Client app identifier for verification. Download access and client-validation only.

        :return: The source of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConcurrentAccessRestriction.

        Client app identifier for verification. Download access and client-validation only.

        :param source: The source of this ConcurrentAccessRestriction.
        :type source: str
        """

        self._source = source

    @property
    def time_window_seconds(self):
        """Gets the time_window_seconds of this ConcurrentAccessRestriction.

        Time in seconds for license auto-expiration.

        :return: The time_window_seconds of this ConcurrentAccessRestriction.
        :rtype: int
        """
        return self._time_window_seconds

    @time_window_seconds.setter
    def time_window_seconds(self, time_window_seconds):
        """Sets the time_window_seconds of this ConcurrentAccessRestriction.

        Time in seconds for license auto-expiration.

        :param time_window_seconds: The time_window_seconds of this ConcurrentAccessRestriction.
        :type time_window_seconds: int
        """

        self._time_window_seconds = time_window_seconds

    @property
    def volume_id(self):
        """Gets the volume_id of this ConcurrentAccessRestriction.

        Identifies the volume for which this entry applies.

        :return: The volume_id of this ConcurrentAccessRestriction.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ConcurrentAccessRestriction.

        Identifies the volume for which this entry applies.

        :param volume_id: The volume_id of this ConcurrentAccessRestriction.
        :type volume_id: str
        """

        self._volume_id = volume_id
