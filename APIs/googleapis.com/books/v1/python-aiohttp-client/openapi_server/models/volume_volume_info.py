# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_volume_info_dimensions import VolumeVolumeInfoDimensions
from openapi_server.models.volume_volume_info_image_links import VolumeVolumeInfoImageLinks
from openapi_server.models.volume_volume_info_industry_identifiers_inner import VolumeVolumeInfoIndustryIdentifiersInner
from openapi_server.models.volume_volume_info_panelization_summary import VolumeVolumeInfoPanelizationSummary
from openapi_server.models.volume_volume_info_reading_modes import VolumeVolumeInfoReadingModes
from openapi_server.models.volumeseriesinfo import Volumeseriesinfo
from openapi_server import util


class VolumeVolumeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_anon_logging: bool=None, authors: List[str]=None, average_rating: float=None, canonical_volume_link: str=None, categories: List[str]=None, comics_content: bool=None, content_version: str=None, description: str=None, dimensions: VolumeVolumeInfoDimensions=None, image_links: VolumeVolumeInfoImageLinks=None, industry_identifiers: List[VolumeVolumeInfoIndustryIdentifiersInner]=None, info_link: str=None, language: str=None, main_category: str=None, maturity_rating: str=None, page_count: int=None, panelization_summary: VolumeVolumeInfoPanelizationSummary=None, preview_link: str=None, print_type: str=None, printed_page_count: int=None, published_date: str=None, publisher: str=None, ratings_count: int=None, reading_modes: VolumeVolumeInfoReadingModes=None, sample_page_count: int=None, series_info: Volumeseriesinfo=None, subtitle: str=None, title: str=None):
        """VolumeVolumeInfo - a model defined in OpenAPI

        :param allow_anon_logging: The allow_anon_logging of this VolumeVolumeInfo.
        :param authors: The authors of this VolumeVolumeInfo.
        :param average_rating: The average_rating of this VolumeVolumeInfo.
        :param canonical_volume_link: The canonical_volume_link of this VolumeVolumeInfo.
        :param categories: The categories of this VolumeVolumeInfo.
        :param comics_content: The comics_content of this VolumeVolumeInfo.
        :param content_version: The content_version of this VolumeVolumeInfo.
        :param description: The description of this VolumeVolumeInfo.
        :param dimensions: The dimensions of this VolumeVolumeInfo.
        :param image_links: The image_links of this VolumeVolumeInfo.
        :param industry_identifiers: The industry_identifiers of this VolumeVolumeInfo.
        :param info_link: The info_link of this VolumeVolumeInfo.
        :param language: The language of this VolumeVolumeInfo.
        :param main_category: The main_category of this VolumeVolumeInfo.
        :param maturity_rating: The maturity_rating of this VolumeVolumeInfo.
        :param page_count: The page_count of this VolumeVolumeInfo.
        :param panelization_summary: The panelization_summary of this VolumeVolumeInfo.
        :param preview_link: The preview_link of this VolumeVolumeInfo.
        :param print_type: The print_type of this VolumeVolumeInfo.
        :param printed_page_count: The printed_page_count of this VolumeVolumeInfo.
        :param published_date: The published_date of this VolumeVolumeInfo.
        :param publisher: The publisher of this VolumeVolumeInfo.
        :param ratings_count: The ratings_count of this VolumeVolumeInfo.
        :param reading_modes: The reading_modes of this VolumeVolumeInfo.
        :param sample_page_count: The sample_page_count of this VolumeVolumeInfo.
        :param series_info: The series_info of this VolumeVolumeInfo.
        :param subtitle: The subtitle of this VolumeVolumeInfo.
        :param title: The title of this VolumeVolumeInfo.
        """
        self.openapi_types = {
            'allow_anon_logging': bool,
            'authors': List[str],
            'average_rating': float,
            'canonical_volume_link': str,
            'categories': List[str],
            'comics_content': bool,
            'content_version': str,
            'description': str,
            'dimensions': VolumeVolumeInfoDimensions,
            'image_links': VolumeVolumeInfoImageLinks,
            'industry_identifiers': List[VolumeVolumeInfoIndustryIdentifiersInner],
            'info_link': str,
            'language': str,
            'main_category': str,
            'maturity_rating': str,
            'page_count': int,
            'panelization_summary': VolumeVolumeInfoPanelizationSummary,
            'preview_link': str,
            'print_type': str,
            'printed_page_count': int,
            'published_date': str,
            'publisher': str,
            'ratings_count': int,
            'reading_modes': VolumeVolumeInfoReadingModes,
            'sample_page_count': int,
            'series_info': Volumeseriesinfo,
            'subtitle': str,
            'title': str
        }

        self.attribute_map = {
            'allow_anon_logging': 'allowAnonLogging',
            'authors': 'authors',
            'average_rating': 'averageRating',
            'canonical_volume_link': 'canonicalVolumeLink',
            'categories': 'categories',
            'comics_content': 'comicsContent',
            'content_version': 'contentVersion',
            'description': 'description',
            'dimensions': 'dimensions',
            'image_links': 'imageLinks',
            'industry_identifiers': 'industryIdentifiers',
            'info_link': 'infoLink',
            'language': 'language',
            'main_category': 'mainCategory',
            'maturity_rating': 'maturityRating',
            'page_count': 'pageCount',
            'panelization_summary': 'panelizationSummary',
            'preview_link': 'previewLink',
            'print_type': 'printType',
            'printed_page_count': 'printedPageCount',
            'published_date': 'publishedDate',
            'publisher': 'publisher',
            'ratings_count': 'ratingsCount',
            'reading_modes': 'readingModes',
            'sample_page_count': 'samplePageCount',
            'series_info': 'seriesInfo',
            'subtitle': 'subtitle',
            'title': 'title'
        }

        self._allow_anon_logging = allow_anon_logging
        self._authors = authors
        self._average_rating = average_rating
        self._canonical_volume_link = canonical_volume_link
        self._categories = categories
        self._comics_content = comics_content
        self._content_version = content_version
        self._description = description
        self._dimensions = dimensions
        self._image_links = image_links
        self._industry_identifiers = industry_identifiers
        self._info_link = info_link
        self._language = language
        self._main_category = main_category
        self._maturity_rating = maturity_rating
        self._page_count = page_count
        self._panelization_summary = panelization_summary
        self._preview_link = preview_link
        self._print_type = print_type
        self._printed_page_count = printed_page_count
        self._published_date = published_date
        self._publisher = publisher
        self._ratings_count = ratings_count
        self._reading_modes = reading_modes
        self._sample_page_count = sample_page_count
        self._series_info = series_info
        self._subtitle = subtitle
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeVolumeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_volumeInfo of this VolumeVolumeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_anon_logging(self):
        """Gets the allow_anon_logging of this VolumeVolumeInfo.

        Whether anonymous logging should be allowed.

        :return: The allow_anon_logging of this VolumeVolumeInfo.
        :rtype: bool
        """
        return self._allow_anon_logging

    @allow_anon_logging.setter
    def allow_anon_logging(self, allow_anon_logging):
        """Sets the allow_anon_logging of this VolumeVolumeInfo.

        Whether anonymous logging should be allowed.

        :param allow_anon_logging: The allow_anon_logging of this VolumeVolumeInfo.
        :type allow_anon_logging: bool
        """

        self._allow_anon_logging = allow_anon_logging

    @property
    def authors(self):
        """Gets the authors of this VolumeVolumeInfo.

        The names of the authors and/or editors for this volume. (In LITE projection)

        :return: The authors of this VolumeVolumeInfo.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this VolumeVolumeInfo.

        The names of the authors and/or editors for this volume. (In LITE projection)

        :param authors: The authors of this VolumeVolumeInfo.
        :type authors: List[str]
        """

        self._authors = authors

    @property
    def average_rating(self):
        """Gets the average_rating of this VolumeVolumeInfo.

        The mean review rating for this volume. (min = 1.0, max = 5.0)

        :return: The average_rating of this VolumeVolumeInfo.
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this VolumeVolumeInfo.

        The mean review rating for this volume. (min = 1.0, max = 5.0)

        :param average_rating: The average_rating of this VolumeVolumeInfo.
        :type average_rating: float
        """

        self._average_rating = average_rating

    @property
    def canonical_volume_link(self):
        """Gets the canonical_volume_link of this VolumeVolumeInfo.

        Canonical URL for a volume. (In LITE projection.)

        :return: The canonical_volume_link of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._canonical_volume_link

    @canonical_volume_link.setter
    def canonical_volume_link(self, canonical_volume_link):
        """Sets the canonical_volume_link of this VolumeVolumeInfo.

        Canonical URL for a volume. (In LITE projection.)

        :param canonical_volume_link: The canonical_volume_link of this VolumeVolumeInfo.
        :type canonical_volume_link: str
        """

        self._canonical_volume_link = canonical_volume_link

    @property
    def categories(self):
        """Gets the categories of this VolumeVolumeInfo.

        A list of subject categories, such as \"Fiction\", \"Suspense\", etc.

        :return: The categories of this VolumeVolumeInfo.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this VolumeVolumeInfo.

        A list of subject categories, such as \"Fiction\", \"Suspense\", etc.

        :param categories: The categories of this VolumeVolumeInfo.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def comics_content(self):
        """Gets the comics_content of this VolumeVolumeInfo.

        Whether the volume has comics content.

        :return: The comics_content of this VolumeVolumeInfo.
        :rtype: bool
        """
        return self._comics_content

    @comics_content.setter
    def comics_content(self, comics_content):
        """Sets the comics_content of this VolumeVolumeInfo.

        Whether the volume has comics content.

        :param comics_content: The comics_content of this VolumeVolumeInfo.
        :type comics_content: bool
        """

        self._comics_content = comics_content

    @property
    def content_version(self):
        """Gets the content_version of this VolumeVolumeInfo.

        An identifier for the version of the volume content (text & images). (In LITE projection)

        :return: The content_version of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version):
        """Sets the content_version of this VolumeVolumeInfo.

        An identifier for the version of the volume content (text & images). (In LITE projection)

        :param content_version: The content_version of this VolumeVolumeInfo.
        :type content_version: str
        """

        self._content_version = content_version

    @property
    def description(self):
        """Gets the description of this VolumeVolumeInfo.

        A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)

        :return: The description of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeVolumeInfo.

        A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)

        :param description: The description of this VolumeVolumeInfo.
        :type description: str
        """

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this VolumeVolumeInfo.


        :return: The dimensions of this VolumeVolumeInfo.
        :rtype: VolumeVolumeInfoDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this VolumeVolumeInfo.


        :param dimensions: The dimensions of this VolumeVolumeInfo.
        :type dimensions: VolumeVolumeInfoDimensions
        """

        self._dimensions = dimensions

    @property
    def image_links(self):
        """Gets the image_links of this VolumeVolumeInfo.


        :return: The image_links of this VolumeVolumeInfo.
        :rtype: VolumeVolumeInfoImageLinks
        """
        return self._image_links

    @image_links.setter
    def image_links(self, image_links):
        """Sets the image_links of this VolumeVolumeInfo.


        :param image_links: The image_links of this VolumeVolumeInfo.
        :type image_links: VolumeVolumeInfoImageLinks
        """

        self._image_links = image_links

    @property
    def industry_identifiers(self):
        """Gets the industry_identifiers of this VolumeVolumeInfo.

        Industry standard identifiers for this volume.

        :return: The industry_identifiers of this VolumeVolumeInfo.
        :rtype: List[VolumeVolumeInfoIndustryIdentifiersInner]
        """
        return self._industry_identifiers

    @industry_identifiers.setter
    def industry_identifiers(self, industry_identifiers):
        """Sets the industry_identifiers of this VolumeVolumeInfo.

        Industry standard identifiers for this volume.

        :param industry_identifiers: The industry_identifiers of this VolumeVolumeInfo.
        :type industry_identifiers: List[VolumeVolumeInfoIndustryIdentifiersInner]
        """

        self._industry_identifiers = industry_identifiers

    @property
    def info_link(self):
        """Gets the info_link of this VolumeVolumeInfo.

        URL to view information about this volume on the Google Books site. (In LITE projection)

        :return: The info_link of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._info_link

    @info_link.setter
    def info_link(self, info_link):
        """Sets the info_link of this VolumeVolumeInfo.

        URL to view information about this volume on the Google Books site. (In LITE projection)

        :param info_link: The info_link of this VolumeVolumeInfo.
        :type info_link: str
        """

        self._info_link = info_link

    @property
    def language(self):
        """Gets the language of this VolumeVolumeInfo.

        Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as 'fr', 'en', etc.

        :return: The language of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VolumeVolumeInfo.

        Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as 'fr', 'en', etc.

        :param language: The language of this VolumeVolumeInfo.
        :type language: str
        """

        self._language = language

    @property
    def main_category(self):
        """Gets the main_category of this VolumeVolumeInfo.

        The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.

        :return: The main_category of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._main_category

    @main_category.setter
    def main_category(self, main_category):
        """Sets the main_category of this VolumeVolumeInfo.

        The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.

        :param main_category: The main_category of this VolumeVolumeInfo.
        :type main_category: str
        """

        self._main_category = main_category

    @property
    def maturity_rating(self):
        """Gets the maturity_rating of this VolumeVolumeInfo.


        :return: The maturity_rating of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._maturity_rating

    @maturity_rating.setter
    def maturity_rating(self, maturity_rating):
        """Sets the maturity_rating of this VolumeVolumeInfo.


        :param maturity_rating: The maturity_rating of this VolumeVolumeInfo.
        :type maturity_rating: str
        """

        self._maturity_rating = maturity_rating

    @property
    def page_count(self):
        """Gets the page_count of this VolumeVolumeInfo.

        Total number of pages as per publisher metadata.

        :return: The page_count of this VolumeVolumeInfo.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this VolumeVolumeInfo.

        Total number of pages as per publisher metadata.

        :param page_count: The page_count of this VolumeVolumeInfo.
        :type page_count: int
        """

        self._page_count = page_count

    @property
    def panelization_summary(self):
        """Gets the panelization_summary of this VolumeVolumeInfo.


        :return: The panelization_summary of this VolumeVolumeInfo.
        :rtype: VolumeVolumeInfoPanelizationSummary
        """
        return self._panelization_summary

    @panelization_summary.setter
    def panelization_summary(self, panelization_summary):
        """Sets the panelization_summary of this VolumeVolumeInfo.


        :param panelization_summary: The panelization_summary of this VolumeVolumeInfo.
        :type panelization_summary: VolumeVolumeInfoPanelizationSummary
        """

        self._panelization_summary = panelization_summary

    @property
    def preview_link(self):
        """Gets the preview_link of this VolumeVolumeInfo.

        URL to preview this volume on the Google Books site.

        :return: The preview_link of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._preview_link

    @preview_link.setter
    def preview_link(self, preview_link):
        """Sets the preview_link of this VolumeVolumeInfo.

        URL to preview this volume on the Google Books site.

        :param preview_link: The preview_link of this VolumeVolumeInfo.
        :type preview_link: str
        """

        self._preview_link = preview_link

    @property
    def print_type(self):
        """Gets the print_type of this VolumeVolumeInfo.

        Type of publication of this volume. Possible values are BOOK or MAGAZINE.

        :return: The print_type of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._print_type

    @print_type.setter
    def print_type(self, print_type):
        """Sets the print_type of this VolumeVolumeInfo.

        Type of publication of this volume. Possible values are BOOK or MAGAZINE.

        :param print_type: The print_type of this VolumeVolumeInfo.
        :type print_type: str
        """

        self._print_type = print_type

    @property
    def printed_page_count(self):
        """Gets the printed_page_count of this VolumeVolumeInfo.

        Total number of printed pages in generated pdf representation.

        :return: The printed_page_count of this VolumeVolumeInfo.
        :rtype: int
        """
        return self._printed_page_count

    @printed_page_count.setter
    def printed_page_count(self, printed_page_count):
        """Sets the printed_page_count of this VolumeVolumeInfo.

        Total number of printed pages in generated pdf representation.

        :param printed_page_count: The printed_page_count of this VolumeVolumeInfo.
        :type printed_page_count: int
        """

        self._printed_page_count = printed_page_count

    @property
    def published_date(self):
        """Gets the published_date of this VolumeVolumeInfo.

        Date of publication. (In LITE projection.)

        :return: The published_date of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this VolumeVolumeInfo.

        Date of publication. (In LITE projection.)

        :param published_date: The published_date of this VolumeVolumeInfo.
        :type published_date: str
        """

        self._published_date = published_date

    @property
    def publisher(self):
        """Gets the publisher of this VolumeVolumeInfo.

        Publisher of this volume. (In LITE projection.)

        :return: The publisher of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this VolumeVolumeInfo.

        Publisher of this volume. (In LITE projection.)

        :param publisher: The publisher of this VolumeVolumeInfo.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def ratings_count(self):
        """Gets the ratings_count of this VolumeVolumeInfo.

        The number of review ratings for this volume.

        :return: The ratings_count of this VolumeVolumeInfo.
        :rtype: int
        """
        return self._ratings_count

    @ratings_count.setter
    def ratings_count(self, ratings_count):
        """Sets the ratings_count of this VolumeVolumeInfo.

        The number of review ratings for this volume.

        :param ratings_count: The ratings_count of this VolumeVolumeInfo.
        :type ratings_count: int
        """

        self._ratings_count = ratings_count

    @property
    def reading_modes(self):
        """Gets the reading_modes of this VolumeVolumeInfo.


        :return: The reading_modes of this VolumeVolumeInfo.
        :rtype: VolumeVolumeInfoReadingModes
        """
        return self._reading_modes

    @reading_modes.setter
    def reading_modes(self, reading_modes):
        """Sets the reading_modes of this VolumeVolumeInfo.


        :param reading_modes: The reading_modes of this VolumeVolumeInfo.
        :type reading_modes: VolumeVolumeInfoReadingModes
        """

        self._reading_modes = reading_modes

    @property
    def sample_page_count(self):
        """Gets the sample_page_count of this VolumeVolumeInfo.

        Total number of sample pages as per publisher metadata.

        :return: The sample_page_count of this VolumeVolumeInfo.
        :rtype: int
        """
        return self._sample_page_count

    @sample_page_count.setter
    def sample_page_count(self, sample_page_count):
        """Sets the sample_page_count of this VolumeVolumeInfo.

        Total number of sample pages as per publisher metadata.

        :param sample_page_count: The sample_page_count of this VolumeVolumeInfo.
        :type sample_page_count: int
        """

        self._sample_page_count = sample_page_count

    @property
    def series_info(self):
        """Gets the series_info of this VolumeVolumeInfo.


        :return: The series_info of this VolumeVolumeInfo.
        :rtype: Volumeseriesinfo
        """
        return self._series_info

    @series_info.setter
    def series_info(self, series_info):
        """Sets the series_info of this VolumeVolumeInfo.


        :param series_info: The series_info of this VolumeVolumeInfo.
        :type series_info: Volumeseriesinfo
        """

        self._series_info = series_info

    @property
    def subtitle(self):
        """Gets the subtitle of this VolumeVolumeInfo.

        Volume subtitle. (In LITE projection.)

        :return: The subtitle of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this VolumeVolumeInfo.

        Volume subtitle. (In LITE projection.)

        :param subtitle: The subtitle of this VolumeVolumeInfo.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def title(self):
        """Gets the title of this VolumeVolumeInfo.

        Volume title. (In LITE projection.)

        :return: The title of this VolumeVolumeInfo.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VolumeVolumeInfo.

        Volume title. (In LITE projection.)

        :param title: The title of this VolumeVolumeInfo.
        :type title: str
        """

        self._title = title
