# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_sale_info_list_price import VolumeSaleInfoListPrice
from openapi_server.models.volume_sale_info_offers_inner import VolumeSaleInfoOffersInner
from openapi_server.models.volume_sale_info_retail_price import VolumeSaleInfoRetailPrice
from openapi_server import util


class VolumeSaleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buy_link: str=None, country: str=None, is_ebook: bool=None, list_price: VolumeSaleInfoListPrice=None, offers: List[VolumeSaleInfoOffersInner]=None, on_sale_date: str=None, retail_price: VolumeSaleInfoRetailPrice=None, saleability: str=None):
        """VolumeSaleInfo - a model defined in OpenAPI

        :param buy_link: The buy_link of this VolumeSaleInfo.
        :param country: The country of this VolumeSaleInfo.
        :param is_ebook: The is_ebook of this VolumeSaleInfo.
        :param list_price: The list_price of this VolumeSaleInfo.
        :param offers: The offers of this VolumeSaleInfo.
        :param on_sale_date: The on_sale_date of this VolumeSaleInfo.
        :param retail_price: The retail_price of this VolumeSaleInfo.
        :param saleability: The saleability of this VolumeSaleInfo.
        """
        self.openapi_types = {
            'buy_link': str,
            'country': str,
            'is_ebook': bool,
            'list_price': VolumeSaleInfoListPrice,
            'offers': List[VolumeSaleInfoOffersInner],
            'on_sale_date': str,
            'retail_price': VolumeSaleInfoRetailPrice,
            'saleability': str
        }

        self.attribute_map = {
            'buy_link': 'buyLink',
            'country': 'country',
            'is_ebook': 'isEbook',
            'list_price': 'listPrice',
            'offers': 'offers',
            'on_sale_date': 'onSaleDate',
            'retail_price': 'retailPrice',
            'saleability': 'saleability'
        }

        self._buy_link = buy_link
        self._country = country
        self._is_ebook = is_ebook
        self._list_price = list_price
        self._offers = offers
        self._on_sale_date = on_sale_date
        self._retail_price = retail_price
        self._saleability = saleability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeSaleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume_saleInfo of this VolumeSaleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buy_link(self):
        """Gets the buy_link of this VolumeSaleInfo.

        URL to purchase this volume on the Google Books site. (In LITE projection)

        :return: The buy_link of this VolumeSaleInfo.
        :rtype: str
        """
        return self._buy_link

    @buy_link.setter
    def buy_link(self, buy_link):
        """Sets the buy_link of this VolumeSaleInfo.

        URL to purchase this volume on the Google Books site. (In LITE projection)

        :param buy_link: The buy_link of this VolumeSaleInfo.
        :type buy_link: str
        """

        self._buy_link = buy_link

    @property
    def country(self):
        """Gets the country of this VolumeSaleInfo.

        The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)

        :return: The country of this VolumeSaleInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this VolumeSaleInfo.

        The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)

        :param country: The country of this VolumeSaleInfo.
        :type country: str
        """

        self._country = country

    @property
    def is_ebook(self):
        """Gets the is_ebook of this VolumeSaleInfo.

        Whether or not this volume is an eBook (can be added to the My eBooks shelf).

        :return: The is_ebook of this VolumeSaleInfo.
        :rtype: bool
        """
        return self._is_ebook

    @is_ebook.setter
    def is_ebook(self, is_ebook):
        """Sets the is_ebook of this VolumeSaleInfo.

        Whether or not this volume is an eBook (can be added to the My eBooks shelf).

        :param is_ebook: The is_ebook of this VolumeSaleInfo.
        :type is_ebook: bool
        """

        self._is_ebook = is_ebook

    @property
    def list_price(self):
        """Gets the list_price of this VolumeSaleInfo.


        :return: The list_price of this VolumeSaleInfo.
        :rtype: VolumeSaleInfoListPrice
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this VolumeSaleInfo.


        :param list_price: The list_price of this VolumeSaleInfo.
        :type list_price: VolumeSaleInfoListPrice
        """

        self._list_price = list_price

    @property
    def offers(self):
        """Gets the offers of this VolumeSaleInfo.

        Offers available for this volume (sales and rentals).

        :return: The offers of this VolumeSaleInfo.
        :rtype: List[VolumeSaleInfoOffersInner]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this VolumeSaleInfo.

        Offers available for this volume (sales and rentals).

        :param offers: The offers of this VolumeSaleInfo.
        :type offers: List[VolumeSaleInfoOffersInner]
        """

        self._offers = offers

    @property
    def on_sale_date(self):
        """Gets the on_sale_date of this VolumeSaleInfo.

        The date on which this book is available for sale.

        :return: The on_sale_date of this VolumeSaleInfo.
        :rtype: str
        """
        return self._on_sale_date

    @on_sale_date.setter
    def on_sale_date(self, on_sale_date):
        """Sets the on_sale_date of this VolumeSaleInfo.

        The date on which this book is available for sale.

        :param on_sale_date: The on_sale_date of this VolumeSaleInfo.
        :type on_sale_date: str
        """

        self._on_sale_date = on_sale_date

    @property
    def retail_price(self):
        """Gets the retail_price of this VolumeSaleInfo.


        :return: The retail_price of this VolumeSaleInfo.
        :rtype: VolumeSaleInfoRetailPrice
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this VolumeSaleInfo.


        :param retail_price: The retail_price of this VolumeSaleInfo.
        :type retail_price: VolumeSaleInfoRetailPrice
        """

        self._retail_price = retail_price

    @property
    def saleability(self):
        """Gets the saleability of this VolumeSaleInfo.

        Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or FOR_PREORDER.

        :return: The saleability of this VolumeSaleInfo.
        :rtype: str
        """
        return self._saleability

    @saleability.setter
    def saleability(self, saleability):
        """Sets the saleability of this VolumeSaleInfo.

        Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or FOR_PREORDER.

        :param saleability: The saleability of this VolumeSaleInfo.
        :type saleability: str
        """

        self._saleability = saleability
