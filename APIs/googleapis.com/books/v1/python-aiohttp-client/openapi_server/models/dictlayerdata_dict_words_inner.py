# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dictlayerdata_dict_words_inner_derivatives_inner import DictlayerdataDictWordsInnerDerivativesInner
from openapi_server.models.dictlayerdata_dict_words_inner_senses_inner import DictlayerdataDictWordsInnerSensesInner
from openapi_server.models.dictlayerdata_dict_words_inner_source import DictlayerdataDictWordsInnerSource
from openapi_server import util


class DictlayerdataDictWordsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, derivatives: List[DictlayerdataDictWordsInnerDerivativesInner]=None, examples: List[DictlayerdataDictWordsInnerDerivativesInner]=None, senses: List[DictlayerdataDictWordsInnerSensesInner]=None, source: DictlayerdataDictWordsInnerSource=None):
        """DictlayerdataDictWordsInner - a model defined in OpenAPI

        :param derivatives: The derivatives of this DictlayerdataDictWordsInner.
        :param examples: The examples of this DictlayerdataDictWordsInner.
        :param senses: The senses of this DictlayerdataDictWordsInner.
        :param source: The source of this DictlayerdataDictWordsInner.
        """
        self.openapi_types = {
            'derivatives': List[DictlayerdataDictWordsInnerDerivativesInner],
            'examples': List[DictlayerdataDictWordsInnerDerivativesInner],
            'senses': List[DictlayerdataDictWordsInnerSensesInner],
            'source': DictlayerdataDictWordsInnerSource
        }

        self.attribute_map = {
            'derivatives': 'derivatives',
            'examples': 'examples',
            'senses': 'senses',
            'source': 'source'
        }

        self._derivatives = derivatives
        self._examples = examples
        self._senses = senses
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DictlayerdataDictWordsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dictlayerdata_dict_words_inner of this DictlayerdataDictWordsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def derivatives(self):
        """Gets the derivatives of this DictlayerdataDictWordsInner.


        :return: The derivatives of this DictlayerdataDictWordsInner.
        :rtype: List[DictlayerdataDictWordsInnerDerivativesInner]
        """
        return self._derivatives

    @derivatives.setter
    def derivatives(self, derivatives):
        """Sets the derivatives of this DictlayerdataDictWordsInner.


        :param derivatives: The derivatives of this DictlayerdataDictWordsInner.
        :type derivatives: List[DictlayerdataDictWordsInnerDerivativesInner]
        """

        self._derivatives = derivatives

    @property
    def examples(self):
        """Gets the examples of this DictlayerdataDictWordsInner.


        :return: The examples of this DictlayerdataDictWordsInner.
        :rtype: List[DictlayerdataDictWordsInnerDerivativesInner]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this DictlayerdataDictWordsInner.


        :param examples: The examples of this DictlayerdataDictWordsInner.
        :type examples: List[DictlayerdataDictWordsInnerDerivativesInner]
        """

        self._examples = examples

    @property
    def senses(self):
        """Gets the senses of this DictlayerdataDictWordsInner.


        :return: The senses of this DictlayerdataDictWordsInner.
        :rtype: List[DictlayerdataDictWordsInnerSensesInner]
        """
        return self._senses

    @senses.setter
    def senses(self, senses):
        """Sets the senses of this DictlayerdataDictWordsInner.


        :param senses: The senses of this DictlayerdataDictWordsInner.
        :type senses: List[DictlayerdataDictWordsInnerSensesInner]
        """

        self._senses = senses

    @property
    def source(self):
        """Gets the source of this DictlayerdataDictWordsInner.


        :return: The source of this DictlayerdataDictWordsInner.
        :rtype: DictlayerdataDictWordsInnerSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DictlayerdataDictWordsInner.


        :param source: The source of this DictlayerdataDictWordsInner.
        :type source: DictlayerdataDictWordsInnerSource
        """

        self._source = source
