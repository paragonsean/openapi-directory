# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadingPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epub_cfi_position: str=None, gb_image_position: str=None, gb_text_position: str=None, kind: str=None, pdf_position: str=None, updated: str=None, volume_id: str=None):
        """ReadingPosition - a model defined in OpenAPI

        :param epub_cfi_position: The epub_cfi_position of this ReadingPosition.
        :param gb_image_position: The gb_image_position of this ReadingPosition.
        :param gb_text_position: The gb_text_position of this ReadingPosition.
        :param kind: The kind of this ReadingPosition.
        :param pdf_position: The pdf_position of this ReadingPosition.
        :param updated: The updated of this ReadingPosition.
        :param volume_id: The volume_id of this ReadingPosition.
        """
        self.openapi_types = {
            'epub_cfi_position': str,
            'gb_image_position': str,
            'gb_text_position': str,
            'kind': str,
            'pdf_position': str,
            'updated': str,
            'volume_id': str
        }

        self.attribute_map = {
            'epub_cfi_position': 'epubCfiPosition',
            'gb_image_position': 'gbImagePosition',
            'gb_text_position': 'gbTextPosition',
            'kind': 'kind',
            'pdf_position': 'pdfPosition',
            'updated': 'updated',
            'volume_id': 'volumeId'
        }

        self._epub_cfi_position = epub_cfi_position
        self._gb_image_position = gb_image_position
        self._gb_text_position = gb_text_position
        self._kind = kind
        self._pdf_position = pdf_position
        self._updated = updated
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadingPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadingPosition of this ReadingPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epub_cfi_position(self):
        """Gets the epub_cfi_position of this ReadingPosition.

        Position in an EPUB as a CFI.

        :return: The epub_cfi_position of this ReadingPosition.
        :rtype: str
        """
        return self._epub_cfi_position

    @epub_cfi_position.setter
    def epub_cfi_position(self, epub_cfi_position):
        """Sets the epub_cfi_position of this ReadingPosition.

        Position in an EPUB as a CFI.

        :param epub_cfi_position: The epub_cfi_position of this ReadingPosition.
        :type epub_cfi_position: str
        """

        self._epub_cfi_position = epub_cfi_position

    @property
    def gb_image_position(self):
        """Gets the gb_image_position of this ReadingPosition.

        Position in a volume for image-based content.

        :return: The gb_image_position of this ReadingPosition.
        :rtype: str
        """
        return self._gb_image_position

    @gb_image_position.setter
    def gb_image_position(self, gb_image_position):
        """Sets the gb_image_position of this ReadingPosition.

        Position in a volume for image-based content.

        :param gb_image_position: The gb_image_position of this ReadingPosition.
        :type gb_image_position: str
        """

        self._gb_image_position = gb_image_position

    @property
    def gb_text_position(self):
        """Gets the gb_text_position of this ReadingPosition.

        Position in a volume for text-based content.

        :return: The gb_text_position of this ReadingPosition.
        :rtype: str
        """
        return self._gb_text_position

    @gb_text_position.setter
    def gb_text_position(self, gb_text_position):
        """Sets the gb_text_position of this ReadingPosition.

        Position in a volume for text-based content.

        :param gb_text_position: The gb_text_position of this ReadingPosition.
        :type gb_text_position: str
        """

        self._gb_text_position = gb_text_position

    @property
    def kind(self):
        """Gets the kind of this ReadingPosition.

        Resource type for a reading position.

        :return: The kind of this ReadingPosition.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReadingPosition.

        Resource type for a reading position.

        :param kind: The kind of this ReadingPosition.
        :type kind: str
        """

        self._kind = kind

    @property
    def pdf_position(self):
        """Gets the pdf_position of this ReadingPosition.

        Position in a PDF file.

        :return: The pdf_position of this ReadingPosition.
        :rtype: str
        """
        return self._pdf_position

    @pdf_position.setter
    def pdf_position(self, pdf_position):
        """Sets the pdf_position of this ReadingPosition.

        Position in a PDF file.

        :param pdf_position: The pdf_position of this ReadingPosition.
        :type pdf_position: str
        """

        self._pdf_position = pdf_position

    @property
    def updated(self):
        """Gets the updated of this ReadingPosition.

        Timestamp when this reading position was last updated (formatted UTC timestamp with millisecond resolution).

        :return: The updated of this ReadingPosition.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ReadingPosition.

        Timestamp when this reading position was last updated (formatted UTC timestamp with millisecond resolution).

        :param updated: The updated of this ReadingPosition.
        :type updated: str
        """

        self._updated = updated

    @property
    def volume_id(self):
        """Gets the volume_id of this ReadingPosition.

        Volume id associated with this reading position.

        :return: The volume_id of this ReadingPosition.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ReadingPosition.

        Volume id associated with this reading position.

        :param volume_id: The volume_id of this ReadingPosition.
        :type volume_id: str
        """

        self._volume_id = volume_id
