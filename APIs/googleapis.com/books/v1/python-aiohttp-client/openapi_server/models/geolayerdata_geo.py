# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geolayerdata_geo_viewport import GeolayerdataGeoViewport
from openapi_server import util


class GeolayerdataGeo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boundary: List[str]=None, cache_policy: str=None, country_code: str=None, latitude: float=None, longitude: float=None, map_type: str=None, viewport: GeolayerdataGeoViewport=None, zoom: int=None):
        """GeolayerdataGeo - a model defined in OpenAPI

        :param boundary: The boundary of this GeolayerdataGeo.
        :param cache_policy: The cache_policy of this GeolayerdataGeo.
        :param country_code: The country_code of this GeolayerdataGeo.
        :param latitude: The latitude of this GeolayerdataGeo.
        :param longitude: The longitude of this GeolayerdataGeo.
        :param map_type: The map_type of this GeolayerdataGeo.
        :param viewport: The viewport of this GeolayerdataGeo.
        :param zoom: The zoom of this GeolayerdataGeo.
        """
        self.openapi_types = {
            'boundary': List[str],
            'cache_policy': str,
            'country_code': str,
            'latitude': float,
            'longitude': float,
            'map_type': str,
            'viewport': GeolayerdataGeoViewport,
            'zoom': int
        }

        self.attribute_map = {
            'boundary': 'boundary',
            'cache_policy': 'cachePolicy',
            'country_code': 'countryCode',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'map_type': 'mapType',
            'viewport': 'viewport',
            'zoom': 'zoom'
        }

        self._boundary = boundary
        self._cache_policy = cache_policy
        self._country_code = country_code
        self._latitude = latitude
        self._longitude = longitude
        self._map_type = map_type
        self._viewport = viewport
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeolayerdataGeo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Geolayerdata_geo of this GeolayerdataGeo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boundary(self):
        """Gets the boundary of this GeolayerdataGeo.

        The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.

        :return: The boundary of this GeolayerdataGeo.
        :rtype: List[str]
        """
        return self._boundary

    @boundary.setter
    def boundary(self, boundary):
        """Sets the boundary of this GeolayerdataGeo.

        The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.

        :param boundary: The boundary of this GeolayerdataGeo.
        :type boundary: List[str]
        """

        self._boundary = boundary

    @property
    def cache_policy(self):
        """Gets the cache_policy of this GeolayerdataGeo.

        The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER

        :return: The cache_policy of this GeolayerdataGeo.
        :rtype: str
        """
        return self._cache_policy

    @cache_policy.setter
    def cache_policy(self, cache_policy):
        """Sets the cache_policy of this GeolayerdataGeo.

        The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER

        :param cache_policy: The cache_policy of this GeolayerdataGeo.
        :type cache_policy: str
        """

        self._cache_policy = cache_policy

    @property
    def country_code(self):
        """Gets the country_code of this GeolayerdataGeo.

        The country code of the location.

        :return: The country_code of this GeolayerdataGeo.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GeolayerdataGeo.

        The country code of the location.

        :param country_code: The country_code of this GeolayerdataGeo.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def latitude(self):
        """Gets the latitude of this GeolayerdataGeo.

        The latitude of the location.

        :return: The latitude of this GeolayerdataGeo.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeolayerdataGeo.

        The latitude of the location.

        :param latitude: The latitude of this GeolayerdataGeo.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeolayerdataGeo.

        The longitude of the location.

        :return: The longitude of this GeolayerdataGeo.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeolayerdataGeo.

        The longitude of the location.

        :param longitude: The longitude of this GeolayerdataGeo.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def map_type(self):
        """Gets the map_type of this GeolayerdataGeo.

        The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN

        :return: The map_type of this GeolayerdataGeo.
        :rtype: str
        """
        return self._map_type

    @map_type.setter
    def map_type(self, map_type):
        """Sets the map_type of this GeolayerdataGeo.

        The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN

        :param map_type: The map_type of this GeolayerdataGeo.
        :type map_type: str
        """

        self._map_type = map_type

    @property
    def viewport(self):
        """Gets the viewport of this GeolayerdataGeo.


        :return: The viewport of this GeolayerdataGeo.
        :rtype: GeolayerdataGeoViewport
        """
        return self._viewport

    @viewport.setter
    def viewport(self, viewport):
        """Sets the viewport of this GeolayerdataGeo.


        :param viewport: The viewport of this GeolayerdataGeo.
        :type viewport: GeolayerdataGeoViewport
        """

        self._viewport = viewport

    @property
    def zoom(self):
        """Gets the zoom of this GeolayerdataGeo.

        The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https: //developers.google.com/maps/documentation/staticmaps/#Zoomlevels

        :return: The zoom of this GeolayerdataGeo.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this GeolayerdataGeo.

        The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https: //developers.google.com/maps/documentation/staticmaps/#Zoomlevels

        :param zoom: The zoom of this GeolayerdataGeo.
        :type zoom: int
        """

        self._zoom = zoom
