# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_client_version_ranges import AnnotationClientVersionRanges
from openapi_server.models.annotation_current_version_ranges import AnnotationCurrentVersionRanges
from openapi_server.models.annotation_layer_summary import AnnotationLayerSummary
from openapi_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_selected_text: str=None, before_selected_text: str=None, client_version_ranges: AnnotationClientVersionRanges=None, created: str=None, current_version_ranges: AnnotationCurrentVersionRanges=None, data: str=None, deleted: bool=None, highlight_style: str=None, id: str=None, kind: str=None, layer_id: str=None, layer_summary: AnnotationLayerSummary=None, page_ids: List[str]=None, selected_text: str=None, self_link: str=None, updated: str=None, volume_id: str=None):
        """Annotation - a model defined in OpenAPI

        :param after_selected_text: The after_selected_text of this Annotation.
        :param before_selected_text: The before_selected_text of this Annotation.
        :param client_version_ranges: The client_version_ranges of this Annotation.
        :param created: The created of this Annotation.
        :param current_version_ranges: The current_version_ranges of this Annotation.
        :param data: The data of this Annotation.
        :param deleted: The deleted of this Annotation.
        :param highlight_style: The highlight_style of this Annotation.
        :param id: The id of this Annotation.
        :param kind: The kind of this Annotation.
        :param layer_id: The layer_id of this Annotation.
        :param layer_summary: The layer_summary of this Annotation.
        :param page_ids: The page_ids of this Annotation.
        :param selected_text: The selected_text of this Annotation.
        :param self_link: The self_link of this Annotation.
        :param updated: The updated of this Annotation.
        :param volume_id: The volume_id of this Annotation.
        """
        self.openapi_types = {
            'after_selected_text': str,
            'before_selected_text': str,
            'client_version_ranges': AnnotationClientVersionRanges,
            'created': str,
            'current_version_ranges': AnnotationCurrentVersionRanges,
            'data': str,
            'deleted': bool,
            'highlight_style': str,
            'id': str,
            'kind': str,
            'layer_id': str,
            'layer_summary': AnnotationLayerSummary,
            'page_ids': List[str],
            'selected_text': str,
            'self_link': str,
            'updated': str,
            'volume_id': str
        }

        self.attribute_map = {
            'after_selected_text': 'afterSelectedText',
            'before_selected_text': 'beforeSelectedText',
            'client_version_ranges': 'clientVersionRanges',
            'created': 'created',
            'current_version_ranges': 'currentVersionRanges',
            'data': 'data',
            'deleted': 'deleted',
            'highlight_style': 'highlightStyle',
            'id': 'id',
            'kind': 'kind',
            'layer_id': 'layerId',
            'layer_summary': 'layerSummary',
            'page_ids': 'pageIds',
            'selected_text': 'selectedText',
            'self_link': 'selfLink',
            'updated': 'updated',
            'volume_id': 'volumeId'
        }

        self._after_selected_text = after_selected_text
        self._before_selected_text = before_selected_text
        self._client_version_ranges = client_version_ranges
        self._created = created
        self._current_version_ranges = current_version_ranges
        self._data = data
        self._deleted = deleted
        self._highlight_style = highlight_style
        self._id = id
        self._kind = kind
        self._layer_id = layer_id
        self._layer_summary = layer_summary
        self._page_ids = page_ids
        self._selected_text = selected_text
        self._self_link = self_link
        self._updated = updated
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotation of this Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_selected_text(self):
        """Gets the after_selected_text of this Annotation.

        Anchor text after excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.

        :return: The after_selected_text of this Annotation.
        :rtype: str
        """
        return self._after_selected_text

    @after_selected_text.setter
    def after_selected_text(self, after_selected_text):
        """Sets the after_selected_text of this Annotation.

        Anchor text after excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.

        :param after_selected_text: The after_selected_text of this Annotation.
        :type after_selected_text: str
        """

        self._after_selected_text = after_selected_text

    @property
    def before_selected_text(self):
        """Gets the before_selected_text of this Annotation.

        Anchor text before excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.

        :return: The before_selected_text of this Annotation.
        :rtype: str
        """
        return self._before_selected_text

    @before_selected_text.setter
    def before_selected_text(self, before_selected_text):
        """Sets the before_selected_text of this Annotation.

        Anchor text before excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.

        :param before_selected_text: The before_selected_text of this Annotation.
        :type before_selected_text: str
        """

        self._before_selected_text = before_selected_text

    @property
    def client_version_ranges(self):
        """Gets the client_version_ranges of this Annotation.


        :return: The client_version_ranges of this Annotation.
        :rtype: AnnotationClientVersionRanges
        """
        return self._client_version_ranges

    @client_version_ranges.setter
    def client_version_ranges(self, client_version_ranges):
        """Sets the client_version_ranges of this Annotation.


        :param client_version_ranges: The client_version_ranges of this Annotation.
        :type client_version_ranges: AnnotationClientVersionRanges
        """

        self._client_version_ranges = client_version_ranges

    @property
    def created(self):
        """Gets the created of this Annotation.

        Timestamp for the created time of this annotation.

        :return: The created of this Annotation.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Annotation.

        Timestamp for the created time of this annotation.

        :param created: The created of this Annotation.
        :type created: str
        """

        self._created = created

    @property
    def current_version_ranges(self):
        """Gets the current_version_ranges of this Annotation.


        :return: The current_version_ranges of this Annotation.
        :rtype: AnnotationCurrentVersionRanges
        """
        return self._current_version_ranges

    @current_version_ranges.setter
    def current_version_ranges(self, current_version_ranges):
        """Sets the current_version_ranges of this Annotation.


        :param current_version_ranges: The current_version_ranges of this Annotation.
        :type current_version_ranges: AnnotationCurrentVersionRanges
        """

        self._current_version_ranges = current_version_ranges

    @property
    def data(self):
        """Gets the data of this Annotation.

        User-created data for this annotation.

        :return: The data of this Annotation.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Annotation.

        User-created data for this annotation.

        :param data: The data of this Annotation.
        :type data: str
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this Annotation.

        Indicates that this annotation is deleted.

        :return: The deleted of this Annotation.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Annotation.

        Indicates that this annotation is deleted.

        :param deleted: The deleted of this Annotation.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def highlight_style(self):
        """Gets the highlight_style of this Annotation.

        The highlight style for this annotation.

        :return: The highlight_style of this Annotation.
        :rtype: str
        """
        return self._highlight_style

    @highlight_style.setter
    def highlight_style(self, highlight_style):
        """Sets the highlight_style of this Annotation.

        The highlight style for this annotation.

        :param highlight_style: The highlight_style of this Annotation.
        :type highlight_style: str
        """

        self._highlight_style = highlight_style

    @property
    def id(self):
        """Gets the id of this Annotation.

        Id of this annotation, in the form of a GUID.

        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Annotation.

        Id of this annotation, in the form of a GUID.

        :param id: The id of this Annotation.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Annotation.

        Resource type.

        :return: The kind of this Annotation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Annotation.

        Resource type.

        :param kind: The kind of this Annotation.
        :type kind: str
        """

        self._kind = kind

    @property
    def layer_id(self):
        """Gets the layer_id of this Annotation.

        The layer this annotation is for.

        :return: The layer_id of this Annotation.
        :rtype: str
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this Annotation.

        The layer this annotation is for.

        :param layer_id: The layer_id of this Annotation.
        :type layer_id: str
        """

        self._layer_id = layer_id

    @property
    def layer_summary(self):
        """Gets the layer_summary of this Annotation.


        :return: The layer_summary of this Annotation.
        :rtype: AnnotationLayerSummary
        """
        return self._layer_summary

    @layer_summary.setter
    def layer_summary(self, layer_summary):
        """Sets the layer_summary of this Annotation.


        :param layer_summary: The layer_summary of this Annotation.
        :type layer_summary: AnnotationLayerSummary
        """

        self._layer_summary = layer_summary

    @property
    def page_ids(self):
        """Gets the page_ids of this Annotation.

        Pages that this annotation spans.

        :return: The page_ids of this Annotation.
        :rtype: List[str]
        """
        return self._page_ids

    @page_ids.setter
    def page_ids(self, page_ids):
        """Sets the page_ids of this Annotation.

        Pages that this annotation spans.

        :param page_ids: The page_ids of this Annotation.
        :type page_ids: List[str]
        """

        self._page_ids = page_ids

    @property
    def selected_text(self):
        """Gets the selected_text of this Annotation.

        Excerpt from the volume.

        :return: The selected_text of this Annotation.
        :rtype: str
        """
        return self._selected_text

    @selected_text.setter
    def selected_text(self, selected_text):
        """Sets the selected_text of this Annotation.

        Excerpt from the volume.

        :param selected_text: The selected_text of this Annotation.
        :type selected_text: str
        """

        self._selected_text = selected_text

    @property
    def self_link(self):
        """Gets the self_link of this Annotation.

        URL to this resource.

        :return: The self_link of this Annotation.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Annotation.

        URL to this resource.

        :param self_link: The self_link of this Annotation.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def updated(self):
        """Gets the updated of this Annotation.

        Timestamp for the last time this annotation was modified.

        :return: The updated of this Annotation.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Annotation.

        Timestamp for the last time this annotation was modified.

        :param updated: The updated of this Annotation.
        :type updated: str
        """

        self._updated = updated

    @property
    def volume_id(self):
        """Gets the volume_id of this Annotation.

        The volume that this annotation belongs to.

        :return: The volume_id of this Annotation.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this Annotation.

        The volume that this annotation belongs to.

        :param volume_id: The volume_id of this Annotation.
        :type volume_id: str
        """

        self._volume_id = volume_id
