# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discoveryclusters_clusters_inner_banner_with_content_container import DiscoveryclustersClustersInnerBannerWithContentContainer
from openapi_server.models.volume import Volume
from openapi_server import util


class DiscoveryclustersClustersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, banner_with_content_container: DiscoveryclustersClustersInnerBannerWithContentContainer=None, sub_title: str=None, title: str=None, total_volumes: int=None, uid: str=None, volumes: List[Volume]=None):
        """DiscoveryclustersClustersInner - a model defined in OpenAPI

        :param banner_with_content_container: The banner_with_content_container of this DiscoveryclustersClustersInner.
        :param sub_title: The sub_title of this DiscoveryclustersClustersInner.
        :param title: The title of this DiscoveryclustersClustersInner.
        :param total_volumes: The total_volumes of this DiscoveryclustersClustersInner.
        :param uid: The uid of this DiscoveryclustersClustersInner.
        :param volumes: The volumes of this DiscoveryclustersClustersInner.
        """
        self.openapi_types = {
            'banner_with_content_container': DiscoveryclustersClustersInnerBannerWithContentContainer,
            'sub_title': str,
            'title': str,
            'total_volumes': int,
            'uid': str,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'banner_with_content_container': 'banner_with_content_container',
            'sub_title': 'subTitle',
            'title': 'title',
            'total_volumes': 'totalVolumes',
            'uid': 'uid',
            'volumes': 'volumes'
        }

        self._banner_with_content_container = banner_with_content_container
        self._sub_title = sub_title
        self._title = title
        self._total_volumes = total_volumes
        self._uid = uid
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveryclustersClustersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Discoveryclusters_clusters_inner of this DiscoveryclustersClustersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banner_with_content_container(self):
        """Gets the banner_with_content_container of this DiscoveryclustersClustersInner.


        :return: The banner_with_content_container of this DiscoveryclustersClustersInner.
        :rtype: DiscoveryclustersClustersInnerBannerWithContentContainer
        """
        return self._banner_with_content_container

    @banner_with_content_container.setter
    def banner_with_content_container(self, banner_with_content_container):
        """Sets the banner_with_content_container of this DiscoveryclustersClustersInner.


        :param banner_with_content_container: The banner_with_content_container of this DiscoveryclustersClustersInner.
        :type banner_with_content_container: DiscoveryclustersClustersInnerBannerWithContentContainer
        """

        self._banner_with_content_container = banner_with_content_container

    @property
    def sub_title(self):
        """Gets the sub_title of this DiscoveryclustersClustersInner.


        :return: The sub_title of this DiscoveryclustersClustersInner.
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this DiscoveryclustersClustersInner.


        :param sub_title: The sub_title of this DiscoveryclustersClustersInner.
        :type sub_title: str
        """

        self._sub_title = sub_title

    @property
    def title(self):
        """Gets the title of this DiscoveryclustersClustersInner.


        :return: The title of this DiscoveryclustersClustersInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DiscoveryclustersClustersInner.


        :param title: The title of this DiscoveryclustersClustersInner.
        :type title: str
        """

        self._title = title

    @property
    def total_volumes(self):
        """Gets the total_volumes of this DiscoveryclustersClustersInner.


        :return: The total_volumes of this DiscoveryclustersClustersInner.
        :rtype: int
        """
        return self._total_volumes

    @total_volumes.setter
    def total_volumes(self, total_volumes):
        """Sets the total_volumes of this DiscoveryclustersClustersInner.


        :param total_volumes: The total_volumes of this DiscoveryclustersClustersInner.
        :type total_volumes: int
        """

        self._total_volumes = total_volumes

    @property
    def uid(self):
        """Gets the uid of this DiscoveryclustersClustersInner.


        :return: The uid of this DiscoveryclustersClustersInner.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DiscoveryclustersClustersInner.


        :param uid: The uid of this DiscoveryclustersClustersInner.
        :type uid: str
        """

        self._uid = uid

    @property
    def volumes(self):
        """Gets the volumes of this DiscoveryclustersClustersInner.


        :return: The volumes of this DiscoveryclustersClustersInner.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this DiscoveryclustersClustersInner.


        :param volumes: The volumes of this DiscoveryclustersClustersInner.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
