/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestAccessData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestAccessData::OAIRequestAccessData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestAccessData::OAIRequestAccessData() {
    this->initializeModel();
}

OAIRequestAccessData::~OAIRequestAccessData() {}

void OAIRequestAccessData::initializeModel() {

    m_concurrent_access_isSet = false;
    m_concurrent_access_isValid = false;

    m_download_access_isSet = false;
    m_download_access_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIRequestAccessData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestAccessData::fromJsonObject(QJsonObject json) {

    m_concurrent_access_isValid = ::OpenAPI::fromJsonValue(m_concurrent_access, json[QString("concurrentAccess")]);
    m_concurrent_access_isSet = !json[QString("concurrentAccess")].isNull() && m_concurrent_access_isValid;

    m_download_access_isValid = ::OpenAPI::fromJsonValue(m_download_access, json[QString("downloadAccess")]);
    m_download_access_isSet = !json[QString("downloadAccess")].isNull() && m_download_access_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIRequestAccessData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestAccessData::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_access.isSet()) {
        obj.insert(QString("concurrentAccess"), ::OpenAPI::toJsonValue(m_concurrent_access));
    }
    if (m_download_access.isSet()) {
        obj.insert(QString("downloadAccess"), ::OpenAPI::toJsonValue(m_download_access));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

OAIConcurrentAccessRestriction OAIRequestAccessData::getConcurrentAccess() const {
    return m_concurrent_access;
}
void OAIRequestAccessData::setConcurrentAccess(const OAIConcurrentAccessRestriction &concurrent_access) {
    m_concurrent_access = concurrent_access;
    m_concurrent_access_isSet = true;
}

bool OAIRequestAccessData::is_concurrent_access_Set() const{
    return m_concurrent_access_isSet;
}

bool OAIRequestAccessData::is_concurrent_access_Valid() const{
    return m_concurrent_access_isValid;
}

OAIDownloadAccessRestriction OAIRequestAccessData::getDownloadAccess() const {
    return m_download_access;
}
void OAIRequestAccessData::setDownloadAccess(const OAIDownloadAccessRestriction &download_access) {
    m_download_access = download_access;
    m_download_access_isSet = true;
}

bool OAIRequestAccessData::is_download_access_Set() const{
    return m_download_access_isSet;
}

bool OAIRequestAccessData::is_download_access_Valid() const{
    return m_download_access_isValid;
}

QString OAIRequestAccessData::getKind() const {
    return m_kind;
}
void OAIRequestAccessData::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRequestAccessData::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRequestAccessData::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIRequestAccessData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestAccessData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
