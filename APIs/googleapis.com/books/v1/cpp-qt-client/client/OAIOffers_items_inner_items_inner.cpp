/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffers_items_inner_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffers_items_inner_items_inner::OAIOffers_items_inner_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffers_items_inner_items_inner::OAIOffers_items_inner_items_inner() {
    this->initializeModel();
}

OAIOffers_items_inner_items_inner::~OAIOffers_items_inner_items_inner() {}

void OAIOffers_items_inner_items_inner::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_canonical_volume_link_isSet = false;
    m_canonical_volume_link_isValid = false;

    m_cover_url_isSet = false;
    m_cover_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIOffers_items_inner_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffers_items_inner_items_inner::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_canonical_volume_link_isValid = ::OpenAPI::fromJsonValue(m_canonical_volume_link, json[QString("canonicalVolumeLink")]);
    m_canonical_volume_link_isSet = !json[QString("canonicalVolumeLink")].isNull() && m_canonical_volume_link_isValid;

    m_cover_url_isValid = ::OpenAPI::fromJsonValue(m_cover_url, json[QString("coverUrl")]);
    m_cover_url_isSet = !json[QString("coverUrl")].isNull() && m_cover_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIOffers_items_inner_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffers_items_inner_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_canonical_volume_link_isSet) {
        obj.insert(QString("canonicalVolumeLink"), ::OpenAPI::toJsonValue(m_canonical_volume_link));
    }
    if (m_cover_url_isSet) {
        obj.insert(QString("coverUrl"), ::OpenAPI::toJsonValue(m_cover_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAIOffers_items_inner_items_inner::getAuthor() const {
    return m_author;
}
void OAIOffers_items_inner_items_inner::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_author_Set() const{
    return m_author_isSet;
}

bool OAIOffers_items_inner_items_inner::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIOffers_items_inner_items_inner::getCanonicalVolumeLink() const {
    return m_canonical_volume_link;
}
void OAIOffers_items_inner_items_inner::setCanonicalVolumeLink(const QString &canonical_volume_link) {
    m_canonical_volume_link = canonical_volume_link;
    m_canonical_volume_link_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_canonical_volume_link_Set() const{
    return m_canonical_volume_link_isSet;
}

bool OAIOffers_items_inner_items_inner::is_canonical_volume_link_Valid() const{
    return m_canonical_volume_link_isValid;
}

QString OAIOffers_items_inner_items_inner::getCoverUrl() const {
    return m_cover_url;
}
void OAIOffers_items_inner_items_inner::setCoverUrl(const QString &cover_url) {
    m_cover_url = cover_url;
    m_cover_url_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_cover_url_Set() const{
    return m_cover_url_isSet;
}

bool OAIOffers_items_inner_items_inner::is_cover_url_Valid() const{
    return m_cover_url_isValid;
}

QString OAIOffers_items_inner_items_inner::getDescription() const {
    return m_description;
}
void OAIOffers_items_inner_items_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOffers_items_inner_items_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOffers_items_inner_items_inner::getTitle() const {
    return m_title;
}
void OAIOffers_items_inner_items_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOffers_items_inner_items_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIOffers_items_inner_items_inner::getVolumeId() const {
    return m_volume_id;
}
void OAIOffers_items_inner_items_inner::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIOffers_items_inner_items_inner::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIOffers_items_inner_items_inner::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIOffers_items_inner_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_volume_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffers_items_inner_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
