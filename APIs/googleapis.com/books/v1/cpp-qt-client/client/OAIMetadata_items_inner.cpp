/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata_items_inner::OAIMetadata_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata_items_inner::OAIMetadata_items_inner() {
    this->initializeModel();
}

OAIMetadata_items_inner::~OAIMetadata_items_inner() {}

void OAIMetadata_items_inner::initializeModel() {

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_encrypted_key_isSet = false;
    m_encrypted_key_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMetadata_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata_items_inner::fromJsonObject(QJsonObject json) {

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_encrypted_key_isValid = ::OpenAPI::fromJsonValue(m_encrypted_key, json[QString("encrypted_key")]);
    m_encrypted_key_isSet = !json[QString("encrypted_key")].isNull() && m_encrypted_key_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMetadata_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_encrypted_key_isSet) {
        obj.insert(QString("encrypted_key"), ::OpenAPI::toJsonValue(m_encrypted_key));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIMetadata_items_inner::getDownloadUrl() const {
    return m_download_url;
}
void OAIMetadata_items_inner::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIMetadata_items_inner::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIMetadata_items_inner::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIMetadata_items_inner::getEncryptedKey() const {
    return m_encrypted_key;
}
void OAIMetadata_items_inner::setEncryptedKey(const QString &encrypted_key) {
    m_encrypted_key = encrypted_key;
    m_encrypted_key_isSet = true;
}

bool OAIMetadata_items_inner::is_encrypted_key_Set() const{
    return m_encrypted_key_isSet;
}

bool OAIMetadata_items_inner::is_encrypted_key_Valid() const{
    return m_encrypted_key_isValid;
}

QString OAIMetadata_items_inner::getLanguage() const {
    return m_language;
}
void OAIMetadata_items_inner::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMetadata_items_inner::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMetadata_items_inner::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIMetadata_items_inner::getSize() const {
    return m_size;
}
void OAIMetadata_items_inner::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIMetadata_items_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIMetadata_items_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIMetadata_items_inner::getVersion() const {
    return m_version;
}
void OAIMetadata_items_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMetadata_items_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMetadata_items_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMetadata_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
