/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_crm_experiment_ids_isSet = false;
    m_crm_experiment_ids_isValid = false;

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_dont_show_notification_isSet = false;
    m_dont_show_notification_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_is_document_mature_isSet = false;
    m_is_document_mature_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_notification_group_isSet = false;
    m_notification_group_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_pcampaign_id_isSet = false;
    m_pcampaign_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_show_notification_settings_action_isSet = false;
    m_show_notification_settings_action_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;

    m_time_to_expire_ms_isSet = false;
    m_time_to_expire_ms_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_crm_experiment_ids_isValid = ::OpenAPI::fromJsonValue(m_crm_experiment_ids, json[QString("crmExperimentIds")]);
    m_crm_experiment_ids_isSet = !json[QString("crmExperimentIds")].isNull() && m_crm_experiment_ids_isValid;

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("doc_id")]);
    m_doc_id_isSet = !json[QString("doc_id")].isNull() && m_doc_id_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("doc_type")]);
    m_doc_type_isSet = !json[QString("doc_type")].isNull() && m_doc_type_isValid;

    m_dont_show_notification_isValid = ::OpenAPI::fromJsonValue(m_dont_show_notification, json[QString("dont_show_notification")]);
    m_dont_show_notification_isSet = !json[QString("dont_show_notification")].isNull() && m_dont_show_notification_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_is_document_mature_isValid = ::OpenAPI::fromJsonValue(m_is_document_mature, json[QString("is_document_mature")]);
    m_is_document_mature_isSet = !json[QString("is_document_mature")].isNull() && m_is_document_mature_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_notification_group_isValid = ::OpenAPI::fromJsonValue(m_notification_group, json[QString("notificationGroup")]);
    m_notification_group_isSet = !json[QString("notificationGroup")].isNull() && m_notification_group_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notification_type")]);
    m_notification_type_isSet = !json[QString("notification_type")].isNull() && m_notification_type_isValid;

    m_pcampaign_id_isValid = ::OpenAPI::fromJsonValue(m_pcampaign_id, json[QString("pcampaign_id")]);
    m_pcampaign_id_isSet = !json[QString("pcampaign_id")].isNull() && m_pcampaign_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_show_notification_settings_action_isValid = ::OpenAPI::fromJsonValue(m_show_notification_settings_action, json[QString("show_notification_settings_action")]);
    m_show_notification_settings_action_isSet = !json[QString("show_notification_settings_action")].isNull() && m_show_notification_settings_action_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;

    m_time_to_expire_ms_isValid = ::OpenAPI::fromJsonValue(m_time_to_expire_ms, json[QString("timeToExpireMs")]);
    m_time_to_expire_ms_isSet = !json[QString("timeToExpireMs")].isNull() && m_time_to_expire_ms_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_crm_experiment_ids.size() > 0) {
        obj.insert(QString("crmExperimentIds"), ::OpenAPI::toJsonValue(m_crm_experiment_ids));
    }
    if (m_doc_id_isSet) {
        obj.insert(QString("doc_id"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("doc_type"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_dont_show_notification_isSet) {
        obj.insert(QString("dont_show_notification"), ::OpenAPI::toJsonValue(m_dont_show_notification));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_is_document_mature_isSet) {
        obj.insert(QString("is_document_mature"), ::OpenAPI::toJsonValue(m_is_document_mature));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_notification_group_isSet) {
        obj.insert(QString("notificationGroup"), ::OpenAPI::toJsonValue(m_notification_group));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notification_type"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_pcampaign_id_isSet) {
        obj.insert(QString("pcampaign_id"), ::OpenAPI::toJsonValue(m_pcampaign_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_show_notification_settings_action_isSet) {
        obj.insert(QString("show_notification_settings_action"), ::OpenAPI::toJsonValue(m_show_notification_settings_action));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    if (m_time_to_expire_ms_isSet) {
        obj.insert(QString("timeToExpireMs"), ::OpenAPI::toJsonValue(m_time_to_expire_ms));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAINotification::getBody() const {
    return m_body;
}
void OAINotification::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINotification::is_body_Set() const{
    return m_body_isSet;
}

bool OAINotification::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAINotification::getCrmExperimentIds() const {
    return m_crm_experiment_ids;
}
void OAINotification::setCrmExperimentIds(const QList<QString> &crm_experiment_ids) {
    m_crm_experiment_ids = crm_experiment_ids;
    m_crm_experiment_ids_isSet = true;
}

bool OAINotification::is_crm_experiment_ids_Set() const{
    return m_crm_experiment_ids_isSet;
}

bool OAINotification::is_crm_experiment_ids_Valid() const{
    return m_crm_experiment_ids_isValid;
}

QString OAINotification::getDocId() const {
    return m_doc_id;
}
void OAINotification::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAINotification::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAINotification::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

QString OAINotification::getDocType() const {
    return m_doc_type;
}
void OAINotification::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAINotification::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAINotification::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

bool OAINotification::isDontShowNotification() const {
    return m_dont_show_notification;
}
void OAINotification::setDontShowNotification(const bool &dont_show_notification) {
    m_dont_show_notification = dont_show_notification;
    m_dont_show_notification_isSet = true;
}

bool OAINotification::is_dont_show_notification_Set() const{
    return m_dont_show_notification_isSet;
}

bool OAINotification::is_dont_show_notification_Valid() const{
    return m_dont_show_notification_isValid;
}

QString OAINotification::getIconUrl() const {
    return m_icon_url;
}
void OAINotification::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAINotification::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAINotification::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

bool OAINotification::isIsDocumentMature() const {
    return m_is_document_mature;
}
void OAINotification::setIsDocumentMature(const bool &is_document_mature) {
    m_is_document_mature = is_document_mature;
    m_is_document_mature_isSet = true;
}

bool OAINotification::is_is_document_mature_Set() const{
    return m_is_document_mature_isSet;
}

bool OAINotification::is_is_document_mature_Valid() const{
    return m_is_document_mature_isValid;
}

QString OAINotification::getKind() const {
    return m_kind;
}
void OAINotification::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINotification::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINotification::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAINotification::getNotificationGroup() const {
    return m_notification_group;
}
void OAINotification::setNotificationGroup(const QString &notification_group) {
    m_notification_group = notification_group;
    m_notification_group_isSet = true;
}

bool OAINotification::is_notification_group_Set() const{
    return m_notification_group_isSet;
}

bool OAINotification::is_notification_group_Valid() const{
    return m_notification_group_isValid;
}

QString OAINotification::getNotificationType() const {
    return m_notification_type;
}
void OAINotification::setNotificationType(const QString &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAINotification::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAINotification::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAINotification::getPcampaignId() const {
    return m_pcampaign_id;
}
void OAINotification::setPcampaignId(const QString &pcampaign_id) {
    m_pcampaign_id = pcampaign_id;
    m_pcampaign_id_isSet = true;
}

bool OAINotification::is_pcampaign_id_Set() const{
    return m_pcampaign_id_isSet;
}

bool OAINotification::is_pcampaign_id_Valid() const{
    return m_pcampaign_id_isValid;
}

QString OAINotification::getReason() const {
    return m_reason;
}
void OAINotification::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAINotification::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAINotification::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAINotification::isShowNotificationSettingsAction() const {
    return m_show_notification_settings_action;
}
void OAINotification::setShowNotificationSettingsAction(const bool &show_notification_settings_action) {
    m_show_notification_settings_action = show_notification_settings_action;
    m_show_notification_settings_action_isSet = true;
}

bool OAINotification::is_show_notification_settings_action_Set() const{
    return m_show_notification_settings_action_isSet;
}

bool OAINotification::is_show_notification_settings_action_Valid() const{
    return m_show_notification_settings_action_isValid;
}

QString OAINotification::getTargetUrl() const {
    return m_target_url;
}
void OAINotification::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAINotification::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAINotification::is_target_url_Valid() const{
    return m_target_url_isValid;
}

QString OAINotification::getTimeToExpireMs() const {
    return m_time_to_expire_ms;
}
void OAINotification::setTimeToExpireMs(const QString &time_to_expire_ms) {
    m_time_to_expire_ms = time_to_expire_ms;
    m_time_to_expire_ms_isSet = true;
}

bool OAINotification::is_time_to_expire_ms_Set() const{
    return m_time_to_expire_ms_isSet;
}

bool OAINotification::is_time_to_expire_ms_Valid() const{
    return m_time_to_expire_ms_isValid;
}

QString OAINotification::getTitle() const {
    return m_title;
}
void OAINotification::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINotification::is_title_Set() const{
    return m_title_isSet;
}

bool OAINotification::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_experiment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_show_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_document_mature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcampaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_notification_settings_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_expire_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
