/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_accessInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_accessInfo::OAIVolume_accessInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_accessInfo::OAIVolume_accessInfo() {
    this->initializeModel();
}

OAIVolume_accessInfo::~OAIVolume_accessInfo() {}

void OAIVolume_accessInfo::initializeModel() {

    m_access_view_status_isSet = false;
    m_access_view_status_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_download_access_isSet = false;
    m_download_access_isValid = false;

    m_drive_imported_content_link_isSet = false;
    m_drive_imported_content_link_isValid = false;

    m_embeddable_isSet = false;
    m_embeddable_isValid = false;

    m_epub_isSet = false;
    m_epub_isValid = false;

    m_explicit_offline_license_management_isSet = false;
    m_explicit_offline_license_management_isValid = false;

    m_pdf_isSet = false;
    m_pdf_isValid = false;

    m_public_domain_isSet = false;
    m_public_domain_isValid = false;

    m_quote_sharing_allowed_isSet = false;
    m_quote_sharing_allowed_isValid = false;

    m_text_to_speech_permission_isSet = false;
    m_text_to_speech_permission_isValid = false;

    m_view_order_url_isSet = false;
    m_view_order_url_isValid = false;

    m_viewability_isSet = false;
    m_viewability_isValid = false;

    m_web_reader_link_isSet = false;
    m_web_reader_link_isValid = false;
}

void OAIVolume_accessInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_accessInfo::fromJsonObject(QJsonObject json) {

    m_access_view_status_isValid = ::OpenAPI::fromJsonValue(m_access_view_status, json[QString("accessViewStatus")]);
    m_access_view_status_isSet = !json[QString("accessViewStatus")].isNull() && m_access_view_status_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_download_access_isValid = ::OpenAPI::fromJsonValue(m_download_access, json[QString("downloadAccess")]);
    m_download_access_isSet = !json[QString("downloadAccess")].isNull() && m_download_access_isValid;

    m_drive_imported_content_link_isValid = ::OpenAPI::fromJsonValue(m_drive_imported_content_link, json[QString("driveImportedContentLink")]);
    m_drive_imported_content_link_isSet = !json[QString("driveImportedContentLink")].isNull() && m_drive_imported_content_link_isValid;

    m_embeddable_isValid = ::OpenAPI::fromJsonValue(m_embeddable, json[QString("embeddable")]);
    m_embeddable_isSet = !json[QString("embeddable")].isNull() && m_embeddable_isValid;

    m_epub_isValid = ::OpenAPI::fromJsonValue(m_epub, json[QString("epub")]);
    m_epub_isSet = !json[QString("epub")].isNull() && m_epub_isValid;

    m_explicit_offline_license_management_isValid = ::OpenAPI::fromJsonValue(m_explicit_offline_license_management, json[QString("explicitOfflineLicenseManagement")]);
    m_explicit_offline_license_management_isSet = !json[QString("explicitOfflineLicenseManagement")].isNull() && m_explicit_offline_license_management_isValid;

    m_pdf_isValid = ::OpenAPI::fromJsonValue(m_pdf, json[QString("pdf")]);
    m_pdf_isSet = !json[QString("pdf")].isNull() && m_pdf_isValid;

    m_public_domain_isValid = ::OpenAPI::fromJsonValue(m_public_domain, json[QString("publicDomain")]);
    m_public_domain_isSet = !json[QString("publicDomain")].isNull() && m_public_domain_isValid;

    m_quote_sharing_allowed_isValid = ::OpenAPI::fromJsonValue(m_quote_sharing_allowed, json[QString("quoteSharingAllowed")]);
    m_quote_sharing_allowed_isSet = !json[QString("quoteSharingAllowed")].isNull() && m_quote_sharing_allowed_isValid;

    m_text_to_speech_permission_isValid = ::OpenAPI::fromJsonValue(m_text_to_speech_permission, json[QString("textToSpeechPermission")]);
    m_text_to_speech_permission_isSet = !json[QString("textToSpeechPermission")].isNull() && m_text_to_speech_permission_isValid;

    m_view_order_url_isValid = ::OpenAPI::fromJsonValue(m_view_order_url, json[QString("viewOrderUrl")]);
    m_view_order_url_isSet = !json[QString("viewOrderUrl")].isNull() && m_view_order_url_isValid;

    m_viewability_isValid = ::OpenAPI::fromJsonValue(m_viewability, json[QString("viewability")]);
    m_viewability_isSet = !json[QString("viewability")].isNull() && m_viewability_isValid;

    m_web_reader_link_isValid = ::OpenAPI::fromJsonValue(m_web_reader_link, json[QString("webReaderLink")]);
    m_web_reader_link_isSet = !json[QString("webReaderLink")].isNull() && m_web_reader_link_isValid;
}

QString OAIVolume_accessInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_accessInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_access_view_status_isSet) {
        obj.insert(QString("accessViewStatus"), ::OpenAPI::toJsonValue(m_access_view_status));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_download_access.isSet()) {
        obj.insert(QString("downloadAccess"), ::OpenAPI::toJsonValue(m_download_access));
    }
    if (m_drive_imported_content_link_isSet) {
        obj.insert(QString("driveImportedContentLink"), ::OpenAPI::toJsonValue(m_drive_imported_content_link));
    }
    if (m_embeddable_isSet) {
        obj.insert(QString("embeddable"), ::OpenAPI::toJsonValue(m_embeddable));
    }
    if (m_epub.isSet()) {
        obj.insert(QString("epub"), ::OpenAPI::toJsonValue(m_epub));
    }
    if (m_explicit_offline_license_management_isSet) {
        obj.insert(QString("explicitOfflineLicenseManagement"), ::OpenAPI::toJsonValue(m_explicit_offline_license_management));
    }
    if (m_pdf.isSet()) {
        obj.insert(QString("pdf"), ::OpenAPI::toJsonValue(m_pdf));
    }
    if (m_public_domain_isSet) {
        obj.insert(QString("publicDomain"), ::OpenAPI::toJsonValue(m_public_domain));
    }
    if (m_quote_sharing_allowed_isSet) {
        obj.insert(QString("quoteSharingAllowed"), ::OpenAPI::toJsonValue(m_quote_sharing_allowed));
    }
    if (m_text_to_speech_permission_isSet) {
        obj.insert(QString("textToSpeechPermission"), ::OpenAPI::toJsonValue(m_text_to_speech_permission));
    }
    if (m_view_order_url_isSet) {
        obj.insert(QString("viewOrderUrl"), ::OpenAPI::toJsonValue(m_view_order_url));
    }
    if (m_viewability_isSet) {
        obj.insert(QString("viewability"), ::OpenAPI::toJsonValue(m_viewability));
    }
    if (m_web_reader_link_isSet) {
        obj.insert(QString("webReaderLink"), ::OpenAPI::toJsonValue(m_web_reader_link));
    }
    return obj;
}

QString OAIVolume_accessInfo::getAccessViewStatus() const {
    return m_access_view_status;
}
void OAIVolume_accessInfo::setAccessViewStatus(const QString &access_view_status) {
    m_access_view_status = access_view_status;
    m_access_view_status_isSet = true;
}

bool OAIVolume_accessInfo::is_access_view_status_Set() const{
    return m_access_view_status_isSet;
}

bool OAIVolume_accessInfo::is_access_view_status_Valid() const{
    return m_access_view_status_isValid;
}

QString OAIVolume_accessInfo::getCountry() const {
    return m_country;
}
void OAIVolume_accessInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIVolume_accessInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIVolume_accessInfo::is_country_Valid() const{
    return m_country_isValid;
}

OAIDownloadAccessRestriction OAIVolume_accessInfo::getDownloadAccess() const {
    return m_download_access;
}
void OAIVolume_accessInfo::setDownloadAccess(const OAIDownloadAccessRestriction &download_access) {
    m_download_access = download_access;
    m_download_access_isSet = true;
}

bool OAIVolume_accessInfo::is_download_access_Set() const{
    return m_download_access_isSet;
}

bool OAIVolume_accessInfo::is_download_access_Valid() const{
    return m_download_access_isValid;
}

QString OAIVolume_accessInfo::getDriveImportedContentLink() const {
    return m_drive_imported_content_link;
}
void OAIVolume_accessInfo::setDriveImportedContentLink(const QString &drive_imported_content_link) {
    m_drive_imported_content_link = drive_imported_content_link;
    m_drive_imported_content_link_isSet = true;
}

bool OAIVolume_accessInfo::is_drive_imported_content_link_Set() const{
    return m_drive_imported_content_link_isSet;
}

bool OAIVolume_accessInfo::is_drive_imported_content_link_Valid() const{
    return m_drive_imported_content_link_isValid;
}

bool OAIVolume_accessInfo::isEmbeddable() const {
    return m_embeddable;
}
void OAIVolume_accessInfo::setEmbeddable(const bool &embeddable) {
    m_embeddable = embeddable;
    m_embeddable_isSet = true;
}

bool OAIVolume_accessInfo::is_embeddable_Set() const{
    return m_embeddable_isSet;
}

bool OAIVolume_accessInfo::is_embeddable_Valid() const{
    return m_embeddable_isValid;
}

OAIVolume_accessInfo_epub OAIVolume_accessInfo::getEpub() const {
    return m_epub;
}
void OAIVolume_accessInfo::setEpub(const OAIVolume_accessInfo_epub &epub) {
    m_epub = epub;
    m_epub_isSet = true;
}

bool OAIVolume_accessInfo::is_epub_Set() const{
    return m_epub_isSet;
}

bool OAIVolume_accessInfo::is_epub_Valid() const{
    return m_epub_isValid;
}

bool OAIVolume_accessInfo::isExplicitOfflineLicenseManagement() const {
    return m_explicit_offline_license_management;
}
void OAIVolume_accessInfo::setExplicitOfflineLicenseManagement(const bool &explicit_offline_license_management) {
    m_explicit_offline_license_management = explicit_offline_license_management;
    m_explicit_offline_license_management_isSet = true;
}

bool OAIVolume_accessInfo::is_explicit_offline_license_management_Set() const{
    return m_explicit_offline_license_management_isSet;
}

bool OAIVolume_accessInfo::is_explicit_offline_license_management_Valid() const{
    return m_explicit_offline_license_management_isValid;
}

OAIVolume_accessInfo_pdf OAIVolume_accessInfo::getPdf() const {
    return m_pdf;
}
void OAIVolume_accessInfo::setPdf(const OAIVolume_accessInfo_pdf &pdf) {
    m_pdf = pdf;
    m_pdf_isSet = true;
}

bool OAIVolume_accessInfo::is_pdf_Set() const{
    return m_pdf_isSet;
}

bool OAIVolume_accessInfo::is_pdf_Valid() const{
    return m_pdf_isValid;
}

bool OAIVolume_accessInfo::isPublicDomain() const {
    return m_public_domain;
}
void OAIVolume_accessInfo::setPublicDomain(const bool &public_domain) {
    m_public_domain = public_domain;
    m_public_domain_isSet = true;
}

bool OAIVolume_accessInfo::is_public_domain_Set() const{
    return m_public_domain_isSet;
}

bool OAIVolume_accessInfo::is_public_domain_Valid() const{
    return m_public_domain_isValid;
}

bool OAIVolume_accessInfo::isQuoteSharingAllowed() const {
    return m_quote_sharing_allowed;
}
void OAIVolume_accessInfo::setQuoteSharingAllowed(const bool &quote_sharing_allowed) {
    m_quote_sharing_allowed = quote_sharing_allowed;
    m_quote_sharing_allowed_isSet = true;
}

bool OAIVolume_accessInfo::is_quote_sharing_allowed_Set() const{
    return m_quote_sharing_allowed_isSet;
}

bool OAIVolume_accessInfo::is_quote_sharing_allowed_Valid() const{
    return m_quote_sharing_allowed_isValid;
}

QString OAIVolume_accessInfo::getTextToSpeechPermission() const {
    return m_text_to_speech_permission;
}
void OAIVolume_accessInfo::setTextToSpeechPermission(const QString &text_to_speech_permission) {
    m_text_to_speech_permission = text_to_speech_permission;
    m_text_to_speech_permission_isSet = true;
}

bool OAIVolume_accessInfo::is_text_to_speech_permission_Set() const{
    return m_text_to_speech_permission_isSet;
}

bool OAIVolume_accessInfo::is_text_to_speech_permission_Valid() const{
    return m_text_to_speech_permission_isValid;
}

QString OAIVolume_accessInfo::getViewOrderUrl() const {
    return m_view_order_url;
}
void OAIVolume_accessInfo::setViewOrderUrl(const QString &view_order_url) {
    m_view_order_url = view_order_url;
    m_view_order_url_isSet = true;
}

bool OAIVolume_accessInfo::is_view_order_url_Set() const{
    return m_view_order_url_isSet;
}

bool OAIVolume_accessInfo::is_view_order_url_Valid() const{
    return m_view_order_url_isValid;
}

QString OAIVolume_accessInfo::getViewability() const {
    return m_viewability;
}
void OAIVolume_accessInfo::setViewability(const QString &viewability) {
    m_viewability = viewability;
    m_viewability_isSet = true;
}

bool OAIVolume_accessInfo::is_viewability_Set() const{
    return m_viewability_isSet;
}

bool OAIVolume_accessInfo::is_viewability_Valid() const{
    return m_viewability_isValid;
}

QString OAIVolume_accessInfo::getWebReaderLink() const {
    return m_web_reader_link;
}
void OAIVolume_accessInfo::setWebReaderLink(const QString &web_reader_link) {
    m_web_reader_link = web_reader_link;
    m_web_reader_link_isSet = true;
}

bool OAIVolume_accessInfo::is_web_reader_link_Set() const{
    return m_web_reader_link_isSet;
}

bool OAIVolume_accessInfo::is_web_reader_link_Valid() const{
    return m_web_reader_link_isValid;
}

bool OAIVolume_accessInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_view_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_imported_content_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embeddable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_offline_license_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_sharing_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_speech_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_order_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_reader_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_accessInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
