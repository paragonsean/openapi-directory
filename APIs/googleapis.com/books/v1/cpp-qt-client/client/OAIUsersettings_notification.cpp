/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersettings_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsersettings_notification::OAIUsersettings_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsersettings_notification::OAIUsersettings_notification() {
    this->initializeModel();
}

OAIUsersettings_notification::~OAIUsersettings_notification() {}

void OAIUsersettings_notification::initializeModel() {

    m_match_my_interests_isSet = false;
    m_match_my_interests_isValid = false;

    m_more_from_authors_isSet = false;
    m_more_from_authors_isValid = false;

    m_more_from_series_isSet = false;
    m_more_from_series_isValid = false;

    m_price_drop_isSet = false;
    m_price_drop_isValid = false;

    m_reward_expirations_isSet = false;
    m_reward_expirations_isValid = false;
}

void OAIUsersettings_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsersettings_notification::fromJsonObject(QJsonObject json) {

    m_match_my_interests_isValid = ::OpenAPI::fromJsonValue(m_match_my_interests, json[QString("matchMyInterests")]);
    m_match_my_interests_isSet = !json[QString("matchMyInterests")].isNull() && m_match_my_interests_isValid;

    m_more_from_authors_isValid = ::OpenAPI::fromJsonValue(m_more_from_authors, json[QString("moreFromAuthors")]);
    m_more_from_authors_isSet = !json[QString("moreFromAuthors")].isNull() && m_more_from_authors_isValid;

    m_more_from_series_isValid = ::OpenAPI::fromJsonValue(m_more_from_series, json[QString("moreFromSeries")]);
    m_more_from_series_isSet = !json[QString("moreFromSeries")].isNull() && m_more_from_series_isValid;

    m_price_drop_isValid = ::OpenAPI::fromJsonValue(m_price_drop, json[QString("priceDrop")]);
    m_price_drop_isSet = !json[QString("priceDrop")].isNull() && m_price_drop_isValid;

    m_reward_expirations_isValid = ::OpenAPI::fromJsonValue(m_reward_expirations, json[QString("rewardExpirations")]);
    m_reward_expirations_isSet = !json[QString("rewardExpirations")].isNull() && m_reward_expirations_isValid;
}

QString OAIUsersettings_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsersettings_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_match_my_interests.isSet()) {
        obj.insert(QString("matchMyInterests"), ::OpenAPI::toJsonValue(m_match_my_interests));
    }
    if (m_more_from_authors.isSet()) {
        obj.insert(QString("moreFromAuthors"), ::OpenAPI::toJsonValue(m_more_from_authors));
    }
    if (m_more_from_series.isSet()) {
        obj.insert(QString("moreFromSeries"), ::OpenAPI::toJsonValue(m_more_from_series));
    }
    if (m_price_drop.isSet()) {
        obj.insert(QString("priceDrop"), ::OpenAPI::toJsonValue(m_price_drop));
    }
    if (m_reward_expirations.isSet()) {
        obj.insert(QString("rewardExpirations"), ::OpenAPI::toJsonValue(m_reward_expirations));
    }
    return obj;
}

OAIUsersettings_notification_matchMyInterests OAIUsersettings_notification::getMatchMyInterests() const {
    return m_match_my_interests;
}
void OAIUsersettings_notification::setMatchMyInterests(const OAIUsersettings_notification_matchMyInterests &match_my_interests) {
    m_match_my_interests = match_my_interests;
    m_match_my_interests_isSet = true;
}

bool OAIUsersettings_notification::is_match_my_interests_Set() const{
    return m_match_my_interests_isSet;
}

bool OAIUsersettings_notification::is_match_my_interests_Valid() const{
    return m_match_my_interests_isValid;
}

OAIUsersettings_notification_matchMyInterests OAIUsersettings_notification::getMoreFromAuthors() const {
    return m_more_from_authors;
}
void OAIUsersettings_notification::setMoreFromAuthors(const OAIUsersettings_notification_matchMyInterests &more_from_authors) {
    m_more_from_authors = more_from_authors;
    m_more_from_authors_isSet = true;
}

bool OAIUsersettings_notification::is_more_from_authors_Set() const{
    return m_more_from_authors_isSet;
}

bool OAIUsersettings_notification::is_more_from_authors_Valid() const{
    return m_more_from_authors_isValid;
}

OAIUsersettings_notification_matchMyInterests OAIUsersettings_notification::getMoreFromSeries() const {
    return m_more_from_series;
}
void OAIUsersettings_notification::setMoreFromSeries(const OAIUsersettings_notification_matchMyInterests &more_from_series) {
    m_more_from_series = more_from_series;
    m_more_from_series_isSet = true;
}

bool OAIUsersettings_notification::is_more_from_series_Set() const{
    return m_more_from_series_isSet;
}

bool OAIUsersettings_notification::is_more_from_series_Valid() const{
    return m_more_from_series_isValid;
}

OAIUsersettings_notification_matchMyInterests OAIUsersettings_notification::getPriceDrop() const {
    return m_price_drop;
}
void OAIUsersettings_notification::setPriceDrop(const OAIUsersettings_notification_matchMyInterests &price_drop) {
    m_price_drop = price_drop;
    m_price_drop_isSet = true;
}

bool OAIUsersettings_notification::is_price_drop_Set() const{
    return m_price_drop_isSet;
}

bool OAIUsersettings_notification::is_price_drop_Valid() const{
    return m_price_drop_isValid;
}

OAIUsersettings_notification_matchMyInterests OAIUsersettings_notification::getRewardExpirations() const {
    return m_reward_expirations;
}
void OAIUsersettings_notification::setRewardExpirations(const OAIUsersettings_notification_matchMyInterests &reward_expirations) {
    m_reward_expirations = reward_expirations;
    m_reward_expirations_isSet = true;
}

bool OAIUsersettings_notification::is_reward_expirations_Set() const{
    return m_reward_expirations_isSet;
}

bool OAIUsersettings_notification::is_reward_expirations_Valid() const{
    return m_reward_expirations_isValid;
}

bool OAIUsersettings_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_my_interests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_from_authors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_from_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_drop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_expirations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsersettings_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
