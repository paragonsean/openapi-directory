/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryclusters_clusters_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryclusters_clusters_inner::OAIDiscoveryclusters_clusters_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryclusters_clusters_inner::OAIDiscoveryclusters_clusters_inner() {
    this->initializeModel();
}

OAIDiscoveryclusters_clusters_inner::~OAIDiscoveryclusters_clusters_inner() {}

void OAIDiscoveryclusters_clusters_inner::initializeModel() {

    m_banner_with_content_container_isSet = false;
    m_banner_with_content_container_isValid = false;

    m_sub_title_isSet = false;
    m_sub_title_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_volumes_isSet = false;
    m_total_volumes_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIDiscoveryclusters_clusters_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryclusters_clusters_inner::fromJsonObject(QJsonObject json) {

    m_banner_with_content_container_isValid = ::OpenAPI::fromJsonValue(m_banner_with_content_container, json[QString("banner_with_content_container")]);
    m_banner_with_content_container_isSet = !json[QString("banner_with_content_container")].isNull() && m_banner_with_content_container_isValid;

    m_sub_title_isValid = ::OpenAPI::fromJsonValue(m_sub_title, json[QString("subTitle")]);
    m_sub_title_isSet = !json[QString("subTitle")].isNull() && m_sub_title_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_volumes_isValid = ::OpenAPI::fromJsonValue(m_total_volumes, json[QString("totalVolumes")]);
    m_total_volumes_isSet = !json[QString("totalVolumes")].isNull() && m_total_volumes_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIDiscoveryclusters_clusters_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryclusters_clusters_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_banner_with_content_container.isSet()) {
        obj.insert(QString("banner_with_content_container"), ::OpenAPI::toJsonValue(m_banner_with_content_container));
    }
    if (m_sub_title_isSet) {
        obj.insert(QString("subTitle"), ::OpenAPI::toJsonValue(m_sub_title));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_volumes_isSet) {
        obj.insert(QString("totalVolumes"), ::OpenAPI::toJsonValue(m_total_volumes));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

OAIDiscoveryclusters_clusters_inner_banner_with_content_container OAIDiscoveryclusters_clusters_inner::getBannerWithContentContainer() const {
    return m_banner_with_content_container;
}
void OAIDiscoveryclusters_clusters_inner::setBannerWithContentContainer(const OAIDiscoveryclusters_clusters_inner_banner_with_content_container &banner_with_content_container) {
    m_banner_with_content_container = banner_with_content_container;
    m_banner_with_content_container_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_banner_with_content_container_Set() const{
    return m_banner_with_content_container_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_banner_with_content_container_Valid() const{
    return m_banner_with_content_container_isValid;
}

QString OAIDiscoveryclusters_clusters_inner::getSubTitle() const {
    return m_sub_title;
}
void OAIDiscoveryclusters_clusters_inner::setSubTitle(const QString &sub_title) {
    m_sub_title = sub_title;
    m_sub_title_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_sub_title_Set() const{
    return m_sub_title_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_sub_title_Valid() const{
    return m_sub_title_isValid;
}

QString OAIDiscoveryclusters_clusters_inner::getTitle() const {
    return m_title;
}
void OAIDiscoveryclusters_clusters_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIDiscoveryclusters_clusters_inner::getTotalVolumes() const {
    return m_total_volumes;
}
void OAIDiscoveryclusters_clusters_inner::setTotalVolumes(const qint32 &total_volumes) {
    m_total_volumes = total_volumes;
    m_total_volumes_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_total_volumes_Set() const{
    return m_total_volumes_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_total_volumes_Valid() const{
    return m_total_volumes_isValid;
}

QString OAIDiscoveryclusters_clusters_inner::getUid() const {
    return m_uid;
}
void OAIDiscoveryclusters_clusters_inner::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_uid_Valid() const{
    return m_uid_isValid;
}

QList<OAIVolume> OAIDiscoveryclusters_clusters_inner::getVolumes() const {
    return m_volumes;
}
void OAIDiscoveryclusters_clusters_inner::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIDiscoveryclusters_clusters_inner::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIDiscoveryclusters_clusters_inner::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIDiscoveryclusters_clusters_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_banner_with_content_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_volumes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryclusters_clusters_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
