/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_volumeInfo_panelizationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_volumeInfo_panelizationSummary::OAIVolume_volumeInfo_panelizationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_volumeInfo_panelizationSummary::OAIVolume_volumeInfo_panelizationSummary() {
    this->initializeModel();
}

OAIVolume_volumeInfo_panelizationSummary::~OAIVolume_volumeInfo_panelizationSummary() {}

void OAIVolume_volumeInfo_panelizationSummary::initializeModel() {

    m_contains_epub_bubbles_isSet = false;
    m_contains_epub_bubbles_isValid = false;

    m_contains_image_bubbles_isSet = false;
    m_contains_image_bubbles_isValid = false;

    m_epub_bubble_version_isSet = false;
    m_epub_bubble_version_isValid = false;

    m_image_bubble_version_isSet = false;
    m_image_bubble_version_isValid = false;
}

void OAIVolume_volumeInfo_panelizationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_volumeInfo_panelizationSummary::fromJsonObject(QJsonObject json) {

    m_contains_epub_bubbles_isValid = ::OpenAPI::fromJsonValue(m_contains_epub_bubbles, json[QString("containsEpubBubbles")]);
    m_contains_epub_bubbles_isSet = !json[QString("containsEpubBubbles")].isNull() && m_contains_epub_bubbles_isValid;

    m_contains_image_bubbles_isValid = ::OpenAPI::fromJsonValue(m_contains_image_bubbles, json[QString("containsImageBubbles")]);
    m_contains_image_bubbles_isSet = !json[QString("containsImageBubbles")].isNull() && m_contains_image_bubbles_isValid;

    m_epub_bubble_version_isValid = ::OpenAPI::fromJsonValue(m_epub_bubble_version, json[QString("epubBubbleVersion")]);
    m_epub_bubble_version_isSet = !json[QString("epubBubbleVersion")].isNull() && m_epub_bubble_version_isValid;

    m_image_bubble_version_isValid = ::OpenAPI::fromJsonValue(m_image_bubble_version, json[QString("imageBubbleVersion")]);
    m_image_bubble_version_isSet = !json[QString("imageBubbleVersion")].isNull() && m_image_bubble_version_isValid;
}

QString OAIVolume_volumeInfo_panelizationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_volumeInfo_panelizationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_epub_bubbles_isSet) {
        obj.insert(QString("containsEpubBubbles"), ::OpenAPI::toJsonValue(m_contains_epub_bubbles));
    }
    if (m_contains_image_bubbles_isSet) {
        obj.insert(QString("containsImageBubbles"), ::OpenAPI::toJsonValue(m_contains_image_bubbles));
    }
    if (m_epub_bubble_version_isSet) {
        obj.insert(QString("epubBubbleVersion"), ::OpenAPI::toJsonValue(m_epub_bubble_version));
    }
    if (m_image_bubble_version_isSet) {
        obj.insert(QString("imageBubbleVersion"), ::OpenAPI::toJsonValue(m_image_bubble_version));
    }
    return obj;
}

bool OAIVolume_volumeInfo_panelizationSummary::isContainsEpubBubbles() const {
    return m_contains_epub_bubbles;
}
void OAIVolume_volumeInfo_panelizationSummary::setContainsEpubBubbles(const bool &contains_epub_bubbles) {
    m_contains_epub_bubbles = contains_epub_bubbles;
    m_contains_epub_bubbles_isSet = true;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_contains_epub_bubbles_Set() const{
    return m_contains_epub_bubbles_isSet;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_contains_epub_bubbles_Valid() const{
    return m_contains_epub_bubbles_isValid;
}

bool OAIVolume_volumeInfo_panelizationSummary::isContainsImageBubbles() const {
    return m_contains_image_bubbles;
}
void OAIVolume_volumeInfo_panelizationSummary::setContainsImageBubbles(const bool &contains_image_bubbles) {
    m_contains_image_bubbles = contains_image_bubbles;
    m_contains_image_bubbles_isSet = true;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_contains_image_bubbles_Set() const{
    return m_contains_image_bubbles_isSet;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_contains_image_bubbles_Valid() const{
    return m_contains_image_bubbles_isValid;
}

QString OAIVolume_volumeInfo_panelizationSummary::getEpubBubbleVersion() const {
    return m_epub_bubble_version;
}
void OAIVolume_volumeInfo_panelizationSummary::setEpubBubbleVersion(const QString &epub_bubble_version) {
    m_epub_bubble_version = epub_bubble_version;
    m_epub_bubble_version_isSet = true;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_epub_bubble_version_Set() const{
    return m_epub_bubble_version_isSet;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_epub_bubble_version_Valid() const{
    return m_epub_bubble_version_isValid;
}

QString OAIVolume_volumeInfo_panelizationSummary::getImageBubbleVersion() const {
    return m_image_bubble_version;
}
void OAIVolume_volumeInfo_panelizationSummary::setImageBubbleVersion(const QString &image_bubble_version) {
    m_image_bubble_version = image_bubble_version;
    m_image_bubble_version_isSet = true;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_image_bubble_version_Set() const{
    return m_image_bubble_version_isSet;
}

bool OAIVolume_volumeInfo_panelizationSummary::is_image_bubble_version_Valid() const{
    return m_image_bubble_version_isValid;
}

bool OAIVolume_volumeInfo_panelizationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_epub_bubbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_image_bubbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epub_bubble_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_bubble_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_volumeInfo_panelizationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
