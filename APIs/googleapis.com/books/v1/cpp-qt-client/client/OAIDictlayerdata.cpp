/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDictlayerdata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDictlayerdata::OAIDictlayerdata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDictlayerdata::OAIDictlayerdata() {
    this->initializeModel();
}

OAIDictlayerdata::~OAIDictlayerdata() {}

void OAIDictlayerdata::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;

    m_dict_isSet = false;
    m_dict_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIDictlayerdata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDictlayerdata::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_dict_isValid = ::OpenAPI::fromJsonValue(m_dict, json[QString("dict")]);
    m_dict_isSet = !json[QString("dict")].isNull() && m_dict_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIDictlayerdata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDictlayerdata::asJsonObject() const {
    QJsonObject obj;
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_dict.isSet()) {
        obj.insert(QString("dict"), ::OpenAPI::toJsonValue(m_dict));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

OAIDictlayerdata_common OAIDictlayerdata::getCommon() const {
    return m_common;
}
void OAIDictlayerdata::setCommon(const OAIDictlayerdata_common &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIDictlayerdata::is_common_Set() const{
    return m_common_isSet;
}

bool OAIDictlayerdata::is_common_Valid() const{
    return m_common_isValid;
}

OAIDictlayerdata_dict OAIDictlayerdata::getDict() const {
    return m_dict;
}
void OAIDictlayerdata::setDict(const OAIDictlayerdata_dict &dict) {
    m_dict = dict;
    m_dict_isSet = true;
}

bool OAIDictlayerdata::is_dict_Set() const{
    return m_dict_isSet;
}

bool OAIDictlayerdata::is_dict_Valid() const{
    return m_dict_isValid;
}

QString OAIDictlayerdata::getKind() const {
    return m_kind;
}
void OAIDictlayerdata::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDictlayerdata::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDictlayerdata::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIDictlayerdata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDictlayerdata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
