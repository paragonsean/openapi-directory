/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_searchInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_searchInfo::OAIVolume_searchInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_searchInfo::OAIVolume_searchInfo() {
    this->initializeModel();
}

OAIVolume_searchInfo::~OAIVolume_searchInfo() {}

void OAIVolume_searchInfo::initializeModel() {

    m_text_snippet_isSet = false;
    m_text_snippet_isValid = false;
}

void OAIVolume_searchInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_searchInfo::fromJsonObject(QJsonObject json) {

    m_text_snippet_isValid = ::OpenAPI::fromJsonValue(m_text_snippet, json[QString("textSnippet")]);
    m_text_snippet_isSet = !json[QString("textSnippet")].isNull() && m_text_snippet_isValid;
}

QString OAIVolume_searchInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_searchInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_text_snippet_isSet) {
        obj.insert(QString("textSnippet"), ::OpenAPI::toJsonValue(m_text_snippet));
    }
    return obj;
}

QString OAIVolume_searchInfo::getTextSnippet() const {
    return m_text_snippet;
}
void OAIVolume_searchInfo::setTextSnippet(const QString &text_snippet) {
    m_text_snippet = text_snippet;
    m_text_snippet_isSet = true;
}

bool OAIVolume_searchInfo::is_text_snippet_Set() const{
    return m_text_snippet_isSet;
}

bool OAIVolume_searchInfo::is_text_snippet_Valid() const{
    return m_text_snippet_isValid;
}

bool OAIVolume_searchInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_searchInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
