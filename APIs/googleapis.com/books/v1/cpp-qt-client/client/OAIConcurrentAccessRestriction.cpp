/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConcurrentAccessRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConcurrentAccessRestriction::OAIConcurrentAccessRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConcurrentAccessRestriction::OAIConcurrentAccessRestriction() {
    this->initializeModel();
}

OAIConcurrentAccessRestriction::~OAIConcurrentAccessRestriction() {}

void OAIConcurrentAccessRestriction::initializeModel() {

    m_device_allowed_isSet = false;
    m_device_allowed_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_max_concurrent_devices_isSet = false;
    m_max_concurrent_devices_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_time_window_seconds_isSet = false;
    m_time_window_seconds_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIConcurrentAccessRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConcurrentAccessRestriction::fromJsonObject(QJsonObject json) {

    m_device_allowed_isValid = ::OpenAPI::fromJsonValue(m_device_allowed, json[QString("deviceAllowed")]);
    m_device_allowed_isSet = !json[QString("deviceAllowed")].isNull() && m_device_allowed_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_max_concurrent_devices_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_devices, json[QString("maxConcurrentDevices")]);
    m_max_concurrent_devices_isSet = !json[QString("maxConcurrentDevices")].isNull() && m_max_concurrent_devices_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_time_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_window_seconds, json[QString("timeWindowSeconds")]);
    m_time_window_seconds_isSet = !json[QString("timeWindowSeconds")].isNull() && m_time_window_seconds_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIConcurrentAccessRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConcurrentAccessRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_device_allowed_isSet) {
        obj.insert(QString("deviceAllowed"), ::OpenAPI::toJsonValue(m_device_allowed));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_max_concurrent_devices_isSet) {
        obj.insert(QString("maxConcurrentDevices"), ::OpenAPI::toJsonValue(m_max_concurrent_devices));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_time_window_seconds_isSet) {
        obj.insert(QString("timeWindowSeconds"), ::OpenAPI::toJsonValue(m_time_window_seconds));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

bool OAIConcurrentAccessRestriction::isDeviceAllowed() const {
    return m_device_allowed;
}
void OAIConcurrentAccessRestriction::setDeviceAllowed(const bool &device_allowed) {
    m_device_allowed = device_allowed;
    m_device_allowed_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_device_allowed_Set() const{
    return m_device_allowed_isSet;
}

bool OAIConcurrentAccessRestriction::is_device_allowed_Valid() const{
    return m_device_allowed_isValid;
}

QString OAIConcurrentAccessRestriction::getKind() const {
    return m_kind;
}
void OAIConcurrentAccessRestriction::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIConcurrentAccessRestriction::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIConcurrentAccessRestriction::getMaxConcurrentDevices() const {
    return m_max_concurrent_devices;
}
void OAIConcurrentAccessRestriction::setMaxConcurrentDevices(const qint32 &max_concurrent_devices) {
    m_max_concurrent_devices = max_concurrent_devices;
    m_max_concurrent_devices_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_max_concurrent_devices_Set() const{
    return m_max_concurrent_devices_isSet;
}

bool OAIConcurrentAccessRestriction::is_max_concurrent_devices_Valid() const{
    return m_max_concurrent_devices_isValid;
}

QString OAIConcurrentAccessRestriction::getMessage() const {
    return m_message;
}
void OAIConcurrentAccessRestriction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_message_Set() const{
    return m_message_isSet;
}

bool OAIConcurrentAccessRestriction::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIConcurrentAccessRestriction::getNonce() const {
    return m_nonce;
}
void OAIConcurrentAccessRestriction::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIConcurrentAccessRestriction::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAIConcurrentAccessRestriction::getReasonCode() const {
    return m_reason_code;
}
void OAIConcurrentAccessRestriction::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIConcurrentAccessRestriction::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

bool OAIConcurrentAccessRestriction::isRestricted() const {
    return m_restricted;
}
void OAIConcurrentAccessRestriction::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAIConcurrentAccessRestriction::is_restricted_Valid() const{
    return m_restricted_isValid;
}

QString OAIConcurrentAccessRestriction::getSignature() const {
    return m_signature;
}
void OAIConcurrentAccessRestriction::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIConcurrentAccessRestriction::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIConcurrentAccessRestriction::getSource() const {
    return m_source;
}
void OAIConcurrentAccessRestriction::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConcurrentAccessRestriction::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIConcurrentAccessRestriction::getTimeWindowSeconds() const {
    return m_time_window_seconds;
}
void OAIConcurrentAccessRestriction::setTimeWindowSeconds(const qint32 &time_window_seconds) {
    m_time_window_seconds = time_window_seconds;
    m_time_window_seconds_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_time_window_seconds_Set() const{
    return m_time_window_seconds_isSet;
}

bool OAIConcurrentAccessRestriction::is_time_window_seconds_Valid() const{
    return m_time_window_seconds_isValid;
}

QString OAIConcurrentAccessRestriction::getVolumeId() const {
    return m_volume_id;
}
void OAIConcurrentAccessRestriction::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIConcurrentAccessRestriction::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIConcurrentAccessRestriction::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIConcurrentAccessRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConcurrentAccessRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
