/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_saleInfo_offers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_saleInfo_offers_inner::OAIVolume_saleInfo_offers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_saleInfo_offers_inner::OAIVolume_saleInfo_offers_inner() {
    this->initializeModel();
}

OAIVolume_saleInfo_offers_inner::~OAIVolume_saleInfo_offers_inner() {}

void OAIVolume_saleInfo_offers_inner::initializeModel() {

    m_finsky_offer_type_isSet = false;
    m_finsky_offer_type_isValid = false;

    m_giftable_isSet = false;
    m_giftable_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_rental_duration_isSet = false;
    m_rental_duration_isValid = false;

    m_retail_price_isSet = false;
    m_retail_price_isValid = false;
}

void OAIVolume_saleInfo_offers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_saleInfo_offers_inner::fromJsonObject(QJsonObject json) {

    m_finsky_offer_type_isValid = ::OpenAPI::fromJsonValue(m_finsky_offer_type, json[QString("finskyOfferType")]);
    m_finsky_offer_type_isSet = !json[QString("finskyOfferType")].isNull() && m_finsky_offer_type_isValid;

    m_giftable_isValid = ::OpenAPI::fromJsonValue(m_giftable, json[QString("giftable")]);
    m_giftable_isSet = !json[QString("giftable")].isNull() && m_giftable_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_rental_duration_isValid = ::OpenAPI::fromJsonValue(m_rental_duration, json[QString("rentalDuration")]);
    m_rental_duration_isSet = !json[QString("rentalDuration")].isNull() && m_rental_duration_isValid;

    m_retail_price_isValid = ::OpenAPI::fromJsonValue(m_retail_price, json[QString("retailPrice")]);
    m_retail_price_isSet = !json[QString("retailPrice")].isNull() && m_retail_price_isValid;
}

QString OAIVolume_saleInfo_offers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_saleInfo_offers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_finsky_offer_type_isSet) {
        obj.insert(QString("finskyOfferType"), ::OpenAPI::toJsonValue(m_finsky_offer_type));
    }
    if (m_giftable_isSet) {
        obj.insert(QString("giftable"), ::OpenAPI::toJsonValue(m_giftable));
    }
    if (m_list_price.isSet()) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_rental_duration.isSet()) {
        obj.insert(QString("rentalDuration"), ::OpenAPI::toJsonValue(m_rental_duration));
    }
    if (m_retail_price.isSet()) {
        obj.insert(QString("retailPrice"), ::OpenAPI::toJsonValue(m_retail_price));
    }
    return obj;
}

qint32 OAIVolume_saleInfo_offers_inner::getFinskyOfferType() const {
    return m_finsky_offer_type;
}
void OAIVolume_saleInfo_offers_inner::setFinskyOfferType(const qint32 &finsky_offer_type) {
    m_finsky_offer_type = finsky_offer_type;
    m_finsky_offer_type_isSet = true;
}

bool OAIVolume_saleInfo_offers_inner::is_finsky_offer_type_Set() const{
    return m_finsky_offer_type_isSet;
}

bool OAIVolume_saleInfo_offers_inner::is_finsky_offer_type_Valid() const{
    return m_finsky_offer_type_isValid;
}

bool OAIVolume_saleInfo_offers_inner::isGiftable() const {
    return m_giftable;
}
void OAIVolume_saleInfo_offers_inner::setGiftable(const bool &giftable) {
    m_giftable = giftable;
    m_giftable_isSet = true;
}

bool OAIVolume_saleInfo_offers_inner::is_giftable_Set() const{
    return m_giftable_isSet;
}

bool OAIVolume_saleInfo_offers_inner::is_giftable_Valid() const{
    return m_giftable_isValid;
}

OAIVolume_saleInfo_offers_inner_listPrice OAIVolume_saleInfo_offers_inner::getListPrice() const {
    return m_list_price;
}
void OAIVolume_saleInfo_offers_inner::setListPrice(const OAIVolume_saleInfo_offers_inner_listPrice &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIVolume_saleInfo_offers_inner::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIVolume_saleInfo_offers_inner::is_list_price_Valid() const{
    return m_list_price_isValid;
}

OAIVolume_saleInfo_offers_inner_rentalDuration OAIVolume_saleInfo_offers_inner::getRentalDuration() const {
    return m_rental_duration;
}
void OAIVolume_saleInfo_offers_inner::setRentalDuration(const OAIVolume_saleInfo_offers_inner_rentalDuration &rental_duration) {
    m_rental_duration = rental_duration;
    m_rental_duration_isSet = true;
}

bool OAIVolume_saleInfo_offers_inner::is_rental_duration_Set() const{
    return m_rental_duration_isSet;
}

bool OAIVolume_saleInfo_offers_inner::is_rental_duration_Valid() const{
    return m_rental_duration_isValid;
}

OAIVolume_saleInfo_offers_inner_retailPrice OAIVolume_saleInfo_offers_inner::getRetailPrice() const {
    return m_retail_price;
}
void OAIVolume_saleInfo_offers_inner::setRetailPrice(const OAIVolume_saleInfo_offers_inner_retailPrice &retail_price) {
    m_retail_price = retail_price;
    m_retail_price_isSet = true;
}

bool OAIVolume_saleInfo_offers_inner::is_retail_price_Set() const{
    return m_retail_price_isSet;
}

bool OAIVolume_saleInfo_offers_inner::is_retail_price_Valid() const{
    return m_retail_price_isValid;
}

bool OAIVolume_saleInfo_offers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finsky_offer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giftable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_saleInfo_offers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
