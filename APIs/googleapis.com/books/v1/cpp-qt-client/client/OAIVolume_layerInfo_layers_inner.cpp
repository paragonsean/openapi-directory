/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_layerInfo_layers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_layerInfo_layers_inner::OAIVolume_layerInfo_layers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_layerInfo_layers_inner::OAIVolume_layerInfo_layers_inner() {
    this->initializeModel();
}

OAIVolume_layerInfo_layers_inner::~OAIVolume_layerInfo_layers_inner() {}

void OAIVolume_layerInfo_layers_inner::initializeModel() {

    m_layer_id_isSet = false;
    m_layer_id_isValid = false;

    m_volume_annotations_version_isSet = false;
    m_volume_annotations_version_isValid = false;
}

void OAIVolume_layerInfo_layers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_layerInfo_layers_inner::fromJsonObject(QJsonObject json) {

    m_layer_id_isValid = ::OpenAPI::fromJsonValue(m_layer_id, json[QString("layerId")]);
    m_layer_id_isSet = !json[QString("layerId")].isNull() && m_layer_id_isValid;

    m_volume_annotations_version_isValid = ::OpenAPI::fromJsonValue(m_volume_annotations_version, json[QString("volumeAnnotationsVersion")]);
    m_volume_annotations_version_isSet = !json[QString("volumeAnnotationsVersion")].isNull() && m_volume_annotations_version_isValid;
}

QString OAIVolume_layerInfo_layers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_layerInfo_layers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_layer_id_isSet) {
        obj.insert(QString("layerId"), ::OpenAPI::toJsonValue(m_layer_id));
    }
    if (m_volume_annotations_version_isSet) {
        obj.insert(QString("volumeAnnotationsVersion"), ::OpenAPI::toJsonValue(m_volume_annotations_version));
    }
    return obj;
}

QString OAIVolume_layerInfo_layers_inner::getLayerId() const {
    return m_layer_id;
}
void OAIVolume_layerInfo_layers_inner::setLayerId(const QString &layer_id) {
    m_layer_id = layer_id;
    m_layer_id_isSet = true;
}

bool OAIVolume_layerInfo_layers_inner::is_layer_id_Set() const{
    return m_layer_id_isSet;
}

bool OAIVolume_layerInfo_layers_inner::is_layer_id_Valid() const{
    return m_layer_id_isValid;
}

QString OAIVolume_layerInfo_layers_inner::getVolumeAnnotationsVersion() const {
    return m_volume_annotations_version;
}
void OAIVolume_layerInfo_layers_inner::setVolumeAnnotationsVersion(const QString &volume_annotations_version) {
    m_volume_annotations_version = volume_annotations_version;
    m_volume_annotations_version_isSet = true;
}

bool OAIVolume_layerInfo_layers_inner::is_volume_annotations_version_Set() const{
    return m_volume_annotations_version_isSet;
}

bool OAIVolume_layerInfo_layers_inner::is_volume_annotations_version_Valid() const{
    return m_volume_annotations_version_isValid;
}

bool OAIVolume_layerInfo_layers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_annotations_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_layerInfo_layers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
