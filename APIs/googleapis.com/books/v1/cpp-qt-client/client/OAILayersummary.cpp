/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayersummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayersummary::OAILayersummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayersummary::OAILayersummary() {
    this->initializeModel();
}

OAILayersummary::~OAILayersummary() {}

void OAILayersummary::initializeModel() {

    m_annotation_count_isSet = false;
    m_annotation_count_isValid = false;

    m_annotation_types_isSet = false;
    m_annotation_types_isValid = false;

    m_annotations_data_link_isSet = false;
    m_annotations_data_link_isValid = false;

    m_annotations_link_isSet = false;
    m_annotations_link_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_data_count_isSet = false;
    m_data_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_layer_id_isSet = false;
    m_layer_id_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_volume_annotations_version_isSet = false;
    m_volume_annotations_version_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAILayersummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayersummary::fromJsonObject(QJsonObject json) {

    m_annotation_count_isValid = ::OpenAPI::fromJsonValue(m_annotation_count, json[QString("annotationCount")]);
    m_annotation_count_isSet = !json[QString("annotationCount")].isNull() && m_annotation_count_isValid;

    m_annotation_types_isValid = ::OpenAPI::fromJsonValue(m_annotation_types, json[QString("annotationTypes")]);
    m_annotation_types_isSet = !json[QString("annotationTypes")].isNull() && m_annotation_types_isValid;

    m_annotations_data_link_isValid = ::OpenAPI::fromJsonValue(m_annotations_data_link, json[QString("annotationsDataLink")]);
    m_annotations_data_link_isSet = !json[QString("annotationsDataLink")].isNull() && m_annotations_data_link_isValid;

    m_annotations_link_isValid = ::OpenAPI::fromJsonValue(m_annotations_link, json[QString("annotationsLink")]);
    m_annotations_link_isSet = !json[QString("annotationsLink")].isNull() && m_annotations_link_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_data_count_isValid = ::OpenAPI::fromJsonValue(m_data_count, json[QString("dataCount")]);
    m_data_count_isSet = !json[QString("dataCount")].isNull() && m_data_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_layer_id_isValid = ::OpenAPI::fromJsonValue(m_layer_id, json[QString("layerId")]);
    m_layer_id_isSet = !json[QString("layerId")].isNull() && m_layer_id_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_volume_annotations_version_isValid = ::OpenAPI::fromJsonValue(m_volume_annotations_version, json[QString("volumeAnnotationsVersion")]);
    m_volume_annotations_version_isSet = !json[QString("volumeAnnotationsVersion")].isNull() && m_volume_annotations_version_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAILayersummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayersummary::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_count_isSet) {
        obj.insert(QString("annotationCount"), ::OpenAPI::toJsonValue(m_annotation_count));
    }
    if (m_annotation_types.size() > 0) {
        obj.insert(QString("annotationTypes"), ::OpenAPI::toJsonValue(m_annotation_types));
    }
    if (m_annotations_data_link_isSet) {
        obj.insert(QString("annotationsDataLink"), ::OpenAPI::toJsonValue(m_annotations_data_link));
    }
    if (m_annotations_link_isSet) {
        obj.insert(QString("annotationsLink"), ::OpenAPI::toJsonValue(m_annotations_link));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_data_count_isSet) {
        obj.insert(QString("dataCount"), ::OpenAPI::toJsonValue(m_data_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_layer_id_isSet) {
        obj.insert(QString("layerId"), ::OpenAPI::toJsonValue(m_layer_id));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_volume_annotations_version_isSet) {
        obj.insert(QString("volumeAnnotationsVersion"), ::OpenAPI::toJsonValue(m_volume_annotations_version));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

qint32 OAILayersummary::getAnnotationCount() const {
    return m_annotation_count;
}
void OAILayersummary::setAnnotationCount(const qint32 &annotation_count) {
    m_annotation_count = annotation_count;
    m_annotation_count_isSet = true;
}

bool OAILayersummary::is_annotation_count_Set() const{
    return m_annotation_count_isSet;
}

bool OAILayersummary::is_annotation_count_Valid() const{
    return m_annotation_count_isValid;
}

QList<QString> OAILayersummary::getAnnotationTypes() const {
    return m_annotation_types;
}
void OAILayersummary::setAnnotationTypes(const QList<QString> &annotation_types) {
    m_annotation_types = annotation_types;
    m_annotation_types_isSet = true;
}

bool OAILayersummary::is_annotation_types_Set() const{
    return m_annotation_types_isSet;
}

bool OAILayersummary::is_annotation_types_Valid() const{
    return m_annotation_types_isValid;
}

QString OAILayersummary::getAnnotationsDataLink() const {
    return m_annotations_data_link;
}
void OAILayersummary::setAnnotationsDataLink(const QString &annotations_data_link) {
    m_annotations_data_link = annotations_data_link;
    m_annotations_data_link_isSet = true;
}

bool OAILayersummary::is_annotations_data_link_Set() const{
    return m_annotations_data_link_isSet;
}

bool OAILayersummary::is_annotations_data_link_Valid() const{
    return m_annotations_data_link_isValid;
}

QString OAILayersummary::getAnnotationsLink() const {
    return m_annotations_link;
}
void OAILayersummary::setAnnotationsLink(const QString &annotations_link) {
    m_annotations_link = annotations_link;
    m_annotations_link_isSet = true;
}

bool OAILayersummary::is_annotations_link_Set() const{
    return m_annotations_link_isSet;
}

bool OAILayersummary::is_annotations_link_Valid() const{
    return m_annotations_link_isValid;
}

QString OAILayersummary::getContentVersion() const {
    return m_content_version;
}
void OAILayersummary::setContentVersion(const QString &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAILayersummary::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAILayersummary::is_content_version_Valid() const{
    return m_content_version_isValid;
}

qint32 OAILayersummary::getDataCount() const {
    return m_data_count;
}
void OAILayersummary::setDataCount(const qint32 &data_count) {
    m_data_count = data_count;
    m_data_count_isSet = true;
}

bool OAILayersummary::is_data_count_Set() const{
    return m_data_count_isSet;
}

bool OAILayersummary::is_data_count_Valid() const{
    return m_data_count_isValid;
}

QString OAILayersummary::getId() const {
    return m_id;
}
void OAILayersummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILayersummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAILayersummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILayersummary::getKind() const {
    return m_kind;
}
void OAILayersummary::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILayersummary::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILayersummary::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAILayersummary::getLayerId() const {
    return m_layer_id;
}
void OAILayersummary::setLayerId(const QString &layer_id) {
    m_layer_id = layer_id;
    m_layer_id_isSet = true;
}

bool OAILayersummary::is_layer_id_Set() const{
    return m_layer_id_isSet;
}

bool OAILayersummary::is_layer_id_Valid() const{
    return m_layer_id_isValid;
}

QString OAILayersummary::getSelfLink() const {
    return m_self_link;
}
void OAILayersummary::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAILayersummary::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAILayersummary::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAILayersummary::getUpdated() const {
    return m_updated;
}
void OAILayersummary::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAILayersummary::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAILayersummary::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAILayersummary::getVolumeAnnotationsVersion() const {
    return m_volume_annotations_version;
}
void OAILayersummary::setVolumeAnnotationsVersion(const QString &volume_annotations_version) {
    m_volume_annotations_version = volume_annotations_version;
    m_volume_annotations_version_isSet = true;
}

bool OAILayersummary::is_volume_annotations_version_Set() const{
    return m_volume_annotations_version_isSet;
}

bool OAILayersummary::is_volume_annotations_version_Valid() const{
    return m_volume_annotations_version_isValid;
}

QString OAILayersummary::getVolumeId() const {
    return m_volume_id;
}
void OAILayersummary::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAILayersummary::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAILayersummary::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAILayersummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_data_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_annotations_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayersummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
