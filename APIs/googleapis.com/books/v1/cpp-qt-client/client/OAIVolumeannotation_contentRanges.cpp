/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeannotation_contentRanges.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeannotation_contentRanges::OAIVolumeannotation_contentRanges(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeannotation_contentRanges::OAIVolumeannotation_contentRanges() {
    this->initializeModel();
}

OAIVolumeannotation_contentRanges::~OAIVolumeannotation_contentRanges() {}

void OAIVolumeannotation_contentRanges::initializeModel() {

    m_cfi_range_isSet = false;
    m_cfi_range_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_gb_image_range_isSet = false;
    m_gb_image_range_isValid = false;

    m_gb_text_range_isSet = false;
    m_gb_text_range_isValid = false;
}

void OAIVolumeannotation_contentRanges::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeannotation_contentRanges::fromJsonObject(QJsonObject json) {

    m_cfi_range_isValid = ::OpenAPI::fromJsonValue(m_cfi_range, json[QString("cfiRange")]);
    m_cfi_range_isSet = !json[QString("cfiRange")].isNull() && m_cfi_range_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_gb_image_range_isValid = ::OpenAPI::fromJsonValue(m_gb_image_range, json[QString("gbImageRange")]);
    m_gb_image_range_isSet = !json[QString("gbImageRange")].isNull() && m_gb_image_range_isValid;

    m_gb_text_range_isValid = ::OpenAPI::fromJsonValue(m_gb_text_range, json[QString("gbTextRange")]);
    m_gb_text_range_isSet = !json[QString("gbTextRange")].isNull() && m_gb_text_range_isValid;
}

QString OAIVolumeannotation_contentRanges::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeannotation_contentRanges::asJsonObject() const {
    QJsonObject obj;
    if (m_cfi_range.isSet()) {
        obj.insert(QString("cfiRange"), ::OpenAPI::toJsonValue(m_cfi_range));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_gb_image_range.isSet()) {
        obj.insert(QString("gbImageRange"), ::OpenAPI::toJsonValue(m_gb_image_range));
    }
    if (m_gb_text_range.isSet()) {
        obj.insert(QString("gbTextRange"), ::OpenAPI::toJsonValue(m_gb_text_range));
    }
    return obj;
}

OAIBooksAnnotationsRange OAIVolumeannotation_contentRanges::getCfiRange() const {
    return m_cfi_range;
}
void OAIVolumeannotation_contentRanges::setCfiRange(const OAIBooksAnnotationsRange &cfi_range) {
    m_cfi_range = cfi_range;
    m_cfi_range_isSet = true;
}

bool OAIVolumeannotation_contentRanges::is_cfi_range_Set() const{
    return m_cfi_range_isSet;
}

bool OAIVolumeannotation_contentRanges::is_cfi_range_Valid() const{
    return m_cfi_range_isValid;
}

QString OAIVolumeannotation_contentRanges::getContentVersion() const {
    return m_content_version;
}
void OAIVolumeannotation_contentRanges::setContentVersion(const QString &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAIVolumeannotation_contentRanges::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAIVolumeannotation_contentRanges::is_content_version_Valid() const{
    return m_content_version_isValid;
}

OAIBooksAnnotationsRange OAIVolumeannotation_contentRanges::getGbImageRange() const {
    return m_gb_image_range;
}
void OAIVolumeannotation_contentRanges::setGbImageRange(const OAIBooksAnnotationsRange &gb_image_range) {
    m_gb_image_range = gb_image_range;
    m_gb_image_range_isSet = true;
}

bool OAIVolumeannotation_contentRanges::is_gb_image_range_Set() const{
    return m_gb_image_range_isSet;
}

bool OAIVolumeannotation_contentRanges::is_gb_image_range_Valid() const{
    return m_gb_image_range_isValid;
}

OAIBooksAnnotationsRange OAIVolumeannotation_contentRanges::getGbTextRange() const {
    return m_gb_text_range;
}
void OAIVolumeannotation_contentRanges::setGbTextRange(const OAIBooksAnnotationsRange &gb_text_range) {
    m_gb_text_range = gb_text_range;
    m_gb_text_range_isSet = true;
}

bool OAIVolumeannotation_contentRanges::is_gb_text_range_Set() const{
    return m_gb_text_range_isSet;
}

bool OAIVolumeannotation_contentRanges::is_gb_text_range_Valid() const{
    return m_gb_text_range_isValid;
}

bool OAIVolumeannotation_contentRanges::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cfi_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gb_image_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gb_text_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeannotation_contentRanges::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
