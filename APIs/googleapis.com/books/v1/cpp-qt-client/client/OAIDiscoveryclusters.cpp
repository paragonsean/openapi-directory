/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryclusters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryclusters::OAIDiscoveryclusters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryclusters::OAIDiscoveryclusters() {
    this->initializeModel();
}

OAIDiscoveryclusters::~OAIDiscoveryclusters() {}

void OAIDiscoveryclusters::initializeModel() {

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_total_clusters_isSet = false;
    m_total_clusters_isValid = false;
}

void OAIDiscoveryclusters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryclusters::fromJsonObject(QJsonObject json) {

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_total_clusters_isValid = ::OpenAPI::fromJsonValue(m_total_clusters, json[QString("totalClusters")]);
    m_total_clusters_isSet = !json[QString("totalClusters")].isNull() && m_total_clusters_isValid;
}

QString OAIDiscoveryclusters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryclusters::asJsonObject() const {
    QJsonObject obj;
    if (m_clusters.size() > 0) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_total_clusters_isSet) {
        obj.insert(QString("totalClusters"), ::OpenAPI::toJsonValue(m_total_clusters));
    }
    return obj;
}

QList<OAIDiscoveryclusters_clusters_inner> OAIDiscoveryclusters::getClusters() const {
    return m_clusters;
}
void OAIDiscoveryclusters::setClusters(const QList<OAIDiscoveryclusters_clusters_inner> &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIDiscoveryclusters::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIDiscoveryclusters::is_clusters_Valid() const{
    return m_clusters_isValid;
}

QString OAIDiscoveryclusters::getKind() const {
    return m_kind;
}
void OAIDiscoveryclusters::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDiscoveryclusters::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDiscoveryclusters::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIDiscoveryclusters::getTotalClusters() const {
    return m_total_clusters;
}
void OAIDiscoveryclusters::setTotalClusters(const qint32 &total_clusters) {
    m_total_clusters = total_clusters;
    m_total_clusters_isSet = true;
}

bool OAIDiscoveryclusters::is_total_clusters_Set() const{
    return m_total_clusters_isSet;
}

bool OAIDiscoveryclusters::is_total_clusters_Valid() const{
    return m_total_clusters_isValid;
}

bool OAIDiscoveryclusters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_clusters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryclusters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
