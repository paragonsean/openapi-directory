/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadingPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadingPosition::OAIReadingPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadingPosition::OAIReadingPosition() {
    this->initializeModel();
}

OAIReadingPosition::~OAIReadingPosition() {}

void OAIReadingPosition::initializeModel() {

    m_epub_cfi_position_isSet = false;
    m_epub_cfi_position_isValid = false;

    m_gb_image_position_isSet = false;
    m_gb_image_position_isValid = false;

    m_gb_text_position_isSet = false;
    m_gb_text_position_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pdf_position_isSet = false;
    m_pdf_position_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIReadingPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadingPosition::fromJsonObject(QJsonObject json) {

    m_epub_cfi_position_isValid = ::OpenAPI::fromJsonValue(m_epub_cfi_position, json[QString("epubCfiPosition")]);
    m_epub_cfi_position_isSet = !json[QString("epubCfiPosition")].isNull() && m_epub_cfi_position_isValid;

    m_gb_image_position_isValid = ::OpenAPI::fromJsonValue(m_gb_image_position, json[QString("gbImagePosition")]);
    m_gb_image_position_isSet = !json[QString("gbImagePosition")].isNull() && m_gb_image_position_isValid;

    m_gb_text_position_isValid = ::OpenAPI::fromJsonValue(m_gb_text_position, json[QString("gbTextPosition")]);
    m_gb_text_position_isSet = !json[QString("gbTextPosition")].isNull() && m_gb_text_position_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pdf_position_isValid = ::OpenAPI::fromJsonValue(m_pdf_position, json[QString("pdfPosition")]);
    m_pdf_position_isSet = !json[QString("pdfPosition")].isNull() && m_pdf_position_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIReadingPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadingPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_epub_cfi_position_isSet) {
        obj.insert(QString("epubCfiPosition"), ::OpenAPI::toJsonValue(m_epub_cfi_position));
    }
    if (m_gb_image_position_isSet) {
        obj.insert(QString("gbImagePosition"), ::OpenAPI::toJsonValue(m_gb_image_position));
    }
    if (m_gb_text_position_isSet) {
        obj.insert(QString("gbTextPosition"), ::OpenAPI::toJsonValue(m_gb_text_position));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pdf_position_isSet) {
        obj.insert(QString("pdfPosition"), ::OpenAPI::toJsonValue(m_pdf_position));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAIReadingPosition::getEpubCfiPosition() const {
    return m_epub_cfi_position;
}
void OAIReadingPosition::setEpubCfiPosition(const QString &epub_cfi_position) {
    m_epub_cfi_position = epub_cfi_position;
    m_epub_cfi_position_isSet = true;
}

bool OAIReadingPosition::is_epub_cfi_position_Set() const{
    return m_epub_cfi_position_isSet;
}

bool OAIReadingPosition::is_epub_cfi_position_Valid() const{
    return m_epub_cfi_position_isValid;
}

QString OAIReadingPosition::getGbImagePosition() const {
    return m_gb_image_position;
}
void OAIReadingPosition::setGbImagePosition(const QString &gb_image_position) {
    m_gb_image_position = gb_image_position;
    m_gb_image_position_isSet = true;
}

bool OAIReadingPosition::is_gb_image_position_Set() const{
    return m_gb_image_position_isSet;
}

bool OAIReadingPosition::is_gb_image_position_Valid() const{
    return m_gb_image_position_isValid;
}

QString OAIReadingPosition::getGbTextPosition() const {
    return m_gb_text_position;
}
void OAIReadingPosition::setGbTextPosition(const QString &gb_text_position) {
    m_gb_text_position = gb_text_position;
    m_gb_text_position_isSet = true;
}

bool OAIReadingPosition::is_gb_text_position_Set() const{
    return m_gb_text_position_isSet;
}

bool OAIReadingPosition::is_gb_text_position_Valid() const{
    return m_gb_text_position_isValid;
}

QString OAIReadingPosition::getKind() const {
    return m_kind;
}
void OAIReadingPosition::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReadingPosition::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReadingPosition::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIReadingPosition::getPdfPosition() const {
    return m_pdf_position;
}
void OAIReadingPosition::setPdfPosition(const QString &pdf_position) {
    m_pdf_position = pdf_position;
    m_pdf_position_isSet = true;
}

bool OAIReadingPosition::is_pdf_position_Set() const{
    return m_pdf_position_isSet;
}

bool OAIReadingPosition::is_pdf_position_Valid() const{
    return m_pdf_position_isValid;
}

QString OAIReadingPosition::getUpdated() const {
    return m_updated;
}
void OAIReadingPosition::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIReadingPosition::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIReadingPosition::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIReadingPosition::getVolumeId() const {
    return m_volume_id;
}
void OAIReadingPosition::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIReadingPosition::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIReadingPosition::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIReadingPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_epub_cfi_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gb_image_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gb_text_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadingPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
