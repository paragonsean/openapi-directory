/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeries_series_inner_seriesSubscriptionReleaseInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeries_series_inner_seriesSubscriptionReleaseInfo::OAISeries_series_inner_seriesSubscriptionReleaseInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeries_series_inner_seriesSubscriptionReleaseInfo::OAISeries_series_inner_seriesSubscriptionReleaseInfo() {
    this->initializeModel();
}

OAISeries_series_inner_seriesSubscriptionReleaseInfo::~OAISeries_series_inner_seriesSubscriptionReleaseInfo() {}

void OAISeries_series_inner_seriesSubscriptionReleaseInfo::initializeModel() {

    m_cancel_time_isSet = false;
    m_cancel_time_isValid = false;

    m_current_release_info_isSet = false;
    m_current_release_info_isValid = false;

    m_next_release_info_isSet = false;
    m_next_release_info_isValid = false;

    m_series_subscription_type_isSet = false;
    m_series_subscription_type_isValid = false;
}

void OAISeries_series_inner_seriesSubscriptionReleaseInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeries_series_inner_seriesSubscriptionReleaseInfo::fromJsonObject(QJsonObject json) {

    m_cancel_time_isValid = ::OpenAPI::fromJsonValue(m_cancel_time, json[QString("cancelTime")]);
    m_cancel_time_isSet = !json[QString("cancelTime")].isNull() && m_cancel_time_isValid;

    m_current_release_info_isValid = ::OpenAPI::fromJsonValue(m_current_release_info, json[QString("currentReleaseInfo")]);
    m_current_release_info_isSet = !json[QString("currentReleaseInfo")].isNull() && m_current_release_info_isValid;

    m_next_release_info_isValid = ::OpenAPI::fromJsonValue(m_next_release_info, json[QString("nextReleaseInfo")]);
    m_next_release_info_isSet = !json[QString("nextReleaseInfo")].isNull() && m_next_release_info_isValid;

    m_series_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_series_subscription_type, json[QString("seriesSubscriptionType")]);
    m_series_subscription_type_isSet = !json[QString("seriesSubscriptionType")].isNull() && m_series_subscription_type_isValid;
}

QString OAISeries_series_inner_seriesSubscriptionReleaseInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeries_series_inner_seriesSubscriptionReleaseInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_time_isSet) {
        obj.insert(QString("cancelTime"), ::OpenAPI::toJsonValue(m_cancel_time));
    }
    if (m_current_release_info.isSet()) {
        obj.insert(QString("currentReleaseInfo"), ::OpenAPI::toJsonValue(m_current_release_info));
    }
    if (m_next_release_info.isSet()) {
        obj.insert(QString("nextReleaseInfo"), ::OpenAPI::toJsonValue(m_next_release_info));
    }
    if (m_series_subscription_type_isSet) {
        obj.insert(QString("seriesSubscriptionType"), ::OpenAPI::toJsonValue(m_series_subscription_type));
    }
    return obj;
}

QString OAISeries_series_inner_seriesSubscriptionReleaseInfo::getCancelTime() const {
    return m_cancel_time;
}
void OAISeries_series_inner_seriesSubscriptionReleaseInfo::setCancelTime(const QString &cancel_time) {
    m_cancel_time = cancel_time;
    m_cancel_time_isSet = true;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_cancel_time_Set() const{
    return m_cancel_time_isSet;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_cancel_time_Valid() const{
    return m_cancel_time_isValid;
}

OAISeries_series_inner_seriesSubscriptionReleaseInfo_currentReleaseInfo OAISeries_series_inner_seriesSubscriptionReleaseInfo::getCurrentReleaseInfo() const {
    return m_current_release_info;
}
void OAISeries_series_inner_seriesSubscriptionReleaseInfo::setCurrentReleaseInfo(const OAISeries_series_inner_seriesSubscriptionReleaseInfo_currentReleaseInfo &current_release_info) {
    m_current_release_info = current_release_info;
    m_current_release_info_isSet = true;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_current_release_info_Set() const{
    return m_current_release_info_isSet;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_current_release_info_Valid() const{
    return m_current_release_info_isValid;
}

OAISeries_series_inner_seriesSubscriptionReleaseInfo_currentReleaseInfo OAISeries_series_inner_seriesSubscriptionReleaseInfo::getNextReleaseInfo() const {
    return m_next_release_info;
}
void OAISeries_series_inner_seriesSubscriptionReleaseInfo::setNextReleaseInfo(const OAISeries_series_inner_seriesSubscriptionReleaseInfo_currentReleaseInfo &next_release_info) {
    m_next_release_info = next_release_info;
    m_next_release_info_isSet = true;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_next_release_info_Set() const{
    return m_next_release_info_isSet;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_next_release_info_Valid() const{
    return m_next_release_info_isValid;
}

QString OAISeries_series_inner_seriesSubscriptionReleaseInfo::getSeriesSubscriptionType() const {
    return m_series_subscription_type;
}
void OAISeries_series_inner_seriesSubscriptionReleaseInfo::setSeriesSubscriptionType(const QString &series_subscription_type) {
    m_series_subscription_type = series_subscription_type;
    m_series_subscription_type_isSet = true;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_series_subscription_type_Set() const{
    return m_series_subscription_type_isSet;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::is_series_subscription_type_Valid() const{
    return m_series_subscription_type_isValid;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_release_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_release_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeries_series_inner_seriesSubscriptionReleaseInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
