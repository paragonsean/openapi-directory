/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConcurrentAccessRestriction.h
 *
 * 
 */

#ifndef OAIConcurrentAccessRestriction_H
#define OAIConcurrentAccessRestriction_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConcurrentAccessRestriction : public OAIObject {
public:
    OAIConcurrentAccessRestriction();
    OAIConcurrentAccessRestriction(QString json);
    ~OAIConcurrentAccessRestriction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDeviceAllowed() const;
    void setDeviceAllowed(const bool &device_allowed);
    bool is_device_allowed_Set() const;
    bool is_device_allowed_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    qint32 getMaxConcurrentDevices() const;
    void setMaxConcurrentDevices(const qint32 &max_concurrent_devices);
    bool is_max_concurrent_devices_Set() const;
    bool is_max_concurrent_devices_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getNonce() const;
    void setNonce(const QString &nonce);
    bool is_nonce_Set() const;
    bool is_nonce_Valid() const;

    QString getReasonCode() const;
    void setReasonCode(const QString &reason_code);
    bool is_reason_code_Set() const;
    bool is_reason_code_Valid() const;

    bool isRestricted() const;
    void setRestricted(const bool &restricted);
    bool is_restricted_Set() const;
    bool is_restricted_Valid() const;

    QString getSignature() const;
    void setSignature(const QString &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    qint32 getTimeWindowSeconds() const;
    void setTimeWindowSeconds(const qint32 &time_window_seconds);
    bool is_time_window_seconds_Set() const;
    bool is_time_window_seconds_Valid() const;

    QString getVolumeId() const;
    void setVolumeId(const QString &volume_id);
    bool is_volume_id_Set() const;
    bool is_volume_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_device_allowed;
    bool m_device_allowed_isSet;
    bool m_device_allowed_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    qint32 m_max_concurrent_devices;
    bool m_max_concurrent_devices_isSet;
    bool m_max_concurrent_devices_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_nonce;
    bool m_nonce_isSet;
    bool m_nonce_isValid;

    QString m_reason_code;
    bool m_reason_code_isSet;
    bool m_reason_code_isValid;

    bool m_restricted;
    bool m_restricted_isSet;
    bool m_restricted_isValid;

    QString m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    qint32 m_time_window_seconds;
    bool m_time_window_seconds_isSet;
    bool m_time_window_seconds_isValid;

    QString m_volume_id;
    bool m_volume_id_isSet;
    bool m_volume_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConcurrentAccessRestriction)

#endif // OAIConcurrentAccessRestriction_H
