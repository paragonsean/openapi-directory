/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILayersApi_H
#define OAI_OAILayersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnnotationsdata.h"
#include "OAIDictionaryAnnotationdata.h"
#include "OAILayersummaries.h"
#include "OAILayersummary.h"
#include "OAIVolumeannotation.h"
#include "OAIVolumeannotations.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILayersApi : public QObject {
    Q_OBJECT

public:
    OAILayersApi(const int timeOut = 0);
    ~OAILayersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  layer_id QString [required]
    * @param[in]  annotation_data_id QString [required]
    * @param[in]  content_version QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_web_definitions bool [optional]
    * @param[in]  h qint32 [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  scale qint32 [optional]
    * @param[in]  source QString [optional]
    * @param[in]  w qint32 [optional]
    */
    virtual void books_layers_annotationData_get(const QString &volume_id, const QString &layer_id, const QString &annotation_data_id, const QString &content_version, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_web_definitions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &h = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &scale = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &w = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  layer_id QString [required]
    * @param[in]  content_version QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  annotation_data_id QList<QString> [optional]
    * @param[in]  h qint32 [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  scale qint32 [optional]
    * @param[in]  source QString [optional]
    * @param[in]  updated_max QString [optional]
    * @param[in]  updated_min QString [optional]
    * @param[in]  w qint32 [optional]
    */
    virtual void books_layers_annotationData_list(const QString &volume_id, const QString &layer_id, const QString &content_version, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &annotation_data_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &h = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &scale = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &w = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  summary_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  content_version QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void books_layers_get(const QString &volume_id, const QString &summary_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  content_version QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void books_layers_list(const QString &volume_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  layer_id QString [required]
    * @param[in]  annotation_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void books_layers_volumeAnnotations_get(const QString &volume_id, const QString &layer_id, const QString &annotation_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  volume_id QString [required]
    * @param[in]  layer_id QString [required]
    * @param[in]  content_version QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end_offset QString [optional]
    * @param[in]  end_position QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  source QString [optional]
    * @param[in]  start_offset QString [optional]
    * @param[in]  start_position QString [optional]
    * @param[in]  updated_max QString [optional]
    * @param[in]  updated_min QString [optional]
    * @param[in]  volume_annotations_version QString [optional]
    */
    virtual void books_layers_volumeAnnotations_list(const QString &volume_id, const QString &layer_id, const QString &content_version, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &volume_annotations_version = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void books_layers_annotationData_getCallback(OAIHttpRequestWorker *worker);
    void books_layers_annotationData_listCallback(OAIHttpRequestWorker *worker);
    void books_layers_getCallback(OAIHttpRequestWorker *worker);
    void books_layers_listCallback(OAIHttpRequestWorker *worker);
    void books_layers_volumeAnnotations_getCallback(OAIHttpRequestWorker *worker);
    void books_layers_volumeAnnotations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void books_layers_annotationData_getSignal(OAIDictionaryAnnotationdata summary);
    void books_layers_annotationData_listSignal(OAIAnnotationsdata summary);
    void books_layers_getSignal(OAILayersummary summary);
    void books_layers_listSignal(OAILayersummaries summary);
    void books_layers_volumeAnnotations_getSignal(OAIVolumeannotation summary);
    void books_layers_volumeAnnotations_listSignal(OAIVolumeannotations summary);


    void books_layers_annotationData_getSignalFull(OAIHttpRequestWorker *worker, OAIDictionaryAnnotationdata summary);
    void books_layers_annotationData_listSignalFull(OAIHttpRequestWorker *worker, OAIAnnotationsdata summary);
    void books_layers_getSignalFull(OAIHttpRequestWorker *worker, OAILayersummary summary);
    void books_layers_listSignalFull(OAIHttpRequestWorker *worker, OAILayersummaries summary);
    void books_layers_volumeAnnotations_getSignalFull(OAIHttpRequestWorker *worker, OAIVolumeannotation summary);
    void books_layers_volumeAnnotations_listSignalFull(OAIHttpRequestWorker *worker, OAIVolumeannotations summary);

    Q_DECL_DEPRECATED_X("Use books_layers_annotationData_getSignalError() instead")
    void books_layers_annotationData_getSignalE(OAIDictionaryAnnotationdata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_annotationData_getSignalError(OAIDictionaryAnnotationdata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_annotationData_listSignalError() instead")
    void books_layers_annotationData_listSignalE(OAIAnnotationsdata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_annotationData_listSignalError(OAIAnnotationsdata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_getSignalError() instead")
    void books_layers_getSignalE(OAILayersummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_getSignalError(OAILayersummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_listSignalError() instead")
    void books_layers_listSignalE(OAILayersummaries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_listSignalError(OAILayersummaries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_volumeAnnotations_getSignalError() instead")
    void books_layers_volumeAnnotations_getSignalE(OAIVolumeannotation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_volumeAnnotations_getSignalError(OAIVolumeannotation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_volumeAnnotations_listSignalError() instead")
    void books_layers_volumeAnnotations_listSignalE(OAIVolumeannotations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_volumeAnnotations_listSignalError(OAIVolumeannotations summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use books_layers_annotationData_getSignalErrorFull() instead")
    void books_layers_annotationData_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_annotationData_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_annotationData_listSignalErrorFull() instead")
    void books_layers_annotationData_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_annotationData_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_getSignalErrorFull() instead")
    void books_layers_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_listSignalErrorFull() instead")
    void books_layers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_volumeAnnotations_getSignalErrorFull() instead")
    void books_layers_volumeAnnotations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_volumeAnnotations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use books_layers_volumeAnnotations_listSignalErrorFull() instead")
    void books_layers_volumeAnnotations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void books_layers_volumeAnnotations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
