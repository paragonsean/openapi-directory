/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBooksCloudloadingResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBooksCloudloadingResource::OAIBooksCloudloadingResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBooksCloudloadingResource::OAIBooksCloudloadingResource() {
    this->initializeModel();
}

OAIBooksCloudloadingResource::~OAIBooksCloudloadingResource() {}

void OAIBooksCloudloadingResource::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIBooksCloudloadingResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBooksCloudloadingResource::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processingState")]);
    m_processing_state_isSet = !json[QString("processingState")].isNull() && m_processing_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIBooksCloudloadingResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBooksCloudloadingResource::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_processing_state_isSet) {
        obj.insert(QString("processingState"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAIBooksCloudloadingResource::getAuthor() const {
    return m_author;
}
void OAIBooksCloudloadingResource::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIBooksCloudloadingResource::is_author_Set() const{
    return m_author_isSet;
}

bool OAIBooksCloudloadingResource::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIBooksCloudloadingResource::getProcessingState() const {
    return m_processing_state;
}
void OAIBooksCloudloadingResource::setProcessingState(const QString &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIBooksCloudloadingResource::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIBooksCloudloadingResource::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

QString OAIBooksCloudloadingResource::getTitle() const {
    return m_title;
}
void OAIBooksCloudloadingResource::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBooksCloudloadingResource::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBooksCloudloadingResource::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBooksCloudloadingResource::getVolumeId() const {
    return m_volume_id;
}
void OAIBooksCloudloadingResource::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIBooksCloudloadingResource::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIBooksCloudloadingResource::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIBooksCloudloadingResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBooksCloudloadingResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
