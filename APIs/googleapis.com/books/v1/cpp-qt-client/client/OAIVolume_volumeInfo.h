/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume_volumeInfo.h
 *
 * General volume information.
 */

#ifndef OAIVolume_volumeInfo_H
#define OAIVolume_volumeInfo_H

#include <QJsonObject>

#include "OAIVolume_volumeInfo_dimensions.h"
#include "OAIVolume_volumeInfo_imageLinks.h"
#include "OAIVolume_volumeInfo_industryIdentifiers_inner.h"
#include "OAIVolume_volumeInfo_panelizationSummary.h"
#include "OAIVolume_volumeInfo_readingModes.h"
#include "OAIVolumeseriesinfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVolume_volumeInfo_dimensions;
class OAIVolume_volumeInfo_imageLinks;
class OAIVolume_volumeInfo_industryIdentifiers_inner;
class OAIVolume_volumeInfo_panelizationSummary;
class OAIVolume_volumeInfo_readingModes;
class OAIVolumeseriesinfo;

class OAIVolume_volumeInfo : public OAIObject {
public:
    OAIVolume_volumeInfo();
    OAIVolume_volumeInfo(QString json);
    ~OAIVolume_volumeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowAnonLogging() const;
    void setAllowAnonLogging(const bool &allow_anon_logging);
    bool is_allow_anon_logging_Set() const;
    bool is_allow_anon_logging_Valid() const;

    QList<QString> getAuthors() const;
    void setAuthors(const QList<QString> &authors);
    bool is_authors_Set() const;
    bool is_authors_Valid() const;

    double getAverageRating() const;
    void setAverageRating(const double &average_rating);
    bool is_average_rating_Set() const;
    bool is_average_rating_Valid() const;

    QString getCanonicalVolumeLink() const;
    void setCanonicalVolumeLink(const QString &canonical_volume_link);
    bool is_canonical_volume_link_Set() const;
    bool is_canonical_volume_link_Valid() const;

    QList<QString> getCategories() const;
    void setCategories(const QList<QString> &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    bool isComicsContent() const;
    void setComicsContent(const bool &comics_content);
    bool is_comics_content_Set() const;
    bool is_comics_content_Valid() const;

    QString getContentVersion() const;
    void setContentVersion(const QString &content_version);
    bool is_content_version_Set() const;
    bool is_content_version_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIVolume_volumeInfo_dimensions getDimensions() const;
    void setDimensions(const OAIVolume_volumeInfo_dimensions &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIVolume_volumeInfo_imageLinks getImageLinks() const;
    void setImageLinks(const OAIVolume_volumeInfo_imageLinks &image_links);
    bool is_image_links_Set() const;
    bool is_image_links_Valid() const;

    QList<OAIVolume_volumeInfo_industryIdentifiers_inner> getIndustryIdentifiers() const;
    void setIndustryIdentifiers(const QList<OAIVolume_volumeInfo_industryIdentifiers_inner> &industry_identifiers);
    bool is_industry_identifiers_Set() const;
    bool is_industry_identifiers_Valid() const;

    QString getInfoLink() const;
    void setInfoLink(const QString &info_link);
    bool is_info_link_Set() const;
    bool is_info_link_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getMainCategory() const;
    void setMainCategory(const QString &main_category);
    bool is_main_category_Set() const;
    bool is_main_category_Valid() const;

    QString getMaturityRating() const;
    void setMaturityRating(const QString &maturity_rating);
    bool is_maturity_rating_Set() const;
    bool is_maturity_rating_Valid() const;

    qint32 getPageCount() const;
    void setPageCount(const qint32 &page_count);
    bool is_page_count_Set() const;
    bool is_page_count_Valid() const;

    OAIVolume_volumeInfo_panelizationSummary getPanelizationSummary() const;
    void setPanelizationSummary(const OAIVolume_volumeInfo_panelizationSummary &panelization_summary);
    bool is_panelization_summary_Set() const;
    bool is_panelization_summary_Valid() const;

    QString getPreviewLink() const;
    void setPreviewLink(const QString &preview_link);
    bool is_preview_link_Set() const;
    bool is_preview_link_Valid() const;

    QString getPrintType() const;
    void setPrintType(const QString &print_type);
    bool is_print_type_Set() const;
    bool is_print_type_Valid() const;

    qint32 getPrintedPageCount() const;
    void setPrintedPageCount(const qint32 &printed_page_count);
    bool is_printed_page_count_Set() const;
    bool is_printed_page_count_Valid() const;

    QString getPublishedDate() const;
    void setPublishedDate(const QString &published_date);
    bool is_published_date_Set() const;
    bool is_published_date_Valid() const;

    QString getPublisher() const;
    void setPublisher(const QString &publisher);
    bool is_publisher_Set() const;
    bool is_publisher_Valid() const;

    qint32 getRatingsCount() const;
    void setRatingsCount(const qint32 &ratings_count);
    bool is_ratings_count_Set() const;
    bool is_ratings_count_Valid() const;

    OAIVolume_volumeInfo_readingModes getReadingModes() const;
    void setReadingModes(const OAIVolume_volumeInfo_readingModes &reading_modes);
    bool is_reading_modes_Set() const;
    bool is_reading_modes_Valid() const;

    qint32 getSamplePageCount() const;
    void setSamplePageCount(const qint32 &sample_page_count);
    bool is_sample_page_count_Set() const;
    bool is_sample_page_count_Valid() const;

    OAIVolumeseriesinfo getSeriesInfo() const;
    void setSeriesInfo(const OAIVolumeseriesinfo &series_info);
    bool is_series_info_Set() const;
    bool is_series_info_Valid() const;

    QString getSubtitle() const;
    void setSubtitle(const QString &subtitle);
    bool is_subtitle_Set() const;
    bool is_subtitle_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_anon_logging;
    bool m_allow_anon_logging_isSet;
    bool m_allow_anon_logging_isValid;

    QList<QString> m_authors;
    bool m_authors_isSet;
    bool m_authors_isValid;

    double m_average_rating;
    bool m_average_rating_isSet;
    bool m_average_rating_isValid;

    QString m_canonical_volume_link;
    bool m_canonical_volume_link_isSet;
    bool m_canonical_volume_link_isValid;

    QList<QString> m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    bool m_comics_content;
    bool m_comics_content_isSet;
    bool m_comics_content_isValid;

    QString m_content_version;
    bool m_content_version_isSet;
    bool m_content_version_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIVolume_volumeInfo_dimensions m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIVolume_volumeInfo_imageLinks m_image_links;
    bool m_image_links_isSet;
    bool m_image_links_isValid;

    QList<OAIVolume_volumeInfo_industryIdentifiers_inner> m_industry_identifiers;
    bool m_industry_identifiers_isSet;
    bool m_industry_identifiers_isValid;

    QString m_info_link;
    bool m_info_link_isSet;
    bool m_info_link_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_main_category;
    bool m_main_category_isSet;
    bool m_main_category_isValid;

    QString m_maturity_rating;
    bool m_maturity_rating_isSet;
    bool m_maturity_rating_isValid;

    qint32 m_page_count;
    bool m_page_count_isSet;
    bool m_page_count_isValid;

    OAIVolume_volumeInfo_panelizationSummary m_panelization_summary;
    bool m_panelization_summary_isSet;
    bool m_panelization_summary_isValid;

    QString m_preview_link;
    bool m_preview_link_isSet;
    bool m_preview_link_isValid;

    QString m_print_type;
    bool m_print_type_isSet;
    bool m_print_type_isValid;

    qint32 m_printed_page_count;
    bool m_printed_page_count_isSet;
    bool m_printed_page_count_isValid;

    QString m_published_date;
    bool m_published_date_isSet;
    bool m_published_date_isValid;

    QString m_publisher;
    bool m_publisher_isSet;
    bool m_publisher_isValid;

    qint32 m_ratings_count;
    bool m_ratings_count_isSet;
    bool m_ratings_count_isValid;

    OAIVolume_volumeInfo_readingModes m_reading_modes;
    bool m_reading_modes_isSet;
    bool m_reading_modes_isValid;

    qint32 m_sample_page_count;
    bool m_sample_page_count_isSet;
    bool m_sample_page_count_isValid;

    OAIVolumeseriesinfo m_series_info;
    bool m_series_info_isSet;
    bool m_series_info_isValid;

    QString m_subtitle;
    bool m_subtitle_isSet;
    bool m_subtitle_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume_volumeInfo)

#endif // OAIVolume_volumeInfo_H
