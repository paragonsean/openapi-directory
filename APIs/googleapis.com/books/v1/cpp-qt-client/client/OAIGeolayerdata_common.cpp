/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeolayerdata_common.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeolayerdata_common::OAIGeolayerdata_common(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeolayerdata_common::OAIGeolayerdata_common() {
    this->initializeModel();
}

OAIGeolayerdata_common::~OAIGeolayerdata_common() {}

void OAIGeolayerdata_common::initializeModel() {

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_preview_image_url_isSet = false;
    m_preview_image_url_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_snippet_url_isSet = false;
    m_snippet_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGeolayerdata_common::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeolayerdata_common::fromJsonObject(QJsonObject json) {

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_preview_image_url_isValid = ::OpenAPI::fromJsonValue(m_preview_image_url, json[QString("previewImageUrl")]);
    m_preview_image_url_isSet = !json[QString("previewImageUrl")].isNull() && m_preview_image_url_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_snippet_url_isValid = ::OpenAPI::fromJsonValue(m_snippet_url, json[QString("snippetUrl")]);
    m_snippet_url_isSet = !json[QString("snippetUrl")].isNull() && m_snippet_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGeolayerdata_common::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeolayerdata_common::asJsonObject() const {
    QJsonObject obj;
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_preview_image_url_isSet) {
        obj.insert(QString("previewImageUrl"), ::OpenAPI::toJsonValue(m_preview_image_url));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_snippet_url_isSet) {
        obj.insert(QString("snippetUrl"), ::OpenAPI::toJsonValue(m_snippet_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIGeolayerdata_common::getLang() const {
    return m_lang;
}
void OAIGeolayerdata_common::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIGeolayerdata_common::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIGeolayerdata_common::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAIGeolayerdata_common::getPreviewImageUrl() const {
    return m_preview_image_url;
}
void OAIGeolayerdata_common::setPreviewImageUrl(const QString &preview_image_url) {
    m_preview_image_url = preview_image_url;
    m_preview_image_url_isSet = true;
}

bool OAIGeolayerdata_common::is_preview_image_url_Set() const{
    return m_preview_image_url_isSet;
}

bool OAIGeolayerdata_common::is_preview_image_url_Valid() const{
    return m_preview_image_url_isValid;
}

QString OAIGeolayerdata_common::getSnippet() const {
    return m_snippet;
}
void OAIGeolayerdata_common::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIGeolayerdata_common::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIGeolayerdata_common::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAIGeolayerdata_common::getSnippetUrl() const {
    return m_snippet_url;
}
void OAIGeolayerdata_common::setSnippetUrl(const QString &snippet_url) {
    m_snippet_url = snippet_url;
    m_snippet_url_isSet = true;
}

bool OAIGeolayerdata_common::is_snippet_url_Set() const{
    return m_snippet_url_isSet;
}

bool OAIGeolayerdata_common::is_snippet_url_Valid() const{
    return m_snippet_url_isValid;
}

QString OAIGeolayerdata_common::getTitle() const {
    return m_title;
}
void OAIGeolayerdata_common::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGeolayerdata_common::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGeolayerdata_common::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGeolayerdata_common::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeolayerdata_common::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
