/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeolayerdata_geo.h
 *
 * 
 */

#ifndef OAIGeolayerdata_geo_H
#define OAIGeolayerdata_geo_H

#include <QJsonObject>

#include "OAIGeolayerdata_geo_viewport.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGeolayerdata_geo_viewport;

class OAIGeolayerdata_geo : public OAIObject {
public:
    OAIGeolayerdata_geo();
    OAIGeolayerdata_geo(QString json);
    ~OAIGeolayerdata_geo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getBoundary() const;
    void setBoundary(const QList<QString> &boundary);
    bool is_boundary_Set() const;
    bool is_boundary_Valid() const;

    QString getCachePolicy() const;
    void setCachePolicy(const QString &cache_policy);
    bool is_cache_policy_Set() const;
    bool is_cache_policy_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    QString getMapType() const;
    void setMapType(const QString &map_type);
    bool is_map_type_Set() const;
    bool is_map_type_Valid() const;

    OAIGeolayerdata_geo_viewport getViewport() const;
    void setViewport(const OAIGeolayerdata_geo_viewport &viewport);
    bool is_viewport_Set() const;
    bool is_viewport_Valid() const;

    qint32 getZoom() const;
    void setZoom(const qint32 &zoom);
    bool is_zoom_Set() const;
    bool is_zoom_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_boundary;
    bool m_boundary_isSet;
    bool m_boundary_isValid;

    QString m_cache_policy;
    bool m_cache_policy_isSet;
    bool m_cache_policy_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    QString m_map_type;
    bool m_map_type_isSet;
    bool m_map_type_isValid;

    OAIGeolayerdata_geo_viewport m_viewport;
    bool m_viewport_isSet;
    bool m_viewport_isValid;

    qint32 m_zoom;
    bool m_zoom_isSet;
    bool m_zoom_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeolayerdata_geo)

#endif // OAIGeolayerdata_geo_H
