/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_saleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_saleInfo::OAIVolume_saleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_saleInfo::OAIVolume_saleInfo() {
    this->initializeModel();
}

OAIVolume_saleInfo::~OAIVolume_saleInfo() {}

void OAIVolume_saleInfo::initializeModel() {

    m_buy_link_isSet = false;
    m_buy_link_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_is_ebook_isSet = false;
    m_is_ebook_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_on_sale_date_isSet = false;
    m_on_sale_date_isValid = false;

    m_retail_price_isSet = false;
    m_retail_price_isValid = false;

    m_saleability_isSet = false;
    m_saleability_isValid = false;
}

void OAIVolume_saleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_saleInfo::fromJsonObject(QJsonObject json) {

    m_buy_link_isValid = ::OpenAPI::fromJsonValue(m_buy_link, json[QString("buyLink")]);
    m_buy_link_isSet = !json[QString("buyLink")].isNull() && m_buy_link_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_is_ebook_isValid = ::OpenAPI::fromJsonValue(m_is_ebook, json[QString("isEbook")]);
    m_is_ebook_isSet = !json[QString("isEbook")].isNull() && m_is_ebook_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_on_sale_date_isValid = ::OpenAPI::fromJsonValue(m_on_sale_date, json[QString("onSaleDate")]);
    m_on_sale_date_isSet = !json[QString("onSaleDate")].isNull() && m_on_sale_date_isValid;

    m_retail_price_isValid = ::OpenAPI::fromJsonValue(m_retail_price, json[QString("retailPrice")]);
    m_retail_price_isSet = !json[QString("retailPrice")].isNull() && m_retail_price_isValid;

    m_saleability_isValid = ::OpenAPI::fromJsonValue(m_saleability, json[QString("saleability")]);
    m_saleability_isSet = !json[QString("saleability")].isNull() && m_saleability_isValid;
}

QString OAIVolume_saleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_saleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_buy_link_isSet) {
        obj.insert(QString("buyLink"), ::OpenAPI::toJsonValue(m_buy_link));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_is_ebook_isSet) {
        obj.insert(QString("isEbook"), ::OpenAPI::toJsonValue(m_is_ebook));
    }
    if (m_list_price.isSet()) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_on_sale_date_isSet) {
        obj.insert(QString("onSaleDate"), ::OpenAPI::toJsonValue(m_on_sale_date));
    }
    if (m_retail_price.isSet()) {
        obj.insert(QString("retailPrice"), ::OpenAPI::toJsonValue(m_retail_price));
    }
    if (m_saleability_isSet) {
        obj.insert(QString("saleability"), ::OpenAPI::toJsonValue(m_saleability));
    }
    return obj;
}

QString OAIVolume_saleInfo::getBuyLink() const {
    return m_buy_link;
}
void OAIVolume_saleInfo::setBuyLink(const QString &buy_link) {
    m_buy_link = buy_link;
    m_buy_link_isSet = true;
}

bool OAIVolume_saleInfo::is_buy_link_Set() const{
    return m_buy_link_isSet;
}

bool OAIVolume_saleInfo::is_buy_link_Valid() const{
    return m_buy_link_isValid;
}

QString OAIVolume_saleInfo::getCountry() const {
    return m_country;
}
void OAIVolume_saleInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIVolume_saleInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIVolume_saleInfo::is_country_Valid() const{
    return m_country_isValid;
}

bool OAIVolume_saleInfo::isIsEbook() const {
    return m_is_ebook;
}
void OAIVolume_saleInfo::setIsEbook(const bool &is_ebook) {
    m_is_ebook = is_ebook;
    m_is_ebook_isSet = true;
}

bool OAIVolume_saleInfo::is_is_ebook_Set() const{
    return m_is_ebook_isSet;
}

bool OAIVolume_saleInfo::is_is_ebook_Valid() const{
    return m_is_ebook_isValid;
}

OAIVolume_saleInfo_listPrice OAIVolume_saleInfo::getListPrice() const {
    return m_list_price;
}
void OAIVolume_saleInfo::setListPrice(const OAIVolume_saleInfo_listPrice &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIVolume_saleInfo::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIVolume_saleInfo::is_list_price_Valid() const{
    return m_list_price_isValid;
}

QList<OAIVolume_saleInfo_offers_inner> OAIVolume_saleInfo::getOffers() const {
    return m_offers;
}
void OAIVolume_saleInfo::setOffers(const QList<OAIVolume_saleInfo_offers_inner> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIVolume_saleInfo::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIVolume_saleInfo::is_offers_Valid() const{
    return m_offers_isValid;
}

QString OAIVolume_saleInfo::getOnSaleDate() const {
    return m_on_sale_date;
}
void OAIVolume_saleInfo::setOnSaleDate(const QString &on_sale_date) {
    m_on_sale_date = on_sale_date;
    m_on_sale_date_isSet = true;
}

bool OAIVolume_saleInfo::is_on_sale_date_Set() const{
    return m_on_sale_date_isSet;
}

bool OAIVolume_saleInfo::is_on_sale_date_Valid() const{
    return m_on_sale_date_isValid;
}

OAIVolume_saleInfo_retailPrice OAIVolume_saleInfo::getRetailPrice() const {
    return m_retail_price;
}
void OAIVolume_saleInfo::setRetailPrice(const OAIVolume_saleInfo_retailPrice &retail_price) {
    m_retail_price = retail_price;
    m_retail_price_isSet = true;
}

bool OAIVolume_saleInfo::is_retail_price_Set() const{
    return m_retail_price_isSet;
}

bool OAIVolume_saleInfo::is_retail_price_Valid() const{
    return m_retail_price_isValid;
}

QString OAIVolume_saleInfo::getSaleability() const {
    return m_saleability;
}
void OAIVolume_saleInfo::setSaleability(const QString &saleability) {
    m_saleability = saleability;
    m_saleability_isSet = true;
}

bool OAIVolume_saleInfo::is_saleability_Set() const{
    return m_saleability_isSet;
}

bool OAIVolume_saleInfo::is_saleability_Valid() const{
    return m_saleability_isValid;
}

bool OAIVolume_saleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ebook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_sale_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saleability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_saleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
