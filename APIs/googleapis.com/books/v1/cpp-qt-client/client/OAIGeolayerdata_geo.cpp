/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeolayerdata_geo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeolayerdata_geo::OAIGeolayerdata_geo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeolayerdata_geo::OAIGeolayerdata_geo() {
    this->initializeModel();
}

OAIGeolayerdata_geo::~OAIGeolayerdata_geo() {}

void OAIGeolayerdata_geo::initializeModel() {

    m_boundary_isSet = false;
    m_boundary_isValid = false;

    m_cache_policy_isSet = false;
    m_cache_policy_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_map_type_isSet = false;
    m_map_type_isValid = false;

    m_viewport_isSet = false;
    m_viewport_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIGeolayerdata_geo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeolayerdata_geo::fromJsonObject(QJsonObject json) {

    m_boundary_isValid = ::OpenAPI::fromJsonValue(m_boundary, json[QString("boundary")]);
    m_boundary_isSet = !json[QString("boundary")].isNull() && m_boundary_isValid;

    m_cache_policy_isValid = ::OpenAPI::fromJsonValue(m_cache_policy, json[QString("cachePolicy")]);
    m_cache_policy_isSet = !json[QString("cachePolicy")].isNull() && m_cache_policy_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_map_type_isValid = ::OpenAPI::fromJsonValue(m_map_type, json[QString("mapType")]);
    m_map_type_isSet = !json[QString("mapType")].isNull() && m_map_type_isValid;

    m_viewport_isValid = ::OpenAPI::fromJsonValue(m_viewport, json[QString("viewport")]);
    m_viewport_isSet = !json[QString("viewport")].isNull() && m_viewport_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIGeolayerdata_geo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeolayerdata_geo::asJsonObject() const {
    QJsonObject obj;
    if (m_boundary.size() > 0) {
        obj.insert(QString("boundary"), ::OpenAPI::toJsonValue(m_boundary));
    }
    if (m_cache_policy_isSet) {
        obj.insert(QString("cachePolicy"), ::OpenAPI::toJsonValue(m_cache_policy));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_map_type_isSet) {
        obj.insert(QString("mapType"), ::OpenAPI::toJsonValue(m_map_type));
    }
    if (m_viewport.isSet()) {
        obj.insert(QString("viewport"), ::OpenAPI::toJsonValue(m_viewport));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

QList<QString> OAIGeolayerdata_geo::getBoundary() const {
    return m_boundary;
}
void OAIGeolayerdata_geo::setBoundary(const QList<QString> &boundary) {
    m_boundary = boundary;
    m_boundary_isSet = true;
}

bool OAIGeolayerdata_geo::is_boundary_Set() const{
    return m_boundary_isSet;
}

bool OAIGeolayerdata_geo::is_boundary_Valid() const{
    return m_boundary_isValid;
}

QString OAIGeolayerdata_geo::getCachePolicy() const {
    return m_cache_policy;
}
void OAIGeolayerdata_geo::setCachePolicy(const QString &cache_policy) {
    m_cache_policy = cache_policy;
    m_cache_policy_isSet = true;
}

bool OAIGeolayerdata_geo::is_cache_policy_Set() const{
    return m_cache_policy_isSet;
}

bool OAIGeolayerdata_geo::is_cache_policy_Valid() const{
    return m_cache_policy_isValid;
}

QString OAIGeolayerdata_geo::getCountryCode() const {
    return m_country_code;
}
void OAIGeolayerdata_geo::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIGeolayerdata_geo::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIGeolayerdata_geo::is_country_code_Valid() const{
    return m_country_code_isValid;
}

double OAIGeolayerdata_geo::getLatitude() const {
    return m_latitude;
}
void OAIGeolayerdata_geo::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGeolayerdata_geo::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGeolayerdata_geo::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGeolayerdata_geo::getLongitude() const {
    return m_longitude;
}
void OAIGeolayerdata_geo::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGeolayerdata_geo::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGeolayerdata_geo::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIGeolayerdata_geo::getMapType() const {
    return m_map_type;
}
void OAIGeolayerdata_geo::setMapType(const QString &map_type) {
    m_map_type = map_type;
    m_map_type_isSet = true;
}

bool OAIGeolayerdata_geo::is_map_type_Set() const{
    return m_map_type_isSet;
}

bool OAIGeolayerdata_geo::is_map_type_Valid() const{
    return m_map_type_isValid;
}

OAIGeolayerdata_geo_viewport OAIGeolayerdata_geo::getViewport() const {
    return m_viewport;
}
void OAIGeolayerdata_geo::setViewport(const OAIGeolayerdata_geo_viewport &viewport) {
    m_viewport = viewport;
    m_viewport_isSet = true;
}

bool OAIGeolayerdata_geo::is_viewport_Set() const{
    return m_viewport_isSet;
}

bool OAIGeolayerdata_geo::is_viewport_Valid() const{
    return m_viewport_isValid;
}

qint32 OAIGeolayerdata_geo::getZoom() const {
    return m_zoom;
}
void OAIGeolayerdata_geo::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIGeolayerdata_geo::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIGeolayerdata_geo::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIGeolayerdata_geo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boundary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeolayerdata_geo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
