/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeseriesinfo_volumeSeries_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeseriesinfo_volumeSeries_inner::OAIVolumeseriesinfo_volumeSeries_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeseriesinfo_volumeSeries_inner::OAIVolumeseriesinfo_volumeSeries_inner() {
    this->initializeModel();
}

OAIVolumeseriesinfo_volumeSeries_inner::~OAIVolumeseriesinfo_volumeSeries_inner() {}

void OAIVolumeseriesinfo_volumeSeries_inner::initializeModel() {

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_series_book_type_isSet = false;
    m_series_book_type_isValid = false;

    m_series_id_isSet = false;
    m_series_id_isValid = false;
}

void OAIVolumeseriesinfo_volumeSeries_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeseriesinfo_volumeSeries_inner::fromJsonObject(QJsonObject json) {

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_series_book_type_isValid = ::OpenAPI::fromJsonValue(m_series_book_type, json[QString("seriesBookType")]);
    m_series_book_type_isSet = !json[QString("seriesBookType")].isNull() && m_series_book_type_isValid;

    m_series_id_isValid = ::OpenAPI::fromJsonValue(m_series_id, json[QString("seriesId")]);
    m_series_id_isSet = !json[QString("seriesId")].isNull() && m_series_id_isValid;
}

QString OAIVolumeseriesinfo_volumeSeries_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeseriesinfo_volumeSeries_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_issue.size() > 0) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_series_book_type_isSet) {
        obj.insert(QString("seriesBookType"), ::OpenAPI::toJsonValue(m_series_book_type));
    }
    if (m_series_id_isSet) {
        obj.insert(QString("seriesId"), ::OpenAPI::toJsonValue(m_series_id));
    }
    return obj;
}

QList<OAIVolumeseriesinfo_volumeSeries_inner_issue_inner> OAIVolumeseriesinfo_volumeSeries_inner::getIssue() const {
    return m_issue;
}
void OAIVolumeseriesinfo_volumeSeries_inner::setIssue(const QList<OAIVolumeseriesinfo_volumeSeries_inner_issue_inner> &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_issue_Valid() const{
    return m_issue_isValid;
}

qint32 OAIVolumeseriesinfo_volumeSeries_inner::getOrderNumber() const {
    return m_order_number;
}
void OAIVolumeseriesinfo_volumeSeries_inner::setOrderNumber(const qint32 &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIVolumeseriesinfo_volumeSeries_inner::getSeriesBookType() const {
    return m_series_book_type;
}
void OAIVolumeseriesinfo_volumeSeries_inner::setSeriesBookType(const QString &series_book_type) {
    m_series_book_type = series_book_type;
    m_series_book_type_isSet = true;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_series_book_type_Set() const{
    return m_series_book_type_isSet;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_series_book_type_Valid() const{
    return m_series_book_type_isValid;
}

QString OAIVolumeseriesinfo_volumeSeries_inner::getSeriesId() const {
    return m_series_id;
}
void OAIVolumeseriesinfo_volumeSeries_inner::setSeriesId(const QString &series_id) {
    m_series_id = series_id;
    m_series_id_isSet = true;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_series_id_Set() const{
    return m_series_id_isSet;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::is_series_id_Valid() const{
    return m_series_id_isValid;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_book_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeseriesinfo_volumeSeries_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
