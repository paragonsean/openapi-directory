/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume_accessInfo.h
 *
 * Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
 */

#ifndef OAIVolume_accessInfo_H
#define OAIVolume_accessInfo_H

#include <QJsonObject>

#include "OAIDownloadAccessRestriction.h"
#include "OAIVolume_accessInfo_epub.h"
#include "OAIVolume_accessInfo_pdf.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDownloadAccessRestriction;
class OAIVolume_accessInfo_epub;
class OAIVolume_accessInfo_pdf;

class OAIVolume_accessInfo : public OAIObject {
public:
    OAIVolume_accessInfo();
    OAIVolume_accessInfo(QString json);
    ~OAIVolume_accessInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessViewStatus() const;
    void setAccessViewStatus(const QString &access_view_status);
    bool is_access_view_status_Set() const;
    bool is_access_view_status_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    OAIDownloadAccessRestriction getDownloadAccess() const;
    void setDownloadAccess(const OAIDownloadAccessRestriction &download_access);
    bool is_download_access_Set() const;
    bool is_download_access_Valid() const;

    QString getDriveImportedContentLink() const;
    void setDriveImportedContentLink(const QString &drive_imported_content_link);
    bool is_drive_imported_content_link_Set() const;
    bool is_drive_imported_content_link_Valid() const;

    bool isEmbeddable() const;
    void setEmbeddable(const bool &embeddable);
    bool is_embeddable_Set() const;
    bool is_embeddable_Valid() const;

    OAIVolume_accessInfo_epub getEpub() const;
    void setEpub(const OAIVolume_accessInfo_epub &epub);
    bool is_epub_Set() const;
    bool is_epub_Valid() const;

    bool isExplicitOfflineLicenseManagement() const;
    void setExplicitOfflineLicenseManagement(const bool &explicit_offline_license_management);
    bool is_explicit_offline_license_management_Set() const;
    bool is_explicit_offline_license_management_Valid() const;

    OAIVolume_accessInfo_pdf getPdf() const;
    void setPdf(const OAIVolume_accessInfo_pdf &pdf);
    bool is_pdf_Set() const;
    bool is_pdf_Valid() const;

    bool isPublicDomain() const;
    void setPublicDomain(const bool &public_domain);
    bool is_public_domain_Set() const;
    bool is_public_domain_Valid() const;

    bool isQuoteSharingAllowed() const;
    void setQuoteSharingAllowed(const bool &quote_sharing_allowed);
    bool is_quote_sharing_allowed_Set() const;
    bool is_quote_sharing_allowed_Valid() const;

    QString getTextToSpeechPermission() const;
    void setTextToSpeechPermission(const QString &text_to_speech_permission);
    bool is_text_to_speech_permission_Set() const;
    bool is_text_to_speech_permission_Valid() const;

    QString getViewOrderUrl() const;
    void setViewOrderUrl(const QString &view_order_url);
    bool is_view_order_url_Set() const;
    bool is_view_order_url_Valid() const;

    QString getViewability() const;
    void setViewability(const QString &viewability);
    bool is_viewability_Set() const;
    bool is_viewability_Valid() const;

    QString getWebReaderLink() const;
    void setWebReaderLink(const QString &web_reader_link);
    bool is_web_reader_link_Set() const;
    bool is_web_reader_link_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_view_status;
    bool m_access_view_status_isSet;
    bool m_access_view_status_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    OAIDownloadAccessRestriction m_download_access;
    bool m_download_access_isSet;
    bool m_download_access_isValid;

    QString m_drive_imported_content_link;
    bool m_drive_imported_content_link_isSet;
    bool m_drive_imported_content_link_isValid;

    bool m_embeddable;
    bool m_embeddable_isSet;
    bool m_embeddable_isValid;

    OAIVolume_accessInfo_epub m_epub;
    bool m_epub_isSet;
    bool m_epub_isValid;

    bool m_explicit_offline_license_management;
    bool m_explicit_offline_license_management_isSet;
    bool m_explicit_offline_license_management_isValid;

    OAIVolume_accessInfo_pdf m_pdf;
    bool m_pdf_isSet;
    bool m_pdf_isValid;

    bool m_public_domain;
    bool m_public_domain_isSet;
    bool m_public_domain_isValid;

    bool m_quote_sharing_allowed;
    bool m_quote_sharing_allowed_isSet;
    bool m_quote_sharing_allowed_isValid;

    QString m_text_to_speech_permission;
    bool m_text_to_speech_permission_isSet;
    bool m_text_to_speech_permission_isValid;

    QString m_view_order_url;
    bool m_view_order_url_isSet;
    bool m_view_order_url_isValid;

    QString m_viewability;
    bool m_viewability_isSet;
    bool m_viewability_isValid;

    QString m_web_reader_link;
    bool m_web_reader_link_isSet;
    bool m_web_reader_link_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume_accessInfo)

#endif // OAIVolume_accessInfo_H
