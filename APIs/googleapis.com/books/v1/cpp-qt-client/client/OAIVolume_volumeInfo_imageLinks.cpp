/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_volumeInfo_imageLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_volumeInfo_imageLinks::OAIVolume_volumeInfo_imageLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_volumeInfo_imageLinks::OAIVolume_volumeInfo_imageLinks() {
    this->initializeModel();
}

OAIVolume_volumeInfo_imageLinks::~OAIVolume_volumeInfo_imageLinks() {}

void OAIVolume_volumeInfo_imageLinks::initializeModel() {

    m_extra_large_isSet = false;
    m_extra_large_isValid = false;

    m_large_isSet = false;
    m_large_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_small_isSet = false;
    m_small_isValid = false;

    m_small_thumbnail_isSet = false;
    m_small_thumbnail_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIVolume_volumeInfo_imageLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_volumeInfo_imageLinks::fromJsonObject(QJsonObject json) {

    m_extra_large_isValid = ::OpenAPI::fromJsonValue(m_extra_large, json[QString("extraLarge")]);
    m_extra_large_isSet = !json[QString("extraLarge")].isNull() && m_extra_large_isValid;

    m_large_isValid = ::OpenAPI::fromJsonValue(m_large, json[QString("large")]);
    m_large_isSet = !json[QString("large")].isNull() && m_large_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_small_isValid = ::OpenAPI::fromJsonValue(m_small, json[QString("small")]);
    m_small_isSet = !json[QString("small")].isNull() && m_small_isValid;

    m_small_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_small_thumbnail, json[QString("smallThumbnail")]);
    m_small_thumbnail_isSet = !json[QString("smallThumbnail")].isNull() && m_small_thumbnail_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_volumeInfo_imageLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_large_isSet) {
        obj.insert(QString("extraLarge"), ::OpenAPI::toJsonValue(m_extra_large));
    }
    if (m_large_isSet) {
        obj.insert(QString("large"), ::OpenAPI::toJsonValue(m_large));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_small_isSet) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(m_small));
    }
    if (m_small_thumbnail_isSet) {
        obj.insert(QString("smallThumbnail"), ::OpenAPI::toJsonValue(m_small_thumbnail));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

QString OAIVolume_volumeInfo_imageLinks::getExtraLarge() const {
    return m_extra_large;
}
void OAIVolume_volumeInfo_imageLinks::setExtraLarge(const QString &extra_large) {
    m_extra_large = extra_large;
    m_extra_large_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_extra_large_Set() const{
    return m_extra_large_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_extra_large_Valid() const{
    return m_extra_large_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::getLarge() const {
    return m_large;
}
void OAIVolume_volumeInfo_imageLinks::setLarge(const QString &large) {
    m_large = large;
    m_large_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_large_Set() const{
    return m_large_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_large_Valid() const{
    return m_large_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::getMedium() const {
    return m_medium;
}
void OAIVolume_volumeInfo_imageLinks::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_medium_Valid() const{
    return m_medium_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::getSmall() const {
    return m_small;
}
void OAIVolume_volumeInfo_imageLinks::setSmall(const QString &small) {
    m_small = small;
    m_small_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_small_Set() const{
    return m_small_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_small_Valid() const{
    return m_small_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::getSmallThumbnail() const {
    return m_small_thumbnail;
}
void OAIVolume_volumeInfo_imageLinks::setSmallThumbnail(const QString &small_thumbnail) {
    m_small_thumbnail = small_thumbnail;
    m_small_thumbnail_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_small_thumbnail_Set() const{
    return m_small_thumbnail_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_small_thumbnail_Valid() const{
    return m_small_thumbnail_isValid;
}

QString OAIVolume_volumeInfo_imageLinks::getThumbnail() const {
    return m_thumbnail;
}
void OAIVolume_volumeInfo_imageLinks::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIVolume_volumeInfo_imageLinks::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIVolume_volumeInfo_imageLinks::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIVolume_volumeInfo_imageLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_volumeInfo_imageLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
