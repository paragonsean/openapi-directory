/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeannotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeannotation::OAIVolumeannotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeannotation::OAIVolumeannotation() {
    this->initializeModel();
}

OAIVolumeannotation::~OAIVolumeannotation() {}

void OAIVolumeannotation::initializeModel() {

    m_annotation_data_id_isSet = false;
    m_annotation_data_id_isValid = false;

    m_annotation_data_link_isSet = false;
    m_annotation_data_link_isValid = false;

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_content_ranges_isSet = false;
    m_content_ranges_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_layer_id_isSet = false;
    m_layer_id_isValid = false;

    m_page_ids_isSet = false;
    m_page_ids_isValid = false;

    m_selected_text_isSet = false;
    m_selected_text_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIVolumeannotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeannotation::fromJsonObject(QJsonObject json) {

    m_annotation_data_id_isValid = ::OpenAPI::fromJsonValue(m_annotation_data_id, json[QString("annotationDataId")]);
    m_annotation_data_id_isSet = !json[QString("annotationDataId")].isNull() && m_annotation_data_id_isValid;

    m_annotation_data_link_isValid = ::OpenAPI::fromJsonValue(m_annotation_data_link, json[QString("annotationDataLink")]);
    m_annotation_data_link_isSet = !json[QString("annotationDataLink")].isNull() && m_annotation_data_link_isValid;

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotationType")]);
    m_annotation_type_isSet = !json[QString("annotationType")].isNull() && m_annotation_type_isValid;

    m_content_ranges_isValid = ::OpenAPI::fromJsonValue(m_content_ranges, json[QString("contentRanges")]);
    m_content_ranges_isSet = !json[QString("contentRanges")].isNull() && m_content_ranges_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_layer_id_isValid = ::OpenAPI::fromJsonValue(m_layer_id, json[QString("layerId")]);
    m_layer_id_isSet = !json[QString("layerId")].isNull() && m_layer_id_isValid;

    m_page_ids_isValid = ::OpenAPI::fromJsonValue(m_page_ids, json[QString("pageIds")]);
    m_page_ids_isSet = !json[QString("pageIds")].isNull() && m_page_ids_isValid;

    m_selected_text_isValid = ::OpenAPI::fromJsonValue(m_selected_text, json[QString("selectedText")]);
    m_selected_text_isSet = !json[QString("selectedText")].isNull() && m_selected_text_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIVolumeannotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeannotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_data_id_isSet) {
        obj.insert(QString("annotationDataId"), ::OpenAPI::toJsonValue(m_annotation_data_id));
    }
    if (m_annotation_data_link_isSet) {
        obj.insert(QString("annotationDataLink"), ::OpenAPI::toJsonValue(m_annotation_data_link));
    }
    if (m_annotation_type_isSet) {
        obj.insert(QString("annotationType"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_content_ranges.isSet()) {
        obj.insert(QString("contentRanges"), ::OpenAPI::toJsonValue(m_content_ranges));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_layer_id_isSet) {
        obj.insert(QString("layerId"), ::OpenAPI::toJsonValue(m_layer_id));
    }
    if (m_page_ids.size() > 0) {
        obj.insert(QString("pageIds"), ::OpenAPI::toJsonValue(m_page_ids));
    }
    if (m_selected_text_isSet) {
        obj.insert(QString("selectedText"), ::OpenAPI::toJsonValue(m_selected_text));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAIVolumeannotation::getAnnotationDataId() const {
    return m_annotation_data_id;
}
void OAIVolumeannotation::setAnnotationDataId(const QString &annotation_data_id) {
    m_annotation_data_id = annotation_data_id;
    m_annotation_data_id_isSet = true;
}

bool OAIVolumeannotation::is_annotation_data_id_Set() const{
    return m_annotation_data_id_isSet;
}

bool OAIVolumeannotation::is_annotation_data_id_Valid() const{
    return m_annotation_data_id_isValid;
}

QString OAIVolumeannotation::getAnnotationDataLink() const {
    return m_annotation_data_link;
}
void OAIVolumeannotation::setAnnotationDataLink(const QString &annotation_data_link) {
    m_annotation_data_link = annotation_data_link;
    m_annotation_data_link_isSet = true;
}

bool OAIVolumeannotation::is_annotation_data_link_Set() const{
    return m_annotation_data_link_isSet;
}

bool OAIVolumeannotation::is_annotation_data_link_Valid() const{
    return m_annotation_data_link_isValid;
}

QString OAIVolumeannotation::getAnnotationType() const {
    return m_annotation_type;
}
void OAIVolumeannotation::setAnnotationType(const QString &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAIVolumeannotation::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAIVolumeannotation::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

OAIVolumeannotation_contentRanges OAIVolumeannotation::getContentRanges() const {
    return m_content_ranges;
}
void OAIVolumeannotation::setContentRanges(const OAIVolumeannotation_contentRanges &content_ranges) {
    m_content_ranges = content_ranges;
    m_content_ranges_isSet = true;
}

bool OAIVolumeannotation::is_content_ranges_Set() const{
    return m_content_ranges_isSet;
}

bool OAIVolumeannotation::is_content_ranges_Valid() const{
    return m_content_ranges_isValid;
}

QString OAIVolumeannotation::getData() const {
    return m_data;
}
void OAIVolumeannotation::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIVolumeannotation::is_data_Set() const{
    return m_data_isSet;
}

bool OAIVolumeannotation::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIVolumeannotation::isDeleted() const {
    return m_deleted;
}
void OAIVolumeannotation::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIVolumeannotation::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIVolumeannotation::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIVolumeannotation::getId() const {
    return m_id;
}
void OAIVolumeannotation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVolumeannotation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVolumeannotation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVolumeannotation::getKind() const {
    return m_kind;
}
void OAIVolumeannotation::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVolumeannotation::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVolumeannotation::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIVolumeannotation::getLayerId() const {
    return m_layer_id;
}
void OAIVolumeannotation::setLayerId(const QString &layer_id) {
    m_layer_id = layer_id;
    m_layer_id_isSet = true;
}

bool OAIVolumeannotation::is_layer_id_Set() const{
    return m_layer_id_isSet;
}

bool OAIVolumeannotation::is_layer_id_Valid() const{
    return m_layer_id_isValid;
}

QList<QString> OAIVolumeannotation::getPageIds() const {
    return m_page_ids;
}
void OAIVolumeannotation::setPageIds(const QList<QString> &page_ids) {
    m_page_ids = page_ids;
    m_page_ids_isSet = true;
}

bool OAIVolumeannotation::is_page_ids_Set() const{
    return m_page_ids_isSet;
}

bool OAIVolumeannotation::is_page_ids_Valid() const{
    return m_page_ids_isValid;
}

QString OAIVolumeannotation::getSelectedText() const {
    return m_selected_text;
}
void OAIVolumeannotation::setSelectedText(const QString &selected_text) {
    m_selected_text = selected_text;
    m_selected_text_isSet = true;
}

bool OAIVolumeannotation::is_selected_text_Set() const{
    return m_selected_text_isSet;
}

bool OAIVolumeannotation::is_selected_text_Valid() const{
    return m_selected_text_isValid;
}

QString OAIVolumeannotation::getSelfLink() const {
    return m_self_link;
}
void OAIVolumeannotation::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIVolumeannotation::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIVolumeannotation::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIVolumeannotation::getUpdated() const {
    return m_updated;
}
void OAIVolumeannotation::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIVolumeannotation::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIVolumeannotation::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIVolumeannotation::getVolumeId() const {
    return m_volume_id;
}
void OAIVolumeannotation::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIVolumeannotation::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIVolumeannotation::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIVolumeannotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_data_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeannotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
