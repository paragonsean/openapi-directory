/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffers_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffers_items_inner::OAIOffers_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffers_items_inner::OAIOffers_items_inner() {
    this->initializeModel();
}

OAIOffers_items_inner::~OAIOffers_items_inner() {}

void OAIOffers_items_inner::initializeModel() {

    m_art_url_isSet = false;
    m_art_url_isValid = false;

    m_gservices_key_isSet = false;
    m_gservices_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIOffers_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffers_items_inner::fromJsonObject(QJsonObject json) {

    m_art_url_isValid = ::OpenAPI::fromJsonValue(m_art_url, json[QString("artUrl")]);
    m_art_url_isSet = !json[QString("artUrl")].isNull() && m_art_url_isValid;

    m_gservices_key_isValid = ::OpenAPI::fromJsonValue(m_gservices_key, json[QString("gservicesKey")]);
    m_gservices_key_isSet = !json[QString("gservicesKey")].isNull() && m_gservices_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAIOffers_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffers_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_art_url_isSet) {
        obj.insert(QString("artUrl"), ::OpenAPI::toJsonValue(m_art_url));
    }
    if (m_gservices_key_isSet) {
        obj.insert(QString("gservicesKey"), ::OpenAPI::toJsonValue(m_gservices_key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QString OAIOffers_items_inner::getArtUrl() const {
    return m_art_url;
}
void OAIOffers_items_inner::setArtUrl(const QString &art_url) {
    m_art_url = art_url;
    m_art_url_isSet = true;
}

bool OAIOffers_items_inner::is_art_url_Set() const{
    return m_art_url_isSet;
}

bool OAIOffers_items_inner::is_art_url_Valid() const{
    return m_art_url_isValid;
}

QString OAIOffers_items_inner::getGservicesKey() const {
    return m_gservices_key;
}
void OAIOffers_items_inner::setGservicesKey(const QString &gservices_key) {
    m_gservices_key = gservices_key;
    m_gservices_key_isSet = true;
}

bool OAIOffers_items_inner::is_gservices_key_Set() const{
    return m_gservices_key_isSet;
}

bool OAIOffers_items_inner::is_gservices_key_Valid() const{
    return m_gservices_key_isValid;
}

QString OAIOffers_items_inner::getId() const {
    return m_id;
}
void OAIOffers_items_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOffers_items_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOffers_items_inner::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOffers_items_inner_items_inner> OAIOffers_items_inner::getItems() const {
    return m_items;
}
void OAIOffers_items_inner::setItems(const QList<OAIOffers_items_inner_items_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOffers_items_inner::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOffers_items_inner::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIOffers_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gservices_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffers_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
