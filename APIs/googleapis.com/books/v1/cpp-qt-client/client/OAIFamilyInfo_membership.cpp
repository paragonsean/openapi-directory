/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFamilyInfo_membership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFamilyInfo_membership::OAIFamilyInfo_membership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFamilyInfo_membership::OAIFamilyInfo_membership() {
    this->initializeModel();
}

OAIFamilyInfo_membership::~OAIFamilyInfo_membership() {}

void OAIFamilyInfo_membership::initializeModel() {

    m_acquire_permission_isSet = false;
    m_acquire_permission_isValid = false;

    m_age_group_isSet = false;
    m_age_group_isValid = false;

    m_allowed_maturity_rating_isSet = false;
    m_allowed_maturity_rating_isValid = false;

    m_is_in_family_isSet = false;
    m_is_in_family_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIFamilyInfo_membership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFamilyInfo_membership::fromJsonObject(QJsonObject json) {

    m_acquire_permission_isValid = ::OpenAPI::fromJsonValue(m_acquire_permission, json[QString("acquirePermission")]);
    m_acquire_permission_isSet = !json[QString("acquirePermission")].isNull() && m_acquire_permission_isValid;

    m_age_group_isValid = ::OpenAPI::fromJsonValue(m_age_group, json[QString("ageGroup")]);
    m_age_group_isSet = !json[QString("ageGroup")].isNull() && m_age_group_isValid;

    m_allowed_maturity_rating_isValid = ::OpenAPI::fromJsonValue(m_allowed_maturity_rating, json[QString("allowedMaturityRating")]);
    m_allowed_maturity_rating_isSet = !json[QString("allowedMaturityRating")].isNull() && m_allowed_maturity_rating_isValid;

    m_is_in_family_isValid = ::OpenAPI::fromJsonValue(m_is_in_family, json[QString("isInFamily")]);
    m_is_in_family_isSet = !json[QString("isInFamily")].isNull() && m_is_in_family_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIFamilyInfo_membership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFamilyInfo_membership::asJsonObject() const {
    QJsonObject obj;
    if (m_acquire_permission_isSet) {
        obj.insert(QString("acquirePermission"), ::OpenAPI::toJsonValue(m_acquire_permission));
    }
    if (m_age_group_isSet) {
        obj.insert(QString("ageGroup"), ::OpenAPI::toJsonValue(m_age_group));
    }
    if (m_allowed_maturity_rating_isSet) {
        obj.insert(QString("allowedMaturityRating"), ::OpenAPI::toJsonValue(m_allowed_maturity_rating));
    }
    if (m_is_in_family_isSet) {
        obj.insert(QString("isInFamily"), ::OpenAPI::toJsonValue(m_is_in_family));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIFamilyInfo_membership::getAcquirePermission() const {
    return m_acquire_permission;
}
void OAIFamilyInfo_membership::setAcquirePermission(const QString &acquire_permission) {
    m_acquire_permission = acquire_permission;
    m_acquire_permission_isSet = true;
}

bool OAIFamilyInfo_membership::is_acquire_permission_Set() const{
    return m_acquire_permission_isSet;
}

bool OAIFamilyInfo_membership::is_acquire_permission_Valid() const{
    return m_acquire_permission_isValid;
}

QString OAIFamilyInfo_membership::getAgeGroup() const {
    return m_age_group;
}
void OAIFamilyInfo_membership::setAgeGroup(const QString &age_group) {
    m_age_group = age_group;
    m_age_group_isSet = true;
}

bool OAIFamilyInfo_membership::is_age_group_Set() const{
    return m_age_group_isSet;
}

bool OAIFamilyInfo_membership::is_age_group_Valid() const{
    return m_age_group_isValid;
}

QString OAIFamilyInfo_membership::getAllowedMaturityRating() const {
    return m_allowed_maturity_rating;
}
void OAIFamilyInfo_membership::setAllowedMaturityRating(const QString &allowed_maturity_rating) {
    m_allowed_maturity_rating = allowed_maturity_rating;
    m_allowed_maturity_rating_isSet = true;
}

bool OAIFamilyInfo_membership::is_allowed_maturity_rating_Set() const{
    return m_allowed_maturity_rating_isSet;
}

bool OAIFamilyInfo_membership::is_allowed_maturity_rating_Valid() const{
    return m_allowed_maturity_rating_isValid;
}

bool OAIFamilyInfo_membership::isIsInFamily() const {
    return m_is_in_family;
}
void OAIFamilyInfo_membership::setIsInFamily(const bool &is_in_family) {
    m_is_in_family = is_in_family;
    m_is_in_family_isSet = true;
}

bool OAIFamilyInfo_membership::is_is_in_family_Set() const{
    return m_is_in_family_isSet;
}

bool OAIFamilyInfo_membership::is_is_in_family_Valid() const{
    return m_is_in_family_isValid;
}

QString OAIFamilyInfo_membership::getRole() const {
    return m_role;
}
void OAIFamilyInfo_membership::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIFamilyInfo_membership::is_role_Set() const{
    return m_role_isSet;
}

bool OAIFamilyInfo_membership::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIFamilyInfo_membership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquire_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_maturity_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFamilyInfo_membership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
