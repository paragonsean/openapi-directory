/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookshelf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookshelf::OAIBookshelf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookshelf::OAIBookshelf() {
    this->initializeModel();
}

OAIBookshelf::~OAIBookshelf() {}

void OAIBookshelf::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_volume_count_isSet = false;
    m_volume_count_isValid = false;

    m_volumes_last_updated_isSet = false;
    m_volumes_last_updated_isValid = false;
}

void OAIBookshelf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookshelf::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_volume_count_isValid = ::OpenAPI::fromJsonValue(m_volume_count, json[QString("volumeCount")]);
    m_volume_count_isSet = !json[QString("volumeCount")].isNull() && m_volume_count_isValid;

    m_volumes_last_updated_isValid = ::OpenAPI::fromJsonValue(m_volumes_last_updated, json[QString("volumesLastUpdated")]);
    m_volumes_last_updated_isSet = !json[QString("volumesLastUpdated")].isNull() && m_volumes_last_updated_isValid;
}

QString OAIBookshelf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookshelf::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_volume_count_isSet) {
        obj.insert(QString("volumeCount"), ::OpenAPI::toJsonValue(m_volume_count));
    }
    if (m_volumes_last_updated_isSet) {
        obj.insert(QString("volumesLastUpdated"), ::OpenAPI::toJsonValue(m_volumes_last_updated));
    }
    return obj;
}

QString OAIBookshelf::getAccess() const {
    return m_access;
}
void OAIBookshelf::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIBookshelf::is_access_Set() const{
    return m_access_isSet;
}

bool OAIBookshelf::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIBookshelf::getCreated() const {
    return m_created;
}
void OAIBookshelf::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBookshelf::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBookshelf::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIBookshelf::getDescription() const {
    return m_description;
}
void OAIBookshelf::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBookshelf::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBookshelf::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIBookshelf::getId() const {
    return m_id;
}
void OAIBookshelf::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBookshelf::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBookshelf::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBookshelf::getKind() const {
    return m_kind;
}
void OAIBookshelf::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBookshelf::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBookshelf::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIBookshelf::getSelfLink() const {
    return m_self_link;
}
void OAIBookshelf::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIBookshelf::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIBookshelf::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIBookshelf::getTitle() const {
    return m_title;
}
void OAIBookshelf::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBookshelf::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBookshelf::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBookshelf::getUpdated() const {
    return m_updated;
}
void OAIBookshelf::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIBookshelf::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIBookshelf::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIBookshelf::getVolumeCount() const {
    return m_volume_count;
}
void OAIBookshelf::setVolumeCount(const qint32 &volume_count) {
    m_volume_count = volume_count;
    m_volume_count_isSet = true;
}

bool OAIBookshelf::is_volume_count_Set() const{
    return m_volume_count_isSet;
}

bool OAIBookshelf::is_volume_count_Valid() const{
    return m_volume_count_isValid;
}

QString OAIBookshelf::getVolumesLastUpdated() const {
    return m_volumes_last_updated;
}
void OAIBookshelf::setVolumesLastUpdated(const QString &volumes_last_updated) {
    m_volumes_last_updated = volumes_last_updated;
    m_volumes_last_updated_isSet = true;
}

bool OAIBookshelf::is_volumes_last_updated_Set() const{
    return m_volumes_last_updated_isSet;
}

bool OAIBookshelf::is_volumes_last_updated_Valid() const{
    return m_volumes_last_updated_isValid;
}

bool OAIBookshelf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookshelf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
