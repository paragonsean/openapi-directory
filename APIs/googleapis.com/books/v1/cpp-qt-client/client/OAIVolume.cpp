/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_access_info_isSet = false;
    m_access_info_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_layer_info_isSet = false;
    m_layer_info_isValid = false;

    m_recommended_info_isSet = false;
    m_recommended_info_isValid = false;

    m_sale_info_isSet = false;
    m_sale_info_isValid = false;

    m_search_info_isSet = false;
    m_search_info_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_volume_info_isSet = false;
    m_volume_info_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_access_info_isValid = ::OpenAPI::fromJsonValue(m_access_info, json[QString("accessInfo")]);
    m_access_info_isSet = !json[QString("accessInfo")].isNull() && m_access_info_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_layer_info_isValid = ::OpenAPI::fromJsonValue(m_layer_info, json[QString("layerInfo")]);
    m_layer_info_isSet = !json[QString("layerInfo")].isNull() && m_layer_info_isValid;

    m_recommended_info_isValid = ::OpenAPI::fromJsonValue(m_recommended_info, json[QString("recommendedInfo")]);
    m_recommended_info_isSet = !json[QString("recommendedInfo")].isNull() && m_recommended_info_isValid;

    m_sale_info_isValid = ::OpenAPI::fromJsonValue(m_sale_info, json[QString("saleInfo")]);
    m_sale_info_isSet = !json[QString("saleInfo")].isNull() && m_sale_info_isValid;

    m_search_info_isValid = ::OpenAPI::fromJsonValue(m_search_info, json[QString("searchInfo")]);
    m_search_info_isSet = !json[QString("searchInfo")].isNull() && m_search_info_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_volume_info_isValid = ::OpenAPI::fromJsonValue(m_volume_info, json[QString("volumeInfo")]);
    m_volume_info_isSet = !json[QString("volumeInfo")].isNull() && m_volume_info_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_access_info.isSet()) {
        obj.insert(QString("accessInfo"), ::OpenAPI::toJsonValue(m_access_info));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_layer_info.isSet()) {
        obj.insert(QString("layerInfo"), ::OpenAPI::toJsonValue(m_layer_info));
    }
    if (m_recommended_info.isSet()) {
        obj.insert(QString("recommendedInfo"), ::OpenAPI::toJsonValue(m_recommended_info));
    }
    if (m_sale_info.isSet()) {
        obj.insert(QString("saleInfo"), ::OpenAPI::toJsonValue(m_sale_info));
    }
    if (m_search_info.isSet()) {
        obj.insert(QString("searchInfo"), ::OpenAPI::toJsonValue(m_search_info));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_volume_info.isSet()) {
        obj.insert(QString("volumeInfo"), ::OpenAPI::toJsonValue(m_volume_info));
    }
    return obj;
}

OAIVolume_accessInfo OAIVolume::getAccessInfo() const {
    return m_access_info;
}
void OAIVolume::setAccessInfo(const OAIVolume_accessInfo &access_info) {
    m_access_info = access_info;
    m_access_info_isSet = true;
}

bool OAIVolume::is_access_info_Set() const{
    return m_access_info_isSet;
}

bool OAIVolume::is_access_info_Valid() const{
    return m_access_info_isValid;
}

QString OAIVolume::getEtag() const {
    return m_etag;
}
void OAIVolume::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVolume::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVolume::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIVolume::getId() const {
    return m_id;
}
void OAIVolume::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVolume::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVolume::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVolume::getKind() const {
    return m_kind;
}
void OAIVolume::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVolume::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVolume::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIVolume_layerInfo OAIVolume::getLayerInfo() const {
    return m_layer_info;
}
void OAIVolume::setLayerInfo(const OAIVolume_layerInfo &layer_info) {
    m_layer_info = layer_info;
    m_layer_info_isSet = true;
}

bool OAIVolume::is_layer_info_Set() const{
    return m_layer_info_isSet;
}

bool OAIVolume::is_layer_info_Valid() const{
    return m_layer_info_isValid;
}

OAIVolume_recommendedInfo OAIVolume::getRecommendedInfo() const {
    return m_recommended_info;
}
void OAIVolume::setRecommendedInfo(const OAIVolume_recommendedInfo &recommended_info) {
    m_recommended_info = recommended_info;
    m_recommended_info_isSet = true;
}

bool OAIVolume::is_recommended_info_Set() const{
    return m_recommended_info_isSet;
}

bool OAIVolume::is_recommended_info_Valid() const{
    return m_recommended_info_isValid;
}

OAIVolume_saleInfo OAIVolume::getSaleInfo() const {
    return m_sale_info;
}
void OAIVolume::setSaleInfo(const OAIVolume_saleInfo &sale_info) {
    m_sale_info = sale_info;
    m_sale_info_isSet = true;
}

bool OAIVolume::is_sale_info_Set() const{
    return m_sale_info_isSet;
}

bool OAIVolume::is_sale_info_Valid() const{
    return m_sale_info_isValid;
}

OAIVolume_searchInfo OAIVolume::getSearchInfo() const {
    return m_search_info;
}
void OAIVolume::setSearchInfo(const OAIVolume_searchInfo &search_info) {
    m_search_info = search_info;
    m_search_info_isSet = true;
}

bool OAIVolume::is_search_info_Set() const{
    return m_search_info_isSet;
}

bool OAIVolume::is_search_info_Valid() const{
    return m_search_info_isValid;
}

QString OAIVolume::getSelfLink() const {
    return m_self_link;
}
void OAIVolume::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIVolume::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIVolume::is_self_link_Valid() const{
    return m_self_link_isValid;
}

OAIVolume_userInfo OAIVolume::getUserInfo() const {
    return m_user_info;
}
void OAIVolume::setUserInfo(const OAIVolume_userInfo &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIVolume::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIVolume::is_user_info_Valid() const{
    return m_user_info_isValid;
}

OAIVolume_volumeInfo OAIVolume::getVolumeInfo() const {
    return m_volume_info;
}
void OAIVolume::setVolumeInfo(const OAIVolume_volumeInfo &volume_info) {
    m_volume_info = volume_info;
    m_volume_info_isSet = true;
}

bool OAIVolume::is_volume_info_Set() const{
    return m_volume_info_isSet;
}

bool OAIVolume::is_volume_info_Valid() const{
    return m_volume_info_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
