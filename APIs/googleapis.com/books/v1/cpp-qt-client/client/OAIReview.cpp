/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReview::OAIReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReview::OAIReview() {
    this->initializeModel();
}

OAIReview::~OAIReview() {}

void OAIReview::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_full_text_url_isSet = false;
    m_full_text_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReview::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_full_text_url_isValid = ::OpenAPI::fromJsonValue(m_full_text_url, json[QString("fullTextUrl")]);
    m_full_text_url_isSet = !json[QString("fullTextUrl")].isNull() && m_full_text_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReview::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_full_text_url_isSet) {
        obj.insert(QString("fullTextUrl"), ::OpenAPI::toJsonValue(m_full_text_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

OAIReview_author OAIReview::getAuthor() const {
    return m_author;
}
void OAIReview::setAuthor(const OAIReview_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIReview::is_author_Set() const{
    return m_author_isSet;
}

bool OAIReview::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIReview::getContent() const {
    return m_content;
}
void OAIReview::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIReview::is_content_Set() const{
    return m_content_isSet;
}

bool OAIReview::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIReview::getDate() const {
    return m_date;
}
void OAIReview::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReview::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReview::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReview::getFullTextUrl() const {
    return m_full_text_url;
}
void OAIReview::setFullTextUrl(const QString &full_text_url) {
    m_full_text_url = full_text_url;
    m_full_text_url_isSet = true;
}

bool OAIReview::is_full_text_url_Set() const{
    return m_full_text_url_isSet;
}

bool OAIReview::is_full_text_url_Valid() const{
    return m_full_text_url_isValid;
}

QString OAIReview::getKind() const {
    return m_kind;
}
void OAIReview::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReview::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReview::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIReview::getRating() const {
    return m_rating;
}
void OAIReview::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIReview::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIReview::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIReview_source OAIReview::getSource() const {
    return m_source;
}
void OAIReview::setSource(const OAIReview_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIReview::is_source_Set() const{
    return m_source_isSet;
}

bool OAIReview::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIReview::getTitle() const {
    return m_title;
}
void OAIReview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIReview::getType() const {
    return m_type;
}
void OAIReview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReview::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReview::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReview::getVolumeId() const {
    return m_volume_id;
}
void OAIReview::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIReview::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIReview::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_text_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
