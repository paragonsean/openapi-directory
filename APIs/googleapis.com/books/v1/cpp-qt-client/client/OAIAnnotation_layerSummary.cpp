/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation_layerSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation_layerSummary::OAIAnnotation_layerSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation_layerSummary::OAIAnnotation_layerSummary() {
    this->initializeModel();
}

OAIAnnotation_layerSummary::~OAIAnnotation_layerSummary() {}

void OAIAnnotation_layerSummary::initializeModel() {

    m_allowed_character_count_isSet = false;
    m_allowed_character_count_isValid = false;

    m_limit_type_isSet = false;
    m_limit_type_isValid = false;

    m_remaining_character_count_isSet = false;
    m_remaining_character_count_isValid = false;
}

void OAIAnnotation_layerSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation_layerSummary::fromJsonObject(QJsonObject json) {

    m_allowed_character_count_isValid = ::OpenAPI::fromJsonValue(m_allowed_character_count, json[QString("allowedCharacterCount")]);
    m_allowed_character_count_isSet = !json[QString("allowedCharacterCount")].isNull() && m_allowed_character_count_isValid;

    m_limit_type_isValid = ::OpenAPI::fromJsonValue(m_limit_type, json[QString("limitType")]);
    m_limit_type_isSet = !json[QString("limitType")].isNull() && m_limit_type_isValid;

    m_remaining_character_count_isValid = ::OpenAPI::fromJsonValue(m_remaining_character_count, json[QString("remainingCharacterCount")]);
    m_remaining_character_count_isSet = !json[QString("remainingCharacterCount")].isNull() && m_remaining_character_count_isValid;
}

QString OAIAnnotation_layerSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation_layerSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_character_count_isSet) {
        obj.insert(QString("allowedCharacterCount"), ::OpenAPI::toJsonValue(m_allowed_character_count));
    }
    if (m_limit_type_isSet) {
        obj.insert(QString("limitType"), ::OpenAPI::toJsonValue(m_limit_type));
    }
    if (m_remaining_character_count_isSet) {
        obj.insert(QString("remainingCharacterCount"), ::OpenAPI::toJsonValue(m_remaining_character_count));
    }
    return obj;
}

qint32 OAIAnnotation_layerSummary::getAllowedCharacterCount() const {
    return m_allowed_character_count;
}
void OAIAnnotation_layerSummary::setAllowedCharacterCount(const qint32 &allowed_character_count) {
    m_allowed_character_count = allowed_character_count;
    m_allowed_character_count_isSet = true;
}

bool OAIAnnotation_layerSummary::is_allowed_character_count_Set() const{
    return m_allowed_character_count_isSet;
}

bool OAIAnnotation_layerSummary::is_allowed_character_count_Valid() const{
    return m_allowed_character_count_isValid;
}

QString OAIAnnotation_layerSummary::getLimitType() const {
    return m_limit_type;
}
void OAIAnnotation_layerSummary::setLimitType(const QString &limit_type) {
    m_limit_type = limit_type;
    m_limit_type_isSet = true;
}

bool OAIAnnotation_layerSummary::is_limit_type_Set() const{
    return m_limit_type_isSet;
}

bool OAIAnnotation_layerSummary::is_limit_type_Valid() const{
    return m_limit_type_isValid;
}

qint32 OAIAnnotation_layerSummary::getRemainingCharacterCount() const {
    return m_remaining_character_count;
}
void OAIAnnotation_layerSummary::setRemainingCharacterCount(const qint32 &remaining_character_count) {
    m_remaining_character_count = remaining_character_count;
    m_remaining_character_count_isSet = true;
}

bool OAIAnnotation_layerSummary::is_remaining_character_count_Set() const{
    return m_remaining_character_count_isSet;
}

bool OAIAnnotation_layerSummary::is_remaining_character_count_Valid() const{
    return m_remaining_character_count_isValid;
}

bool OAIAnnotation_layerSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_character_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_character_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation_layerSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
