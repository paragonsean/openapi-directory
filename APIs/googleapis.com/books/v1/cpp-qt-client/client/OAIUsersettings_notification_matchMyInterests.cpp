/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersettings_notification_matchMyInterests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsersettings_notification_matchMyInterests::OAIUsersettings_notification_matchMyInterests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsersettings_notification_matchMyInterests::OAIUsersettings_notification_matchMyInterests() {
    this->initializeModel();
}

OAIUsersettings_notification_matchMyInterests::~OAIUsersettings_notification_matchMyInterests() {}

void OAIUsersettings_notification_matchMyInterests::initializeModel() {

    m_opted_state_isSet = false;
    m_opted_state_isValid = false;
}

void OAIUsersettings_notification_matchMyInterests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsersettings_notification_matchMyInterests::fromJsonObject(QJsonObject json) {

    m_opted_state_isValid = ::OpenAPI::fromJsonValue(m_opted_state, json[QString("opted_state")]);
    m_opted_state_isSet = !json[QString("opted_state")].isNull() && m_opted_state_isValid;
}

QString OAIUsersettings_notification_matchMyInterests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsersettings_notification_matchMyInterests::asJsonObject() const {
    QJsonObject obj;
    if (m_opted_state_isSet) {
        obj.insert(QString("opted_state"), ::OpenAPI::toJsonValue(m_opted_state));
    }
    return obj;
}

QString OAIUsersettings_notification_matchMyInterests::getOptedState() const {
    return m_opted_state;
}
void OAIUsersettings_notification_matchMyInterests::setOptedState(const QString &opted_state) {
    m_opted_state = opted_state;
    m_opted_state_isSet = true;
}

bool OAIUsersettings_notification_matchMyInterests::is_opted_state_Set() const{
    return m_opted_state_isSet;
}

bool OAIUsersettings_notification_matchMyInterests::is_opted_state_Valid() const{
    return m_opted_state_isValid;
}

bool OAIUsersettings_notification_matchMyInterests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opted_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsersettings_notification_matchMyInterests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
