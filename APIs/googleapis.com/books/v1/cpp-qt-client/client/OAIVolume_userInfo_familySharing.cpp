/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_userInfo_familySharing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_userInfo_familySharing::OAIVolume_userInfo_familySharing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_userInfo_familySharing::OAIVolume_userInfo_familySharing() {
    this->initializeModel();
}

OAIVolume_userInfo_familySharing::~OAIVolume_userInfo_familySharing() {}

void OAIVolume_userInfo_familySharing::initializeModel() {

    m_family_role_isSet = false;
    m_family_role_isValid = false;

    m_is_sharing_allowed_isSet = false;
    m_is_sharing_allowed_isValid = false;

    m_is_sharing_disabled_by_fop_isSet = false;
    m_is_sharing_disabled_by_fop_isValid = false;
}

void OAIVolume_userInfo_familySharing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_userInfo_familySharing::fromJsonObject(QJsonObject json) {

    m_family_role_isValid = ::OpenAPI::fromJsonValue(m_family_role, json[QString("familyRole")]);
    m_family_role_isSet = !json[QString("familyRole")].isNull() && m_family_role_isValid;

    m_is_sharing_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_sharing_allowed, json[QString("isSharingAllowed")]);
    m_is_sharing_allowed_isSet = !json[QString("isSharingAllowed")].isNull() && m_is_sharing_allowed_isValid;

    m_is_sharing_disabled_by_fop_isValid = ::OpenAPI::fromJsonValue(m_is_sharing_disabled_by_fop, json[QString("isSharingDisabledByFop")]);
    m_is_sharing_disabled_by_fop_isSet = !json[QString("isSharingDisabledByFop")].isNull() && m_is_sharing_disabled_by_fop_isValid;
}

QString OAIVolume_userInfo_familySharing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_userInfo_familySharing::asJsonObject() const {
    QJsonObject obj;
    if (m_family_role_isSet) {
        obj.insert(QString("familyRole"), ::OpenAPI::toJsonValue(m_family_role));
    }
    if (m_is_sharing_allowed_isSet) {
        obj.insert(QString("isSharingAllowed"), ::OpenAPI::toJsonValue(m_is_sharing_allowed));
    }
    if (m_is_sharing_disabled_by_fop_isSet) {
        obj.insert(QString("isSharingDisabledByFop"), ::OpenAPI::toJsonValue(m_is_sharing_disabled_by_fop));
    }
    return obj;
}

QString OAIVolume_userInfo_familySharing::getFamilyRole() const {
    return m_family_role;
}
void OAIVolume_userInfo_familySharing::setFamilyRole(const QString &family_role) {
    m_family_role = family_role;
    m_family_role_isSet = true;
}

bool OAIVolume_userInfo_familySharing::is_family_role_Set() const{
    return m_family_role_isSet;
}

bool OAIVolume_userInfo_familySharing::is_family_role_Valid() const{
    return m_family_role_isValid;
}

bool OAIVolume_userInfo_familySharing::isIsSharingAllowed() const {
    return m_is_sharing_allowed;
}
void OAIVolume_userInfo_familySharing::setIsSharingAllowed(const bool &is_sharing_allowed) {
    m_is_sharing_allowed = is_sharing_allowed;
    m_is_sharing_allowed_isSet = true;
}

bool OAIVolume_userInfo_familySharing::is_is_sharing_allowed_Set() const{
    return m_is_sharing_allowed_isSet;
}

bool OAIVolume_userInfo_familySharing::is_is_sharing_allowed_Valid() const{
    return m_is_sharing_allowed_isValid;
}

bool OAIVolume_userInfo_familySharing::isIsSharingDisabledByFop() const {
    return m_is_sharing_disabled_by_fop;
}
void OAIVolume_userInfo_familySharing::setIsSharingDisabledByFop(const bool &is_sharing_disabled_by_fop) {
    m_is_sharing_disabled_by_fop = is_sharing_disabled_by_fop;
    m_is_sharing_disabled_by_fop_isSet = true;
}

bool OAIVolume_userInfo_familySharing::is_is_sharing_disabled_by_fop_Set() const{
    return m_is_sharing_disabled_by_fop_isSet;
}

bool OAIVolume_userInfo_familySharing::is_is_sharing_disabled_by_fop_Valid() const{
    return m_is_sharing_disabled_by_fop_isValid;
}

bool OAIVolume_userInfo_familySharing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sharing_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sharing_disabled_by_fop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_userInfo_familySharing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
