/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDictlayerdata_dict_words_inner_senses_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDictlayerdata_dict_words_inner_senses_inner::OAIDictlayerdata_dict_words_inner_senses_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDictlayerdata_dict_words_inner_senses_inner::OAIDictlayerdata_dict_words_inner_senses_inner() {
    this->initializeModel();
}

OAIDictlayerdata_dict_words_inner_senses_inner::~OAIDictlayerdata_dict_words_inner_senses_inner() {}

void OAIDictlayerdata_dict_words_inner_senses_inner::initializeModel() {

    m_conjugations_isSet = false;
    m_conjugations_isValid = false;

    m_definitions_isSet = false;
    m_definitions_isValid = false;

    m_part_of_speech_isSet = false;
    m_part_of_speech_isValid = false;

    m_pronunciation_isSet = false;
    m_pronunciation_isValid = false;

    m_pronunciation_url_isSet = false;
    m_pronunciation_url_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_syllabification_isSet = false;
    m_syllabification_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;
}

void OAIDictlayerdata_dict_words_inner_senses_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDictlayerdata_dict_words_inner_senses_inner::fromJsonObject(QJsonObject json) {

    m_conjugations_isValid = ::OpenAPI::fromJsonValue(m_conjugations, json[QString("conjugations")]);
    m_conjugations_isSet = !json[QString("conjugations")].isNull() && m_conjugations_isValid;

    m_definitions_isValid = ::OpenAPI::fromJsonValue(m_definitions, json[QString("definitions")]);
    m_definitions_isSet = !json[QString("definitions")].isNull() && m_definitions_isValid;

    m_part_of_speech_isValid = ::OpenAPI::fromJsonValue(m_part_of_speech, json[QString("partOfSpeech")]);
    m_part_of_speech_isSet = !json[QString("partOfSpeech")].isNull() && m_part_of_speech_isValid;

    m_pronunciation_isValid = ::OpenAPI::fromJsonValue(m_pronunciation, json[QString("pronunciation")]);
    m_pronunciation_isSet = !json[QString("pronunciation")].isNull() && m_pronunciation_isValid;

    m_pronunciation_url_isValid = ::OpenAPI::fromJsonValue(m_pronunciation_url, json[QString("pronunciationUrl")]);
    m_pronunciation_url_isSet = !json[QString("pronunciationUrl")].isNull() && m_pronunciation_url_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_syllabification_isValid = ::OpenAPI::fromJsonValue(m_syllabification, json[QString("syllabification")]);
    m_syllabification_isSet = !json[QString("syllabification")].isNull() && m_syllabification_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;
}

QString OAIDictlayerdata_dict_words_inner_senses_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDictlayerdata_dict_words_inner_senses_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_conjugations.size() > 0) {
        obj.insert(QString("conjugations"), ::OpenAPI::toJsonValue(m_conjugations));
    }
    if (m_definitions.size() > 0) {
        obj.insert(QString("definitions"), ::OpenAPI::toJsonValue(m_definitions));
    }
    if (m_part_of_speech_isSet) {
        obj.insert(QString("partOfSpeech"), ::OpenAPI::toJsonValue(m_part_of_speech));
    }
    if (m_pronunciation_isSet) {
        obj.insert(QString("pronunciation"), ::OpenAPI::toJsonValue(m_pronunciation));
    }
    if (m_pronunciation_url_isSet) {
        obj.insert(QString("pronunciationUrl"), ::OpenAPI::toJsonValue(m_pronunciation_url));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_syllabification_isSet) {
        obj.insert(QString("syllabification"), ::OpenAPI::toJsonValue(m_syllabification));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    return obj;
}

QList<OAIDictlayerdata_dict_words_inner_senses_inner_conjugations_inner> OAIDictlayerdata_dict_words_inner_senses_inner::getConjugations() const {
    return m_conjugations;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setConjugations(const QList<OAIDictlayerdata_dict_words_inner_senses_inner_conjugations_inner> &conjugations) {
    m_conjugations = conjugations;
    m_conjugations_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_conjugations_Set() const{
    return m_conjugations_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_conjugations_Valid() const{
    return m_conjugations_isValid;
}

QList<OAIDictlayerdata_dict_words_inner_senses_inner_definitions_inner> OAIDictlayerdata_dict_words_inner_senses_inner::getDefinitions() const {
    return m_definitions;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setDefinitions(const QList<OAIDictlayerdata_dict_words_inner_senses_inner_definitions_inner> &definitions) {
    m_definitions = definitions;
    m_definitions_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_definitions_Set() const{
    return m_definitions_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_definitions_Valid() const{
    return m_definitions_isValid;
}

QString OAIDictlayerdata_dict_words_inner_senses_inner::getPartOfSpeech() const {
    return m_part_of_speech;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setPartOfSpeech(const QString &part_of_speech) {
    m_part_of_speech = part_of_speech;
    m_part_of_speech_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_part_of_speech_Set() const{
    return m_part_of_speech_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_part_of_speech_Valid() const{
    return m_part_of_speech_isValid;
}

QString OAIDictlayerdata_dict_words_inner_senses_inner::getPronunciation() const {
    return m_pronunciation;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setPronunciation(const QString &pronunciation) {
    m_pronunciation = pronunciation;
    m_pronunciation_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_pronunciation_Set() const{
    return m_pronunciation_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_pronunciation_Valid() const{
    return m_pronunciation_isValid;
}

QString OAIDictlayerdata_dict_words_inner_senses_inner::getPronunciationUrl() const {
    return m_pronunciation_url;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setPronunciationUrl(const QString &pronunciation_url) {
    m_pronunciation_url = pronunciation_url;
    m_pronunciation_url_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_pronunciation_url_Set() const{
    return m_pronunciation_url_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_pronunciation_url_Valid() const{
    return m_pronunciation_url_isValid;
}

OAIDictlayerdata_dict_words_inner_derivatives_inner_source OAIDictlayerdata_dict_words_inner_senses_inner::getSource() const {
    return m_source;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setSource(const OAIDictlayerdata_dict_words_inner_derivatives_inner_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDictlayerdata_dict_words_inner_senses_inner::getSyllabification() const {
    return m_syllabification;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setSyllabification(const QString &syllabification) {
    m_syllabification = syllabification;
    m_syllabification_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_syllabification_Set() const{
    return m_syllabification_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_syllabification_Valid() const{
    return m_syllabification_isValid;
}

QList<OAIDictlayerdata_dict_words_inner_derivatives_inner> OAIDictlayerdata_dict_words_inner_senses_inner::getSynonyms() const {
    return m_synonyms;
}
void OAIDictlayerdata_dict_words_inner_senses_inner::setSynonyms(const QList<OAIDictlayerdata_dict_words_inner_derivatives_inner> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conjugations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_of_speech_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pronunciation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pronunciation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_syllabification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDictlayerdata_dict_words_inner_senses_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
