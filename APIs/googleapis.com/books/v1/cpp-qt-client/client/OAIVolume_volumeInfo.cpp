/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume_volumeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume_volumeInfo::OAIVolume_volumeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume_volumeInfo::OAIVolume_volumeInfo() {
    this->initializeModel();
}

OAIVolume_volumeInfo::~OAIVolume_volumeInfo() {}

void OAIVolume_volumeInfo::initializeModel() {

    m_allow_anon_logging_isSet = false;
    m_allow_anon_logging_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_average_rating_isSet = false;
    m_average_rating_isValid = false;

    m_canonical_volume_link_isSet = false;
    m_canonical_volume_link_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_comics_content_isSet = false;
    m_comics_content_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_image_links_isSet = false;
    m_image_links_isValid = false;

    m_industry_identifiers_isSet = false;
    m_industry_identifiers_isValid = false;

    m_info_link_isSet = false;
    m_info_link_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_main_category_isSet = false;
    m_main_category_isValid = false;

    m_maturity_rating_isSet = false;
    m_maturity_rating_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;

    m_panelization_summary_isSet = false;
    m_panelization_summary_isValid = false;

    m_preview_link_isSet = false;
    m_preview_link_isValid = false;

    m_print_type_isSet = false;
    m_print_type_isValid = false;

    m_printed_page_count_isSet = false;
    m_printed_page_count_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_ratings_count_isSet = false;
    m_ratings_count_isValid = false;

    m_reading_modes_isSet = false;
    m_reading_modes_isValid = false;

    m_sample_page_count_isSet = false;
    m_sample_page_count_isValid = false;

    m_series_info_isSet = false;
    m_series_info_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVolume_volumeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume_volumeInfo::fromJsonObject(QJsonObject json) {

    m_allow_anon_logging_isValid = ::OpenAPI::fromJsonValue(m_allow_anon_logging, json[QString("allowAnonLogging")]);
    m_allow_anon_logging_isSet = !json[QString("allowAnonLogging")].isNull() && m_allow_anon_logging_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_average_rating_isValid = ::OpenAPI::fromJsonValue(m_average_rating, json[QString("averageRating")]);
    m_average_rating_isSet = !json[QString("averageRating")].isNull() && m_average_rating_isValid;

    m_canonical_volume_link_isValid = ::OpenAPI::fromJsonValue(m_canonical_volume_link, json[QString("canonicalVolumeLink")]);
    m_canonical_volume_link_isSet = !json[QString("canonicalVolumeLink")].isNull() && m_canonical_volume_link_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_comics_content_isValid = ::OpenAPI::fromJsonValue(m_comics_content, json[QString("comicsContent")]);
    m_comics_content_isSet = !json[QString("comicsContent")].isNull() && m_comics_content_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_image_links_isValid = ::OpenAPI::fromJsonValue(m_image_links, json[QString("imageLinks")]);
    m_image_links_isSet = !json[QString("imageLinks")].isNull() && m_image_links_isValid;

    m_industry_identifiers_isValid = ::OpenAPI::fromJsonValue(m_industry_identifiers, json[QString("industryIdentifiers")]);
    m_industry_identifiers_isSet = !json[QString("industryIdentifiers")].isNull() && m_industry_identifiers_isValid;

    m_info_link_isValid = ::OpenAPI::fromJsonValue(m_info_link, json[QString("infoLink")]);
    m_info_link_isSet = !json[QString("infoLink")].isNull() && m_info_link_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_main_category_isValid = ::OpenAPI::fromJsonValue(m_main_category, json[QString("mainCategory")]);
    m_main_category_isSet = !json[QString("mainCategory")].isNull() && m_main_category_isValid;

    m_maturity_rating_isValid = ::OpenAPI::fromJsonValue(m_maturity_rating, json[QString("maturityRating")]);
    m_maturity_rating_isSet = !json[QString("maturityRating")].isNull() && m_maturity_rating_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("pageCount")]);
    m_page_count_isSet = !json[QString("pageCount")].isNull() && m_page_count_isValid;

    m_panelization_summary_isValid = ::OpenAPI::fromJsonValue(m_panelization_summary, json[QString("panelizationSummary")]);
    m_panelization_summary_isSet = !json[QString("panelizationSummary")].isNull() && m_panelization_summary_isValid;

    m_preview_link_isValid = ::OpenAPI::fromJsonValue(m_preview_link, json[QString("previewLink")]);
    m_preview_link_isSet = !json[QString("previewLink")].isNull() && m_preview_link_isValid;

    m_print_type_isValid = ::OpenAPI::fromJsonValue(m_print_type, json[QString("printType")]);
    m_print_type_isSet = !json[QString("printType")].isNull() && m_print_type_isValid;

    m_printed_page_count_isValid = ::OpenAPI::fromJsonValue(m_printed_page_count, json[QString("printedPageCount")]);
    m_printed_page_count_isSet = !json[QString("printedPageCount")].isNull() && m_printed_page_count_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("publishedDate")]);
    m_published_date_isSet = !json[QString("publishedDate")].isNull() && m_published_date_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_ratings_count_isValid = ::OpenAPI::fromJsonValue(m_ratings_count, json[QString("ratingsCount")]);
    m_ratings_count_isSet = !json[QString("ratingsCount")].isNull() && m_ratings_count_isValid;

    m_reading_modes_isValid = ::OpenAPI::fromJsonValue(m_reading_modes, json[QString("readingModes")]);
    m_reading_modes_isSet = !json[QString("readingModes")].isNull() && m_reading_modes_isValid;

    m_sample_page_count_isValid = ::OpenAPI::fromJsonValue(m_sample_page_count, json[QString("samplePageCount")]);
    m_sample_page_count_isSet = !json[QString("samplePageCount")].isNull() && m_sample_page_count_isValid;

    m_series_info_isValid = ::OpenAPI::fromJsonValue(m_series_info, json[QString("seriesInfo")]);
    m_series_info_isSet = !json[QString("seriesInfo")].isNull() && m_series_info_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVolume_volumeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume_volumeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_anon_logging_isSet) {
        obj.insert(QString("allowAnonLogging"), ::OpenAPI::toJsonValue(m_allow_anon_logging));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_average_rating_isSet) {
        obj.insert(QString("averageRating"), ::OpenAPI::toJsonValue(m_average_rating));
    }
    if (m_canonical_volume_link_isSet) {
        obj.insert(QString("canonicalVolumeLink"), ::OpenAPI::toJsonValue(m_canonical_volume_link));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_comics_content_isSet) {
        obj.insert(QString("comicsContent"), ::OpenAPI::toJsonValue(m_comics_content));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_image_links.isSet()) {
        obj.insert(QString("imageLinks"), ::OpenAPI::toJsonValue(m_image_links));
    }
    if (m_industry_identifiers.size() > 0) {
        obj.insert(QString("industryIdentifiers"), ::OpenAPI::toJsonValue(m_industry_identifiers));
    }
    if (m_info_link_isSet) {
        obj.insert(QString("infoLink"), ::OpenAPI::toJsonValue(m_info_link));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_main_category_isSet) {
        obj.insert(QString("mainCategory"), ::OpenAPI::toJsonValue(m_main_category));
    }
    if (m_maturity_rating_isSet) {
        obj.insert(QString("maturityRating"), ::OpenAPI::toJsonValue(m_maturity_rating));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("pageCount"), ::OpenAPI::toJsonValue(m_page_count));
    }
    if (m_panelization_summary.isSet()) {
        obj.insert(QString("panelizationSummary"), ::OpenAPI::toJsonValue(m_panelization_summary));
    }
    if (m_preview_link_isSet) {
        obj.insert(QString("previewLink"), ::OpenAPI::toJsonValue(m_preview_link));
    }
    if (m_print_type_isSet) {
        obj.insert(QString("printType"), ::OpenAPI::toJsonValue(m_print_type));
    }
    if (m_printed_page_count_isSet) {
        obj.insert(QString("printedPageCount"), ::OpenAPI::toJsonValue(m_printed_page_count));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("publishedDate"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_ratings_count_isSet) {
        obj.insert(QString("ratingsCount"), ::OpenAPI::toJsonValue(m_ratings_count));
    }
    if (m_reading_modes.isSet()) {
        obj.insert(QString("readingModes"), ::OpenAPI::toJsonValue(m_reading_modes));
    }
    if (m_sample_page_count_isSet) {
        obj.insert(QString("samplePageCount"), ::OpenAPI::toJsonValue(m_sample_page_count));
    }
    if (m_series_info.isSet()) {
        obj.insert(QString("seriesInfo"), ::OpenAPI::toJsonValue(m_series_info));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIVolume_volumeInfo::isAllowAnonLogging() const {
    return m_allow_anon_logging;
}
void OAIVolume_volumeInfo::setAllowAnonLogging(const bool &allow_anon_logging) {
    m_allow_anon_logging = allow_anon_logging;
    m_allow_anon_logging_isSet = true;
}

bool OAIVolume_volumeInfo::is_allow_anon_logging_Set() const{
    return m_allow_anon_logging_isSet;
}

bool OAIVolume_volumeInfo::is_allow_anon_logging_Valid() const{
    return m_allow_anon_logging_isValid;
}

QList<QString> OAIVolume_volumeInfo::getAuthors() const {
    return m_authors;
}
void OAIVolume_volumeInfo::setAuthors(const QList<QString> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIVolume_volumeInfo::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIVolume_volumeInfo::is_authors_Valid() const{
    return m_authors_isValid;
}

double OAIVolume_volumeInfo::getAverageRating() const {
    return m_average_rating;
}
void OAIVolume_volumeInfo::setAverageRating(const double &average_rating) {
    m_average_rating = average_rating;
    m_average_rating_isSet = true;
}

bool OAIVolume_volumeInfo::is_average_rating_Set() const{
    return m_average_rating_isSet;
}

bool OAIVolume_volumeInfo::is_average_rating_Valid() const{
    return m_average_rating_isValid;
}

QString OAIVolume_volumeInfo::getCanonicalVolumeLink() const {
    return m_canonical_volume_link;
}
void OAIVolume_volumeInfo::setCanonicalVolumeLink(const QString &canonical_volume_link) {
    m_canonical_volume_link = canonical_volume_link;
    m_canonical_volume_link_isSet = true;
}

bool OAIVolume_volumeInfo::is_canonical_volume_link_Set() const{
    return m_canonical_volume_link_isSet;
}

bool OAIVolume_volumeInfo::is_canonical_volume_link_Valid() const{
    return m_canonical_volume_link_isValid;
}

QList<QString> OAIVolume_volumeInfo::getCategories() const {
    return m_categories;
}
void OAIVolume_volumeInfo::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIVolume_volumeInfo::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIVolume_volumeInfo::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIVolume_volumeInfo::isComicsContent() const {
    return m_comics_content;
}
void OAIVolume_volumeInfo::setComicsContent(const bool &comics_content) {
    m_comics_content = comics_content;
    m_comics_content_isSet = true;
}

bool OAIVolume_volumeInfo::is_comics_content_Set() const{
    return m_comics_content_isSet;
}

bool OAIVolume_volumeInfo::is_comics_content_Valid() const{
    return m_comics_content_isValid;
}

QString OAIVolume_volumeInfo::getContentVersion() const {
    return m_content_version;
}
void OAIVolume_volumeInfo::setContentVersion(const QString &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAIVolume_volumeInfo::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAIVolume_volumeInfo::is_content_version_Valid() const{
    return m_content_version_isValid;
}

QString OAIVolume_volumeInfo::getDescription() const {
    return m_description;
}
void OAIVolume_volumeInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVolume_volumeInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVolume_volumeInfo::is_description_Valid() const{
    return m_description_isValid;
}

OAIVolume_volumeInfo_dimensions OAIVolume_volumeInfo::getDimensions() const {
    return m_dimensions;
}
void OAIVolume_volumeInfo::setDimensions(const OAIVolume_volumeInfo_dimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIVolume_volumeInfo::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIVolume_volumeInfo::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIVolume_volumeInfo_imageLinks OAIVolume_volumeInfo::getImageLinks() const {
    return m_image_links;
}
void OAIVolume_volumeInfo::setImageLinks(const OAIVolume_volumeInfo_imageLinks &image_links) {
    m_image_links = image_links;
    m_image_links_isSet = true;
}

bool OAIVolume_volumeInfo::is_image_links_Set() const{
    return m_image_links_isSet;
}

bool OAIVolume_volumeInfo::is_image_links_Valid() const{
    return m_image_links_isValid;
}

QList<OAIVolume_volumeInfo_industryIdentifiers_inner> OAIVolume_volumeInfo::getIndustryIdentifiers() const {
    return m_industry_identifiers;
}
void OAIVolume_volumeInfo::setIndustryIdentifiers(const QList<OAIVolume_volumeInfo_industryIdentifiers_inner> &industry_identifiers) {
    m_industry_identifiers = industry_identifiers;
    m_industry_identifiers_isSet = true;
}

bool OAIVolume_volumeInfo::is_industry_identifiers_Set() const{
    return m_industry_identifiers_isSet;
}

bool OAIVolume_volumeInfo::is_industry_identifiers_Valid() const{
    return m_industry_identifiers_isValid;
}

QString OAIVolume_volumeInfo::getInfoLink() const {
    return m_info_link;
}
void OAIVolume_volumeInfo::setInfoLink(const QString &info_link) {
    m_info_link = info_link;
    m_info_link_isSet = true;
}

bool OAIVolume_volumeInfo::is_info_link_Set() const{
    return m_info_link_isSet;
}

bool OAIVolume_volumeInfo::is_info_link_Valid() const{
    return m_info_link_isValid;
}

QString OAIVolume_volumeInfo::getLanguage() const {
    return m_language;
}
void OAIVolume_volumeInfo::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIVolume_volumeInfo::is_language_Set() const{
    return m_language_isSet;
}

bool OAIVolume_volumeInfo::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIVolume_volumeInfo::getMainCategory() const {
    return m_main_category;
}
void OAIVolume_volumeInfo::setMainCategory(const QString &main_category) {
    m_main_category = main_category;
    m_main_category_isSet = true;
}

bool OAIVolume_volumeInfo::is_main_category_Set() const{
    return m_main_category_isSet;
}

bool OAIVolume_volumeInfo::is_main_category_Valid() const{
    return m_main_category_isValid;
}

QString OAIVolume_volumeInfo::getMaturityRating() const {
    return m_maturity_rating;
}
void OAIVolume_volumeInfo::setMaturityRating(const QString &maturity_rating) {
    m_maturity_rating = maturity_rating;
    m_maturity_rating_isSet = true;
}

bool OAIVolume_volumeInfo::is_maturity_rating_Set() const{
    return m_maturity_rating_isSet;
}

bool OAIVolume_volumeInfo::is_maturity_rating_Valid() const{
    return m_maturity_rating_isValid;
}

qint32 OAIVolume_volumeInfo::getPageCount() const {
    return m_page_count;
}
void OAIVolume_volumeInfo::setPageCount(const qint32 &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIVolume_volumeInfo::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIVolume_volumeInfo::is_page_count_Valid() const{
    return m_page_count_isValid;
}

OAIVolume_volumeInfo_panelizationSummary OAIVolume_volumeInfo::getPanelizationSummary() const {
    return m_panelization_summary;
}
void OAIVolume_volumeInfo::setPanelizationSummary(const OAIVolume_volumeInfo_panelizationSummary &panelization_summary) {
    m_panelization_summary = panelization_summary;
    m_panelization_summary_isSet = true;
}

bool OAIVolume_volumeInfo::is_panelization_summary_Set() const{
    return m_panelization_summary_isSet;
}

bool OAIVolume_volumeInfo::is_panelization_summary_Valid() const{
    return m_panelization_summary_isValid;
}

QString OAIVolume_volumeInfo::getPreviewLink() const {
    return m_preview_link;
}
void OAIVolume_volumeInfo::setPreviewLink(const QString &preview_link) {
    m_preview_link = preview_link;
    m_preview_link_isSet = true;
}

bool OAIVolume_volumeInfo::is_preview_link_Set() const{
    return m_preview_link_isSet;
}

bool OAIVolume_volumeInfo::is_preview_link_Valid() const{
    return m_preview_link_isValid;
}

QString OAIVolume_volumeInfo::getPrintType() const {
    return m_print_type;
}
void OAIVolume_volumeInfo::setPrintType(const QString &print_type) {
    m_print_type = print_type;
    m_print_type_isSet = true;
}

bool OAIVolume_volumeInfo::is_print_type_Set() const{
    return m_print_type_isSet;
}

bool OAIVolume_volumeInfo::is_print_type_Valid() const{
    return m_print_type_isValid;
}

qint32 OAIVolume_volumeInfo::getPrintedPageCount() const {
    return m_printed_page_count;
}
void OAIVolume_volumeInfo::setPrintedPageCount(const qint32 &printed_page_count) {
    m_printed_page_count = printed_page_count;
    m_printed_page_count_isSet = true;
}

bool OAIVolume_volumeInfo::is_printed_page_count_Set() const{
    return m_printed_page_count_isSet;
}

bool OAIVolume_volumeInfo::is_printed_page_count_Valid() const{
    return m_printed_page_count_isValid;
}

QString OAIVolume_volumeInfo::getPublishedDate() const {
    return m_published_date;
}
void OAIVolume_volumeInfo::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIVolume_volumeInfo::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIVolume_volumeInfo::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIVolume_volumeInfo::getPublisher() const {
    return m_publisher;
}
void OAIVolume_volumeInfo::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIVolume_volumeInfo::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIVolume_volumeInfo::is_publisher_Valid() const{
    return m_publisher_isValid;
}

qint32 OAIVolume_volumeInfo::getRatingsCount() const {
    return m_ratings_count;
}
void OAIVolume_volumeInfo::setRatingsCount(const qint32 &ratings_count) {
    m_ratings_count = ratings_count;
    m_ratings_count_isSet = true;
}

bool OAIVolume_volumeInfo::is_ratings_count_Set() const{
    return m_ratings_count_isSet;
}

bool OAIVolume_volumeInfo::is_ratings_count_Valid() const{
    return m_ratings_count_isValid;
}

OAIVolume_volumeInfo_readingModes OAIVolume_volumeInfo::getReadingModes() const {
    return m_reading_modes;
}
void OAIVolume_volumeInfo::setReadingModes(const OAIVolume_volumeInfo_readingModes &reading_modes) {
    m_reading_modes = reading_modes;
    m_reading_modes_isSet = true;
}

bool OAIVolume_volumeInfo::is_reading_modes_Set() const{
    return m_reading_modes_isSet;
}

bool OAIVolume_volumeInfo::is_reading_modes_Valid() const{
    return m_reading_modes_isValid;
}

qint32 OAIVolume_volumeInfo::getSamplePageCount() const {
    return m_sample_page_count;
}
void OAIVolume_volumeInfo::setSamplePageCount(const qint32 &sample_page_count) {
    m_sample_page_count = sample_page_count;
    m_sample_page_count_isSet = true;
}

bool OAIVolume_volumeInfo::is_sample_page_count_Set() const{
    return m_sample_page_count_isSet;
}

bool OAIVolume_volumeInfo::is_sample_page_count_Valid() const{
    return m_sample_page_count_isValid;
}

OAIVolumeseriesinfo OAIVolume_volumeInfo::getSeriesInfo() const {
    return m_series_info;
}
void OAIVolume_volumeInfo::setSeriesInfo(const OAIVolumeseriesinfo &series_info) {
    m_series_info = series_info;
    m_series_info_isSet = true;
}

bool OAIVolume_volumeInfo::is_series_info_Set() const{
    return m_series_info_isSet;
}

bool OAIVolume_volumeInfo::is_series_info_Valid() const{
    return m_series_info_isValid;
}

QString OAIVolume_volumeInfo::getSubtitle() const {
    return m_subtitle;
}
void OAIVolume_volumeInfo::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIVolume_volumeInfo::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIVolume_volumeInfo::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAIVolume_volumeInfo::getTitle() const {
    return m_title;
}
void OAIVolume_volumeInfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVolume_volumeInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVolume_volumeInfo::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVolume_volumeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_anon_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_volume_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comics_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panelization_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printed_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume_volumeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
