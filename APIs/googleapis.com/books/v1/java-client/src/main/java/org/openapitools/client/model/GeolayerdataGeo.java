/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GeolayerdataGeoViewport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeolayerdataGeo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeolayerdataGeo {
  public static final String SERIALIZED_NAME_BOUNDARY = "boundary";
  @SerializedName(SERIALIZED_NAME_BOUNDARY)
  private List<String> boundary = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE_POLICY = "cachePolicy";
  @SerializedName(SERIALIZED_NAME_CACHE_POLICY)
  private String cachePolicy;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_MAP_TYPE = "mapType";
  @SerializedName(SERIALIZED_NAME_MAP_TYPE)
  private String mapType;

  public static final String SERIALIZED_NAME_VIEWPORT = "viewport";
  @SerializedName(SERIALIZED_NAME_VIEWPORT)
  private GeolayerdataGeoViewport viewport;

  public static final String SERIALIZED_NAME_ZOOM = "zoom";
  @SerializedName(SERIALIZED_NAME_ZOOM)
  private Integer zoom;

  public GeolayerdataGeo() {
  }

  public GeolayerdataGeo boundary(List<String> boundary) {
    this.boundary = boundary;
    return this;
  }

  public GeolayerdataGeo addBoundaryItem(String boundaryItem) {
    if (this.boundary == null) {
      this.boundary = new ArrayList<>();
    }
    this.boundary.add(boundaryItem);
    return this;
  }

  /**
   * The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.
   * @return boundary
   */
  @javax.annotation.Nullable
  public List<String> getBoundary() {
    return boundary;
  }

  public void setBoundary(List<String> boundary) {
    this.boundary = boundary;
  }


  public GeolayerdataGeo cachePolicy(String cachePolicy) {
    this.cachePolicy = cachePolicy;
    return this;
  }

  /**
   * The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER
   * @return cachePolicy
   */
  @javax.annotation.Nullable
  public String getCachePolicy() {
    return cachePolicy;
  }

  public void setCachePolicy(String cachePolicy) {
    this.cachePolicy = cachePolicy;
  }


  public GeolayerdataGeo countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country code of the location.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GeolayerdataGeo latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of the location.
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public GeolayerdataGeo longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of the location.
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public GeolayerdataGeo mapType(String mapType) {
    this.mapType = mapType;
    return this;
  }

  /**
   * The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN
   * @return mapType
   */
  @javax.annotation.Nullable
  public String getMapType() {
    return mapType;
  }

  public void setMapType(String mapType) {
    this.mapType = mapType;
  }


  public GeolayerdataGeo viewport(GeolayerdataGeoViewport viewport) {
    this.viewport = viewport;
    return this;
  }

  /**
   * Get viewport
   * @return viewport
   */
  @javax.annotation.Nullable
  public GeolayerdataGeoViewport getViewport() {
    return viewport;
  }

  public void setViewport(GeolayerdataGeoViewport viewport) {
    this.viewport = viewport;
  }


  public GeolayerdataGeo zoom(Integer zoom) {
    this.zoom = zoom;
    return this;
  }

  /**
   * The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https: //developers.google.com/maps/documentation/staticmaps/#Zoomlevels
   * @return zoom
   */
  @javax.annotation.Nullable
  public Integer getZoom() {
    return zoom;
  }

  public void setZoom(Integer zoom) {
    this.zoom = zoom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeolayerdataGeo geolayerdataGeo = (GeolayerdataGeo) o;
    return Objects.equals(this.boundary, geolayerdataGeo.boundary) &&
        Objects.equals(this.cachePolicy, geolayerdataGeo.cachePolicy) &&
        Objects.equals(this.countryCode, geolayerdataGeo.countryCode) &&
        Objects.equals(this.latitude, geolayerdataGeo.latitude) &&
        Objects.equals(this.longitude, geolayerdataGeo.longitude) &&
        Objects.equals(this.mapType, geolayerdataGeo.mapType) &&
        Objects.equals(this.viewport, geolayerdataGeo.viewport) &&
        Objects.equals(this.zoom, geolayerdataGeo.zoom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundary, cachePolicy, countryCode, latitude, longitude, mapType, viewport, zoom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeolayerdataGeo {\n");
    sb.append("    boundary: ").append(toIndentedString(boundary)).append("\n");
    sb.append("    cachePolicy: ").append(toIndentedString(cachePolicy)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    mapType: ").append(toIndentedString(mapType)).append("\n");
    sb.append("    viewport: ").append(toIndentedString(viewport)).append("\n");
    sb.append("    zoom: ").append(toIndentedString(zoom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundary");
    openapiFields.add("cachePolicy");
    openapiFields.add("countryCode");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("mapType");
    openapiFields.add("viewport");
    openapiFields.add("zoom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeolayerdataGeo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeolayerdataGeo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeolayerdataGeo is not found in the empty JSON string", GeolayerdataGeo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeolayerdataGeo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeolayerdataGeo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("boundary") != null && !jsonObj.get("boundary").isJsonNull() && !jsonObj.get("boundary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundary` to be an array in the JSON string but got `%s`", jsonObj.get("boundary").toString()));
      }
      if ((jsonObj.get("cachePolicy") != null && !jsonObj.get("cachePolicy").isJsonNull()) && !jsonObj.get("cachePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cachePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cachePolicy").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("mapType") != null && !jsonObj.get("mapType").isJsonNull()) && !jsonObj.get("mapType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapType").toString()));
      }
      // validate the optional field `viewport`
      if (jsonObj.get("viewport") != null && !jsonObj.get("viewport").isJsonNull()) {
        GeolayerdataGeoViewport.validateJsonElement(jsonObj.get("viewport"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeolayerdataGeo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeolayerdataGeo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeolayerdataGeo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeolayerdataGeo.class));

       return (TypeAdapter<T>) new TypeAdapter<GeolayerdataGeo>() {
           @Override
           public void write(JsonWriter out, GeolayerdataGeo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeolayerdataGeo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeolayerdataGeo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeolayerdataGeo
   * @throws IOException if the JSON string is invalid with respect to GeolayerdataGeo
   */
  public static GeolayerdataGeo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeolayerdataGeo.class);
  }

  /**
   * Convert an instance of GeolayerdataGeo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

