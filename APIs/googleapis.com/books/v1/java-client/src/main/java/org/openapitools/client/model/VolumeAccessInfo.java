/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DownloadAccessRestriction;
import org.openapitools.client.model.VolumeAccessInfoEpub;
import org.openapitools.client.model.VolumeAccessInfoPdf;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeAccessInfo {
  public static final String SERIALIZED_NAME_ACCESS_VIEW_STATUS = "accessViewStatus";
  @SerializedName(SERIALIZED_NAME_ACCESS_VIEW_STATUS)
  private String accessViewStatus;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DOWNLOAD_ACCESS = "downloadAccess";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_ACCESS)
  private DownloadAccessRestriction downloadAccess;

  public static final String SERIALIZED_NAME_DRIVE_IMPORTED_CONTENT_LINK = "driveImportedContentLink";
  @SerializedName(SERIALIZED_NAME_DRIVE_IMPORTED_CONTENT_LINK)
  private String driveImportedContentLink;

  public static final String SERIALIZED_NAME_EMBEDDABLE = "embeddable";
  @SerializedName(SERIALIZED_NAME_EMBEDDABLE)
  private Boolean embeddable;

  public static final String SERIALIZED_NAME_EPUB = "epub";
  @SerializedName(SERIALIZED_NAME_EPUB)
  private VolumeAccessInfoEpub epub;

  public static final String SERIALIZED_NAME_EXPLICIT_OFFLINE_LICENSE_MANAGEMENT = "explicitOfflineLicenseManagement";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_OFFLINE_LICENSE_MANAGEMENT)
  private Boolean explicitOfflineLicenseManagement;

  public static final String SERIALIZED_NAME_PDF = "pdf";
  @SerializedName(SERIALIZED_NAME_PDF)
  private VolumeAccessInfoPdf pdf;

  public static final String SERIALIZED_NAME_PUBLIC_DOMAIN = "publicDomain";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DOMAIN)
  private Boolean publicDomain;

  public static final String SERIALIZED_NAME_QUOTE_SHARING_ALLOWED = "quoteSharingAllowed";
  @SerializedName(SERIALIZED_NAME_QUOTE_SHARING_ALLOWED)
  private Boolean quoteSharingAllowed;

  public static final String SERIALIZED_NAME_TEXT_TO_SPEECH_PERMISSION = "textToSpeechPermission";
  @SerializedName(SERIALIZED_NAME_TEXT_TO_SPEECH_PERMISSION)
  private String textToSpeechPermission;

  public static final String SERIALIZED_NAME_VIEW_ORDER_URL = "viewOrderUrl";
  @SerializedName(SERIALIZED_NAME_VIEW_ORDER_URL)
  private String viewOrderUrl;

  public static final String SERIALIZED_NAME_VIEWABILITY = "viewability";
  @SerializedName(SERIALIZED_NAME_VIEWABILITY)
  private String viewability;

  public static final String SERIALIZED_NAME_WEB_READER_LINK = "webReaderLink";
  @SerializedName(SERIALIZED_NAME_WEB_READER_LINK)
  private String webReaderLink;

  public VolumeAccessInfo() {
  }

  public VolumeAccessInfo accessViewStatus(String accessViewStatus) {
    this.accessViewStatus = accessViewStatus;
    return this;
  }

  /**
   * Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)
   * @return accessViewStatus
   */
  @javax.annotation.Nullable
  public String getAccessViewStatus() {
    return accessViewStatus;
  }

  public void setAccessViewStatus(String accessViewStatus) {
    this.accessViewStatus = accessViewStatus;
  }


  public VolumeAccessInfo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public VolumeAccessInfo downloadAccess(DownloadAccessRestriction downloadAccess) {
    this.downloadAccess = downloadAccess;
    return this;
  }

  /**
   * Get downloadAccess
   * @return downloadAccess
   */
  @javax.annotation.Nullable
  public DownloadAccessRestriction getDownloadAccess() {
    return downloadAccess;
  }

  public void setDownloadAccess(DownloadAccessRestriction downloadAccess) {
    this.downloadAccess = downloadAccess;
  }


  public VolumeAccessInfo driveImportedContentLink(String driveImportedContentLink) {
    this.driveImportedContentLink = driveImportedContentLink;
    return this;
  }

  /**
   * URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.
   * @return driveImportedContentLink
   */
  @javax.annotation.Nullable
  public String getDriveImportedContentLink() {
    return driveImportedContentLink;
  }

  public void setDriveImportedContentLink(String driveImportedContentLink) {
    this.driveImportedContentLink = driveImportedContentLink;
  }


  public VolumeAccessInfo embeddable(Boolean embeddable) {
    this.embeddable = embeddable;
    return this;
  }

  /**
   * Whether this volume can be embedded in a viewport using the Embedded Viewer API.
   * @return embeddable
   */
  @javax.annotation.Nullable
  public Boolean getEmbeddable() {
    return embeddable;
  }

  public void setEmbeddable(Boolean embeddable) {
    this.embeddable = embeddable;
  }


  public VolumeAccessInfo epub(VolumeAccessInfoEpub epub) {
    this.epub = epub;
    return this;
  }

  /**
   * Get epub
   * @return epub
   */
  @javax.annotation.Nullable
  public VolumeAccessInfoEpub getEpub() {
    return epub;
  }

  public void setEpub(VolumeAccessInfoEpub epub) {
    this.epub = epub;
  }


  public VolumeAccessInfo explicitOfflineLicenseManagement(Boolean explicitOfflineLicenseManagement) {
    this.explicitOfflineLicenseManagement = explicitOfflineLicenseManagement;
    return this;
  }

  /**
   * Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.
   * @return explicitOfflineLicenseManagement
   */
  @javax.annotation.Nullable
  public Boolean getExplicitOfflineLicenseManagement() {
    return explicitOfflineLicenseManagement;
  }

  public void setExplicitOfflineLicenseManagement(Boolean explicitOfflineLicenseManagement) {
    this.explicitOfflineLicenseManagement = explicitOfflineLicenseManagement;
  }


  public VolumeAccessInfo pdf(VolumeAccessInfoPdf pdf) {
    this.pdf = pdf;
    return this;
  }

  /**
   * Get pdf
   * @return pdf
   */
  @javax.annotation.Nullable
  public VolumeAccessInfoPdf getPdf() {
    return pdf;
  }

  public void setPdf(VolumeAccessInfoPdf pdf) {
    this.pdf = pdf;
  }


  public VolumeAccessInfo publicDomain(Boolean publicDomain) {
    this.publicDomain = publicDomain;
    return this;
  }

  /**
   * Whether or not this book is public domain in the country listed above.
   * @return publicDomain
   */
  @javax.annotation.Nullable
  public Boolean getPublicDomain() {
    return publicDomain;
  }

  public void setPublicDomain(Boolean publicDomain) {
    this.publicDomain = publicDomain;
  }


  public VolumeAccessInfo quoteSharingAllowed(Boolean quoteSharingAllowed) {
    this.quoteSharingAllowed = quoteSharingAllowed;
    return this;
  }

  /**
   * Whether quote sharing is allowed for this volume.
   * @return quoteSharingAllowed
   */
  @javax.annotation.Nullable
  public Boolean getQuoteSharingAllowed() {
    return quoteSharingAllowed;
  }

  public void setQuoteSharingAllowed(Boolean quoteSharingAllowed) {
    this.quoteSharingAllowed = quoteSharingAllowed;
  }


  public VolumeAccessInfo textToSpeechPermission(String textToSpeechPermission) {
    this.textToSpeechPermission = textToSpeechPermission;
    return this;
  }

  /**
   * Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.
   * @return textToSpeechPermission
   */
  @javax.annotation.Nullable
  public String getTextToSpeechPermission() {
    return textToSpeechPermission;
  }

  public void setTextToSpeechPermission(String textToSpeechPermission) {
    this.textToSpeechPermission = textToSpeechPermission;
  }


  public VolumeAccessInfo viewOrderUrl(String viewOrderUrl) {
    this.viewOrderUrl = viewOrderUrl;
    return this;
  }

  /**
   * For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.
   * @return viewOrderUrl
   */
  @javax.annotation.Nullable
  public String getViewOrderUrl() {
    return viewOrderUrl;
  }

  public void setViewOrderUrl(String viewOrderUrl) {
    this.viewOrderUrl = viewOrderUrl;
  }


  public VolumeAccessInfo viewability(String viewability) {
    this.viewability = viewability;
    return this;
  }

  /**
   * The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.
   * @return viewability
   */
  @javax.annotation.Nullable
  public String getViewability() {
    return viewability;
  }

  public void setViewability(String viewability) {
    this.viewability = viewability;
  }


  public VolumeAccessInfo webReaderLink(String webReaderLink) {
    this.webReaderLink = webReaderLink;
    return this;
  }

  /**
   * URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.
   * @return webReaderLink
   */
  @javax.annotation.Nullable
  public String getWebReaderLink() {
    return webReaderLink;
  }

  public void setWebReaderLink(String webReaderLink) {
    this.webReaderLink = webReaderLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeAccessInfo volumeAccessInfo = (VolumeAccessInfo) o;
    return Objects.equals(this.accessViewStatus, volumeAccessInfo.accessViewStatus) &&
        Objects.equals(this.country, volumeAccessInfo.country) &&
        Objects.equals(this.downloadAccess, volumeAccessInfo.downloadAccess) &&
        Objects.equals(this.driveImportedContentLink, volumeAccessInfo.driveImportedContentLink) &&
        Objects.equals(this.embeddable, volumeAccessInfo.embeddable) &&
        Objects.equals(this.epub, volumeAccessInfo.epub) &&
        Objects.equals(this.explicitOfflineLicenseManagement, volumeAccessInfo.explicitOfflineLicenseManagement) &&
        Objects.equals(this.pdf, volumeAccessInfo.pdf) &&
        Objects.equals(this.publicDomain, volumeAccessInfo.publicDomain) &&
        Objects.equals(this.quoteSharingAllowed, volumeAccessInfo.quoteSharingAllowed) &&
        Objects.equals(this.textToSpeechPermission, volumeAccessInfo.textToSpeechPermission) &&
        Objects.equals(this.viewOrderUrl, volumeAccessInfo.viewOrderUrl) &&
        Objects.equals(this.viewability, volumeAccessInfo.viewability) &&
        Objects.equals(this.webReaderLink, volumeAccessInfo.webReaderLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessViewStatus, country, downloadAccess, driveImportedContentLink, embeddable, epub, explicitOfflineLicenseManagement, pdf, publicDomain, quoteSharingAllowed, textToSpeechPermission, viewOrderUrl, viewability, webReaderLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeAccessInfo {\n");
    sb.append("    accessViewStatus: ").append(toIndentedString(accessViewStatus)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    downloadAccess: ").append(toIndentedString(downloadAccess)).append("\n");
    sb.append("    driveImportedContentLink: ").append(toIndentedString(driveImportedContentLink)).append("\n");
    sb.append("    embeddable: ").append(toIndentedString(embeddable)).append("\n");
    sb.append("    epub: ").append(toIndentedString(epub)).append("\n");
    sb.append("    explicitOfflineLicenseManagement: ").append(toIndentedString(explicitOfflineLicenseManagement)).append("\n");
    sb.append("    pdf: ").append(toIndentedString(pdf)).append("\n");
    sb.append("    publicDomain: ").append(toIndentedString(publicDomain)).append("\n");
    sb.append("    quoteSharingAllowed: ").append(toIndentedString(quoteSharingAllowed)).append("\n");
    sb.append("    textToSpeechPermission: ").append(toIndentedString(textToSpeechPermission)).append("\n");
    sb.append("    viewOrderUrl: ").append(toIndentedString(viewOrderUrl)).append("\n");
    sb.append("    viewability: ").append(toIndentedString(viewability)).append("\n");
    sb.append("    webReaderLink: ").append(toIndentedString(webReaderLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessViewStatus");
    openapiFields.add("country");
    openapiFields.add("downloadAccess");
    openapiFields.add("driveImportedContentLink");
    openapiFields.add("embeddable");
    openapiFields.add("epub");
    openapiFields.add("explicitOfflineLicenseManagement");
    openapiFields.add("pdf");
    openapiFields.add("publicDomain");
    openapiFields.add("quoteSharingAllowed");
    openapiFields.add("textToSpeechPermission");
    openapiFields.add("viewOrderUrl");
    openapiFields.add("viewability");
    openapiFields.add("webReaderLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeAccessInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeAccessInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeAccessInfo is not found in the empty JSON string", VolumeAccessInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeAccessInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeAccessInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessViewStatus") != null && !jsonObj.get("accessViewStatus").isJsonNull()) && !jsonObj.get("accessViewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessViewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessViewStatus").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `downloadAccess`
      if (jsonObj.get("downloadAccess") != null && !jsonObj.get("downloadAccess").isJsonNull()) {
        DownloadAccessRestriction.validateJsonElement(jsonObj.get("downloadAccess"));
      }
      if ((jsonObj.get("driveImportedContentLink") != null && !jsonObj.get("driveImportedContentLink").isJsonNull()) && !jsonObj.get("driveImportedContentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driveImportedContentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driveImportedContentLink").toString()));
      }
      // validate the optional field `epub`
      if (jsonObj.get("epub") != null && !jsonObj.get("epub").isJsonNull()) {
        VolumeAccessInfoEpub.validateJsonElement(jsonObj.get("epub"));
      }
      // validate the optional field `pdf`
      if (jsonObj.get("pdf") != null && !jsonObj.get("pdf").isJsonNull()) {
        VolumeAccessInfoPdf.validateJsonElement(jsonObj.get("pdf"));
      }
      if ((jsonObj.get("textToSpeechPermission") != null && !jsonObj.get("textToSpeechPermission").isJsonNull()) && !jsonObj.get("textToSpeechPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textToSpeechPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textToSpeechPermission").toString()));
      }
      if ((jsonObj.get("viewOrderUrl") != null && !jsonObj.get("viewOrderUrl").isJsonNull()) && !jsonObj.get("viewOrderUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewOrderUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewOrderUrl").toString()));
      }
      if ((jsonObj.get("viewability") != null && !jsonObj.get("viewability").isJsonNull()) && !jsonObj.get("viewability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewability").toString()));
      }
      if ((jsonObj.get("webReaderLink") != null && !jsonObj.get("webReaderLink").isJsonNull()) && !jsonObj.get("webReaderLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webReaderLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webReaderLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeAccessInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeAccessInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeAccessInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeAccessInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeAccessInfo>() {
           @Override
           public void write(JsonWriter out, VolumeAccessInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeAccessInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeAccessInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeAccessInfo
   * @throws IOException if the JSON string is invalid with respect to VolumeAccessInfo
   */
  public static VolumeAccessInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeAccessInfo.class);
  }

  /**
   * Convert an instance of VolumeAccessInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

