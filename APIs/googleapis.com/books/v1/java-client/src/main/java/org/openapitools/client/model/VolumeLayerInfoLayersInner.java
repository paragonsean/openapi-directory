/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VolumeLayerInfoLayersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeLayerInfoLayersInner {
  public static final String SERIALIZED_NAME_LAYER_ID = "layerId";
  @SerializedName(SERIALIZED_NAME_LAYER_ID)
  private String layerId;

  public static final String SERIALIZED_NAME_VOLUME_ANNOTATIONS_VERSION = "volumeAnnotationsVersion";
  @SerializedName(SERIALIZED_NAME_VOLUME_ANNOTATIONS_VERSION)
  private String volumeAnnotationsVersion;

  public VolumeLayerInfoLayersInner() {
  }

  public VolumeLayerInfoLayersInner layerId(String layerId) {
    this.layerId = layerId;
    return this;
  }

  /**
   * The layer id of this layer (e.g. \&quot;geo\&quot;).
   * @return layerId
   */
  @javax.annotation.Nullable
  public String getLayerId() {
    return layerId;
  }

  public void setLayerId(String layerId) {
    this.layerId = layerId;
  }


  public VolumeLayerInfoLayersInner volumeAnnotationsVersion(String volumeAnnotationsVersion) {
    this.volumeAnnotationsVersion = volumeAnnotationsVersion;
    return this;
  }

  /**
   * The current version of this layer&#39;s volume annotations. Note that this version applies only to the data in the books.layers.volumeAnnotations.* responses. The actual annotation data is versioned separately.
   * @return volumeAnnotationsVersion
   */
  @javax.annotation.Nullable
  public String getVolumeAnnotationsVersion() {
    return volumeAnnotationsVersion;
  }

  public void setVolumeAnnotationsVersion(String volumeAnnotationsVersion) {
    this.volumeAnnotationsVersion = volumeAnnotationsVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeLayerInfoLayersInner volumeLayerInfoLayersInner = (VolumeLayerInfoLayersInner) o;
    return Objects.equals(this.layerId, volumeLayerInfoLayersInner.layerId) &&
        Objects.equals(this.volumeAnnotationsVersion, volumeLayerInfoLayersInner.volumeAnnotationsVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layerId, volumeAnnotationsVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeLayerInfoLayersInner {\n");
    sb.append("    layerId: ").append(toIndentedString(layerId)).append("\n");
    sb.append("    volumeAnnotationsVersion: ").append(toIndentedString(volumeAnnotationsVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("layerId");
    openapiFields.add("volumeAnnotationsVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeLayerInfoLayersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeLayerInfoLayersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeLayerInfoLayersInner is not found in the empty JSON string", VolumeLayerInfoLayersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeLayerInfoLayersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeLayerInfoLayersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("layerId") != null && !jsonObj.get("layerId").isJsonNull()) && !jsonObj.get("layerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerId").toString()));
      }
      if ((jsonObj.get("volumeAnnotationsVersion") != null && !jsonObj.get("volumeAnnotationsVersion").isJsonNull()) && !jsonObj.get("volumeAnnotationsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeAnnotationsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeAnnotationsVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeLayerInfoLayersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeLayerInfoLayersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeLayerInfoLayersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeLayerInfoLayersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeLayerInfoLayersInner>() {
           @Override
           public void write(JsonWriter out, VolumeLayerInfoLayersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeLayerInfoLayersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeLayerInfoLayersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeLayerInfoLayersInner
   * @throws IOException if the JSON string is invalid with respect to VolumeLayerInfoLayersInner
   */
  public static VolumeLayerInfoLayersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeLayerInfoLayersInner.class);
  }

  /**
   * Convert an instance of VolumeLayerInfoLayersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

