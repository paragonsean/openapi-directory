/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SeriesSeriesInnerSeriesSubscriptionReleaseInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeriesSeriesInnerSeriesSubscriptionReleaseInfo {
  public static final String SERIALIZED_NAME_CANCEL_TIME = "cancelTime";
  @SerializedName(SERIALIZED_NAME_CANCEL_TIME)
  private String cancelTime;

  public static final String SERIALIZED_NAME_CURRENT_RELEASE_INFO = "currentReleaseInfo";
  @SerializedName(SERIALIZED_NAME_CURRENT_RELEASE_INFO)
  private SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo currentReleaseInfo;

  public static final String SERIALIZED_NAME_NEXT_RELEASE_INFO = "nextReleaseInfo";
  @SerializedName(SERIALIZED_NAME_NEXT_RELEASE_INFO)
  private SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo nextReleaseInfo;

  public static final String SERIALIZED_NAME_SERIES_SUBSCRIPTION_TYPE = "seriesSubscriptionType";
  @SerializedName(SERIALIZED_NAME_SERIES_SUBSCRIPTION_TYPE)
  private String seriesSubscriptionType;

  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo() {
  }

  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo cancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  /**
   * Get cancelTime
   * @return cancelTime
   */
  @javax.annotation.Nullable
  public String getCancelTime() {
    return cancelTime;
  }

  public void setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
  }


  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo currentReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo currentReleaseInfo) {
    this.currentReleaseInfo = currentReleaseInfo;
    return this;
  }

  /**
   * Get currentReleaseInfo
   * @return currentReleaseInfo
   */
  @javax.annotation.Nullable
  public SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo getCurrentReleaseInfo() {
    return currentReleaseInfo;
  }

  public void setCurrentReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo currentReleaseInfo) {
    this.currentReleaseInfo = currentReleaseInfo;
  }


  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo nextReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo nextReleaseInfo) {
    this.nextReleaseInfo = nextReleaseInfo;
    return this;
  }

  /**
   * Get nextReleaseInfo
   * @return nextReleaseInfo
   */
  @javax.annotation.Nullable
  public SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo getNextReleaseInfo() {
    return nextReleaseInfo;
  }

  public void setNextReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo nextReleaseInfo) {
    this.nextReleaseInfo = nextReleaseInfo;
  }


  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo seriesSubscriptionType(String seriesSubscriptionType) {
    this.seriesSubscriptionType = seriesSubscriptionType;
    return this;
  }

  /**
   * Get seriesSubscriptionType
   * @return seriesSubscriptionType
   */
  @javax.annotation.Nullable
  public String getSeriesSubscriptionType() {
    return seriesSubscriptionType;
  }

  public void setSeriesSubscriptionType(String seriesSubscriptionType) {
    this.seriesSubscriptionType = seriesSubscriptionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeriesSeriesInnerSeriesSubscriptionReleaseInfo seriesSeriesInnerSeriesSubscriptionReleaseInfo = (SeriesSeriesInnerSeriesSubscriptionReleaseInfo) o;
    return Objects.equals(this.cancelTime, seriesSeriesInnerSeriesSubscriptionReleaseInfo.cancelTime) &&
        Objects.equals(this.currentReleaseInfo, seriesSeriesInnerSeriesSubscriptionReleaseInfo.currentReleaseInfo) &&
        Objects.equals(this.nextReleaseInfo, seriesSeriesInnerSeriesSubscriptionReleaseInfo.nextReleaseInfo) &&
        Objects.equals(this.seriesSubscriptionType, seriesSeriesInnerSeriesSubscriptionReleaseInfo.seriesSubscriptionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelTime, currentReleaseInfo, nextReleaseInfo, seriesSubscriptionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeriesSeriesInnerSeriesSubscriptionReleaseInfo {\n");
    sb.append("    cancelTime: ").append(toIndentedString(cancelTime)).append("\n");
    sb.append("    currentReleaseInfo: ").append(toIndentedString(currentReleaseInfo)).append("\n");
    sb.append("    nextReleaseInfo: ").append(toIndentedString(nextReleaseInfo)).append("\n");
    sb.append("    seriesSubscriptionType: ").append(toIndentedString(seriesSubscriptionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelTime");
    openapiFields.add("currentReleaseInfo");
    openapiFields.add("nextReleaseInfo");
    openapiFields.add("seriesSubscriptionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeriesSeriesInnerSeriesSubscriptionReleaseInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeriesSeriesInnerSeriesSubscriptionReleaseInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeriesSeriesInnerSeriesSubscriptionReleaseInfo is not found in the empty JSON string", SeriesSeriesInnerSeriesSubscriptionReleaseInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeriesSeriesInnerSeriesSubscriptionReleaseInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeriesSeriesInnerSeriesSubscriptionReleaseInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cancelTime") != null && !jsonObj.get("cancelTime").isJsonNull()) && !jsonObj.get("cancelTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelTime").toString()));
      }
      // validate the optional field `currentReleaseInfo`
      if (jsonObj.get("currentReleaseInfo") != null && !jsonObj.get("currentReleaseInfo").isJsonNull()) {
        SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo.validateJsonElement(jsonObj.get("currentReleaseInfo"));
      }
      // validate the optional field `nextReleaseInfo`
      if (jsonObj.get("nextReleaseInfo") != null && !jsonObj.get("nextReleaseInfo").isJsonNull()) {
        SeriesSeriesInnerSeriesSubscriptionReleaseInfoCurrentReleaseInfo.validateJsonElement(jsonObj.get("nextReleaseInfo"));
      }
      if ((jsonObj.get("seriesSubscriptionType") != null && !jsonObj.get("seriesSubscriptionType").isJsonNull()) && !jsonObj.get("seriesSubscriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesSubscriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesSubscriptionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeriesSeriesInnerSeriesSubscriptionReleaseInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeriesSeriesInnerSeriesSubscriptionReleaseInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeriesSeriesInnerSeriesSubscriptionReleaseInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeriesSeriesInnerSeriesSubscriptionReleaseInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SeriesSeriesInnerSeriesSubscriptionReleaseInfo>() {
           @Override
           public void write(JsonWriter out, SeriesSeriesInnerSeriesSubscriptionReleaseInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeriesSeriesInnerSeriesSubscriptionReleaseInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeriesSeriesInnerSeriesSubscriptionReleaseInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeriesSeriesInnerSeriesSubscriptionReleaseInfo
   * @throws IOException if the JSON string is invalid with respect to SeriesSeriesInnerSeriesSubscriptionReleaseInfo
   */
  public static SeriesSeriesInnerSeriesSubscriptionReleaseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeriesSeriesInnerSeriesSubscriptionReleaseInfo.class);
  }

  /**
   * Convert an instance of SeriesSeriesInnerSeriesSubscriptionReleaseInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

