/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConcurrentAccessRestriction;
import org.openapitools.client.model.DownloadAccessRestriction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestAccessData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestAccessData {
  public static final String SERIALIZED_NAME_CONCURRENT_ACCESS = "concurrentAccess";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_ACCESS)
  private ConcurrentAccessRestriction concurrentAccess;

  public static final String SERIALIZED_NAME_DOWNLOAD_ACCESS = "downloadAccess";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_ACCESS)
  private DownloadAccessRestriction downloadAccess;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public RequestAccessData() {
  }

  public RequestAccessData concurrentAccess(ConcurrentAccessRestriction concurrentAccess) {
    this.concurrentAccess = concurrentAccess;
    return this;
  }

  /**
   * Get concurrentAccess
   * @return concurrentAccess
   */
  @javax.annotation.Nullable
  public ConcurrentAccessRestriction getConcurrentAccess() {
    return concurrentAccess;
  }

  public void setConcurrentAccess(ConcurrentAccessRestriction concurrentAccess) {
    this.concurrentAccess = concurrentAccess;
  }


  public RequestAccessData downloadAccess(DownloadAccessRestriction downloadAccess) {
    this.downloadAccess = downloadAccess;
    return this;
  }

  /**
   * Get downloadAccess
   * @return downloadAccess
   */
  @javax.annotation.Nullable
  public DownloadAccessRestriction getDownloadAccess() {
    return downloadAccess;
  }

  public void setDownloadAccess(DownloadAccessRestriction downloadAccess) {
    this.downloadAccess = downloadAccess;
  }


  public RequestAccessData kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestAccessData requestAccessData = (RequestAccessData) o;
    return Objects.equals(this.concurrentAccess, requestAccessData.concurrentAccess) &&
        Objects.equals(this.downloadAccess, requestAccessData.downloadAccess) &&
        Objects.equals(this.kind, requestAccessData.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentAccess, downloadAccess, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestAccessData {\n");
    sb.append("    concurrentAccess: ").append(toIndentedString(concurrentAccess)).append("\n");
    sb.append("    downloadAccess: ").append(toIndentedString(downloadAccess)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrentAccess");
    openapiFields.add("downloadAccess");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestAccessData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestAccessData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestAccessData is not found in the empty JSON string", RequestAccessData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestAccessData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestAccessData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `concurrentAccess`
      if (jsonObj.get("concurrentAccess") != null && !jsonObj.get("concurrentAccess").isJsonNull()) {
        ConcurrentAccessRestriction.validateJsonElement(jsonObj.get("concurrentAccess"));
      }
      // validate the optional field `downloadAccess`
      if (jsonObj.get("downloadAccess") != null && !jsonObj.get("downloadAccess").isJsonNull()) {
        DownloadAccessRestriction.validateJsonElement(jsonObj.get("downloadAccess"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestAccessData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestAccessData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestAccessData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestAccessData.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestAccessData>() {
           @Override
           public void write(JsonWriter out, RequestAccessData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestAccessData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestAccessData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestAccessData
   * @throws IOException if the JSON string is invalid with respect to RequestAccessData
   */
  public static RequestAccessData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestAccessData.class);
  }

  /**
   * Convert an instance of RequestAccessData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

