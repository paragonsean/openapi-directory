/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscoveryclustersClustersInnerBannerWithContentContainer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoveryclustersClustersInnerBannerWithContentContainer {
  public static final String SERIALIZED_NAME_FILL_COLOR_ARGB = "fillColorArgb";
  @SerializedName(SERIALIZED_NAME_FILL_COLOR_ARGB)
  private String fillColorArgb;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_MASK_COLOR_ARGB = "maskColorArgb";
  @SerializedName(SERIALIZED_NAME_MASK_COLOR_ARGB)
  private String maskColorArgb;

  public static final String SERIALIZED_NAME_MORE_BUTTON_TEXT = "moreButtonText";
  @SerializedName(SERIALIZED_NAME_MORE_BUTTON_TEXT)
  private String moreButtonText;

  public static final String SERIALIZED_NAME_MORE_BUTTON_URL = "moreButtonUrl";
  @SerializedName(SERIALIZED_NAME_MORE_BUTTON_URL)
  private String moreButtonUrl;

  public static final String SERIALIZED_NAME_TEXT_COLOR_ARGB = "textColorArgb";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR_ARGB)
  private String textColorArgb;

  public DiscoveryclustersClustersInnerBannerWithContentContainer() {
  }

  public DiscoveryclustersClustersInnerBannerWithContentContainer fillColorArgb(String fillColorArgb) {
    this.fillColorArgb = fillColorArgb;
    return this;
  }

  /**
   * Get fillColorArgb
   * @return fillColorArgb
   */
  @javax.annotation.Nullable
  public String getFillColorArgb() {
    return fillColorArgb;
  }

  public void setFillColorArgb(String fillColorArgb) {
    this.fillColorArgb = fillColorArgb;
  }


  public DiscoveryclustersClustersInnerBannerWithContentContainer imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public DiscoveryclustersClustersInnerBannerWithContentContainer maskColorArgb(String maskColorArgb) {
    this.maskColorArgb = maskColorArgb;
    return this;
  }

  /**
   * Get maskColorArgb
   * @return maskColorArgb
   */
  @javax.annotation.Nullable
  public String getMaskColorArgb() {
    return maskColorArgb;
  }

  public void setMaskColorArgb(String maskColorArgb) {
    this.maskColorArgb = maskColorArgb;
  }


  public DiscoveryclustersClustersInnerBannerWithContentContainer moreButtonText(String moreButtonText) {
    this.moreButtonText = moreButtonText;
    return this;
  }

  /**
   * Get moreButtonText
   * @return moreButtonText
   */
  @javax.annotation.Nullable
  public String getMoreButtonText() {
    return moreButtonText;
  }

  public void setMoreButtonText(String moreButtonText) {
    this.moreButtonText = moreButtonText;
  }


  public DiscoveryclustersClustersInnerBannerWithContentContainer moreButtonUrl(String moreButtonUrl) {
    this.moreButtonUrl = moreButtonUrl;
    return this;
  }

  /**
   * Get moreButtonUrl
   * @return moreButtonUrl
   */
  @javax.annotation.Nullable
  public String getMoreButtonUrl() {
    return moreButtonUrl;
  }

  public void setMoreButtonUrl(String moreButtonUrl) {
    this.moreButtonUrl = moreButtonUrl;
  }


  public DiscoveryclustersClustersInnerBannerWithContentContainer textColorArgb(String textColorArgb) {
    this.textColorArgb = textColorArgb;
    return this;
  }

  /**
   * Get textColorArgb
   * @return textColorArgb
   */
  @javax.annotation.Nullable
  public String getTextColorArgb() {
    return textColorArgb;
  }

  public void setTextColorArgb(String textColorArgb) {
    this.textColorArgb = textColorArgb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryclustersClustersInnerBannerWithContentContainer discoveryclustersClustersInnerBannerWithContentContainer = (DiscoveryclustersClustersInnerBannerWithContentContainer) o;
    return Objects.equals(this.fillColorArgb, discoveryclustersClustersInnerBannerWithContentContainer.fillColorArgb) &&
        Objects.equals(this.imageUrl, discoveryclustersClustersInnerBannerWithContentContainer.imageUrl) &&
        Objects.equals(this.maskColorArgb, discoveryclustersClustersInnerBannerWithContentContainer.maskColorArgb) &&
        Objects.equals(this.moreButtonText, discoveryclustersClustersInnerBannerWithContentContainer.moreButtonText) &&
        Objects.equals(this.moreButtonUrl, discoveryclustersClustersInnerBannerWithContentContainer.moreButtonUrl) &&
        Objects.equals(this.textColorArgb, discoveryclustersClustersInnerBannerWithContentContainer.textColorArgb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fillColorArgb, imageUrl, maskColorArgb, moreButtonText, moreButtonUrl, textColorArgb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryclustersClustersInnerBannerWithContentContainer {\n");
    sb.append("    fillColorArgb: ").append(toIndentedString(fillColorArgb)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    maskColorArgb: ").append(toIndentedString(maskColorArgb)).append("\n");
    sb.append("    moreButtonText: ").append(toIndentedString(moreButtonText)).append("\n");
    sb.append("    moreButtonUrl: ").append(toIndentedString(moreButtonUrl)).append("\n");
    sb.append("    textColorArgb: ").append(toIndentedString(textColorArgb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fillColorArgb");
    openapiFields.add("imageUrl");
    openapiFields.add("maskColorArgb");
    openapiFields.add("moreButtonText");
    openapiFields.add("moreButtonUrl");
    openapiFields.add("textColorArgb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoveryclustersClustersInnerBannerWithContentContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoveryclustersClustersInnerBannerWithContentContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoveryclustersClustersInnerBannerWithContentContainer is not found in the empty JSON string", DiscoveryclustersClustersInnerBannerWithContentContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoveryclustersClustersInnerBannerWithContentContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoveryclustersClustersInnerBannerWithContentContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fillColorArgb") != null && !jsonObj.get("fillColorArgb").isJsonNull()) && !jsonObj.get("fillColorArgb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillColorArgb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillColorArgb").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("maskColorArgb") != null && !jsonObj.get("maskColorArgb").isJsonNull()) && !jsonObj.get("maskColorArgb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskColorArgb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskColorArgb").toString()));
      }
      if ((jsonObj.get("moreButtonText") != null && !jsonObj.get("moreButtonText").isJsonNull()) && !jsonObj.get("moreButtonText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moreButtonText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moreButtonText").toString()));
      }
      if ((jsonObj.get("moreButtonUrl") != null && !jsonObj.get("moreButtonUrl").isJsonNull()) && !jsonObj.get("moreButtonUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moreButtonUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moreButtonUrl").toString()));
      }
      if ((jsonObj.get("textColorArgb") != null && !jsonObj.get("textColorArgb").isJsonNull()) && !jsonObj.get("textColorArgb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textColorArgb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textColorArgb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoveryclustersClustersInnerBannerWithContentContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoveryclustersClustersInnerBannerWithContentContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoveryclustersClustersInnerBannerWithContentContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoveryclustersClustersInnerBannerWithContentContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoveryclustersClustersInnerBannerWithContentContainer>() {
           @Override
           public void write(JsonWriter out, DiscoveryclustersClustersInnerBannerWithContentContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoveryclustersClustersInnerBannerWithContentContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoveryclustersClustersInnerBannerWithContentContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoveryclustersClustersInnerBannerWithContentContainer
   * @throws IOException if the JSON string is invalid with respect to DiscoveryclustersClustersInnerBannerWithContentContainer
   */
  public static DiscoveryclustersClustersInnerBannerWithContentContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoveryclustersClustersInnerBannerWithContentContainer.class);
  }

  /**
   * Convert an instance of DiscoveryclustersClustersInnerBannerWithContentContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

