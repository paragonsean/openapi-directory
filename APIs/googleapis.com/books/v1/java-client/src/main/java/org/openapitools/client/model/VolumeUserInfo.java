/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReadingPosition;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.VolumeUserInfoCopy;
import org.openapitools.client.model.VolumeUserInfoFamilySharing;
import org.openapitools.client.model.VolumeUserInfoRentalPeriod;
import org.openapitools.client.model.VolumeUserInfoUserUploadedVolumeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeUserInfo {
  public static final String SERIALIZED_NAME_ACQUIRED_TIME = "acquiredTime";
  @SerializedName(SERIALIZED_NAME_ACQUIRED_TIME)
  private String acquiredTime;

  public static final String SERIALIZED_NAME_ACQUISITION_TYPE = "acquisitionType";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_TYPE)
  private Integer acquisitionType;

  public static final String SERIALIZED_NAME_COPY = "copy";
  @SerializedName(SERIALIZED_NAME_COPY)
  private VolumeUserInfoCopy copy;

  public static final String SERIALIZED_NAME_ENTITLEMENT_TYPE = "entitlementType";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_TYPE)
  private Integer entitlementType;

  public static final String SERIALIZED_NAME_FAMILY_SHARING = "familySharing";
  @SerializedName(SERIALIZED_NAME_FAMILY_SHARING)
  private VolumeUserInfoFamilySharing familySharing;

  public static final String SERIALIZED_NAME_IS_FAMILY_SHARED_FROM_USER = "isFamilySharedFromUser";
  @SerializedName(SERIALIZED_NAME_IS_FAMILY_SHARED_FROM_USER)
  private Boolean isFamilySharedFromUser;

  public static final String SERIALIZED_NAME_IS_FAMILY_SHARED_TO_USER = "isFamilySharedToUser";
  @SerializedName(SERIALIZED_NAME_IS_FAMILY_SHARED_TO_USER)
  private Boolean isFamilySharedToUser;

  public static final String SERIALIZED_NAME_IS_FAMILY_SHARING_ALLOWED = "isFamilySharingAllowed";
  @SerializedName(SERIALIZED_NAME_IS_FAMILY_SHARING_ALLOWED)
  private Boolean isFamilySharingAllowed;

  public static final String SERIALIZED_NAME_IS_FAMILY_SHARING_DISABLED_BY_FOP = "isFamilySharingDisabledByFop";
  @SerializedName(SERIALIZED_NAME_IS_FAMILY_SHARING_DISABLED_BY_FOP)
  private Boolean isFamilySharingDisabledByFop;

  public static final String SERIALIZED_NAME_IS_IN_MY_BOOKS = "isInMyBooks";
  @SerializedName(SERIALIZED_NAME_IS_IN_MY_BOOKS)
  private Boolean isInMyBooks;

  public static final String SERIALIZED_NAME_IS_PREORDERED = "isPreordered";
  @SerializedName(SERIALIZED_NAME_IS_PREORDERED)
  private Boolean isPreordered;

  public static final String SERIALIZED_NAME_IS_PURCHASED = "isPurchased";
  @SerializedName(SERIALIZED_NAME_IS_PURCHASED)
  private Boolean isPurchased;

  public static final String SERIALIZED_NAME_IS_UPLOADED = "isUploaded";
  @SerializedName(SERIALIZED_NAME_IS_UPLOADED)
  private Boolean isUploaded;

  public static final String SERIALIZED_NAME_READING_POSITION = "readingPosition";
  @SerializedName(SERIALIZED_NAME_READING_POSITION)
  private ReadingPosition readingPosition;

  public static final String SERIALIZED_NAME_RENTAL_PERIOD = "rentalPeriod";
  @SerializedName(SERIALIZED_NAME_RENTAL_PERIOD)
  private VolumeUserInfoRentalPeriod rentalPeriod;

  public static final String SERIALIZED_NAME_RENTAL_STATE = "rentalState";
  @SerializedName(SERIALIZED_NAME_RENTAL_STATE)
  private String rentalState;

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private Review review;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_USER_UPLOADED_VOLUME_INFO = "userUploadedVolumeInfo";
  @SerializedName(SERIALIZED_NAME_USER_UPLOADED_VOLUME_INFO)
  private VolumeUserInfoUserUploadedVolumeInfo userUploadedVolumeInfo;

  public VolumeUserInfo() {
  }

  public VolumeUserInfo acquiredTime(String acquiredTime) {
    this.acquiredTime = acquiredTime;
    return this;
  }

  /**
   * Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.
   * @return acquiredTime
   */
  @javax.annotation.Nullable
  public String getAcquiredTime() {
    return acquiredTime;
  }

  public void setAcquiredTime(String acquiredTime) {
    this.acquiredTime = acquiredTime;
  }


  public VolumeUserInfo acquisitionType(Integer acquisitionType) {
    this.acquisitionType = acquisitionType;
    return this;
  }

  /**
   * How this volume was acquired.
   * @return acquisitionType
   */
  @javax.annotation.Nullable
  public Integer getAcquisitionType() {
    return acquisitionType;
  }

  public void setAcquisitionType(Integer acquisitionType) {
    this.acquisitionType = acquisitionType;
  }


  public VolumeUserInfo copy(VolumeUserInfoCopy copy) {
    this.copy = copy;
    return this;
  }

  /**
   * Get copy
   * @return copy
   */
  @javax.annotation.Nullable
  public VolumeUserInfoCopy getCopy() {
    return copy;
  }

  public void setCopy(VolumeUserInfoCopy copy) {
    this.copy = copy;
  }


  public VolumeUserInfo entitlementType(Integer entitlementType) {
    this.entitlementType = entitlementType;
    return this;
  }

  /**
   * Whether this volume is purchased, sample, pd download etc.
   * @return entitlementType
   */
  @javax.annotation.Nullable
  public Integer getEntitlementType() {
    return entitlementType;
  }

  public void setEntitlementType(Integer entitlementType) {
    this.entitlementType = entitlementType;
  }


  public VolumeUserInfo familySharing(VolumeUserInfoFamilySharing familySharing) {
    this.familySharing = familySharing;
    return this;
  }

  /**
   * Get familySharing
   * @return familySharing
   */
  @javax.annotation.Nullable
  public VolumeUserInfoFamilySharing getFamilySharing() {
    return familySharing;
  }

  public void setFamilySharing(VolumeUserInfoFamilySharing familySharing) {
    this.familySharing = familySharing;
  }


  public VolumeUserInfo isFamilySharedFromUser(Boolean isFamilySharedFromUser) {
    this.isFamilySharedFromUser = isFamilySharedFromUser;
    return this;
  }

  /**
   * Whether or not the user shared this volume with the family.
   * @return isFamilySharedFromUser
   */
  @javax.annotation.Nullable
  public Boolean getIsFamilySharedFromUser() {
    return isFamilySharedFromUser;
  }

  public void setIsFamilySharedFromUser(Boolean isFamilySharedFromUser) {
    this.isFamilySharedFromUser = isFamilySharedFromUser;
  }


  public VolumeUserInfo isFamilySharedToUser(Boolean isFamilySharedToUser) {
    this.isFamilySharedToUser = isFamilySharedToUser;
    return this;
  }

  /**
   * Whether or not the user received this volume through family sharing.
   * @return isFamilySharedToUser
   */
  @javax.annotation.Nullable
  public Boolean getIsFamilySharedToUser() {
    return isFamilySharedToUser;
  }

  public void setIsFamilySharedToUser(Boolean isFamilySharedToUser) {
    this.isFamilySharedToUser = isFamilySharedToUser;
  }


  public VolumeUserInfo isFamilySharingAllowed(Boolean isFamilySharingAllowed) {
    this.isFamilySharingAllowed = isFamilySharingAllowed;
    return this;
  }

  /**
   * Deprecated: Replaced by familySharing.
   * @return isFamilySharingAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsFamilySharingAllowed() {
    return isFamilySharingAllowed;
  }

  public void setIsFamilySharingAllowed(Boolean isFamilySharingAllowed) {
    this.isFamilySharingAllowed = isFamilySharingAllowed;
  }


  public VolumeUserInfo isFamilySharingDisabledByFop(Boolean isFamilySharingDisabledByFop) {
    this.isFamilySharingDisabledByFop = isFamilySharingDisabledByFop;
    return this;
  }

  /**
   * Deprecated: Replaced by familySharing.
   * @return isFamilySharingDisabledByFop
   */
  @javax.annotation.Nullable
  public Boolean getIsFamilySharingDisabledByFop() {
    return isFamilySharingDisabledByFop;
  }

  public void setIsFamilySharingDisabledByFop(Boolean isFamilySharingDisabledByFop) {
    this.isFamilySharingDisabledByFop = isFamilySharingDisabledByFop;
  }


  public VolumeUserInfo isInMyBooks(Boolean isInMyBooks) {
    this.isInMyBooks = isInMyBooks;
    return this;
  }

  /**
   * Whether or not this volume is currently in \&quot;my books.\&quot;
   * @return isInMyBooks
   */
  @javax.annotation.Nullable
  public Boolean getIsInMyBooks() {
    return isInMyBooks;
  }

  public void setIsInMyBooks(Boolean isInMyBooks) {
    this.isInMyBooks = isInMyBooks;
  }


  public VolumeUserInfo isPreordered(Boolean isPreordered) {
    this.isPreordered = isPreordered;
    return this;
  }

  /**
   * Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)
   * @return isPreordered
   */
  @javax.annotation.Nullable
  public Boolean getIsPreordered() {
    return isPreordered;
  }

  public void setIsPreordered(Boolean isPreordered) {
    this.isPreordered = isPreordered;
  }


  public VolumeUserInfo isPurchased(Boolean isPurchased) {
    this.isPurchased = isPurchased;
    return this;
  }

  /**
   * Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)
   * @return isPurchased
   */
  @javax.annotation.Nullable
  public Boolean getIsPurchased() {
    return isPurchased;
  }

  public void setIsPurchased(Boolean isPurchased) {
    this.isPurchased = isPurchased;
  }


  public VolumeUserInfo isUploaded(Boolean isUploaded) {
    this.isUploaded = isUploaded;
    return this;
  }

  /**
   * Whether or not this volume was user uploaded.
   * @return isUploaded
   */
  @javax.annotation.Nullable
  public Boolean getIsUploaded() {
    return isUploaded;
  }

  public void setIsUploaded(Boolean isUploaded) {
    this.isUploaded = isUploaded;
  }


  public VolumeUserInfo readingPosition(ReadingPosition readingPosition) {
    this.readingPosition = readingPosition;
    return this;
  }

  /**
   * Get readingPosition
   * @return readingPosition
   */
  @javax.annotation.Nullable
  public ReadingPosition getReadingPosition() {
    return readingPosition;
  }

  public void setReadingPosition(ReadingPosition readingPosition) {
    this.readingPosition = readingPosition;
  }


  public VolumeUserInfo rentalPeriod(VolumeUserInfoRentalPeriod rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
    return this;
  }

  /**
   * Get rentalPeriod
   * @return rentalPeriod
   */
  @javax.annotation.Nullable
  public VolumeUserInfoRentalPeriod getRentalPeriod() {
    return rentalPeriod;
  }

  public void setRentalPeriod(VolumeUserInfoRentalPeriod rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
  }


  public VolumeUserInfo rentalState(String rentalState) {
    this.rentalState = rentalState;
    return this;
  }

  /**
   * Whether this book is an active or an expired rental.
   * @return rentalState
   */
  @javax.annotation.Nullable
  public String getRentalState() {
    return rentalState;
  }

  public void setRentalState(String rentalState) {
    this.rentalState = rentalState;
  }


  public VolumeUserInfo review(Review review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public Review getReview() {
    return review;
  }

  public void setReview(Review review) {
    this.review = review;
  }


  public VolumeUserInfo updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public VolumeUserInfo userUploadedVolumeInfo(VolumeUserInfoUserUploadedVolumeInfo userUploadedVolumeInfo) {
    this.userUploadedVolumeInfo = userUploadedVolumeInfo;
    return this;
  }

  /**
   * Get userUploadedVolumeInfo
   * @return userUploadedVolumeInfo
   */
  @javax.annotation.Nullable
  public VolumeUserInfoUserUploadedVolumeInfo getUserUploadedVolumeInfo() {
    return userUploadedVolumeInfo;
  }

  public void setUserUploadedVolumeInfo(VolumeUserInfoUserUploadedVolumeInfo userUploadedVolumeInfo) {
    this.userUploadedVolumeInfo = userUploadedVolumeInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeUserInfo volumeUserInfo = (VolumeUserInfo) o;
    return Objects.equals(this.acquiredTime, volumeUserInfo.acquiredTime) &&
        Objects.equals(this.acquisitionType, volumeUserInfo.acquisitionType) &&
        Objects.equals(this.copy, volumeUserInfo.copy) &&
        Objects.equals(this.entitlementType, volumeUserInfo.entitlementType) &&
        Objects.equals(this.familySharing, volumeUserInfo.familySharing) &&
        Objects.equals(this.isFamilySharedFromUser, volumeUserInfo.isFamilySharedFromUser) &&
        Objects.equals(this.isFamilySharedToUser, volumeUserInfo.isFamilySharedToUser) &&
        Objects.equals(this.isFamilySharingAllowed, volumeUserInfo.isFamilySharingAllowed) &&
        Objects.equals(this.isFamilySharingDisabledByFop, volumeUserInfo.isFamilySharingDisabledByFop) &&
        Objects.equals(this.isInMyBooks, volumeUserInfo.isInMyBooks) &&
        Objects.equals(this.isPreordered, volumeUserInfo.isPreordered) &&
        Objects.equals(this.isPurchased, volumeUserInfo.isPurchased) &&
        Objects.equals(this.isUploaded, volumeUserInfo.isUploaded) &&
        Objects.equals(this.readingPosition, volumeUserInfo.readingPosition) &&
        Objects.equals(this.rentalPeriod, volumeUserInfo.rentalPeriod) &&
        Objects.equals(this.rentalState, volumeUserInfo.rentalState) &&
        Objects.equals(this.review, volumeUserInfo.review) &&
        Objects.equals(this.updated, volumeUserInfo.updated) &&
        Objects.equals(this.userUploadedVolumeInfo, volumeUserInfo.userUploadedVolumeInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquiredTime, acquisitionType, copy, entitlementType, familySharing, isFamilySharedFromUser, isFamilySharedToUser, isFamilySharingAllowed, isFamilySharingDisabledByFop, isInMyBooks, isPreordered, isPurchased, isUploaded, readingPosition, rentalPeriod, rentalState, review, updated, userUploadedVolumeInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeUserInfo {\n");
    sb.append("    acquiredTime: ").append(toIndentedString(acquiredTime)).append("\n");
    sb.append("    acquisitionType: ").append(toIndentedString(acquisitionType)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    entitlementType: ").append(toIndentedString(entitlementType)).append("\n");
    sb.append("    familySharing: ").append(toIndentedString(familySharing)).append("\n");
    sb.append("    isFamilySharedFromUser: ").append(toIndentedString(isFamilySharedFromUser)).append("\n");
    sb.append("    isFamilySharedToUser: ").append(toIndentedString(isFamilySharedToUser)).append("\n");
    sb.append("    isFamilySharingAllowed: ").append(toIndentedString(isFamilySharingAllowed)).append("\n");
    sb.append("    isFamilySharingDisabledByFop: ").append(toIndentedString(isFamilySharingDisabledByFop)).append("\n");
    sb.append("    isInMyBooks: ").append(toIndentedString(isInMyBooks)).append("\n");
    sb.append("    isPreordered: ").append(toIndentedString(isPreordered)).append("\n");
    sb.append("    isPurchased: ").append(toIndentedString(isPurchased)).append("\n");
    sb.append("    isUploaded: ").append(toIndentedString(isUploaded)).append("\n");
    sb.append("    readingPosition: ").append(toIndentedString(readingPosition)).append("\n");
    sb.append("    rentalPeriod: ").append(toIndentedString(rentalPeriod)).append("\n");
    sb.append("    rentalState: ").append(toIndentedString(rentalState)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    userUploadedVolumeInfo: ").append(toIndentedString(userUploadedVolumeInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquiredTime");
    openapiFields.add("acquisitionType");
    openapiFields.add("copy");
    openapiFields.add("entitlementType");
    openapiFields.add("familySharing");
    openapiFields.add("isFamilySharedFromUser");
    openapiFields.add("isFamilySharedToUser");
    openapiFields.add("isFamilySharingAllowed");
    openapiFields.add("isFamilySharingDisabledByFop");
    openapiFields.add("isInMyBooks");
    openapiFields.add("isPreordered");
    openapiFields.add("isPurchased");
    openapiFields.add("isUploaded");
    openapiFields.add("readingPosition");
    openapiFields.add("rentalPeriod");
    openapiFields.add("rentalState");
    openapiFields.add("review");
    openapiFields.add("updated");
    openapiFields.add("userUploadedVolumeInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeUserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeUserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeUserInfo is not found in the empty JSON string", VolumeUserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeUserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeUserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquiredTime") != null && !jsonObj.get("acquiredTime").isJsonNull()) && !jsonObj.get("acquiredTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiredTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiredTime").toString()));
      }
      // validate the optional field `copy`
      if (jsonObj.get("copy") != null && !jsonObj.get("copy").isJsonNull()) {
        VolumeUserInfoCopy.validateJsonElement(jsonObj.get("copy"));
      }
      // validate the optional field `familySharing`
      if (jsonObj.get("familySharing") != null && !jsonObj.get("familySharing").isJsonNull()) {
        VolumeUserInfoFamilySharing.validateJsonElement(jsonObj.get("familySharing"));
      }
      // validate the optional field `readingPosition`
      if (jsonObj.get("readingPosition") != null && !jsonObj.get("readingPosition").isJsonNull()) {
        ReadingPosition.validateJsonElement(jsonObj.get("readingPosition"));
      }
      // validate the optional field `rentalPeriod`
      if (jsonObj.get("rentalPeriod") != null && !jsonObj.get("rentalPeriod").isJsonNull()) {
        VolumeUserInfoRentalPeriod.validateJsonElement(jsonObj.get("rentalPeriod"));
      }
      if ((jsonObj.get("rentalState") != null && !jsonObj.get("rentalState").isJsonNull()) && !jsonObj.get("rentalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rentalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rentalState").toString()));
      }
      // validate the optional field `review`
      if (jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) {
        Review.validateJsonElement(jsonObj.get("review"));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      // validate the optional field `userUploadedVolumeInfo`
      if (jsonObj.get("userUploadedVolumeInfo") != null && !jsonObj.get("userUploadedVolumeInfo").isJsonNull()) {
        VolumeUserInfoUserUploadedVolumeInfo.validateJsonElement(jsonObj.get("userUploadedVolumeInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeUserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeUserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeUserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeUserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeUserInfo>() {
           @Override
           public void write(JsonWriter out, VolumeUserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeUserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeUserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeUserInfo
   * @throws IOException if the JSON string is invalid with respect to VolumeUserInfo
   */
  public static VolumeUserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeUserInfo.class);
  }

  /**
   * Convert an instance of VolumeUserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

