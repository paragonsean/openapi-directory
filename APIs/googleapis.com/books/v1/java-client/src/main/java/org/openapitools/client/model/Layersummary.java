/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Layersummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Layersummary {
  public static final String SERIALIZED_NAME_ANNOTATION_COUNT = "annotationCount";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_COUNT)
  private Integer annotationCount;

  public static final String SERIALIZED_NAME_ANNOTATION_TYPES = "annotationTypes";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPES)
  private List<String> annotationTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNOTATIONS_DATA_LINK = "annotationsDataLink";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS_DATA_LINK)
  private String annotationsDataLink;

  public static final String SERIALIZED_NAME_ANNOTATIONS_LINK = "annotationsLink";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS_LINK)
  private String annotationsLink;

  public static final String SERIALIZED_NAME_CONTENT_VERSION = "contentVersion";
  @SerializedName(SERIALIZED_NAME_CONTENT_VERSION)
  private String contentVersion;

  public static final String SERIALIZED_NAME_DATA_COUNT = "dataCount";
  @SerializedName(SERIALIZED_NAME_DATA_COUNT)
  private Integer dataCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAYER_ID = "layerId";
  @SerializedName(SERIALIZED_NAME_LAYER_ID)
  private String layerId;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VOLUME_ANNOTATIONS_VERSION = "volumeAnnotationsVersion";
  @SerializedName(SERIALIZED_NAME_VOLUME_ANNOTATIONS_VERSION)
  private String volumeAnnotationsVersion;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public Layersummary() {
  }

  public Layersummary annotationCount(Integer annotationCount) {
    this.annotationCount = annotationCount;
    return this;
  }

  /**
   * The number of annotations for this layer.
   * @return annotationCount
   */
  @javax.annotation.Nullable
  public Integer getAnnotationCount() {
    return annotationCount;
  }

  public void setAnnotationCount(Integer annotationCount) {
    this.annotationCount = annotationCount;
  }


  public Layersummary annotationTypes(List<String> annotationTypes) {
    this.annotationTypes = annotationTypes;
    return this;
  }

  public Layersummary addAnnotationTypesItem(String annotationTypesItem) {
    if (this.annotationTypes == null) {
      this.annotationTypes = new ArrayList<>();
    }
    this.annotationTypes.add(annotationTypesItem);
    return this;
  }

  /**
   * The list of annotation types contained for this layer.
   * @return annotationTypes
   */
  @javax.annotation.Nullable
  public List<String> getAnnotationTypes() {
    return annotationTypes;
  }

  public void setAnnotationTypes(List<String> annotationTypes) {
    this.annotationTypes = annotationTypes;
  }


  public Layersummary annotationsDataLink(String annotationsDataLink) {
    this.annotationsDataLink = annotationsDataLink;
    return this;
  }

  /**
   * Link to get data for this annotation.
   * @return annotationsDataLink
   */
  @javax.annotation.Nullable
  public String getAnnotationsDataLink() {
    return annotationsDataLink;
  }

  public void setAnnotationsDataLink(String annotationsDataLink) {
    this.annotationsDataLink = annotationsDataLink;
  }


  public Layersummary annotationsLink(String annotationsLink) {
    this.annotationsLink = annotationsLink;
    return this;
  }

  /**
   * The link to get the annotations for this layer.
   * @return annotationsLink
   */
  @javax.annotation.Nullable
  public String getAnnotationsLink() {
    return annotationsLink;
  }

  public void setAnnotationsLink(String annotationsLink) {
    this.annotationsLink = annotationsLink;
  }


  public Layersummary contentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
    return this;
  }

  /**
   * The content version this resource is for.
   * @return contentVersion
   */
  @javax.annotation.Nullable
  public String getContentVersion() {
    return contentVersion;
  }

  public void setContentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
  }


  public Layersummary dataCount(Integer dataCount) {
    this.dataCount = dataCount;
    return this;
  }

  /**
   * The number of data items for this layer.
   * @return dataCount
   */
  @javax.annotation.Nullable
  public Integer getDataCount() {
    return dataCount;
  }

  public void setDataCount(Integer dataCount) {
    this.dataCount = dataCount;
  }


  public Layersummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id of this layer summary.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Layersummary kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource Type
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Layersummary layerId(String layerId) {
    this.layerId = layerId;
    return this;
  }

  /**
   * The layer id for this summary.
   * @return layerId
   */
  @javax.annotation.Nullable
  public String getLayerId() {
    return layerId;
  }

  public void setLayerId(String layerId) {
    this.layerId = layerId;
  }


  public Layersummary selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * URL to this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Layersummary updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp for the last time an item in this layer was updated. (RFC 3339 UTC date-time format).
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Layersummary volumeAnnotationsVersion(String volumeAnnotationsVersion) {
    this.volumeAnnotationsVersion = volumeAnnotationsVersion;
    return this;
  }

  /**
   * The current version of this layer&#39;s volume annotations. Note that this version applies only to the data in the books.layers.volumeAnnotations.* responses. The actual annotation data is versioned separately.
   * @return volumeAnnotationsVersion
   */
  @javax.annotation.Nullable
  public String getVolumeAnnotationsVersion() {
    return volumeAnnotationsVersion;
  }

  public void setVolumeAnnotationsVersion(String volumeAnnotationsVersion) {
    this.volumeAnnotationsVersion = volumeAnnotationsVersion;
  }


  public Layersummary volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * The volume id this resource is for.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Layersummary layersummary = (Layersummary) o;
    return Objects.equals(this.annotationCount, layersummary.annotationCount) &&
        Objects.equals(this.annotationTypes, layersummary.annotationTypes) &&
        Objects.equals(this.annotationsDataLink, layersummary.annotationsDataLink) &&
        Objects.equals(this.annotationsLink, layersummary.annotationsLink) &&
        Objects.equals(this.contentVersion, layersummary.contentVersion) &&
        Objects.equals(this.dataCount, layersummary.dataCount) &&
        Objects.equals(this.id, layersummary.id) &&
        Objects.equals(this.kind, layersummary.kind) &&
        Objects.equals(this.layerId, layersummary.layerId) &&
        Objects.equals(this.selfLink, layersummary.selfLink) &&
        Objects.equals(this.updated, layersummary.updated) &&
        Objects.equals(this.volumeAnnotationsVersion, layersummary.volumeAnnotationsVersion) &&
        Objects.equals(this.volumeId, layersummary.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationCount, annotationTypes, annotationsDataLink, annotationsLink, contentVersion, dataCount, id, kind, layerId, selfLink, updated, volumeAnnotationsVersion, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Layersummary {\n");
    sb.append("    annotationCount: ").append(toIndentedString(annotationCount)).append("\n");
    sb.append("    annotationTypes: ").append(toIndentedString(annotationTypes)).append("\n");
    sb.append("    annotationsDataLink: ").append(toIndentedString(annotationsDataLink)).append("\n");
    sb.append("    annotationsLink: ").append(toIndentedString(annotationsLink)).append("\n");
    sb.append("    contentVersion: ").append(toIndentedString(contentVersion)).append("\n");
    sb.append("    dataCount: ").append(toIndentedString(dataCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    layerId: ").append(toIndentedString(layerId)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    volumeAnnotationsVersion: ").append(toIndentedString(volumeAnnotationsVersion)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationCount");
    openapiFields.add("annotationTypes");
    openapiFields.add("annotationsDataLink");
    openapiFields.add("annotationsLink");
    openapiFields.add("contentVersion");
    openapiFields.add("dataCount");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("layerId");
    openapiFields.add("selfLink");
    openapiFields.add("updated");
    openapiFields.add("volumeAnnotationsVersion");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Layersummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Layersummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Layersummary is not found in the empty JSON string", Layersummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Layersummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Layersummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotationTypes") != null && !jsonObj.get("annotationTypes").isJsonNull() && !jsonObj.get("annotationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("annotationTypes").toString()));
      }
      if ((jsonObj.get("annotationsDataLink") != null && !jsonObj.get("annotationsDataLink").isJsonNull()) && !jsonObj.get("annotationsDataLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationsDataLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationsDataLink").toString()));
      }
      if ((jsonObj.get("annotationsLink") != null && !jsonObj.get("annotationsLink").isJsonNull()) && !jsonObj.get("annotationsLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationsLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationsLink").toString()));
      }
      if ((jsonObj.get("contentVersion") != null && !jsonObj.get("contentVersion").isJsonNull()) && !jsonObj.get("contentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentVersion").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("layerId") != null && !jsonObj.get("layerId").isJsonNull()) && !jsonObj.get("layerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerId").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("volumeAnnotationsVersion") != null && !jsonObj.get("volumeAnnotationsVersion").isJsonNull()) && !jsonObj.get("volumeAnnotationsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeAnnotationsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeAnnotationsVersion").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Layersummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Layersummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Layersummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Layersummary.class));

       return (TypeAdapter<T>) new TypeAdapter<Layersummary>() {
           @Override
           public void write(JsonWriter out, Layersummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Layersummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Layersummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Layersummary
   * @throws IOException if the JSON string is invalid with respect to Layersummary
   */
  public static Layersummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Layersummary.class);
  }

  /**
   * Convert an instance of Layersummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

