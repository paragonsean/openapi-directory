/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReadingPosition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReadingPosition {
  public static final String SERIALIZED_NAME_EPUB_CFI_POSITION = "epubCfiPosition";
  @SerializedName(SERIALIZED_NAME_EPUB_CFI_POSITION)
  private String epubCfiPosition;

  public static final String SERIALIZED_NAME_GB_IMAGE_POSITION = "gbImagePosition";
  @SerializedName(SERIALIZED_NAME_GB_IMAGE_POSITION)
  private String gbImagePosition;

  public static final String SERIALIZED_NAME_GB_TEXT_POSITION = "gbTextPosition";
  @SerializedName(SERIALIZED_NAME_GB_TEXT_POSITION)
  private String gbTextPosition;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PDF_POSITION = "pdfPosition";
  @SerializedName(SERIALIZED_NAME_PDF_POSITION)
  private String pdfPosition;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public ReadingPosition() {
  }

  public ReadingPosition epubCfiPosition(String epubCfiPosition) {
    this.epubCfiPosition = epubCfiPosition;
    return this;
  }

  /**
   * Position in an EPUB as a CFI.
   * @return epubCfiPosition
   */
  @javax.annotation.Nullable
  public String getEpubCfiPosition() {
    return epubCfiPosition;
  }

  public void setEpubCfiPosition(String epubCfiPosition) {
    this.epubCfiPosition = epubCfiPosition;
  }


  public ReadingPosition gbImagePosition(String gbImagePosition) {
    this.gbImagePosition = gbImagePosition;
    return this;
  }

  /**
   * Position in a volume for image-based content.
   * @return gbImagePosition
   */
  @javax.annotation.Nullable
  public String getGbImagePosition() {
    return gbImagePosition;
  }

  public void setGbImagePosition(String gbImagePosition) {
    this.gbImagePosition = gbImagePosition;
  }


  public ReadingPosition gbTextPosition(String gbTextPosition) {
    this.gbTextPosition = gbTextPosition;
    return this;
  }

  /**
   * Position in a volume for text-based content.
   * @return gbTextPosition
   */
  @javax.annotation.Nullable
  public String getGbTextPosition() {
    return gbTextPosition;
  }

  public void setGbTextPosition(String gbTextPosition) {
    this.gbTextPosition = gbTextPosition;
  }


  public ReadingPosition kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for a reading position.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ReadingPosition pdfPosition(String pdfPosition) {
    this.pdfPosition = pdfPosition;
    return this;
  }

  /**
   * Position in a PDF file.
   * @return pdfPosition
   */
  @javax.annotation.Nullable
  public String getPdfPosition() {
    return pdfPosition;
  }

  public void setPdfPosition(String pdfPosition) {
    this.pdfPosition = pdfPosition;
  }


  public ReadingPosition updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp when this reading position was last updated (formatted UTC timestamp with millisecond resolution).
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public ReadingPosition volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Volume id associated with this reading position.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadingPosition readingPosition = (ReadingPosition) o;
    return Objects.equals(this.epubCfiPosition, readingPosition.epubCfiPosition) &&
        Objects.equals(this.gbImagePosition, readingPosition.gbImagePosition) &&
        Objects.equals(this.gbTextPosition, readingPosition.gbTextPosition) &&
        Objects.equals(this.kind, readingPosition.kind) &&
        Objects.equals(this.pdfPosition, readingPosition.pdfPosition) &&
        Objects.equals(this.updated, readingPosition.updated) &&
        Objects.equals(this.volumeId, readingPosition.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(epubCfiPosition, gbImagePosition, gbTextPosition, kind, pdfPosition, updated, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadingPosition {\n");
    sb.append("    epubCfiPosition: ").append(toIndentedString(epubCfiPosition)).append("\n");
    sb.append("    gbImagePosition: ").append(toIndentedString(gbImagePosition)).append("\n");
    sb.append("    gbTextPosition: ").append(toIndentedString(gbTextPosition)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pdfPosition: ").append(toIndentedString(pdfPosition)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("epubCfiPosition");
    openapiFields.add("gbImagePosition");
    openapiFields.add("gbTextPosition");
    openapiFields.add("kind");
    openapiFields.add("pdfPosition");
    openapiFields.add("updated");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadingPosition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadingPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadingPosition is not found in the empty JSON string", ReadingPosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadingPosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadingPosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("epubCfiPosition") != null && !jsonObj.get("epubCfiPosition").isJsonNull()) && !jsonObj.get("epubCfiPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epubCfiPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epubCfiPosition").toString()));
      }
      if ((jsonObj.get("gbImagePosition") != null && !jsonObj.get("gbImagePosition").isJsonNull()) && !jsonObj.get("gbImagePosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gbImagePosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gbImagePosition").toString()));
      }
      if ((jsonObj.get("gbTextPosition") != null && !jsonObj.get("gbTextPosition").isJsonNull()) && !jsonObj.get("gbTextPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gbTextPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gbTextPosition").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("pdfPosition") != null && !jsonObj.get("pdfPosition").isJsonNull()) && !jsonObj.get("pdfPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdfPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdfPosition").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadingPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadingPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadingPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadingPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadingPosition>() {
           @Override
           public void write(JsonWriter out, ReadingPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadingPosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadingPosition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadingPosition
   * @throws IOException if the JSON string is invalid with respect to ReadingPosition
   */
  public static ReadingPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadingPosition.class);
  }

  /**
   * Convert an instance of ReadingPosition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

