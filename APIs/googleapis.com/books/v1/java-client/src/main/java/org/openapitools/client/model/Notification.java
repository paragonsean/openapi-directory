/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Notification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Notification {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CRM_EXPERIMENT_IDS = "crmExperimentIds";
  @SerializedName(SERIALIZED_NAME_CRM_EXPERIMENT_IDS)
  private List<String> crmExperimentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOC_ID = "doc_id";
  @SerializedName(SERIALIZED_NAME_DOC_ID)
  private String docId;

  public static final String SERIALIZED_NAME_DOC_TYPE = "doc_type";
  @SerializedName(SERIALIZED_NAME_DOC_TYPE)
  private String docType;

  public static final String SERIALIZED_NAME_DONT_SHOW_NOTIFICATION = "dont_show_notification";
  @SerializedName(SERIALIZED_NAME_DONT_SHOW_NOTIFICATION)
  private Boolean dontShowNotification;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_IS_DOCUMENT_MATURE = "is_document_mature";
  @SerializedName(SERIALIZED_NAME_IS_DOCUMENT_MATURE)
  private Boolean isDocumentMature;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NOTIFICATION_GROUP = "notificationGroup";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_GROUP)
  private String notificationGroup;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notification_type";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private String notificationType;

  public static final String SERIALIZED_NAME_PCAMPAIGN_ID = "pcampaign_id";
  @SerializedName(SERIALIZED_NAME_PCAMPAIGN_ID)
  private String pcampaignId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SHOW_NOTIFICATION_SETTINGS_ACTION = "show_notification_settings_action";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTIFICATION_SETTINGS_ACTION)
  private Boolean showNotificationSettingsAction;

  public static final String SERIALIZED_NAME_TARGET_URL = "targetUrl";
  @SerializedName(SERIALIZED_NAME_TARGET_URL)
  private String targetUrl;

  public static final String SERIALIZED_NAME_TIME_TO_EXPIRE_MS = "timeToExpireMs";
  @SerializedName(SERIALIZED_NAME_TIME_TO_EXPIRE_MS)
  private String timeToExpireMs;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Notification() {
  }

  public Notification body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Notification crmExperimentIds(List<String> crmExperimentIds) {
    this.crmExperimentIds = crmExperimentIds;
    return this;
  }

  public Notification addCrmExperimentIdsItem(String crmExperimentIdsItem) {
    if (this.crmExperimentIds == null) {
      this.crmExperimentIds = new ArrayList<>();
    }
    this.crmExperimentIds.add(crmExperimentIdsItem);
    return this;
  }

  /**
   * The list of crm experiment ids.
   * @return crmExperimentIds
   */
  @javax.annotation.Nullable
  public List<String> getCrmExperimentIds() {
    return crmExperimentIds;
  }

  public void setCrmExperimentIds(List<String> crmExperimentIds) {
    this.crmExperimentIds = crmExperimentIds;
  }


  public Notification docId(String docId) {
    this.docId = docId;
    return this;
  }

  /**
   * Get docId
   * @return docId
   */
  @javax.annotation.Nullable
  public String getDocId() {
    return docId;
  }

  public void setDocId(String docId) {
    this.docId = docId;
  }


  public Notification docType(String docType) {
    this.docType = docType;
    return this;
  }

  /**
   * Get docType
   * @return docType
   */
  @javax.annotation.Nullable
  public String getDocType() {
    return docType;
  }

  public void setDocType(String docType) {
    this.docType = docType;
  }


  public Notification dontShowNotification(Boolean dontShowNotification) {
    this.dontShowNotification = dontShowNotification;
    return this;
  }

  /**
   * Get dontShowNotification
   * @return dontShowNotification
   */
  @javax.annotation.Nullable
  public Boolean getDontShowNotification() {
    return dontShowNotification;
  }

  public void setDontShowNotification(Boolean dontShowNotification) {
    this.dontShowNotification = dontShowNotification;
  }


  public Notification iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * Get iconUrl
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public Notification isDocumentMature(Boolean isDocumentMature) {
    this.isDocumentMature = isDocumentMature;
    return this;
  }

  /**
   * Get isDocumentMature
   * @return isDocumentMature
   */
  @javax.annotation.Nullable
  public Boolean getIsDocumentMature() {
    return isDocumentMature;
  }

  public void setIsDocumentMature(Boolean isDocumentMature) {
    this.isDocumentMature = isDocumentMature;
  }


  public Notification kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Notification notificationGroup(String notificationGroup) {
    this.notificationGroup = notificationGroup;
    return this;
  }

  /**
   * Get notificationGroup
   * @return notificationGroup
   */
  @javax.annotation.Nullable
  public String getNotificationGroup() {
    return notificationGroup;
  }

  public void setNotificationGroup(String notificationGroup) {
    this.notificationGroup = notificationGroup;
  }


  public Notification notificationType(String notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nullable
  public String getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(String notificationType) {
    this.notificationType = notificationType;
  }


  public Notification pcampaignId(String pcampaignId) {
    this.pcampaignId = pcampaignId;
    return this;
  }

  /**
   * Get pcampaignId
   * @return pcampaignId
   */
  @javax.annotation.Nullable
  public String getPcampaignId() {
    return pcampaignId;
  }

  public void setPcampaignId(String pcampaignId) {
    this.pcampaignId = pcampaignId;
  }


  public Notification reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Notification showNotificationSettingsAction(Boolean showNotificationSettingsAction) {
    this.showNotificationSettingsAction = showNotificationSettingsAction;
    return this;
  }

  /**
   * Get showNotificationSettingsAction
   * @return showNotificationSettingsAction
   */
  @javax.annotation.Nullable
  public Boolean getShowNotificationSettingsAction() {
    return showNotificationSettingsAction;
  }

  public void setShowNotificationSettingsAction(Boolean showNotificationSettingsAction) {
    this.showNotificationSettingsAction = showNotificationSettingsAction;
  }


  public Notification targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * Get targetUrl
   * @return targetUrl
   */
  @javax.annotation.Nullable
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }


  public Notification timeToExpireMs(String timeToExpireMs) {
    this.timeToExpireMs = timeToExpireMs;
    return this;
  }

  /**
   * Get timeToExpireMs
   * @return timeToExpireMs
   */
  @javax.annotation.Nullable
  public String getTimeToExpireMs() {
    return timeToExpireMs;
  }

  public void setTimeToExpireMs(String timeToExpireMs) {
    this.timeToExpireMs = timeToExpireMs;
  }


  public Notification title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.body, notification.body) &&
        Objects.equals(this.crmExperimentIds, notification.crmExperimentIds) &&
        Objects.equals(this.docId, notification.docId) &&
        Objects.equals(this.docType, notification.docType) &&
        Objects.equals(this.dontShowNotification, notification.dontShowNotification) &&
        Objects.equals(this.iconUrl, notification.iconUrl) &&
        Objects.equals(this.isDocumentMature, notification.isDocumentMature) &&
        Objects.equals(this.kind, notification.kind) &&
        Objects.equals(this.notificationGroup, notification.notificationGroup) &&
        Objects.equals(this.notificationType, notification.notificationType) &&
        Objects.equals(this.pcampaignId, notification.pcampaignId) &&
        Objects.equals(this.reason, notification.reason) &&
        Objects.equals(this.showNotificationSettingsAction, notification.showNotificationSettingsAction) &&
        Objects.equals(this.targetUrl, notification.targetUrl) &&
        Objects.equals(this.timeToExpireMs, notification.timeToExpireMs) &&
        Objects.equals(this.title, notification.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, crmExperimentIds, docId, docType, dontShowNotification, iconUrl, isDocumentMature, kind, notificationGroup, notificationType, pcampaignId, reason, showNotificationSettingsAction, targetUrl, timeToExpireMs, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    crmExperimentIds: ").append(toIndentedString(crmExperimentIds)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    dontShowNotification: ").append(toIndentedString(dontShowNotification)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    isDocumentMature: ").append(toIndentedString(isDocumentMature)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    notificationGroup: ").append(toIndentedString(notificationGroup)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    pcampaignId: ").append(toIndentedString(pcampaignId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    showNotificationSettingsAction: ").append(toIndentedString(showNotificationSettingsAction)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    timeToExpireMs: ").append(toIndentedString(timeToExpireMs)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("crmExperimentIds");
    openapiFields.add("doc_id");
    openapiFields.add("doc_type");
    openapiFields.add("dont_show_notification");
    openapiFields.add("iconUrl");
    openapiFields.add("is_document_mature");
    openapiFields.add("kind");
    openapiFields.add("notificationGroup");
    openapiFields.add("notification_type");
    openapiFields.add("pcampaign_id");
    openapiFields.add("reason");
    openapiFields.add("show_notification_settings_action");
    openapiFields.add("targetUrl");
    openapiFields.add("timeToExpireMs");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Notification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Notification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Notification is not found in the empty JSON string", Notification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Notification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Notification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("crmExperimentIds") != null && !jsonObj.get("crmExperimentIds").isJsonNull() && !jsonObj.get("crmExperimentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `crmExperimentIds` to be an array in the JSON string but got `%s`", jsonObj.get("crmExperimentIds").toString()));
      }
      if ((jsonObj.get("doc_id") != null && !jsonObj.get("doc_id").isJsonNull()) && !jsonObj.get("doc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doc_id").toString()));
      }
      if ((jsonObj.get("doc_type") != null && !jsonObj.get("doc_type").isJsonNull()) && !jsonObj.get("doc_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doc_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doc_type").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("notificationGroup") != null && !jsonObj.get("notificationGroup").isJsonNull()) && !jsonObj.get("notificationGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationGroup").toString()));
      }
      if ((jsonObj.get("notification_type") != null && !jsonObj.get("notification_type").isJsonNull()) && !jsonObj.get("notification_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_type").toString()));
      }
      if ((jsonObj.get("pcampaign_id") != null && !jsonObj.get("pcampaign_id").isJsonNull()) && !jsonObj.get("pcampaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pcampaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pcampaign_id").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("targetUrl") != null && !jsonObj.get("targetUrl").isJsonNull()) && !jsonObj.get("targetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetUrl").toString()));
      }
      if ((jsonObj.get("timeToExpireMs") != null && !jsonObj.get("timeToExpireMs").isJsonNull()) && !jsonObj.get("timeToExpireMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeToExpireMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeToExpireMs").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Notification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Notification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Notification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Notification.class));

       return (TypeAdapter<T>) new TypeAdapter<Notification>() {
           @Override
           public void write(JsonWriter out, Notification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Notification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Notification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Notification
   * @throws IOException if the JSON string is invalid with respect to Notification
   */
  public static Notification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Notification.class);
  }

  /**
   * Convert an instance of Notification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

