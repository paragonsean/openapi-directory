/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnnotationClientVersionRanges;
import org.openapitools.client.model.AnnotationCurrentVersionRanges;
import org.openapitools.client.model.AnnotationLayerSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Annotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Annotation {
  public static final String SERIALIZED_NAME_AFTER_SELECTED_TEXT = "afterSelectedText";
  @SerializedName(SERIALIZED_NAME_AFTER_SELECTED_TEXT)
  private String afterSelectedText;

  public static final String SERIALIZED_NAME_BEFORE_SELECTED_TEXT = "beforeSelectedText";
  @SerializedName(SERIALIZED_NAME_BEFORE_SELECTED_TEXT)
  private String beforeSelectedText;

  public static final String SERIALIZED_NAME_CLIENT_VERSION_RANGES = "clientVersionRanges";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION_RANGES)
  private AnnotationClientVersionRanges clientVersionRanges;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CURRENT_VERSION_RANGES = "currentVersionRanges";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION_RANGES)
  private AnnotationCurrentVersionRanges currentVersionRanges;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_HIGHLIGHT_STYLE = "highlightStyle";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_STYLE)
  private String highlightStyle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAYER_ID = "layerId";
  @SerializedName(SERIALIZED_NAME_LAYER_ID)
  private String layerId;

  public static final String SERIALIZED_NAME_LAYER_SUMMARY = "layerSummary";
  @SerializedName(SERIALIZED_NAME_LAYER_SUMMARY)
  private AnnotationLayerSummary layerSummary;

  public static final String SERIALIZED_NAME_PAGE_IDS = "pageIds";
  @SerializedName(SERIALIZED_NAME_PAGE_IDS)
  private List<String> pageIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_TEXT = "selectedText";
  @SerializedName(SERIALIZED_NAME_SELECTED_TEXT)
  private String selectedText;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public Annotation() {
  }

  public Annotation afterSelectedText(String afterSelectedText) {
    this.afterSelectedText = afterSelectedText;
    return this;
  }

  /**
   * Anchor text after excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.
   * @return afterSelectedText
   */
  @javax.annotation.Nullable
  public String getAfterSelectedText() {
    return afterSelectedText;
  }

  public void setAfterSelectedText(String afterSelectedText) {
    this.afterSelectedText = afterSelectedText;
  }


  public Annotation beforeSelectedText(String beforeSelectedText) {
    this.beforeSelectedText = beforeSelectedText;
    return this;
  }

  /**
   * Anchor text before excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.
   * @return beforeSelectedText
   */
  @javax.annotation.Nullable
  public String getBeforeSelectedText() {
    return beforeSelectedText;
  }

  public void setBeforeSelectedText(String beforeSelectedText) {
    this.beforeSelectedText = beforeSelectedText;
  }


  public Annotation clientVersionRanges(AnnotationClientVersionRanges clientVersionRanges) {
    this.clientVersionRanges = clientVersionRanges;
    return this;
  }

  /**
   * Get clientVersionRanges
   * @return clientVersionRanges
   */
  @javax.annotation.Nullable
  public AnnotationClientVersionRanges getClientVersionRanges() {
    return clientVersionRanges;
  }

  public void setClientVersionRanges(AnnotationClientVersionRanges clientVersionRanges) {
    this.clientVersionRanges = clientVersionRanges;
  }


  public Annotation created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp for the created time of this annotation.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Annotation currentVersionRanges(AnnotationCurrentVersionRanges currentVersionRanges) {
    this.currentVersionRanges = currentVersionRanges;
    return this;
  }

  /**
   * Get currentVersionRanges
   * @return currentVersionRanges
   */
  @javax.annotation.Nullable
  public AnnotationCurrentVersionRanges getCurrentVersionRanges() {
    return currentVersionRanges;
  }

  public void setCurrentVersionRanges(AnnotationCurrentVersionRanges currentVersionRanges) {
    this.currentVersionRanges = currentVersionRanges;
  }


  public Annotation data(String data) {
    this.data = data;
    return this;
  }

  /**
   * User-created data for this annotation.
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public Annotation deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Indicates that this annotation is deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Annotation highlightStyle(String highlightStyle) {
    this.highlightStyle = highlightStyle;
    return this;
  }

  /**
   * The highlight style for this annotation.
   * @return highlightStyle
   */
  @javax.annotation.Nullable
  public String getHighlightStyle() {
    return highlightStyle;
  }

  public void setHighlightStyle(String highlightStyle) {
    this.highlightStyle = highlightStyle;
  }


  public Annotation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of this annotation, in the form of a GUID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Annotation kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Annotation layerId(String layerId) {
    this.layerId = layerId;
    return this;
  }

  /**
   * The layer this annotation is for.
   * @return layerId
   */
  @javax.annotation.Nullable
  public String getLayerId() {
    return layerId;
  }

  public void setLayerId(String layerId) {
    this.layerId = layerId;
  }


  public Annotation layerSummary(AnnotationLayerSummary layerSummary) {
    this.layerSummary = layerSummary;
    return this;
  }

  /**
   * Get layerSummary
   * @return layerSummary
   */
  @javax.annotation.Nullable
  public AnnotationLayerSummary getLayerSummary() {
    return layerSummary;
  }

  public void setLayerSummary(AnnotationLayerSummary layerSummary) {
    this.layerSummary = layerSummary;
  }


  public Annotation pageIds(List<String> pageIds) {
    this.pageIds = pageIds;
    return this;
  }

  public Annotation addPageIdsItem(String pageIdsItem) {
    if (this.pageIds == null) {
      this.pageIds = new ArrayList<>();
    }
    this.pageIds.add(pageIdsItem);
    return this;
  }

  /**
   * Pages that this annotation spans.
   * @return pageIds
   */
  @javax.annotation.Nullable
  public List<String> getPageIds() {
    return pageIds;
  }

  public void setPageIds(List<String> pageIds) {
    this.pageIds = pageIds;
  }


  public Annotation selectedText(String selectedText) {
    this.selectedText = selectedText;
    return this;
  }

  /**
   * Excerpt from the volume.
   * @return selectedText
   */
  @javax.annotation.Nullable
  public String getSelectedText() {
    return selectedText;
  }

  public void setSelectedText(String selectedText) {
    this.selectedText = selectedText;
  }


  public Annotation selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * URL to this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Annotation updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp for the last time this annotation was modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Annotation volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * The volume that this annotation belongs to.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annotation annotation = (Annotation) o;
    return Objects.equals(this.afterSelectedText, annotation.afterSelectedText) &&
        Objects.equals(this.beforeSelectedText, annotation.beforeSelectedText) &&
        Objects.equals(this.clientVersionRanges, annotation.clientVersionRanges) &&
        Objects.equals(this.created, annotation.created) &&
        Objects.equals(this.currentVersionRanges, annotation.currentVersionRanges) &&
        Objects.equals(this.data, annotation.data) &&
        Objects.equals(this.deleted, annotation.deleted) &&
        Objects.equals(this.highlightStyle, annotation.highlightStyle) &&
        Objects.equals(this.id, annotation.id) &&
        Objects.equals(this.kind, annotation.kind) &&
        Objects.equals(this.layerId, annotation.layerId) &&
        Objects.equals(this.layerSummary, annotation.layerSummary) &&
        Objects.equals(this.pageIds, annotation.pageIds) &&
        Objects.equals(this.selectedText, annotation.selectedText) &&
        Objects.equals(this.selfLink, annotation.selfLink) &&
        Objects.equals(this.updated, annotation.updated) &&
        Objects.equals(this.volumeId, annotation.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterSelectedText, beforeSelectedText, clientVersionRanges, created, currentVersionRanges, data, deleted, highlightStyle, id, kind, layerId, layerSummary, pageIds, selectedText, selfLink, updated, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annotation {\n");
    sb.append("    afterSelectedText: ").append(toIndentedString(afterSelectedText)).append("\n");
    sb.append("    beforeSelectedText: ").append(toIndentedString(beforeSelectedText)).append("\n");
    sb.append("    clientVersionRanges: ").append(toIndentedString(clientVersionRanges)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentVersionRanges: ").append(toIndentedString(currentVersionRanges)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    highlightStyle: ").append(toIndentedString(highlightStyle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    layerId: ").append(toIndentedString(layerId)).append("\n");
    sb.append("    layerSummary: ").append(toIndentedString(layerSummary)).append("\n");
    sb.append("    pageIds: ").append(toIndentedString(pageIds)).append("\n");
    sb.append("    selectedText: ").append(toIndentedString(selectedText)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afterSelectedText");
    openapiFields.add("beforeSelectedText");
    openapiFields.add("clientVersionRanges");
    openapiFields.add("created");
    openapiFields.add("currentVersionRanges");
    openapiFields.add("data");
    openapiFields.add("deleted");
    openapiFields.add("highlightStyle");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("layerId");
    openapiFields.add("layerSummary");
    openapiFields.add("pageIds");
    openapiFields.add("selectedText");
    openapiFields.add("selfLink");
    openapiFields.add("updated");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Annotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Annotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Annotation is not found in the empty JSON string", Annotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Annotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Annotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("afterSelectedText") != null && !jsonObj.get("afterSelectedText").isJsonNull()) && !jsonObj.get("afterSelectedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `afterSelectedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("afterSelectedText").toString()));
      }
      if ((jsonObj.get("beforeSelectedText") != null && !jsonObj.get("beforeSelectedText").isJsonNull()) && !jsonObj.get("beforeSelectedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beforeSelectedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beforeSelectedText").toString()));
      }
      // validate the optional field `clientVersionRanges`
      if (jsonObj.get("clientVersionRanges") != null && !jsonObj.get("clientVersionRanges").isJsonNull()) {
        AnnotationClientVersionRanges.validateJsonElement(jsonObj.get("clientVersionRanges"));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `currentVersionRanges`
      if (jsonObj.get("currentVersionRanges") != null && !jsonObj.get("currentVersionRanges").isJsonNull()) {
        AnnotationCurrentVersionRanges.validateJsonElement(jsonObj.get("currentVersionRanges"));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("highlightStyle") != null && !jsonObj.get("highlightStyle").isJsonNull()) && !jsonObj.get("highlightStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlightStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlightStyle").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("layerId") != null && !jsonObj.get("layerId").isJsonNull()) && !jsonObj.get("layerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerId").toString()));
      }
      // validate the optional field `layerSummary`
      if (jsonObj.get("layerSummary") != null && !jsonObj.get("layerSummary").isJsonNull()) {
        AnnotationLayerSummary.validateJsonElement(jsonObj.get("layerSummary"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pageIds") != null && !jsonObj.get("pageIds").isJsonNull() && !jsonObj.get("pageIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageIds` to be an array in the JSON string but got `%s`", jsonObj.get("pageIds").toString()));
      }
      if ((jsonObj.get("selectedText") != null && !jsonObj.get("selectedText").isJsonNull()) && !jsonObj.get("selectedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedText").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Annotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Annotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Annotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Annotation.class));

       return (TypeAdapter<T>) new TypeAdapter<Annotation>() {
           @Override
           public void write(JsonWriter out, Annotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Annotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Annotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Annotation
   * @throws IOException if the JSON string is invalid with respect to Annotation
   */
  public static Annotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Annotation.class);
  }

  /**
   * Convert an instance of Annotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

