/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VolumeannotationContentRanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volumeannotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Volumeannotation {
  public static final String SERIALIZED_NAME_ANNOTATION_DATA_ID = "annotationDataId";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_DATA_ID)
  private String annotationDataId;

  public static final String SERIALIZED_NAME_ANNOTATION_DATA_LINK = "annotationDataLink";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_DATA_LINK)
  private String annotationDataLink;

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  private String annotationType;

  public static final String SERIALIZED_NAME_CONTENT_RANGES = "contentRanges";
  @SerializedName(SERIALIZED_NAME_CONTENT_RANGES)
  private VolumeannotationContentRanges contentRanges;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAYER_ID = "layerId";
  @SerializedName(SERIALIZED_NAME_LAYER_ID)
  private String layerId;

  public static final String SERIALIZED_NAME_PAGE_IDS = "pageIds";
  @SerializedName(SERIALIZED_NAME_PAGE_IDS)
  private List<String> pageIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_TEXT = "selectedText";
  @SerializedName(SERIALIZED_NAME_SELECTED_TEXT)
  private String selectedText;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public Volumeannotation() {
  }

  public Volumeannotation annotationDataId(String annotationDataId) {
    this.annotationDataId = annotationDataId;
    return this;
  }

  /**
   * The annotation data id for this volume annotation.
   * @return annotationDataId
   */
  @javax.annotation.Nullable
  public String getAnnotationDataId() {
    return annotationDataId;
  }

  public void setAnnotationDataId(String annotationDataId) {
    this.annotationDataId = annotationDataId;
  }


  public Volumeannotation annotationDataLink(String annotationDataLink) {
    this.annotationDataLink = annotationDataLink;
    return this;
  }

  /**
   * Link to get data for this annotation.
   * @return annotationDataLink
   */
  @javax.annotation.Nullable
  public String getAnnotationDataLink() {
    return annotationDataLink;
  }

  public void setAnnotationDataLink(String annotationDataLink) {
    this.annotationDataLink = annotationDataLink;
  }


  public Volumeannotation annotationType(String annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * The type of annotation this is.
   * @return annotationType
   */
  @javax.annotation.Nullable
  public String getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(String annotationType) {
    this.annotationType = annotationType;
  }


  public Volumeannotation contentRanges(VolumeannotationContentRanges contentRanges) {
    this.contentRanges = contentRanges;
    return this;
  }

  /**
   * Get contentRanges
   * @return contentRanges
   */
  @javax.annotation.Nullable
  public VolumeannotationContentRanges getContentRanges() {
    return contentRanges;
  }

  public void setContentRanges(VolumeannotationContentRanges contentRanges) {
    this.contentRanges = contentRanges;
  }


  public Volumeannotation data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Data for this annotation.
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public Volumeannotation deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Indicates that this annotation is deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Volumeannotation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id of this volume annotation.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Volumeannotation kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource Type
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Volumeannotation layerId(String layerId) {
    this.layerId = layerId;
    return this;
  }

  /**
   * The Layer this annotation is for.
   * @return layerId
   */
  @javax.annotation.Nullable
  public String getLayerId() {
    return layerId;
  }

  public void setLayerId(String layerId) {
    this.layerId = layerId;
  }


  public Volumeannotation pageIds(List<String> pageIds) {
    this.pageIds = pageIds;
    return this;
  }

  public Volumeannotation addPageIdsItem(String pageIdsItem) {
    if (this.pageIds == null) {
      this.pageIds = new ArrayList<>();
    }
    this.pageIds.add(pageIdsItem);
    return this;
  }

  /**
   * Pages the annotation spans.
   * @return pageIds
   */
  @javax.annotation.Nullable
  public List<String> getPageIds() {
    return pageIds;
  }

  public void setPageIds(List<String> pageIds) {
    this.pageIds = pageIds;
  }


  public Volumeannotation selectedText(String selectedText) {
    this.selectedText = selectedText;
    return this;
  }

  /**
   * Excerpt from the volume.
   * @return selectedText
   */
  @javax.annotation.Nullable
  public String getSelectedText() {
    return selectedText;
  }

  public void setSelectedText(String selectedText) {
    this.selectedText = selectedText;
  }


  public Volumeannotation selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * URL to this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Volumeannotation updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp for the last time this anntoation was updated. (RFC 3339 UTC date-time format).
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Volumeannotation volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * The Volume this annotation is for.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Volumeannotation volumeannotation = (Volumeannotation) o;
    return Objects.equals(this.annotationDataId, volumeannotation.annotationDataId) &&
        Objects.equals(this.annotationDataLink, volumeannotation.annotationDataLink) &&
        Objects.equals(this.annotationType, volumeannotation.annotationType) &&
        Objects.equals(this.contentRanges, volumeannotation.contentRanges) &&
        Objects.equals(this.data, volumeannotation.data) &&
        Objects.equals(this.deleted, volumeannotation.deleted) &&
        Objects.equals(this.id, volumeannotation.id) &&
        Objects.equals(this.kind, volumeannotation.kind) &&
        Objects.equals(this.layerId, volumeannotation.layerId) &&
        Objects.equals(this.pageIds, volumeannotation.pageIds) &&
        Objects.equals(this.selectedText, volumeannotation.selectedText) &&
        Objects.equals(this.selfLink, volumeannotation.selfLink) &&
        Objects.equals(this.updated, volumeannotation.updated) &&
        Objects.equals(this.volumeId, volumeannotation.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationDataId, annotationDataLink, annotationType, contentRanges, data, deleted, id, kind, layerId, pageIds, selectedText, selfLink, updated, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Volumeannotation {\n");
    sb.append("    annotationDataId: ").append(toIndentedString(annotationDataId)).append("\n");
    sb.append("    annotationDataLink: ").append(toIndentedString(annotationDataLink)).append("\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    contentRanges: ").append(toIndentedString(contentRanges)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    layerId: ").append(toIndentedString(layerId)).append("\n");
    sb.append("    pageIds: ").append(toIndentedString(pageIds)).append("\n");
    sb.append("    selectedText: ").append(toIndentedString(selectedText)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationDataId");
    openapiFields.add("annotationDataLink");
    openapiFields.add("annotationType");
    openapiFields.add("contentRanges");
    openapiFields.add("data");
    openapiFields.add("deleted");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("layerId");
    openapiFields.add("pageIds");
    openapiFields.add("selectedText");
    openapiFields.add("selfLink");
    openapiFields.add("updated");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Volumeannotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Volumeannotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Volumeannotation is not found in the empty JSON string", Volumeannotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Volumeannotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Volumeannotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationDataId") != null && !jsonObj.get("annotationDataId").isJsonNull()) && !jsonObj.get("annotationDataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationDataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationDataId").toString()));
      }
      if ((jsonObj.get("annotationDataLink") != null && !jsonObj.get("annotationDataLink").isJsonNull()) && !jsonObj.get("annotationDataLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationDataLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationDataLink").toString()));
      }
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      // validate the optional field `contentRanges`
      if (jsonObj.get("contentRanges") != null && !jsonObj.get("contentRanges").isJsonNull()) {
        VolumeannotationContentRanges.validateJsonElement(jsonObj.get("contentRanges"));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("layerId") != null && !jsonObj.get("layerId").isJsonNull()) && !jsonObj.get("layerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pageIds") != null && !jsonObj.get("pageIds").isJsonNull() && !jsonObj.get("pageIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageIds` to be an array in the JSON string but got `%s`", jsonObj.get("pageIds").toString()));
      }
      if ((jsonObj.get("selectedText") != null && !jsonObj.get("selectedText").isJsonNull()) && !jsonObj.get("selectedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedText").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Volumeannotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Volumeannotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Volumeannotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Volumeannotation.class));

       return (TypeAdapter<T>) new TypeAdapter<Volumeannotation>() {
           @Override
           public void write(JsonWriter out, Volumeannotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Volumeannotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Volumeannotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Volumeannotation
   * @throws IOException if the JSON string is invalid with respect to Volumeannotation
   */
  public static Volumeannotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Volumeannotation.class);
  }

  /**
   * Convert an instance of Volumeannotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

