/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DictlayerdataDictWordsInnerDerivativesInner;
import org.openapitools.client.model.DictlayerdataDictWordsInnerDerivativesInnerSource;
import org.openapitools.client.model.DictlayerdataDictWordsInnerSensesInnerConjugationsInner;
import org.openapitools.client.model.DictlayerdataDictWordsInnerSensesInnerDefinitionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DictlayerdataDictWordsInnerSensesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DictlayerdataDictWordsInnerSensesInner {
  public static final String SERIALIZED_NAME_CONJUGATIONS = "conjugations";
  @SerializedName(SERIALIZED_NAME_CONJUGATIONS)
  private List<DictlayerdataDictWordsInnerSensesInnerConjugationsInner> conjugations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private List<DictlayerdataDictWordsInnerSensesInnerDefinitionsInner> definitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PART_OF_SPEECH = "partOfSpeech";
  @SerializedName(SERIALIZED_NAME_PART_OF_SPEECH)
  private String partOfSpeech;

  public static final String SERIALIZED_NAME_PRONUNCIATION = "pronunciation";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATION)
  private String pronunciation;

  public static final String SERIALIZED_NAME_PRONUNCIATION_URL = "pronunciationUrl";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATION_URL)
  private String pronunciationUrl;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DictlayerdataDictWordsInnerDerivativesInnerSource source;

  public static final String SERIALIZED_NAME_SYLLABIFICATION = "syllabification";
  @SerializedName(SERIALIZED_NAME_SYLLABIFICATION)
  private String syllabification;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<DictlayerdataDictWordsInnerDerivativesInner> synonyms = new ArrayList<>();

  public DictlayerdataDictWordsInnerSensesInner() {
  }

  public DictlayerdataDictWordsInnerSensesInner conjugations(List<DictlayerdataDictWordsInnerSensesInnerConjugationsInner> conjugations) {
    this.conjugations = conjugations;
    return this;
  }

  public DictlayerdataDictWordsInnerSensesInner addConjugationsItem(DictlayerdataDictWordsInnerSensesInnerConjugationsInner conjugationsItem) {
    if (this.conjugations == null) {
      this.conjugations = new ArrayList<>();
    }
    this.conjugations.add(conjugationsItem);
    return this;
  }

  /**
   * Get conjugations
   * @return conjugations
   */
  @javax.annotation.Nullable
  public List<DictlayerdataDictWordsInnerSensesInnerConjugationsInner> getConjugations() {
    return conjugations;
  }

  public void setConjugations(List<DictlayerdataDictWordsInnerSensesInnerConjugationsInner> conjugations) {
    this.conjugations = conjugations;
  }


  public DictlayerdataDictWordsInnerSensesInner definitions(List<DictlayerdataDictWordsInnerSensesInnerDefinitionsInner> definitions) {
    this.definitions = definitions;
    return this;
  }

  public DictlayerdataDictWordsInnerSensesInner addDefinitionsItem(DictlayerdataDictWordsInnerSensesInnerDefinitionsInner definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

  /**
   * Get definitions
   * @return definitions
   */
  @javax.annotation.Nullable
  public List<DictlayerdataDictWordsInnerSensesInnerDefinitionsInner> getDefinitions() {
    return definitions;
  }

  public void setDefinitions(List<DictlayerdataDictWordsInnerSensesInnerDefinitionsInner> definitions) {
    this.definitions = definitions;
  }


  public DictlayerdataDictWordsInnerSensesInner partOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
    return this;
  }

  /**
   * Get partOfSpeech
   * @return partOfSpeech
   */
  @javax.annotation.Nullable
  public String getPartOfSpeech() {
    return partOfSpeech;
  }

  public void setPartOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
  }


  public DictlayerdataDictWordsInnerSensesInner pronunciation(String pronunciation) {
    this.pronunciation = pronunciation;
    return this;
  }

  /**
   * Get pronunciation
   * @return pronunciation
   */
  @javax.annotation.Nullable
  public String getPronunciation() {
    return pronunciation;
  }

  public void setPronunciation(String pronunciation) {
    this.pronunciation = pronunciation;
  }


  public DictlayerdataDictWordsInnerSensesInner pronunciationUrl(String pronunciationUrl) {
    this.pronunciationUrl = pronunciationUrl;
    return this;
  }

  /**
   * Get pronunciationUrl
   * @return pronunciationUrl
   */
  @javax.annotation.Nullable
  public String getPronunciationUrl() {
    return pronunciationUrl;
  }

  public void setPronunciationUrl(String pronunciationUrl) {
    this.pronunciationUrl = pronunciationUrl;
  }


  public DictlayerdataDictWordsInnerSensesInner source(DictlayerdataDictWordsInnerDerivativesInnerSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public DictlayerdataDictWordsInnerDerivativesInnerSource getSource() {
    return source;
  }

  public void setSource(DictlayerdataDictWordsInnerDerivativesInnerSource source) {
    this.source = source;
  }


  public DictlayerdataDictWordsInnerSensesInner syllabification(String syllabification) {
    this.syllabification = syllabification;
    return this;
  }

  /**
   * Get syllabification
   * @return syllabification
   */
  @javax.annotation.Nullable
  public String getSyllabification() {
    return syllabification;
  }

  public void setSyllabification(String syllabification) {
    this.syllabification = syllabification;
  }


  public DictlayerdataDictWordsInnerSensesInner synonyms(List<DictlayerdataDictWordsInnerDerivativesInner> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public DictlayerdataDictWordsInnerSensesInner addSynonymsItem(DictlayerdataDictWordsInnerDerivativesInner synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * Get synonyms
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<DictlayerdataDictWordsInnerDerivativesInner> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<DictlayerdataDictWordsInnerDerivativesInner> synonyms) {
    this.synonyms = synonyms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DictlayerdataDictWordsInnerSensesInner dictlayerdataDictWordsInnerSensesInner = (DictlayerdataDictWordsInnerSensesInner) o;
    return Objects.equals(this.conjugations, dictlayerdataDictWordsInnerSensesInner.conjugations) &&
        Objects.equals(this.definitions, dictlayerdataDictWordsInnerSensesInner.definitions) &&
        Objects.equals(this.partOfSpeech, dictlayerdataDictWordsInnerSensesInner.partOfSpeech) &&
        Objects.equals(this.pronunciation, dictlayerdataDictWordsInnerSensesInner.pronunciation) &&
        Objects.equals(this.pronunciationUrl, dictlayerdataDictWordsInnerSensesInner.pronunciationUrl) &&
        Objects.equals(this.source, dictlayerdataDictWordsInnerSensesInner.source) &&
        Objects.equals(this.syllabification, dictlayerdataDictWordsInnerSensesInner.syllabification) &&
        Objects.equals(this.synonyms, dictlayerdataDictWordsInnerSensesInner.synonyms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conjugations, definitions, partOfSpeech, pronunciation, pronunciationUrl, source, syllabification, synonyms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DictlayerdataDictWordsInnerSensesInner {\n");
    sb.append("    conjugations: ").append(toIndentedString(conjugations)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    partOfSpeech: ").append(toIndentedString(partOfSpeech)).append("\n");
    sb.append("    pronunciation: ").append(toIndentedString(pronunciation)).append("\n");
    sb.append("    pronunciationUrl: ").append(toIndentedString(pronunciationUrl)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    syllabification: ").append(toIndentedString(syllabification)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conjugations");
    openapiFields.add("definitions");
    openapiFields.add("partOfSpeech");
    openapiFields.add("pronunciation");
    openapiFields.add("pronunciationUrl");
    openapiFields.add("source");
    openapiFields.add("syllabification");
    openapiFields.add("synonyms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DictlayerdataDictWordsInnerSensesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DictlayerdataDictWordsInnerSensesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DictlayerdataDictWordsInnerSensesInner is not found in the empty JSON string", DictlayerdataDictWordsInnerSensesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DictlayerdataDictWordsInnerSensesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DictlayerdataDictWordsInnerSensesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conjugations") != null && !jsonObj.get("conjugations").isJsonNull()) {
        JsonArray jsonArrayconjugations = jsonObj.getAsJsonArray("conjugations");
        if (jsonArrayconjugations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conjugations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conjugations` to be an array in the JSON string but got `%s`", jsonObj.get("conjugations").toString()));
          }

          // validate the optional field `conjugations` (array)
          for (int i = 0; i < jsonArrayconjugations.size(); i++) {
            DictlayerdataDictWordsInnerSensesInnerConjugationsInner.validateJsonElement(jsonArrayconjugations.get(i));
          };
        }
      }
      if (jsonObj.get("definitions") != null && !jsonObj.get("definitions").isJsonNull()) {
        JsonArray jsonArraydefinitions = jsonObj.getAsJsonArray("definitions");
        if (jsonArraydefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("definitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `definitions` to be an array in the JSON string but got `%s`", jsonObj.get("definitions").toString()));
          }

          // validate the optional field `definitions` (array)
          for (int i = 0; i < jsonArraydefinitions.size(); i++) {
            DictlayerdataDictWordsInnerSensesInnerDefinitionsInner.validateJsonElement(jsonArraydefinitions.get(i));
          };
        }
      }
      if ((jsonObj.get("partOfSpeech") != null && !jsonObj.get("partOfSpeech").isJsonNull()) && !jsonObj.get("partOfSpeech").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partOfSpeech").toString()));
      }
      if ((jsonObj.get("pronunciation") != null && !jsonObj.get("pronunciation").isJsonNull()) && !jsonObj.get("pronunciation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronunciation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pronunciation").toString()));
      }
      if ((jsonObj.get("pronunciationUrl") != null && !jsonObj.get("pronunciationUrl").isJsonNull()) && !jsonObj.get("pronunciationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronunciationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pronunciationUrl").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        DictlayerdataDictWordsInnerDerivativesInnerSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("syllabification") != null && !jsonObj.get("syllabification").isJsonNull()) && !jsonObj.get("syllabification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syllabification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syllabification").toString()));
      }
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull()) {
        JsonArray jsonArraysynonyms = jsonObj.getAsJsonArray("synonyms");
        if (jsonArraysynonyms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("synonyms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
          }

          // validate the optional field `synonyms` (array)
          for (int i = 0; i < jsonArraysynonyms.size(); i++) {
            DictlayerdataDictWordsInnerDerivativesInner.validateJsonElement(jsonArraysynonyms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DictlayerdataDictWordsInnerSensesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DictlayerdataDictWordsInnerSensesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DictlayerdataDictWordsInnerSensesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DictlayerdataDictWordsInnerSensesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DictlayerdataDictWordsInnerSensesInner>() {
           @Override
           public void write(JsonWriter out, DictlayerdataDictWordsInnerSensesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DictlayerdataDictWordsInnerSensesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DictlayerdataDictWordsInnerSensesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DictlayerdataDictWordsInnerSensesInner
   * @throws IOException if the JSON string is invalid with respect to DictlayerdataDictWordsInnerSensesInner
   */
  public static DictlayerdataDictWordsInnerSensesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DictlayerdataDictWordsInnerSensesInner.class);
  }

  /**
   * Convert an instance of DictlayerdataDictWordsInnerSensesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

