/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VolumeAccessInfo;
import org.openapitools.client.model.VolumeLayerInfo;
import org.openapitools.client.model.VolumeRecommendedInfo;
import org.openapitools.client.model.VolumeSaleInfo;
import org.openapitools.client.model.VolumeSearchInfo;
import org.openapitools.client.model.VolumeUserInfo;
import org.openapitools.client.model.VolumeVolumeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Volume {
  public static final String SERIALIZED_NAME_ACCESS_INFO = "accessInfo";
  @SerializedName(SERIALIZED_NAME_ACCESS_INFO)
  private VolumeAccessInfo accessInfo;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAYER_INFO = "layerInfo";
  @SerializedName(SERIALIZED_NAME_LAYER_INFO)
  private VolumeLayerInfo layerInfo;

  public static final String SERIALIZED_NAME_RECOMMENDED_INFO = "recommendedInfo";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_INFO)
  private VolumeRecommendedInfo recommendedInfo;

  public static final String SERIALIZED_NAME_SALE_INFO = "saleInfo";
  @SerializedName(SERIALIZED_NAME_SALE_INFO)
  private VolumeSaleInfo saleInfo;

  public static final String SERIALIZED_NAME_SEARCH_INFO = "searchInfo";
  @SerializedName(SERIALIZED_NAME_SEARCH_INFO)
  private VolumeSearchInfo searchInfo;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_USER_INFO = "userInfo";
  @SerializedName(SERIALIZED_NAME_USER_INFO)
  private VolumeUserInfo userInfo;

  public static final String SERIALIZED_NAME_VOLUME_INFO = "volumeInfo";
  @SerializedName(SERIALIZED_NAME_VOLUME_INFO)
  private VolumeVolumeInfo volumeInfo;

  public Volume() {
  }

  public Volume accessInfo(VolumeAccessInfo accessInfo) {
    this.accessInfo = accessInfo;
    return this;
  }

  /**
   * Get accessInfo
   * @return accessInfo
   */
  @javax.annotation.Nullable
  public VolumeAccessInfo getAccessInfo() {
    return accessInfo;
  }

  public void setAccessInfo(VolumeAccessInfo accessInfo) {
    this.accessInfo = accessInfo;
  }


  public Volume etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Opaque identifier for a specific version of a volume resource. (In LITE projection)
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Volume id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for a volume. (In LITE projection.)
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Volume kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for a volume. (In LITE projection.)
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Volume layerInfo(VolumeLayerInfo layerInfo) {
    this.layerInfo = layerInfo;
    return this;
  }

  /**
   * Get layerInfo
   * @return layerInfo
   */
  @javax.annotation.Nullable
  public VolumeLayerInfo getLayerInfo() {
    return layerInfo;
  }

  public void setLayerInfo(VolumeLayerInfo layerInfo) {
    this.layerInfo = layerInfo;
  }


  public Volume recommendedInfo(VolumeRecommendedInfo recommendedInfo) {
    this.recommendedInfo = recommendedInfo;
    return this;
  }

  /**
   * Get recommendedInfo
   * @return recommendedInfo
   */
  @javax.annotation.Nullable
  public VolumeRecommendedInfo getRecommendedInfo() {
    return recommendedInfo;
  }

  public void setRecommendedInfo(VolumeRecommendedInfo recommendedInfo) {
    this.recommendedInfo = recommendedInfo;
  }


  public Volume saleInfo(VolumeSaleInfo saleInfo) {
    this.saleInfo = saleInfo;
    return this;
  }

  /**
   * Get saleInfo
   * @return saleInfo
   */
  @javax.annotation.Nullable
  public VolumeSaleInfo getSaleInfo() {
    return saleInfo;
  }

  public void setSaleInfo(VolumeSaleInfo saleInfo) {
    this.saleInfo = saleInfo;
  }


  public Volume searchInfo(VolumeSearchInfo searchInfo) {
    this.searchInfo = searchInfo;
    return this;
  }

  /**
   * Get searchInfo
   * @return searchInfo
   */
  @javax.annotation.Nullable
  public VolumeSearchInfo getSearchInfo() {
    return searchInfo;
  }

  public void setSearchInfo(VolumeSearchInfo searchInfo) {
    this.searchInfo = searchInfo;
  }


  public Volume selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * URL to this resource. (In LITE projection.)
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Volume userInfo(VolumeUserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Get userInfo
   * @return userInfo
   */
  @javax.annotation.Nullable
  public VolumeUserInfo getUserInfo() {
    return userInfo;
  }

  public void setUserInfo(VolumeUserInfo userInfo) {
    this.userInfo = userInfo;
  }


  public Volume volumeInfo(VolumeVolumeInfo volumeInfo) {
    this.volumeInfo = volumeInfo;
    return this;
  }

  /**
   * Get volumeInfo
   * @return volumeInfo
   */
  @javax.annotation.Nullable
  public VolumeVolumeInfo getVolumeInfo() {
    return volumeInfo;
  }

  public void setVolumeInfo(VolumeVolumeInfo volumeInfo) {
    this.volumeInfo = volumeInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Volume volume = (Volume) o;
    return Objects.equals(this.accessInfo, volume.accessInfo) &&
        Objects.equals(this.etag, volume.etag) &&
        Objects.equals(this.id, volume.id) &&
        Objects.equals(this.kind, volume.kind) &&
        Objects.equals(this.layerInfo, volume.layerInfo) &&
        Objects.equals(this.recommendedInfo, volume.recommendedInfo) &&
        Objects.equals(this.saleInfo, volume.saleInfo) &&
        Objects.equals(this.searchInfo, volume.searchInfo) &&
        Objects.equals(this.selfLink, volume.selfLink) &&
        Objects.equals(this.userInfo, volume.userInfo) &&
        Objects.equals(this.volumeInfo, volume.volumeInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessInfo, etag, id, kind, layerInfo, recommendedInfo, saleInfo, searchInfo, selfLink, userInfo, volumeInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Volume {\n");
    sb.append("    accessInfo: ").append(toIndentedString(accessInfo)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    layerInfo: ").append(toIndentedString(layerInfo)).append("\n");
    sb.append("    recommendedInfo: ").append(toIndentedString(recommendedInfo)).append("\n");
    sb.append("    saleInfo: ").append(toIndentedString(saleInfo)).append("\n");
    sb.append("    searchInfo: ").append(toIndentedString(searchInfo)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("    volumeInfo: ").append(toIndentedString(volumeInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessInfo");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("layerInfo");
    openapiFields.add("recommendedInfo");
    openapiFields.add("saleInfo");
    openapiFields.add("searchInfo");
    openapiFields.add("selfLink");
    openapiFields.add("userInfo");
    openapiFields.add("volumeInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Volume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Volume is not found in the empty JSON string", Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessInfo`
      if (jsonObj.get("accessInfo") != null && !jsonObj.get("accessInfo").isJsonNull()) {
        VolumeAccessInfo.validateJsonElement(jsonObj.get("accessInfo"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `layerInfo`
      if (jsonObj.get("layerInfo") != null && !jsonObj.get("layerInfo").isJsonNull()) {
        VolumeLayerInfo.validateJsonElement(jsonObj.get("layerInfo"));
      }
      // validate the optional field `recommendedInfo`
      if (jsonObj.get("recommendedInfo") != null && !jsonObj.get("recommendedInfo").isJsonNull()) {
        VolumeRecommendedInfo.validateJsonElement(jsonObj.get("recommendedInfo"));
      }
      // validate the optional field `saleInfo`
      if (jsonObj.get("saleInfo") != null && !jsonObj.get("saleInfo").isJsonNull()) {
        VolumeSaleInfo.validateJsonElement(jsonObj.get("saleInfo"));
      }
      // validate the optional field `searchInfo`
      if (jsonObj.get("searchInfo") != null && !jsonObj.get("searchInfo").isJsonNull()) {
        VolumeSearchInfo.validateJsonElement(jsonObj.get("searchInfo"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      // validate the optional field `userInfo`
      if (jsonObj.get("userInfo") != null && !jsonObj.get("userInfo").isJsonNull()) {
        VolumeUserInfo.validateJsonElement(jsonObj.get("userInfo"));
      }
      // validate the optional field `volumeInfo`
      if (jsonObj.get("volumeInfo") != null && !jsonObj.get("volumeInfo").isJsonNull()) {
        VolumeVolumeInfo.validateJsonElement(jsonObj.get("volumeInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<Volume>() {
           @Override
           public void write(JsonWriter out, Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Volume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Volume
   * @throws IOException if the JSON string is invalid with respect to Volume
   */
  public static Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Volume.class);
  }

  /**
   * Convert an instance of Volume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

