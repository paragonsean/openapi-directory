/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Annotationsdata;
import org.openapitools.client.model.DictionaryAnnotationdata;
import org.openapitools.client.model.Layersummaries;
import org.openapitools.client.model.Layersummary;
import org.openapitools.client.model.Volumeannotation;
import org.openapitools.client.model.Volumeannotations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LayersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LayersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for booksLayersAnnotationDataGet
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationDataId The ID of the annotation data to retrieve. (required)
     * @param contentVersion The content version for the volume you are trying to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param allowWebDefinitions For the dictionary layer. Whether or not to allow web definitions. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersAnnotationDataGetCall(String volumeId, String layerId, String annotationDataId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean allowWebDefinitions, Integer h, String locale, Integer scale, String source, Integer w, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()))
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()))
            .replace("{" + "annotationDataId" + "}", localVarApiClient.escapeString(annotationDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (contentVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentVersion", contentVersion));
        }

        if (allowWebDefinitions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowWebDefinitions", allowWebDefinitions));
        }

        if (h != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("h", h));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (scale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scale", scale));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (w != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("w", w));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersAnnotationDataGetValidateBeforeCall(String volumeId, String layerId, String annotationDataId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean allowWebDefinitions, Integer h, String locale, Integer scale, String source, Integer w, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersAnnotationDataGet(Async)");
        }

        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling booksLayersAnnotationDataGet(Async)");
        }

        // verify the required parameter 'annotationDataId' is set
        if (annotationDataId == null) {
            throw new ApiException("Missing the required parameter 'annotationDataId' when calling booksLayersAnnotationDataGet(Async)");
        }

        // verify the required parameter 'contentVersion' is set
        if (contentVersion == null) {
            throw new ApiException("Missing the required parameter 'contentVersion' when calling booksLayersAnnotationDataGet(Async)");
        }

        return booksLayersAnnotationDataGetCall(volumeId, layerId, annotationDataId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowWebDefinitions, h, locale, scale, source, w, _callback);

    }

    /**
     * 
     * Gets the annotation data.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationDataId The ID of the annotation data to retrieve. (required)
     * @param contentVersion The content version for the volume you are trying to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param allowWebDefinitions For the dictionary layer. Whether or not to allow web definitions. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @return DictionaryAnnotationdata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryAnnotationdata booksLayersAnnotationDataGet(String volumeId, String layerId, String annotationDataId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean allowWebDefinitions, Integer h, String locale, Integer scale, String source, Integer w) throws ApiException {
        ApiResponse<DictionaryAnnotationdata> localVarResp = booksLayersAnnotationDataGetWithHttpInfo(volumeId, layerId, annotationDataId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowWebDefinitions, h, locale, scale, source, w);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the annotation data.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationDataId The ID of the annotation data to retrieve. (required)
     * @param contentVersion The content version for the volume you are trying to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param allowWebDefinitions For the dictionary layer. Whether or not to allow web definitions. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @return ApiResponse&lt;DictionaryAnnotationdata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryAnnotationdata> booksLayersAnnotationDataGetWithHttpInfo(String volumeId, String layerId, String annotationDataId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean allowWebDefinitions, Integer h, String locale, Integer scale, String source, Integer w) throws ApiException {
        okhttp3.Call localVarCall = booksLayersAnnotationDataGetValidateBeforeCall(volumeId, layerId, annotationDataId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowWebDefinitions, h, locale, scale, source, w, null);
        Type localVarReturnType = new TypeToken<DictionaryAnnotationdata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the annotation data.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationDataId The ID of the annotation data to retrieve. (required)
     * @param contentVersion The content version for the volume you are trying to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param allowWebDefinitions For the dictionary layer. Whether or not to allow web definitions. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersAnnotationDataGetAsync(String volumeId, String layerId, String annotationDataId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Boolean allowWebDefinitions, Integer h, String locale, Integer scale, String source, Integer w, final ApiCallback<DictionaryAnnotationdata> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersAnnotationDataGetValidateBeforeCall(volumeId, layerId, annotationDataId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowWebDefinitions, h, locale, scale, source, w, _callback);
        Type localVarReturnType = new TypeToken<DictionaryAnnotationdata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksLayersAnnotationDataList
     * @param volumeId The volume to retrieve annotation data for. (required)
     * @param layerId The ID for the layer to get the annotation data. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param annotationDataId The list of Annotation Data Ids to retrieve. Pagination is ignored if this is set. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersAnnotationDataListCall(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, List<String> annotationDataId, Integer h, String locale, Integer maxResults, String pageToken, Integer scale, String source, String updatedMax, String updatedMin, Integer w, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layers/{layerId}/data"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()))
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (contentVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentVersion", contentVersion));
        }

        if (annotationDataId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "annotationDataId", annotationDataId));
        }

        if (h != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("h", h));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (scale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scale", scale));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (updatedMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMax", updatedMax));
        }

        if (updatedMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMin", updatedMin));
        }

        if (w != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("w", w));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersAnnotationDataListValidateBeforeCall(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, List<String> annotationDataId, Integer h, String locale, Integer maxResults, String pageToken, Integer scale, String source, String updatedMax, String updatedMin, Integer w, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersAnnotationDataList(Async)");
        }

        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling booksLayersAnnotationDataList(Async)");
        }

        // verify the required parameter 'contentVersion' is set
        if (contentVersion == null) {
            throw new ApiException("Missing the required parameter 'contentVersion' when calling booksLayersAnnotationDataList(Async)");
        }

        return booksLayersAnnotationDataListCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationDataId, h, locale, maxResults, pageToken, scale, source, updatedMax, updatedMin, w, _callback);

    }

    /**
     * 
     * Gets the annotation data for a volume and layer.
     * @param volumeId The volume to retrieve annotation data for. (required)
     * @param layerId The ID for the layer to get the annotation data. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param annotationDataId The list of Annotation Data Ids to retrieve. Pagination is ignored if this is set. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @return Annotationsdata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Annotationsdata booksLayersAnnotationDataList(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, List<String> annotationDataId, Integer h, String locale, Integer maxResults, String pageToken, Integer scale, String source, String updatedMax, String updatedMin, Integer w) throws ApiException {
        ApiResponse<Annotationsdata> localVarResp = booksLayersAnnotationDataListWithHttpInfo(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationDataId, h, locale, maxResults, pageToken, scale, source, updatedMax, updatedMin, w);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the annotation data for a volume and layer.
     * @param volumeId The volume to retrieve annotation data for. (required)
     * @param layerId The ID for the layer to get the annotation data. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param annotationDataId The list of Annotation Data Ids to retrieve. Pagination is ignored if this is set. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @return ApiResponse&lt;Annotationsdata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotationsdata> booksLayersAnnotationDataListWithHttpInfo(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, List<String> annotationDataId, Integer h, String locale, Integer maxResults, String pageToken, Integer scale, String source, String updatedMax, String updatedMin, Integer w) throws ApiException {
        okhttp3.Call localVarCall = booksLayersAnnotationDataListValidateBeforeCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationDataId, h, locale, maxResults, pageToken, scale, source, updatedMax, updatedMin, w, null);
        Type localVarReturnType = new TypeToken<Annotationsdata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the annotation data for a volume and layer.
     * @param volumeId The volume to retrieve annotation data for. (required)
     * @param layerId The ID for the layer to get the annotation data. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param annotationDataId The list of Annotation Data Ids to retrieve. Pagination is ignored if this is set. (optional)
     * @param h The requested pixel height for any images. If height is provided width must also be provided. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param scale The requested scale for the image. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param w The requested pixel width for any images. If width is provided height must also be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersAnnotationDataListAsync(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, List<String> annotationDataId, Integer h, String locale, Integer maxResults, String pageToken, Integer scale, String source, String updatedMax, String updatedMin, Integer w, final ApiCallback<Annotationsdata> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersAnnotationDataListValidateBeforeCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationDataId, h, locale, maxResults, pageToken, scale, source, updatedMax, updatedMin, w, _callback);
        Type localVarReturnType = new TypeToken<Annotationsdata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksLayersGet
     * @param volumeId The volume to retrieve layers for. (required)
     * @param summaryId The ID for the layer to get the summary for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersGetCall(String volumeId, String summaryId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layersummary/{summaryId}"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()))
            .replace("{" + "summaryId" + "}", localVarApiClient.escapeString(summaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (contentVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentVersion", contentVersion));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersGetValidateBeforeCall(String volumeId, String summaryId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersGet(Async)");
        }

        // verify the required parameter 'summaryId' is set
        if (summaryId == null) {
            throw new ApiException("Missing the required parameter 'summaryId' when calling booksLayersGet(Async)");
        }

        return booksLayersGetCall(volumeId, summaryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source, _callback);

    }

    /**
     * 
     * Gets the layer summary for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param summaryId The ID for the layer to get the summary for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return Layersummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Layersummary booksLayersGet(String volumeId, String summaryId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, String source) throws ApiException {
        ApiResponse<Layersummary> localVarResp = booksLayersGetWithHttpInfo(volumeId, summaryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the layer summary for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param summaryId The ID for the layer to get the summary for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return ApiResponse&lt;Layersummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layersummary> booksLayersGetWithHttpInfo(String volumeId, String summaryId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, String source) throws ApiException {
        okhttp3.Call localVarCall = booksLayersGetValidateBeforeCall(volumeId, summaryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source, null);
        Type localVarReturnType = new TypeToken<Layersummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the layer summary for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param summaryId The ID for the layer to get the summary for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersGetAsync(String volumeId, String summaryId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, String source, final ApiCallback<Layersummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersGetValidateBeforeCall(volumeId, summaryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source, _callback);
        Type localVarReturnType = new TypeToken<Layersummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksLayersList
     * @param volumeId The volume to retrieve layers for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersListCall(String volumeId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, Integer maxResults, String pageToken, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layersummary"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (contentVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentVersion", contentVersion));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersListValidateBeforeCall(String volumeId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, Integer maxResults, String pageToken, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersList(Async)");
        }

        return booksLayersListCall(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, maxResults, pageToken, source, _callback);

    }

    /**
     * 
     * List the layer summaries for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return Layersummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Layersummaries booksLayersList(String volumeId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, Integer maxResults, String pageToken, String source) throws ApiException {
        ApiResponse<Layersummaries> localVarResp = booksLayersListWithHttpInfo(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, maxResults, pageToken, source);
        return localVarResp.getData();
    }

    /**
     * 
     * List the layer summaries for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return ApiResponse&lt;Layersummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layersummaries> booksLayersListWithHttpInfo(String volumeId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, Integer maxResults, String pageToken, String source) throws ApiException {
        okhttp3.Call localVarCall = booksLayersListValidateBeforeCall(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, maxResults, pageToken, source, null);
        Type localVarReturnType = new TypeToken<Layersummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the layer summaries for a volume.
     * @param volumeId The volume to retrieve layers for. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param contentVersion The content version for the requested volume. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersListAsync(String volumeId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String contentVersion, Integer maxResults, String pageToken, String source, final ApiCallback<Layersummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersListValidateBeforeCall(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, maxResults, pageToken, source, _callback);
        Type localVarReturnType = new TypeToken<Layersummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksLayersVolumeAnnotationsGet
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationId The ID of the volume annotation to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersVolumeAnnotationsGetCall(String volumeId, String layerId, String annotationId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String locale, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()))
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()))
            .replace("{" + "annotationId" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersVolumeAnnotationsGetValidateBeforeCall(String volumeId, String layerId, String annotationId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String locale, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersVolumeAnnotationsGet(Async)");
        }

        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling booksLayersVolumeAnnotationsGet(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling booksLayersVolumeAnnotationsGet(Async)");
        }

        return booksLayersVolumeAnnotationsGetCall(volumeId, layerId, annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source, _callback);

    }

    /**
     * 
     * Gets the volume annotation.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationId The ID of the volume annotation to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return Volumeannotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Volumeannotation booksLayersVolumeAnnotationsGet(String volumeId, String layerId, String annotationId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String locale, String source) throws ApiException {
        ApiResponse<Volumeannotation> localVarResp = booksLayersVolumeAnnotationsGetWithHttpInfo(volumeId, layerId, annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the volume annotation.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationId The ID of the volume annotation to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @return ApiResponse&lt;Volumeannotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volumeannotation> booksLayersVolumeAnnotationsGetWithHttpInfo(String volumeId, String layerId, String annotationId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String locale, String source) throws ApiException {
        okhttp3.Call localVarCall = booksLayersVolumeAnnotationsGetValidateBeforeCall(volumeId, layerId, annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source, null);
        Type localVarReturnType = new TypeToken<Volumeannotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the volume annotation.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param annotationId The ID of the volume annotation to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersVolumeAnnotationsGetAsync(String volumeId, String layerId, String annotationId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String locale, String source, final ApiCallback<Volumeannotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersVolumeAnnotationsGetValidateBeforeCall(volumeId, layerId, annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source, _callback);
        Type localVarReturnType = new TypeToken<Volumeannotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksLayersVolumeAnnotationsList
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endOffset The end offset to end retrieving data from. (optional)
     * @param endPosition The end position to end retrieving data from. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param showDeleted Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param startOffset The start offset to start retrieving data from. (optional)
     * @param startPosition The start position to start retrieving data from. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param volumeAnnotationsVersion The version of the volume annotations that you are requesting. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersVolumeAnnotationsListCall(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endOffset, String endPosition, String locale, Integer maxResults, String pageToken, Boolean showDeleted, String source, String startOffset, String startPosition, String updatedMax, String updatedMin, String volumeAnnotationsVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/v1/volumes/{volumeId}/layers/{layerId}"
            .replace("{" + "volumeId" + "}", localVarApiClient.escapeString(volumeId.toString()))
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (contentVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentVersion", contentVersion));
        }

        if (endOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endOffset", endOffset));
        }

        if (endPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPosition", endPosition));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (showDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDeleted", showDeleted));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (startOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startOffset", startOffset));
        }

        if (startPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPosition", startPosition));
        }

        if (updatedMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMax", updatedMax));
        }

        if (updatedMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMin", updatedMin));
        }

        if (volumeAnnotationsVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("volumeAnnotationsVersion", volumeAnnotationsVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksLayersVolumeAnnotationsListValidateBeforeCall(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endOffset, String endPosition, String locale, Integer maxResults, String pageToken, Boolean showDeleted, String source, String startOffset, String startPosition, String updatedMax, String updatedMin, String volumeAnnotationsVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'volumeId' is set
        if (volumeId == null) {
            throw new ApiException("Missing the required parameter 'volumeId' when calling booksLayersVolumeAnnotationsList(Async)");
        }

        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling booksLayersVolumeAnnotationsList(Async)");
        }

        // verify the required parameter 'contentVersion' is set
        if (contentVersion == null) {
            throw new ApiException("Missing the required parameter 'contentVersion' when calling booksLayersVolumeAnnotationsList(Async)");
        }

        return booksLayersVolumeAnnotationsListCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endOffset, endPosition, locale, maxResults, pageToken, showDeleted, source, startOffset, startPosition, updatedMax, updatedMin, volumeAnnotationsVersion, _callback);

    }

    /**
     * 
     * Gets the volume annotations for a volume and layer.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endOffset The end offset to end retrieving data from. (optional)
     * @param endPosition The end position to end retrieving data from. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param showDeleted Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param startOffset The start offset to start retrieving data from. (optional)
     * @param startPosition The start position to start retrieving data from. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param volumeAnnotationsVersion The version of the volume annotations that you are requesting. (optional)
     * @return Volumeannotations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Volumeannotations booksLayersVolumeAnnotationsList(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endOffset, String endPosition, String locale, Integer maxResults, String pageToken, Boolean showDeleted, String source, String startOffset, String startPosition, String updatedMax, String updatedMin, String volumeAnnotationsVersion) throws ApiException {
        ApiResponse<Volumeannotations> localVarResp = booksLayersVolumeAnnotationsListWithHttpInfo(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endOffset, endPosition, locale, maxResults, pageToken, showDeleted, source, startOffset, startPosition, updatedMax, updatedMin, volumeAnnotationsVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the volume annotations for a volume and layer.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endOffset The end offset to end retrieving data from. (optional)
     * @param endPosition The end position to end retrieving data from. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param showDeleted Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param startOffset The start offset to start retrieving data from. (optional)
     * @param startPosition The start position to start retrieving data from. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param volumeAnnotationsVersion The version of the volume annotations that you are requesting. (optional)
     * @return ApiResponse&lt;Volumeannotations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volumeannotations> booksLayersVolumeAnnotationsListWithHttpInfo(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endOffset, String endPosition, String locale, Integer maxResults, String pageToken, Boolean showDeleted, String source, String startOffset, String startPosition, String updatedMax, String updatedMin, String volumeAnnotationsVersion) throws ApiException {
        okhttp3.Call localVarCall = booksLayersVolumeAnnotationsListValidateBeforeCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endOffset, endPosition, locale, maxResults, pageToken, showDeleted, source, startOffset, startPosition, updatedMax, updatedMin, volumeAnnotationsVersion, null);
        Type localVarReturnType = new TypeToken<Volumeannotations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the volume annotations for a volume and layer.
     * @param volumeId The volume to retrieve annotations for. (required)
     * @param layerId The ID for the layer to get the annotations. (required)
     * @param contentVersion The content version for the requested volume. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endOffset The end offset to end retrieving data from. (optional)
     * @param endPosition The end position to end retrieving data from. (optional)
     * @param locale The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: &#39;en_US&#39;. (optional)
     * @param maxResults Maximum number of results to return (optional)
     * @param pageToken The value of the nextToken from the previous page. (optional)
     * @param showDeleted Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false. (optional)
     * @param source String to identify the originator of this request. (optional)
     * @param startOffset The start offset to start retrieving data from. (optional)
     * @param startPosition The start position to start retrieving data from. (optional)
     * @param updatedMax RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive). (optional)
     * @param updatedMin RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive). (optional)
     * @param volumeAnnotationsVersion The version of the volume annotations that you are requesting. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksLayersVolumeAnnotationsListAsync(String volumeId, String layerId, String contentVersion, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endOffset, String endPosition, String locale, Integer maxResults, String pageToken, Boolean showDeleted, String source, String startOffset, String startPosition, String updatedMax, String updatedMin, String volumeAnnotationsVersion, final ApiCallback<Volumeannotations> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksLayersVolumeAnnotationsListValidateBeforeCall(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endOffset, endPosition, locale, maxResults, pageToken, showDeleted, source, startOffset, startPosition, updatedMax, updatedMin, volumeAnnotationsVersion, _callback);
        Type localVarReturnType = new TypeToken<Volumeannotations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
