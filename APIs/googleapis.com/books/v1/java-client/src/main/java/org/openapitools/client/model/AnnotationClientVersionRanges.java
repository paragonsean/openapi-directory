/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BooksAnnotationsRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Selection ranges sent from the client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnnotationClientVersionRanges {
  public static final String SERIALIZED_NAME_CFI_RANGE = "cfiRange";
  @SerializedName(SERIALIZED_NAME_CFI_RANGE)
  private BooksAnnotationsRange cfiRange;

  public static final String SERIALIZED_NAME_CONTENT_VERSION = "contentVersion";
  @SerializedName(SERIALIZED_NAME_CONTENT_VERSION)
  private String contentVersion;

  public static final String SERIALIZED_NAME_GB_IMAGE_RANGE = "gbImageRange";
  @SerializedName(SERIALIZED_NAME_GB_IMAGE_RANGE)
  private BooksAnnotationsRange gbImageRange;

  public static final String SERIALIZED_NAME_GB_TEXT_RANGE = "gbTextRange";
  @SerializedName(SERIALIZED_NAME_GB_TEXT_RANGE)
  private BooksAnnotationsRange gbTextRange;

  public static final String SERIALIZED_NAME_IMAGE_CFI_RANGE = "imageCfiRange";
  @SerializedName(SERIALIZED_NAME_IMAGE_CFI_RANGE)
  private BooksAnnotationsRange imageCfiRange;

  public AnnotationClientVersionRanges() {
  }

  public AnnotationClientVersionRanges cfiRange(BooksAnnotationsRange cfiRange) {
    this.cfiRange = cfiRange;
    return this;
  }

  /**
   * Get cfiRange
   * @return cfiRange
   */
  @javax.annotation.Nullable
  public BooksAnnotationsRange getCfiRange() {
    return cfiRange;
  }

  public void setCfiRange(BooksAnnotationsRange cfiRange) {
    this.cfiRange = cfiRange;
  }


  public AnnotationClientVersionRanges contentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
    return this;
  }

  /**
   * Content version the client sent in.
   * @return contentVersion
   */
  @javax.annotation.Nullable
  public String getContentVersion() {
    return contentVersion;
  }

  public void setContentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
  }


  public AnnotationClientVersionRanges gbImageRange(BooksAnnotationsRange gbImageRange) {
    this.gbImageRange = gbImageRange;
    return this;
  }

  /**
   * Get gbImageRange
   * @return gbImageRange
   */
  @javax.annotation.Nullable
  public BooksAnnotationsRange getGbImageRange() {
    return gbImageRange;
  }

  public void setGbImageRange(BooksAnnotationsRange gbImageRange) {
    this.gbImageRange = gbImageRange;
  }


  public AnnotationClientVersionRanges gbTextRange(BooksAnnotationsRange gbTextRange) {
    this.gbTextRange = gbTextRange;
    return this;
  }

  /**
   * Get gbTextRange
   * @return gbTextRange
   */
  @javax.annotation.Nullable
  public BooksAnnotationsRange getGbTextRange() {
    return gbTextRange;
  }

  public void setGbTextRange(BooksAnnotationsRange gbTextRange) {
    this.gbTextRange = gbTextRange;
  }


  public AnnotationClientVersionRanges imageCfiRange(BooksAnnotationsRange imageCfiRange) {
    this.imageCfiRange = imageCfiRange;
    return this;
  }

  /**
   * Get imageCfiRange
   * @return imageCfiRange
   */
  @javax.annotation.Nullable
  public BooksAnnotationsRange getImageCfiRange() {
    return imageCfiRange;
  }

  public void setImageCfiRange(BooksAnnotationsRange imageCfiRange) {
    this.imageCfiRange = imageCfiRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotationClientVersionRanges annotationClientVersionRanges = (AnnotationClientVersionRanges) o;
    return Objects.equals(this.cfiRange, annotationClientVersionRanges.cfiRange) &&
        Objects.equals(this.contentVersion, annotationClientVersionRanges.contentVersion) &&
        Objects.equals(this.gbImageRange, annotationClientVersionRanges.gbImageRange) &&
        Objects.equals(this.gbTextRange, annotationClientVersionRanges.gbTextRange) &&
        Objects.equals(this.imageCfiRange, annotationClientVersionRanges.imageCfiRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cfiRange, contentVersion, gbImageRange, gbTextRange, imageCfiRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotationClientVersionRanges {\n");
    sb.append("    cfiRange: ").append(toIndentedString(cfiRange)).append("\n");
    sb.append("    contentVersion: ").append(toIndentedString(contentVersion)).append("\n");
    sb.append("    gbImageRange: ").append(toIndentedString(gbImageRange)).append("\n");
    sb.append("    gbTextRange: ").append(toIndentedString(gbTextRange)).append("\n");
    sb.append("    imageCfiRange: ").append(toIndentedString(imageCfiRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cfiRange");
    openapiFields.add("contentVersion");
    openapiFields.add("gbImageRange");
    openapiFields.add("gbTextRange");
    openapiFields.add("imageCfiRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnnotationClientVersionRanges
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnnotationClientVersionRanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnnotationClientVersionRanges is not found in the empty JSON string", AnnotationClientVersionRanges.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnnotationClientVersionRanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnnotationClientVersionRanges` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cfiRange`
      if (jsonObj.get("cfiRange") != null && !jsonObj.get("cfiRange").isJsonNull()) {
        BooksAnnotationsRange.validateJsonElement(jsonObj.get("cfiRange"));
      }
      if ((jsonObj.get("contentVersion") != null && !jsonObj.get("contentVersion").isJsonNull()) && !jsonObj.get("contentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentVersion").toString()));
      }
      // validate the optional field `gbImageRange`
      if (jsonObj.get("gbImageRange") != null && !jsonObj.get("gbImageRange").isJsonNull()) {
        BooksAnnotationsRange.validateJsonElement(jsonObj.get("gbImageRange"));
      }
      // validate the optional field `gbTextRange`
      if (jsonObj.get("gbTextRange") != null && !jsonObj.get("gbTextRange").isJsonNull()) {
        BooksAnnotationsRange.validateJsonElement(jsonObj.get("gbTextRange"));
      }
      // validate the optional field `imageCfiRange`
      if (jsonObj.get("imageCfiRange") != null && !jsonObj.get("imageCfiRange").isJsonNull()) {
        BooksAnnotationsRange.validateJsonElement(jsonObj.get("imageCfiRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnnotationClientVersionRanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnnotationClientVersionRanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnnotationClientVersionRanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnnotationClientVersionRanges.class));

       return (TypeAdapter<T>) new TypeAdapter<AnnotationClientVersionRanges>() {
           @Override
           public void write(JsonWriter out, AnnotationClientVersionRanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnnotationClientVersionRanges read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnnotationClientVersionRanges given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnnotationClientVersionRanges
   * @throws IOException if the JSON string is invalid with respect to AnnotationClientVersionRanges
   */
  public static AnnotationClientVersionRanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnnotationClientVersionRanges.class);
  }

  /**
   * Convert an instance of AnnotationClientVersionRanges to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

