/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DownloadAccessRestriction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadAccessRestriction {
  public static final String SERIALIZED_NAME_DEVICE_ALLOWED = "deviceAllowed";
  @SerializedName(SERIALIZED_NAME_DEVICE_ALLOWED)
  private Boolean deviceAllowed;

  public static final String SERIALIZED_NAME_DOWNLOADS_ACQUIRED = "downloadsAcquired";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_ACQUIRED)
  private Integer downloadsAcquired;

  public static final String SERIALIZED_NAME_JUST_ACQUIRED = "justAcquired";
  @SerializedName(SERIALIZED_NAME_JUST_ACQUIRED)
  private Boolean justAcquired;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MAX_DOWNLOAD_DEVICES = "maxDownloadDevices";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOAD_DEVICES)
  private Integer maxDownloadDevices;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_RESTRICTED = "restricted";
  @SerializedName(SERIALIZED_NAME_RESTRICTED)
  private Boolean restricted;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public DownloadAccessRestriction() {
  }

  public DownloadAccessRestriction deviceAllowed(Boolean deviceAllowed) {
    this.deviceAllowed = deviceAllowed;
    return this;
  }

  /**
   * If restricted, whether access is granted for this (user, device, volume).
   * @return deviceAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDeviceAllowed() {
    return deviceAllowed;
  }

  public void setDeviceAllowed(Boolean deviceAllowed) {
    this.deviceAllowed = deviceAllowed;
  }


  public DownloadAccessRestriction downloadsAcquired(Integer downloadsAcquired) {
    this.downloadsAcquired = downloadsAcquired;
    return this;
  }

  /**
   * If restricted, the number of content download licenses already acquired (including the requesting client, if licensed).
   * @return downloadsAcquired
   */
  @javax.annotation.Nullable
  public Integer getDownloadsAcquired() {
    return downloadsAcquired;
  }

  public void setDownloadsAcquired(Integer downloadsAcquired) {
    this.downloadsAcquired = downloadsAcquired;
  }


  public DownloadAccessRestriction justAcquired(Boolean justAcquired) {
    this.justAcquired = justAcquired;
    return this;
  }

  /**
   * If deviceAllowed, whether access was just acquired with this request.
   * @return justAcquired
   */
  @javax.annotation.Nullable
  public Boolean getJustAcquired() {
    return justAcquired;
  }

  public void setJustAcquired(Boolean justAcquired) {
    this.justAcquired = justAcquired;
  }


  public DownloadAccessRestriction kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DownloadAccessRestriction maxDownloadDevices(Integer maxDownloadDevices) {
    this.maxDownloadDevices = maxDownloadDevices;
    return this;
  }

  /**
   * If restricted, the maximum number of content download licenses for this volume.
   * @return maxDownloadDevices
   */
  @javax.annotation.Nullable
  public Integer getMaxDownloadDevices() {
    return maxDownloadDevices;
  }

  public void setMaxDownloadDevices(Integer maxDownloadDevices) {
    this.maxDownloadDevices = maxDownloadDevices;
  }


  public DownloadAccessRestriction message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Error/warning message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DownloadAccessRestriction nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Client nonce for verification. Download access and client-validation only.
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public DownloadAccessRestriction reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Error/warning reason code. Additional codes may be added in the future. 0 OK 100 ACCESS_DENIED_PUBLISHER_LIMIT 101 ACCESS_DENIED_LIMIT 200 WARNING_USED_LAST_ACCESS
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public DownloadAccessRestriction restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

  /**
   * Whether this volume has any download access restrictions.
   * @return restricted
   */
  @javax.annotation.Nullable
  public Boolean getRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }


  public DownloadAccessRestriction signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Response signature.
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public DownloadAccessRestriction source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Client app identifier for verification. Download access and client-validation only.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public DownloadAccessRestriction volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Identifies the volume for which this entry applies.
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadAccessRestriction downloadAccessRestriction = (DownloadAccessRestriction) o;
    return Objects.equals(this.deviceAllowed, downloadAccessRestriction.deviceAllowed) &&
        Objects.equals(this.downloadsAcquired, downloadAccessRestriction.downloadsAcquired) &&
        Objects.equals(this.justAcquired, downloadAccessRestriction.justAcquired) &&
        Objects.equals(this.kind, downloadAccessRestriction.kind) &&
        Objects.equals(this.maxDownloadDevices, downloadAccessRestriction.maxDownloadDevices) &&
        Objects.equals(this.message, downloadAccessRestriction.message) &&
        Objects.equals(this.nonce, downloadAccessRestriction.nonce) &&
        Objects.equals(this.reasonCode, downloadAccessRestriction.reasonCode) &&
        Objects.equals(this.restricted, downloadAccessRestriction.restricted) &&
        Objects.equals(this.signature, downloadAccessRestriction.signature) &&
        Objects.equals(this.source, downloadAccessRestriction.source) &&
        Objects.equals(this.volumeId, downloadAccessRestriction.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceAllowed, downloadsAcquired, justAcquired, kind, maxDownloadDevices, message, nonce, reasonCode, restricted, signature, source, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadAccessRestriction {\n");
    sb.append("    deviceAllowed: ").append(toIndentedString(deviceAllowed)).append("\n");
    sb.append("    downloadsAcquired: ").append(toIndentedString(downloadsAcquired)).append("\n");
    sb.append("    justAcquired: ").append(toIndentedString(justAcquired)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    maxDownloadDevices: ").append(toIndentedString(maxDownloadDevices)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceAllowed");
    openapiFields.add("downloadsAcquired");
    openapiFields.add("justAcquired");
    openapiFields.add("kind");
    openapiFields.add("maxDownloadDevices");
    openapiFields.add("message");
    openapiFields.add("nonce");
    openapiFields.add("reasonCode");
    openapiFields.add("restricted");
    openapiFields.add("signature");
    openapiFields.add("source");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadAccessRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadAccessRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadAccessRestriction is not found in the empty JSON string", DownloadAccessRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadAccessRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadAccessRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadAccessRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadAccessRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadAccessRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadAccessRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadAccessRestriction>() {
           @Override
           public void write(JsonWriter out, DownloadAccessRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadAccessRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadAccessRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadAccessRestriction
   * @throws IOException if the JSON string is invalid with respect to DownloadAccessRestriction
   */
  public static DownloadAccessRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadAccessRestriction.class);
  }

  /**
   * Convert an instance of DownloadAccessRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

