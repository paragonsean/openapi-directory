/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VolumeSaleInfoListPrice;
import org.openapitools.client.model.VolumeSaleInfoOffersInner;
import org.openapitools.client.model.VolumeSaleInfoRetailPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeSaleInfo {
  public static final String SERIALIZED_NAME_BUY_LINK = "buyLink";
  @SerializedName(SERIALIZED_NAME_BUY_LINK)
  private String buyLink;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_IS_EBOOK = "isEbook";
  @SerializedName(SERIALIZED_NAME_IS_EBOOK)
  private Boolean isEbook;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private VolumeSaleInfoListPrice listPrice;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<VolumeSaleInfoOffersInner> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_SALE_DATE = "onSaleDate";
  @SerializedName(SERIALIZED_NAME_ON_SALE_DATE)
  private String onSaleDate;

  public static final String SERIALIZED_NAME_RETAIL_PRICE = "retailPrice";
  @SerializedName(SERIALIZED_NAME_RETAIL_PRICE)
  private VolumeSaleInfoRetailPrice retailPrice;

  public static final String SERIALIZED_NAME_SALEABILITY = "saleability";
  @SerializedName(SERIALIZED_NAME_SALEABILITY)
  private String saleability;

  public VolumeSaleInfo() {
  }

  public VolumeSaleInfo buyLink(String buyLink) {
    this.buyLink = buyLink;
    return this;
  }

  /**
   * URL to purchase this volume on the Google Books site. (In LITE projection)
   * @return buyLink
   */
  @javax.annotation.Nullable
  public String getBuyLink() {
    return buyLink;
  }

  public void setBuyLink(String buyLink) {
    this.buyLink = buyLink;
  }


  public VolumeSaleInfo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public VolumeSaleInfo isEbook(Boolean isEbook) {
    this.isEbook = isEbook;
    return this;
  }

  /**
   * Whether or not this volume is an eBook (can be added to the My eBooks shelf).
   * @return isEbook
   */
  @javax.annotation.Nullable
  public Boolean getIsEbook() {
    return isEbook;
  }

  public void setIsEbook(Boolean isEbook) {
    this.isEbook = isEbook;
  }


  public VolumeSaleInfo listPrice(VolumeSaleInfoListPrice listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Get listPrice
   * @return listPrice
   */
  @javax.annotation.Nullable
  public VolumeSaleInfoListPrice getListPrice() {
    return listPrice;
  }

  public void setListPrice(VolumeSaleInfoListPrice listPrice) {
    this.listPrice = listPrice;
  }


  public VolumeSaleInfo offers(List<VolumeSaleInfoOffersInner> offers) {
    this.offers = offers;
    return this;
  }

  public VolumeSaleInfo addOffersItem(VolumeSaleInfoOffersInner offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Offers available for this volume (sales and rentals).
   * @return offers
   */
  @javax.annotation.Nullable
  public List<VolumeSaleInfoOffersInner> getOffers() {
    return offers;
  }

  public void setOffers(List<VolumeSaleInfoOffersInner> offers) {
    this.offers = offers;
  }


  public VolumeSaleInfo onSaleDate(String onSaleDate) {
    this.onSaleDate = onSaleDate;
    return this;
  }

  /**
   * The date on which this book is available for sale.
   * @return onSaleDate
   */
  @javax.annotation.Nullable
  public String getOnSaleDate() {
    return onSaleDate;
  }

  public void setOnSaleDate(String onSaleDate) {
    this.onSaleDate = onSaleDate;
  }


  public VolumeSaleInfo retailPrice(VolumeSaleInfoRetailPrice retailPrice) {
    this.retailPrice = retailPrice;
    return this;
  }

  /**
   * Get retailPrice
   * @return retailPrice
   */
  @javax.annotation.Nullable
  public VolumeSaleInfoRetailPrice getRetailPrice() {
    return retailPrice;
  }

  public void setRetailPrice(VolumeSaleInfoRetailPrice retailPrice) {
    this.retailPrice = retailPrice;
  }


  public VolumeSaleInfo saleability(String saleability) {
    this.saleability = saleability;
    return this;
  }

  /**
   * Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or FOR_PREORDER.
   * @return saleability
   */
  @javax.annotation.Nullable
  public String getSaleability() {
    return saleability;
  }

  public void setSaleability(String saleability) {
    this.saleability = saleability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeSaleInfo volumeSaleInfo = (VolumeSaleInfo) o;
    return Objects.equals(this.buyLink, volumeSaleInfo.buyLink) &&
        Objects.equals(this.country, volumeSaleInfo.country) &&
        Objects.equals(this.isEbook, volumeSaleInfo.isEbook) &&
        Objects.equals(this.listPrice, volumeSaleInfo.listPrice) &&
        Objects.equals(this.offers, volumeSaleInfo.offers) &&
        Objects.equals(this.onSaleDate, volumeSaleInfo.onSaleDate) &&
        Objects.equals(this.retailPrice, volumeSaleInfo.retailPrice) &&
        Objects.equals(this.saleability, volumeSaleInfo.saleability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyLink, country, isEbook, listPrice, offers, onSaleDate, retailPrice, saleability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeSaleInfo {\n");
    sb.append("    buyLink: ").append(toIndentedString(buyLink)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    isEbook: ").append(toIndentedString(isEbook)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    onSaleDate: ").append(toIndentedString(onSaleDate)).append("\n");
    sb.append("    retailPrice: ").append(toIndentedString(retailPrice)).append("\n");
    sb.append("    saleability: ").append(toIndentedString(saleability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyLink");
    openapiFields.add("country");
    openapiFields.add("isEbook");
    openapiFields.add("listPrice");
    openapiFields.add("offers");
    openapiFields.add("onSaleDate");
    openapiFields.add("retailPrice");
    openapiFields.add("saleability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeSaleInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeSaleInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeSaleInfo is not found in the empty JSON string", VolumeSaleInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeSaleInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeSaleInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buyLink") != null && !jsonObj.get("buyLink").isJsonNull()) && !jsonObj.get("buyLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyLink").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `listPrice`
      if (jsonObj.get("listPrice") != null && !jsonObj.get("listPrice").isJsonNull()) {
        VolumeSaleInfoListPrice.validateJsonElement(jsonObj.get("listPrice"));
      }
      if (jsonObj.get("offers") != null && !jsonObj.get("offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
          }

          // validate the optional field `offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            VolumeSaleInfoOffersInner.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
      if ((jsonObj.get("onSaleDate") != null && !jsonObj.get("onSaleDate").isJsonNull()) && !jsonObj.get("onSaleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onSaleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onSaleDate").toString()));
      }
      // validate the optional field `retailPrice`
      if (jsonObj.get("retailPrice") != null && !jsonObj.get("retailPrice").isJsonNull()) {
        VolumeSaleInfoRetailPrice.validateJsonElement(jsonObj.get("retailPrice"));
      }
      if ((jsonObj.get("saleability") != null && !jsonObj.get("saleability").isJsonNull()) && !jsonObj.get("saleability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saleability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saleability").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeSaleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeSaleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeSaleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeSaleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeSaleInfo>() {
           @Override
           public void write(JsonWriter out, VolumeSaleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeSaleInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeSaleInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeSaleInfo
   * @throws IOException if the JSON string is invalid with respect to VolumeSaleInfo
   */
  public static VolumeSaleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeSaleInfo.class);
  }

  /**
   * Convert an instance of VolumeSaleInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

