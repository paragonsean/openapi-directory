/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VolumeVolumeInfoDimensions;
import org.openapitools.client.model.VolumeVolumeInfoImageLinks;
import org.openapitools.client.model.VolumeVolumeInfoIndustryIdentifiersInner;
import org.openapitools.client.model.VolumeVolumeInfoPanelizationSummary;
import org.openapitools.client.model.VolumeVolumeInfoReadingModes;
import org.openapitools.client.model.Volumeseriesinfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * General volume information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeVolumeInfo {
  public static final String SERIALIZED_NAME_ALLOW_ANON_LOGGING = "allowAnonLogging";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANON_LOGGING)
  private Boolean allowAnonLogging;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<String> authors = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVERAGE_RATING = "averageRating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATING)
  private Double averageRating;

  public static final String SERIALIZED_NAME_CANONICAL_VOLUME_LINK = "canonicalVolumeLink";
  @SerializedName(SERIALIZED_NAME_CANONICAL_VOLUME_LINK)
  private String canonicalVolumeLink;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMICS_CONTENT = "comicsContent";
  @SerializedName(SERIALIZED_NAME_COMICS_CONTENT)
  private Boolean comicsContent;

  public static final String SERIALIZED_NAME_CONTENT_VERSION = "contentVersion";
  @SerializedName(SERIALIZED_NAME_CONTENT_VERSION)
  private String contentVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private VolumeVolumeInfoDimensions dimensions;

  public static final String SERIALIZED_NAME_IMAGE_LINKS = "imageLinks";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINKS)
  private VolumeVolumeInfoImageLinks imageLinks;

  public static final String SERIALIZED_NAME_INDUSTRY_IDENTIFIERS = "industryIdentifiers";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_IDENTIFIERS)
  private List<VolumeVolumeInfoIndustryIdentifiersInner> industryIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_LINK = "infoLink";
  @SerializedName(SERIALIZED_NAME_INFO_LINK)
  private String infoLink;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MAIN_CATEGORY = "mainCategory";
  @SerializedName(SERIALIZED_NAME_MAIN_CATEGORY)
  private String mainCategory;

  public static final String SERIALIZED_NAME_MATURITY_RATING = "maturityRating";
  @SerializedName(SERIALIZED_NAME_MATURITY_RATING)
  private String maturityRating;

  public static final String SERIALIZED_NAME_PAGE_COUNT = "pageCount";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private Integer pageCount;

  public static final String SERIALIZED_NAME_PANELIZATION_SUMMARY = "panelizationSummary";
  @SerializedName(SERIALIZED_NAME_PANELIZATION_SUMMARY)
  private VolumeVolumeInfoPanelizationSummary panelizationSummary;

  public static final String SERIALIZED_NAME_PREVIEW_LINK = "previewLink";
  @SerializedName(SERIALIZED_NAME_PREVIEW_LINK)
  private String previewLink;

  public static final String SERIALIZED_NAME_PRINT_TYPE = "printType";
  @SerializedName(SERIALIZED_NAME_PRINT_TYPE)
  private String printType;

  public static final String SERIALIZED_NAME_PRINTED_PAGE_COUNT = "printedPageCount";
  @SerializedName(SERIALIZED_NAME_PRINTED_PAGE_COUNT)
  private Integer printedPageCount;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "publishedDate";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_RATINGS_COUNT = "ratingsCount";
  @SerializedName(SERIALIZED_NAME_RATINGS_COUNT)
  private Integer ratingsCount;

  public static final String SERIALIZED_NAME_READING_MODES = "readingModes";
  @SerializedName(SERIALIZED_NAME_READING_MODES)
  private VolumeVolumeInfoReadingModes readingModes;

  public static final String SERIALIZED_NAME_SAMPLE_PAGE_COUNT = "samplePageCount";
  @SerializedName(SERIALIZED_NAME_SAMPLE_PAGE_COUNT)
  private Integer samplePageCount;

  public static final String SERIALIZED_NAME_SERIES_INFO = "seriesInfo";
  @SerializedName(SERIALIZED_NAME_SERIES_INFO)
  private Volumeseriesinfo seriesInfo;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public VolumeVolumeInfo() {
  }

  public VolumeVolumeInfo allowAnonLogging(Boolean allowAnonLogging) {
    this.allowAnonLogging = allowAnonLogging;
    return this;
  }

  /**
   * Whether anonymous logging should be allowed.
   * @return allowAnonLogging
   */
  @javax.annotation.Nullable
  public Boolean getAllowAnonLogging() {
    return allowAnonLogging;
  }

  public void setAllowAnonLogging(Boolean allowAnonLogging) {
    this.allowAnonLogging = allowAnonLogging;
  }


  public VolumeVolumeInfo authors(List<String> authors) {
    this.authors = authors;
    return this;
  }

  public VolumeVolumeInfo addAuthorsItem(String authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

  /**
   * The names of the authors and/or editors for this volume. (In LITE projection)
   * @return authors
   */
  @javax.annotation.Nullable
  public List<String> getAuthors() {
    return authors;
  }

  public void setAuthors(List<String> authors) {
    this.authors = authors;
  }


  public VolumeVolumeInfo averageRating(Double averageRating) {
    this.averageRating = averageRating;
    return this;
  }

  /**
   * The mean review rating for this volume. (min &#x3D; 1.0, max &#x3D; 5.0)
   * @return averageRating
   */
  @javax.annotation.Nullable
  public Double getAverageRating() {
    return averageRating;
  }

  public void setAverageRating(Double averageRating) {
    this.averageRating = averageRating;
  }


  public VolumeVolumeInfo canonicalVolumeLink(String canonicalVolumeLink) {
    this.canonicalVolumeLink = canonicalVolumeLink;
    return this;
  }

  /**
   * Canonical URL for a volume. (In LITE projection.)
   * @return canonicalVolumeLink
   */
  @javax.annotation.Nullable
  public String getCanonicalVolumeLink() {
    return canonicalVolumeLink;
  }

  public void setCanonicalVolumeLink(String canonicalVolumeLink) {
    this.canonicalVolumeLink = canonicalVolumeLink;
  }


  public VolumeVolumeInfo categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public VolumeVolumeInfo addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * A list of subject categories, such as \&quot;Fiction\&quot;, \&quot;Suspense\&quot;, etc.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public VolumeVolumeInfo comicsContent(Boolean comicsContent) {
    this.comicsContent = comicsContent;
    return this;
  }

  /**
   * Whether the volume has comics content.
   * @return comicsContent
   */
  @javax.annotation.Nullable
  public Boolean getComicsContent() {
    return comicsContent;
  }

  public void setComicsContent(Boolean comicsContent) {
    this.comicsContent = comicsContent;
  }


  public VolumeVolumeInfo contentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
    return this;
  }

  /**
   * An identifier for the version of the volume content (text &amp; images). (In LITE projection)
   * @return contentVersion
   */
  @javax.annotation.Nullable
  public String getContentVersion() {
    return contentVersion;
  }

  public void setContentVersion(String contentVersion) {
    this.contentVersion = contentVersion;
  }


  public VolumeVolumeInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VolumeVolumeInfo dimensions(VolumeVolumeInfoDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public VolumeVolumeInfoDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(VolumeVolumeInfoDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public VolumeVolumeInfo imageLinks(VolumeVolumeInfoImageLinks imageLinks) {
    this.imageLinks = imageLinks;
    return this;
  }

  /**
   * Get imageLinks
   * @return imageLinks
   */
  @javax.annotation.Nullable
  public VolumeVolumeInfoImageLinks getImageLinks() {
    return imageLinks;
  }

  public void setImageLinks(VolumeVolumeInfoImageLinks imageLinks) {
    this.imageLinks = imageLinks;
  }


  public VolumeVolumeInfo industryIdentifiers(List<VolumeVolumeInfoIndustryIdentifiersInner> industryIdentifiers) {
    this.industryIdentifiers = industryIdentifiers;
    return this;
  }

  public VolumeVolumeInfo addIndustryIdentifiersItem(VolumeVolumeInfoIndustryIdentifiersInner industryIdentifiersItem) {
    if (this.industryIdentifiers == null) {
      this.industryIdentifiers = new ArrayList<>();
    }
    this.industryIdentifiers.add(industryIdentifiersItem);
    return this;
  }

  /**
   * Industry standard identifiers for this volume.
   * @return industryIdentifiers
   */
  @javax.annotation.Nullable
  public List<VolumeVolumeInfoIndustryIdentifiersInner> getIndustryIdentifiers() {
    return industryIdentifiers;
  }

  public void setIndustryIdentifiers(List<VolumeVolumeInfoIndustryIdentifiersInner> industryIdentifiers) {
    this.industryIdentifiers = industryIdentifiers;
  }


  public VolumeVolumeInfo infoLink(String infoLink) {
    this.infoLink = infoLink;
    return this;
  }

  /**
   * URL to view information about this volume on the Google Books site. (In LITE projection)
   * @return infoLink
   */
  @javax.annotation.Nullable
  public String getInfoLink() {
    return infoLink;
  }

  public void setInfoLink(String infoLink) {
    this.infoLink = infoLink;
  }


  public VolumeVolumeInfo language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as &#39;fr&#39;, &#39;en&#39;, etc.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public VolumeVolumeInfo mainCategory(String mainCategory) {
    this.mainCategory = mainCategory;
    return this;
  }

  /**
   * The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.
   * @return mainCategory
   */
  @javax.annotation.Nullable
  public String getMainCategory() {
    return mainCategory;
  }

  public void setMainCategory(String mainCategory) {
    this.mainCategory = mainCategory;
  }


  public VolumeVolumeInfo maturityRating(String maturityRating) {
    this.maturityRating = maturityRating;
    return this;
  }

  /**
   * Get maturityRating
   * @return maturityRating
   */
  @javax.annotation.Nullable
  public String getMaturityRating() {
    return maturityRating;
  }

  public void setMaturityRating(String maturityRating) {
    this.maturityRating = maturityRating;
  }


  public VolumeVolumeInfo pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

  /**
   * Total number of pages as per publisher metadata.
   * @return pageCount
   */
  @javax.annotation.Nullable
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }


  public VolumeVolumeInfo panelizationSummary(VolumeVolumeInfoPanelizationSummary panelizationSummary) {
    this.panelizationSummary = panelizationSummary;
    return this;
  }

  /**
   * Get panelizationSummary
   * @return panelizationSummary
   */
  @javax.annotation.Nullable
  public VolumeVolumeInfoPanelizationSummary getPanelizationSummary() {
    return panelizationSummary;
  }

  public void setPanelizationSummary(VolumeVolumeInfoPanelizationSummary panelizationSummary) {
    this.panelizationSummary = panelizationSummary;
  }


  public VolumeVolumeInfo previewLink(String previewLink) {
    this.previewLink = previewLink;
    return this;
  }

  /**
   * URL to preview this volume on the Google Books site.
   * @return previewLink
   */
  @javax.annotation.Nullable
  public String getPreviewLink() {
    return previewLink;
  }

  public void setPreviewLink(String previewLink) {
    this.previewLink = previewLink;
  }


  public VolumeVolumeInfo printType(String printType) {
    this.printType = printType;
    return this;
  }

  /**
   * Type of publication of this volume. Possible values are BOOK or MAGAZINE.
   * @return printType
   */
  @javax.annotation.Nullable
  public String getPrintType() {
    return printType;
  }

  public void setPrintType(String printType) {
    this.printType = printType;
  }


  public VolumeVolumeInfo printedPageCount(Integer printedPageCount) {
    this.printedPageCount = printedPageCount;
    return this;
  }

  /**
   * Total number of printed pages in generated pdf representation.
   * @return printedPageCount
   */
  @javax.annotation.Nullable
  public Integer getPrintedPageCount() {
    return printedPageCount;
  }

  public void setPrintedPageCount(Integer printedPageCount) {
    this.printedPageCount = printedPageCount;
  }


  public VolumeVolumeInfo publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Date of publication. (In LITE projection.)
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public VolumeVolumeInfo publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Publisher of this volume. (In LITE projection.)
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public VolumeVolumeInfo ratingsCount(Integer ratingsCount) {
    this.ratingsCount = ratingsCount;
    return this;
  }

  /**
   * The number of review ratings for this volume.
   * @return ratingsCount
   */
  @javax.annotation.Nullable
  public Integer getRatingsCount() {
    return ratingsCount;
  }

  public void setRatingsCount(Integer ratingsCount) {
    this.ratingsCount = ratingsCount;
  }


  public VolumeVolumeInfo readingModes(VolumeVolumeInfoReadingModes readingModes) {
    this.readingModes = readingModes;
    return this;
  }

  /**
   * Get readingModes
   * @return readingModes
   */
  @javax.annotation.Nullable
  public VolumeVolumeInfoReadingModes getReadingModes() {
    return readingModes;
  }

  public void setReadingModes(VolumeVolumeInfoReadingModes readingModes) {
    this.readingModes = readingModes;
  }


  public VolumeVolumeInfo samplePageCount(Integer samplePageCount) {
    this.samplePageCount = samplePageCount;
    return this;
  }

  /**
   * Total number of sample pages as per publisher metadata.
   * @return samplePageCount
   */
  @javax.annotation.Nullable
  public Integer getSamplePageCount() {
    return samplePageCount;
  }

  public void setSamplePageCount(Integer samplePageCount) {
    this.samplePageCount = samplePageCount;
  }


  public VolumeVolumeInfo seriesInfo(Volumeseriesinfo seriesInfo) {
    this.seriesInfo = seriesInfo;
    return this;
  }

  /**
   * Get seriesInfo
   * @return seriesInfo
   */
  @javax.annotation.Nullable
  public Volumeseriesinfo getSeriesInfo() {
    return seriesInfo;
  }

  public void setSeriesInfo(Volumeseriesinfo seriesInfo) {
    this.seriesInfo = seriesInfo;
  }


  public VolumeVolumeInfo subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Volume subtitle. (In LITE projection.)
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public VolumeVolumeInfo title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Volume title. (In LITE projection.)
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeVolumeInfo volumeVolumeInfo = (VolumeVolumeInfo) o;
    return Objects.equals(this.allowAnonLogging, volumeVolumeInfo.allowAnonLogging) &&
        Objects.equals(this.authors, volumeVolumeInfo.authors) &&
        Objects.equals(this.averageRating, volumeVolumeInfo.averageRating) &&
        Objects.equals(this.canonicalVolumeLink, volumeVolumeInfo.canonicalVolumeLink) &&
        Objects.equals(this.categories, volumeVolumeInfo.categories) &&
        Objects.equals(this.comicsContent, volumeVolumeInfo.comicsContent) &&
        Objects.equals(this.contentVersion, volumeVolumeInfo.contentVersion) &&
        Objects.equals(this.description, volumeVolumeInfo.description) &&
        Objects.equals(this.dimensions, volumeVolumeInfo.dimensions) &&
        Objects.equals(this.imageLinks, volumeVolumeInfo.imageLinks) &&
        Objects.equals(this.industryIdentifiers, volumeVolumeInfo.industryIdentifiers) &&
        Objects.equals(this.infoLink, volumeVolumeInfo.infoLink) &&
        Objects.equals(this.language, volumeVolumeInfo.language) &&
        Objects.equals(this.mainCategory, volumeVolumeInfo.mainCategory) &&
        Objects.equals(this.maturityRating, volumeVolumeInfo.maturityRating) &&
        Objects.equals(this.pageCount, volumeVolumeInfo.pageCount) &&
        Objects.equals(this.panelizationSummary, volumeVolumeInfo.panelizationSummary) &&
        Objects.equals(this.previewLink, volumeVolumeInfo.previewLink) &&
        Objects.equals(this.printType, volumeVolumeInfo.printType) &&
        Objects.equals(this.printedPageCount, volumeVolumeInfo.printedPageCount) &&
        Objects.equals(this.publishedDate, volumeVolumeInfo.publishedDate) &&
        Objects.equals(this.publisher, volumeVolumeInfo.publisher) &&
        Objects.equals(this.ratingsCount, volumeVolumeInfo.ratingsCount) &&
        Objects.equals(this.readingModes, volumeVolumeInfo.readingModes) &&
        Objects.equals(this.samplePageCount, volumeVolumeInfo.samplePageCount) &&
        Objects.equals(this.seriesInfo, volumeVolumeInfo.seriesInfo) &&
        Objects.equals(this.subtitle, volumeVolumeInfo.subtitle) &&
        Objects.equals(this.title, volumeVolumeInfo.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAnonLogging, authors, averageRating, canonicalVolumeLink, categories, comicsContent, contentVersion, description, dimensions, imageLinks, industryIdentifiers, infoLink, language, mainCategory, maturityRating, pageCount, panelizationSummary, previewLink, printType, printedPageCount, publishedDate, publisher, ratingsCount, readingModes, samplePageCount, seriesInfo, subtitle, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeVolumeInfo {\n");
    sb.append("    allowAnonLogging: ").append(toIndentedString(allowAnonLogging)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
    sb.append("    canonicalVolumeLink: ").append(toIndentedString(canonicalVolumeLink)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    comicsContent: ").append(toIndentedString(comicsContent)).append("\n");
    sb.append("    contentVersion: ").append(toIndentedString(contentVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    imageLinks: ").append(toIndentedString(imageLinks)).append("\n");
    sb.append("    industryIdentifiers: ").append(toIndentedString(industryIdentifiers)).append("\n");
    sb.append("    infoLink: ").append(toIndentedString(infoLink)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    mainCategory: ").append(toIndentedString(mainCategory)).append("\n");
    sb.append("    maturityRating: ").append(toIndentedString(maturityRating)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    panelizationSummary: ").append(toIndentedString(panelizationSummary)).append("\n");
    sb.append("    previewLink: ").append(toIndentedString(previewLink)).append("\n");
    sb.append("    printType: ").append(toIndentedString(printType)).append("\n");
    sb.append("    printedPageCount: ").append(toIndentedString(printedPageCount)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    ratingsCount: ").append(toIndentedString(ratingsCount)).append("\n");
    sb.append("    readingModes: ").append(toIndentedString(readingModes)).append("\n");
    sb.append("    samplePageCount: ").append(toIndentedString(samplePageCount)).append("\n");
    sb.append("    seriesInfo: ").append(toIndentedString(seriesInfo)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowAnonLogging");
    openapiFields.add("authors");
    openapiFields.add("averageRating");
    openapiFields.add("canonicalVolumeLink");
    openapiFields.add("categories");
    openapiFields.add("comicsContent");
    openapiFields.add("contentVersion");
    openapiFields.add("description");
    openapiFields.add("dimensions");
    openapiFields.add("imageLinks");
    openapiFields.add("industryIdentifiers");
    openapiFields.add("infoLink");
    openapiFields.add("language");
    openapiFields.add("mainCategory");
    openapiFields.add("maturityRating");
    openapiFields.add("pageCount");
    openapiFields.add("panelizationSummary");
    openapiFields.add("previewLink");
    openapiFields.add("printType");
    openapiFields.add("printedPageCount");
    openapiFields.add("publishedDate");
    openapiFields.add("publisher");
    openapiFields.add("ratingsCount");
    openapiFields.add("readingModes");
    openapiFields.add("samplePageCount");
    openapiFields.add("seriesInfo");
    openapiFields.add("subtitle");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeVolumeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeVolumeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeVolumeInfo is not found in the empty JSON string", VolumeVolumeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeVolumeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeVolumeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("authors") != null && !jsonObj.get("authors").isJsonNull() && !jsonObj.get("authors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }
      if ((jsonObj.get("canonicalVolumeLink") != null && !jsonObj.get("canonicalVolumeLink").isJsonNull()) && !jsonObj.get("canonicalVolumeLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalVolumeLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalVolumeLink").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("contentVersion") != null && !jsonObj.get("contentVersion").isJsonNull()) && !jsonObj.get("contentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentVersion").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        VolumeVolumeInfoDimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `imageLinks`
      if (jsonObj.get("imageLinks") != null && !jsonObj.get("imageLinks").isJsonNull()) {
        VolumeVolumeInfoImageLinks.validateJsonElement(jsonObj.get("imageLinks"));
      }
      if (jsonObj.get("industryIdentifiers") != null && !jsonObj.get("industryIdentifiers").isJsonNull()) {
        JsonArray jsonArrayindustryIdentifiers = jsonObj.getAsJsonArray("industryIdentifiers");
        if (jsonArrayindustryIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("industryIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `industryIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("industryIdentifiers").toString()));
          }

          // validate the optional field `industryIdentifiers` (array)
          for (int i = 0; i < jsonArrayindustryIdentifiers.size(); i++) {
            VolumeVolumeInfoIndustryIdentifiersInner.validateJsonElement(jsonArrayindustryIdentifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("infoLink") != null && !jsonObj.get("infoLink").isJsonNull()) && !jsonObj.get("infoLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infoLink").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("mainCategory") != null && !jsonObj.get("mainCategory").isJsonNull()) && !jsonObj.get("mainCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainCategory").toString()));
      }
      if ((jsonObj.get("maturityRating") != null && !jsonObj.get("maturityRating").isJsonNull()) && !jsonObj.get("maturityRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maturityRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maturityRating").toString()));
      }
      // validate the optional field `panelizationSummary`
      if (jsonObj.get("panelizationSummary") != null && !jsonObj.get("panelizationSummary").isJsonNull()) {
        VolumeVolumeInfoPanelizationSummary.validateJsonElement(jsonObj.get("panelizationSummary"));
      }
      if ((jsonObj.get("previewLink") != null && !jsonObj.get("previewLink").isJsonNull()) && !jsonObj.get("previewLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewLink").toString()));
      }
      if ((jsonObj.get("printType") != null && !jsonObj.get("printType").isJsonNull()) && !jsonObj.get("printType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printType").toString()));
      }
      if ((jsonObj.get("publishedDate") != null && !jsonObj.get("publishedDate").isJsonNull()) && !jsonObj.get("publishedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishedDate").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      // validate the optional field `readingModes`
      if (jsonObj.get("readingModes") != null && !jsonObj.get("readingModes").isJsonNull()) {
        VolumeVolumeInfoReadingModes.validateJsonElement(jsonObj.get("readingModes"));
      }
      // validate the optional field `seriesInfo`
      if (jsonObj.get("seriesInfo") != null && !jsonObj.get("seriesInfo").isJsonNull()) {
        Volumeseriesinfo.validateJsonElement(jsonObj.get("seriesInfo"));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeVolumeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeVolumeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeVolumeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeVolumeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeVolumeInfo>() {
           @Override
           public void write(JsonWriter out, VolumeVolumeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeVolumeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeVolumeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeVolumeInfo
   * @throws IOException if the JSON string is invalid with respect to VolumeVolumeInfo
   */
  public static VolumeVolumeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeVolumeInfo.class);
  }

  /**
   * Convert an instance of VolumeVolumeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

