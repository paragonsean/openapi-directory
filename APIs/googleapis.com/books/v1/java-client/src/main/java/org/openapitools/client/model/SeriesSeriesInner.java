/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SeriesSeriesInnerSeriesSubscriptionReleaseInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SeriesSeriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeriesSeriesInner {
  public static final String SERIALIZED_NAME_BANNER_IMAGE_URL = "bannerImageUrl";
  @SerializedName(SERIALIZED_NAME_BANNER_IMAGE_URL)
  private String bannerImageUrl;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_SUBSCRIPTION = "eligibleForSubscription";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_SUBSCRIPTION)
  private Boolean eligibleForSubscription;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_COMPLETE = "isComplete";
  @SerializedName(SERIALIZED_NAME_IS_COMPLETE)
  private Boolean isComplete;

  public static final String SERIALIZED_NAME_SERIES_FORMAT_TYPE = "seriesFormatType";
  @SerializedName(SERIALIZED_NAME_SERIES_FORMAT_TYPE)
  private String seriesFormatType;

  public static final String SERIALIZED_NAME_SERIES_ID = "seriesId";
  @SerializedName(SERIALIZED_NAME_SERIES_ID)
  private String seriesId;

  public static final String SERIALIZED_NAME_SERIES_SUBSCRIPTION_RELEASE_INFO = "seriesSubscriptionReleaseInfo";
  @SerializedName(SERIALIZED_NAME_SERIES_SUBSCRIPTION_RELEASE_INFO)
  private SeriesSeriesInnerSeriesSubscriptionReleaseInfo seriesSubscriptionReleaseInfo;

  public static final String SERIALIZED_NAME_SERIES_TYPE = "seriesType";
  @SerializedName(SERIALIZED_NAME_SERIES_TYPE)
  private String seriesType;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SeriesSeriesInner() {
  }

  public SeriesSeriesInner bannerImageUrl(String bannerImageUrl) {
    this.bannerImageUrl = bannerImageUrl;
    return this;
  }

  /**
   * Get bannerImageUrl
   * @return bannerImageUrl
   */
  @javax.annotation.Nullable
  public String getBannerImageUrl() {
    return bannerImageUrl;
  }

  public void setBannerImageUrl(String bannerImageUrl) {
    this.bannerImageUrl = bannerImageUrl;
  }


  public SeriesSeriesInner eligibleForSubscription(Boolean eligibleForSubscription) {
    this.eligibleForSubscription = eligibleForSubscription;
    return this;
  }

  /**
   * Get eligibleForSubscription
   * @return eligibleForSubscription
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForSubscription() {
    return eligibleForSubscription;
  }

  public void setEligibleForSubscription(Boolean eligibleForSubscription) {
    this.eligibleForSubscription = eligibleForSubscription;
  }


  public SeriesSeriesInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public SeriesSeriesInner isComplete(Boolean isComplete) {
    this.isComplete = isComplete;
    return this;
  }

  /**
   * Get isComplete
   * @return isComplete
   */
  @javax.annotation.Nullable
  public Boolean getIsComplete() {
    return isComplete;
  }

  public void setIsComplete(Boolean isComplete) {
    this.isComplete = isComplete;
  }


  public SeriesSeriesInner seriesFormatType(String seriesFormatType) {
    this.seriesFormatType = seriesFormatType;
    return this;
  }

  /**
   * Get seriesFormatType
   * @return seriesFormatType
   */
  @javax.annotation.Nullable
  public String getSeriesFormatType() {
    return seriesFormatType;
  }

  public void setSeriesFormatType(String seriesFormatType) {
    this.seriesFormatType = seriesFormatType;
  }


  public SeriesSeriesInner seriesId(String seriesId) {
    this.seriesId = seriesId;
    return this;
  }

  /**
   * Get seriesId
   * @return seriesId
   */
  @javax.annotation.Nullable
  public String getSeriesId() {
    return seriesId;
  }

  public void setSeriesId(String seriesId) {
    this.seriesId = seriesId;
  }


  public SeriesSeriesInner seriesSubscriptionReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfo seriesSubscriptionReleaseInfo) {
    this.seriesSubscriptionReleaseInfo = seriesSubscriptionReleaseInfo;
    return this;
  }

  /**
   * Get seriesSubscriptionReleaseInfo
   * @return seriesSubscriptionReleaseInfo
   */
  @javax.annotation.Nullable
  public SeriesSeriesInnerSeriesSubscriptionReleaseInfo getSeriesSubscriptionReleaseInfo() {
    return seriesSubscriptionReleaseInfo;
  }

  public void setSeriesSubscriptionReleaseInfo(SeriesSeriesInnerSeriesSubscriptionReleaseInfo seriesSubscriptionReleaseInfo) {
    this.seriesSubscriptionReleaseInfo = seriesSubscriptionReleaseInfo;
  }


  public SeriesSeriesInner seriesType(String seriesType) {
    this.seriesType = seriesType;
    return this;
  }

  /**
   * Get seriesType
   * @return seriesType
   */
  @javax.annotation.Nullable
  public String getSeriesType() {
    return seriesType;
  }

  public void setSeriesType(String seriesType) {
    this.seriesType = seriesType;
  }


  public SeriesSeriesInner subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public SeriesSeriesInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeriesSeriesInner seriesSeriesInner = (SeriesSeriesInner) o;
    return Objects.equals(this.bannerImageUrl, seriesSeriesInner.bannerImageUrl) &&
        Objects.equals(this.eligibleForSubscription, seriesSeriesInner.eligibleForSubscription) &&
        Objects.equals(this.imageUrl, seriesSeriesInner.imageUrl) &&
        Objects.equals(this.isComplete, seriesSeriesInner.isComplete) &&
        Objects.equals(this.seriesFormatType, seriesSeriesInner.seriesFormatType) &&
        Objects.equals(this.seriesId, seriesSeriesInner.seriesId) &&
        Objects.equals(this.seriesSubscriptionReleaseInfo, seriesSeriesInner.seriesSubscriptionReleaseInfo) &&
        Objects.equals(this.seriesType, seriesSeriesInner.seriesType) &&
        Objects.equals(this.subscriptionId, seriesSeriesInner.subscriptionId) &&
        Objects.equals(this.title, seriesSeriesInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bannerImageUrl, eligibleForSubscription, imageUrl, isComplete, seriesFormatType, seriesId, seriesSubscriptionReleaseInfo, seriesType, subscriptionId, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeriesSeriesInner {\n");
    sb.append("    bannerImageUrl: ").append(toIndentedString(bannerImageUrl)).append("\n");
    sb.append("    eligibleForSubscription: ").append(toIndentedString(eligibleForSubscription)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isComplete: ").append(toIndentedString(isComplete)).append("\n");
    sb.append("    seriesFormatType: ").append(toIndentedString(seriesFormatType)).append("\n");
    sb.append("    seriesId: ").append(toIndentedString(seriesId)).append("\n");
    sb.append("    seriesSubscriptionReleaseInfo: ").append(toIndentedString(seriesSubscriptionReleaseInfo)).append("\n");
    sb.append("    seriesType: ").append(toIndentedString(seriesType)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bannerImageUrl");
    openapiFields.add("eligibleForSubscription");
    openapiFields.add("imageUrl");
    openapiFields.add("isComplete");
    openapiFields.add("seriesFormatType");
    openapiFields.add("seriesId");
    openapiFields.add("seriesSubscriptionReleaseInfo");
    openapiFields.add("seriesType");
    openapiFields.add("subscriptionId");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeriesSeriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeriesSeriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeriesSeriesInner is not found in the empty JSON string", SeriesSeriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeriesSeriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeriesSeriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bannerImageUrl") != null && !jsonObj.get("bannerImageUrl").isJsonNull()) && !jsonObj.get("bannerImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerImageUrl").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("seriesFormatType") != null && !jsonObj.get("seriesFormatType").isJsonNull()) && !jsonObj.get("seriesFormatType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesFormatType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesFormatType").toString()));
      }
      if ((jsonObj.get("seriesId") != null && !jsonObj.get("seriesId").isJsonNull()) && !jsonObj.get("seriesId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesId").toString()));
      }
      // validate the optional field `seriesSubscriptionReleaseInfo`
      if (jsonObj.get("seriesSubscriptionReleaseInfo") != null && !jsonObj.get("seriesSubscriptionReleaseInfo").isJsonNull()) {
        SeriesSeriesInnerSeriesSubscriptionReleaseInfo.validateJsonElement(jsonObj.get("seriesSubscriptionReleaseInfo"));
      }
      if ((jsonObj.get("seriesType") != null && !jsonObj.get("seriesType").isJsonNull()) && !jsonObj.get("seriesType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesType").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeriesSeriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeriesSeriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeriesSeriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeriesSeriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SeriesSeriesInner>() {
           @Override
           public void write(JsonWriter out, SeriesSeriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeriesSeriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeriesSeriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeriesSeriesInner
   * @throws IOException if the JSON string is invalid with respect to SeriesSeriesInner
   */
  public static SeriesSeriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeriesSeriesInner.class);
  }

  /**
   * Convert an instance of SeriesSeriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

