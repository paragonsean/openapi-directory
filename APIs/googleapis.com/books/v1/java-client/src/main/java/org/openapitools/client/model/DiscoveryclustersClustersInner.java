/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiscoveryclustersClustersInnerBannerWithContentContainer;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscoveryclustersClustersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoveryclustersClustersInner {
  public static final String SERIALIZED_NAME_BANNER_WITH_CONTENT_CONTAINER = "banner_with_content_container";
  @SerializedName(SERIALIZED_NAME_BANNER_WITH_CONTENT_CONTAINER)
  private DiscoveryclustersClustersInnerBannerWithContentContainer bannerWithContentContainer;

  public static final String SERIALIZED_NAME_SUB_TITLE = "subTitle";
  @SerializedName(SERIALIZED_NAME_SUB_TITLE)
  private String subTitle;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_VOLUMES = "totalVolumes";
  @SerializedName(SERIALIZED_NAME_TOTAL_VOLUMES)
  private Integer totalVolumes;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volume> volumes = new ArrayList<>();

  public DiscoveryclustersClustersInner() {
  }

  public DiscoveryclustersClustersInner bannerWithContentContainer(DiscoveryclustersClustersInnerBannerWithContentContainer bannerWithContentContainer) {
    this.bannerWithContentContainer = bannerWithContentContainer;
    return this;
  }

  /**
   * Get bannerWithContentContainer
   * @return bannerWithContentContainer
   */
  @javax.annotation.Nullable
  public DiscoveryclustersClustersInnerBannerWithContentContainer getBannerWithContentContainer() {
    return bannerWithContentContainer;
  }

  public void setBannerWithContentContainer(DiscoveryclustersClustersInnerBannerWithContentContainer bannerWithContentContainer) {
    this.bannerWithContentContainer = bannerWithContentContainer;
  }


  public DiscoveryclustersClustersInner subTitle(String subTitle) {
    this.subTitle = subTitle;
    return this;
  }

  /**
   * Get subTitle
   * @return subTitle
   */
  @javax.annotation.Nullable
  public String getSubTitle() {
    return subTitle;
  }

  public void setSubTitle(String subTitle) {
    this.subTitle = subTitle;
  }


  public DiscoveryclustersClustersInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DiscoveryclustersClustersInner totalVolumes(Integer totalVolumes) {
    this.totalVolumes = totalVolumes;
    return this;
  }

  /**
   * Get totalVolumes
   * @return totalVolumes
   */
  @javax.annotation.Nullable
  public Integer getTotalVolumes() {
    return totalVolumes;
  }

  public void setTotalVolumes(Integer totalVolumes) {
    this.totalVolumes = totalVolumes;
  }


  public DiscoveryclustersClustersInner uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public DiscoveryclustersClustersInner volumes(List<Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public DiscoveryclustersClustersInner addVolumesItem(Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<Volume> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryclustersClustersInner discoveryclustersClustersInner = (DiscoveryclustersClustersInner) o;
    return Objects.equals(this.bannerWithContentContainer, discoveryclustersClustersInner.bannerWithContentContainer) &&
        Objects.equals(this.subTitle, discoveryclustersClustersInner.subTitle) &&
        Objects.equals(this.title, discoveryclustersClustersInner.title) &&
        Objects.equals(this.totalVolumes, discoveryclustersClustersInner.totalVolumes) &&
        Objects.equals(this.uid, discoveryclustersClustersInner.uid) &&
        Objects.equals(this.volumes, discoveryclustersClustersInner.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bannerWithContentContainer, subTitle, title, totalVolumes, uid, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryclustersClustersInner {\n");
    sb.append("    bannerWithContentContainer: ").append(toIndentedString(bannerWithContentContainer)).append("\n");
    sb.append("    subTitle: ").append(toIndentedString(subTitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalVolumes: ").append(toIndentedString(totalVolumes)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("banner_with_content_container");
    openapiFields.add("subTitle");
    openapiFields.add("title");
    openapiFields.add("totalVolumes");
    openapiFields.add("uid");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoveryclustersClustersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoveryclustersClustersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoveryclustersClustersInner is not found in the empty JSON string", DiscoveryclustersClustersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoveryclustersClustersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoveryclustersClustersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `banner_with_content_container`
      if (jsonObj.get("banner_with_content_container") != null && !jsonObj.get("banner_with_content_container").isJsonNull()) {
        DiscoveryclustersClustersInnerBannerWithContentContainer.validateJsonElement(jsonObj.get("banner_with_content_container"));
      }
      if ((jsonObj.get("subTitle") != null && !jsonObj.get("subTitle").isJsonNull()) && !jsonObj.get("subTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subTitle").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoveryclustersClustersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoveryclustersClustersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoveryclustersClustersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoveryclustersClustersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoveryclustersClustersInner>() {
           @Override
           public void write(JsonWriter out, DiscoveryclustersClustersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoveryclustersClustersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoveryclustersClustersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoveryclustersClustersInner
   * @throws IOException if the JSON string is invalid with respect to DiscoveryclustersClustersInner
   */
  public static DiscoveryclustersClustersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoveryclustersClustersInner.class);
  }

  /**
   * Convert an instance of DiscoveryclustersClustersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

