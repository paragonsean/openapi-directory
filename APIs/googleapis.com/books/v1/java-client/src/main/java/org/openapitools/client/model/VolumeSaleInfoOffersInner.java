/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VolumeSaleInfoOffersInnerListPrice;
import org.openapitools.client.model.VolumeSaleInfoOffersInnerRentalDuration;
import org.openapitools.client.model.VolumeSaleInfoOffersInnerRetailPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VolumeSaleInfoOffersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeSaleInfoOffersInner {
  public static final String SERIALIZED_NAME_FINSKY_OFFER_TYPE = "finskyOfferType";
  @SerializedName(SERIALIZED_NAME_FINSKY_OFFER_TYPE)
  private Integer finskyOfferType;

  public static final String SERIALIZED_NAME_GIFTABLE = "giftable";
  @SerializedName(SERIALIZED_NAME_GIFTABLE)
  private Boolean giftable;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private VolumeSaleInfoOffersInnerListPrice listPrice;

  public static final String SERIALIZED_NAME_RENTAL_DURATION = "rentalDuration";
  @SerializedName(SERIALIZED_NAME_RENTAL_DURATION)
  private VolumeSaleInfoOffersInnerRentalDuration rentalDuration;

  public static final String SERIALIZED_NAME_RETAIL_PRICE = "retailPrice";
  @SerializedName(SERIALIZED_NAME_RETAIL_PRICE)
  private VolumeSaleInfoOffersInnerRetailPrice retailPrice;

  public VolumeSaleInfoOffersInner() {
  }

  public VolumeSaleInfoOffersInner finskyOfferType(Integer finskyOfferType) {
    this.finskyOfferType = finskyOfferType;
    return this;
  }

  /**
   * The finsky offer type (e.g., PURCHASE&#x3D;0 RENTAL&#x3D;3)
   * @return finskyOfferType
   */
  @javax.annotation.Nullable
  public Integer getFinskyOfferType() {
    return finskyOfferType;
  }

  public void setFinskyOfferType(Integer finskyOfferType) {
    this.finskyOfferType = finskyOfferType;
  }


  public VolumeSaleInfoOffersInner giftable(Boolean giftable) {
    this.giftable = giftable;
    return this;
  }

  /**
   * Indicates whether the offer is giftable.
   * @return giftable
   */
  @javax.annotation.Nullable
  public Boolean getGiftable() {
    return giftable;
  }

  public void setGiftable(Boolean giftable) {
    this.giftable = giftable;
  }


  public VolumeSaleInfoOffersInner listPrice(VolumeSaleInfoOffersInnerListPrice listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Get listPrice
   * @return listPrice
   */
  @javax.annotation.Nullable
  public VolumeSaleInfoOffersInnerListPrice getListPrice() {
    return listPrice;
  }

  public void setListPrice(VolumeSaleInfoOffersInnerListPrice listPrice) {
    this.listPrice = listPrice;
  }


  public VolumeSaleInfoOffersInner rentalDuration(VolumeSaleInfoOffersInnerRentalDuration rentalDuration) {
    this.rentalDuration = rentalDuration;
    return this;
  }

  /**
   * Get rentalDuration
   * @return rentalDuration
   */
  @javax.annotation.Nullable
  public VolumeSaleInfoOffersInnerRentalDuration getRentalDuration() {
    return rentalDuration;
  }

  public void setRentalDuration(VolumeSaleInfoOffersInnerRentalDuration rentalDuration) {
    this.rentalDuration = rentalDuration;
  }


  public VolumeSaleInfoOffersInner retailPrice(VolumeSaleInfoOffersInnerRetailPrice retailPrice) {
    this.retailPrice = retailPrice;
    return this;
  }

  /**
   * Get retailPrice
   * @return retailPrice
   */
  @javax.annotation.Nullable
  public VolumeSaleInfoOffersInnerRetailPrice getRetailPrice() {
    return retailPrice;
  }

  public void setRetailPrice(VolumeSaleInfoOffersInnerRetailPrice retailPrice) {
    this.retailPrice = retailPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeSaleInfoOffersInner volumeSaleInfoOffersInner = (VolumeSaleInfoOffersInner) o;
    return Objects.equals(this.finskyOfferType, volumeSaleInfoOffersInner.finskyOfferType) &&
        Objects.equals(this.giftable, volumeSaleInfoOffersInner.giftable) &&
        Objects.equals(this.listPrice, volumeSaleInfoOffersInner.listPrice) &&
        Objects.equals(this.rentalDuration, volumeSaleInfoOffersInner.rentalDuration) &&
        Objects.equals(this.retailPrice, volumeSaleInfoOffersInner.retailPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finskyOfferType, giftable, listPrice, rentalDuration, retailPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeSaleInfoOffersInner {\n");
    sb.append("    finskyOfferType: ").append(toIndentedString(finskyOfferType)).append("\n");
    sb.append("    giftable: ").append(toIndentedString(giftable)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    rentalDuration: ").append(toIndentedString(rentalDuration)).append("\n");
    sb.append("    retailPrice: ").append(toIndentedString(retailPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("finskyOfferType");
    openapiFields.add("giftable");
    openapiFields.add("listPrice");
    openapiFields.add("rentalDuration");
    openapiFields.add("retailPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeSaleInfoOffersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeSaleInfoOffersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeSaleInfoOffersInner is not found in the empty JSON string", VolumeSaleInfoOffersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeSaleInfoOffersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeSaleInfoOffersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `listPrice`
      if (jsonObj.get("listPrice") != null && !jsonObj.get("listPrice").isJsonNull()) {
        VolumeSaleInfoOffersInnerListPrice.validateJsonElement(jsonObj.get("listPrice"));
      }
      // validate the optional field `rentalDuration`
      if (jsonObj.get("rentalDuration") != null && !jsonObj.get("rentalDuration").isJsonNull()) {
        VolumeSaleInfoOffersInnerRentalDuration.validateJsonElement(jsonObj.get("rentalDuration"));
      }
      // validate the optional field `retailPrice`
      if (jsonObj.get("retailPrice") != null && !jsonObj.get("retailPrice").isJsonNull()) {
        VolumeSaleInfoOffersInnerRetailPrice.validateJsonElement(jsonObj.get("retailPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeSaleInfoOffersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeSaleInfoOffersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeSaleInfoOffersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeSaleInfoOffersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeSaleInfoOffersInner>() {
           @Override
           public void write(JsonWriter out, VolumeSaleInfoOffersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeSaleInfoOffersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeSaleInfoOffersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeSaleInfoOffersInner
   * @throws IOException if the JSON string is invalid with respect to VolumeSaleInfoOffersInner
   */
  public static VolumeSaleInfoOffersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeSaleInfoOffersInner.class);
  }

  /**
   * Convert an instance of VolumeSaleInfoOffersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

