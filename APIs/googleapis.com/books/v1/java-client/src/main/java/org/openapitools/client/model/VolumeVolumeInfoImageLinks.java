/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of image links for all the sizes that are available. (In LITE projection.)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeVolumeInfoImageLinks {
  public static final String SERIALIZED_NAME_EXTRA_LARGE = "extraLarge";
  @SerializedName(SERIALIZED_NAME_EXTRA_LARGE)
  private String extraLarge;

  public static final String SERIALIZED_NAME_LARGE = "large";
  @SerializedName(SERIALIZED_NAME_LARGE)
  private String large;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_SMALL = "small";
  @SerializedName(SERIALIZED_NAME_SMALL)
  private String small;

  public static final String SERIALIZED_NAME_SMALL_THUMBNAIL = "smallThumbnail";
  @SerializedName(SERIALIZED_NAME_SMALL_THUMBNAIL)
  private String smallThumbnail;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public VolumeVolumeInfoImageLinks() {
  }

  public VolumeVolumeInfoImageLinks extraLarge(String extraLarge) {
    this.extraLarge = extraLarge;
    return this;
  }

  /**
   * Image link for extra large size (width of ~1280 pixels). (In LITE projection)
   * @return extraLarge
   */
  @javax.annotation.Nullable
  public String getExtraLarge() {
    return extraLarge;
  }

  public void setExtraLarge(String extraLarge) {
    this.extraLarge = extraLarge;
  }


  public VolumeVolumeInfoImageLinks large(String large) {
    this.large = large;
    return this;
  }

  /**
   * Image link for large size (width of ~800 pixels). (In LITE projection)
   * @return large
   */
  @javax.annotation.Nullable
  public String getLarge() {
    return large;
  }

  public void setLarge(String large) {
    this.large = large;
  }


  public VolumeVolumeInfoImageLinks medium(String medium) {
    this.medium = medium;
    return this;
  }

  /**
   * Image link for medium size (width of ~575 pixels). (In LITE projection)
   * @return medium
   */
  @javax.annotation.Nullable
  public String getMedium() {
    return medium;
  }

  public void setMedium(String medium) {
    this.medium = medium;
  }


  public VolumeVolumeInfoImageLinks small(String small) {
    this.small = small;
    return this;
  }

  /**
   * Image link for small size (width of ~300 pixels). (In LITE projection)
   * @return small
   */
  @javax.annotation.Nullable
  public String getSmall() {
    return small;
  }

  public void setSmall(String small) {
    this.small = small;
  }


  public VolumeVolumeInfoImageLinks smallThumbnail(String smallThumbnail) {
    this.smallThumbnail = smallThumbnail;
    return this;
  }

  /**
   * Image link for small thumbnail size (width of ~80 pixels). (In LITE projection)
   * @return smallThumbnail
   */
  @javax.annotation.Nullable
  public String getSmallThumbnail() {
    return smallThumbnail;
  }

  public void setSmallThumbnail(String smallThumbnail) {
    this.smallThumbnail = smallThumbnail;
  }


  public VolumeVolumeInfoImageLinks thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Image link for thumbnail size (width of ~128 pixels). (In LITE projection)
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeVolumeInfoImageLinks volumeVolumeInfoImageLinks = (VolumeVolumeInfoImageLinks) o;
    return Objects.equals(this.extraLarge, volumeVolumeInfoImageLinks.extraLarge) &&
        Objects.equals(this.large, volumeVolumeInfoImageLinks.large) &&
        Objects.equals(this.medium, volumeVolumeInfoImageLinks.medium) &&
        Objects.equals(this.small, volumeVolumeInfoImageLinks.small) &&
        Objects.equals(this.smallThumbnail, volumeVolumeInfoImageLinks.smallThumbnail) &&
        Objects.equals(this.thumbnail, volumeVolumeInfoImageLinks.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extraLarge, large, medium, small, smallThumbnail, thumbnail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeVolumeInfoImageLinks {\n");
    sb.append("    extraLarge: ").append(toIndentedString(extraLarge)).append("\n");
    sb.append("    large: ").append(toIndentedString(large)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    smallThumbnail: ").append(toIndentedString(smallThumbnail)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extraLarge");
    openapiFields.add("large");
    openapiFields.add("medium");
    openapiFields.add("small");
    openapiFields.add("smallThumbnail");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeVolumeInfoImageLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeVolumeInfoImageLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeVolumeInfoImageLinks is not found in the empty JSON string", VolumeVolumeInfoImageLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeVolumeInfoImageLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeVolumeInfoImageLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("extraLarge") != null && !jsonObj.get("extraLarge").isJsonNull()) && !jsonObj.get("extraLarge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraLarge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraLarge").toString()));
      }
      if ((jsonObj.get("large") != null && !jsonObj.get("large").isJsonNull()) && !jsonObj.get("large").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if ((jsonObj.get("small") != null && !jsonObj.get("small").isJsonNull()) && !jsonObj.get("small").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small").toString()));
      }
      if ((jsonObj.get("smallThumbnail") != null && !jsonObj.get("smallThumbnail").isJsonNull()) && !jsonObj.get("smallThumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallThumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallThumbnail").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeVolumeInfoImageLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeVolumeInfoImageLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeVolumeInfoImageLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeVolumeInfoImageLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeVolumeInfoImageLinks>() {
           @Override
           public void write(JsonWriter out, VolumeVolumeInfoImageLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeVolumeInfoImageLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeVolumeInfoImageLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeVolumeInfoImageLinks
   * @throws IOException if the JSON string is invalid with respect to VolumeVolumeInfoImageLinks
   */
  public static VolumeVolumeInfoImageLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeVolumeInfoImageLinks.class);
  }

  /**
   * Convert an instance of VolumeVolumeInfoImageLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

