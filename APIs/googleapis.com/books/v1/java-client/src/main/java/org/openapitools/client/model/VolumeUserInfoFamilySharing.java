/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the ability to share with the family.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeUserInfoFamilySharing {
  public static final String SERIALIZED_NAME_FAMILY_ROLE = "familyRole";
  @SerializedName(SERIALIZED_NAME_FAMILY_ROLE)
  private String familyRole;

  public static final String SERIALIZED_NAME_IS_SHARING_ALLOWED = "isSharingAllowed";
  @SerializedName(SERIALIZED_NAME_IS_SHARING_ALLOWED)
  private Boolean isSharingAllowed;

  public static final String SERIALIZED_NAME_IS_SHARING_DISABLED_BY_FOP = "isSharingDisabledByFop";
  @SerializedName(SERIALIZED_NAME_IS_SHARING_DISABLED_BY_FOP)
  private Boolean isSharingDisabledByFop;

  public VolumeUserInfoFamilySharing() {
  }

  public VolumeUserInfoFamilySharing familyRole(String familyRole) {
    this.familyRole = familyRole;
    return this;
  }

  /**
   * The role of the user in the family.
   * @return familyRole
   */
  @javax.annotation.Nullable
  public String getFamilyRole() {
    return familyRole;
  }

  public void setFamilyRole(String familyRole) {
    this.familyRole = familyRole;
  }


  public VolumeUserInfoFamilySharing isSharingAllowed(Boolean isSharingAllowed) {
    this.isSharingAllowed = isSharingAllowed;
    return this;
  }

  /**
   * Whether or not this volume can be shared with the family by the user. This includes sharing eligibility of both the volume and the user. If the value is true, the user can initiate a family sharing action.
   * @return isSharingAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsSharingAllowed() {
    return isSharingAllowed;
  }

  public void setIsSharingAllowed(Boolean isSharingAllowed) {
    this.isSharingAllowed = isSharingAllowed;
  }


  public VolumeUserInfoFamilySharing isSharingDisabledByFop(Boolean isSharingDisabledByFop) {
    this.isSharingDisabledByFop = isSharingDisabledByFop;
    return this;
  }

  /**
   * Whether or not sharing this volume is temporarily disabled due to issues with the Family Wallet.
   * @return isSharingDisabledByFop
   */
  @javax.annotation.Nullable
  public Boolean getIsSharingDisabledByFop() {
    return isSharingDisabledByFop;
  }

  public void setIsSharingDisabledByFop(Boolean isSharingDisabledByFop) {
    this.isSharingDisabledByFop = isSharingDisabledByFop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeUserInfoFamilySharing volumeUserInfoFamilySharing = (VolumeUserInfoFamilySharing) o;
    return Objects.equals(this.familyRole, volumeUserInfoFamilySharing.familyRole) &&
        Objects.equals(this.isSharingAllowed, volumeUserInfoFamilySharing.isSharingAllowed) &&
        Objects.equals(this.isSharingDisabledByFop, volumeUserInfoFamilySharing.isSharingDisabledByFop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(familyRole, isSharingAllowed, isSharingDisabledByFop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeUserInfoFamilySharing {\n");
    sb.append("    familyRole: ").append(toIndentedString(familyRole)).append("\n");
    sb.append("    isSharingAllowed: ").append(toIndentedString(isSharingAllowed)).append("\n");
    sb.append("    isSharingDisabledByFop: ").append(toIndentedString(isSharingDisabledByFop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("familyRole");
    openapiFields.add("isSharingAllowed");
    openapiFields.add("isSharingDisabledByFop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeUserInfoFamilySharing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeUserInfoFamilySharing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeUserInfoFamilySharing is not found in the empty JSON string", VolumeUserInfoFamilySharing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeUserInfoFamilySharing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeUserInfoFamilySharing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("familyRole") != null && !jsonObj.get("familyRole").isJsonNull()) && !jsonObj.get("familyRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeUserInfoFamilySharing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeUserInfoFamilySharing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeUserInfoFamilySharing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeUserInfoFamilySharing.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeUserInfoFamilySharing>() {
           @Override
           public void write(JsonWriter out, VolumeUserInfoFamilySharing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeUserInfoFamilySharing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeUserInfoFamilySharing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeUserInfoFamilySharing
   * @throws IOException if the JSON string is invalid with respect to VolumeUserInfoFamilySharing
   */
  public static VolumeUserInfoFamilySharing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeUserInfoFamilySharing.class);
  }

  /**
   * Convert an instance of VolumeUserInfoFamilySharing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

