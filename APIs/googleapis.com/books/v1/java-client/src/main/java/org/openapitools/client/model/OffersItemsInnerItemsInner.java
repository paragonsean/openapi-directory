/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OffersItemsInnerItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:01.065249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OffersItemsInnerItemsInner {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CANONICAL_VOLUME_LINK = "canonicalVolumeLink";
  @SerializedName(SERIALIZED_NAME_CANONICAL_VOLUME_LINK)
  private String canonicalVolumeLink;

  public static final String SERIALIZED_NAME_COVER_URL = "coverUrl";
  @SerializedName(SERIALIZED_NAME_COVER_URL)
  private String coverUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public OffersItemsInnerItemsInner() {
  }

  public OffersItemsInnerItemsInner author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public OffersItemsInnerItemsInner canonicalVolumeLink(String canonicalVolumeLink) {
    this.canonicalVolumeLink = canonicalVolumeLink;
    return this;
  }

  /**
   * Get canonicalVolumeLink
   * @return canonicalVolumeLink
   */
  @javax.annotation.Nullable
  public String getCanonicalVolumeLink() {
    return canonicalVolumeLink;
  }

  public void setCanonicalVolumeLink(String canonicalVolumeLink) {
    this.canonicalVolumeLink = canonicalVolumeLink;
  }


  public OffersItemsInnerItemsInner coverUrl(String coverUrl) {
    this.coverUrl = coverUrl;
    return this;
  }

  /**
   * Get coverUrl
   * @return coverUrl
   */
  @javax.annotation.Nullable
  public String getCoverUrl() {
    return coverUrl;
  }

  public void setCoverUrl(String coverUrl) {
    this.coverUrl = coverUrl;
  }


  public OffersItemsInnerItemsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OffersItemsInnerItemsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public OffersItemsInnerItemsInner volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Get volumeId
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OffersItemsInnerItemsInner offersItemsInnerItemsInner = (OffersItemsInnerItemsInner) o;
    return Objects.equals(this.author, offersItemsInnerItemsInner.author) &&
        Objects.equals(this.canonicalVolumeLink, offersItemsInnerItemsInner.canonicalVolumeLink) &&
        Objects.equals(this.coverUrl, offersItemsInnerItemsInner.coverUrl) &&
        Objects.equals(this.description, offersItemsInnerItemsInner.description) &&
        Objects.equals(this.title, offersItemsInnerItemsInner.title) &&
        Objects.equals(this.volumeId, offersItemsInnerItemsInner.volumeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, canonicalVolumeLink, coverUrl, description, title, volumeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OffersItemsInnerItemsInner {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    canonicalVolumeLink: ").append(toIndentedString(canonicalVolumeLink)).append("\n");
    sb.append("    coverUrl: ").append(toIndentedString(coverUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("canonicalVolumeLink");
    openapiFields.add("coverUrl");
    openapiFields.add("description");
    openapiFields.add("title");
    openapiFields.add("volumeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OffersItemsInnerItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OffersItemsInnerItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OffersItemsInnerItemsInner is not found in the empty JSON string", OffersItemsInnerItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OffersItemsInnerItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OffersItemsInnerItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("canonicalVolumeLink") != null && !jsonObj.get("canonicalVolumeLink").isJsonNull()) && !jsonObj.get("canonicalVolumeLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalVolumeLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalVolumeLink").toString()));
      }
      if ((jsonObj.get("coverUrl") != null && !jsonObj.get("coverUrl").isJsonNull()) && !jsonObj.get("coverUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverUrl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OffersItemsInnerItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OffersItemsInnerItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OffersItemsInnerItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OffersItemsInnerItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OffersItemsInnerItemsInner>() {
           @Override
           public void write(JsonWriter out, OffersItemsInnerItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OffersItemsInnerItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OffersItemsInnerItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OffersItemsInnerItemsInner
   * @throws IOException if the JSON string is invalid with respect to OffersItemsInnerItemsInner
   */
  public static OffersItemsInnerItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OffersItemsInnerItemsInner.class);
  }

  /**
   * Convert an instance of OffersItemsInnerItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

