/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DownloadAccesses;
import org.openapitools.client.model.RequestAccessData;
import org.openapitools.client.model.Usersettings;
import org.openapitools.client.model.Volumes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyconfigApi
 */
@Disabled
public class MyconfigApiTest {

    private final MyconfigApi api = new MyconfigApi();

    /**
     * Gets the current settings for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMyconfigGetUserSettingsTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        Usersettings response = api.booksMyconfigGetUserSettings($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country);
        // TODO: test validations
    }

    /**
     * Release downloaded content access restriction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMyconfigReleaseDownloadAccessTest() throws ApiException {
        String cpksver = null;
        List<String> volumeIds = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locale = null;
        String source = null;
        DownloadAccesses response = api.booksMyconfigReleaseDownloadAccess(cpksver, volumeIds, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source);
        // TODO: test validations
    }

    /**
     * Request concurrent and download access restrictions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMyconfigRequestAccessTest() throws ApiException {
        String cpksver = null;
        String nonce = null;
        String source = null;
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String licenseTypes = null;
        String locale = null;
        RequestAccessData response = api.booksMyconfigRequestAccess(cpksver, nonce, source, volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, licenseTypes, locale);
        // TODO: test validations
    }

    /**
     * Request downloaded content access for specified volumes on the My eBooks shelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMyconfigSyncVolumeLicensesTest() throws ApiException {
        String cpksver = null;
        String nonce = null;
        String source = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> features = null;
        Boolean includeNonComicsSeries = null;
        String locale = null;
        Boolean showPreorders = null;
        List<String> volumeIds = null;
        Volumes response = api.booksMyconfigSyncVolumeLicenses(cpksver, nonce, source, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, features, includeNonComicsSeries, locale, showPreorders, volumeIds);
        // TODO: test validations
    }

    /**
     * Sets the settings for the user. If a sub-object is specified, it will overwrite the existing sub-object stored in the server. Unspecified sub-objects will retain the existing value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMyconfigUpdateUserSettingsTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Usersettings usersettings = null;
        Usersettings response = api.booksMyconfigUpdateUserSettings($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, usersettings);
        // TODO: test validations
    }

}
