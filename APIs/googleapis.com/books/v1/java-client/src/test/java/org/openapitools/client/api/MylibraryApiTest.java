/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.Annotations;
import org.openapitools.client.model.AnnotationsSummary;
import org.openapitools.client.model.Bookshelf;
import org.openapitools.client.model.Bookshelves;
import org.openapitools.client.model.ReadingPosition;
import org.openapitools.client.model.Volumes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MylibraryApi
 */
@Disabled
public class MylibraryApiTest {

    private final MylibraryApi api = new MylibraryApi();

    /**
     * Deletes an annotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryAnnotationsDeleteTest() throws ApiException {
        String annotationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Object response = api.booksMylibraryAnnotationsDelete(annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Inserts a new annotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryAnnotationsInsertTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String annotationId = null;
        String country = null;
        Boolean showOnlySummaryInResponse = null;
        String source = null;
        Annotation annotation = null;
        Annotation response = api.booksMylibraryAnnotationsInsert($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationId, country, showOnlySummaryInResponse, source, annotation);
        // TODO: test validations
    }

    /**
     * Retrieves a list of annotations, possibly filtered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryAnnotationsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String contentVersion = null;
        String layerId = null;
        List<String> layerIds = null;
        Integer maxResults = null;
        String pageToken = null;
        Boolean showDeleted = null;
        String source = null;
        String updatedMax = null;
        String updatedMin = null;
        String volumeId = null;
        Annotations response = api.booksMylibraryAnnotationsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, layerId, layerIds, maxResults, pageToken, showDeleted, source, updatedMax, updatedMin, volumeId);
        // TODO: test validations
    }

    /**
     * Gets the summary of specified layers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryAnnotationsSummaryTest() throws ApiException {
        List<String> layerIds = null;
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        AnnotationsSummary response = api.booksMylibraryAnnotationsSummary(layerIds, volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Updates an existing annotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryAnnotationsUpdateTest() throws ApiException {
        String annotationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Annotation annotation = null;
        Annotation response = api.booksMylibraryAnnotationsUpdate(annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source, annotation);
        // TODO: test validations
    }

    /**
     * Adds a volume to a bookshelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesAddVolumeTest() throws ApiException {
        String shelf = null;
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String reason = null;
        String source = null;
        Object response = api.booksMylibraryBookshelvesAddVolume(shelf, volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reason, source);
        // TODO: test validations
    }

    /**
     * Clears all volumes from a bookshelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesClearVolumesTest() throws ApiException {
        String shelf = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Object response = api.booksMylibraryBookshelvesClearVolumes(shelf, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for a specific bookshelf belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesGetTest() throws ApiException {
        String shelf = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Bookshelf response = api.booksMylibraryBookshelvesGet(shelf, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Retrieves a list of bookshelves belonging to the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Bookshelves response = api.booksMylibraryBookshelvesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Moves a volume within a bookshelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesMoveVolumeTest() throws ApiException {
        String shelf = null;
        String volumeId = null;
        Integer volumePosition = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Object response = api.booksMylibraryBookshelvesMoveVolume(shelf, volumeId, volumePosition, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source);
        // TODO: test validations
    }

    /**
     * Removes a volume from a bookshelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesRemoveVolumeTest() throws ApiException {
        String shelf = null;
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String reason = null;
        String source = null;
        Object response = api.booksMylibraryBookshelvesRemoveVolume(shelf, volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reason, source);
        // TODO: test validations
    }

    /**
     * Gets volume information for volumes on a bookshelf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryBookshelvesVolumesListTest() throws ApiException {
        String shelf = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        Integer maxResults = null;
        String projection = null;
        String q = null;
        Boolean showPreorders = null;
        String source = null;
        Integer startIndex = null;
        Volumes response = api.booksMylibraryBookshelvesVolumesList(shelf, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country, maxResults, projection, q, showPreorders, source, startIndex);
        // TODO: test validations
    }

    /**
     * Retrieves my reading position information for a volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryReadingpositionsGetTest() throws ApiException {
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String contentVersion = null;
        String source = null;
        ReadingPosition response = api.booksMylibraryReadingpositionsGet(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source);
        // TODO: test validations
    }

    /**
     * Sets my reading position information for a volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksMylibraryReadingpositionsSetPositionTest() throws ApiException {
        String volumeId = null;
        String position = null;
        String timestamp = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String action = null;
        String contentVersion = null;
        String deviceCookie = null;
        String source = null;
        Object response = api.booksMylibraryReadingpositionsSetPosition(volumeId, position, timestamp, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, action, contentVersion, deviceCookie, source);
        // TODO: test validations
    }

}
