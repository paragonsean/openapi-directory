/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BooksVolumesRecommendedRateResponse;
import org.openapitools.client.model.Volume;
import org.openapitools.client.model.Volumes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VolumesApi
 */
@Disabled
public class VolumesApiTest {

    private final VolumesApi api = new VolumesApi();

    /**
     * Return a list of associated books.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesAssociatedListTest() throws ApiException {
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String association = null;
        String locale = null;
        String maxAllowedMaturityRating = null;
        String source = null;
        Volumes response = api.booksVolumesAssociatedList(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, association, locale, maxAllowedMaturityRating, source);
        // TODO: test validations
    }

    /**
     * Gets volume information for a single volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesGetTest() throws ApiException {
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        Boolean includeNonComicsSeries = null;
        String partner = null;
        String projection = null;
        String source = null;
        Boolean userLibraryConsistentRead = null;
        Volume response = api.booksVolumesGet(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country, includeNonComicsSeries, partner, projection, source, userLibraryConsistentRead);
        // TODO: test validations
    }

    /**
     * Performs a book search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesListTest() throws ApiException {
        String q = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String download = null;
        String filter = null;
        String langRestrict = null;
        String libraryRestrict = null;
        String maxAllowedMaturityRating = null;
        Integer maxResults = null;
        String orderBy = null;
        String partner = null;
        String printType = null;
        String projection = null;
        Boolean showPreorders = null;
        String source = null;
        Integer startIndex = null;
        Volumes response = api.booksVolumesList(q, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, download, filter, langRestrict, libraryRestrict, maxAllowedMaturityRating, maxResults, orderBy, partner, printType, projection, showPreorders, source, startIndex);
        // TODO: test validations
    }

    /**
     * Return a list of books in My Library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesMybooksListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> acquireMethod = null;
        String country = null;
        String locale = null;
        Integer maxResults = null;
        List<String> processingState = null;
        String source = null;
        Integer startIndex = null;
        Volumes response = api.booksVolumesMybooksList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acquireMethod, country, locale, maxResults, processingState, source, startIndex);
        // TODO: test validations
    }

    /**
     * Return a list of recommended books for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesRecommendedListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locale = null;
        String maxAllowedMaturityRating = null;
        String source = null;
        Volumes response = api.booksVolumesRecommendedList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, maxAllowedMaturityRating, source);
        // TODO: test validations
    }

    /**
     * Rate a recommended book for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesRecommendedRateTest() throws ApiException {
        String rating = null;
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locale = null;
        String source = null;
        BooksVolumesRecommendedRateResponse response = api.booksVolumesRecommendedRate(rating, volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source);
        // TODO: test validations
    }

    /**
     * Return a list of books uploaded by the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksVolumesUseruploadedListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locale = null;
        Integer maxResults = null;
        List<String> processingState = null;
        String source = null;
        Integer startIndex = null;
        List<String> volumeId = null;
        Volumes response = api.booksVolumesUseruploadedList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, maxResults, processingState, source, startIndex, volumeId);
        // TODO: test validations
    }

}
