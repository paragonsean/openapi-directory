/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BooksCloudloadingResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudloadingApi
 */
@Disabled
public class CloudloadingApiTest {

    private final CloudloadingApi api = new CloudloadingApi();

    /**
     * Add a user-upload volume and triggers processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksCloudloadingAddBookTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String driveDocumentId = null;
        String mimeType = null;
        String name = null;
        String uploadClientToken = null;
        BooksCloudloadingResource response = api.booksCloudloadingAddBook($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, driveDocumentId, mimeType, name, uploadClientToken);
        // TODO: test validations
    }

    /**
     * Remove the book and its contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksCloudloadingDeleteBookTest() throws ApiException {
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.booksCloudloadingDeleteBook(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a user-upload volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksCloudloadingUpdateBookTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BooksCloudloadingResource booksCloudloadingResource = null;
        BooksCloudloadingResource response = api.booksCloudloadingUpdateBook($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, booksCloudloadingResource);
        // TODO: test validations
    }

}
