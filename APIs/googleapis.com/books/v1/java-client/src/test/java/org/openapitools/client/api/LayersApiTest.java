/*
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Annotationsdata;
import org.openapitools.client.model.DictionaryAnnotationdata;
import org.openapitools.client.model.Layersummaries;
import org.openapitools.client.model.Layersummary;
import org.openapitools.client.model.Volumeannotation;
import org.openapitools.client.model.Volumeannotations;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LayersApi
 */
@Disabled
public class LayersApiTest {

    private final LayersApi api = new LayersApi();

    /**
     * Gets the annotation data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersAnnotationDataGetTest() throws ApiException {
        String volumeId = null;
        String layerId = null;
        String annotationDataId = null;
        String contentVersion = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowWebDefinitions = null;
        Integer h = null;
        String locale = null;
        Integer scale = null;
        String source = null;
        Integer w = null;
        DictionaryAnnotationdata response = api.booksLayersAnnotationDataGet(volumeId, layerId, annotationDataId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowWebDefinitions, h, locale, scale, source, w);
        // TODO: test validations
    }

    /**
     * Gets the annotation data for a volume and layer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersAnnotationDataListTest() throws ApiException {
        String volumeId = null;
        String layerId = null;
        String contentVersion = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> annotationDataId = null;
        Integer h = null;
        String locale = null;
        Integer maxResults = null;
        String pageToken = null;
        Integer scale = null;
        String source = null;
        String updatedMax = null;
        String updatedMin = null;
        Integer w = null;
        Annotationsdata response = api.booksLayersAnnotationDataList(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, annotationDataId, h, locale, maxResults, pageToken, scale, source, updatedMax, updatedMin, w);
        // TODO: test validations
    }

    /**
     * Gets the layer summary for a volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersGetTest() throws ApiException {
        String volumeId = null;
        String summaryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String contentVersion = null;
        String source = null;
        Layersummary response = api.booksLayersGet(volumeId, summaryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, source);
        // TODO: test validations
    }

    /**
     * List the layer summaries for a volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersListTest() throws ApiException {
        String volumeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String contentVersion = null;
        Integer maxResults = null;
        String pageToken = null;
        String source = null;
        Layersummaries response = api.booksLayersList(volumeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, contentVersion, maxResults, pageToken, source);
        // TODO: test validations
    }

    /**
     * Gets the volume annotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersVolumeAnnotationsGetTest() throws ApiException {
        String volumeId = null;
        String layerId = null;
        String annotationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locale = null;
        String source = null;
        Volumeannotation response = api.booksLayersVolumeAnnotationsGet(volumeId, layerId, annotationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locale, source);
        // TODO: test validations
    }

    /**
     * Gets the volume annotations for a volume and layer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void booksLayersVolumeAnnotationsListTest() throws ApiException {
        String volumeId = null;
        String layerId = null;
        String contentVersion = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endOffset = null;
        String endPosition = null;
        String locale = null;
        Integer maxResults = null;
        String pageToken = null;
        Boolean showDeleted = null;
        String source = null;
        String startOffset = null;
        String startPosition = null;
        String updatedMax = null;
        String updatedMin = null;
        String volumeAnnotationsVersion = null;
        Volumeannotations response = api.booksLayersVolumeAnnotationsList(volumeId, layerId, contentVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endOffset, endPosition, locale, maxResults, pageToken, showDeleted, source, startOffset, startPosition, updatedMax, updatedMin, volumeAnnotationsVersion);
        // TODO: test validations
    }

}
