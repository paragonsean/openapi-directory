/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReadingPosition from './ReadingPosition';
import Review from './Review';
import VolumeUserInfoCopy from './VolumeUserInfoCopy';
import VolumeUserInfoFamilySharing from './VolumeUserInfoFamilySharing';
import VolumeUserInfoRentalPeriod from './VolumeUserInfoRentalPeriod';
import VolumeUserInfoUserUploadedVolumeInfo from './VolumeUserInfoUserUploadedVolumeInfo';

/**
 * The VolumeUserInfo model module.
 * @module model/VolumeUserInfo
 * @version v1
 */
class VolumeUserInfo {
    /**
     * Constructs a new <code>VolumeUserInfo</code>.
     * User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)
     * @alias module:model/VolumeUserInfo
     */
    constructor() { 
        
        VolumeUserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeUserInfo} obj Optional instance to populate.
     * @return {module:model/VolumeUserInfo} The populated <code>VolumeUserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeUserInfo();

            if (data.hasOwnProperty('acquiredTime')) {
                obj['acquiredTime'] = ApiClient.convertToType(data['acquiredTime'], 'String');
            }
            if (data.hasOwnProperty('acquisitionType')) {
                obj['acquisitionType'] = ApiClient.convertToType(data['acquisitionType'], 'Number');
            }
            if (data.hasOwnProperty('copy')) {
                obj['copy'] = VolumeUserInfoCopy.constructFromObject(data['copy']);
            }
            if (data.hasOwnProperty('entitlementType')) {
                obj['entitlementType'] = ApiClient.convertToType(data['entitlementType'], 'Number');
            }
            if (data.hasOwnProperty('familySharing')) {
                obj['familySharing'] = VolumeUserInfoFamilySharing.constructFromObject(data['familySharing']);
            }
            if (data.hasOwnProperty('isFamilySharedFromUser')) {
                obj['isFamilySharedFromUser'] = ApiClient.convertToType(data['isFamilySharedFromUser'], 'Boolean');
            }
            if (data.hasOwnProperty('isFamilySharedToUser')) {
                obj['isFamilySharedToUser'] = ApiClient.convertToType(data['isFamilySharedToUser'], 'Boolean');
            }
            if (data.hasOwnProperty('isFamilySharingAllowed')) {
                obj['isFamilySharingAllowed'] = ApiClient.convertToType(data['isFamilySharingAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('isFamilySharingDisabledByFop')) {
                obj['isFamilySharingDisabledByFop'] = ApiClient.convertToType(data['isFamilySharingDisabledByFop'], 'Boolean');
            }
            if (data.hasOwnProperty('isInMyBooks')) {
                obj['isInMyBooks'] = ApiClient.convertToType(data['isInMyBooks'], 'Boolean');
            }
            if (data.hasOwnProperty('isPreordered')) {
                obj['isPreordered'] = ApiClient.convertToType(data['isPreordered'], 'Boolean');
            }
            if (data.hasOwnProperty('isPurchased')) {
                obj['isPurchased'] = ApiClient.convertToType(data['isPurchased'], 'Boolean');
            }
            if (data.hasOwnProperty('isUploaded')) {
                obj['isUploaded'] = ApiClient.convertToType(data['isUploaded'], 'Boolean');
            }
            if (data.hasOwnProperty('readingPosition')) {
                obj['readingPosition'] = ReadingPosition.constructFromObject(data['readingPosition']);
            }
            if (data.hasOwnProperty('rentalPeriod')) {
                obj['rentalPeriod'] = VolumeUserInfoRentalPeriod.constructFromObject(data['rentalPeriod']);
            }
            if (data.hasOwnProperty('rentalState')) {
                obj['rentalState'] = ApiClient.convertToType(data['rentalState'], 'String');
            }
            if (data.hasOwnProperty('review')) {
                obj['review'] = Review.constructFromObject(data['review']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('userUploadedVolumeInfo')) {
                obj['userUploadedVolumeInfo'] = VolumeUserInfoUserUploadedVolumeInfo.constructFromObject(data['userUploadedVolumeInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeUserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeUserInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquiredTime'] && !(typeof data['acquiredTime'] === 'string' || data['acquiredTime'] instanceof String)) {
            throw new Error("Expected the field `acquiredTime` to be a primitive type in the JSON string but got " + data['acquiredTime']);
        }
        // validate the optional field `copy`
        if (data['copy']) { // data not null
          VolumeUserInfoCopy.validateJSON(data['copy']);
        }
        // validate the optional field `familySharing`
        if (data['familySharing']) { // data not null
          VolumeUserInfoFamilySharing.validateJSON(data['familySharing']);
        }
        // validate the optional field `readingPosition`
        if (data['readingPosition']) { // data not null
          ReadingPosition.validateJSON(data['readingPosition']);
        }
        // validate the optional field `rentalPeriod`
        if (data['rentalPeriod']) { // data not null
          VolumeUserInfoRentalPeriod.validateJSON(data['rentalPeriod']);
        }
        // ensure the json data is a string
        if (data['rentalState'] && !(typeof data['rentalState'] === 'string' || data['rentalState'] instanceof String)) {
            throw new Error("Expected the field `rentalState` to be a primitive type in the JSON string but got " + data['rentalState']);
        }
        // validate the optional field `review`
        if (data['review']) { // data not null
          Review.validateJSON(data['review']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // validate the optional field `userUploadedVolumeInfo`
        if (data['userUploadedVolumeInfo']) { // data not null
          VolumeUserInfoUserUploadedVolumeInfo.validateJSON(data['userUploadedVolumeInfo']);
        }

        return true;
    }


}



/**
 * Timestamp when this volume was acquired by the user. (RFC 3339 UTC date-time format) Acquiring includes purchase, user upload, receiving family sharing, etc.
 * @member {String} acquiredTime
 */
VolumeUserInfo.prototype['acquiredTime'] = undefined;

/**
 * How this volume was acquired.
 * @member {Number} acquisitionType
 */
VolumeUserInfo.prototype['acquisitionType'] = undefined;

/**
 * @member {module:model/VolumeUserInfoCopy} copy
 */
VolumeUserInfo.prototype['copy'] = undefined;

/**
 * Whether this volume is purchased, sample, pd download etc.
 * @member {Number} entitlementType
 */
VolumeUserInfo.prototype['entitlementType'] = undefined;

/**
 * @member {module:model/VolumeUserInfoFamilySharing} familySharing
 */
VolumeUserInfo.prototype['familySharing'] = undefined;

/**
 * Whether or not the user shared this volume with the family.
 * @member {Boolean} isFamilySharedFromUser
 */
VolumeUserInfo.prototype['isFamilySharedFromUser'] = undefined;

/**
 * Whether or not the user received this volume through family sharing.
 * @member {Boolean} isFamilySharedToUser
 */
VolumeUserInfo.prototype['isFamilySharedToUser'] = undefined;

/**
 * Deprecated: Replaced by familySharing.
 * @member {Boolean} isFamilySharingAllowed
 */
VolumeUserInfo.prototype['isFamilySharingAllowed'] = undefined;

/**
 * Deprecated: Replaced by familySharing.
 * @member {Boolean} isFamilySharingDisabledByFop
 */
VolumeUserInfo.prototype['isFamilySharingDisabledByFop'] = undefined;

/**
 * Whether or not this volume is currently in \"my books.\"
 * @member {Boolean} isInMyBooks
 */
VolumeUserInfo.prototype['isInMyBooks'] = undefined;

/**
 * Whether or not this volume was pre-ordered by the authenticated user making the request. (In LITE projection.)
 * @member {Boolean} isPreordered
 */
VolumeUserInfo.prototype['isPreordered'] = undefined;

/**
 * Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)
 * @member {Boolean} isPurchased
 */
VolumeUserInfo.prototype['isPurchased'] = undefined;

/**
 * Whether or not this volume was user uploaded.
 * @member {Boolean} isUploaded
 */
VolumeUserInfo.prototype['isUploaded'] = undefined;

/**
 * @member {module:model/ReadingPosition} readingPosition
 */
VolumeUserInfo.prototype['readingPosition'] = undefined;

/**
 * @member {module:model/VolumeUserInfoRentalPeriod} rentalPeriod
 */
VolumeUserInfo.prototype['rentalPeriod'] = undefined;

/**
 * Whether this book is an active or an expired rental.
 * @member {String} rentalState
 */
VolumeUserInfo.prototype['rentalState'] = undefined;

/**
 * @member {module:model/Review} review
 */
VolumeUserInfo.prototype['review'] = undefined;

/**
 * Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).
 * @member {String} updated
 */
VolumeUserInfo.prototype['updated'] = undefined;

/**
 * @member {module:model/VolumeUserInfoUserUploadedVolumeInfo} userUploadedVolumeInfo
 */
VolumeUserInfo.prototype['userUploadedVolumeInfo'] = undefined;






export default VolumeUserInfo;

