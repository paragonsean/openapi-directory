/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConcurrentAccessRestriction model module.
 * @module model/ConcurrentAccessRestriction
 * @version v1
 */
class ConcurrentAccessRestriction {
    /**
     * Constructs a new <code>ConcurrentAccessRestriction</code>.
     * @alias module:model/ConcurrentAccessRestriction
     */
    constructor() { 
        
        ConcurrentAccessRestriction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConcurrentAccessRestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConcurrentAccessRestriction} obj Optional instance to populate.
     * @return {module:model/ConcurrentAccessRestriction} The populated <code>ConcurrentAccessRestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConcurrentAccessRestriction();

            if (data.hasOwnProperty('deviceAllowed')) {
                obj['deviceAllowed'] = ApiClient.convertToType(data['deviceAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maxConcurrentDevices')) {
                obj['maxConcurrentDevices'] = ApiClient.convertToType(data['maxConcurrentDevices'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('reasonCode')) {
                obj['reasonCode'] = ApiClient.convertToType(data['reasonCode'], 'String');
            }
            if (data.hasOwnProperty('restricted')) {
                obj['restricted'] = ApiClient.convertToType(data['restricted'], 'Boolean');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('timeWindowSeconds')) {
                obj['timeWindowSeconds'] = ApiClient.convertToType(data['timeWindowSeconds'], 'Number');
            }
            if (data.hasOwnProperty('volumeId')) {
                obj['volumeId'] = ApiClient.convertToType(data['volumeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConcurrentAccessRestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConcurrentAccessRestriction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['nonce'] && !(typeof data['nonce'] === 'string' || data['nonce'] instanceof String)) {
            throw new Error("Expected the field `nonce` to be a primitive type in the JSON string but got " + data['nonce']);
        }
        // ensure the json data is a string
        if (data['reasonCode'] && !(typeof data['reasonCode'] === 'string' || data['reasonCode'] instanceof String)) {
            throw new Error("Expected the field `reasonCode` to be a primitive type in the JSON string but got " + data['reasonCode']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['volumeId'] && !(typeof data['volumeId'] === 'string' || data['volumeId'] instanceof String)) {
            throw new Error("Expected the field `volumeId` to be a primitive type in the JSON string but got " + data['volumeId']);
        }

        return true;
    }


}



/**
 * Whether access is granted for this (user, device, volume).
 * @member {Boolean} deviceAllowed
 */
ConcurrentAccessRestriction.prototype['deviceAllowed'] = undefined;

/**
 * Resource type.
 * @member {String} kind
 */
ConcurrentAccessRestriction.prototype['kind'] = undefined;

/**
 * The maximum number of concurrent access licenses for this volume.
 * @member {Number} maxConcurrentDevices
 */
ConcurrentAccessRestriction.prototype['maxConcurrentDevices'] = undefined;

/**
 * Error/warning message.
 * @member {String} message
 */
ConcurrentAccessRestriction.prototype['message'] = undefined;

/**
 * Client nonce for verification. Download access and client-validation only.
 * @member {String} nonce
 */
ConcurrentAccessRestriction.prototype['nonce'] = undefined;

/**
 * Error/warning reason code.
 * @member {String} reasonCode
 */
ConcurrentAccessRestriction.prototype['reasonCode'] = undefined;

/**
 * Whether this volume has any concurrent access restrictions.
 * @member {Boolean} restricted
 */
ConcurrentAccessRestriction.prototype['restricted'] = undefined;

/**
 * Response signature.
 * @member {String} signature
 */
ConcurrentAccessRestriction.prototype['signature'] = undefined;

/**
 * Client app identifier for verification. Download access and client-validation only.
 * @member {String} source
 */
ConcurrentAccessRestriction.prototype['source'] = undefined;

/**
 * Time in seconds for license auto-expiration.
 * @member {Number} timeWindowSeconds
 */
ConcurrentAccessRestriction.prototype['timeWindowSeconds'] = undefined;

/**
 * Identifies the volume for which this entry applies.
 * @member {String} volumeId
 */
ConcurrentAccessRestriction.prototype['volumeId'] = undefined;






export default ConcurrentAccessRestriction;

