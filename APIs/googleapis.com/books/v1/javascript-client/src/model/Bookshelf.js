/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Bookshelf model module.
 * @module model/Bookshelf
 * @version v1
 */
class Bookshelf {
    /**
     * Constructs a new <code>Bookshelf</code>.
     * @alias module:model/Bookshelf
     */
    constructor() { 
        
        Bookshelf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bookshelf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bookshelf} obj Optional instance to populate.
     * @return {module:model/Bookshelf} The populated <code>Bookshelf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bookshelf();

            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('volumeCount')) {
                obj['volumeCount'] = ApiClient.convertToType(data['volumeCount'], 'Number');
            }
            if (data.hasOwnProperty('volumesLastUpdated')) {
                obj['volumesLastUpdated'] = ApiClient.convertToType(data['volumesLastUpdated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bookshelf</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bookshelf</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['access'] && !(typeof data['access'] === 'string' || data['access'] instanceof String)) {
            throw new Error("Expected the field `access` to be a primitive type in the JSON string but got " + data['access']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['volumesLastUpdated'] && !(typeof data['volumesLastUpdated'] === 'string' || data['volumesLastUpdated'] instanceof String)) {
            throw new Error("Expected the field `volumesLastUpdated` to be a primitive type in the JSON string but got " + data['volumesLastUpdated']);
        }

        return true;
    }


}



/**
 * Whether this bookshelf is PUBLIC or PRIVATE.
 * @member {String} access
 */
Bookshelf.prototype['access'] = undefined;

/**
 * Created time for this bookshelf (formatted UTC timestamp with millisecond resolution).
 * @member {String} created
 */
Bookshelf.prototype['created'] = undefined;

/**
 * Description of this bookshelf.
 * @member {String} description
 */
Bookshelf.prototype['description'] = undefined;

/**
 * Id of this bookshelf, only unique by user.
 * @member {Number} id
 */
Bookshelf.prototype['id'] = undefined;

/**
 * Resource type for bookshelf metadata.
 * @member {String} kind
 */
Bookshelf.prototype['kind'] = undefined;

/**
 * URL to this resource.
 * @member {String} selfLink
 */
Bookshelf.prototype['selfLink'] = undefined;

/**
 * Title of this bookshelf.
 * @member {String} title
 */
Bookshelf.prototype['title'] = undefined;

/**
 * Last modified time of this bookshelf (formatted UTC timestamp with millisecond resolution).
 * @member {String} updated
 */
Bookshelf.prototype['updated'] = undefined;

/**
 * Number of volumes in this bookshelf.
 * @member {Number} volumeCount
 */
Bookshelf.prototype['volumeCount'] = undefined;

/**
 * Last time a volume was added or removed from this bookshelf (formatted UTC timestamp with millisecond resolution).
 * @member {String} volumesLastUpdated
 */
Bookshelf.prototype['volumesLastUpdated'] = undefined;






export default Bookshelf;

