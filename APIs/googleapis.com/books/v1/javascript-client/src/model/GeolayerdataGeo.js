/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeolayerdataGeoViewport from './GeolayerdataGeoViewport';

/**
 * The GeolayerdataGeo model module.
 * @module model/GeolayerdataGeo
 * @version v1
 */
class GeolayerdataGeo {
    /**
     * Constructs a new <code>GeolayerdataGeo</code>.
     * @alias module:model/GeolayerdataGeo
     */
    constructor() { 
        
        GeolayerdataGeo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeolayerdataGeo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeolayerdataGeo} obj Optional instance to populate.
     * @return {module:model/GeolayerdataGeo} The populated <code>GeolayerdataGeo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeolayerdataGeo();

            if (data.hasOwnProperty('boundary')) {
                obj['boundary'] = ApiClient.convertToType(data['boundary'], ['String']);
            }
            if (data.hasOwnProperty('cachePolicy')) {
                obj['cachePolicy'] = ApiClient.convertToType(data['cachePolicy'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('mapType')) {
                obj['mapType'] = ApiClient.convertToType(data['mapType'], 'String');
            }
            if (data.hasOwnProperty('viewport')) {
                obj['viewport'] = GeolayerdataGeoViewport.constructFromObject(data['viewport']);
            }
            if (data.hasOwnProperty('zoom')) {
                obj['zoom'] = ApiClient.convertToType(data['zoom'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeolayerdataGeo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeolayerdataGeo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['boundary'])) {
            throw new Error("Expected the field `boundary` to be an array in the JSON data but got " + data['boundary']);
        }
        // ensure the json data is a string
        if (data['cachePolicy'] && !(typeof data['cachePolicy'] === 'string' || data['cachePolicy'] instanceof String)) {
            throw new Error("Expected the field `cachePolicy` to be a primitive type in the JSON string but got " + data['cachePolicy']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['mapType'] && !(typeof data['mapType'] === 'string' || data['mapType'] instanceof String)) {
            throw new Error("Expected the field `mapType` to be a primitive type in the JSON string but got " + data['mapType']);
        }
        // validate the optional field `viewport`
        if (data['viewport']) { // data not null
          GeolayerdataGeoViewport.validateJSON(data['viewport']);
        }

        return true;
    }


}



/**
 * The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.
 * @member {Array.<String>} boundary
 */
GeolayerdataGeo.prototype['boundary'] = undefined;

/**
 * The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER
 * @member {String} cachePolicy
 */
GeolayerdataGeo.prototype['cachePolicy'] = undefined;

/**
 * The country code of the location.
 * @member {String} countryCode
 */
GeolayerdataGeo.prototype['countryCode'] = undefined;

/**
 * The latitude of the location.
 * @member {Number} latitude
 */
GeolayerdataGeo.prototype['latitude'] = undefined;

/**
 * The longitude of the location.
 * @member {Number} longitude
 */
GeolayerdataGeo.prototype['longitude'] = undefined;

/**
 * The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN
 * @member {String} mapType
 */
GeolayerdataGeo.prototype['mapType'] = undefined;

/**
 * @member {module:model/GeolayerdataGeoViewport} viewport
 */
GeolayerdataGeo.prototype['viewport'] = undefined;

/**
 * The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https: //developers.google.com/maps/documentation/staticmaps/#Zoomlevels
 * @member {Number} zoom
 */
GeolayerdataGeo.prototype['zoom'] = undefined;






export default GeolayerdataGeo;

