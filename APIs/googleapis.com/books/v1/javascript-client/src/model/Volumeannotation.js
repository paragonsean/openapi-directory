/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeannotationContentRanges from './VolumeannotationContentRanges';

/**
 * The Volumeannotation model module.
 * @module model/Volumeannotation
 * @version v1
 */
class Volumeannotation {
    /**
     * Constructs a new <code>Volumeannotation</code>.
     * @alias module:model/Volumeannotation
     */
    constructor() { 
        
        Volumeannotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Volumeannotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volumeannotation} obj Optional instance to populate.
     * @return {module:model/Volumeannotation} The populated <code>Volumeannotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volumeannotation();

            if (data.hasOwnProperty('annotationDataId')) {
                obj['annotationDataId'] = ApiClient.convertToType(data['annotationDataId'], 'String');
            }
            if (data.hasOwnProperty('annotationDataLink')) {
                obj['annotationDataLink'] = ApiClient.convertToType(data['annotationDataLink'], 'String');
            }
            if (data.hasOwnProperty('annotationType')) {
                obj['annotationType'] = ApiClient.convertToType(data['annotationType'], 'String');
            }
            if (data.hasOwnProperty('contentRanges')) {
                obj['contentRanges'] = VolumeannotationContentRanges.constructFromObject(data['contentRanges']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('layerId')) {
                obj['layerId'] = ApiClient.convertToType(data['layerId'], 'String');
            }
            if (data.hasOwnProperty('pageIds')) {
                obj['pageIds'] = ApiClient.convertToType(data['pageIds'], ['String']);
            }
            if (data.hasOwnProperty('selectedText')) {
                obj['selectedText'] = ApiClient.convertToType(data['selectedText'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('volumeId')) {
                obj['volumeId'] = ApiClient.convertToType(data['volumeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volumeannotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volumeannotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationDataId'] && !(typeof data['annotationDataId'] === 'string' || data['annotationDataId'] instanceof String)) {
            throw new Error("Expected the field `annotationDataId` to be a primitive type in the JSON string but got " + data['annotationDataId']);
        }
        // ensure the json data is a string
        if (data['annotationDataLink'] && !(typeof data['annotationDataLink'] === 'string' || data['annotationDataLink'] instanceof String)) {
            throw new Error("Expected the field `annotationDataLink` to be a primitive type in the JSON string but got " + data['annotationDataLink']);
        }
        // ensure the json data is a string
        if (data['annotationType'] && !(typeof data['annotationType'] === 'string' || data['annotationType'] instanceof String)) {
            throw new Error("Expected the field `annotationType` to be a primitive type in the JSON string but got " + data['annotationType']);
        }
        // validate the optional field `contentRanges`
        if (data['contentRanges']) { // data not null
          VolumeannotationContentRanges.validateJSON(data['contentRanges']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['layerId'] && !(typeof data['layerId'] === 'string' || data['layerId'] instanceof String)) {
            throw new Error("Expected the field `layerId` to be a primitive type in the JSON string but got " + data['layerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageIds'])) {
            throw new Error("Expected the field `pageIds` to be an array in the JSON data but got " + data['pageIds']);
        }
        // ensure the json data is a string
        if (data['selectedText'] && !(typeof data['selectedText'] === 'string' || data['selectedText'] instanceof String)) {
            throw new Error("Expected the field `selectedText` to be a primitive type in the JSON string but got " + data['selectedText']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['volumeId'] && !(typeof data['volumeId'] === 'string' || data['volumeId'] instanceof String)) {
            throw new Error("Expected the field `volumeId` to be a primitive type in the JSON string but got " + data['volumeId']);
        }

        return true;
    }


}



/**
 * The annotation data id for this volume annotation.
 * @member {String} annotationDataId
 */
Volumeannotation.prototype['annotationDataId'] = undefined;

/**
 * Link to get data for this annotation.
 * @member {String} annotationDataLink
 */
Volumeannotation.prototype['annotationDataLink'] = undefined;

/**
 * The type of annotation this is.
 * @member {String} annotationType
 */
Volumeannotation.prototype['annotationType'] = undefined;

/**
 * @member {module:model/VolumeannotationContentRanges} contentRanges
 */
Volumeannotation.prototype['contentRanges'] = undefined;

/**
 * Data for this annotation.
 * @member {String} data
 */
Volumeannotation.prototype['data'] = undefined;

/**
 * Indicates that this annotation is deleted.
 * @member {Boolean} deleted
 */
Volumeannotation.prototype['deleted'] = undefined;

/**
 * Unique id of this volume annotation.
 * @member {String} id
 */
Volumeannotation.prototype['id'] = undefined;

/**
 * Resource Type
 * @member {String} kind
 */
Volumeannotation.prototype['kind'] = undefined;

/**
 * The Layer this annotation is for.
 * @member {String} layerId
 */
Volumeannotation.prototype['layerId'] = undefined;

/**
 * Pages the annotation spans.
 * @member {Array.<String>} pageIds
 */
Volumeannotation.prototype['pageIds'] = undefined;

/**
 * Excerpt from the volume.
 * @member {String} selectedText
 */
Volumeannotation.prototype['selectedText'] = undefined;

/**
 * URL to this resource.
 * @member {String} selfLink
 */
Volumeannotation.prototype['selfLink'] = undefined;

/**
 * Timestamp for the last time this anntoation was updated. (RFC 3339 UTC date-time format).
 * @member {String} updated
 */
Volumeannotation.prototype['updated'] = undefined;

/**
 * The Volume this annotation is for.
 * @member {String} volumeId
 */
Volumeannotation.prototype['volumeId'] = undefined;






export default Volumeannotation;

