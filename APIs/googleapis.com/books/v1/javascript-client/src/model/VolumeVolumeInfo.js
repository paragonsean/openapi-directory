/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeVolumeInfoDimensions from './VolumeVolumeInfoDimensions';
import VolumeVolumeInfoImageLinks from './VolumeVolumeInfoImageLinks';
import VolumeVolumeInfoIndustryIdentifiersInner from './VolumeVolumeInfoIndustryIdentifiersInner';
import VolumeVolumeInfoPanelizationSummary from './VolumeVolumeInfoPanelizationSummary';
import VolumeVolumeInfoReadingModes from './VolumeVolumeInfoReadingModes';
import Volumeseriesinfo from './Volumeseriesinfo';

/**
 * The VolumeVolumeInfo model module.
 * @module model/VolumeVolumeInfo
 * @version v1
 */
class VolumeVolumeInfo {
    /**
     * Constructs a new <code>VolumeVolumeInfo</code>.
     * General volume information.
     * @alias module:model/VolumeVolumeInfo
     */
    constructor() { 
        
        VolumeVolumeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeVolumeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeVolumeInfo} obj Optional instance to populate.
     * @return {module:model/VolumeVolumeInfo} The populated <code>VolumeVolumeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeVolumeInfo();

            if (data.hasOwnProperty('allowAnonLogging')) {
                obj['allowAnonLogging'] = ApiClient.convertToType(data['allowAnonLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], ['String']);
            }
            if (data.hasOwnProperty('averageRating')) {
                obj['averageRating'] = ApiClient.convertToType(data['averageRating'], 'Number');
            }
            if (data.hasOwnProperty('canonicalVolumeLink')) {
                obj['canonicalVolumeLink'] = ApiClient.convertToType(data['canonicalVolumeLink'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('comicsContent')) {
                obj['comicsContent'] = ApiClient.convertToType(data['comicsContent'], 'Boolean');
            }
            if (data.hasOwnProperty('contentVersion')) {
                obj['contentVersion'] = ApiClient.convertToType(data['contentVersion'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = VolumeVolumeInfoDimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('imageLinks')) {
                obj['imageLinks'] = VolumeVolumeInfoImageLinks.constructFromObject(data['imageLinks']);
            }
            if (data.hasOwnProperty('industryIdentifiers')) {
                obj['industryIdentifiers'] = ApiClient.convertToType(data['industryIdentifiers'], [VolumeVolumeInfoIndustryIdentifiersInner]);
            }
            if (data.hasOwnProperty('infoLink')) {
                obj['infoLink'] = ApiClient.convertToType(data['infoLink'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('mainCategory')) {
                obj['mainCategory'] = ApiClient.convertToType(data['mainCategory'], 'String');
            }
            if (data.hasOwnProperty('maturityRating')) {
                obj['maturityRating'] = ApiClient.convertToType(data['maturityRating'], 'String');
            }
            if (data.hasOwnProperty('pageCount')) {
                obj['pageCount'] = ApiClient.convertToType(data['pageCount'], 'Number');
            }
            if (data.hasOwnProperty('panelizationSummary')) {
                obj['panelizationSummary'] = VolumeVolumeInfoPanelizationSummary.constructFromObject(data['panelizationSummary']);
            }
            if (data.hasOwnProperty('previewLink')) {
                obj['previewLink'] = ApiClient.convertToType(data['previewLink'], 'String');
            }
            if (data.hasOwnProperty('printType')) {
                obj['printType'] = ApiClient.convertToType(data['printType'], 'String');
            }
            if (data.hasOwnProperty('printedPageCount')) {
                obj['printedPageCount'] = ApiClient.convertToType(data['printedPageCount'], 'Number');
            }
            if (data.hasOwnProperty('publishedDate')) {
                obj['publishedDate'] = ApiClient.convertToType(data['publishedDate'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('ratingsCount')) {
                obj['ratingsCount'] = ApiClient.convertToType(data['ratingsCount'], 'Number');
            }
            if (data.hasOwnProperty('readingModes')) {
                obj['readingModes'] = VolumeVolumeInfoReadingModes.constructFromObject(data['readingModes']);
            }
            if (data.hasOwnProperty('samplePageCount')) {
                obj['samplePageCount'] = ApiClient.convertToType(data['samplePageCount'], 'Number');
            }
            if (data.hasOwnProperty('seriesInfo')) {
                obj['seriesInfo'] = Volumeseriesinfo.constructFromObject(data['seriesInfo']);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeVolumeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeVolumeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['authors'])) {
            throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
        }
        // ensure the json data is a string
        if (data['canonicalVolumeLink'] && !(typeof data['canonicalVolumeLink'] === 'string' || data['canonicalVolumeLink'] instanceof String)) {
            throw new Error("Expected the field `canonicalVolumeLink` to be a primitive type in the JSON string but got " + data['canonicalVolumeLink']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['contentVersion'] && !(typeof data['contentVersion'] === 'string' || data['contentVersion'] instanceof String)) {
            throw new Error("Expected the field `contentVersion` to be a primitive type in the JSON string but got " + data['contentVersion']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          VolumeVolumeInfoDimensions.validateJSON(data['dimensions']);
        }
        // validate the optional field `imageLinks`
        if (data['imageLinks']) { // data not null
          VolumeVolumeInfoImageLinks.validateJSON(data['imageLinks']);
        }
        if (data['industryIdentifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['industryIdentifiers'])) {
                throw new Error("Expected the field `industryIdentifiers` to be an array in the JSON data but got " + data['industryIdentifiers']);
            }
            // validate the optional field `industryIdentifiers` (array)
            for (const item of data['industryIdentifiers']) {
                VolumeVolumeInfoIndustryIdentifiersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['infoLink'] && !(typeof data['infoLink'] === 'string' || data['infoLink'] instanceof String)) {
            throw new Error("Expected the field `infoLink` to be a primitive type in the JSON string but got " + data['infoLink']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['mainCategory'] && !(typeof data['mainCategory'] === 'string' || data['mainCategory'] instanceof String)) {
            throw new Error("Expected the field `mainCategory` to be a primitive type in the JSON string but got " + data['mainCategory']);
        }
        // ensure the json data is a string
        if (data['maturityRating'] && !(typeof data['maturityRating'] === 'string' || data['maturityRating'] instanceof String)) {
            throw new Error("Expected the field `maturityRating` to be a primitive type in the JSON string but got " + data['maturityRating']);
        }
        // validate the optional field `panelizationSummary`
        if (data['panelizationSummary']) { // data not null
          VolumeVolumeInfoPanelizationSummary.validateJSON(data['panelizationSummary']);
        }
        // ensure the json data is a string
        if (data['previewLink'] && !(typeof data['previewLink'] === 'string' || data['previewLink'] instanceof String)) {
            throw new Error("Expected the field `previewLink` to be a primitive type in the JSON string but got " + data['previewLink']);
        }
        // ensure the json data is a string
        if (data['printType'] && !(typeof data['printType'] === 'string' || data['printType'] instanceof String)) {
            throw new Error("Expected the field `printType` to be a primitive type in the JSON string but got " + data['printType']);
        }
        // ensure the json data is a string
        if (data['publishedDate'] && !(typeof data['publishedDate'] === 'string' || data['publishedDate'] instanceof String)) {
            throw new Error("Expected the field `publishedDate` to be a primitive type in the JSON string but got " + data['publishedDate']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // validate the optional field `readingModes`
        if (data['readingModes']) { // data not null
          VolumeVolumeInfoReadingModes.validateJSON(data['readingModes']);
        }
        // validate the optional field `seriesInfo`
        if (data['seriesInfo']) { // data not null
          Volumeseriesinfo.validateJSON(data['seriesInfo']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Whether anonymous logging should be allowed.
 * @member {Boolean} allowAnonLogging
 */
VolumeVolumeInfo.prototype['allowAnonLogging'] = undefined;

/**
 * The names of the authors and/or editors for this volume. (In LITE projection)
 * @member {Array.<String>} authors
 */
VolumeVolumeInfo.prototype['authors'] = undefined;

/**
 * The mean review rating for this volume. (min = 1.0, max = 5.0)
 * @member {Number} averageRating
 */
VolumeVolumeInfo.prototype['averageRating'] = undefined;

/**
 * Canonical URL for a volume. (In LITE projection.)
 * @member {String} canonicalVolumeLink
 */
VolumeVolumeInfo.prototype['canonicalVolumeLink'] = undefined;

/**
 * A list of subject categories, such as \"Fiction\", \"Suspense\", etc.
 * @member {Array.<String>} categories
 */
VolumeVolumeInfo.prototype['categories'] = undefined;

/**
 * Whether the volume has comics content.
 * @member {Boolean} comicsContent
 */
VolumeVolumeInfo.prototype['comicsContent'] = undefined;

/**
 * An identifier for the version of the volume content (text & images). (In LITE projection)
 * @member {String} contentVersion
 */
VolumeVolumeInfo.prototype['contentVersion'] = undefined;

/**
 * A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)
 * @member {String} description
 */
VolumeVolumeInfo.prototype['description'] = undefined;

/**
 * @member {module:model/VolumeVolumeInfoDimensions} dimensions
 */
VolumeVolumeInfo.prototype['dimensions'] = undefined;

/**
 * @member {module:model/VolumeVolumeInfoImageLinks} imageLinks
 */
VolumeVolumeInfo.prototype['imageLinks'] = undefined;

/**
 * Industry standard identifiers for this volume.
 * @member {Array.<module:model/VolumeVolumeInfoIndustryIdentifiersInner>} industryIdentifiers
 */
VolumeVolumeInfo.prototype['industryIdentifiers'] = undefined;

/**
 * URL to view information about this volume on the Google Books site. (In LITE projection)
 * @member {String} infoLink
 */
VolumeVolumeInfo.prototype['infoLink'] = undefined;

/**
 * Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as 'fr', 'en', etc.
 * @member {String} language
 */
VolumeVolumeInfo.prototype['language'] = undefined;

/**
 * The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.
 * @member {String} mainCategory
 */
VolumeVolumeInfo.prototype['mainCategory'] = undefined;

/**
 * @member {String} maturityRating
 */
VolumeVolumeInfo.prototype['maturityRating'] = undefined;

/**
 * Total number of pages as per publisher metadata.
 * @member {Number} pageCount
 */
VolumeVolumeInfo.prototype['pageCount'] = undefined;

/**
 * @member {module:model/VolumeVolumeInfoPanelizationSummary} panelizationSummary
 */
VolumeVolumeInfo.prototype['panelizationSummary'] = undefined;

/**
 * URL to preview this volume on the Google Books site.
 * @member {String} previewLink
 */
VolumeVolumeInfo.prototype['previewLink'] = undefined;

/**
 * Type of publication of this volume. Possible values are BOOK or MAGAZINE.
 * @member {String} printType
 */
VolumeVolumeInfo.prototype['printType'] = undefined;

/**
 * Total number of printed pages in generated pdf representation.
 * @member {Number} printedPageCount
 */
VolumeVolumeInfo.prototype['printedPageCount'] = undefined;

/**
 * Date of publication. (In LITE projection.)
 * @member {String} publishedDate
 */
VolumeVolumeInfo.prototype['publishedDate'] = undefined;

/**
 * Publisher of this volume. (In LITE projection.)
 * @member {String} publisher
 */
VolumeVolumeInfo.prototype['publisher'] = undefined;

/**
 * The number of review ratings for this volume.
 * @member {Number} ratingsCount
 */
VolumeVolumeInfo.prototype['ratingsCount'] = undefined;

/**
 * @member {module:model/VolumeVolumeInfoReadingModes} readingModes
 */
VolumeVolumeInfo.prototype['readingModes'] = undefined;

/**
 * Total number of sample pages as per publisher metadata.
 * @member {Number} samplePageCount
 */
VolumeVolumeInfo.prototype['samplePageCount'] = undefined;

/**
 * @member {module:model/Volumeseriesinfo} seriesInfo
 */
VolumeVolumeInfo.prototype['seriesInfo'] = undefined;

/**
 * Volume subtitle. (In LITE projection.)
 * @member {String} subtitle
 */
VolumeVolumeInfo.prototype['subtitle'] = undefined;

/**
 * Volume title. (In LITE projection.)
 * @member {String} title
 */
VolumeVolumeInfo.prototype['title'] = undefined;






export default VolumeVolumeInfo;

