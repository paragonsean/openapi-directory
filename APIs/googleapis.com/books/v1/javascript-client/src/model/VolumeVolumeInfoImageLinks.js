/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeVolumeInfoImageLinks model module.
 * @module model/VolumeVolumeInfoImageLinks
 * @version v1
 */
class VolumeVolumeInfoImageLinks {
    /**
     * Constructs a new <code>VolumeVolumeInfoImageLinks</code>.
     * A list of image links for all the sizes that are available. (In LITE projection.)
     * @alias module:model/VolumeVolumeInfoImageLinks
     */
    constructor() { 
        
        VolumeVolumeInfoImageLinks.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeVolumeInfoImageLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeVolumeInfoImageLinks} obj Optional instance to populate.
     * @return {module:model/VolumeVolumeInfoImageLinks} The populated <code>VolumeVolumeInfoImageLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeVolumeInfoImageLinks();

            if (data.hasOwnProperty('extraLarge')) {
                obj['extraLarge'] = ApiClient.convertToType(data['extraLarge'], 'String');
            }
            if (data.hasOwnProperty('large')) {
                obj['large'] = ApiClient.convertToType(data['large'], 'String');
            }
            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('small')) {
                obj['small'] = ApiClient.convertToType(data['small'], 'String');
            }
            if (data.hasOwnProperty('smallThumbnail')) {
                obj['smallThumbnail'] = ApiClient.convertToType(data['smallThumbnail'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeVolumeInfoImageLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeVolumeInfoImageLinks</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['extraLarge'] && !(typeof data['extraLarge'] === 'string' || data['extraLarge'] instanceof String)) {
            throw new Error("Expected the field `extraLarge` to be a primitive type in the JSON string but got " + data['extraLarge']);
        }
        // ensure the json data is a string
        if (data['large'] && !(typeof data['large'] === 'string' || data['large'] instanceof String)) {
            throw new Error("Expected the field `large` to be a primitive type in the JSON string but got " + data['large']);
        }
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // ensure the json data is a string
        if (data['small'] && !(typeof data['small'] === 'string' || data['small'] instanceof String)) {
            throw new Error("Expected the field `small` to be a primitive type in the JSON string but got " + data['small']);
        }
        // ensure the json data is a string
        if (data['smallThumbnail'] && !(typeof data['smallThumbnail'] === 'string' || data['smallThumbnail'] instanceof String)) {
            throw new Error("Expected the field `smallThumbnail` to be a primitive type in the JSON string but got " + data['smallThumbnail']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }

        return true;
    }


}



/**
 * Image link for extra large size (width of ~1280 pixels). (In LITE projection)
 * @member {String} extraLarge
 */
VolumeVolumeInfoImageLinks.prototype['extraLarge'] = undefined;

/**
 * Image link for large size (width of ~800 pixels). (In LITE projection)
 * @member {String} large
 */
VolumeVolumeInfoImageLinks.prototype['large'] = undefined;

/**
 * Image link for medium size (width of ~575 pixels). (In LITE projection)
 * @member {String} medium
 */
VolumeVolumeInfoImageLinks.prototype['medium'] = undefined;

/**
 * Image link for small size (width of ~300 pixels). (In LITE projection)
 * @member {String} small
 */
VolumeVolumeInfoImageLinks.prototype['small'] = undefined;

/**
 * Image link for small thumbnail size (width of ~80 pixels). (In LITE projection)
 * @member {String} smallThumbnail
 */
VolumeVolumeInfoImageLinks.prototype['smallThumbnail'] = undefined;

/**
 * Image link for thumbnail size (width of ~128 pixels). (In LITE projection)
 * @member {String} thumbnail
 */
VolumeVolumeInfoImageLinks.prototype['thumbnail'] = undefined;






export default VolumeVolumeInfoImageLinks;

