/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DownloadAccessRestriction from './DownloadAccessRestriction';
import VolumeAccessInfoEpub from './VolumeAccessInfoEpub';
import VolumeAccessInfoPdf from './VolumeAccessInfoPdf';

/**
 * The VolumeAccessInfo model module.
 * @module model/VolumeAccessInfo
 * @version v1
 */
class VolumeAccessInfo {
    /**
     * Constructs a new <code>VolumeAccessInfo</code>.
     * Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
     * @alias module:model/VolumeAccessInfo
     */
    constructor() { 
        
        VolumeAccessInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeAccessInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeAccessInfo} obj Optional instance to populate.
     * @return {module:model/VolumeAccessInfo} The populated <code>VolumeAccessInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeAccessInfo();

            if (data.hasOwnProperty('accessViewStatus')) {
                obj['accessViewStatus'] = ApiClient.convertToType(data['accessViewStatus'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('downloadAccess')) {
                obj['downloadAccess'] = DownloadAccessRestriction.constructFromObject(data['downloadAccess']);
            }
            if (data.hasOwnProperty('driveImportedContentLink')) {
                obj['driveImportedContentLink'] = ApiClient.convertToType(data['driveImportedContentLink'], 'String');
            }
            if (data.hasOwnProperty('embeddable')) {
                obj['embeddable'] = ApiClient.convertToType(data['embeddable'], 'Boolean');
            }
            if (data.hasOwnProperty('epub')) {
                obj['epub'] = VolumeAccessInfoEpub.constructFromObject(data['epub']);
            }
            if (data.hasOwnProperty('explicitOfflineLicenseManagement')) {
                obj['explicitOfflineLicenseManagement'] = ApiClient.convertToType(data['explicitOfflineLicenseManagement'], 'Boolean');
            }
            if (data.hasOwnProperty('pdf')) {
                obj['pdf'] = VolumeAccessInfoPdf.constructFromObject(data['pdf']);
            }
            if (data.hasOwnProperty('publicDomain')) {
                obj['publicDomain'] = ApiClient.convertToType(data['publicDomain'], 'Boolean');
            }
            if (data.hasOwnProperty('quoteSharingAllowed')) {
                obj['quoteSharingAllowed'] = ApiClient.convertToType(data['quoteSharingAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('textToSpeechPermission')) {
                obj['textToSpeechPermission'] = ApiClient.convertToType(data['textToSpeechPermission'], 'String');
            }
            if (data.hasOwnProperty('viewOrderUrl')) {
                obj['viewOrderUrl'] = ApiClient.convertToType(data['viewOrderUrl'], 'String');
            }
            if (data.hasOwnProperty('viewability')) {
                obj['viewability'] = ApiClient.convertToType(data['viewability'], 'String');
            }
            if (data.hasOwnProperty('webReaderLink')) {
                obj['webReaderLink'] = ApiClient.convertToType(data['webReaderLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeAccessInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeAccessInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessViewStatus'] && !(typeof data['accessViewStatus'] === 'string' || data['accessViewStatus'] instanceof String)) {
            throw new Error("Expected the field `accessViewStatus` to be a primitive type in the JSON string but got " + data['accessViewStatus']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `downloadAccess`
        if (data['downloadAccess']) { // data not null
          DownloadAccessRestriction.validateJSON(data['downloadAccess']);
        }
        // ensure the json data is a string
        if (data['driveImportedContentLink'] && !(typeof data['driveImportedContentLink'] === 'string' || data['driveImportedContentLink'] instanceof String)) {
            throw new Error("Expected the field `driveImportedContentLink` to be a primitive type in the JSON string but got " + data['driveImportedContentLink']);
        }
        // validate the optional field `epub`
        if (data['epub']) { // data not null
          VolumeAccessInfoEpub.validateJSON(data['epub']);
        }
        // validate the optional field `pdf`
        if (data['pdf']) { // data not null
          VolumeAccessInfoPdf.validateJSON(data['pdf']);
        }
        // ensure the json data is a string
        if (data['textToSpeechPermission'] && !(typeof data['textToSpeechPermission'] === 'string' || data['textToSpeechPermission'] instanceof String)) {
            throw new Error("Expected the field `textToSpeechPermission` to be a primitive type in the JSON string but got " + data['textToSpeechPermission']);
        }
        // ensure the json data is a string
        if (data['viewOrderUrl'] && !(typeof data['viewOrderUrl'] === 'string' || data['viewOrderUrl'] instanceof String)) {
            throw new Error("Expected the field `viewOrderUrl` to be a primitive type in the JSON string but got " + data['viewOrderUrl']);
        }
        // ensure the json data is a string
        if (data['viewability'] && !(typeof data['viewability'] === 'string' || data['viewability'] instanceof String)) {
            throw new Error("Expected the field `viewability` to be a primitive type in the JSON string but got " + data['viewability']);
        }
        // ensure the json data is a string
        if (data['webReaderLink'] && !(typeof data['webReaderLink'] === 'string' || data['webReaderLink'] instanceof String)) {
            throw new Error("Expected the field `webReaderLink` to be a primitive type in the JSON string but got " + data['webReaderLink']);
        }

        return true;
    }


}



/**
 * Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)
 * @member {String} accessViewStatus
 */
VolumeAccessInfo.prototype['accessViewStatus'] = undefined;

/**
 * The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)
 * @member {String} country
 */
VolumeAccessInfo.prototype['country'] = undefined;

/**
 * @member {module:model/DownloadAccessRestriction} downloadAccess
 */
VolumeAccessInfo.prototype['downloadAccess'] = undefined;

/**
 * URL to the Google Drive viewer if this volume is uploaded by the user by selecting the file from Google Drive.
 * @member {String} driveImportedContentLink
 */
VolumeAccessInfo.prototype['driveImportedContentLink'] = undefined;

/**
 * Whether this volume can be embedded in a viewport using the Embedded Viewer API.
 * @member {Boolean} embeddable
 */
VolumeAccessInfo.prototype['embeddable'] = undefined;

/**
 * @member {module:model/VolumeAccessInfoEpub} epub
 */
VolumeAccessInfo.prototype['epub'] = undefined;

/**
 * Whether this volume requires that the client explicitly request offline download license rather than have it done automatically when loading the content, if the client supports it.
 * @member {Boolean} explicitOfflineLicenseManagement
 */
VolumeAccessInfo.prototype['explicitOfflineLicenseManagement'] = undefined;

/**
 * @member {module:model/VolumeAccessInfoPdf} pdf
 */
VolumeAccessInfo.prototype['pdf'] = undefined;

/**
 * Whether or not this book is public domain in the country listed above.
 * @member {Boolean} publicDomain
 */
VolumeAccessInfo.prototype['publicDomain'] = undefined;

/**
 * Whether quote sharing is allowed for this volume.
 * @member {Boolean} quoteSharingAllowed
 */
VolumeAccessInfo.prototype['quoteSharingAllowed'] = undefined;

/**
 * Whether text-to-speech is permitted for this volume. Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.
 * @member {String} textToSpeechPermission
 */
VolumeAccessInfo.prototype['textToSpeechPermission'] = undefined;

/**
 * For ordered but not yet processed orders, we give a URL that can be used to go to the appropriate Google Wallet page.
 * @member {String} viewOrderUrl
 */
VolumeAccessInfo.prototype['viewOrderUrl'] = undefined;

/**
 * The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.
 * @member {String} viewability
 */
VolumeAccessInfo.prototype['viewability'] = undefined;

/**
 * URL to read this volume on the Google Books site. Link will not allow users to read non-viewable volumes.
 * @member {String} webReaderLink
 */
VolumeAccessInfo.prototype['webReaderLink'] = undefined;






export default VolumeAccessInfo;

