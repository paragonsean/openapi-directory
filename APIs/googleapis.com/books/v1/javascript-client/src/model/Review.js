/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReviewAuthor from './ReviewAuthor';
import ReviewSource from './ReviewSource';

/**
 * The Review model module.
 * @module model/Review
 * @version v1
 */
class Review {
    /**
     * Constructs a new <code>Review</code>.
     * @alias module:model/Review
     */
    constructor() { 
        
        Review.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Review</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Review} obj Optional instance to populate.
     * @return {module:model/Review} The populated <code>Review</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Review();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ReviewAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('fullTextUrl')) {
                obj['fullTextUrl'] = ApiClient.convertToType(data['fullTextUrl'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ReviewSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('volumeId')) {
                obj['volumeId'] = ApiClient.convertToType(data['volumeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Review</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Review</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          ReviewAuthor.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['fullTextUrl'] && !(typeof data['fullTextUrl'] === 'string' || data['fullTextUrl'] instanceof String)) {
            throw new Error("Expected the field `fullTextUrl` to be a primitive type in the JSON string but got " + data['fullTextUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ReviewSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['volumeId'] && !(typeof data['volumeId'] === 'string' || data['volumeId'] instanceof String)) {
            throw new Error("Expected the field `volumeId` to be a primitive type in the JSON string but got " + data['volumeId']);
        }

        return true;
    }


}



/**
 * @member {module:model/ReviewAuthor} author
 */
Review.prototype['author'] = undefined;

/**
 * Review text.
 * @member {String} content
 */
Review.prototype['content'] = undefined;

/**
 * Date of this review.
 * @member {String} date
 */
Review.prototype['date'] = undefined;

/**
 * URL for the full review text, for reviews gathered from the web.
 * @member {String} fullTextUrl
 */
Review.prototype['fullTextUrl'] = undefined;

/**
 * Resource type for a review.
 * @member {String} kind
 */
Review.prototype['kind'] = undefined;

/**
 * Star rating for this review. Possible values are ONE, TWO, THREE, FOUR, FIVE or NOT_RATED.
 * @member {String} rating
 */
Review.prototype['rating'] = undefined;

/**
 * @member {module:model/ReviewSource} source
 */
Review.prototype['source'] = undefined;

/**
 * Title for this review.
 * @member {String} title
 */
Review.prototype['title'] = undefined;

/**
 * Source type for this review. Possible values are EDITORIAL, WEB_USER or GOOGLE_USER.
 * @member {String} type
 */
Review.prototype['type'] = undefined;

/**
 * Volume that this review is for.
 * @member {String} volumeId
 */
Review.prototype['volumeId'] = undefined;






export default Review;

