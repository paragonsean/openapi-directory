/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeseriesinfoVolumeSeriesInnerIssueInner from './VolumeseriesinfoVolumeSeriesInnerIssueInner';

/**
 * The VolumeseriesinfoVolumeSeriesInner model module.
 * @module model/VolumeseriesinfoVolumeSeriesInner
 * @version v1
 */
class VolumeseriesinfoVolumeSeriesInner {
    /**
     * Constructs a new <code>VolumeseriesinfoVolumeSeriesInner</code>.
     * @alias module:model/VolumeseriesinfoVolumeSeriesInner
     */
    constructor() { 
        
        VolumeseriesinfoVolumeSeriesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeseriesinfoVolumeSeriesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeseriesinfoVolumeSeriesInner} obj Optional instance to populate.
     * @return {module:model/VolumeseriesinfoVolumeSeriesInner} The populated <code>VolumeseriesinfoVolumeSeriesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeseriesinfoVolumeSeriesInner();

            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], [VolumeseriesinfoVolumeSeriesInnerIssueInner]);
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'Number');
            }
            if (data.hasOwnProperty('seriesBookType')) {
                obj['seriesBookType'] = ApiClient.convertToType(data['seriesBookType'], 'String');
            }
            if (data.hasOwnProperty('seriesId')) {
                obj['seriesId'] = ApiClient.convertToType(data['seriesId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeseriesinfoVolumeSeriesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeseriesinfoVolumeSeriesInner</code>.
     */
    static validateJSON(data) {
        if (data['issue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issue'])) {
                throw new Error("Expected the field `issue` to be an array in the JSON data but got " + data['issue']);
            }
            // validate the optional field `issue` (array)
            for (const item of data['issue']) {
                VolumeseriesinfoVolumeSeriesInnerIssueInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['seriesBookType'] && !(typeof data['seriesBookType'] === 'string' || data['seriesBookType'] instanceof String)) {
            throw new Error("Expected the field `seriesBookType` to be a primitive type in the JSON string but got " + data['seriesBookType']);
        }
        // ensure the json data is a string
        if (data['seriesId'] && !(typeof data['seriesId'] === 'string' || data['seriesId'] instanceof String)) {
            throw new Error("Expected the field `seriesId` to be a primitive type in the JSON string but got " + data['seriesId']);
        }

        return true;
    }


}



/**
 * List of issues. Applicable only for Collection Edition and Omnibus.
 * @member {Array.<module:model/VolumeseriesinfoVolumeSeriesInnerIssueInner>} issue
 */
VolumeseriesinfoVolumeSeriesInner.prototype['issue'] = undefined;

/**
 * The book order number in the series.
 * @member {Number} orderNumber
 */
VolumeseriesinfoVolumeSeriesInner.prototype['orderNumber'] = undefined;

/**
 * The book type in the context of series. Examples - Single Issue, Collection Edition, etc.
 * @member {String} seriesBookType
 */
VolumeseriesinfoVolumeSeriesInner.prototype['seriesBookType'] = undefined;

/**
 * The series id.
 * @member {String} seriesId
 */
VolumeseriesinfoVolumeSeriesInner.prototype['seriesId'] = undefined;






export default VolumeseriesinfoVolumeSeriesInner;

