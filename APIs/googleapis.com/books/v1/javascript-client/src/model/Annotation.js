/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationClientVersionRanges from './AnnotationClientVersionRanges';
import AnnotationCurrentVersionRanges from './AnnotationCurrentVersionRanges';
import AnnotationLayerSummary from './AnnotationLayerSummary';

/**
 * The Annotation model module.
 * @module model/Annotation
 * @version v1
 */
class Annotation {
    /**
     * Constructs a new <code>Annotation</code>.
     * @alias module:model/Annotation
     */
    constructor() { 
        
        Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Annotation} obj Optional instance to populate.
     * @return {module:model/Annotation} The populated <code>Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Annotation();

            if (data.hasOwnProperty('afterSelectedText')) {
                obj['afterSelectedText'] = ApiClient.convertToType(data['afterSelectedText'], 'String');
            }
            if (data.hasOwnProperty('beforeSelectedText')) {
                obj['beforeSelectedText'] = ApiClient.convertToType(data['beforeSelectedText'], 'String');
            }
            if (data.hasOwnProperty('clientVersionRanges')) {
                obj['clientVersionRanges'] = AnnotationClientVersionRanges.constructFromObject(data['clientVersionRanges']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('currentVersionRanges')) {
                obj['currentVersionRanges'] = AnnotationCurrentVersionRanges.constructFromObject(data['currentVersionRanges']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('highlightStyle')) {
                obj['highlightStyle'] = ApiClient.convertToType(data['highlightStyle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('layerId')) {
                obj['layerId'] = ApiClient.convertToType(data['layerId'], 'String');
            }
            if (data.hasOwnProperty('layerSummary')) {
                obj['layerSummary'] = AnnotationLayerSummary.constructFromObject(data['layerSummary']);
            }
            if (data.hasOwnProperty('pageIds')) {
                obj['pageIds'] = ApiClient.convertToType(data['pageIds'], ['String']);
            }
            if (data.hasOwnProperty('selectedText')) {
                obj['selectedText'] = ApiClient.convertToType(data['selectedText'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('volumeId')) {
                obj['volumeId'] = ApiClient.convertToType(data['volumeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Annotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['afterSelectedText'] && !(typeof data['afterSelectedText'] === 'string' || data['afterSelectedText'] instanceof String)) {
            throw new Error("Expected the field `afterSelectedText` to be a primitive type in the JSON string but got " + data['afterSelectedText']);
        }
        // ensure the json data is a string
        if (data['beforeSelectedText'] && !(typeof data['beforeSelectedText'] === 'string' || data['beforeSelectedText'] instanceof String)) {
            throw new Error("Expected the field `beforeSelectedText` to be a primitive type in the JSON string but got " + data['beforeSelectedText']);
        }
        // validate the optional field `clientVersionRanges`
        if (data['clientVersionRanges']) { // data not null
          AnnotationClientVersionRanges.validateJSON(data['clientVersionRanges']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // validate the optional field `currentVersionRanges`
        if (data['currentVersionRanges']) { // data not null
          AnnotationCurrentVersionRanges.validateJSON(data['currentVersionRanges']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['highlightStyle'] && !(typeof data['highlightStyle'] === 'string' || data['highlightStyle'] instanceof String)) {
            throw new Error("Expected the field `highlightStyle` to be a primitive type in the JSON string but got " + data['highlightStyle']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['layerId'] && !(typeof data['layerId'] === 'string' || data['layerId'] instanceof String)) {
            throw new Error("Expected the field `layerId` to be a primitive type in the JSON string but got " + data['layerId']);
        }
        // validate the optional field `layerSummary`
        if (data['layerSummary']) { // data not null
          AnnotationLayerSummary.validateJSON(data['layerSummary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageIds'])) {
            throw new Error("Expected the field `pageIds` to be an array in the JSON data but got " + data['pageIds']);
        }
        // ensure the json data is a string
        if (data['selectedText'] && !(typeof data['selectedText'] === 'string' || data['selectedText'] instanceof String)) {
            throw new Error("Expected the field `selectedText` to be a primitive type in the JSON string but got " + data['selectedText']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['volumeId'] && !(typeof data['volumeId'] === 'string' || data['volumeId'] instanceof String)) {
            throw new Error("Expected the field `volumeId` to be a primitive type in the JSON string but got " + data['volumeId']);
        }

        return true;
    }


}



/**
 * Anchor text after excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.
 * @member {String} afterSelectedText
 */
Annotation.prototype['afterSelectedText'] = undefined;

/**
 * Anchor text before excerpt. For requests, if the user bookmarked a screen that has no flowing text on it, then this field should be empty.
 * @member {String} beforeSelectedText
 */
Annotation.prototype['beforeSelectedText'] = undefined;

/**
 * @member {module:model/AnnotationClientVersionRanges} clientVersionRanges
 */
Annotation.prototype['clientVersionRanges'] = undefined;

/**
 * Timestamp for the created time of this annotation.
 * @member {String} created
 */
Annotation.prototype['created'] = undefined;

/**
 * @member {module:model/AnnotationCurrentVersionRanges} currentVersionRanges
 */
Annotation.prototype['currentVersionRanges'] = undefined;

/**
 * User-created data for this annotation.
 * @member {String} data
 */
Annotation.prototype['data'] = undefined;

/**
 * Indicates that this annotation is deleted.
 * @member {Boolean} deleted
 */
Annotation.prototype['deleted'] = undefined;

/**
 * The highlight style for this annotation.
 * @member {String} highlightStyle
 */
Annotation.prototype['highlightStyle'] = undefined;

/**
 * Id of this annotation, in the form of a GUID.
 * @member {String} id
 */
Annotation.prototype['id'] = undefined;

/**
 * Resource type.
 * @member {String} kind
 */
Annotation.prototype['kind'] = undefined;

/**
 * The layer this annotation is for.
 * @member {String} layerId
 */
Annotation.prototype['layerId'] = undefined;

/**
 * @member {module:model/AnnotationLayerSummary} layerSummary
 */
Annotation.prototype['layerSummary'] = undefined;

/**
 * Pages that this annotation spans.
 * @member {Array.<String>} pageIds
 */
Annotation.prototype['pageIds'] = undefined;

/**
 * Excerpt from the volume.
 * @member {String} selectedText
 */
Annotation.prototype['selectedText'] = undefined;

/**
 * URL to this resource.
 * @member {String} selfLink
 */
Annotation.prototype['selfLink'] = undefined;

/**
 * Timestamp for the last time this annotation was modified.
 * @member {String} updated
 */
Annotation.prototype['updated'] = undefined;

/**
 * The volume that this annotation belongs to.
 * @member {String} volumeId
 */
Annotation.prototype['volumeId'] = undefined;






export default Annotation;

