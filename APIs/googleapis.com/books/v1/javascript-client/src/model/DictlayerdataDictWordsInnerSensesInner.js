/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DictlayerdataDictWordsInnerDerivativesInner from './DictlayerdataDictWordsInnerDerivativesInner';
import DictlayerdataDictWordsInnerDerivativesInnerSource from './DictlayerdataDictWordsInnerDerivativesInnerSource';
import DictlayerdataDictWordsInnerSensesInnerConjugationsInner from './DictlayerdataDictWordsInnerSensesInnerConjugationsInner';
import DictlayerdataDictWordsInnerSensesInnerDefinitionsInner from './DictlayerdataDictWordsInnerSensesInnerDefinitionsInner';

/**
 * The DictlayerdataDictWordsInnerSensesInner model module.
 * @module model/DictlayerdataDictWordsInnerSensesInner
 * @version v1
 */
class DictlayerdataDictWordsInnerSensesInner {
    /**
     * Constructs a new <code>DictlayerdataDictWordsInnerSensesInner</code>.
     * @alias module:model/DictlayerdataDictWordsInnerSensesInner
     */
    constructor() { 
        
        DictlayerdataDictWordsInnerSensesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DictlayerdataDictWordsInnerSensesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DictlayerdataDictWordsInnerSensesInner} obj Optional instance to populate.
     * @return {module:model/DictlayerdataDictWordsInnerSensesInner} The populated <code>DictlayerdataDictWordsInnerSensesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DictlayerdataDictWordsInnerSensesInner();

            if (data.hasOwnProperty('conjugations')) {
                obj['conjugations'] = ApiClient.convertToType(data['conjugations'], [DictlayerdataDictWordsInnerSensesInnerConjugationsInner]);
            }
            if (data.hasOwnProperty('definitions')) {
                obj['definitions'] = ApiClient.convertToType(data['definitions'], [DictlayerdataDictWordsInnerSensesInnerDefinitionsInner]);
            }
            if (data.hasOwnProperty('partOfSpeech')) {
                obj['partOfSpeech'] = ApiClient.convertToType(data['partOfSpeech'], 'String');
            }
            if (data.hasOwnProperty('pronunciation')) {
                obj['pronunciation'] = ApiClient.convertToType(data['pronunciation'], 'String');
            }
            if (data.hasOwnProperty('pronunciationUrl')) {
                obj['pronunciationUrl'] = ApiClient.convertToType(data['pronunciationUrl'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = DictlayerdataDictWordsInnerDerivativesInnerSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('syllabification')) {
                obj['syllabification'] = ApiClient.convertToType(data['syllabification'], 'String');
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], [DictlayerdataDictWordsInnerDerivativesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DictlayerdataDictWordsInnerSensesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DictlayerdataDictWordsInnerSensesInner</code>.
     */
    static validateJSON(data) {
        if (data['conjugations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conjugations'])) {
                throw new Error("Expected the field `conjugations` to be an array in the JSON data but got " + data['conjugations']);
            }
            // validate the optional field `conjugations` (array)
            for (const item of data['conjugations']) {
                DictlayerdataDictWordsInnerSensesInnerConjugationsInner.validateJSON(item);
            };
        }
        if (data['definitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['definitions'])) {
                throw new Error("Expected the field `definitions` to be an array in the JSON data but got " + data['definitions']);
            }
            // validate the optional field `definitions` (array)
            for (const item of data['definitions']) {
                DictlayerdataDictWordsInnerSensesInnerDefinitionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['partOfSpeech'] && !(typeof data['partOfSpeech'] === 'string' || data['partOfSpeech'] instanceof String)) {
            throw new Error("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got " + data['partOfSpeech']);
        }
        // ensure the json data is a string
        if (data['pronunciation'] && !(typeof data['pronunciation'] === 'string' || data['pronunciation'] instanceof String)) {
            throw new Error("Expected the field `pronunciation` to be a primitive type in the JSON string but got " + data['pronunciation']);
        }
        // ensure the json data is a string
        if (data['pronunciationUrl'] && !(typeof data['pronunciationUrl'] === 'string' || data['pronunciationUrl'] instanceof String)) {
            throw new Error("Expected the field `pronunciationUrl` to be a primitive type in the JSON string but got " + data['pronunciationUrl']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          DictlayerdataDictWordsInnerDerivativesInnerSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['syllabification'] && !(typeof data['syllabification'] === 'string' || data['syllabification'] instanceof String)) {
            throw new Error("Expected the field `syllabification` to be a primitive type in the JSON string but got " + data['syllabification']);
        }
        if (data['synonyms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['synonyms'])) {
                throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
            }
            // validate the optional field `synonyms` (array)
            for (const item of data['synonyms']) {
                DictlayerdataDictWordsInnerDerivativesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DictlayerdataDictWordsInnerSensesInnerConjugationsInner>} conjugations
 */
DictlayerdataDictWordsInnerSensesInner.prototype['conjugations'] = undefined;

/**
 * @member {Array.<module:model/DictlayerdataDictWordsInnerSensesInnerDefinitionsInner>} definitions
 */
DictlayerdataDictWordsInnerSensesInner.prototype['definitions'] = undefined;

/**
 * @member {String} partOfSpeech
 */
DictlayerdataDictWordsInnerSensesInner.prototype['partOfSpeech'] = undefined;

/**
 * @member {String} pronunciation
 */
DictlayerdataDictWordsInnerSensesInner.prototype['pronunciation'] = undefined;

/**
 * @member {String} pronunciationUrl
 */
DictlayerdataDictWordsInnerSensesInner.prototype['pronunciationUrl'] = undefined;

/**
 * @member {module:model/DictlayerdataDictWordsInnerDerivativesInnerSource} source
 */
DictlayerdataDictWordsInnerSensesInner.prototype['source'] = undefined;

/**
 * @member {String} syllabification
 */
DictlayerdataDictWordsInnerSensesInner.prototype['syllabification'] = undefined;

/**
 * @member {Array.<module:model/DictlayerdataDictWordsInnerDerivativesInner>} synonyms
 */
DictlayerdataDictWordsInnerSensesInner.prototype['synonyms'] = undefined;






export default DictlayerdataDictWordsInnerSensesInner;

