/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Notification model module.
 * @module model/Notification
 * @version v1
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * @alias module:model/Notification
     */
    constructor() { 
        
        Notification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('crmExperimentIds')) {
                obj['crmExperimentIds'] = ApiClient.convertToType(data['crmExperimentIds'], ['String']);
            }
            if (data.hasOwnProperty('doc_id')) {
                obj['doc_id'] = ApiClient.convertToType(data['doc_id'], 'String');
            }
            if (data.hasOwnProperty('doc_type')) {
                obj['doc_type'] = ApiClient.convertToType(data['doc_type'], 'String');
            }
            if (data.hasOwnProperty('dont_show_notification')) {
                obj['dont_show_notification'] = ApiClient.convertToType(data['dont_show_notification'], 'Boolean');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('is_document_mature')) {
                obj['is_document_mature'] = ApiClient.convertToType(data['is_document_mature'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('notificationGroup')) {
                obj['notificationGroup'] = ApiClient.convertToType(data['notificationGroup'], 'String');
            }
            if (data.hasOwnProperty('notification_type')) {
                obj['notification_type'] = ApiClient.convertToType(data['notification_type'], 'String');
            }
            if (data.hasOwnProperty('pcampaign_id')) {
                obj['pcampaign_id'] = ApiClient.convertToType(data['pcampaign_id'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('show_notification_settings_action')) {
                obj['show_notification_settings_action'] = ApiClient.convertToType(data['show_notification_settings_action'], 'Boolean');
            }
            if (data.hasOwnProperty('targetUrl')) {
                obj['targetUrl'] = ApiClient.convertToType(data['targetUrl'], 'String');
            }
            if (data.hasOwnProperty('timeToExpireMs')) {
                obj['timeToExpireMs'] = ApiClient.convertToType(data['timeToExpireMs'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['crmExperimentIds'])) {
            throw new Error("Expected the field `crmExperimentIds` to be an array in the JSON data but got " + data['crmExperimentIds']);
        }
        // ensure the json data is a string
        if (data['doc_id'] && !(typeof data['doc_id'] === 'string' || data['doc_id'] instanceof String)) {
            throw new Error("Expected the field `doc_id` to be a primitive type in the JSON string but got " + data['doc_id']);
        }
        // ensure the json data is a string
        if (data['doc_type'] && !(typeof data['doc_type'] === 'string' || data['doc_type'] instanceof String)) {
            throw new Error("Expected the field `doc_type` to be a primitive type in the JSON string but got " + data['doc_type']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['notificationGroup'] && !(typeof data['notificationGroup'] === 'string' || data['notificationGroup'] instanceof String)) {
            throw new Error("Expected the field `notificationGroup` to be a primitive type in the JSON string but got " + data['notificationGroup']);
        }
        // ensure the json data is a string
        if (data['notification_type'] && !(typeof data['notification_type'] === 'string' || data['notification_type'] instanceof String)) {
            throw new Error("Expected the field `notification_type` to be a primitive type in the JSON string but got " + data['notification_type']);
        }
        // ensure the json data is a string
        if (data['pcampaign_id'] && !(typeof data['pcampaign_id'] === 'string' || data['pcampaign_id'] instanceof String)) {
            throw new Error("Expected the field `pcampaign_id` to be a primitive type in the JSON string but got " + data['pcampaign_id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['targetUrl'] && !(typeof data['targetUrl'] === 'string' || data['targetUrl'] instanceof String)) {
            throw new Error("Expected the field `targetUrl` to be a primitive type in the JSON string but got " + data['targetUrl']);
        }
        // ensure the json data is a string
        if (data['timeToExpireMs'] && !(typeof data['timeToExpireMs'] === 'string' || data['timeToExpireMs'] instanceof String)) {
            throw new Error("Expected the field `timeToExpireMs` to be a primitive type in the JSON string but got " + data['timeToExpireMs']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} body
 */
Notification.prototype['body'] = undefined;

/**
 * The list of crm experiment ids.
 * @member {Array.<String>} crmExperimentIds
 */
Notification.prototype['crmExperimentIds'] = undefined;

/**
 * @member {String} doc_id
 */
Notification.prototype['doc_id'] = undefined;

/**
 * @member {String} doc_type
 */
Notification.prototype['doc_type'] = undefined;

/**
 * @member {Boolean} dont_show_notification
 */
Notification.prototype['dont_show_notification'] = undefined;

/**
 * @member {String} iconUrl
 */
Notification.prototype['iconUrl'] = undefined;

/**
 * @member {Boolean} is_document_mature
 */
Notification.prototype['is_document_mature'] = undefined;

/**
 * Resource type.
 * @member {String} kind
 */
Notification.prototype['kind'] = undefined;

/**
 * @member {String} notificationGroup
 */
Notification.prototype['notificationGroup'] = undefined;

/**
 * @member {String} notification_type
 */
Notification.prototype['notification_type'] = undefined;

/**
 * @member {String} pcampaign_id
 */
Notification.prototype['pcampaign_id'] = undefined;

/**
 * @member {String} reason
 */
Notification.prototype['reason'] = undefined;

/**
 * @member {Boolean} show_notification_settings_action
 */
Notification.prototype['show_notification_settings_action'] = undefined;

/**
 * @member {String} targetUrl
 */
Notification.prototype['targetUrl'] = undefined;

/**
 * @member {String} timeToExpireMs
 */
Notification.prototype['timeToExpireMs'] = undefined;

/**
 * @member {String} title
 */
Notification.prototype['title'] = undefined;






export default Notification;

