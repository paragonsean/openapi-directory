/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeAccessInfo from './VolumeAccessInfo';
import VolumeLayerInfo from './VolumeLayerInfo';
import VolumeRecommendedInfo from './VolumeRecommendedInfo';
import VolumeSaleInfo from './VolumeSaleInfo';
import VolumeSearchInfo from './VolumeSearchInfo';
import VolumeUserInfo from './VolumeUserInfo';
import VolumeVolumeInfo from './VolumeVolumeInfo';

/**
 * The Volume model module.
 * @module model/Volume
 * @version v1
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * @alias module:model/Volume
     */
    constructor() { 
        
        Volume.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('accessInfo')) {
                obj['accessInfo'] = VolumeAccessInfo.constructFromObject(data['accessInfo']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('layerInfo')) {
                obj['layerInfo'] = VolumeLayerInfo.constructFromObject(data['layerInfo']);
            }
            if (data.hasOwnProperty('recommendedInfo')) {
                obj['recommendedInfo'] = VolumeRecommendedInfo.constructFromObject(data['recommendedInfo']);
            }
            if (data.hasOwnProperty('saleInfo')) {
                obj['saleInfo'] = VolumeSaleInfo.constructFromObject(data['saleInfo']);
            }
            if (data.hasOwnProperty('searchInfo')) {
                obj['searchInfo'] = VolumeSearchInfo.constructFromObject(data['searchInfo']);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('userInfo')) {
                obj['userInfo'] = VolumeUserInfo.constructFromObject(data['userInfo']);
            }
            if (data.hasOwnProperty('volumeInfo')) {
                obj['volumeInfo'] = VolumeVolumeInfo.constructFromObject(data['volumeInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessInfo`
        if (data['accessInfo']) { // data not null
          VolumeAccessInfo.validateJSON(data['accessInfo']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `layerInfo`
        if (data['layerInfo']) { // data not null
          VolumeLayerInfo.validateJSON(data['layerInfo']);
        }
        // validate the optional field `recommendedInfo`
        if (data['recommendedInfo']) { // data not null
          VolumeRecommendedInfo.validateJSON(data['recommendedInfo']);
        }
        // validate the optional field `saleInfo`
        if (data['saleInfo']) { // data not null
          VolumeSaleInfo.validateJSON(data['saleInfo']);
        }
        // validate the optional field `searchInfo`
        if (data['searchInfo']) { // data not null
          VolumeSearchInfo.validateJSON(data['searchInfo']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // validate the optional field `userInfo`
        if (data['userInfo']) { // data not null
          VolumeUserInfo.validateJSON(data['userInfo']);
        }
        // validate the optional field `volumeInfo`
        if (data['volumeInfo']) { // data not null
          VolumeVolumeInfo.validateJSON(data['volumeInfo']);
        }

        return true;
    }


}



/**
 * @member {module:model/VolumeAccessInfo} accessInfo
 */
Volume.prototype['accessInfo'] = undefined;

/**
 * Opaque identifier for a specific version of a volume resource. (In LITE projection)
 * @member {String} etag
 */
Volume.prototype['etag'] = undefined;

/**
 * Unique identifier for a volume. (In LITE projection.)
 * @member {String} id
 */
Volume.prototype['id'] = undefined;

/**
 * Resource type for a volume. (In LITE projection.)
 * @member {String} kind
 */
Volume.prototype['kind'] = undefined;

/**
 * @member {module:model/VolumeLayerInfo} layerInfo
 */
Volume.prototype['layerInfo'] = undefined;

/**
 * @member {module:model/VolumeRecommendedInfo} recommendedInfo
 */
Volume.prototype['recommendedInfo'] = undefined;

/**
 * @member {module:model/VolumeSaleInfo} saleInfo
 */
Volume.prototype['saleInfo'] = undefined;

/**
 * @member {module:model/VolumeSearchInfo} searchInfo
 */
Volume.prototype['searchInfo'] = undefined;

/**
 * URL to this resource. (In LITE projection.)
 * @member {String} selfLink
 */
Volume.prototype['selfLink'] = undefined;

/**
 * @member {module:model/VolumeUserInfo} userInfo
 */
Volume.prototype['userInfo'] = undefined;

/**
 * @member {module:model/VolumeVolumeInfo} volumeInfo
 */
Volume.prototype['volumeInfo'] = undefined;






export default Volume;

