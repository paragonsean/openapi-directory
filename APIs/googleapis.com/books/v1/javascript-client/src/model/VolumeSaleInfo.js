/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeSaleInfoListPrice from './VolumeSaleInfoListPrice';
import VolumeSaleInfoOffersInner from './VolumeSaleInfoOffersInner';
import VolumeSaleInfoRetailPrice from './VolumeSaleInfoRetailPrice';

/**
 * The VolumeSaleInfo model module.
 * @module model/VolumeSaleInfo
 * @version v1
 */
class VolumeSaleInfo {
    /**
     * Constructs a new <code>VolumeSaleInfo</code>.
     * Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).
     * @alias module:model/VolumeSaleInfo
     */
    constructor() { 
        
        VolumeSaleInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeSaleInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeSaleInfo} obj Optional instance to populate.
     * @return {module:model/VolumeSaleInfo} The populated <code>VolumeSaleInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeSaleInfo();

            if (data.hasOwnProperty('buyLink')) {
                obj['buyLink'] = ApiClient.convertToType(data['buyLink'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('isEbook')) {
                obj['isEbook'] = ApiClient.convertToType(data['isEbook'], 'Boolean');
            }
            if (data.hasOwnProperty('listPrice')) {
                obj['listPrice'] = VolumeSaleInfoListPrice.constructFromObject(data['listPrice']);
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [VolumeSaleInfoOffersInner]);
            }
            if (data.hasOwnProperty('onSaleDate')) {
                obj['onSaleDate'] = ApiClient.convertToType(data['onSaleDate'], 'String');
            }
            if (data.hasOwnProperty('retailPrice')) {
                obj['retailPrice'] = VolumeSaleInfoRetailPrice.constructFromObject(data['retailPrice']);
            }
            if (data.hasOwnProperty('saleability')) {
                obj['saleability'] = ApiClient.convertToType(data['saleability'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeSaleInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeSaleInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buyLink'] && !(typeof data['buyLink'] === 'string' || data['buyLink'] instanceof String)) {
            throw new Error("Expected the field `buyLink` to be a primitive type in the JSON string but got " + data['buyLink']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `listPrice`
        if (data['listPrice']) { // data not null
          VolumeSaleInfoListPrice.validateJSON(data['listPrice']);
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                VolumeSaleInfoOffersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['onSaleDate'] && !(typeof data['onSaleDate'] === 'string' || data['onSaleDate'] instanceof String)) {
            throw new Error("Expected the field `onSaleDate` to be a primitive type in the JSON string but got " + data['onSaleDate']);
        }
        // validate the optional field `retailPrice`
        if (data['retailPrice']) { // data not null
          VolumeSaleInfoRetailPrice.validateJSON(data['retailPrice']);
        }
        // ensure the json data is a string
        if (data['saleability'] && !(typeof data['saleability'] === 'string' || data['saleability'] instanceof String)) {
            throw new Error("Expected the field `saleability` to be a primitive type in the JSON string but got " + data['saleability']);
        }

        return true;
    }


}



/**
 * URL to purchase this volume on the Google Books site. (In LITE projection)
 * @member {String} buyLink
 */
VolumeSaleInfo.prototype['buyLink'] = undefined;

/**
 * The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)
 * @member {String} country
 */
VolumeSaleInfo.prototype['country'] = undefined;

/**
 * Whether or not this volume is an eBook (can be added to the My eBooks shelf).
 * @member {Boolean} isEbook
 */
VolumeSaleInfo.prototype['isEbook'] = undefined;

/**
 * @member {module:model/VolumeSaleInfoListPrice} listPrice
 */
VolumeSaleInfo.prototype['listPrice'] = undefined;

/**
 * Offers available for this volume (sales and rentals).
 * @member {Array.<module:model/VolumeSaleInfoOffersInner>} offers
 */
VolumeSaleInfo.prototype['offers'] = undefined;

/**
 * The date on which this book is available for sale.
 * @member {String} onSaleDate
 */
VolumeSaleInfo.prototype['onSaleDate'] = undefined;

/**
 * @member {module:model/VolumeSaleInfoRetailPrice} retailPrice
 */
VolumeSaleInfo.prototype['retailPrice'] = undefined;

/**
 * Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or FOR_PREORDER.
 * @member {String} saleability
 */
VolumeSaleInfo.prototype['saleability'] = undefined;






export default VolumeSaleInfo;

