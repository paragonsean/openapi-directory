/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Bookshelf from '../model/Bookshelf';
import Bookshelves from '../model/Bookshelves';
import Volumes from '../model/Volumes';

/**
* Bookshelves service.
* @module api/BookshelvesApi
* @version v1
*/
export default class BookshelvesApi {

    /**
    * Constructs a new BookshelvesApi. 
    * @alias module:api/BookshelvesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the booksBookshelvesGet operation.
     * @callback module:api/BookshelvesApi~booksBookshelvesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metadata for a specific bookshelf for the specified user.
     * @param {String} userId ID of user for whom to retrieve bookshelves.
     * @param {String} shelf ID of bookshelf to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/BookshelvesApi~booksBookshelvesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelf}
     */
    booksBookshelvesGet(userId, shelf, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling booksBookshelvesGet");
      }
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksBookshelvesGet");
      }

      let pathParams = {
        'userId': userId,
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bookshelf;
      return this.apiClient.callApi(
        '/books/v1/users/{userId}/bookshelves/{shelf}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksBookshelvesList operation.
     * @callback module:api/BookshelvesApi~booksBookshelvesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelves} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of public bookshelves for the specified user.
     * @param {String} userId ID of user for whom to retrieve bookshelves.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/BookshelvesApi~booksBookshelvesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelves}
     */
    booksBookshelvesList(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling booksBookshelvesList");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bookshelves;
      return this.apiClient.callApi(
        '/books/v1/users/{userId}/bookshelves', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksBookshelvesVolumesList operation.
     * @callback module:api/BookshelvesApi~booksBookshelvesVolumesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volumes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves volumes in a specific bookshelf for the specified user.
     * @param {String} userId ID of user for whom to retrieve bookshelf volumes.
     * @param {String} shelf ID of bookshelf to retrieve volumes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {Boolean} [showPreorders] Set to true to show pre-ordered books. Defaults to false.
     * @param {String} [source] String to identify the originator of this request.
     * @param {Number} [startIndex] Index of the first element to return (starts at 0)
     * @param {module:api/BookshelvesApi~booksBookshelvesVolumesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volumes}
     */
    booksBookshelvesVolumesList(userId, shelf, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling booksBookshelvesVolumesList");
      }
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksBookshelvesVolumesList");
      }

      let pathParams = {
        'userId': userId,
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'showPreorders': opts['showPreorders'],
        'source': opts['source'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volumes;
      return this.apiClient.callApi(
        '/books/v1/users/{userId}/bookshelves/{shelf}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
