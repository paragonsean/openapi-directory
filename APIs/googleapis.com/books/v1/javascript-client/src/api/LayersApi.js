/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Annotationsdata from '../model/Annotationsdata';
import DictionaryAnnotationdata from '../model/DictionaryAnnotationdata';
import Layersummaries from '../model/Layersummaries';
import Layersummary from '../model/Layersummary';
import Volumeannotation from '../model/Volumeannotation';
import Volumeannotations from '../model/Volumeannotations';

/**
* Layers service.
* @module api/LayersApi
* @version v1
*/
export default class LayersApi {

    /**
    * Constructs a new LayersApi. 
    * @alias module:api/LayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the booksLayersAnnotationDataGet operation.
     * @callback module:api/LayersApi~booksLayersAnnotationDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DictionaryAnnotationdata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the annotation data.
     * @param {String} volumeId The volume to retrieve annotations for.
     * @param {String} layerId The ID for the layer to get the annotations.
     * @param {String} annotationDataId The ID of the annotation data to retrieve.
     * @param {String} contentVersion The content version for the volume you are trying to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [allowWebDefinitions] For the dictionary layer. Whether or not to allow web definitions.
     * @param {Number} [h] The requested pixel height for any images. If height is provided width must also be provided.
     * @param {String} [locale] The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.
     * @param {Number} [scale] The requested scale for the image.
     * @param {String} [source] String to identify the originator of this request.
     * @param {Number} [w] The requested pixel width for any images. If width is provided height must also be provided.
     * @param {module:api/LayersApi~booksLayersAnnotationDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DictionaryAnnotationdata}
     */
    booksLayersAnnotationDataGet(volumeId, layerId, annotationDataId, contentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersAnnotationDataGet");
      }
      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling booksLayersAnnotationDataGet");
      }
      // verify the required parameter 'annotationDataId' is set
      if (annotationDataId === undefined || annotationDataId === null) {
        throw new Error("Missing the required parameter 'annotationDataId' when calling booksLayersAnnotationDataGet");
      }
      // verify the required parameter 'contentVersion' is set
      if (contentVersion === undefined || contentVersion === null) {
        throw new Error("Missing the required parameter 'contentVersion' when calling booksLayersAnnotationDataGet");
      }

      let pathParams = {
        'volumeId': volumeId,
        'layerId': layerId,
        'annotationDataId': annotationDataId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': contentVersion,
        'allowWebDefinitions': opts['allowWebDefinitions'],
        'h': opts['h'],
        'locale': opts['locale'],
        'scale': opts['scale'],
        'source': opts['source'],
        'w': opts['w']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DictionaryAnnotationdata;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksLayersAnnotationDataList operation.
     * @callback module:api/LayersApi~booksLayersAnnotationDataListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotationsdata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the annotation data for a volume and layer.
     * @param {String} volumeId The volume to retrieve annotation data for.
     * @param {String} layerId The ID for the layer to get the annotation data.
     * @param {String} contentVersion The content version for the requested volume.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<String>} [annotationDataId] The list of Annotation Data Ids to retrieve. Pagination is ignored if this is set.
     * @param {Number} [h] The requested pixel height for any images. If height is provided width must also be provided.
     * @param {String} [locale] The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {String} [pageToken] The value of the nextToken from the previous page.
     * @param {Number} [scale] The requested scale for the image.
     * @param {String} [source] String to identify the originator of this request.
     * @param {String} [updatedMax] RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive).
     * @param {String} [updatedMin] RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive).
     * @param {Number} [w] The requested pixel width for any images. If width is provided height must also be provided.
     * @param {module:api/LayersApi~booksLayersAnnotationDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotationsdata}
     */
    booksLayersAnnotationDataList(volumeId, layerId, contentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersAnnotationDataList");
      }
      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling booksLayersAnnotationDataList");
      }
      // verify the required parameter 'contentVersion' is set
      if (contentVersion === undefined || contentVersion === null) {
        throw new Error("Missing the required parameter 'contentVersion' when calling booksLayersAnnotationDataList");
      }

      let pathParams = {
        'volumeId': volumeId,
        'layerId': layerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': contentVersion,
        'annotationDataId': this.apiClient.buildCollectionParam(opts['annotationDataId'], 'multi'),
        'h': opts['h'],
        'locale': opts['locale'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'scale': opts['scale'],
        'source': opts['source'],
        'updatedMax': opts['updatedMax'],
        'updatedMin': opts['updatedMin'],
        'w': opts['w']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Annotationsdata;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layers/{layerId}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksLayersGet operation.
     * @callback module:api/LayersApi~booksLayersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layersummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the layer summary for a volume.
     * @param {String} volumeId The volume to retrieve layers for.
     * @param {String} summaryId The ID for the layer to get the summary for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [contentVersion] The content version for the requested volume.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/LayersApi~booksLayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layersummary}
     */
    booksLayersGet(volumeId, summaryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersGet");
      }
      // verify the required parameter 'summaryId' is set
      if (summaryId === undefined || summaryId === null) {
        throw new Error("Missing the required parameter 'summaryId' when calling booksLayersGet");
      }

      let pathParams = {
        'volumeId': volumeId,
        'summaryId': summaryId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': opts['contentVersion'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layersummary;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layersummary/{summaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksLayersList operation.
     * @callback module:api/LayersApi~booksLayersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layersummaries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the layer summaries for a volume.
     * @param {String} volumeId The volume to retrieve layers for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [contentVersion] The content version for the requested volume.
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {String} [pageToken] The value of the nextToken from the previous page.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/LayersApi~booksLayersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layersummaries}
     */
    booksLayersList(volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersList");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': opts['contentVersion'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layersummaries;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layersummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksLayersVolumeAnnotationsGet operation.
     * @callback module:api/LayersApi~booksLayersVolumeAnnotationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volumeannotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the volume annotation.
     * @param {String} volumeId The volume to retrieve annotations for.
     * @param {String} layerId The ID for the layer to get the annotations.
     * @param {String} annotationId The ID of the volume annotation to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [locale] The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/LayersApi~booksLayersVolumeAnnotationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volumeannotation}
     */
    booksLayersVolumeAnnotationsGet(volumeId, layerId, annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersVolumeAnnotationsGet");
      }
      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling booksLayersVolumeAnnotationsGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling booksLayersVolumeAnnotationsGet");
      }

      let pathParams = {
        'volumeId': volumeId,
        'layerId': layerId,
        'annotationId': annotationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'locale': opts['locale'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volumeannotation;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksLayersVolumeAnnotationsList operation.
     * @callback module:api/LayersApi~booksLayersVolumeAnnotationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volumeannotations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the volume annotations for a volume and layer.
     * @param {String} volumeId The volume to retrieve annotations for.
     * @param {String} layerId The ID for the layer to get the annotations.
     * @param {String} contentVersion The content version for the requested volume.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [endOffset] The end offset to end retrieving data from.
     * @param {String} [endPosition] The end position to end retrieving data from.
     * @param {String} [locale] The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {String} [pageToken] The value of the nextToken from the previous page.
     * @param {Boolean} [showDeleted] Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false.
     * @param {String} [source] String to identify the originator of this request.
     * @param {String} [startOffset] The start offset to start retrieving data from.
     * @param {String} [startPosition] The start position to start retrieving data from.
     * @param {String} [updatedMax] RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive).
     * @param {String} [updatedMin] RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive).
     * @param {String} [volumeAnnotationsVersion] The version of the volume annotations that you are requesting.
     * @param {module:api/LayersApi~booksLayersVolumeAnnotationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volumeannotations}
     */
    booksLayersVolumeAnnotationsList(volumeId, layerId, contentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksLayersVolumeAnnotationsList");
      }
      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling booksLayersVolumeAnnotationsList");
      }
      // verify the required parameter 'contentVersion' is set
      if (contentVersion === undefined || contentVersion === null) {
        throw new Error("Missing the required parameter 'contentVersion' when calling booksLayersVolumeAnnotationsList");
      }

      let pathParams = {
        'volumeId': volumeId,
        'layerId': layerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': contentVersion,
        'endOffset': opts['endOffset'],
        'endPosition': opts['endPosition'],
        'locale': opts['locale'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'showDeleted': opts['showDeleted'],
        'source': opts['source'],
        'startOffset': opts['startOffset'],
        'startPosition': opts['startPosition'],
        'updatedMax': opts['updatedMax'],
        'updatedMin': opts['updatedMin'],
        'volumeAnnotationsVersion': opts['volumeAnnotationsVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volumeannotations;
      return this.apiClient.callApi(
        '/books/v1/volumes/{volumeId}/layers/{layerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
