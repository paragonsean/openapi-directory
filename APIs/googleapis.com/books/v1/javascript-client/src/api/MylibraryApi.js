/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Annotation from '../model/Annotation';
import Annotations from '../model/Annotations';
import AnnotationsSummary from '../model/AnnotationsSummary';
import Bookshelf from '../model/Bookshelf';
import Bookshelves from '../model/Bookshelves';
import ReadingPosition from '../model/ReadingPosition';
import Volumes from '../model/Volumes';

/**
* Mylibrary service.
* @module api/MylibraryApi
* @version v1
*/
export default class MylibraryApi {

    /**
    * Constructs a new MylibraryApi. 
    * @alias module:api/MylibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the booksMylibraryAnnotationsDelete operation.
     * @callback module:api/MylibraryApi~booksMylibraryAnnotationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an annotation.
     * @param {String} annotationId The ID for the annotation to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryAnnotationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryAnnotationsDelete(annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling booksMylibraryAnnotationsDelete");
      }

      let pathParams = {
        'annotationId': annotationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/annotations/{annotationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryAnnotationsInsert operation.
     * @callback module:api/MylibraryApi~booksMylibraryAnnotationsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a new annotation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [annotationId] The ID for the annotation to insert.
     * @param {String} [country] ISO-3166-1 code to override the IP-based location.
     * @param {Boolean} [showOnlySummaryInResponse] Requests that only the summary of the specified layer be provided in the response.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:model/Annotation} [annotation] 
     * @param {module:api/MylibraryApi~booksMylibraryAnnotationsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    booksMylibraryAnnotationsInsert(opts, callback) {
      opts = opts || {};
      let postBody = opts['annotation'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'annotationId': opts['annotationId'],
        'country': opts['country'],
        'showOnlySummaryInResponse': opts['showOnlySummaryInResponse'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/annotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryAnnotationsList operation.
     * @callback module:api/MylibraryApi~booksMylibraryAnnotationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of annotations, possibly filtered.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [contentVersion] The content version for the requested volume.
     * @param {String} [layerId] The layer ID to limit annotation by.
     * @param {Array.<String>} [layerIds] The layer ID(s) to limit annotation by.
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {String} [pageToken] The value of the nextToken from the previous page.
     * @param {Boolean} [showDeleted] Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false.
     * @param {String} [source] String to identify the originator of this request.
     * @param {String} [updatedMax] RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive).
     * @param {String} [updatedMin] RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive).
     * @param {String} [volumeId] The volume to restrict annotations to.
     * @param {module:api/MylibraryApi~booksMylibraryAnnotationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotations}
     */
    booksMylibraryAnnotationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': opts['contentVersion'],
        'layerId': opts['layerId'],
        'layerIds': this.apiClient.buildCollectionParam(opts['layerIds'], 'multi'),
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'showDeleted': opts['showDeleted'],
        'source': opts['source'],
        'updatedMax': opts['updatedMax'],
        'updatedMin': opts['updatedMin'],
        'volumeId': opts['volumeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Annotations;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryAnnotationsSummary operation.
     * @callback module:api/MylibraryApi~booksMylibraryAnnotationsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnotationsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the summary of specified layers.
     * @param {Array.<String>} layerIds Array of layer IDs to get the summary for.
     * @param {String} volumeId Volume id to get the summary for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] Optional. String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryAnnotationsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnotationsSummary}
     */
    booksMylibraryAnnotationsSummary(layerIds, volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'layerIds' is set
      if (layerIds === undefined || layerIds === null) {
        throw new Error("Missing the required parameter 'layerIds' when calling booksMylibraryAnnotationsSummary");
      }
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryAnnotationsSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'layerIds': this.apiClient.buildCollectionParam(layerIds, 'multi'),
        'volumeId': volumeId,
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnotationsSummary;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/annotations/summary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryAnnotationsUpdate operation.
     * @callback module:api/MylibraryApi~booksMylibraryAnnotationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Annotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing annotation.
     * @param {String} annotationId The ID for the annotation to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:model/Annotation} [annotation] 
     * @param {module:api/MylibraryApi~booksMylibraryAnnotationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Annotation}
     */
    booksMylibraryAnnotationsUpdate(annotationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['annotation'];
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling booksMylibraryAnnotationsUpdate");
      }

      let pathParams = {
        'annotationId': annotationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Annotation;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/annotations/{annotationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesAddVolume operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesAddVolumeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a volume to a bookshelf.
     * @param {String} shelf ID of bookshelf to which to add a volume.
     * @param {String} volumeId ID of volume to add.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [reason] The reason for which the book is added to the library.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesAddVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryBookshelvesAddVolume(shelf, volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesAddVolume");
      }
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryBookshelvesAddVolume");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'volumeId': volumeId,
        'reason': opts['reason'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}/addVolume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesClearVolumes operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesClearVolumesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all volumes from a bookshelf.
     * @param {String} shelf ID of bookshelf from which to remove a volume.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesClearVolumesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryBookshelvesClearVolumes(shelf, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesClearVolumes");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesGet operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves metadata for a specific bookshelf belonging to the authenticated user.
     * @param {String} shelf ID of bookshelf to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelf}
     */
    booksMylibraryBookshelvesGet(shelf, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesGet");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bookshelf;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesList operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelves} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of bookshelves belonging to the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelves}
     */
    booksMylibraryBookshelvesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bookshelves;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesMoveVolume operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesMoveVolumeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a volume within a bookshelf.
     * @param {String} shelf ID of bookshelf with the volume.
     * @param {String} volumeId ID of volume to move.
     * @param {Number} volumePosition Position on shelf to move the item (0 puts the item before the current first item, 1 puts it between the first and the second and so on.)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesMoveVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryBookshelvesMoveVolume(shelf, volumeId, volumePosition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesMoveVolume");
      }
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryBookshelvesMoveVolume");
      }
      // verify the required parameter 'volumePosition' is set
      if (volumePosition === undefined || volumePosition === null) {
        throw new Error("Missing the required parameter 'volumePosition' when calling booksMylibraryBookshelvesMoveVolume");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'volumeId': volumeId,
        'volumePosition': volumePosition,
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesRemoveVolume operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesRemoveVolumeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a volume from a bookshelf.
     * @param {String} shelf ID of bookshelf from which to remove a volume.
     * @param {String} volumeId ID of volume to remove.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [reason] The reason for which the book is removed from the library.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesRemoveVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryBookshelvesRemoveVolume(shelf, volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesRemoveVolume");
      }
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryBookshelvesRemoveVolume");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'volumeId': volumeId,
        'reason': opts['reason'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryBookshelvesVolumesList operation.
     * @callback module:api/MylibraryApi~booksMylibraryBookshelvesVolumesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Volumes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets volume information for volumes on a bookshelf.
     * @param {String} shelf The bookshelf ID or name retrieve volumes for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [country] ISO-3166-1 code to override the IP-based location.
     * @param {Number} [maxResults] Maximum number of results to return
     * @param {module:model/String} [projection] Restrict information returned to a set of selected fields.
     * @param {String} [q] Full-text search query string in this bookshelf.
     * @param {Boolean} [showPreorders] Set to true to show pre-ordered books. Defaults to false.
     * @param {String} [source] String to identify the originator of this request.
     * @param {Number} [startIndex] Index of the first element to return (starts at 0)
     * @param {module:api/MylibraryApi~booksMylibraryBookshelvesVolumesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Volumes}
     */
    booksMylibraryBookshelvesVolumesList(shelf, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shelf' is set
      if (shelf === undefined || shelf === null) {
        throw new Error("Missing the required parameter 'shelf' when calling booksMylibraryBookshelvesVolumesList");
      }

      let pathParams = {
        'shelf': shelf
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': opts['country'],
        'maxResults': opts['maxResults'],
        'projection': opts['projection'],
        'q': opts['q'],
        'showPreorders': opts['showPreorders'],
        'source': opts['source'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volumes;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/bookshelves/{shelf}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryReadingpositionsGet operation.
     * @callback module:api/MylibraryApi~booksMylibraryReadingpositionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadingPosition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves my reading position information for a volume.
     * @param {String} volumeId ID of volume for which to retrieve a reading position.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [contentVersion] Volume content version for which this reading position is requested.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryReadingpositionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadingPosition}
     */
    booksMylibraryReadingpositionsGet(volumeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryReadingpositionsGet");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'contentVersion': opts['contentVersion'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReadingPosition;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/readingpositions/{volumeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the booksMylibraryReadingpositionsSetPosition operation.
     * @callback module:api/MylibraryApi~booksMylibraryReadingpositionsSetPositionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets my reading position information for a volume.
     * @param {String} volumeId ID of volume for which to update the reading position.
     * @param {String} position Position string for the new volume reading position.
     * @param {String} timestamp RFC 3339 UTC format timestamp associated with this reading position.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [action] Action that caused this reading position to be set.
     * @param {String} [contentVersion] Volume content version for which this reading position applies.
     * @param {String} [deviceCookie] Random persistent device cookie optional on set position.
     * @param {String} [source] String to identify the originator of this request.
     * @param {module:api/MylibraryApi~booksMylibraryReadingpositionsSetPositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    booksMylibraryReadingpositionsSetPosition(volumeId, position, timestamp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'volumeId' is set
      if (volumeId === undefined || volumeId === null) {
        throw new Error("Missing the required parameter 'volumeId' when calling booksMylibraryReadingpositionsSetPosition");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling booksMylibraryReadingpositionsSetPosition");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling booksMylibraryReadingpositionsSetPosition");
      }

      let pathParams = {
        'volumeId': volumeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'position': position,
        'timestamp': timestamp,
        'action': opts['action'],
        'contentVersion': opts['contentVersion'],
        'deviceCookie': opts['deviceCookie'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
