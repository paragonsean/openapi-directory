/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BooksApi);
  }
}(this, function(expect, BooksApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BooksApi.VolumeVolumeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VolumeVolumeInfo', function() {
    it('should create an instance of VolumeVolumeInfo', function() {
      // uncomment below and update the code to test VolumeVolumeInfo
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be.a(BooksApi.VolumeVolumeInfo);
    });

    it('should have the property allowAnonLogging (base name: "allowAnonLogging")', function() {
      // uncomment below and update the code to test the property allowAnonLogging
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property authors (base name: "authors")', function() {
      // uncomment below and update the code to test the property authors
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property averageRating (base name: "averageRating")', function() {
      // uncomment below and update the code to test the property averageRating
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property canonicalVolumeLink (base name: "canonicalVolumeLink")', function() {
      // uncomment below and update the code to test the property canonicalVolumeLink
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property comicsContent (base name: "comicsContent")', function() {
      // uncomment below and update the code to test the property comicsContent
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property contentVersion (base name: "contentVersion")', function() {
      // uncomment below and update the code to test the property contentVersion
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property imageLinks (base name: "imageLinks")', function() {
      // uncomment below and update the code to test the property imageLinks
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property industryIdentifiers (base name: "industryIdentifiers")', function() {
      // uncomment below and update the code to test the property industryIdentifiers
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property infoLink (base name: "infoLink")', function() {
      // uncomment below and update the code to test the property infoLink
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property mainCategory (base name: "mainCategory")', function() {
      // uncomment below and update the code to test the property mainCategory
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property maturityRating (base name: "maturityRating")', function() {
      // uncomment below and update the code to test the property maturityRating
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property pageCount (base name: "pageCount")', function() {
      // uncomment below and update the code to test the property pageCount
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property panelizationSummary (base name: "panelizationSummary")', function() {
      // uncomment below and update the code to test the property panelizationSummary
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property previewLink (base name: "previewLink")', function() {
      // uncomment below and update the code to test the property previewLink
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property printType (base name: "printType")', function() {
      // uncomment below and update the code to test the property printType
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property printedPageCount (base name: "printedPageCount")', function() {
      // uncomment below and update the code to test the property printedPageCount
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property publishedDate (base name: "publishedDate")', function() {
      // uncomment below and update the code to test the property publishedDate
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property publisher (base name: "publisher")', function() {
      // uncomment below and update the code to test the property publisher
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property ratingsCount (base name: "ratingsCount")', function() {
      // uncomment below and update the code to test the property ratingsCount
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property readingModes (base name: "readingModes")', function() {
      // uncomment below and update the code to test the property readingModes
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property samplePageCount (base name: "samplePageCount")', function() {
      // uncomment below and update the code to test the property samplePageCount
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property seriesInfo (base name: "seriesInfo")', function() {
      // uncomment below and update the code to test the property seriesInfo
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property subtitle (base name: "subtitle")', function() {
      // uncomment below and update the code to test the property subtitle
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new BooksApi.VolumeVolumeInfo();
      //expect(instance).to.be();
    });

  });

}));
