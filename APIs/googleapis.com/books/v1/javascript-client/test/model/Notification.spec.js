/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BooksApi);
  }
}(this, function(expect, BooksApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BooksApi.Notification();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Notification', function() {
    it('should create an instance of Notification', function() {
      // uncomment below and update the code to test Notification
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be.a(BooksApi.Notification);
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property crmExperimentIds (base name: "crmExperimentIds")', function() {
      // uncomment below and update the code to test the property crmExperimentIds
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property docId (base name: "doc_id")', function() {
      // uncomment below and update the code to test the property docId
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property docType (base name: "doc_type")', function() {
      // uncomment below and update the code to test the property docType
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property dontShowNotification (base name: "dont_show_notification")', function() {
      // uncomment below and update the code to test the property dontShowNotification
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property iconUrl (base name: "iconUrl")', function() {
      // uncomment below and update the code to test the property iconUrl
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property isDocumentMature (base name: "is_document_mature")', function() {
      // uncomment below and update the code to test the property isDocumentMature
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property notificationGroup (base name: "notificationGroup")', function() {
      // uncomment below and update the code to test the property notificationGroup
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property notificationType (base name: "notification_type")', function() {
      // uncomment below and update the code to test the property notificationType
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property pcampaignId (base name: "pcampaign_id")', function() {
      // uncomment below and update the code to test the property pcampaignId
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property showNotificationSettingsAction (base name: "show_notification_settings_action")', function() {
      // uncomment below and update the code to test the property showNotificationSettingsAction
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property targetUrl (base name: "targetUrl")', function() {
      // uncomment below and update the code to test the property targetUrl
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property timeToExpireMs (base name: "timeToExpireMs")', function() {
      // uncomment below and update the code to test the property timeToExpireMs
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new BooksApi.Notification();
      //expect(instance).to.be();
    });

  });

}));
