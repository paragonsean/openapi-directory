/**
 * Books API
 * The Google Books API allows clients to access the Google Books repository.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BooksApi);
  }
}(this, function(expect, BooksApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BooksApi.MylibraryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MylibraryApi', function() {
    describe('booksMylibraryAnnotationsDelete', function() {
      it('should call booksMylibraryAnnotationsDelete successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryAnnotationsDelete
        //instance.booksMylibraryAnnotationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryAnnotationsInsert', function() {
      it('should call booksMylibraryAnnotationsInsert successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryAnnotationsInsert
        //instance.booksMylibraryAnnotationsInsert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryAnnotationsList', function() {
      it('should call booksMylibraryAnnotationsList successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryAnnotationsList
        //instance.booksMylibraryAnnotationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryAnnotationsSummary', function() {
      it('should call booksMylibraryAnnotationsSummary successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryAnnotationsSummary
        //instance.booksMylibraryAnnotationsSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryAnnotationsUpdate', function() {
      it('should call booksMylibraryAnnotationsUpdate successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryAnnotationsUpdate
        //instance.booksMylibraryAnnotationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesAddVolume', function() {
      it('should call booksMylibraryBookshelvesAddVolume successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesAddVolume
        //instance.booksMylibraryBookshelvesAddVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesClearVolumes', function() {
      it('should call booksMylibraryBookshelvesClearVolumes successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesClearVolumes
        //instance.booksMylibraryBookshelvesClearVolumes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesGet', function() {
      it('should call booksMylibraryBookshelvesGet successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesGet
        //instance.booksMylibraryBookshelvesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesList', function() {
      it('should call booksMylibraryBookshelvesList successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesList
        //instance.booksMylibraryBookshelvesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesMoveVolume', function() {
      it('should call booksMylibraryBookshelvesMoveVolume successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesMoveVolume
        //instance.booksMylibraryBookshelvesMoveVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesRemoveVolume', function() {
      it('should call booksMylibraryBookshelvesRemoveVolume successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesRemoveVolume
        //instance.booksMylibraryBookshelvesRemoveVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryBookshelvesVolumesList', function() {
      it('should call booksMylibraryBookshelvesVolumesList successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryBookshelvesVolumesList
        //instance.booksMylibraryBookshelvesVolumesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryReadingpositionsGet', function() {
      it('should call booksMylibraryReadingpositionsGet successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryReadingpositionsGet
        //instance.booksMylibraryReadingpositionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('booksMylibraryReadingpositionsSetPosition', function() {
      it('should call booksMylibraryReadingpositionsSetPosition successfully', function(done) {
        //uncomment below and update the code to test booksMylibraryReadingpositionsSetPosition
        //instance.booksMylibraryReadingpositionsSetPosition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
