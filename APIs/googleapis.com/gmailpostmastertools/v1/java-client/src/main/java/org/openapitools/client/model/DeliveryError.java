/*
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metric on a particular delivery error type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:02.811696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryError {
  /**
   * The class of delivery error.
   */
  @JsonAdapter(ErrorClassEnum.Adapter.class)
  public enum ErrorClassEnum {
    DELIVERY_ERROR_CLASS_UNSPECIFIED("DELIVERY_ERROR_CLASS_UNSPECIFIED"),
    
    PERMANENT_ERROR("PERMANENT_ERROR"),
    
    TEMPORARY_ERROR("TEMPORARY_ERROR");

    private String value;

    ErrorClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorClassEnum fromValue(String value) {
      for (ErrorClassEnum b : ErrorClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CLASS = "errorClass";
  @SerializedName(SERIALIZED_NAME_ERROR_CLASS)
  private ErrorClassEnum errorClass;

  public static final String SERIALIZED_NAME_ERROR_RATIO = "errorRatio";
  @SerializedName(SERIALIZED_NAME_ERROR_RATIO)
  private Double errorRatio;

  /**
   * The type of delivery error.
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    DELIVERY_ERROR_TYPE_UNSPECIFIED("DELIVERY_ERROR_TYPE_UNSPECIFIED"),
    
    RATE_LIMIT_EXCEEDED("RATE_LIMIT_EXCEEDED"),
    
    SUSPECTED_SPAM("SUSPECTED_SPAM"),
    
    CONTENT_SPAMMY("CONTENT_SPAMMY"),
    
    BAD_ATTACHMENT("BAD_ATTACHMENT"),
    
    BAD_DMARC_POLICY("BAD_DMARC_POLICY"),
    
    LOW_IP_REPUTATION("LOW_IP_REPUTATION"),
    
    LOW_DOMAIN_REPUTATION("LOW_DOMAIN_REPUTATION"),
    
    IP_IN_RBL("IP_IN_RBL"),
    
    DOMAIN_IN_RBL("DOMAIN_IN_RBL"),
    
    BAD_PTR_RECORD("BAD_PTR_RECORD");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorTypeEnum fromValue(String value) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private ErrorTypeEnum errorType;

  public DeliveryError() {
  }

  public DeliveryError errorClass(ErrorClassEnum errorClass) {
    this.errorClass = errorClass;
    return this;
  }

  /**
   * The class of delivery error.
   * @return errorClass
   */
  @javax.annotation.Nullable
  public ErrorClassEnum getErrorClass() {
    return errorClass;
  }

  public void setErrorClass(ErrorClassEnum errorClass) {
    this.errorClass = errorClass;
  }


  public DeliveryError errorRatio(Double errorRatio) {
    this.errorRatio = errorRatio;
    return this;
  }

  /**
   * The ratio of messages where the error occurred vs all authenticated traffic.
   * @return errorRatio
   */
  @javax.annotation.Nullable
  public Double getErrorRatio() {
    return errorRatio;
  }

  public void setErrorRatio(Double errorRatio) {
    this.errorRatio = errorRatio;
  }


  public DeliveryError errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * The type of delivery error.
   * @return errorType
   */
  @javax.annotation.Nullable
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryError deliveryError = (DeliveryError) o;
    return Objects.equals(this.errorClass, deliveryError.errorClass) &&
        Objects.equals(this.errorRatio, deliveryError.errorRatio) &&
        Objects.equals(this.errorType, deliveryError.errorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorClass, errorRatio, errorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryError {\n");
    sb.append("    errorClass: ").append(toIndentedString(errorClass)).append("\n");
    sb.append("    errorRatio: ").append(toIndentedString(errorRatio)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorClass");
    openapiFields.add("errorRatio");
    openapiFields.add("errorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryError is not found in the empty JSON string", DeliveryError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorClass") != null && !jsonObj.get("errorClass").isJsonNull()) && !jsonObj.get("errorClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorClass").toString()));
      }
      // validate the optional field `errorClass`
      if (jsonObj.get("errorClass") != null && !jsonObj.get("errorClass").isJsonNull()) {
        ErrorClassEnum.validateJsonElement(jsonObj.get("errorClass"));
      }
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      // validate the optional field `errorType`
      if (jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) {
        ErrorTypeEnum.validateJsonElement(jsonObj.get("errorType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryError.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryError>() {
           @Override
           public void write(JsonWriter out, DeliveryError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryError
   * @throws IOException if the JSON string is invalid with respect to DeliveryError
   */
  public static DeliveryError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryError.class);
  }

  /**
   * Convert an instance of DeliveryError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

