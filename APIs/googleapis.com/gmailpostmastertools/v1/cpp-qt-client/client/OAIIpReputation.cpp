/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpReputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpReputation::OAIIpReputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpReputation::OAIIpReputation() {
    this->initializeModel();
}

OAIIpReputation::~OAIIpReputation() {}

void OAIIpReputation::initializeModel() {

    m_ip_count_isSet = false;
    m_ip_count_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_sample_ips_isSet = false;
    m_sample_ips_isValid = false;
}

void OAIIpReputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpReputation::fromJsonObject(QJsonObject json) {

    m_ip_count_isValid = ::OpenAPI::fromJsonValue(m_ip_count, json[QString("ipCount")]);
    m_ip_count_isSet = !json[QString("ipCount")].isNull() && m_ip_count_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_sample_ips_isValid = ::OpenAPI::fromJsonValue(m_sample_ips, json[QString("sampleIps")]);
    m_sample_ips_isSet = !json[QString("sampleIps")].isNull() && m_sample_ips_isValid;
}

QString OAIIpReputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpReputation::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_count_isSet) {
        obj.insert(QString("ipCount"), ::OpenAPI::toJsonValue(m_ip_count));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_sample_ips.size() > 0) {
        obj.insert(QString("sampleIps"), ::OpenAPI::toJsonValue(m_sample_ips));
    }
    return obj;
}

QString OAIIpReputation::getIpCount() const {
    return m_ip_count;
}
void OAIIpReputation::setIpCount(const QString &ip_count) {
    m_ip_count = ip_count;
    m_ip_count_isSet = true;
}

bool OAIIpReputation::is_ip_count_Set() const{
    return m_ip_count_isSet;
}

bool OAIIpReputation::is_ip_count_Valid() const{
    return m_ip_count_isValid;
}

QString OAIIpReputation::getReputation() const {
    return m_reputation;
}
void OAIIpReputation::setReputation(const QString &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAIIpReputation::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAIIpReputation::is_reputation_Valid() const{
    return m_reputation_isValid;
}

QList<QString> OAIIpReputation::getSampleIps() const {
    return m_sample_ips;
}
void OAIIpReputation::setSampleIps(const QList<QString> &sample_ips) {
    m_sample_ips = sample_ips;
    m_sample_ips_isSet = true;
}

bool OAIIpReputation::is_sample_ips_Set() const{
    return m_sample_ips_isSet;
}

bool OAIIpReputation::is_sample_ips_Valid() const{
    return m_sample_ips_isValid;
}

bool OAIIpReputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpReputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
