/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeliveryError model module.
 * @module model/DeliveryError
 * @version v1
 */
class DeliveryError {
    /**
     * Constructs a new <code>DeliveryError</code>.
     * Metric on a particular delivery error type.
     * @alias module:model/DeliveryError
     */
    constructor() { 
        
        DeliveryError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeliveryError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryError} obj Optional instance to populate.
     * @return {module:model/DeliveryError} The populated <code>DeliveryError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryError();

            if (data.hasOwnProperty('errorClass')) {
                obj['errorClass'] = ApiClient.convertToType(data['errorClass'], 'String');
            }
            if (data.hasOwnProperty('errorRatio')) {
                obj['errorRatio'] = ApiClient.convertToType(data['errorRatio'], 'Number');
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorClass'] && !(typeof data['errorClass'] === 'string' || data['errorClass'] instanceof String)) {
            throw new Error("Expected the field `errorClass` to be a primitive type in the JSON string but got " + data['errorClass']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }

        return true;
    }


}



/**
 * The class of delivery error.
 * @member {module:model/DeliveryError.ErrorClassEnum} errorClass
 */
DeliveryError.prototype['errorClass'] = undefined;

/**
 * The ratio of messages where the error occurred vs all authenticated traffic.
 * @member {Number} errorRatio
 */
DeliveryError.prototype['errorRatio'] = undefined;

/**
 * The type of delivery error.
 * @member {module:model/DeliveryError.ErrorTypeEnum} errorType
 */
DeliveryError.prototype['errorType'] = undefined;





/**
 * Allowed values for the <code>errorClass</code> property.
 * @enum {String}
 * @readonly
 */
DeliveryError['ErrorClassEnum'] = {

    /**
     * value: "DELIVERY_ERROR_CLASS_UNSPECIFIED"
     * @const
     */
    "DELIVERY_ERROR_CLASS_UNSPECIFIED": "DELIVERY_ERROR_CLASS_UNSPECIFIED",

    /**
     * value: "PERMANENT_ERROR"
     * @const
     */
    "PERMANENT_ERROR": "PERMANENT_ERROR",

    /**
     * value: "TEMPORARY_ERROR"
     * @const
     */
    "TEMPORARY_ERROR": "TEMPORARY_ERROR"
};


/**
 * Allowed values for the <code>errorType</code> property.
 * @enum {String}
 * @readonly
 */
DeliveryError['ErrorTypeEnum'] = {

    /**
     * value: "DELIVERY_ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "DELIVERY_ERROR_TYPE_UNSPECIFIED": "DELIVERY_ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "RATE_LIMIT_EXCEEDED"
     * @const
     */
    "RATE_LIMIT_EXCEEDED": "RATE_LIMIT_EXCEEDED",

    /**
     * value: "SUSPECTED_SPAM"
     * @const
     */
    "SUSPECTED_SPAM": "SUSPECTED_SPAM",

    /**
     * value: "CONTENT_SPAMMY"
     * @const
     */
    "CONTENT_SPAMMY": "CONTENT_SPAMMY",

    /**
     * value: "BAD_ATTACHMENT"
     * @const
     */
    "BAD_ATTACHMENT": "BAD_ATTACHMENT",

    /**
     * value: "BAD_DMARC_POLICY"
     * @const
     */
    "BAD_DMARC_POLICY": "BAD_DMARC_POLICY",

    /**
     * value: "LOW_IP_REPUTATION"
     * @const
     */
    "LOW_IP_REPUTATION": "LOW_IP_REPUTATION",

    /**
     * value: "LOW_DOMAIN_REPUTATION"
     * @const
     */
    "LOW_DOMAIN_REPUTATION": "LOW_DOMAIN_REPUTATION",

    /**
     * value: "IP_IN_RBL"
     * @const
     */
    "IP_IN_RBL": "IP_IN_RBL",

    /**
     * value: "DOMAIN_IN_RBL"
     * @const
     */
    "DOMAIN_IN_RBL": "DOMAIN_IN_RBL",

    /**
     * value: "BAD_PTR_RECORD"
     * @const
     */
    "BAD_PTR_RECORD": "BAD_PTR_RECORD"
};



export default DeliveryError;

