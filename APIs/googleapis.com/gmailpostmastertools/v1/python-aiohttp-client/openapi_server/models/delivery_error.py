# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_class: str=None, error_ratio: float=None, error_type: str=None):
        """DeliveryError - a model defined in OpenAPI

        :param error_class: The error_class of this DeliveryError.
        :param error_ratio: The error_ratio of this DeliveryError.
        :param error_type: The error_type of this DeliveryError.
        """
        self.openapi_types = {
            'error_class': str,
            'error_ratio': float,
            'error_type': str
        }

        self.attribute_map = {
            'error_class': 'errorClass',
            'error_ratio': 'errorRatio',
            'error_type': 'errorType'
        }

        self._error_class = error_class
        self._error_ratio = error_ratio
        self._error_type = error_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryError of this DeliveryError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_class(self):
        """Gets the error_class of this DeliveryError.

        The class of delivery error.

        :return: The error_class of this DeliveryError.
        :rtype: str
        """
        return self._error_class

    @error_class.setter
    def error_class(self, error_class):
        """Sets the error_class of this DeliveryError.

        The class of delivery error.

        :param error_class: The error_class of this DeliveryError.
        :type error_class: str
        """
        allowed_values = ["DELIVERY_ERROR_CLASS_UNSPECIFIED", "PERMANENT_ERROR", "TEMPORARY_ERROR"]  # noqa: E501
        if error_class not in allowed_values:
            raise ValueError(
                "Invalid value for `error_class` ({0}), must be one of {1}"
                .format(error_class, allowed_values)
            )

        self._error_class = error_class

    @property
    def error_ratio(self):
        """Gets the error_ratio of this DeliveryError.

        The ratio of messages where the error occurred vs all authenticated traffic.

        :return: The error_ratio of this DeliveryError.
        :rtype: float
        """
        return self._error_ratio

    @error_ratio.setter
    def error_ratio(self, error_ratio):
        """Sets the error_ratio of this DeliveryError.

        The ratio of messages where the error occurred vs all authenticated traffic.

        :param error_ratio: The error_ratio of this DeliveryError.
        :type error_ratio: float
        """

        self._error_ratio = error_ratio

    @property
    def error_type(self):
        """Gets the error_type of this DeliveryError.

        The type of delivery error.

        :return: The error_type of this DeliveryError.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this DeliveryError.

        The type of delivery error.

        :param error_type: The error_type of this DeliveryError.
        :type error_type: str
        """
        allowed_values = ["DELIVERY_ERROR_TYPE_UNSPECIFIED", "RATE_LIMIT_EXCEEDED", "SUSPECTED_SPAM", "CONTENT_SPAMMY", "BAD_ATTACHMENT", "BAD_DMARC_POLICY", "LOW_IP_REPUTATION", "LOW_DOMAIN_REPUTATION", "IP_IN_RBL", "DOMAIN_IN_RBL", "BAD_PTR_RECORD"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type
