/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryError::OAIDeliveryError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryError::OAIDeliveryError() {
    this->initializeModel();
}

OAIDeliveryError::~OAIDeliveryError() {}

void OAIDeliveryError::initializeModel() {

    m_error_class_isSet = false;
    m_error_class_isValid = false;

    m_error_ratio_isSet = false;
    m_error_ratio_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;
}

void OAIDeliveryError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryError::fromJsonObject(QJsonObject json) {

    m_error_class_isValid = ::OpenAPI::fromJsonValue(m_error_class, json[QString("errorClass")]);
    m_error_class_isSet = !json[QString("errorClass")].isNull() && m_error_class_isValid;

    m_error_ratio_isValid = ::OpenAPI::fromJsonValue(m_error_ratio, json[QString("errorRatio")]);
    m_error_ratio_isSet = !json[QString("errorRatio")].isNull() && m_error_ratio_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;
}

QString OAIDeliveryError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_class_isSet) {
        obj.insert(QString("errorClass"), ::OpenAPI::toJsonValue(m_error_class));
    }
    if (m_error_ratio_isSet) {
        obj.insert(QString("errorRatio"), ::OpenAPI::toJsonValue(m_error_ratio));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    return obj;
}

QString OAIDeliveryError::getErrorClass() const {
    return m_error_class;
}
void OAIDeliveryError::setErrorClass(const QString &error_class) {
    m_error_class = error_class;
    m_error_class_isSet = true;
}

bool OAIDeliveryError::is_error_class_Set() const{
    return m_error_class_isSet;
}

bool OAIDeliveryError::is_error_class_Valid() const{
    return m_error_class_isValid;
}

double OAIDeliveryError::getErrorRatio() const {
    return m_error_ratio;
}
void OAIDeliveryError::setErrorRatio(const double &error_ratio) {
    m_error_ratio = error_ratio;
    m_error_ratio_isSet = true;
}

bool OAIDeliveryError::is_error_ratio_Set() const{
    return m_error_ratio_isSet;
}

bool OAIDeliveryError::is_error_ratio_Valid() const{
    return m_error_ratio_isValid;
}

QString OAIDeliveryError::getErrorType() const {
    return m_error_type;
}
void OAIDeliveryError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIDeliveryError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIDeliveryError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

bool OAIDeliveryError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
