/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficStats::OAITrafficStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficStats::OAITrafficStats() {
    this->initializeModel();
}

OAITrafficStats::~OAITrafficStats() {}

void OAITrafficStats::initializeModel() {

    m_delivery_errors_isSet = false;
    m_delivery_errors_isValid = false;

    m_dkim_success_ratio_isSet = false;
    m_dkim_success_ratio_isValid = false;

    m_dmarc_success_ratio_isSet = false;
    m_dmarc_success_ratio_isValid = false;

    m_domain_reputation_isSet = false;
    m_domain_reputation_isValid = false;

    m_inbound_encryption_ratio_isSet = false;
    m_inbound_encryption_ratio_isValid = false;

    m_ip_reputations_isSet = false;
    m_ip_reputations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outbound_encryption_ratio_isSet = false;
    m_outbound_encryption_ratio_isValid = false;

    m_spammy_feedback_loops_isSet = false;
    m_spammy_feedback_loops_isValid = false;

    m_spf_success_ratio_isSet = false;
    m_spf_success_ratio_isValid = false;

    m_user_reported_spam_ratio_isSet = false;
    m_user_reported_spam_ratio_isValid = false;

    m_user_reported_spam_ratio_lower_bound_isSet = false;
    m_user_reported_spam_ratio_lower_bound_isValid = false;

    m_user_reported_spam_ratio_upper_bound_isSet = false;
    m_user_reported_spam_ratio_upper_bound_isValid = false;
}

void OAITrafficStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficStats::fromJsonObject(QJsonObject json) {

    m_delivery_errors_isValid = ::OpenAPI::fromJsonValue(m_delivery_errors, json[QString("deliveryErrors")]);
    m_delivery_errors_isSet = !json[QString("deliveryErrors")].isNull() && m_delivery_errors_isValid;

    m_dkim_success_ratio_isValid = ::OpenAPI::fromJsonValue(m_dkim_success_ratio, json[QString("dkimSuccessRatio")]);
    m_dkim_success_ratio_isSet = !json[QString("dkimSuccessRatio")].isNull() && m_dkim_success_ratio_isValid;

    m_dmarc_success_ratio_isValid = ::OpenAPI::fromJsonValue(m_dmarc_success_ratio, json[QString("dmarcSuccessRatio")]);
    m_dmarc_success_ratio_isSet = !json[QString("dmarcSuccessRatio")].isNull() && m_dmarc_success_ratio_isValid;

    m_domain_reputation_isValid = ::OpenAPI::fromJsonValue(m_domain_reputation, json[QString("domainReputation")]);
    m_domain_reputation_isSet = !json[QString("domainReputation")].isNull() && m_domain_reputation_isValid;

    m_inbound_encryption_ratio_isValid = ::OpenAPI::fromJsonValue(m_inbound_encryption_ratio, json[QString("inboundEncryptionRatio")]);
    m_inbound_encryption_ratio_isSet = !json[QString("inboundEncryptionRatio")].isNull() && m_inbound_encryption_ratio_isValid;

    m_ip_reputations_isValid = ::OpenAPI::fromJsonValue(m_ip_reputations, json[QString("ipReputations")]);
    m_ip_reputations_isSet = !json[QString("ipReputations")].isNull() && m_ip_reputations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outbound_encryption_ratio_isValid = ::OpenAPI::fromJsonValue(m_outbound_encryption_ratio, json[QString("outboundEncryptionRatio")]);
    m_outbound_encryption_ratio_isSet = !json[QString("outboundEncryptionRatio")].isNull() && m_outbound_encryption_ratio_isValid;

    m_spammy_feedback_loops_isValid = ::OpenAPI::fromJsonValue(m_spammy_feedback_loops, json[QString("spammyFeedbackLoops")]);
    m_spammy_feedback_loops_isSet = !json[QString("spammyFeedbackLoops")].isNull() && m_spammy_feedback_loops_isValid;

    m_spf_success_ratio_isValid = ::OpenAPI::fromJsonValue(m_spf_success_ratio, json[QString("spfSuccessRatio")]);
    m_spf_success_ratio_isSet = !json[QString("spfSuccessRatio")].isNull() && m_spf_success_ratio_isValid;

    m_user_reported_spam_ratio_isValid = ::OpenAPI::fromJsonValue(m_user_reported_spam_ratio, json[QString("userReportedSpamRatio")]);
    m_user_reported_spam_ratio_isSet = !json[QString("userReportedSpamRatio")].isNull() && m_user_reported_spam_ratio_isValid;

    m_user_reported_spam_ratio_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_user_reported_spam_ratio_lower_bound, json[QString("userReportedSpamRatioLowerBound")]);
    m_user_reported_spam_ratio_lower_bound_isSet = !json[QString("userReportedSpamRatioLowerBound")].isNull() && m_user_reported_spam_ratio_lower_bound_isValid;

    m_user_reported_spam_ratio_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_user_reported_spam_ratio_upper_bound, json[QString("userReportedSpamRatioUpperBound")]);
    m_user_reported_spam_ratio_upper_bound_isSet = !json[QString("userReportedSpamRatioUpperBound")].isNull() && m_user_reported_spam_ratio_upper_bound_isValid;
}

QString OAITrafficStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficStats::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_errors.size() > 0) {
        obj.insert(QString("deliveryErrors"), ::OpenAPI::toJsonValue(m_delivery_errors));
    }
    if (m_dkim_success_ratio_isSet) {
        obj.insert(QString("dkimSuccessRatio"), ::OpenAPI::toJsonValue(m_dkim_success_ratio));
    }
    if (m_dmarc_success_ratio_isSet) {
        obj.insert(QString("dmarcSuccessRatio"), ::OpenAPI::toJsonValue(m_dmarc_success_ratio));
    }
    if (m_domain_reputation_isSet) {
        obj.insert(QString("domainReputation"), ::OpenAPI::toJsonValue(m_domain_reputation));
    }
    if (m_inbound_encryption_ratio_isSet) {
        obj.insert(QString("inboundEncryptionRatio"), ::OpenAPI::toJsonValue(m_inbound_encryption_ratio));
    }
    if (m_ip_reputations.size() > 0) {
        obj.insert(QString("ipReputations"), ::OpenAPI::toJsonValue(m_ip_reputations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outbound_encryption_ratio_isSet) {
        obj.insert(QString("outboundEncryptionRatio"), ::OpenAPI::toJsonValue(m_outbound_encryption_ratio));
    }
    if (m_spammy_feedback_loops.size() > 0) {
        obj.insert(QString("spammyFeedbackLoops"), ::OpenAPI::toJsonValue(m_spammy_feedback_loops));
    }
    if (m_spf_success_ratio_isSet) {
        obj.insert(QString("spfSuccessRatio"), ::OpenAPI::toJsonValue(m_spf_success_ratio));
    }
    if (m_user_reported_spam_ratio_isSet) {
        obj.insert(QString("userReportedSpamRatio"), ::OpenAPI::toJsonValue(m_user_reported_spam_ratio));
    }
    if (m_user_reported_spam_ratio_lower_bound_isSet) {
        obj.insert(QString("userReportedSpamRatioLowerBound"), ::OpenAPI::toJsonValue(m_user_reported_spam_ratio_lower_bound));
    }
    if (m_user_reported_spam_ratio_upper_bound_isSet) {
        obj.insert(QString("userReportedSpamRatioUpperBound"), ::OpenAPI::toJsonValue(m_user_reported_spam_ratio_upper_bound));
    }
    return obj;
}

QList<OAIDeliveryError> OAITrafficStats::getDeliveryErrors() const {
    return m_delivery_errors;
}
void OAITrafficStats::setDeliveryErrors(const QList<OAIDeliveryError> &delivery_errors) {
    m_delivery_errors = delivery_errors;
    m_delivery_errors_isSet = true;
}

bool OAITrafficStats::is_delivery_errors_Set() const{
    return m_delivery_errors_isSet;
}

bool OAITrafficStats::is_delivery_errors_Valid() const{
    return m_delivery_errors_isValid;
}

double OAITrafficStats::getDkimSuccessRatio() const {
    return m_dkim_success_ratio;
}
void OAITrafficStats::setDkimSuccessRatio(const double &dkim_success_ratio) {
    m_dkim_success_ratio = dkim_success_ratio;
    m_dkim_success_ratio_isSet = true;
}

bool OAITrafficStats::is_dkim_success_ratio_Set() const{
    return m_dkim_success_ratio_isSet;
}

bool OAITrafficStats::is_dkim_success_ratio_Valid() const{
    return m_dkim_success_ratio_isValid;
}

double OAITrafficStats::getDmarcSuccessRatio() const {
    return m_dmarc_success_ratio;
}
void OAITrafficStats::setDmarcSuccessRatio(const double &dmarc_success_ratio) {
    m_dmarc_success_ratio = dmarc_success_ratio;
    m_dmarc_success_ratio_isSet = true;
}

bool OAITrafficStats::is_dmarc_success_ratio_Set() const{
    return m_dmarc_success_ratio_isSet;
}

bool OAITrafficStats::is_dmarc_success_ratio_Valid() const{
    return m_dmarc_success_ratio_isValid;
}

QString OAITrafficStats::getDomainReputation() const {
    return m_domain_reputation;
}
void OAITrafficStats::setDomainReputation(const QString &domain_reputation) {
    m_domain_reputation = domain_reputation;
    m_domain_reputation_isSet = true;
}

bool OAITrafficStats::is_domain_reputation_Set() const{
    return m_domain_reputation_isSet;
}

bool OAITrafficStats::is_domain_reputation_Valid() const{
    return m_domain_reputation_isValid;
}

double OAITrafficStats::getInboundEncryptionRatio() const {
    return m_inbound_encryption_ratio;
}
void OAITrafficStats::setInboundEncryptionRatio(const double &inbound_encryption_ratio) {
    m_inbound_encryption_ratio = inbound_encryption_ratio;
    m_inbound_encryption_ratio_isSet = true;
}

bool OAITrafficStats::is_inbound_encryption_ratio_Set() const{
    return m_inbound_encryption_ratio_isSet;
}

bool OAITrafficStats::is_inbound_encryption_ratio_Valid() const{
    return m_inbound_encryption_ratio_isValid;
}

QList<OAIIpReputation> OAITrafficStats::getIpReputations() const {
    return m_ip_reputations;
}
void OAITrafficStats::setIpReputations(const QList<OAIIpReputation> &ip_reputations) {
    m_ip_reputations = ip_reputations;
    m_ip_reputations_isSet = true;
}

bool OAITrafficStats::is_ip_reputations_Set() const{
    return m_ip_reputations_isSet;
}

bool OAITrafficStats::is_ip_reputations_Valid() const{
    return m_ip_reputations_isValid;
}

QString OAITrafficStats::getName() const {
    return m_name;
}
void OAITrafficStats::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrafficStats::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrafficStats::is_name_Valid() const{
    return m_name_isValid;
}

double OAITrafficStats::getOutboundEncryptionRatio() const {
    return m_outbound_encryption_ratio;
}
void OAITrafficStats::setOutboundEncryptionRatio(const double &outbound_encryption_ratio) {
    m_outbound_encryption_ratio = outbound_encryption_ratio;
    m_outbound_encryption_ratio_isSet = true;
}

bool OAITrafficStats::is_outbound_encryption_ratio_Set() const{
    return m_outbound_encryption_ratio_isSet;
}

bool OAITrafficStats::is_outbound_encryption_ratio_Valid() const{
    return m_outbound_encryption_ratio_isValid;
}

QList<OAIFeedbackLoop> OAITrafficStats::getSpammyFeedbackLoops() const {
    return m_spammy_feedback_loops;
}
void OAITrafficStats::setSpammyFeedbackLoops(const QList<OAIFeedbackLoop> &spammy_feedback_loops) {
    m_spammy_feedback_loops = spammy_feedback_loops;
    m_spammy_feedback_loops_isSet = true;
}

bool OAITrafficStats::is_spammy_feedback_loops_Set() const{
    return m_spammy_feedback_loops_isSet;
}

bool OAITrafficStats::is_spammy_feedback_loops_Valid() const{
    return m_spammy_feedback_loops_isValid;
}

double OAITrafficStats::getSpfSuccessRatio() const {
    return m_spf_success_ratio;
}
void OAITrafficStats::setSpfSuccessRatio(const double &spf_success_ratio) {
    m_spf_success_ratio = spf_success_ratio;
    m_spf_success_ratio_isSet = true;
}

bool OAITrafficStats::is_spf_success_ratio_Set() const{
    return m_spf_success_ratio_isSet;
}

bool OAITrafficStats::is_spf_success_ratio_Valid() const{
    return m_spf_success_ratio_isValid;
}

double OAITrafficStats::getUserReportedSpamRatio() const {
    return m_user_reported_spam_ratio;
}
void OAITrafficStats::setUserReportedSpamRatio(const double &user_reported_spam_ratio) {
    m_user_reported_spam_ratio = user_reported_spam_ratio;
    m_user_reported_spam_ratio_isSet = true;
}

bool OAITrafficStats::is_user_reported_spam_ratio_Set() const{
    return m_user_reported_spam_ratio_isSet;
}

bool OAITrafficStats::is_user_reported_spam_ratio_Valid() const{
    return m_user_reported_spam_ratio_isValid;
}

double OAITrafficStats::getUserReportedSpamRatioLowerBound() const {
    return m_user_reported_spam_ratio_lower_bound;
}
void OAITrafficStats::setUserReportedSpamRatioLowerBound(const double &user_reported_spam_ratio_lower_bound) {
    m_user_reported_spam_ratio_lower_bound = user_reported_spam_ratio_lower_bound;
    m_user_reported_spam_ratio_lower_bound_isSet = true;
}

bool OAITrafficStats::is_user_reported_spam_ratio_lower_bound_Set() const{
    return m_user_reported_spam_ratio_lower_bound_isSet;
}

bool OAITrafficStats::is_user_reported_spam_ratio_lower_bound_Valid() const{
    return m_user_reported_spam_ratio_lower_bound_isValid;
}

double OAITrafficStats::getUserReportedSpamRatioUpperBound() const {
    return m_user_reported_spam_ratio_upper_bound;
}
void OAITrafficStats::setUserReportedSpamRatioUpperBound(const double &user_reported_spam_ratio_upper_bound) {
    m_user_reported_spam_ratio_upper_bound = user_reported_spam_ratio_upper_bound;
    m_user_reported_spam_ratio_upper_bound_isSet = true;
}

bool OAITrafficStats::is_user_reported_spam_ratio_upper_bound_Set() const{
    return m_user_reported_spam_ratio_upper_bound_isSet;
}

bool OAITrafficStats::is_user_reported_spam_ratio_upper_bound_Valid() const{
    return m_user_reported_spam_ratio_upper_bound_isValid;
}

bool OAITrafficStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_success_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dmarc_success_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_encryption_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_reputations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_encryption_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spammy_feedback_loops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_success_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_reported_spam_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_reported_spam_ratio_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_reported_spam_ratio_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
