/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrafficStats.h
 *
 * Email traffic statistics pertaining to a specific date.
 */

#ifndef OAITrafficStats_H
#define OAITrafficStats_H

#include <QJsonObject>

#include "OAIDeliveryError.h"
#include "OAIFeedbackLoop.h"
#include "OAIIpReputation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeliveryError;
class OAIIpReputation;
class OAIFeedbackLoop;

class OAITrafficStats : public OAIObject {
public:
    OAITrafficStats();
    OAITrafficStats(QString json);
    ~OAITrafficStats() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDeliveryError> getDeliveryErrors() const;
    void setDeliveryErrors(const QList<OAIDeliveryError> &delivery_errors);
    bool is_delivery_errors_Set() const;
    bool is_delivery_errors_Valid() const;

    double getDkimSuccessRatio() const;
    void setDkimSuccessRatio(const double &dkim_success_ratio);
    bool is_dkim_success_ratio_Set() const;
    bool is_dkim_success_ratio_Valid() const;

    double getDmarcSuccessRatio() const;
    void setDmarcSuccessRatio(const double &dmarc_success_ratio);
    bool is_dmarc_success_ratio_Set() const;
    bool is_dmarc_success_ratio_Valid() const;

    QString getDomainReputation() const;
    void setDomainReputation(const QString &domain_reputation);
    bool is_domain_reputation_Set() const;
    bool is_domain_reputation_Valid() const;

    double getInboundEncryptionRatio() const;
    void setInboundEncryptionRatio(const double &inbound_encryption_ratio);
    bool is_inbound_encryption_ratio_Set() const;
    bool is_inbound_encryption_ratio_Valid() const;

    QList<OAIIpReputation> getIpReputations() const;
    void setIpReputations(const QList<OAIIpReputation> &ip_reputations);
    bool is_ip_reputations_Set() const;
    bool is_ip_reputations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getOutboundEncryptionRatio() const;
    void setOutboundEncryptionRatio(const double &outbound_encryption_ratio);
    bool is_outbound_encryption_ratio_Set() const;
    bool is_outbound_encryption_ratio_Valid() const;

    QList<OAIFeedbackLoop> getSpammyFeedbackLoops() const;
    void setSpammyFeedbackLoops(const QList<OAIFeedbackLoop> &spammy_feedback_loops);
    bool is_spammy_feedback_loops_Set() const;
    bool is_spammy_feedback_loops_Valid() const;

    double getSpfSuccessRatio() const;
    void setSpfSuccessRatio(const double &spf_success_ratio);
    bool is_spf_success_ratio_Set() const;
    bool is_spf_success_ratio_Valid() const;

    double getUserReportedSpamRatio() const;
    void setUserReportedSpamRatio(const double &user_reported_spam_ratio);
    bool is_user_reported_spam_ratio_Set() const;
    bool is_user_reported_spam_ratio_Valid() const;

    double getUserReportedSpamRatioLowerBound() const;
    void setUserReportedSpamRatioLowerBound(const double &user_reported_spam_ratio_lower_bound);
    bool is_user_reported_spam_ratio_lower_bound_Set() const;
    bool is_user_reported_spam_ratio_lower_bound_Valid() const;

    double getUserReportedSpamRatioUpperBound() const;
    void setUserReportedSpamRatioUpperBound(const double &user_reported_spam_ratio_upper_bound);
    bool is_user_reported_spam_ratio_upper_bound_Set() const;
    bool is_user_reported_spam_ratio_upper_bound_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDeliveryError> m_delivery_errors;
    bool m_delivery_errors_isSet;
    bool m_delivery_errors_isValid;

    double m_dkim_success_ratio;
    bool m_dkim_success_ratio_isSet;
    bool m_dkim_success_ratio_isValid;

    double m_dmarc_success_ratio;
    bool m_dmarc_success_ratio_isSet;
    bool m_dmarc_success_ratio_isValid;

    QString m_domain_reputation;
    bool m_domain_reputation_isSet;
    bool m_domain_reputation_isValid;

    double m_inbound_encryption_ratio;
    bool m_inbound_encryption_ratio_isSet;
    bool m_inbound_encryption_ratio_isValid;

    QList<OAIIpReputation> m_ip_reputations;
    bool m_ip_reputations_isSet;
    bool m_ip_reputations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_outbound_encryption_ratio;
    bool m_outbound_encryption_ratio_isSet;
    bool m_outbound_encryption_ratio_isValid;

    QList<OAIFeedbackLoop> m_spammy_feedback_loops;
    bool m_spammy_feedback_loops_isSet;
    bool m_spammy_feedback_loops_isValid;

    double m_spf_success_ratio;
    bool m_spf_success_ratio_isSet;
    bool m_spf_success_ratio_isValid;

    double m_user_reported_spam_ratio;
    bool m_user_reported_spam_ratio_isSet;
    bool m_user_reported_spam_ratio_isValid;

    double m_user_reported_spam_ratio_lower_bound;
    bool m_user_reported_spam_ratio_lower_bound_isSet;
    bool m_user_reported_spam_ratio_lower_bound_isValid;

    double m_user_reported_spam_ratio_upper_bound;
    bool m_user_reported_spam_ratio_upper_bound_isSet;
    bool m_user_reported_spam_ratio_upper_bound_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrafficStats)

#endif // OAITrafficStats_H
