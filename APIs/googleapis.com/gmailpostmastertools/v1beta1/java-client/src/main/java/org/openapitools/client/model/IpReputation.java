/*
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IP Reputation information for a set of IPs in a specific reputation category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:01.420019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpReputation {
  public static final String SERIALIZED_NAME_IP_COUNT = "ipCount";
  @SerializedName(SERIALIZED_NAME_IP_COUNT)
  private String ipCount;

  public static final String SERIALIZED_NAME_NUM_IPS = "numIps";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NUM_IPS)
  private String numIps;

  /**
   * The reputation category this IP reputation represents.
   */
  @JsonAdapter(ReputationEnum.Adapter.class)
  public enum ReputationEnum {
    REPUTATION_CATEGORY_UNSPECIFIED("REPUTATION_CATEGORY_UNSPECIFIED"),
    
    HIGH("HIGH"),
    
    MEDIUM("MEDIUM"),
    
    LOW("LOW"),
    
    BAD("BAD");

    private String value;

    ReputationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReputationEnum fromValue(String value) {
      for (ReputationEnum b : ReputationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReputationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReputationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReputationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReputationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReputationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPUTATION = "reputation";
  @SerializedName(SERIALIZED_NAME_REPUTATION)
  private ReputationEnum reputation;

  public static final String SERIALIZED_NAME_SAMPLE_IPS = "sampleIps";
  @SerializedName(SERIALIZED_NAME_SAMPLE_IPS)
  private List<String> sampleIps = new ArrayList<>();

  public IpReputation() {
  }

  public IpReputation ipCount(String ipCount) {
    this.ipCount = ipCount;
    return this;
  }

  /**
   * Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).
   * @return ipCount
   */
  @javax.annotation.Nullable
  public String getIpCount() {
    return ipCount;
  }

  public void setIpCount(String ipCount) {
    this.ipCount = ipCount;
  }


  @Deprecated
  public IpReputation numIps(String numIps) {
    this.numIps = numIps;
    return this;
  }

  /**
   * Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.
   * @return numIps
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getNumIps() {
    return numIps;
  }

  @Deprecated
  public void setNumIps(String numIps) {
    this.numIps = numIps;
  }


  public IpReputation reputation(ReputationEnum reputation) {
    this.reputation = reputation;
    return this;
  }

  /**
   * The reputation category this IP reputation represents.
   * @return reputation
   */
  @javax.annotation.Nullable
  public ReputationEnum getReputation() {
    return reputation;
  }

  public void setReputation(ReputationEnum reputation) {
    this.reputation = reputation;
  }


  public IpReputation sampleIps(List<String> sampleIps) {
    this.sampleIps = sampleIps;
    return this;
  }

  public IpReputation addSampleIpsItem(String sampleIpsItem) {
    if (this.sampleIps == null) {
      this.sampleIps = new ArrayList<>();
    }
    this.sampleIps.add(sampleIpsItem);
    return this;
  }

  /**
   * A sample of IPs in this reputation category.
   * @return sampleIps
   */
  @javax.annotation.Nullable
  public List<String> getSampleIps() {
    return sampleIps;
  }

  public void setSampleIps(List<String> sampleIps) {
    this.sampleIps = sampleIps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpReputation ipReputation = (IpReputation) o;
    return Objects.equals(this.ipCount, ipReputation.ipCount) &&
        Objects.equals(this.numIps, ipReputation.numIps) &&
        Objects.equals(this.reputation, ipReputation.reputation) &&
        Objects.equals(this.sampleIps, ipReputation.sampleIps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipCount, numIps, reputation, sampleIps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpReputation {\n");
    sb.append("    ipCount: ").append(toIndentedString(ipCount)).append("\n");
    sb.append("    numIps: ").append(toIndentedString(numIps)).append("\n");
    sb.append("    reputation: ").append(toIndentedString(reputation)).append("\n");
    sb.append("    sampleIps: ").append(toIndentedString(sampleIps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipCount");
    openapiFields.add("numIps");
    openapiFields.add("reputation");
    openapiFields.add("sampleIps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpReputation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpReputation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpReputation is not found in the empty JSON string", IpReputation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpReputation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpReputation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipCount") != null && !jsonObj.get("ipCount").isJsonNull()) && !jsonObj.get("ipCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipCount").toString()));
      }
      if ((jsonObj.get("numIps") != null && !jsonObj.get("numIps").isJsonNull()) && !jsonObj.get("numIps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numIps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numIps").toString()));
      }
      if ((jsonObj.get("reputation") != null && !jsonObj.get("reputation").isJsonNull()) && !jsonObj.get("reputation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reputation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reputation").toString()));
      }
      // validate the optional field `reputation`
      if (jsonObj.get("reputation") != null && !jsonObj.get("reputation").isJsonNull()) {
        ReputationEnum.validateJsonElement(jsonObj.get("reputation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sampleIps") != null && !jsonObj.get("sampleIps").isJsonNull() && !jsonObj.get("sampleIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleIps` to be an array in the JSON string but got `%s`", jsonObj.get("sampleIps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpReputation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpReputation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpReputation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpReputation.class));

       return (TypeAdapter<T>) new TypeAdapter<IpReputation>() {
           @Override
           public void write(JsonWriter out, IpReputation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpReputation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpReputation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpReputation
   * @throws IOException if the JSON string is invalid with respect to IpReputation
   */
  public static IpReputation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpReputation.class);
  }

  /**
   * Convert an instance of IpReputation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

