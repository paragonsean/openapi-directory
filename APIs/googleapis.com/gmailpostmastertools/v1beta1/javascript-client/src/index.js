/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DeliveryError from './model/DeliveryError';
import Domain from './model/Domain';
import FeedbackLoop from './model/FeedbackLoop';
import IpReputation from './model/IpReputation';
import ListDomainsResponse from './model/ListDomainsResponse';
import ListTrafficStatsResponse from './model/ListTrafficStatsResponse';
import TrafficStats from './model/TrafficStats';
import DomainsApi from './api/DomainsApi';


/**
* The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var GmailPostmasterToolsApi = require('index'); // See note below*.
* var xxxSvc = new GmailPostmasterToolsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new GmailPostmasterToolsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new GmailPostmasterToolsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new GmailPostmasterToolsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DeliveryError model constructor.
     * @property {module:model/DeliveryError}
     */
    DeliveryError,

    /**
     * The Domain model constructor.
     * @property {module:model/Domain}
     */
    Domain,

    /**
     * The FeedbackLoop model constructor.
     * @property {module:model/FeedbackLoop}
     */
    FeedbackLoop,

    /**
     * The IpReputation model constructor.
     * @property {module:model/IpReputation}
     */
    IpReputation,

    /**
     * The ListDomainsResponse model constructor.
     * @property {module:model/ListDomainsResponse}
     */
    ListDomainsResponse,

    /**
     * The ListTrafficStatsResponse model constructor.
     * @property {module:model/ListTrafficStatsResponse}
     */
    ListTrafficStatsResponse,

    /**
     * The TrafficStats model constructor.
     * @property {module:model/TrafficStats}
     */
    TrafficStats,

    /**
    * The DomainsApi service constructor.
    * @property {module:api/DomainsApi}
    */
    DomainsApi
};
