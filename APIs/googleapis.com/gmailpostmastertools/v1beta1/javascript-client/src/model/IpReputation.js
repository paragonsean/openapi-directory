/**
 * Gmail Postmaster Tools API
 * The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IpReputation model module.
 * @module model/IpReputation
 * @version v1beta1
 */
class IpReputation {
    /**
     * Constructs a new <code>IpReputation</code>.
     * IP Reputation information for a set of IPs in a specific reputation category.
     * @alias module:model/IpReputation
     */
    constructor() { 
        
        IpReputation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IpReputation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpReputation} obj Optional instance to populate.
     * @return {module:model/IpReputation} The populated <code>IpReputation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpReputation();

            if (data.hasOwnProperty('ipCount')) {
                obj['ipCount'] = ApiClient.convertToType(data['ipCount'], 'String');
            }
            if (data.hasOwnProperty('numIps')) {
                obj['numIps'] = ApiClient.convertToType(data['numIps'], 'String');
            }
            if (data.hasOwnProperty('reputation')) {
                obj['reputation'] = ApiClient.convertToType(data['reputation'], 'String');
            }
            if (data.hasOwnProperty('sampleIps')) {
                obj['sampleIps'] = ApiClient.convertToType(data['sampleIps'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpReputation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpReputation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ipCount'] && !(typeof data['ipCount'] === 'string' || data['ipCount'] instanceof String)) {
            throw new Error("Expected the field `ipCount` to be a primitive type in the JSON string but got " + data['ipCount']);
        }
        // ensure the json data is a string
        if (data['numIps'] && !(typeof data['numIps'] === 'string' || data['numIps'] instanceof String)) {
            throw new Error("Expected the field `numIps` to be a primitive type in the JSON string but got " + data['numIps']);
        }
        // ensure the json data is a string
        if (data['reputation'] && !(typeof data['reputation'] === 'string' || data['reputation'] instanceof String)) {
            throw new Error("Expected the field `reputation` to be a primitive type in the JSON string but got " + data['reputation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sampleIps'])) {
            throw new Error("Expected the field `sampleIps` to be an array in the JSON data but got " + data['sampleIps']);
        }

        return true;
    }


}



/**
 * Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).
 * @member {String} ipCount
 */
IpReputation.prototype['ipCount'] = undefined;

/**
 * Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.
 * @member {String} numIps
 */
IpReputation.prototype['numIps'] = undefined;

/**
 * The reputation category this IP reputation represents.
 * @member {module:model/IpReputation.ReputationEnum} reputation
 */
IpReputation.prototype['reputation'] = undefined;

/**
 * A sample of IPs in this reputation category.
 * @member {Array.<String>} sampleIps
 */
IpReputation.prototype['sampleIps'] = undefined;





/**
 * Allowed values for the <code>reputation</code> property.
 * @enum {String}
 * @readonly
 */
IpReputation['ReputationEnum'] = {

    /**
     * value: "REPUTATION_CATEGORY_UNSPECIFIED"
     * @const
     */
    "REPUTATION_CATEGORY_UNSPECIFIED": "REPUTATION_CATEGORY_UNSPECIFIED",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "BAD"
     * @const
     */
    "BAD": "BAD"
};



export default IpReputation;

