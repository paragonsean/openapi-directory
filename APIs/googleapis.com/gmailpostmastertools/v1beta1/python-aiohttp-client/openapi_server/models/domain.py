# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, name: str=None, permission: str=None):
        """Domain - a model defined in OpenAPI

        :param create_time: The create_time of this Domain.
        :param name: The name of this Domain.
        :param permission: The permission of this Domain.
        """
        self.openapi_types = {
            'create_time': str,
            'name': str,
            'permission': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'name': 'name',
            'permission': 'permission'
        }

        self._create_time = create_time
        self._name = name
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Domain.

        Timestamp when the user registered this domain. Assigned by the server.

        :return: The create_time of this Domain.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Domain.

        Timestamp when the user registered this domain. Assigned by the server.

        :param create_time: The create_time of this Domain.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Domain.

        The resource name of the Domain. Domain names have the form `domains/{domain_name}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com).

        :return: The name of this Domain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Domain.

        The resource name of the Domain. Domain names have the form `domains/{domain_name}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com).

        :param name: The name of this Domain.
        :type name: str
        """

        self._name = name

    @property
    def permission(self):
        """Gets the permission of this Domain.

        User’s permission for this domain. Assigned by the server.

        :return: The permission of this Domain.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Domain.

        User’s permission for this domain. Assigned by the server.

        :param permission: The permission of this Domain.
        :type permission: str
        """
        allowed_values = ["PERMISSION_UNSPECIFIED", "OWNER", "READER", "NONE"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission
