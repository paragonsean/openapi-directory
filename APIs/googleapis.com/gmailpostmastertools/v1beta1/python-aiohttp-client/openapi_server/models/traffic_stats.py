# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_error import DeliveryError
from openapi_server.models.feedback_loop import FeedbackLoop
from openapi_server.models.ip_reputation import IpReputation
from openapi_server import util


class TrafficStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_errors: List[DeliveryError]=None, dkim_success_ratio: float=None, dmarc_success_ratio: float=None, domain_reputation: str=None, inbound_encryption_ratio: float=None, ip_reputations: List[IpReputation]=None, name: str=None, outbound_encryption_ratio: float=None, spammy_feedback_loops: List[FeedbackLoop]=None, spf_success_ratio: float=None, user_reported_spam_ratio: float=None, user_reported_spam_ratio_lower_bound: float=None, user_reported_spam_ratio_upper_bound: float=None):
        """TrafficStats - a model defined in OpenAPI

        :param delivery_errors: The delivery_errors of this TrafficStats.
        :param dkim_success_ratio: The dkim_success_ratio of this TrafficStats.
        :param dmarc_success_ratio: The dmarc_success_ratio of this TrafficStats.
        :param domain_reputation: The domain_reputation of this TrafficStats.
        :param inbound_encryption_ratio: The inbound_encryption_ratio of this TrafficStats.
        :param ip_reputations: The ip_reputations of this TrafficStats.
        :param name: The name of this TrafficStats.
        :param outbound_encryption_ratio: The outbound_encryption_ratio of this TrafficStats.
        :param spammy_feedback_loops: The spammy_feedback_loops of this TrafficStats.
        :param spf_success_ratio: The spf_success_ratio of this TrafficStats.
        :param user_reported_spam_ratio: The user_reported_spam_ratio of this TrafficStats.
        :param user_reported_spam_ratio_lower_bound: The user_reported_spam_ratio_lower_bound of this TrafficStats.
        :param user_reported_spam_ratio_upper_bound: The user_reported_spam_ratio_upper_bound of this TrafficStats.
        """
        self.openapi_types = {
            'delivery_errors': List[DeliveryError],
            'dkim_success_ratio': float,
            'dmarc_success_ratio': float,
            'domain_reputation': str,
            'inbound_encryption_ratio': float,
            'ip_reputations': List[IpReputation],
            'name': str,
            'outbound_encryption_ratio': float,
            'spammy_feedback_loops': List[FeedbackLoop],
            'spf_success_ratio': float,
            'user_reported_spam_ratio': float,
            'user_reported_spam_ratio_lower_bound': float,
            'user_reported_spam_ratio_upper_bound': float
        }

        self.attribute_map = {
            'delivery_errors': 'deliveryErrors',
            'dkim_success_ratio': 'dkimSuccessRatio',
            'dmarc_success_ratio': 'dmarcSuccessRatio',
            'domain_reputation': 'domainReputation',
            'inbound_encryption_ratio': 'inboundEncryptionRatio',
            'ip_reputations': 'ipReputations',
            'name': 'name',
            'outbound_encryption_ratio': 'outboundEncryptionRatio',
            'spammy_feedback_loops': 'spammyFeedbackLoops',
            'spf_success_ratio': 'spfSuccessRatio',
            'user_reported_spam_ratio': 'userReportedSpamRatio',
            'user_reported_spam_ratio_lower_bound': 'userReportedSpamRatioLowerBound',
            'user_reported_spam_ratio_upper_bound': 'userReportedSpamRatioUpperBound'
        }

        self._delivery_errors = delivery_errors
        self._dkim_success_ratio = dkim_success_ratio
        self._dmarc_success_ratio = dmarc_success_ratio
        self._domain_reputation = domain_reputation
        self._inbound_encryption_ratio = inbound_encryption_ratio
        self._ip_reputations = ip_reputations
        self._name = name
        self._outbound_encryption_ratio = outbound_encryption_ratio
        self._spammy_feedback_loops = spammy_feedback_loops
        self._spf_success_ratio = spf_success_ratio
        self._user_reported_spam_ratio = user_reported_spam_ratio
        self._user_reported_spam_ratio_lower_bound = user_reported_spam_ratio_lower_bound
        self._user_reported_spam_ratio_upper_bound = user_reported_spam_ratio_upper_bound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficStats of this TrafficStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_errors(self):
        """Gets the delivery_errors of this TrafficStats.

        Delivery errors for the domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :return: The delivery_errors of this TrafficStats.
        :rtype: List[DeliveryError]
        """
        return self._delivery_errors

    @delivery_errors.setter
    def delivery_errors(self, delivery_errors):
        """Sets the delivery_errors of this TrafficStats.

        Delivery errors for the domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :param delivery_errors: The delivery_errors of this TrafficStats.
        :type delivery_errors: List[DeliveryError]
        """

        self._delivery_errors = delivery_errors

    @property
    def dkim_success_ratio(self):
        """Gets the dkim_success_ratio of this TrafficStats.

        The ratio of mail that successfully authenticated with DKIM vs. all mail that attempted to authenticate with [DKIM](http://www.dkim.org/). Spoofed mail is excluded.

        :return: The dkim_success_ratio of this TrafficStats.
        :rtype: float
        """
        return self._dkim_success_ratio

    @dkim_success_ratio.setter
    def dkim_success_ratio(self, dkim_success_ratio):
        """Sets the dkim_success_ratio of this TrafficStats.

        The ratio of mail that successfully authenticated with DKIM vs. all mail that attempted to authenticate with [DKIM](http://www.dkim.org/). Spoofed mail is excluded.

        :param dkim_success_ratio: The dkim_success_ratio of this TrafficStats.
        :type dkim_success_ratio: float
        """

        self._dkim_success_ratio = dkim_success_ratio

    @property
    def dmarc_success_ratio(self):
        """Gets the dmarc_success_ratio of this TrafficStats.

        The ratio of mail that passed [DMARC](https://dmarc.org/) alignment checks vs all mail received from the domain that successfully authenticated with either of [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :return: The dmarc_success_ratio of this TrafficStats.
        :rtype: float
        """
        return self._dmarc_success_ratio

    @dmarc_success_ratio.setter
    def dmarc_success_ratio(self, dmarc_success_ratio):
        """Sets the dmarc_success_ratio of this TrafficStats.

        The ratio of mail that passed [DMARC](https://dmarc.org/) alignment checks vs all mail received from the domain that successfully authenticated with either of [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :param dmarc_success_ratio: The dmarc_success_ratio of this TrafficStats.
        :type dmarc_success_ratio: float
        """

        self._dmarc_success_ratio = dmarc_success_ratio

    @property
    def domain_reputation(self):
        """Gets the domain_reputation of this TrafficStats.

        Reputation of the domain.

        :return: The domain_reputation of this TrafficStats.
        :rtype: str
        """
        return self._domain_reputation

    @domain_reputation.setter
    def domain_reputation(self, domain_reputation):
        """Sets the domain_reputation of this TrafficStats.

        Reputation of the domain.

        :param domain_reputation: The domain_reputation of this TrafficStats.
        :type domain_reputation: str
        """
        allowed_values = ["REPUTATION_CATEGORY_UNSPECIFIED", "HIGH", "MEDIUM", "LOW", "BAD"]  # noqa: E501
        if domain_reputation not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_reputation` ({0}), must be one of {1}"
                .format(domain_reputation, allowed_values)
            )

        self._domain_reputation = domain_reputation

    @property
    def inbound_encryption_ratio(self):
        """Gets the inbound_encryption_ratio of this TrafficStats.

        The ratio of incoming mail (to Gmail), that passed secure transport (TLS) vs all mail received from that domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :return: The inbound_encryption_ratio of this TrafficStats.
        :rtype: float
        """
        return self._inbound_encryption_ratio

    @inbound_encryption_ratio.setter
    def inbound_encryption_ratio(self, inbound_encryption_ratio):
        """Sets the inbound_encryption_ratio of this TrafficStats.

        The ratio of incoming mail (to Gmail), that passed secure transport (TLS) vs all mail received from that domain. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :param inbound_encryption_ratio: The inbound_encryption_ratio of this TrafficStats.
        :type inbound_encryption_ratio: float
        """

        self._inbound_encryption_ratio = inbound_encryption_ratio

    @property
    def ip_reputations(self):
        """Gets the ip_reputations of this TrafficStats.

        Reputation information pertaining to the IP addresses of the email servers for the domain. There is exactly one entry for each reputation category except REPUTATION_CATEGORY_UNSPECIFIED.

        :return: The ip_reputations of this TrafficStats.
        :rtype: List[IpReputation]
        """
        return self._ip_reputations

    @ip_reputations.setter
    def ip_reputations(self, ip_reputations):
        """Sets the ip_reputations of this TrafficStats.

        Reputation information pertaining to the IP addresses of the email servers for the domain. There is exactly one entry for each reputation category except REPUTATION_CATEGORY_UNSPECIFIED.

        :param ip_reputations: The ip_reputations of this TrafficStats.
        :type ip_reputations: List[IpReputation]
        """

        self._ip_reputations = ip_reputations

    @property
    def name(self):
        """Gets the name of this TrafficStats.

        The resource name of the traffic statistics. Traffic statistic names have the form `domains/{domain}/trafficStats/{date}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com) of the domain this traffic statistics pertains to and date is the date in yyyymmdd format that these statistics corresponds to. For example: domains/mymail.mydomain.com/trafficStats/20160807

        :return: The name of this TrafficStats.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrafficStats.

        The resource name of the traffic statistics. Traffic statistic names have the form `domains/{domain}/trafficStats/{date}`, where domain_name is the fully qualified domain name (i.e., mymail.mydomain.com) of the domain this traffic statistics pertains to and date is the date in yyyymmdd format that these statistics corresponds to. For example: domains/mymail.mydomain.com/trafficStats/20160807

        :param name: The name of this TrafficStats.
        :type name: str
        """

        self._name = name

    @property
    def outbound_encryption_ratio(self):
        """Gets the outbound_encryption_ratio of this TrafficStats.

        The ratio of outgoing mail (from Gmail) that was accepted over secure transport (TLS).

        :return: The outbound_encryption_ratio of this TrafficStats.
        :rtype: float
        """
        return self._outbound_encryption_ratio

    @outbound_encryption_ratio.setter
    def outbound_encryption_ratio(self, outbound_encryption_ratio):
        """Sets the outbound_encryption_ratio of this TrafficStats.

        The ratio of outgoing mail (from Gmail) that was accepted over secure transport (TLS).

        :param outbound_encryption_ratio: The outbound_encryption_ratio of this TrafficStats.
        :type outbound_encryption_ratio: float
        """

        self._outbound_encryption_ratio = outbound_encryption_ratio

    @property
    def spammy_feedback_loops(self):
        """Gets the spammy_feedback_loops of this TrafficStats.

        Spammy [Feedback loop identifiers] (https://support.google.com/mail/answer/6254652) with their individual spam rates. This metric only pertains to traffic that is authenticated by [DKIM](http://www.dkim.org/).

        :return: The spammy_feedback_loops of this TrafficStats.
        :rtype: List[FeedbackLoop]
        """
        return self._spammy_feedback_loops

    @spammy_feedback_loops.setter
    def spammy_feedback_loops(self, spammy_feedback_loops):
        """Sets the spammy_feedback_loops of this TrafficStats.

        Spammy [Feedback loop identifiers] (https://support.google.com/mail/answer/6254652) with their individual spam rates. This metric only pertains to traffic that is authenticated by [DKIM](http://www.dkim.org/).

        :param spammy_feedback_loops: The spammy_feedback_loops of this TrafficStats.
        :type spammy_feedback_loops: List[FeedbackLoop]
        """

        self._spammy_feedback_loops = spammy_feedback_loops

    @property
    def spf_success_ratio(self):
        """Gets the spf_success_ratio of this TrafficStats.

        The ratio of mail that successfully authenticated with SPF vs. all mail that attempted to authenticate with [SPF](http://www.openspf.org/). Spoofed mail is excluded.

        :return: The spf_success_ratio of this TrafficStats.
        :rtype: float
        """
        return self._spf_success_ratio

    @spf_success_ratio.setter
    def spf_success_ratio(self, spf_success_ratio):
        """Sets the spf_success_ratio of this TrafficStats.

        The ratio of mail that successfully authenticated with SPF vs. all mail that attempted to authenticate with [SPF](http://www.openspf.org/). Spoofed mail is excluded.

        :param spf_success_ratio: The spf_success_ratio of this TrafficStats.
        :type spf_success_ratio: float
        """

        self._spf_success_ratio = spf_success_ratio

    @property
    def user_reported_spam_ratio(self):
        """Gets the user_reported_spam_ratio of this TrafficStats.

        The ratio of user-report spam vs. email that was sent to the inbox. This is potentially inexact -- users may want to refer to the description of the interval fields userReportedSpamRatioLowerBound and userReportedSpamRatioUpperBound for more explicit accuracy guarantees. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :return: The user_reported_spam_ratio of this TrafficStats.
        :rtype: float
        """
        return self._user_reported_spam_ratio

    @user_reported_spam_ratio.setter
    def user_reported_spam_ratio(self, user_reported_spam_ratio):
        """Sets the user_reported_spam_ratio of this TrafficStats.

        The ratio of user-report spam vs. email that was sent to the inbox. This is potentially inexact -- users may want to refer to the description of the interval fields userReportedSpamRatioLowerBound and userReportedSpamRatioUpperBound for more explicit accuracy guarantees. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :param user_reported_spam_ratio: The user_reported_spam_ratio of this TrafficStats.
        :type user_reported_spam_ratio: float
        """

        self._user_reported_spam_ratio = user_reported_spam_ratio

    @property
    def user_reported_spam_ratio_lower_bound(self):
        """Gets the user_reported_spam_ratio_lower_bound of this TrafficStats.

        The lower bound of the confidence interval for the user reported spam ratio. If this field is set, then the value of userReportedSpamRatio is set to the midpoint of this interval and is thus inexact. However, the true ratio is guaranteed to be in between this lower bound and the corresponding upper bound 95% of the time. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :return: The user_reported_spam_ratio_lower_bound of this TrafficStats.
        :rtype: float
        """
        return self._user_reported_spam_ratio_lower_bound

    @user_reported_spam_ratio_lower_bound.setter
    def user_reported_spam_ratio_lower_bound(self, user_reported_spam_ratio_lower_bound):
        """Sets the user_reported_spam_ratio_lower_bound of this TrafficStats.

        The lower bound of the confidence interval for the user reported spam ratio. If this field is set, then the value of userReportedSpamRatio is set to the midpoint of this interval and is thus inexact. However, the true ratio is guaranteed to be in between this lower bound and the corresponding upper bound 95% of the time. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :param user_reported_spam_ratio_lower_bound: The user_reported_spam_ratio_lower_bound of this TrafficStats.
        :type user_reported_spam_ratio_lower_bound: float
        """

        self._user_reported_spam_ratio_lower_bound = user_reported_spam_ratio_lower_bound

    @property
    def user_reported_spam_ratio_upper_bound(self):
        """Gets the user_reported_spam_ratio_upper_bound of this TrafficStats.

        The upper bound of the confidence interval for the user reported spam ratio. If this field is set, then the value of userReportedSpamRatio is set to the midpoint of this interval and is thus inexact. However, the true ratio is guaranteed to be in between this upper bound and the corresponding lower bound 95% of the time. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :return: The user_reported_spam_ratio_upper_bound of this TrafficStats.
        :rtype: float
        """
        return self._user_reported_spam_ratio_upper_bound

    @user_reported_spam_ratio_upper_bound.setter
    def user_reported_spam_ratio_upper_bound(self, user_reported_spam_ratio_upper_bound):
        """Sets the user_reported_spam_ratio_upper_bound of this TrafficStats.

        The upper bound of the confidence interval for the user reported spam ratio. If this field is set, then the value of userReportedSpamRatio is set to the midpoint of this interval and is thus inexact. However, the true ratio is guaranteed to be in between this upper bound and the corresponding lower bound 95% of the time. This metric only pertains to emails authenticated by [DKIM](http://www.dkim.org/).

        :param user_reported_spam_ratio_upper_bound: The user_reported_spam_ratio_upper_bound of this TrafficStats.
        :type user_reported_spam_ratio_upper_bound: float
        """

        self._user_reported_spam_ratio_upper_bound = user_reported_spam_ratio_upper_bound
