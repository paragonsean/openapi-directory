# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpReputation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_count: str=None, num_ips: str=None, reputation: str=None, sample_ips: List[str]=None):
        """IpReputation - a model defined in OpenAPI

        :param ip_count: The ip_count of this IpReputation.
        :param num_ips: The num_ips of this IpReputation.
        :param reputation: The reputation of this IpReputation.
        :param sample_ips: The sample_ips of this IpReputation.
        """
        self.openapi_types = {
            'ip_count': str,
            'num_ips': str,
            'reputation': str,
            'sample_ips': List[str]
        }

        self.attribute_map = {
            'ip_count': 'ipCount',
            'num_ips': 'numIps',
            'reputation': 'reputation',
            'sample_ips': 'sampleIps'
        }

        self._ip_count = ip_count
        self._num_ips = num_ips
        self._reputation = reputation
        self._sample_ips = sample_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpReputation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpReputation of this IpReputation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_count(self):
        """Gets the ip_count of this IpReputation.

        Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :return: The ip_count of this IpReputation.
        :rtype: str
        """
        return self._ip_count

    @ip_count.setter
    def ip_count(self, ip_count):
        """Sets the ip_count of this IpReputation.

        Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/).

        :param ip_count: The ip_count of this IpReputation.
        :type ip_count: str
        """

        self._ip_count = ip_count

    @property
    def num_ips(self):
        """Gets the num_ips of this IpReputation.

        Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.

        :return: The num_ips of this IpReputation.
        :rtype: str
        """
        return self._num_ips

    @num_ips.setter
    def num_ips(self, num_ips):
        """Sets the num_ips of this IpReputation.

        Total number of unique IPs in this reputation category. This metric only pertains to traffic that passed [SPF](http://www.openspf.org/) or [DKIM](http://www.dkim.org/). Deprecated to be complied with ApiLinter for Quantities. Use ip_count instead.

        :param num_ips: The num_ips of this IpReputation.
        :type num_ips: str
        """

        self._num_ips = num_ips

    @property
    def reputation(self):
        """Gets the reputation of this IpReputation.

        The reputation category this IP reputation represents.

        :return: The reputation of this IpReputation.
        :rtype: str
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this IpReputation.

        The reputation category this IP reputation represents.

        :param reputation: The reputation of this IpReputation.
        :type reputation: str
        """
        allowed_values = ["REPUTATION_CATEGORY_UNSPECIFIED", "HIGH", "MEDIUM", "LOW", "BAD"]  # noqa: E501
        if reputation not in allowed_values:
            raise ValueError(
                "Invalid value for `reputation` ({0}), must be one of {1}"
                .format(reputation, allowed_values)
            )

        self._reputation = reputation

    @property
    def sample_ips(self):
        """Gets the sample_ips of this IpReputation.

        A sample of IPs in this reputation category.

        :return: The sample_ips of this IpReputation.
        :rtype: List[str]
        """
        return self._sample_ips

    @sample_ips.setter
    def sample_ips(self, sample_ips):
        """Sets the sample_ips of this IpReputation.

        A sample of IPs in this reputation category.

        :param sample_ips: The sample_ips of this IpReputation.
        :type sample_ips: List[str]
        """

        self._sample_ips = sample_ips
