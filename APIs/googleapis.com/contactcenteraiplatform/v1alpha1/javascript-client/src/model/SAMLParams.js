/**
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SAMLParams model module.
 * @module model/SAMLParams
 * @version v1alpha1
 */
class SAMLParams {
    /**
     * Constructs a new <code>SAMLParams</code>.
     * Message storing SAML params to enable Google as IDP.
     * @alias module:model/SAMLParams
     */
    constructor() { 
        
        SAMLParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SAMLParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SAMLParams} obj Optional instance to populate.
     * @return {module:model/SAMLParams} The populated <code>SAMLParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SAMLParams();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('emailMapping')) {
                obj['emailMapping'] = ApiClient.convertToType(data['emailMapping'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('ssoUri')) {
                obj['ssoUri'] = ApiClient.convertToType(data['ssoUri'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SAMLParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SAMLParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['emailMapping'] && !(typeof data['emailMapping'] === 'string' || data['emailMapping'] instanceof String)) {
            throw new Error("Expected the field `emailMapping` to be a primitive type in the JSON string but got " + data['emailMapping']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['ssoUri'] && !(typeof data['ssoUri'] === 'string' || data['ssoUri'] instanceof String)) {
            throw new Error("Expected the field `ssoUri` to be a primitive type in the JSON string but got " + data['ssoUri']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }

        return true;
    }


}



/**
 * SAML certificate
 * @member {String} certificate
 */
SAMLParams.prototype['certificate'] = undefined;

/**
 * IdP field that maps to the userâ€™s email address
 * @member {String} emailMapping
 */
SAMLParams.prototype['emailMapping'] = undefined;

/**
 * Entity id URL
 * @member {String} entityId
 */
SAMLParams.prototype['entityId'] = undefined;

/**
 * Single sign-on URL
 * @member {String} ssoUri
 */
SAMLParams.prototype['ssoUri'] = undefined;

/**
 * Email address of the first admin users.
 * @member {String} userEmail
 */
SAMLParams.prototype['userEmail'] = undefined;






export default SAMLParams;

