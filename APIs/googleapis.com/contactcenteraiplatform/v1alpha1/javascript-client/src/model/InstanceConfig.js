/**
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstanceConfig model module.
 * @module model/InstanceConfig
 * @version v1alpha1
 */
class InstanceConfig {
    /**
     * Constructs a new <code>InstanceConfig</code>.
     * Message storing the instance configuration.
     * @alias module:model/InstanceConfig
     */
    constructor() { 
        
        InstanceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceConfig} obj Optional instance to populate.
     * @return {module:model/InstanceConfig} The populated <code>InstanceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceConfig();

            if (data.hasOwnProperty('instanceSize')) {
                obj['instanceSize'] = ApiClient.convertToType(data['instanceSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instanceSize'] && !(typeof data['instanceSize'] === 'string' || data['instanceSize'] instanceof String)) {
            throw new Error("Expected the field `instanceSize` to be a primitive type in the JSON string but got " + data['instanceSize']);
        }

        return true;
    }


}



/**
 * The instance size of this the instance configuration.
 * @member {module:model/InstanceConfig.InstanceSizeEnum} instanceSize
 */
InstanceConfig.prototype['instanceSize'] = undefined;





/**
 * Allowed values for the <code>instanceSize</code> property.
 * @enum {String}
 * @readonly
 */
InstanceConfig['InstanceSizeEnum'] = {

    /**
     * value: "INSTANCE_SIZE_UNSPECIFIED"
     * @const
     */
    "INSTANCE_SIZE_UNSPECIFIED": "INSTANCE_SIZE_UNSPECIFIED",

    /**
     * value: "STANDARD_SMALL"
     * @const
     */
    "STANDARD_SMALL": "STANDARD_SMALL",

    /**
     * value: "STANDARD_MEDIUM"
     * @const
     */
    "STANDARD_MEDIUM": "STANDARD_MEDIUM",

    /**
     * value: "STANDARD_LARGE"
     * @const
     */
    "STANDARD_LARGE": "STANDARD_LARGE",

    /**
     * value: "STANDARD_XLARGE"
     * @const
     */
    "STANDARD_XLARGE": "STANDARD_XLARGE",

    /**
     * value: "STANDARD_2XLARGE"
     * @const
     */
    "STANDARD_2XLARGE": "STANDARD_2XLARGE",

    /**
     * value: "STANDARD_3XLARGE"
     * @const
     */
    "STANDARD_3XLARGE": "STANDARD_3XLARGE",

    /**
     * value: "DEV_XSMALL"
     * @const
     */
    "DEV_XSMALL": "DEV_XSMALL"
};



export default InstanceConfig;

