/**
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdminUser from './AdminUser';
import InstanceConfig from './InstanceConfig';
import SAMLParams from './SAMLParams';
import URIs from './URIs';

/**
 * The ContactCenter model module.
 * @module model/ContactCenter
 * @version v1alpha1
 */
class ContactCenter {
    /**
     * Constructs a new <code>ContactCenter</code>.
     * Message describing ContactCenter object Next ID: 20
     * @alias module:model/ContactCenter
     */
    constructor() { 
        
        ContactCenter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactCenter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactCenter} obj Optional instance to populate.
     * @return {module:model/ContactCenter} The populated <code>ContactCenter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactCenter();

            if (data.hasOwnProperty('adminUser')) {
                obj['adminUser'] = AdminUser.constructFromObject(data['adminUser']);
            }
            if (data.hasOwnProperty('ccaipManagedUsers')) {
                obj['ccaipManagedUsers'] = ApiClient.convertToType(data['ccaipManagedUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customerDomainPrefix')) {
                obj['customerDomainPrefix'] = ApiClient.convertToType(data['customerDomainPrefix'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('instanceConfig')) {
                obj['instanceConfig'] = InstanceConfig.constructFromObject(data['instanceConfig']);
            }
            if (data.hasOwnProperty('kmsKey')) {
                obj['kmsKey'] = ApiClient.convertToType(data['kmsKey'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('privateComponents')) {
                obj['privateComponents'] = ApiClient.convertToType(data['privateComponents'], ['String']);
            }
            if (data.hasOwnProperty('samlParams')) {
                obj['samlParams'] = SAMLParams.constructFromObject(data['samlParams']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('uris')) {
                obj['uris'] = URIs.constructFromObject(data['uris']);
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactCenter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactCenter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adminUser`
        if (data['adminUser']) { // data not null
          AdminUser.validateJSON(data['adminUser']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customerDomainPrefix'] && !(typeof data['customerDomainPrefix'] === 'string' || data['customerDomainPrefix'] instanceof String)) {
            throw new Error("Expected the field `customerDomainPrefix` to be a primitive type in the JSON string but got " + data['customerDomainPrefix']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `instanceConfig`
        if (data['instanceConfig']) { // data not null
          InstanceConfig.validateJSON(data['instanceConfig']);
        }
        // ensure the json data is a string
        if (data['kmsKey'] && !(typeof data['kmsKey'] === 'string' || data['kmsKey'] instanceof String)) {
            throw new Error("Expected the field `kmsKey` to be a primitive type in the JSON string but got " + data['kmsKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['privateComponents'])) {
            throw new Error("Expected the field `privateComponents` to be an array in the JSON data but got " + data['privateComponents']);
        }
        // validate the optional field `samlParams`
        if (data['samlParams']) { // data not null
          SAMLParams.validateJSON(data['samlParams']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `uris`
        if (data['uris']) { // data not null
          URIs.validateJSON(data['uris']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdminUser} adminUser
 */
ContactCenter.prototype['adminUser'] = undefined;

/**
 * Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
 * @member {Boolean} ccaipManagedUsers
 */
ContactCenter.prototype['ccaipManagedUsers'] = undefined;

/**
 * Output only. [Output only] Create time stamp
 * @member {String} createTime
 */
ContactCenter.prototype['createTime'] = undefined;

/**
 * Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
 * @member {String} customerDomainPrefix
 */
ContactCenter.prototype['customerDomainPrefix'] = undefined;

/**
 * Required. A user friendly name for the ContactCenter.
 * @member {String} displayName
 */
ContactCenter.prototype['displayName'] = undefined;

/**
 * @member {module:model/InstanceConfig} instanceConfig
 */
ContactCenter.prototype['instanceConfig'] = undefined;

/**
 * Immutable. The KMS key name to encrypt the user input (`ContactCenter`).
 * @member {String} kmsKey
 */
ContactCenter.prototype['kmsKey'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
ContactCenter.prototype['labels'] = undefined;

/**
 * name of resource
 * @member {String} name
 */
ContactCenter.prototype['name'] = undefined;

/**
 * Output only. A list of UJET components that should be privately accessed. This field is set by reading settings from the data plane. For more information about the format of the component please refer to go/ccaip-vpc-sc-org-policy. This field is must be fully populated only for Create/Update resource operations. The main use case for this field is OrgPolicy checks via CPE.
 * @member {Array.<String>} privateComponents
 */
ContactCenter.prototype['privateComponents'] = undefined;

/**
 * @member {module:model/SAMLParams} samlParams
 */
ContactCenter.prototype['samlParams'] = undefined;

/**
 * Output only. The state of this contact center.
 * @member {module:model/ContactCenter.StateEnum} state
 */
ContactCenter.prototype['state'] = undefined;

/**
 * Output only. [Output only] Update time stamp
 * @member {String} updateTime
 */
ContactCenter.prototype['updateTime'] = undefined;

/**
 * @member {module:model/URIs} uris
 */
ContactCenter.prototype['uris'] = undefined;

/**
 * Optional. Email address of the first admin user.
 * @member {String} userEmail
 */
ContactCenter.prototype['userEmail'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ContactCenter['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STATE_DEPLOYING"
     * @const
     */
    "DEPLOYING": "STATE_DEPLOYING",

    /**
     * value: "STATE_DEPLOYED"
     * @const
     */
    "DEPLOYED": "STATE_DEPLOYED",

    /**
     * value: "STATE_TERMINATING"
     * @const
     */
    "TERMINATING": "STATE_TERMINATING",

    /**
     * value: "STATE_FAILED"
     * @const
     */
    "FAILED": "STATE_FAILED",

    /**
     * value: "STATE_TERMINATING_FAILED"
     * @const
     */
    "TERMINATING_FAILED": "STATE_TERMINATING_FAILED",

    /**
     * value: "STATE_TERMINATED"
     * @const
     */
    "TERMINATED": "STATE_TERMINATED",

    /**
     * value: "STATE_IN_GRACE_PERIOD"
     * @const
     */
    "IN_GRACE_PERIOD": "STATE_IN_GRACE_PERIOD"
};



export default ContactCenter;

