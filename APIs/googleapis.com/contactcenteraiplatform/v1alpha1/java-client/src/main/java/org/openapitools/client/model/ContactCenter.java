/*
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdminUser;
import org.openapitools.client.model.InstanceConfig;
import org.openapitools.client.model.SAMLParams;
import org.openapitools.client.model.URIs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing ContactCenter object Next ID: 20
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:21.672665-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactCenter {
  public static final String SERIALIZED_NAME_ADMIN_USER = "adminUser";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER)
  private AdminUser adminUser;

  public static final String SERIALIZED_NAME_CCAIP_MANAGED_USERS = "ccaipManagedUsers";
  @SerializedName(SERIALIZED_NAME_CCAIP_MANAGED_USERS)
  private Boolean ccaipManagedUsers;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOMER_DOMAIN_PREFIX = "customerDomainPrefix";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DOMAIN_PREFIX)
  private String customerDomainPrefix;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INSTANCE_CONFIG = "instanceConfig";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CONFIG)
  private InstanceConfig instanceConfig;

  public static final String SERIALIZED_NAME_KMS_KEY = "kmsKey";
  @SerializedName(SERIALIZED_NAME_KMS_KEY)
  private String kmsKey;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE_COMPONENTS = "privateComponents";
  @SerializedName(SERIALIZED_NAME_PRIVATE_COMPONENTS)
  private List<String> privateComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAML_PARAMS = "samlParams";
  @SerializedName(SERIALIZED_NAME_SAML_PARAMS)
  private SAMLParams samlParams;

  /**
   * Output only. The state of this contact center.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DEPLOYING("STATE_DEPLOYING"),
    
    DEPLOYED("STATE_DEPLOYED"),
    
    TERMINATING("STATE_TERMINATING"),
    
    FAILED("STATE_FAILED"),
    
    TERMINATING_FAILED("STATE_TERMINATING_FAILED"),
    
    TERMINATED("STATE_TERMINATED"),
    
    IN_GRACE_PERIOD("STATE_IN_GRACE_PERIOD");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_URIS = "uris";
  @SerializedName(SERIALIZED_NAME_URIS)
  private URIs uris;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public ContactCenter() {
  }

  public ContactCenter(
     String createTime, 
     List<String> privateComponents, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.privateComponents = privateComponents;
    this.state = state;
    this.updateTime = updateTime;
  }

  public ContactCenter adminUser(AdminUser adminUser) {
    this.adminUser = adminUser;
    return this;
  }

  /**
   * Get adminUser
   * @return adminUser
   */
  @javax.annotation.Nullable
  public AdminUser getAdminUser() {
    return adminUser;
  }

  public void setAdminUser(AdminUser adminUser) {
    this.adminUser = adminUser;
  }


  public ContactCenter ccaipManagedUsers(Boolean ccaipManagedUsers) {
    this.ccaipManagedUsers = ccaipManagedUsers;
    return this;
  }

  /**
   * Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
   * @return ccaipManagedUsers
   */
  @javax.annotation.Nullable
  public Boolean getCcaipManagedUsers() {
    return ccaipManagedUsers;
  }

  public void setCcaipManagedUsers(Boolean ccaipManagedUsers) {
    this.ccaipManagedUsers = ccaipManagedUsers;
  }


  /**
   * Output only. [Output only] Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ContactCenter customerDomainPrefix(String customerDomainPrefix) {
    this.customerDomainPrefix = customerDomainPrefix;
    return this;
  }

  /**
   * Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * @return customerDomainPrefix
   */
  @javax.annotation.Nullable
  public String getCustomerDomainPrefix() {
    return customerDomainPrefix;
  }

  public void setCustomerDomainPrefix(String customerDomainPrefix) {
    this.customerDomainPrefix = customerDomainPrefix;
  }


  public ContactCenter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. A user friendly name for the ContactCenter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ContactCenter instanceConfig(InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
    return this;
  }

  /**
   * Get instanceConfig
   * @return instanceConfig
   */
  @javax.annotation.Nullable
  public InstanceConfig getInstanceConfig() {
    return instanceConfig;
  }

  public void setInstanceConfig(InstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
  }


  public ContactCenter kmsKey(String kmsKey) {
    this.kmsKey = kmsKey;
    return this;
  }

  /**
   * Immutable. The KMS key name to encrypt the user input (&#x60;ContactCenter&#x60;).
   * @return kmsKey
   */
  @javax.annotation.Nullable
  public String getKmsKey() {
    return kmsKey;
  }

  public void setKmsKey(String kmsKey) {
    this.kmsKey = kmsKey;
  }


  public ContactCenter labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ContactCenter putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ContactCenter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of resource
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. A list of UJET components that should be privately accessed. This field is set by reading settings from the data plane. For more information about the format of the component please refer to go/ccaip-vpc-sc-org-policy. This field is must be fully populated only for Create/Update resource operations. The main use case for this field is OrgPolicy checks via CPE.
   * @return privateComponents
   */
  @javax.annotation.Nullable
  public List<String> getPrivateComponents() {
    return privateComponents;
  }



  public ContactCenter samlParams(SAMLParams samlParams) {
    this.samlParams = samlParams;
    return this;
  }

  /**
   * Get samlParams
   * @return samlParams
   */
  @javax.annotation.Nullable
  public SAMLParams getSamlParams() {
    return samlParams;
  }

  public void setSamlParams(SAMLParams samlParams) {
    this.samlParams = samlParams;
  }


  /**
   * Output only. The state of this contact center.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. [Output only] Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public ContactCenter uris(URIs uris) {
    this.uris = uris;
    return this;
  }

  /**
   * Get uris
   * @return uris
   */
  @javax.annotation.Nullable
  public URIs getUris() {
    return uris;
  }

  public void setUris(URIs uris) {
    this.uris = uris;
  }


  public ContactCenter userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Optional. Email address of the first admin user.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactCenter contactCenter = (ContactCenter) o;
    return Objects.equals(this.adminUser, contactCenter.adminUser) &&
        Objects.equals(this.ccaipManagedUsers, contactCenter.ccaipManagedUsers) &&
        Objects.equals(this.createTime, contactCenter.createTime) &&
        Objects.equals(this.customerDomainPrefix, contactCenter.customerDomainPrefix) &&
        Objects.equals(this.displayName, contactCenter.displayName) &&
        Objects.equals(this.instanceConfig, contactCenter.instanceConfig) &&
        Objects.equals(this.kmsKey, contactCenter.kmsKey) &&
        Objects.equals(this.labels, contactCenter.labels) &&
        Objects.equals(this.name, contactCenter.name) &&
        Objects.equals(this.privateComponents, contactCenter.privateComponents) &&
        Objects.equals(this.samlParams, contactCenter.samlParams) &&
        Objects.equals(this.state, contactCenter.state) &&
        Objects.equals(this.updateTime, contactCenter.updateTime) &&
        Objects.equals(this.uris, contactCenter.uris) &&
        Objects.equals(this.userEmail, contactCenter.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminUser, ccaipManagedUsers, createTime, customerDomainPrefix, displayName, instanceConfig, kmsKey, labels, name, privateComponents, samlParams, state, updateTime, uris, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactCenter {\n");
    sb.append("    adminUser: ").append(toIndentedString(adminUser)).append("\n");
    sb.append("    ccaipManagedUsers: ").append(toIndentedString(ccaipManagedUsers)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customerDomainPrefix: ").append(toIndentedString(customerDomainPrefix)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    instanceConfig: ").append(toIndentedString(instanceConfig)).append("\n");
    sb.append("    kmsKey: ").append(toIndentedString(kmsKey)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privateComponents: ").append(toIndentedString(privateComponents)).append("\n");
    sb.append("    samlParams: ").append(toIndentedString(samlParams)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    uris: ").append(toIndentedString(uris)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminUser");
    openapiFields.add("ccaipManagedUsers");
    openapiFields.add("createTime");
    openapiFields.add("customerDomainPrefix");
    openapiFields.add("displayName");
    openapiFields.add("instanceConfig");
    openapiFields.add("kmsKey");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("privateComponents");
    openapiFields.add("samlParams");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("uris");
    openapiFields.add("userEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactCenter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactCenter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactCenter is not found in the empty JSON string", ContactCenter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactCenter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactCenter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adminUser`
      if (jsonObj.get("adminUser") != null && !jsonObj.get("adminUser").isJsonNull()) {
        AdminUser.validateJsonElement(jsonObj.get("adminUser"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customerDomainPrefix") != null && !jsonObj.get("customerDomainPrefix").isJsonNull()) && !jsonObj.get("customerDomainPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerDomainPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerDomainPrefix").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `instanceConfig`
      if (jsonObj.get("instanceConfig") != null && !jsonObj.get("instanceConfig").isJsonNull()) {
        InstanceConfig.validateJsonElement(jsonObj.get("instanceConfig"));
      }
      if ((jsonObj.get("kmsKey") != null && !jsonObj.get("kmsKey").isJsonNull()) && !jsonObj.get("kmsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKey").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("privateComponents") != null && !jsonObj.get("privateComponents").isJsonNull() && !jsonObj.get("privateComponents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateComponents` to be an array in the JSON string but got `%s`", jsonObj.get("privateComponents").toString()));
      }
      // validate the optional field `samlParams`
      if (jsonObj.get("samlParams") != null && !jsonObj.get("samlParams").isJsonNull()) {
        SAMLParams.validateJsonElement(jsonObj.get("samlParams"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `uris`
      if (jsonObj.get("uris") != null && !jsonObj.get("uris").isJsonNull()) {
        URIs.validateJsonElement(jsonObj.get("uris"));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactCenter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactCenter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactCenter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactCenter.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactCenter>() {
           @Override
           public void write(JsonWriter out, ContactCenter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactCenter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactCenter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactCenter
   * @throws IOException if the JSON string is invalid with respect to ContactCenter
   */
  public static ContactCenter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactCenter.class);
  }

  /**
   * Convert an instance of ContactCenter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

