/**
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISAMLParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISAMLParams::OAISAMLParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISAMLParams::OAISAMLParams() {
    this->initializeModel();
}

OAISAMLParams::~OAISAMLParams() {}

void OAISAMLParams::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_email_mapping_isSet = false;
    m_email_mapping_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_sso_uri_isSet = false;
    m_sso_uri_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;
}

void OAISAMLParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISAMLParams::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_email_mapping_isValid = ::OpenAPI::fromJsonValue(m_email_mapping, json[QString("emailMapping")]);
    m_email_mapping_isSet = !json[QString("emailMapping")].isNull() && m_email_mapping_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_sso_uri_isValid = ::OpenAPI::fromJsonValue(m_sso_uri, json[QString("ssoUri")]);
    m_sso_uri_isSet = !json[QString("ssoUri")].isNull() && m_sso_uri_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;
}

QString OAISAMLParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISAMLParams::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_email_mapping_isSet) {
        obj.insert(QString("emailMapping"), ::OpenAPI::toJsonValue(m_email_mapping));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_sso_uri_isSet) {
        obj.insert(QString("ssoUri"), ::OpenAPI::toJsonValue(m_sso_uri));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    return obj;
}

QString OAISAMLParams::getCertificate() const {
    return m_certificate;
}
void OAISAMLParams::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAISAMLParams::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAISAMLParams::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAISAMLParams::getEmailMapping() const {
    return m_email_mapping;
}
void OAISAMLParams::setEmailMapping(const QString &email_mapping) {
    m_email_mapping = email_mapping;
    m_email_mapping_isSet = true;
}

bool OAISAMLParams::is_email_mapping_Set() const{
    return m_email_mapping_isSet;
}

bool OAISAMLParams::is_email_mapping_Valid() const{
    return m_email_mapping_isValid;
}

QString OAISAMLParams::getEntityId() const {
    return m_entity_id;
}
void OAISAMLParams::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISAMLParams::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISAMLParams::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAISAMLParams::getSsoUri() const {
    return m_sso_uri;
}
void OAISAMLParams::setSsoUri(const QString &sso_uri) {
    m_sso_uri = sso_uri;
    m_sso_uri_isSet = true;
}

bool OAISAMLParams::is_sso_uri_Set() const{
    return m_sso_uri_isSet;
}

bool OAISAMLParams::is_sso_uri_Valid() const{
    return m_sso_uri_isValid;
}

QString OAISAMLParams::getUserEmail() const {
    return m_user_email;
}
void OAISAMLParams::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAISAMLParams::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAISAMLParams::is_user_email_Valid() const{
    return m_user_email_isValid;
}

bool OAISAMLParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_mapping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISAMLParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
