/**
 * Contact Center AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIURIs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIURIs::OAIURIs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIURIs::OAIURIs() {
    this->initializeModel();
}

OAIURIs::~OAIURIs() {}

void OAIURIs::initializeModel() {

    m_chat_bot_uri_isSet = false;
    m_chat_bot_uri_isValid = false;

    m_media_uri_isSet = false;
    m_media_uri_isValid = false;

    m_root_uri_isSet = false;
    m_root_uri_isValid = false;

    m_virtual_agent_streaming_service_uri_isSet = false;
    m_virtual_agent_streaming_service_uri_isValid = false;
}

void OAIURIs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIURIs::fromJsonObject(QJsonObject json) {

    m_chat_bot_uri_isValid = ::OpenAPI::fromJsonValue(m_chat_bot_uri, json[QString("chatBotUri")]);
    m_chat_bot_uri_isSet = !json[QString("chatBotUri")].isNull() && m_chat_bot_uri_isValid;

    m_media_uri_isValid = ::OpenAPI::fromJsonValue(m_media_uri, json[QString("mediaUri")]);
    m_media_uri_isSet = !json[QString("mediaUri")].isNull() && m_media_uri_isValid;

    m_root_uri_isValid = ::OpenAPI::fromJsonValue(m_root_uri, json[QString("rootUri")]);
    m_root_uri_isSet = !json[QString("rootUri")].isNull() && m_root_uri_isValid;

    m_virtual_agent_streaming_service_uri_isValid = ::OpenAPI::fromJsonValue(m_virtual_agent_streaming_service_uri, json[QString("virtualAgentStreamingServiceUri")]);
    m_virtual_agent_streaming_service_uri_isSet = !json[QString("virtualAgentStreamingServiceUri")].isNull() && m_virtual_agent_streaming_service_uri_isValid;
}

QString OAIURIs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIURIs::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_bot_uri_isSet) {
        obj.insert(QString("chatBotUri"), ::OpenAPI::toJsonValue(m_chat_bot_uri));
    }
    if (m_media_uri_isSet) {
        obj.insert(QString("mediaUri"), ::OpenAPI::toJsonValue(m_media_uri));
    }
    if (m_root_uri_isSet) {
        obj.insert(QString("rootUri"), ::OpenAPI::toJsonValue(m_root_uri));
    }
    if (m_virtual_agent_streaming_service_uri_isSet) {
        obj.insert(QString("virtualAgentStreamingServiceUri"), ::OpenAPI::toJsonValue(m_virtual_agent_streaming_service_uri));
    }
    return obj;
}

QString OAIURIs::getChatBotUri() const {
    return m_chat_bot_uri;
}
void OAIURIs::setChatBotUri(const QString &chat_bot_uri) {
    m_chat_bot_uri = chat_bot_uri;
    m_chat_bot_uri_isSet = true;
}

bool OAIURIs::is_chat_bot_uri_Set() const{
    return m_chat_bot_uri_isSet;
}

bool OAIURIs::is_chat_bot_uri_Valid() const{
    return m_chat_bot_uri_isValid;
}

QString OAIURIs::getMediaUri() const {
    return m_media_uri;
}
void OAIURIs::setMediaUri(const QString &media_uri) {
    m_media_uri = media_uri;
    m_media_uri_isSet = true;
}

bool OAIURIs::is_media_uri_Set() const{
    return m_media_uri_isSet;
}

bool OAIURIs::is_media_uri_Valid() const{
    return m_media_uri_isValid;
}

QString OAIURIs::getRootUri() const {
    return m_root_uri;
}
void OAIURIs::setRootUri(const QString &root_uri) {
    m_root_uri = root_uri;
    m_root_uri_isSet = true;
}

bool OAIURIs::is_root_uri_Set() const{
    return m_root_uri_isSet;
}

bool OAIURIs::is_root_uri_Valid() const{
    return m_root_uri_isValid;
}

QString OAIURIs::getVirtualAgentStreamingServiceUri() const {
    return m_virtual_agent_streaming_service_uri;
}
void OAIURIs::setVirtualAgentStreamingServiceUri(const QString &virtual_agent_streaming_service_uri) {
    m_virtual_agent_streaming_service_uri = virtual_agent_streaming_service_uri;
    m_virtual_agent_streaming_service_uri_isSet = true;
}

bool OAIURIs::is_virtual_agent_streaming_service_uri_Set() const{
    return m_virtual_agent_streaming_service_uri_isSet;
}

bool OAIURIs::is_virtual_agent_streaming_service_uri_Valid() const{
    return m_virtual_agent_streaming_service_uri_isValid;
}

bool OAIURIs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_bot_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_agent_streaming_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIURIs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
