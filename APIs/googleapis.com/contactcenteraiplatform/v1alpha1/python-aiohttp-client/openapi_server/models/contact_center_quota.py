# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quota import Quota
from openapi_server import util


class ContactCenterQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_center_count_limit: int=None, contact_center_count_sum: int=None, quotas: List[Quota]=None):
        """ContactCenterQuota - a model defined in OpenAPI

        :param contact_center_count_limit: The contact_center_count_limit of this ContactCenterQuota.
        :param contact_center_count_sum: The contact_center_count_sum of this ContactCenterQuota.
        :param quotas: The quotas of this ContactCenterQuota.
        """
        self.openapi_types = {
            'contact_center_count_limit': int,
            'contact_center_count_sum': int,
            'quotas': List[Quota]
        }

        self.attribute_map = {
            'contact_center_count_limit': 'contactCenterCountLimit',
            'contact_center_count_sum': 'contactCenterCountSum',
            'quotas': 'quotas'
        }

        self._contact_center_count_limit = contact_center_count_limit
        self._contact_center_count_sum = contact_center_count_sum
        self._quotas = quotas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCenterQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactCenterQuota of this ContactCenterQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_center_count_limit(self):
        """Gets the contact_center_count_limit of this ContactCenterQuota.

        Deprecated: Use the Quota fields instead. Reflects the count limit of contact centers on a billing account.

        :return: The contact_center_count_limit of this ContactCenterQuota.
        :rtype: int
        """
        return self._contact_center_count_limit

    @contact_center_count_limit.setter
    def contact_center_count_limit(self, contact_center_count_limit):
        """Sets the contact_center_count_limit of this ContactCenterQuota.

        Deprecated: Use the Quota fields instead. Reflects the count limit of contact centers on a billing account.

        :param contact_center_count_limit: The contact_center_count_limit of this ContactCenterQuota.
        :type contact_center_count_limit: int
        """

        self._contact_center_count_limit = contact_center_count_limit

    @property
    def contact_center_count_sum(self):
        """Gets the contact_center_count_sum of this ContactCenterQuota.

        Deprecated: Use the Quota fields instead. Reflects the count sum of contact centers on a billing account.

        :return: The contact_center_count_sum of this ContactCenterQuota.
        :rtype: int
        """
        return self._contact_center_count_sum

    @contact_center_count_sum.setter
    def contact_center_count_sum(self, contact_center_count_sum):
        """Sets the contact_center_count_sum of this ContactCenterQuota.

        Deprecated: Use the Quota fields instead. Reflects the count sum of contact centers on a billing account.

        :param contact_center_count_sum: The contact_center_count_sum of this ContactCenterQuota.
        :type contact_center_count_sum: int
        """

        self._contact_center_count_sum = contact_center_count_sum

    @property
    def quotas(self):
        """Gets the quotas of this ContactCenterQuota.

        Quota details per contact center instance type.

        :return: The quotas of this ContactCenterQuota.
        :rtype: List[Quota]
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas):
        """Sets the quotas of this ContactCenterQuota.

        Quota details per contact center instance type.

        :param quotas: The quotas of this ContactCenterQuota.
        :type quotas: List[Quota]
        """

        self._quotas = quotas
