# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_user import AdminUser
from openapi_server.models.instance_config import InstanceConfig
from openapi_server.models.saml_params import SAMLParams
from openapi_server.models.uris import URIs
from openapi_server import util


class ContactCenter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_user: AdminUser=None, ccaip_managed_users: bool=None, create_time: str=None, customer_domain_prefix: str=None, display_name: str=None, instance_config: InstanceConfig=None, kms_key: str=None, labels: Dict[str, str]=None, name: str=None, private_components: List[str]=None, saml_params: SAMLParams=None, state: str=None, update_time: str=None, uris: URIs=None, user_email: str=None):
        """ContactCenter - a model defined in OpenAPI

        :param admin_user: The admin_user of this ContactCenter.
        :param ccaip_managed_users: The ccaip_managed_users of this ContactCenter.
        :param create_time: The create_time of this ContactCenter.
        :param customer_domain_prefix: The customer_domain_prefix of this ContactCenter.
        :param display_name: The display_name of this ContactCenter.
        :param instance_config: The instance_config of this ContactCenter.
        :param kms_key: The kms_key of this ContactCenter.
        :param labels: The labels of this ContactCenter.
        :param name: The name of this ContactCenter.
        :param private_components: The private_components of this ContactCenter.
        :param saml_params: The saml_params of this ContactCenter.
        :param state: The state of this ContactCenter.
        :param update_time: The update_time of this ContactCenter.
        :param uris: The uris of this ContactCenter.
        :param user_email: The user_email of this ContactCenter.
        """
        self.openapi_types = {
            'admin_user': AdminUser,
            'ccaip_managed_users': bool,
            'create_time': str,
            'customer_domain_prefix': str,
            'display_name': str,
            'instance_config': InstanceConfig,
            'kms_key': str,
            'labels': Dict[str, str],
            'name': str,
            'private_components': List[str],
            'saml_params': SAMLParams,
            'state': str,
            'update_time': str,
            'uris': URIs,
            'user_email': str
        }

        self.attribute_map = {
            'admin_user': 'adminUser',
            'ccaip_managed_users': 'ccaipManagedUsers',
            'create_time': 'createTime',
            'customer_domain_prefix': 'customerDomainPrefix',
            'display_name': 'displayName',
            'instance_config': 'instanceConfig',
            'kms_key': 'kmsKey',
            'labels': 'labels',
            'name': 'name',
            'private_components': 'privateComponents',
            'saml_params': 'samlParams',
            'state': 'state',
            'update_time': 'updateTime',
            'uris': 'uris',
            'user_email': 'userEmail'
        }

        self._admin_user = admin_user
        self._ccaip_managed_users = ccaip_managed_users
        self._create_time = create_time
        self._customer_domain_prefix = customer_domain_prefix
        self._display_name = display_name
        self._instance_config = instance_config
        self._kms_key = kms_key
        self._labels = labels
        self._name = name
        self._private_components = private_components
        self._saml_params = saml_params
        self._state = state
        self._update_time = update_time
        self._uris = uris
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCenter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactCenter of this ContactCenter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_user(self):
        """Gets the admin_user of this ContactCenter.


        :return: The admin_user of this ContactCenter.
        :rtype: AdminUser
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this ContactCenter.


        :param admin_user: The admin_user of this ContactCenter.
        :type admin_user: AdminUser
        """

        self._admin_user = admin_user

    @property
    def ccaip_managed_users(self):
        """Gets the ccaip_managed_users of this ContactCenter.

        Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity

        :return: The ccaip_managed_users of this ContactCenter.
        :rtype: bool
        """
        return self._ccaip_managed_users

    @ccaip_managed_users.setter
    def ccaip_managed_users(self, ccaip_managed_users):
        """Sets the ccaip_managed_users of this ContactCenter.

        Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity

        :param ccaip_managed_users: The ccaip_managed_users of this ContactCenter.
        :type ccaip_managed_users: bool
        """

        self._ccaip_managed_users = ccaip_managed_users

    @property
    def create_time(self):
        """Gets the create_time of this ContactCenter.

        Output only. [Output only] Create time stamp

        :return: The create_time of this ContactCenter.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ContactCenter.

        Output only. [Output only] Create time stamp

        :param create_time: The create_time of this ContactCenter.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def customer_domain_prefix(self):
        """Gets the customer_domain_prefix of this ContactCenter.

        Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).

        :return: The customer_domain_prefix of this ContactCenter.
        :rtype: str
        """
        return self._customer_domain_prefix

    @customer_domain_prefix.setter
    def customer_domain_prefix(self, customer_domain_prefix):
        """Sets the customer_domain_prefix of this ContactCenter.

        Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).

        :param customer_domain_prefix: The customer_domain_prefix of this ContactCenter.
        :type customer_domain_prefix: str
        """

        self._customer_domain_prefix = customer_domain_prefix

    @property
    def display_name(self):
        """Gets the display_name of this ContactCenter.

        Required. A user friendly name for the ContactCenter.

        :return: The display_name of this ContactCenter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ContactCenter.

        Required. A user friendly name for the ContactCenter.

        :param display_name: The display_name of this ContactCenter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def instance_config(self):
        """Gets the instance_config of this ContactCenter.


        :return: The instance_config of this ContactCenter.
        :rtype: InstanceConfig
        """
        return self._instance_config

    @instance_config.setter
    def instance_config(self, instance_config):
        """Sets the instance_config of this ContactCenter.


        :param instance_config: The instance_config of this ContactCenter.
        :type instance_config: InstanceConfig
        """

        self._instance_config = instance_config

    @property
    def kms_key(self):
        """Gets the kms_key of this ContactCenter.

        Immutable. The KMS key name to encrypt the user input (`ContactCenter`).

        :return: The kms_key of this ContactCenter.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this ContactCenter.

        Immutable. The KMS key name to encrypt the user input (`ContactCenter`).

        :param kms_key: The kms_key of this ContactCenter.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def labels(self):
        """Gets the labels of this ContactCenter.

        Labels as key value pairs

        :return: The labels of this ContactCenter.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ContactCenter.

        Labels as key value pairs

        :param labels: The labels of this ContactCenter.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ContactCenter.

        name of resource

        :return: The name of this ContactCenter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactCenter.

        name of resource

        :param name: The name of this ContactCenter.
        :type name: str
        """

        self._name = name

    @property
    def private_components(self):
        """Gets the private_components of this ContactCenter.

        Output only. A list of UJET components that should be privately accessed. This field is set by reading settings from the data plane. For more information about the format of the component please refer to go/ccaip-vpc-sc-org-policy. This field is must be fully populated only for Create/Update resource operations. The main use case for this field is OrgPolicy checks via CPE.

        :return: The private_components of this ContactCenter.
        :rtype: List[str]
        """
        return self._private_components

    @private_components.setter
    def private_components(self, private_components):
        """Sets the private_components of this ContactCenter.

        Output only. A list of UJET components that should be privately accessed. This field is set by reading settings from the data plane. For more information about the format of the component please refer to go/ccaip-vpc-sc-org-policy. This field is must be fully populated only for Create/Update resource operations. The main use case for this field is OrgPolicy checks via CPE.

        :param private_components: The private_components of this ContactCenter.
        :type private_components: List[str]
        """

        self._private_components = private_components

    @property
    def saml_params(self):
        """Gets the saml_params of this ContactCenter.


        :return: The saml_params of this ContactCenter.
        :rtype: SAMLParams
        """
        return self._saml_params

    @saml_params.setter
    def saml_params(self, saml_params):
        """Sets the saml_params of this ContactCenter.


        :param saml_params: The saml_params of this ContactCenter.
        :type saml_params: SAMLParams
        """

        self._saml_params = saml_params

    @property
    def state(self):
        """Gets the state of this ContactCenter.

        Output only. The state of this contact center.

        :return: The state of this ContactCenter.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContactCenter.

        Output only. The state of this contact center.

        :param state: The state of this ContactCenter.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_DEPLOYING", "STATE_DEPLOYED", "STATE_TERMINATING", "STATE_FAILED", "STATE_TERMINATING_FAILED", "STATE_TERMINATED", "STATE_IN_GRACE_PERIOD"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ContactCenter.

        Output only. [Output only] Update time stamp

        :return: The update_time of this ContactCenter.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ContactCenter.

        Output only. [Output only] Update time stamp

        :param update_time: The update_time of this ContactCenter.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def uris(self):
        """Gets the uris of this ContactCenter.


        :return: The uris of this ContactCenter.
        :rtype: URIs
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this ContactCenter.


        :param uris: The uris of this ContactCenter.
        :type uris: URIs
        """

        self._uris = uris

    @property
    def user_email(self):
        """Gets the user_email of this ContactCenter.

        Optional. Email address of the first admin user.

        :return: The user_email of this ContactCenter.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ContactCenter.

        Optional. Email address of the first admin user.

        :param user_email: The user_email of this ContactCenter.
        :type user_email: str
        """

        self._user_email = user_email
