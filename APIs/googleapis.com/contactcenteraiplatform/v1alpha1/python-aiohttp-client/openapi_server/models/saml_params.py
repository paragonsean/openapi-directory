# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SAMLParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, email_mapping: str=None, entity_id: str=None, sso_uri: str=None, user_email: str=None):
        """SAMLParams - a model defined in OpenAPI

        :param certificate: The certificate of this SAMLParams.
        :param email_mapping: The email_mapping of this SAMLParams.
        :param entity_id: The entity_id of this SAMLParams.
        :param sso_uri: The sso_uri of this SAMLParams.
        :param user_email: The user_email of this SAMLParams.
        """
        self.openapi_types = {
            'certificate': str,
            'email_mapping': str,
            'entity_id': str,
            'sso_uri': str,
            'user_email': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'email_mapping': 'emailMapping',
            'entity_id': 'entityId',
            'sso_uri': 'ssoUri',
            'user_email': 'userEmail'
        }

        self._certificate = certificate
        self._email_mapping = email_mapping
        self._entity_id = entity_id
        self._sso_uri = sso_uri
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAMLParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAMLParams of this SAMLParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this SAMLParams.

        SAML certificate

        :return: The certificate of this SAMLParams.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this SAMLParams.

        SAML certificate

        :param certificate: The certificate of this SAMLParams.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def email_mapping(self):
        """Gets the email_mapping of this SAMLParams.

        IdP field that maps to the user’s email address

        :return: The email_mapping of this SAMLParams.
        :rtype: str
        """
        return self._email_mapping

    @email_mapping.setter
    def email_mapping(self, email_mapping):
        """Sets the email_mapping of this SAMLParams.

        IdP field that maps to the user’s email address

        :param email_mapping: The email_mapping of this SAMLParams.
        :type email_mapping: str
        """

        self._email_mapping = email_mapping

    @property
    def entity_id(self):
        """Gets the entity_id of this SAMLParams.

        Entity id URL

        :return: The entity_id of this SAMLParams.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SAMLParams.

        Entity id URL

        :param entity_id: The entity_id of this SAMLParams.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def sso_uri(self):
        """Gets the sso_uri of this SAMLParams.

        Single sign-on URL

        :return: The sso_uri of this SAMLParams.
        :rtype: str
        """
        return self._sso_uri

    @sso_uri.setter
    def sso_uri(self, sso_uri):
        """Sets the sso_uri of this SAMLParams.

        Single sign-on URL

        :param sso_uri: The sso_uri of this SAMLParams.
        :type sso_uri: str
        """

        self._sso_uri = sso_uri

    @property
    def user_email(self):
        """Gets the user_email of this SAMLParams.

        Email address of the first admin users.

        :return: The user_email of this SAMLParams.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this SAMLParams.

        Email address of the first admin users.

        :param user_email: The user_email of this SAMLParams.
        :type user_email: str
        """

        self._user_email = user_email
