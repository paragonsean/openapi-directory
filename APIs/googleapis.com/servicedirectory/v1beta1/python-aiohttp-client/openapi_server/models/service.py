# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint import Endpoint
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, endpoints: List[Endpoint]=None, metadata: Dict[str, str]=None, name: str=None, uid: str=None, update_time: str=None):
        """Service - a model defined in OpenAPI

        :param create_time: The create_time of this Service.
        :param endpoints: The endpoints of this Service.
        :param metadata: The metadata of this Service.
        :param name: The name of this Service.
        :param uid: The uid of this Service.
        :param update_time: The update_time of this Service.
        """
        self.openapi_types = {
            'create_time': str,
            'endpoints': List[Endpoint],
            'metadata': Dict[str, str],
            'name': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'endpoints': 'endpoints',
            'metadata': 'metadata',
            'name': 'name',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._endpoints = endpoints
        self._metadata = metadata
        self._name = name
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Service.

        Output only. The timestamp when the service was created.

        :return: The create_time of this Service.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Service.

        Output only. The timestamp when the service was created.

        :param create_time: The create_time of this Service.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def endpoints(self):
        """Gets the endpoints of this Service.

        Output only. Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.

        :return: The endpoints of this Service.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Service.

        Output only. Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.

        :param endpoints: The endpoints of this Service.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def metadata(self):
        """Gets the metadata of this Service.

        Optional. Metadata for the service. This data can be consumed by service clients. Restrictions: * The entire metadata dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Metadata that goes beyond this limit are rejected * Valid metadata keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Metadata that fails to meet these requirements are rejected Note: This field is equivalent to the `annotations` field in the v1 API. They have the same syntax and read/write to the same location in Service Directory.

        :return: The metadata of this Service.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Service.

        Optional. Metadata for the service. This data can be consumed by service clients. Restrictions: * The entire metadata dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Metadata that goes beyond this limit are rejected * Valid metadata keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Metadata that fails to meet these requirements are rejected Note: This field is equivalent to the `annotations` field in the v1 API. They have the same syntax and read/write to the same location in Service Directory.

        :param metadata: The metadata of this Service.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Service.

        Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this Service.

        Output only. A globally unique identifier (in UUID4 format) for this service.

        :return: The uid of this Service.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Service.

        Output only. A globally unique identifier (in UUID4 format) for this service.

        :param uid: The uid of this Service.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Service.

        Output only. The timestamp when the service was last updated. Note: endpoints being created/deleted/updated within the service are not considered service updates for the purpose of this timestamp.

        :return: The update_time of this Service.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Service.

        Output only. The timestamp when the service was last updated. Note: endpoints being created/deleted/updated within the service are not considered service updates for the purpose of this timestamp.

        :param update_time: The update_time of this Service.
        :type update_time: str
        """

        self._update_time = update_time
