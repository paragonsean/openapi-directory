# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Namespace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, labels: Dict[str, str]=None, name: str=None, uid: str=None, update_time: str=None):
        """Namespace - a model defined in OpenAPI

        :param create_time: The create_time of this Namespace.
        :param labels: The labels of this Namespace.
        :param name: The name of this Namespace.
        :param uid: The uid of this Namespace.
        :param update_time: The update_time of this Namespace.
        """
        self.openapi_types = {
            'create_time': str,
            'labels': Dict[str, str],
            'name': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'labels': 'labels',
            'name': 'name',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._labels = labels
        self._name = name
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Namespace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Namespace of this Namespace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Namespace.

        Output only. The timestamp when the namespace was created.

        :return: The create_time of this Namespace.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Namespace.

        Output only. The timestamp when the namespace was created.

        :param create_time: The create_time of this Namespace.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def labels(self):
        """Gets the labels of this Namespace.

        Optional. Resource labels associated with this namespace. No more than 64 user labels can be associated with a given resource. Label keys and values can be no longer than 63 characters.

        :return: The labels of this Namespace.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Namespace.

        Optional. Resource labels associated with this namespace. No more than 64 user labels can be associated with a given resource. Label keys and values can be no longer than 63 characters.

        :param labels: The labels of this Namespace.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Namespace.

        Immutable. The resource name for the namespace in the format `projects/*/locations/*/namespaces/*`.

        :return: The name of this Namespace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Namespace.

        Immutable. The resource name for the namespace in the format `projects/*/locations/*/namespaces/*`.

        :param name: The name of this Namespace.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this Namespace.

        Output only. A globally unique identifier (in UUID4 format) for this namespace.

        :return: The uid of this Namespace.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Namespace.

        Output only. A globally unique identifier (in UUID4 format) for this namespace.

        :param uid: The uid of this Namespace.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Namespace.

        Output only. The timestamp when the namespace was last updated.

        :return: The update_time of this Namespace.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Namespace.

        Output only. The timestamp when the namespace was last updated.

        :param update_time: The update_time of this Namespace.
        :type update_time: str
        """

        self._update_time = update_time
