# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, create_time: str=None, metadata: Dict[str, str]=None, name: str=None, network: str=None, port: int=None, uid: str=None, update_time: str=None):
        """Endpoint - a model defined in OpenAPI

        :param address: The address of this Endpoint.
        :param create_time: The create_time of this Endpoint.
        :param metadata: The metadata of this Endpoint.
        :param name: The name of this Endpoint.
        :param network: The network of this Endpoint.
        :param port: The port of this Endpoint.
        :param uid: The uid of this Endpoint.
        :param update_time: The update_time of this Endpoint.
        """
        self.openapi_types = {
            'address': str,
            'create_time': str,
            'metadata': Dict[str, str],
            'name': str,
            'network': str,
            'port': int,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'address': 'address',
            'create_time': 'createTime',
            'metadata': 'metadata',
            'name': 'name',
            'network': 'network',
            'port': 'port',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._address = address
        self._create_time = create_time
        self._metadata = metadata
        self._name = name
        self._network = network
        self._port = port
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Endpoint.

        Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.

        :return: The address of this Endpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Endpoint.

        Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.

        :param address: The address of this Endpoint.
        :type address: str
        """

        self._address = address

    @property
    def create_time(self):
        """Gets the create_time of this Endpoint.

        Output only. The timestamp when the endpoint was created.

        :return: The create_time of this Endpoint.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Endpoint.

        Output only. The timestamp when the endpoint was created.

        :param create_time: The create_time of this Endpoint.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def metadata(self):
        """Gets the metadata of this Endpoint.

        Optional. Metadata for the endpoint. This data can be consumed by service clients. Restrictions: * The entire metadata dictionary may contain up to 512 characters, spread accoss all key-value pairs. Metadata that goes beyond this limit are rejected * Valid metadata keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Metadata that fails to meet these requirements are rejected Note: This field is equivalent to the `annotations` field in the v1 API. They have the same syntax and read/write to the same location in Service Directory.

        :return: The metadata of this Endpoint.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Endpoint.

        Optional. Metadata for the endpoint. This data can be consumed by service clients. Restrictions: * The entire metadata dictionary may contain up to 512 characters, spread accoss all key-value pairs. Metadata that goes beyond this limit are rejected * Valid metadata keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Metadata that fails to meet these requirements are rejected Note: This field is equivalent to the `annotations` field in the v1 API. They have the same syntax and read/write to the same location in Service Directory.

        :param metadata: The metadata of this Endpoint.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Endpoint.

        Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.

        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.

        Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.

        :param name: The name of this Endpoint.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Endpoint.

        Immutable. The Google Compute Engine network (VPC) of the endpoint in the format `projects//locations/global/networks/*`. The project must be specified by project number (project id is rejected). Incorrectly formatted networks are rejected, but no other validation is performed on this field (ex. network or project existence, reachability, or permissions).

        :return: The network of this Endpoint.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Endpoint.

        Immutable. The Google Compute Engine network (VPC) of the endpoint in the format `projects//locations/global/networks/*`. The project must be specified by project number (project id is rejected). Incorrectly formatted networks are rejected, but no other validation is performed on this field (ex. network or project existence, reachability, or permissions).

        :param network: The network of this Endpoint.
        :type network: str
        """

        self._network = network

    @property
    def port(self):
        """Gets the port of this Endpoint.

        Optional. Service Directory rejects values outside of `[0, 65535]`.

        :return: The port of this Endpoint.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Endpoint.

        Optional. Service Directory rejects values outside of `[0, 65535]`.

        :param port: The port of this Endpoint.
        :type port: int
        """

        self._port = port

    @property
    def uid(self):
        """Gets the uid of this Endpoint.

        Output only. A globally unique identifier (in UUID4 format) for this endpoint.

        :return: The uid of this Endpoint.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Endpoint.

        Output only. A globally unique identifier (in UUID4 format) for this endpoint.

        :param uid: The uid of this Endpoint.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Endpoint.

        Output only. The timestamp when the endpoint was last updated.

        :return: The update_time of this Endpoint.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Endpoint.

        Output only. The timestamp when the endpoint was last updated.

        :param update_time: The update_time of this Endpoint.
        :type update_time: str
        """

        self._update_time = update_time
