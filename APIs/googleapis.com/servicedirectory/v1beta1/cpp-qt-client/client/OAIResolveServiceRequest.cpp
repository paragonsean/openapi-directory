/**
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolveServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolveServiceRequest::OAIResolveServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolveServiceRequest::OAIResolveServiceRequest() {
    this->initializeModel();
}

OAIResolveServiceRequest::~OAIResolveServiceRequest() {}

void OAIResolveServiceRequest::initializeModel() {

    m_endpoint_filter_isSet = false;
    m_endpoint_filter_isValid = false;

    m_max_endpoints_isSet = false;
    m_max_endpoints_isValid = false;
}

void OAIResolveServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolveServiceRequest::fromJsonObject(QJsonObject json) {

    m_endpoint_filter_isValid = ::OpenAPI::fromJsonValue(m_endpoint_filter, json[QString("endpointFilter")]);
    m_endpoint_filter_isSet = !json[QString("endpointFilter")].isNull() && m_endpoint_filter_isValid;

    m_max_endpoints_isValid = ::OpenAPI::fromJsonValue(m_max_endpoints, json[QString("maxEndpoints")]);
    m_max_endpoints_isSet = !json[QString("maxEndpoints")].isNull() && m_max_endpoints_isValid;
}

QString OAIResolveServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolveServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_filter_isSet) {
        obj.insert(QString("endpointFilter"), ::OpenAPI::toJsonValue(m_endpoint_filter));
    }
    if (m_max_endpoints_isSet) {
        obj.insert(QString("maxEndpoints"), ::OpenAPI::toJsonValue(m_max_endpoints));
    }
    return obj;
}

QString OAIResolveServiceRequest::getEndpointFilter() const {
    return m_endpoint_filter;
}
void OAIResolveServiceRequest::setEndpointFilter(const QString &endpoint_filter) {
    m_endpoint_filter = endpoint_filter;
    m_endpoint_filter_isSet = true;
}

bool OAIResolveServiceRequest::is_endpoint_filter_Set() const{
    return m_endpoint_filter_isSet;
}

bool OAIResolveServiceRequest::is_endpoint_filter_Valid() const{
    return m_endpoint_filter_isValid;
}

qint32 OAIResolveServiceRequest::getMaxEndpoints() const {
    return m_max_endpoints;
}
void OAIResolveServiceRequest::setMaxEndpoints(const qint32 &max_endpoints) {
    m_max_endpoints = max_endpoints;
    m_max_endpoints_isSet = true;
}

bool OAIResolveServiceRequest::is_max_endpoints_Set() const{
    return m_max_endpoints_isSet;
}

bool OAIResolveServiceRequest::is_max_endpoints_Valid() const{
    return m_max_endpoints_isValid;
}

bool OAIResolveServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_endpoints_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolveServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
