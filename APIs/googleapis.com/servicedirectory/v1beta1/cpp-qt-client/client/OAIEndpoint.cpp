/**
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIEndpoint::getAddress() const {
    return m_address;
}
void OAIEndpoint::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEndpoint::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEndpoint::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEndpoint::getCreateTime() const {
    return m_create_time;
}
void OAIEndpoint::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEndpoint::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEndpoint::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QMap<QString, QString> OAIEndpoint::getMetadata() const {
    return m_metadata;
}
void OAIEndpoint::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIEndpoint::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIEndpoint::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIEndpoint::getName() const {
    return m_name;
}
void OAIEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEndpoint::getNetwork() const {
    return m_network;
}
void OAIEndpoint::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIEndpoint::is_network_Set() const{
    return m_network_isSet;
}

bool OAIEndpoint::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAIEndpoint::getPort() const {
    return m_port;
}
void OAIEndpoint::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIEndpoint::is_port_Set() const{
    return m_port_isSet;
}

bool OAIEndpoint::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIEndpoint::getUid() const {
    return m_uid;
}
void OAIEndpoint::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIEndpoint::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIEndpoint::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIEndpoint::getUpdateTime() const {
    return m_update_time;
}
void OAIEndpoint::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEndpoint::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEndpoint::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
