/**
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResolveServiceRequest model module.
 * @module model/ResolveServiceRequest
 * @version v1beta1
 */
class ResolveServiceRequest {
    /**
     * Constructs a new <code>ResolveServiceRequest</code>.
     * The request message for LookupService.ResolveService. Looks up a service by its name, returns the service and its endpoints.
     * @alias module:model/ResolveServiceRequest
     */
    constructor() { 
        
        ResolveServiceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResolveServiceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResolveServiceRequest} obj Optional instance to populate.
     * @return {module:model/ResolveServiceRequest} The populated <code>ResolveServiceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResolveServiceRequest();

            if (data.hasOwnProperty('endpointFilter')) {
                obj['endpointFilter'] = ApiClient.convertToType(data['endpointFilter'], 'String');
            }
            if (data.hasOwnProperty('maxEndpoints')) {
                obj['maxEndpoints'] = ApiClient.convertToType(data['maxEndpoints'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResolveServiceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResolveServiceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointFilter'] && !(typeof data['endpointFilter'] === 'string' || data['endpointFilter'] instanceof String)) {
            throw new Error("Expected the field `endpointFilter` to be a primitive type in the JSON string but got " + data['endpointFilter']);
        }

        return true;
    }


}



/**
 * Optional. The filter applied to the endpoints of the resolved service. General `filter` string syntax: ` ()` * `` can be `name`, `address`, `port`, or `metadata.` for map field * `` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:` means `HAS`, and is roughly the same as `=` * `` must be the same data type as field * `` can be `AND`, `OR`, `NOT` Examples of valid filters: * `metadata.owner` returns endpoints that have a annotation with the key `owner`, this is the same as `metadata:owner` * `metadata.protocol=gRPC` returns endpoints that have key/value `protocol=gRPC` * `address=192.108.1.105` returns endpoints that have this address * `port>8080` returns endpoints that have port number larger than 8080 * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c` returns endpoints that have name that is alphabetically later than the string, so \"endpoint-e\" is returned but \"endpoint-a\" is not * `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1` returns the endpoint that has an endpoint_id equal to `ep-1` * `metadata.owner!=sd AND metadata.foo=bar` returns endpoints that have `owner` in annotation key but value is not `sd` AND have key/value `foo=bar` * `doesnotexist.foo=bar` returns an empty list. Note that endpoint doesn't have a field called \"doesnotexist\". Since the filter does not match any endpoint, it returns no results For more information about filtering, see [API Filtering](https://aip.dev/160).
 * @member {String} endpointFilter
 */
ResolveServiceRequest.prototype['endpointFilter'] = undefined;

/**
 * Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value less than one is specified, the Default is used. If a value greater than the Maximum is specified, the Maximum is used.
 * @member {Number} maxEndpoints
 */
ResolveServiceRequest.prototype['maxEndpoints'] = undefined;






export default ResolveServiceRequest;

