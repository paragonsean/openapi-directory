/**
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Service from './Service';

/**
 * The ResolveServiceResponse model module.
 * @module model/ResolveServiceResponse
 * @version v1beta1
 */
class ResolveServiceResponse {
    /**
     * Constructs a new <code>ResolveServiceResponse</code>.
     * The response message for LookupService.ResolveService.
     * @alias module:model/ResolveServiceResponse
     */
    constructor() { 
        
        ResolveServiceResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResolveServiceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResolveServiceResponse} obj Optional instance to populate.
     * @return {module:model/ResolveServiceResponse} The populated <code>ResolveServiceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResolveServiceResponse();

            if (data.hasOwnProperty('service')) {
                obj['service'] = Service.constructFromObject(data['service']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResolveServiceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResolveServiceResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `service`
        if (data['service']) { // data not null
          Service.validateJSON(data['service']);
        }

        return true;
    }


}



/**
 * @member {module:model/Service} service
 */
ResolveServiceResponse.prototype['service'] = undefined;






export default ResolveServiceResponse;

