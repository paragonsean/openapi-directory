# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Namespace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, name: str=None, uid: str=None):
        """Namespace - a model defined in OpenAPI

        :param labels: The labels of this Namespace.
        :param name: The name of this Namespace.
        :param uid: The uid of this Namespace.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'name': str,
            'uid': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'name': 'name',
            'uid': 'uid'
        }

        self._labels = labels
        self._name = name
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Namespace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Namespace of this Namespace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this Namespace.

        Optional. Resource labels associated with this namespace. No more than 64 user labels can be associated with a given resource. Label keys and values can be no longer than 63 characters.

        :return: The labels of this Namespace.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Namespace.

        Optional. Resource labels associated with this namespace. No more than 64 user labels can be associated with a given resource. Label keys and values can be no longer than 63 characters.

        :param labels: The labels of this Namespace.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Namespace.

        Immutable. The resource name for the namespace in the format `projects/*/locations/*/namespaces/*`.

        :return: The name of this Namespace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Namespace.

        Immutable. The resource name for the namespace in the format `projects/*/locations/*/namespaces/*`.

        :param name: The name of this Namespace.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this Namespace.

        Output only. The globally unique identifier of the namespace in the UUID4 format.

        :return: The uid of this Namespace.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Namespace.

        Output only. The globally unique identifier of the namespace in the UUID4 format.

        :param uid: The uid of this Namespace.
        :type uid: str
        """

        self._uid = uid
