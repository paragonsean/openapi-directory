# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, annotations: Dict[str, str]=None, name: str=None, network: str=None, port: int=None, uid: str=None):
        """Endpoint - a model defined in OpenAPI

        :param address: The address of this Endpoint.
        :param annotations: The annotations of this Endpoint.
        :param name: The name of this Endpoint.
        :param network: The network of this Endpoint.
        :param port: The port of this Endpoint.
        :param uid: The uid of this Endpoint.
        """
        self.openapi_types = {
            'address': str,
            'annotations': Dict[str, str],
            'name': str,
            'network': str,
            'port': int,
            'uid': str
        }

        self.attribute_map = {
            'address': 'address',
            'annotations': 'annotations',
            'name': 'name',
            'network': 'network',
            'port': 'port',
            'uid': 'uid'
        }

        self._address = address
        self._annotations = annotations
        self._name = name
        self._network = network
        self._port = port
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Endpoint.

        Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.

        :return: The address of this Endpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Endpoint.

        Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.

        :param address: The address of this Endpoint.
        :type address: str
        """

        self._address = address

    @property
    def annotations(self):
        """Gets the annotations of this Endpoint.

        Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.

        :return: The annotations of this Endpoint.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Endpoint.

        Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.

        :param annotations: The annotations of this Endpoint.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def name(self):
        """Gets the name of this Endpoint.

        Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.

        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.

        Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.

        :param name: The name of this Endpoint.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Endpoint.

        Immutable. The Google Compute Engine network (VPC) of the endpoint in the format `projects//locations/global/networks/*`. The project must be specified by project number (project id is rejected). Incorrectly formatted networks are rejected, we also check to make sure that you have the servicedirectory.networks.attach permission on the project specified.

        :return: The network of this Endpoint.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Endpoint.

        Immutable. The Google Compute Engine network (VPC) of the endpoint in the format `projects//locations/global/networks/*`. The project must be specified by project number (project id is rejected). Incorrectly formatted networks are rejected, we also check to make sure that you have the servicedirectory.networks.attach permission on the project specified.

        :param network: The network of this Endpoint.
        :type network: str
        """

        self._network = network

    @property
    def port(self):
        """Gets the port of this Endpoint.

        Optional. Service Directory rejects values outside of `[0, 65535]`.

        :return: The port of this Endpoint.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Endpoint.

        Optional. Service Directory rejects values outside of `[0, 65535]`.

        :param port: The port of this Endpoint.
        :type port: int
        """

        self._port = port

    @property
    def uid(self):
        """Gets the uid of this Endpoint.

        Output only. The globally unique identifier of the endpoint in the UUID4 format.

        :return: The uid of this Endpoint.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Endpoint.

        Output only. The globally unique identifier of the endpoint in the UUID4 format.

        :param uid: The uid of this Endpoint.
        :type uid: str
        """

        self._uid = uid
