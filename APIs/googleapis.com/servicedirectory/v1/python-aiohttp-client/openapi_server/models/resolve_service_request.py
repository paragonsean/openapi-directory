# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResolveServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_filter: str=None, max_endpoints: int=None):
        """ResolveServiceRequest - a model defined in OpenAPI

        :param endpoint_filter: The endpoint_filter of this ResolveServiceRequest.
        :param max_endpoints: The max_endpoints of this ResolveServiceRequest.
        """
        self.openapi_types = {
            'endpoint_filter': str,
            'max_endpoints': int
        }

        self.attribute_map = {
            'endpoint_filter': 'endpointFilter',
            'max_endpoints': 'maxEndpoints'
        }

        self._endpoint_filter = endpoint_filter
        self._max_endpoints = max_endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolveServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolveServiceRequest of this ResolveServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_filter(self):
        """Gets the endpoint_filter of this ResolveServiceRequest.

        Optional. The filter applied to the endpoints of the resolved service. General `filter` string syntax: ` ()` * `` can be `name`, `address`, `port`, or `annotations.` for map field * `` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:` means `HAS`, and is roughly the same as `=` * `` must be the same data type as field * `` can be `AND`, `OR`, `NOT` Examples of valid filters: * `annotations.owner` returns endpoints that have a annotation with the key `owner`, this is the same as `annotations:owner` * `annotations.protocol=gRPC` returns endpoints that have key/value `protocol=gRPC` * `address=192.108.1.105` returns endpoints that have this address * `port>8080` returns endpoints that have port number larger than 8080 * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c` returns endpoints that have name that is alphabetically later than the string, so \"endpoint-e\" is returned but \"endpoint-a\" is not * `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1` returns the endpoint that has an endpoint_id equal to `ep-1` * `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that have `owner` in annotation key but value is not `sd` AND have key/value `foo=bar` * `doesnotexist.foo=bar` returns an empty list. Note that endpoint doesn't have a field called \"doesnotexist\". Since the filter does not match any endpoint, it returns no results For more information about filtering, see [API Filtering](https://aip.dev/160).

        :return: The endpoint_filter of this ResolveServiceRequest.
        :rtype: str
        """
        return self._endpoint_filter

    @endpoint_filter.setter
    def endpoint_filter(self, endpoint_filter):
        """Sets the endpoint_filter of this ResolveServiceRequest.

        Optional. The filter applied to the endpoints of the resolved service. General `filter` string syntax: ` ()` * `` can be `name`, `address`, `port`, or `annotations.` for map field * `` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:` means `HAS`, and is roughly the same as `=` * `` must be the same data type as field * `` can be `AND`, `OR`, `NOT` Examples of valid filters: * `annotations.owner` returns endpoints that have a annotation with the key `owner`, this is the same as `annotations:owner` * `annotations.protocol=gRPC` returns endpoints that have key/value `protocol=gRPC` * `address=192.108.1.105` returns endpoints that have this address * `port>8080` returns endpoints that have port number larger than 8080 * `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c` returns endpoints that have name that is alphabetically later than the string, so \"endpoint-e\" is returned but \"endpoint-a\" is not * `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1` returns the endpoint that has an endpoint_id equal to `ep-1` * `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that have `owner` in annotation key but value is not `sd` AND have key/value `foo=bar` * `doesnotexist.foo=bar` returns an empty list. Note that endpoint doesn't have a field called \"doesnotexist\". Since the filter does not match any endpoint, it returns no results For more information about filtering, see [API Filtering](https://aip.dev/160).

        :param endpoint_filter: The endpoint_filter of this ResolveServiceRequest.
        :type endpoint_filter: str
        """

        self._endpoint_filter = endpoint_filter

    @property
    def max_endpoints(self):
        """Gets the max_endpoints of this ResolveServiceRequest.

        Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value less than one is specified, the Default is used. If a value greater than the Maximum is specified, the Maximum is used.

        :return: The max_endpoints of this ResolveServiceRequest.
        :rtype: int
        """
        return self._max_endpoints

    @max_endpoints.setter
    def max_endpoints(self, max_endpoints):
        """Sets the max_endpoints of this ResolveServiceRequest.

        Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value less than one is specified, the Default is used. If a value greater than the Maximum is specified, the Maximum is used.

        :param max_endpoints: The max_endpoints of this ResolveServiceRequest.
        :type max_endpoints: int
        """

        self._max_endpoints = max_endpoints
