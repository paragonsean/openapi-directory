# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint import Endpoint
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, endpoints: List[Endpoint]=None, name: str=None, uid: str=None):
        """Service - a model defined in OpenAPI

        :param annotations: The annotations of this Service.
        :param endpoints: The endpoints of this Service.
        :param name: The name of this Service.
        :param uid: The uid of this Service.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'endpoints': List[Endpoint],
            'name': str,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'endpoints': 'endpoints',
            'name': 'name',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._endpoints = endpoints
        self._name = name
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Service.

        Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.

        :return: The annotations of this Service.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Service.

        Optional. Annotations for the service. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 2000 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/). Annotations that fails to meet these requirements are rejected Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.

        :param annotations: The annotations of this Service.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def endpoints(self):
        """Gets the endpoints of this Service.

        Output only. Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.

        :return: The endpoints of this Service.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Service.

        Output only. Endpoints associated with this service. Returned on LookupService.ResolveService. Control plane clients should use RegistrationService.ListEndpoints.

        :param endpoints: The endpoints of this Service.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def name(self):
        """Gets the name of this Service.

        Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Immutable. The resource name for the service in the format `projects/*/locations/*/namespaces/*/services/*`.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this Service.

        Output only. The globally unique identifier of the service in the UUID4 format.

        :return: The uid of this Service.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Service.

        Output only. The globally unique identifier of the service in the UUID4 format.

        :param uid: The uid of this Service.
        :type uid: str
        """

        self._uid = uid
