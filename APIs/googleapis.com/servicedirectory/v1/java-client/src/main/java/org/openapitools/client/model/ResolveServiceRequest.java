/*
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for LookupService.ResolveService. Looks up a service by its name, returns the service and its endpoints.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:26.043922-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResolveServiceRequest {
  public static final String SERIALIZED_NAME_ENDPOINT_FILTER = "endpointFilter";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_FILTER)
  private String endpointFilter;

  public static final String SERIALIZED_NAME_MAX_ENDPOINTS = "maxEndpoints";
  @SerializedName(SERIALIZED_NAME_MAX_ENDPOINTS)
  private Integer maxEndpoints;

  public ResolveServiceRequest() {
  }

  public ResolveServiceRequest endpointFilter(String endpointFilter) {
    this.endpointFilter = endpointFilter;
    return this;
  }

  /**
   * Optional. The filter applied to the endpoints of the resolved service. General &#x60;filter&#x60; string syntax: &#x60; ()&#x60; * &#x60;&#x60; can be &#x60;name&#x60;, &#x60;address&#x60;, &#x60;port&#x60;, or &#x60;annotations.&#x60; for map field * &#x60;&#x60; can be &#x60;&lt;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&#x3D;&#x60;, &#x60;:&#x60;. Of which &#x60;:&#x60; means &#x60;HAS&#x60;, and is roughly the same as &#x60;&#x3D;&#x60; * &#x60;&#x60; must be the same data type as field * &#x60;&#x60; can be &#x60;AND&#x60;, &#x60;OR&#x60;, &#x60;NOT&#x60; Examples of valid filters: * &#x60;annotations.owner&#x60; returns endpoints that have a annotation with the key &#x60;owner&#x60;, this is the same as &#x60;annotations:owner&#x60; * &#x60;annotations.protocol&#x3D;gRPC&#x60; returns endpoints that have key/value &#x60;protocol&#x3D;gRPC&#x60; * &#x60;address&#x3D;192.108.1.105&#x60; returns endpoints that have this address * &#x60;port&gt;8080&#x60; returns endpoints that have port number larger than 8080 * &#x60;name&gt;projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c&#x60; returns endpoints that have name that is alphabetically later than the string, so \&quot;endpoint-e\&quot; is returned but \&quot;endpoint-a\&quot; is not * &#x60;name&#x3D;projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1&#x60; returns the endpoint that has an endpoint_id equal to &#x60;ep-1&#x60; * &#x60;annotations.owner!&#x3D;sd AND annotations.foo&#x3D;bar&#x60; returns endpoints that have &#x60;owner&#x60; in annotation key but value is not &#x60;sd&#x60; AND have key/value &#x60;foo&#x3D;bar&#x60; * &#x60;doesnotexist.foo&#x3D;bar&#x60; returns an empty list. Note that endpoint doesn&#39;t have a field called \&quot;doesnotexist\&quot;. Since the filter does not match any endpoint, it returns no results For more information about filtering, see [API Filtering](https://aip.dev/160).
   * @return endpointFilter
   */
  @javax.annotation.Nullable
  public String getEndpointFilter() {
    return endpointFilter;
  }

  public void setEndpointFilter(String endpointFilter) {
    this.endpointFilter = endpointFilter;
  }


  public ResolveServiceRequest maxEndpoints(Integer maxEndpoints) {
    this.maxEndpoints = maxEndpoints;
    return this;
  }

  /**
   * Optional. The maximum number of endpoints to return. Defaults to 25. Maximum is 100. If a value less than one is specified, the Default is used. If a value greater than the Maximum is specified, the Maximum is used.
   * @return maxEndpoints
   */
  @javax.annotation.Nullable
  public Integer getMaxEndpoints() {
    return maxEndpoints;
  }

  public void setMaxEndpoints(Integer maxEndpoints) {
    this.maxEndpoints = maxEndpoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolveServiceRequest resolveServiceRequest = (ResolveServiceRequest) o;
    return Objects.equals(this.endpointFilter, resolveServiceRequest.endpointFilter) &&
        Objects.equals(this.maxEndpoints, resolveServiceRequest.maxEndpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointFilter, maxEndpoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolveServiceRequest {\n");
    sb.append("    endpointFilter: ").append(toIndentedString(endpointFilter)).append("\n");
    sb.append("    maxEndpoints: ").append(toIndentedString(maxEndpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointFilter");
    openapiFields.add("maxEndpoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResolveServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResolveServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResolveServiceRequest is not found in the empty JSON string", ResolveServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResolveServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResolveServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointFilter") != null && !jsonObj.get("endpointFilter").isJsonNull()) && !jsonObj.get("endpointFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResolveServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResolveServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResolveServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResolveServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ResolveServiceRequest>() {
           @Override
           public void write(JsonWriter out, ResolveServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResolveServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResolveServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResolveServiceRequest
   * @throws IOException if the JSON string is invalid with respect to ResolveServiceRequest
   */
  public static ResolveServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResolveServiceRequest.class);
  }

  /**
   * Convert an instance of ResolveServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

