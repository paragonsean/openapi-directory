/*
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListEndpointsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListNamespacesResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.Namespace;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.ResolveServiceRequest;
import org.openapitools.client.model.ResolveServiceResponse;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.servicedirectoryProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a namespace, and returns the new namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String namespaceId = null;
        Namespace namespace = null;
        Namespace response = api.servicedirectoryProjectsLocationsNamespacesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, namespaceId, namespace);
        // TODO: test validations
    }

    /**
     * Lists all namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNamespacesResponse response = api.servicedirectoryProjectsLocationsNamespacesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a service, and returns the new service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String serviceId = null;
        Service service = null;
        Service response = api.servicedirectoryProjectsLocationsNamespacesServicesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serviceId, service);
        // TODO: test validations
    }

    /**
     * Creates an endpoint, and returns the new endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endpointId = null;
        Endpoint endpoint = null;
        Endpoint response = api.servicedirectoryProjectsLocationsNamespacesServicesEndpointsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endpointId, endpoint);
        // TODO: test validations
    }

    /**
     * Deletes an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.servicedirectoryProjectsLocationsNamespacesServicesEndpointsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesEndpointsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Endpoint response = api.servicedirectoryProjectsLocationsNamespacesServicesEndpointsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesEndpointsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEndpointsResponse response = api.servicedirectoryProjectsLocationsNamespacesServicesEndpointsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Endpoint endpoint = null;
        Endpoint response = api.servicedirectoryProjectsLocationsNamespacesServicesEndpointsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, endpoint);
        // TODO: test validations
    }

    /**
     * Gets the IAM Policy for a resource (namespace or service only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.servicedirectoryProjectsLocationsNamespacesServicesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists all services belonging to a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServicesResponse response = api.servicedirectoryProjectsLocationsNamespacesServicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns a service and its associated endpoints. Resolving a service is not considered an active developer method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesResolveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResolveServiceRequest resolveServiceRequest = null;
        ResolveServiceResponse response = api.servicedirectoryProjectsLocationsNamespacesServicesResolve(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resolveServiceRequest);
        // TODO: test validations
    }

    /**
     * Sets the IAM Policy for a resource (namespace or service only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.servicedirectoryProjectsLocationsNamespacesServicesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Tests IAM permissions for a resource (namespace or service only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.servicedirectoryProjectsLocationsNamespacesServicesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
