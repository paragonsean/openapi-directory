/**
 * Service Directory API
 * Service Directory is a platform for discovering, publishing, and connecting services. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpoint.h"
#include "OAIGetIamPolicyRequest.h"
#include "OAIListEndpointsResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIListNamespacesResponse.h"
#include "OAIListServicesResponse.h"
#include "OAINamespace.h"
#include "OAIObject.h"
#include "OAIPolicy.h"
#include "OAIResolveServiceRequest.h"
#include "OAIResolveServiceResponse.h"
#include "OAIService.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicedirectory_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  namespace_id QString [optional]
    * @param[in]  oai_namespace OAINamespace [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &namespace_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINamespace> &oai_namespace = ::OpenAPI::OptionalParam<OAINamespace>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  service_id QString [optional]
    * @param[in]  oai_service OAIService [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService> &oai_service = ::OpenAPI::OptionalParam<OAIService>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  endpoint_id QString [optional]
    * @param[in]  oai_endpoint OAIEndpoint [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_endpoints_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &endpoint_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEndpoint> &oai_endpoint = ::OpenAPI::OptionalParam<OAIEndpoint>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_endpoints_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_endpoints_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_endpoints_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_endpoint OAIEndpoint [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_endpoints_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEndpoint> &oai_endpoint = ::OpenAPI::OptionalParam<OAIEndpoint>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_iam_policy_request OAIGetIamPolicyRequest [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest> &oai_get_iam_policy_request = ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_resolve_service_request OAIResolveServiceRequest [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_resolve(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResolveServiceRequest> &oai_resolve_service_request = ::OpenAPI::OptionalParam<OAIResolveServiceRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void servicedirectory_projects_locations_namespaces_services_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void servicedirectory_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_createCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_listCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_createCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_endpoints_createCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_endpoints_getCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_endpoints_listCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_listCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_resolveCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void servicedirectory_projects_locations_listSignal(OAIListLocationsResponse summary);
    void servicedirectory_projects_locations_namespaces_createSignal(OAINamespace summary);
    void servicedirectory_projects_locations_namespaces_listSignal(OAIListNamespacesResponse summary);
    void servicedirectory_projects_locations_namespaces_services_createSignal(OAIService summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignal(OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignal(OAIObject summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignal(OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignal(OAIListEndpointsResponse summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignal(OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignal(OAIPolicy summary);
    void servicedirectory_projects_locations_namespaces_services_listSignal(OAIListServicesResponse summary);
    void servicedirectory_projects_locations_namespaces_services_resolveSignal(OAIResolveServiceResponse summary);
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignal(OAIPolicy summary);
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);


    void servicedirectory_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);
    void servicedirectory_projects_locations_namespaces_createSignalFull(OAIHttpRequestWorker *worker, OAINamespace summary);
    void servicedirectory_projects_locations_namespaces_listSignalFull(OAIHttpRequestWorker *worker, OAIListNamespacesResponse summary);
    void servicedirectory_projects_locations_namespaces_services_createSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignalFull(OAIHttpRequestWorker *worker, OAIListEndpointsResponse summary);
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalFull(OAIHttpRequestWorker *worker, OAIEndpoint summary);
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void servicedirectory_projects_locations_namespaces_services_listSignalFull(OAIHttpRequestWorker *worker, OAIListServicesResponse summary);
    void servicedirectory_projects_locations_namespaces_services_resolveSignalFull(OAIHttpRequestWorker *worker, OAIResolveServiceResponse summary);
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);

    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_listSignalError() instead")
    void servicedirectory_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_createSignalError() instead")
    void servicedirectory_projects_locations_namespaces_createSignalE(OAINamespace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_createSignalError(OAINamespace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_listSignalError() instead")
    void servicedirectory_projects_locations_namespaces_listSignalE(OAIListNamespacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_listSignalError(OAIListNamespacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_createSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_createSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_createSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_createSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_getSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_listSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignalE(OAIListEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignalError(OAIListEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalE(OAIEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalError(OAIEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_getIamPolicySignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_listSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_listSignalE(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_listSignalError(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_resolveSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_resolveSignalE(OAIResolveServiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_resolveSignalError(OAIResolveServiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_setIamPolicySignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalError() instead")
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_listSignalErrorFull() instead")
    void servicedirectory_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_createSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_listSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_createSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_createSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_getSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_listSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_endpoints_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_getIamPolicySignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_listSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_resolveSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_resolveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_resolveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_setIamPolicySignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalErrorFull() instead")
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicedirectory_projects_locations_namespaces_services_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
