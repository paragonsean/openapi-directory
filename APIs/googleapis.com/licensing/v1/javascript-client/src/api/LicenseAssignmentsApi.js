/**
 * Enterprise License Manager API
 * The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LicenseAssignment from '../model/LicenseAssignment';
import LicenseAssignmentInsert from '../model/LicenseAssignmentInsert';
import LicenseAssignmentList from '../model/LicenseAssignmentList';

/**
* LicenseAssignments service.
* @module api/LicenseAssignmentsApi
* @version v1
*/
export default class LicenseAssignmentsApi {

    /**
    * Constructs a new LicenseAssignmentsApi. 
    * @alias module:api/LicenseAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsDelete operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a license.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {String} userId The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    licensingLicenseAssignmentsDelete(productId, skuId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsDelete");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling licensingLicenseAssignmentsDelete");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsGet operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific user's license by product SKU.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {String} userId The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignment}
     */
    licensingLicenseAssignmentsGet(productId, skuId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsGet");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling licensingLicenseAssignmentsGet");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseAssignment;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsInsert operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a license.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LicenseAssignmentInsert} [licenseAssignmentInsert] 
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignment}
     */
    licensingLicenseAssignmentsInsert(productId, skuId, opts, callback) {
      opts = opts || {};
      let postBody = opts['licenseAssignmentInsert'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsInsert");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsInsert");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseAssignment;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsListForProduct operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsListForProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users assigned licenses for a specific product SKU.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} customerId The customer's unique ID as defined in the Admin console, such as `C00000000`. If the customer is suspended, the server returns an error.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.
     * @param {String} [pageToken] Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsListForProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignmentList}
     */
    licensingLicenseAssignmentsListForProduct(productId, customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsListForProduct");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling licensingLicenseAssignmentsListForProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'customerId': customerId,
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseAssignmentList;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsListForProductAndSku operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsListForProductAndSkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users assigned licenses for a specific product SKU.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {String} customerId The customer's unique ID as defined in the Admin console, such as `C00000000`. If the customer is suspended, the server returns an error.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The `maxResults` query string determines how many entries are returned on each page of a large response. This is an optional parameter. The value must be a positive number.
     * @param {String} [pageToken] Token to fetch the next page of data. The `maxResults` query string is related to the `pageToken` since `maxResults` determines how many entries are returned on each page. This is an optional query string. If not specified, the server returns the first page.
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsListForProductAndSkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignmentList}
     */
    licensingLicenseAssignmentsListForProductAndSku(productId, skuId, customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsListForProductAndSku");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsListForProductAndSku");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling licensingLicenseAssignmentsListForProductAndSku");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'customerId': customerId,
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseAssignmentList;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsPatch operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {String} userId The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LicenseAssignment} [licenseAssignment] 
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignment}
     */
    licensingLicenseAssignmentsPatch(productId, skuId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['licenseAssignment'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsPatch");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling licensingLicenseAssignmentsPatch");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseAssignment;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensingLicenseAssignmentsUpdate operation.
     * @callback module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign a user's product SKU with a different SKU in the same product.
     * @param {String} productId A product's unique identifier. For more information about products in this version of the API, see Products and SKUs.
     * @param {String} skuId A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
     * @param {String} userId The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LicenseAssignment} [licenseAssignment] 
     * @param {module:api/LicenseAssignmentsApi~licensingLicenseAssignmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAssignment}
     */
    licensingLicenseAssignmentsUpdate(productId, skuId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['licenseAssignment'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling licensingLicenseAssignmentsUpdate");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling licensingLicenseAssignmentsUpdate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling licensingLicenseAssignmentsUpdate");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseAssignment;
      return this.apiClient.callApi(
        '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
