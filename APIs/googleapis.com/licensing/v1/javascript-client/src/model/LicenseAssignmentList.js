/**
 * Enterprise License Manager API
 * The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicenseAssignment from './LicenseAssignment';

/**
 * The LicenseAssignmentList model module.
 * @module model/LicenseAssignmentList
 * @version v1
 */
class LicenseAssignmentList {
    /**
     * Constructs a new <code>LicenseAssignmentList</code>.
     * @alias module:model/LicenseAssignmentList
     */
    constructor() { 
        
        LicenseAssignmentList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'licensing#licenseAssignmentList';
    }

    /**
     * Constructs a <code>LicenseAssignmentList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseAssignmentList} obj Optional instance to populate.
     * @return {module:model/LicenseAssignmentList} The populated <code>LicenseAssignmentList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseAssignmentList();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [LicenseAssignment]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseAssignmentList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseAssignmentList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                LicenseAssignment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }

        return true;
    }


}



/**
 * ETag of the resource.
 * @member {String} etag
 */
LicenseAssignmentList.prototype['etag'] = undefined;

/**
 * The LicenseAssignments in this page of results.
 * @member {Array.<module:model/LicenseAssignment>} items
 */
LicenseAssignmentList.prototype['items'] = undefined;

/**
 * Identifies the resource as a collection of LicenseAssignments.
 * @member {String} kind
 * @default 'licensing#licenseAssignmentList'
 */
LicenseAssignmentList.prototype['kind'] = 'licensing#licenseAssignmentList';

/**
 * The token that you must submit in a subsequent request to retrieve additional license results matching your query parameters. The `maxResults` query string is related to the `nextPageToken` since `maxResults` determines how many entries are returned on each next page.
 * @member {String} nextPageToken
 */
LicenseAssignmentList.prototype['nextPageToken'] = undefined;






export default LicenseAssignmentList;

