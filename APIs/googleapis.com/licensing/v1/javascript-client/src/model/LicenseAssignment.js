/**
 * Enterprise License Manager API
 * The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseAssignment model module.
 * @module model/LicenseAssignment
 * @version v1
 */
class LicenseAssignment {
    /**
     * Constructs a new <code>LicenseAssignment</code>.
     * Representation of a license assignment.
     * @alias module:model/LicenseAssignment
     */
    constructor() { 
        
        LicenseAssignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'licensing#licenseAssignment';
    }

    /**
     * Constructs a <code>LicenseAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseAssignment} obj Optional instance to populate.
     * @return {module:model/LicenseAssignment} The populated <code>LicenseAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseAssignment();

            if (data.hasOwnProperty('etags')) {
                obj['etags'] = ApiClient.convertToType(data['etags'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
            if (data.hasOwnProperty('skuName')) {
                obj['skuName'] = ApiClient.convertToType(data['skuName'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseAssignment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etags'] && !(typeof data['etags'] === 'string' || data['etags'] instanceof String)) {
            throw new Error("Expected the field `etags` to be a primitive type in the JSON string but got " + data['etags']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }
        // ensure the json data is a string
        if (data['skuName'] && !(typeof data['skuName'] === 'string' || data['skuName'] instanceof String)) {
            throw new Error("Expected the field `skuName` to be a primitive type in the JSON string but got " + data['skuName']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * ETag of the resource.
 * @member {String} etags
 */
LicenseAssignment.prototype['etags'] = undefined;

/**
 * Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.
 * @member {String} kind
 * @default 'licensing#licenseAssignment'
 */
LicenseAssignment.prototype['kind'] = 'licensing#licenseAssignment';

/**
 * A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.
 * @member {String} productId
 */
LicenseAssignment.prototype['productId'] = undefined;

/**
 * Display Name of the product.
 * @member {String} productName
 */
LicenseAssignment.prototype['productName'] = undefined;

/**
 * Link to this page.
 * @member {String} selfLink
 */
LicenseAssignment.prototype['selfLink'] = undefined;

/**
 * A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.
 * @member {String} skuId
 */
LicenseAssignment.prototype['skuId'] = undefined;

/**
 * Display Name of the sku of the product.
 * @member {String} skuName
 */
LicenseAssignment.prototype['skuName'] = undefined;

/**
 * The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.
 * @member {String} userId
 */
LicenseAssignment.prototype['userId'] = undefined;






export default LicenseAssignment;

