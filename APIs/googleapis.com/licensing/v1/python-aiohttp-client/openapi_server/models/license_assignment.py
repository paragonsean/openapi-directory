# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etags: str=None, kind: str='licensing#licenseAssignment', product_id: str=None, product_name: str=None, self_link: str=None, sku_id: str=None, sku_name: str=None, user_id: str=None):
        """LicenseAssignment - a model defined in OpenAPI

        :param etags: The etags of this LicenseAssignment.
        :param kind: The kind of this LicenseAssignment.
        :param product_id: The product_id of this LicenseAssignment.
        :param product_name: The product_name of this LicenseAssignment.
        :param self_link: The self_link of this LicenseAssignment.
        :param sku_id: The sku_id of this LicenseAssignment.
        :param sku_name: The sku_name of this LicenseAssignment.
        :param user_id: The user_id of this LicenseAssignment.
        """
        self.openapi_types = {
            'etags': str,
            'kind': str,
            'product_id': str,
            'product_name': str,
            'self_link': str,
            'sku_id': str,
            'sku_name': str,
            'user_id': str
        }

        self.attribute_map = {
            'etags': 'etags',
            'kind': 'kind',
            'product_id': 'productId',
            'product_name': 'productName',
            'self_link': 'selfLink',
            'sku_id': 'skuId',
            'sku_name': 'skuName',
            'user_id': 'userId'
        }

        self._etags = etags
        self._kind = kind
        self._product_id = product_id
        self._product_name = product_name
        self._self_link = self_link
        self._sku_id = sku_id
        self._sku_name = sku_name
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseAssignment of this LicenseAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etags(self):
        """Gets the etags of this LicenseAssignment.

        ETag of the resource.

        :return: The etags of this LicenseAssignment.
        :rtype: str
        """
        return self._etags

    @etags.setter
    def etags(self, etags):
        """Sets the etags of this LicenseAssignment.

        ETag of the resource.

        :param etags: The etags of this LicenseAssignment.
        :type etags: str
        """

        self._etags = etags

    @property
    def kind(self):
        """Gets the kind of this LicenseAssignment.

        Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.

        :return: The kind of this LicenseAssignment.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LicenseAssignment.

        Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.

        :param kind: The kind of this LicenseAssignment.
        :type kind: str
        """

        self._kind = kind

    @property
    def product_id(self):
        """Gets the product_id of this LicenseAssignment.

        A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.

        :return: The product_id of this LicenseAssignment.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this LicenseAssignment.

        A product's unique identifier. For more information about products in this version of the API, see Product and SKU IDs.

        :param product_id: The product_id of this LicenseAssignment.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this LicenseAssignment.

        Display Name of the product.

        :return: The product_name of this LicenseAssignment.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this LicenseAssignment.

        Display Name of the product.

        :param product_name: The product_name of this LicenseAssignment.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def self_link(self):
        """Gets the self_link of this LicenseAssignment.

        Link to this page.

        :return: The self_link of this LicenseAssignment.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this LicenseAssignment.

        Link to this page.

        :param self_link: The self_link of this LicenseAssignment.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def sku_id(self):
        """Gets the sku_id of this LicenseAssignment.

        A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.

        :return: The sku_id of this LicenseAssignment.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this LicenseAssignment.

        A product SKU's unique identifier. For more information about available SKUs in this version of the API, see Products and SKUs.

        :param sku_id: The sku_id of this LicenseAssignment.
        :type sku_id: str
        """

        self._sku_id = sku_id

    @property
    def sku_name(self):
        """Gets the sku_name of this LicenseAssignment.

        Display Name of the sku of the product.

        :return: The sku_name of this LicenseAssignment.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this LicenseAssignment.

        Display Name of the sku of the product.

        :param sku_name: The sku_name of this LicenseAssignment.
        :type sku_name: str
        """

        self._sku_name = sku_name

    @property
    def user_id(self):
        """Gets the user_id of this LicenseAssignment.

        The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.

        :return: The user_id of this LicenseAssignment.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LicenseAssignment.

        The user's current primary email address. If the user's email address changes, use the new email address in your API requests. Since a `userId` is subject to change, do not use a `userId` value as a key for persistent data. This key could break if the current user's email address changes. If the `userId` is suspended, the license status changes.

        :param user_id: The user_id of this LicenseAssignment.
        :type user_id: str
        """

        self._user_id = user_id
