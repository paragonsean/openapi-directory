/**
 * Enterprise License Manager API
 * The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseAssignment::OAILicenseAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseAssignment::OAILicenseAssignment() {
    this->initializeModel();
}

OAILicenseAssignment::~OAILicenseAssignment() {}

void OAILicenseAssignment::initializeModel() {

    m_etags_isSet = false;
    m_etags_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAILicenseAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseAssignment::fromJsonObject(QJsonObject json) {

    m_etags_isValid = ::OpenAPI::fromJsonValue(m_etags, json[QString("etags")]);
    m_etags_isSet = !json[QString("etags")].isNull() && m_etags_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("productName")]);
    m_product_name_isSet = !json[QString("productName")].isNull() && m_product_name_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAILicenseAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_etags_isSet) {
        obj.insert(QString("etags"), ::OpenAPI::toJsonValue(m_etags));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("productName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAILicenseAssignment::getEtags() const {
    return m_etags;
}
void OAILicenseAssignment::setEtags(const QString &etags) {
    m_etags = etags;
    m_etags_isSet = true;
}

bool OAILicenseAssignment::is_etags_Set() const{
    return m_etags_isSet;
}

bool OAILicenseAssignment::is_etags_Valid() const{
    return m_etags_isValid;
}

QString OAILicenseAssignment::getKind() const {
    return m_kind;
}
void OAILicenseAssignment::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILicenseAssignment::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILicenseAssignment::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAILicenseAssignment::getProductId() const {
    return m_product_id;
}
void OAILicenseAssignment::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAILicenseAssignment::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAILicenseAssignment::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAILicenseAssignment::getProductName() const {
    return m_product_name;
}
void OAILicenseAssignment::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAILicenseAssignment::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAILicenseAssignment::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAILicenseAssignment::getSelfLink() const {
    return m_self_link;
}
void OAILicenseAssignment::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAILicenseAssignment::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAILicenseAssignment::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAILicenseAssignment::getSkuId() const {
    return m_sku_id;
}
void OAILicenseAssignment::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAILicenseAssignment::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAILicenseAssignment::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

QString OAILicenseAssignment::getSkuName() const {
    return m_sku_name;
}
void OAILicenseAssignment::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAILicenseAssignment::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAILicenseAssignment::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

QString OAILicenseAssignment::getUserId() const {
    return m_user_id;
}
void OAILicenseAssignment::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAILicenseAssignment::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAILicenseAssignment::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAILicenseAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
