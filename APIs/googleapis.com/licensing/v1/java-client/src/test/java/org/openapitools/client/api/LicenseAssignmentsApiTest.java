/*
 * Enterprise License Manager API
 * The Google Enterprise License Manager API lets you manage Google Workspace and related licenses for all users of a customer that you manage.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LicenseAssignment;
import org.openapitools.client.model.LicenseAssignmentInsert;
import org.openapitools.client.model.LicenseAssignmentList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LicenseAssignmentsApi
 */
@Disabled
public class LicenseAssignmentsApiTest {

    private final LicenseAssignmentsApi api = new LicenseAssignmentsApi();

    /**
     * Revoke a license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsDeleteTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.licensingLicenseAssignmentsDelete(productId, skuId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get a specific user&#39;s license by product SKU.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsGetTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LicenseAssignment response = api.licensingLicenseAssignmentsGet(productId, skuId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Assign a license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsInsertTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LicenseAssignmentInsert licenseAssignmentInsert = null;
        LicenseAssignment response = api.licensingLicenseAssignmentsInsert(productId, skuId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, licenseAssignmentInsert);
        // TODO: test validations
    }

    /**
     * List all users assigned licenses for a specific product SKU.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsListForProductTest() throws ApiException {
        String productId = null;
        String customerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        LicenseAssignmentList response = api.licensingLicenseAssignmentsListForProduct(productId, customerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * List all users assigned licenses for a specific product SKU.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsListForProductAndSkuTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String customerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        LicenseAssignmentList response = api.licensingLicenseAssignmentsListForProductAndSku(productId, skuId, customerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Reassign a user&#39;s product SKU with a different SKU in the same product. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsPatchTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LicenseAssignment licenseAssignment = null;
        LicenseAssignment response = api.licensingLicenseAssignmentsPatch(productId, skuId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, licenseAssignment);
        // TODO: test validations
    }

    /**
     * Reassign a user&#39;s product SKU with a different SKU in the same product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licensingLicenseAssignmentsUpdateTest() throws ApiException {
        String productId = null;
        String skuId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LicenseAssignment licenseAssignment = null;
        LicenseAssignment response = api.licensingLicenseAssignmentsUpdate(productId, skuId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, licenseAssignment);
        // TODO: test validations
    }

}
