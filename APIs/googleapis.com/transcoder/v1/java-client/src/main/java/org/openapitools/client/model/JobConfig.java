/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdBreak;
import org.openapitools.client.model.EditAtom;
import org.openapitools.client.model.ElementaryStream;
import org.openapitools.client.model.Encryption;
import org.openapitools.client.model.Input;
import org.openapitools.client.model.Manifest;
import org.openapitools.client.model.MuxStream;
import org.openapitools.client.model.Output;
import org.openapitools.client.model.Overlay;
import org.openapitools.client.model.PubsubDestination;
import org.openapitools.client.model.SpriteSheet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobConfig {
  public static final String SERIALIZED_NAME_AD_BREAKS = "adBreaks";
  @SerializedName(SERIALIZED_NAME_AD_BREAKS)
  private List<AdBreak> adBreaks = new ArrayList<>();

  public static final String SERIALIZED_NAME_EDIT_LIST = "editList";
  @SerializedName(SERIALIZED_NAME_EDIT_LIST)
  private List<EditAtom> editList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELEMENTARY_STREAMS = "elementaryStreams";
  @SerializedName(SERIALIZED_NAME_ELEMENTARY_STREAMS)
  private List<ElementaryStream> elementaryStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTIONS = "encryptions";
  @SerializedName(SERIALIZED_NAME_ENCRYPTIONS)
  private List<Encryption> encryptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<Input> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANIFESTS = "manifests";
  @SerializedName(SERIALIZED_NAME_MANIFESTS)
  private List<Manifest> manifests = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUX_STREAMS = "muxStreams";
  @SerializedName(SERIALIZED_NAME_MUX_STREAMS)
  private List<MuxStream> muxStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private Output output;

  public static final String SERIALIZED_NAME_OVERLAYS = "overlays";
  @SerializedName(SERIALIZED_NAME_OVERLAYS)
  private List<Overlay> overlays = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBSUB_DESTINATION = "pubsubDestination";
  @SerializedName(SERIALIZED_NAME_PUBSUB_DESTINATION)
  private PubsubDestination pubsubDestination;

  public static final String SERIALIZED_NAME_SPRITE_SHEETS = "spriteSheets";
  @SerializedName(SERIALIZED_NAME_SPRITE_SHEETS)
  private List<SpriteSheet> spriteSheets = new ArrayList<>();

  public JobConfig() {
  }

  public JobConfig adBreaks(List<AdBreak> adBreaks) {
    this.adBreaks = adBreaks;
    return this;
  }

  public JobConfig addAdBreaksItem(AdBreak adBreaksItem) {
    if (this.adBreaks == null) {
      this.adBreaks = new ArrayList<>();
    }
    this.adBreaks.add(adBreaksItem);
    return this;
  }

  /**
   * List of ad breaks. Specifies where to insert ad break tags in the output manifests.
   * @return adBreaks
   */
  @javax.annotation.Nullable
  public List<AdBreak> getAdBreaks() {
    return adBreaks;
  }

  public void setAdBreaks(List<AdBreak> adBreaks) {
    this.adBreaks = adBreaks;
  }


  public JobConfig editList(List<EditAtom> editList) {
    this.editList = editList;
    return this;
  }

  public JobConfig addEditListItem(EditAtom editListItem) {
    if (this.editList == null) {
      this.editList = new ArrayList<>();
    }
    this.editList.add(editListItem);
    return this;
  }

  /**
   * List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
   * @return editList
   */
  @javax.annotation.Nullable
  public List<EditAtom> getEditList() {
    return editList;
  }

  public void setEditList(List<EditAtom> editList) {
    this.editList = editList;
  }


  public JobConfig elementaryStreams(List<ElementaryStream> elementaryStreams) {
    this.elementaryStreams = elementaryStreams;
    return this;
  }

  public JobConfig addElementaryStreamsItem(ElementaryStream elementaryStreamsItem) {
    if (this.elementaryStreams == null) {
      this.elementaryStreams = new ArrayList<>();
    }
    this.elementaryStreams.add(elementaryStreamsItem);
    return this;
  }

  /**
   * List of elementary streams.
   * @return elementaryStreams
   */
  @javax.annotation.Nullable
  public List<ElementaryStream> getElementaryStreams() {
    return elementaryStreams;
  }

  public void setElementaryStreams(List<ElementaryStream> elementaryStreams) {
    this.elementaryStreams = elementaryStreams;
  }


  public JobConfig encryptions(List<Encryption> encryptions) {
    this.encryptions = encryptions;
    return this;
  }

  public JobConfig addEncryptionsItem(Encryption encryptionsItem) {
    if (this.encryptions == null) {
      this.encryptions = new ArrayList<>();
    }
    this.encryptions.add(encryptionsItem);
    return this;
  }

  /**
   * List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that &#x60;MuxStream&#x60; output.
   * @return encryptions
   */
  @javax.annotation.Nullable
  public List<Encryption> getEncryptions() {
    return encryptions;
  }

  public void setEncryptions(List<Encryption> encryptions) {
    this.encryptions = encryptions;
  }


  public JobConfig inputs(List<Input> inputs) {
    this.inputs = inputs;
    return this;
  }

  public JobConfig addInputsItem(Input inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * List of input assets stored in Cloud Storage.
   * @return inputs
   */
  @javax.annotation.Nullable
  public List<Input> getInputs() {
    return inputs;
  }

  public void setInputs(List<Input> inputs) {
    this.inputs = inputs;
  }


  public JobConfig manifests(List<Manifest> manifests) {
    this.manifests = manifests;
    return this;
  }

  public JobConfig addManifestsItem(Manifest manifestsItem) {
    if (this.manifests == null) {
      this.manifests = new ArrayList<>();
    }
    this.manifests.add(manifestsItem);
    return this;
  }

  /**
   * List of output manifests.
   * @return manifests
   */
  @javax.annotation.Nullable
  public List<Manifest> getManifests() {
    return manifests;
  }

  public void setManifests(List<Manifest> manifests) {
    this.manifests = manifests;
  }


  public JobConfig muxStreams(List<MuxStream> muxStreams) {
    this.muxStreams = muxStreams;
    return this;
  }

  public JobConfig addMuxStreamsItem(MuxStream muxStreamsItem) {
    if (this.muxStreams == null) {
      this.muxStreams = new ArrayList<>();
    }
    this.muxStreams.add(muxStreamsItem);
    return this;
  }

  /**
   * List of multiplexing settings for output streams.
   * @return muxStreams
   */
  @javax.annotation.Nullable
  public List<MuxStream> getMuxStreams() {
    return muxStreams;
  }

  public void setMuxStreams(List<MuxStream> muxStreams) {
    this.muxStreams = muxStreams;
  }


  public JobConfig output(Output output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public Output getOutput() {
    return output;
  }

  public void setOutput(Output output) {
    this.output = output;
  }


  public JobConfig overlays(List<Overlay> overlays) {
    this.overlays = overlays;
    return this;
  }

  public JobConfig addOverlaysItem(Overlay overlaysItem) {
    if (this.overlays == null) {
      this.overlays = new ArrayList<>();
    }
    this.overlays.add(overlaysItem);
    return this;
  }

  /**
   * List of overlays on the output video, in descending Z-order.
   * @return overlays
   */
  @javax.annotation.Nullable
  public List<Overlay> getOverlays() {
    return overlays;
  }

  public void setOverlays(List<Overlay> overlays) {
    this.overlays = overlays;
  }


  public JobConfig pubsubDestination(PubsubDestination pubsubDestination) {
    this.pubsubDestination = pubsubDestination;
    return this;
  }

  /**
   * Get pubsubDestination
   * @return pubsubDestination
   */
  @javax.annotation.Nullable
  public PubsubDestination getPubsubDestination() {
    return pubsubDestination;
  }

  public void setPubsubDestination(PubsubDestination pubsubDestination) {
    this.pubsubDestination = pubsubDestination;
  }


  public JobConfig spriteSheets(List<SpriteSheet> spriteSheets) {
    this.spriteSheets = spriteSheets;
    return this;
  }

  public JobConfig addSpriteSheetsItem(SpriteSheet spriteSheetsItem) {
    if (this.spriteSheets == null) {
      this.spriteSheets = new ArrayList<>();
    }
    this.spriteSheets.add(spriteSheetsItem);
    return this;
  }

  /**
   * List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
   * @return spriteSheets
   */
  @javax.annotation.Nullable
  public List<SpriteSheet> getSpriteSheets() {
    return spriteSheets;
  }

  public void setSpriteSheets(List<SpriteSheet> spriteSheets) {
    this.spriteSheets = spriteSheets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobConfig jobConfig = (JobConfig) o;
    return Objects.equals(this.adBreaks, jobConfig.adBreaks) &&
        Objects.equals(this.editList, jobConfig.editList) &&
        Objects.equals(this.elementaryStreams, jobConfig.elementaryStreams) &&
        Objects.equals(this.encryptions, jobConfig.encryptions) &&
        Objects.equals(this.inputs, jobConfig.inputs) &&
        Objects.equals(this.manifests, jobConfig.manifests) &&
        Objects.equals(this.muxStreams, jobConfig.muxStreams) &&
        Objects.equals(this.output, jobConfig.output) &&
        Objects.equals(this.overlays, jobConfig.overlays) &&
        Objects.equals(this.pubsubDestination, jobConfig.pubsubDestination) &&
        Objects.equals(this.spriteSheets, jobConfig.spriteSheets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adBreaks, editList, elementaryStreams, encryptions, inputs, manifests, muxStreams, output, overlays, pubsubDestination, spriteSheets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobConfig {\n");
    sb.append("    adBreaks: ").append(toIndentedString(adBreaks)).append("\n");
    sb.append("    editList: ").append(toIndentedString(editList)).append("\n");
    sb.append("    elementaryStreams: ").append(toIndentedString(elementaryStreams)).append("\n");
    sb.append("    encryptions: ").append(toIndentedString(encryptions)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    manifests: ").append(toIndentedString(manifests)).append("\n");
    sb.append("    muxStreams: ").append(toIndentedString(muxStreams)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    overlays: ").append(toIndentedString(overlays)).append("\n");
    sb.append("    pubsubDestination: ").append(toIndentedString(pubsubDestination)).append("\n");
    sb.append("    spriteSheets: ").append(toIndentedString(spriteSheets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adBreaks");
    openapiFields.add("editList");
    openapiFields.add("elementaryStreams");
    openapiFields.add("encryptions");
    openapiFields.add("inputs");
    openapiFields.add("manifests");
    openapiFields.add("muxStreams");
    openapiFields.add("output");
    openapiFields.add("overlays");
    openapiFields.add("pubsubDestination");
    openapiFields.add("spriteSheets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobConfig is not found in the empty JSON string", JobConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adBreaks") != null && !jsonObj.get("adBreaks").isJsonNull()) {
        JsonArray jsonArrayadBreaks = jsonObj.getAsJsonArray("adBreaks");
        if (jsonArrayadBreaks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adBreaks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adBreaks` to be an array in the JSON string but got `%s`", jsonObj.get("adBreaks").toString()));
          }

          // validate the optional field `adBreaks` (array)
          for (int i = 0; i < jsonArrayadBreaks.size(); i++) {
            AdBreak.validateJsonElement(jsonArrayadBreaks.get(i));
          };
        }
      }
      if (jsonObj.get("editList") != null && !jsonObj.get("editList").isJsonNull()) {
        JsonArray jsonArrayeditList = jsonObj.getAsJsonArray("editList");
        if (jsonArrayeditList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("editList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `editList` to be an array in the JSON string but got `%s`", jsonObj.get("editList").toString()));
          }

          // validate the optional field `editList` (array)
          for (int i = 0; i < jsonArrayeditList.size(); i++) {
            EditAtom.validateJsonElement(jsonArrayeditList.get(i));
          };
        }
      }
      if (jsonObj.get("elementaryStreams") != null && !jsonObj.get("elementaryStreams").isJsonNull()) {
        JsonArray jsonArrayelementaryStreams = jsonObj.getAsJsonArray("elementaryStreams");
        if (jsonArrayelementaryStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elementaryStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elementaryStreams` to be an array in the JSON string but got `%s`", jsonObj.get("elementaryStreams").toString()));
          }

          // validate the optional field `elementaryStreams` (array)
          for (int i = 0; i < jsonArrayelementaryStreams.size(); i++) {
            ElementaryStream.validateJsonElement(jsonArrayelementaryStreams.get(i));
          };
        }
      }
      if (jsonObj.get("encryptions") != null && !jsonObj.get("encryptions").isJsonNull()) {
        JsonArray jsonArrayencryptions = jsonObj.getAsJsonArray("encryptions");
        if (jsonArrayencryptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encryptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encryptions` to be an array in the JSON string but got `%s`", jsonObj.get("encryptions").toString()));
          }

          // validate the optional field `encryptions` (array)
          for (int i = 0; i < jsonArrayencryptions.size(); i++) {
            Encryption.validateJsonElement(jsonArrayencryptions.get(i));
          };
        }
      }
      if (jsonObj.get("inputs") != null && !jsonObj.get("inputs").isJsonNull()) {
        JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
        if (jsonArrayinputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
          }

          // validate the optional field `inputs` (array)
          for (int i = 0; i < jsonArrayinputs.size(); i++) {
            Input.validateJsonElement(jsonArrayinputs.get(i));
          };
        }
      }
      if (jsonObj.get("manifests") != null && !jsonObj.get("manifests").isJsonNull()) {
        JsonArray jsonArraymanifests = jsonObj.getAsJsonArray("manifests");
        if (jsonArraymanifests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manifests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manifests` to be an array in the JSON string but got `%s`", jsonObj.get("manifests").toString()));
          }

          // validate the optional field `manifests` (array)
          for (int i = 0; i < jsonArraymanifests.size(); i++) {
            Manifest.validateJsonElement(jsonArraymanifests.get(i));
          };
        }
      }
      if (jsonObj.get("muxStreams") != null && !jsonObj.get("muxStreams").isJsonNull()) {
        JsonArray jsonArraymuxStreams = jsonObj.getAsJsonArray("muxStreams");
        if (jsonArraymuxStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("muxStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `muxStreams` to be an array in the JSON string but got `%s`", jsonObj.get("muxStreams").toString()));
          }

          // validate the optional field `muxStreams` (array)
          for (int i = 0; i < jsonArraymuxStreams.size(); i++) {
            MuxStream.validateJsonElement(jsonArraymuxStreams.get(i));
          };
        }
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        Output.validateJsonElement(jsonObj.get("output"));
      }
      if (jsonObj.get("overlays") != null && !jsonObj.get("overlays").isJsonNull()) {
        JsonArray jsonArrayoverlays = jsonObj.getAsJsonArray("overlays");
        if (jsonArrayoverlays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overlays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overlays` to be an array in the JSON string but got `%s`", jsonObj.get("overlays").toString()));
          }

          // validate the optional field `overlays` (array)
          for (int i = 0; i < jsonArrayoverlays.size(); i++) {
            Overlay.validateJsonElement(jsonArrayoverlays.get(i));
          };
        }
      }
      // validate the optional field `pubsubDestination`
      if (jsonObj.get("pubsubDestination") != null && !jsonObj.get("pubsubDestination").isJsonNull()) {
        PubsubDestination.validateJsonElement(jsonObj.get("pubsubDestination"));
      }
      if (jsonObj.get("spriteSheets") != null && !jsonObj.get("spriteSheets").isJsonNull()) {
        JsonArray jsonArrayspriteSheets = jsonObj.getAsJsonArray("spriteSheets");
        if (jsonArrayspriteSheets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spriteSheets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spriteSheets` to be an array in the JSON string but got `%s`", jsonObj.get("spriteSheets").toString()));
          }

          // validate the optional field `spriteSheets` (array)
          for (int i = 0; i < jsonArrayspriteSheets.size(); i++) {
            SpriteSheet.validateJsonElement(jsonArrayspriteSheets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<JobConfig>() {
           @Override
           public void write(JsonWriter out, JobConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobConfig
   * @throws IOException if the JSON string is invalid with respect to JobConfig
   */
  public static JobConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobConfig.class);
  }

  /**
   * Convert an instance of JobConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

