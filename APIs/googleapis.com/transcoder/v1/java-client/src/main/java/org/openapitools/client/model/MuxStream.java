/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fmp4Config;
import org.openapitools.client.model.SegmentSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Multiplexing settings for output stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MuxStream {
  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_ELEMENTARY_STREAMS = "elementaryStreams";
  @SerializedName(SERIALIZED_NAME_ELEMENTARY_STREAMS)
  private List<String> elementaryStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTION_ID = "encryptionId";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ID)
  private String encryptionId;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FMP4 = "fmp4";
  @SerializedName(SERIALIZED_NAME_FMP4)
  private Fmp4Config fmp4;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_SEGMENT_SETTINGS = "segmentSettings";
  @SerializedName(SERIALIZED_NAME_SEGMENT_SETTINGS)
  private SegmentSettings segmentSettings;

  public MuxStream() {
  }

  public MuxStream container(String container) {
    this.container = container;
    return this;
  }

  /**
   * The container format. The default is &#x60;mp4&#x60; Supported container formats: - &#x60;ts&#x60; - &#x60;fmp4&#x60;- the corresponding file extension is &#x60;.m4s&#x60; - &#x60;mp4&#x60; - &#x60;vtt&#x60; See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public MuxStream elementaryStreams(List<String> elementaryStreams) {
    this.elementaryStreams = elementaryStreams;
    return this;
  }

  public MuxStream addElementaryStreamsItem(String elementaryStreamsItem) {
    if (this.elementaryStreams == null) {
      this.elementaryStreams = new ArrayList<>();
    }
    this.elementaryStreams.add(elementaryStreamsItem);
    return this;
  }

  /**
   * List of ElementaryStream.key values multiplexed in this stream.
   * @return elementaryStreams
   */
  @javax.annotation.Nullable
  public List<String> getElementaryStreams() {
    return elementaryStreams;
  }

  public void setElementaryStreams(List<String> elementaryStreams) {
    this.elementaryStreams = elementaryStreams;
  }


  public MuxStream encryptionId(String encryptionId) {
    this.encryptionId = encryptionId;
    return this;
  }

  /**
   * Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
   * @return encryptionId
   */
  @javax.annotation.Nullable
  public String getEncryptionId() {
    return encryptionId;
  }

  public void setEncryptionId(String encryptionId) {
    this.encryptionId = encryptionId;
  }


  public MuxStream fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as &#x60;mux_stream0000000123.ts&#x60;.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public MuxStream fmp4(Fmp4Config fmp4) {
    this.fmp4 = fmp4;
    return this;
  }

  /**
   * Get fmp4
   * @return fmp4
   */
  @javax.annotation.Nullable
  public Fmp4Config getFmp4() {
    return fmp4;
  }

  public void setFmp4(Fmp4Config fmp4) {
    this.fmp4 = fmp4;
  }


  public MuxStream key(String key) {
    this.key = key;
    return this;
  }

  /**
   * A unique key for this multiplexed stream.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public MuxStream segmentSettings(SegmentSettings segmentSettings) {
    this.segmentSettings = segmentSettings;
    return this;
  }

  /**
   * Get segmentSettings
   * @return segmentSettings
   */
  @javax.annotation.Nullable
  public SegmentSettings getSegmentSettings() {
    return segmentSettings;
  }

  public void setSegmentSettings(SegmentSettings segmentSettings) {
    this.segmentSettings = segmentSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MuxStream muxStream = (MuxStream) o;
    return Objects.equals(this.container, muxStream.container) &&
        Objects.equals(this.elementaryStreams, muxStream.elementaryStreams) &&
        Objects.equals(this.encryptionId, muxStream.encryptionId) &&
        Objects.equals(this.fileName, muxStream.fileName) &&
        Objects.equals(this.fmp4, muxStream.fmp4) &&
        Objects.equals(this.key, muxStream.key) &&
        Objects.equals(this.segmentSettings, muxStream.segmentSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, elementaryStreams, encryptionId, fileName, fmp4, key, segmentSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MuxStream {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    elementaryStreams: ").append(toIndentedString(elementaryStreams)).append("\n");
    sb.append("    encryptionId: ").append(toIndentedString(encryptionId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fmp4: ").append(toIndentedString(fmp4)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    segmentSettings: ").append(toIndentedString(segmentSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container");
    openapiFields.add("elementaryStreams");
    openapiFields.add("encryptionId");
    openapiFields.add("fileName");
    openapiFields.add("fmp4");
    openapiFields.add("key");
    openapiFields.add("segmentSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MuxStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MuxStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MuxStream is not found in the empty JSON string", MuxStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MuxStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MuxStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("elementaryStreams") != null && !jsonObj.get("elementaryStreams").isJsonNull() && !jsonObj.get("elementaryStreams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elementaryStreams` to be an array in the JSON string but got `%s`", jsonObj.get("elementaryStreams").toString()));
      }
      if ((jsonObj.get("encryptionId") != null && !jsonObj.get("encryptionId").isJsonNull()) && !jsonObj.get("encryptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionId").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `fmp4`
      if (jsonObj.get("fmp4") != null && !jsonObj.get("fmp4").isJsonNull()) {
        Fmp4Config.validateJsonElement(jsonObj.get("fmp4"));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `segmentSettings`
      if (jsonObj.get("segmentSettings") != null && !jsonObj.get("segmentSettings").isJsonNull()) {
        SegmentSettings.validateJsonElement(jsonObj.get("segmentSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MuxStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MuxStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MuxStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MuxStream.class));

       return (TypeAdapter<T>) new TypeAdapter<MuxStream>() {
           @Override
           public void write(JsonWriter out, MuxStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MuxStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MuxStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MuxStream
   * @throws IOException if the JSON string is invalid with respect to MuxStream
   */
  public static MuxStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MuxStream.class);
  }

  /**
   * Convert an instance of MuxStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

