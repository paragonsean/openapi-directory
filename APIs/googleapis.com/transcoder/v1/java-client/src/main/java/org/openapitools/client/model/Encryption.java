/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DrmSystems;
import org.openapitools.client.model.MpegCommonEncryption;
import org.openapitools.client.model.SecretManagerSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encryption settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Encryption {
  public static final String SERIALIZED_NAME_AES128 = "aes128";
  @SerializedName(SERIALIZED_NAME_AES128)
  private Object aes128;

  public static final String SERIALIZED_NAME_DRM_SYSTEMS = "drmSystems";
  @SerializedName(SERIALIZED_NAME_DRM_SYSTEMS)
  private DrmSystems drmSystems;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MPEG_CENC = "mpegCenc";
  @SerializedName(SERIALIZED_NAME_MPEG_CENC)
  private MpegCommonEncryption mpegCenc;

  public static final String SERIALIZED_NAME_SAMPLE_AES = "sampleAes";
  @SerializedName(SERIALIZED_NAME_SAMPLE_AES)
  private Object sampleAes;

  public static final String SERIALIZED_NAME_SECRET_MANAGER_KEY_SOURCE = "secretManagerKeySource";
  @SerializedName(SERIALIZED_NAME_SECRET_MANAGER_KEY_SOURCE)
  private SecretManagerSource secretManagerKeySource;

  public Encryption() {
  }

  public Encryption aes128(Object aes128) {
    this.aes128 = aes128;
    return this;
  }

  /**
   * Configuration for AES-128 encryption.
   * @return aes128
   */
  @javax.annotation.Nullable
  public Object getAes128() {
    return aes128;
  }

  public void setAes128(Object aes128) {
    this.aes128 = aes128;
  }


  public Encryption drmSystems(DrmSystems drmSystems) {
    this.drmSystems = drmSystems;
    return this;
  }

  /**
   * Get drmSystems
   * @return drmSystems
   */
  @javax.annotation.Nullable
  public DrmSystems getDrmSystems() {
    return drmSystems;
  }

  public void setDrmSystems(DrmSystems drmSystems) {
    this.drmSystems = drmSystems;
  }


  public Encryption id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. Identifier for this set of encryption options.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Encryption mpegCenc(MpegCommonEncryption mpegCenc) {
    this.mpegCenc = mpegCenc;
    return this;
  }

  /**
   * Get mpegCenc
   * @return mpegCenc
   */
  @javax.annotation.Nullable
  public MpegCommonEncryption getMpegCenc() {
    return mpegCenc;
  }

  public void setMpegCenc(MpegCommonEncryption mpegCenc) {
    this.mpegCenc = mpegCenc;
  }


  public Encryption sampleAes(Object sampleAes) {
    this.sampleAes = sampleAes;
    return this;
  }

  /**
   * Configuration for SAMPLE-AES encryption.
   * @return sampleAes
   */
  @javax.annotation.Nullable
  public Object getSampleAes() {
    return sampleAes;
  }

  public void setSampleAes(Object sampleAes) {
    this.sampleAes = sampleAes;
  }


  public Encryption secretManagerKeySource(SecretManagerSource secretManagerKeySource) {
    this.secretManagerKeySource = secretManagerKeySource;
    return this;
  }

  /**
   * Get secretManagerKeySource
   * @return secretManagerKeySource
   */
  @javax.annotation.Nullable
  public SecretManagerSource getSecretManagerKeySource() {
    return secretManagerKeySource;
  }

  public void setSecretManagerKeySource(SecretManagerSource secretManagerKeySource) {
    this.secretManagerKeySource = secretManagerKeySource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Encryption encryption = (Encryption) o;
    return Objects.equals(this.aes128, encryption.aes128) &&
        Objects.equals(this.drmSystems, encryption.drmSystems) &&
        Objects.equals(this.id, encryption.id) &&
        Objects.equals(this.mpegCenc, encryption.mpegCenc) &&
        Objects.equals(this.sampleAes, encryption.sampleAes) &&
        Objects.equals(this.secretManagerKeySource, encryption.secretManagerKeySource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aes128, drmSystems, id, mpegCenc, sampleAes, secretManagerKeySource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Encryption {\n");
    sb.append("    aes128: ").append(toIndentedString(aes128)).append("\n");
    sb.append("    drmSystems: ").append(toIndentedString(drmSystems)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mpegCenc: ").append(toIndentedString(mpegCenc)).append("\n");
    sb.append("    sampleAes: ").append(toIndentedString(sampleAes)).append("\n");
    sb.append("    secretManagerKeySource: ").append(toIndentedString(secretManagerKeySource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aes128");
    openapiFields.add("drmSystems");
    openapiFields.add("id");
    openapiFields.add("mpegCenc");
    openapiFields.add("sampleAes");
    openapiFields.add("secretManagerKeySource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Encryption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Encryption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Encryption is not found in the empty JSON string", Encryption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Encryption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Encryption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `drmSystems`
      if (jsonObj.get("drmSystems") != null && !jsonObj.get("drmSystems").isJsonNull()) {
        DrmSystems.validateJsonElement(jsonObj.get("drmSystems"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `mpegCenc`
      if (jsonObj.get("mpegCenc") != null && !jsonObj.get("mpegCenc").isJsonNull()) {
        MpegCommonEncryption.validateJsonElement(jsonObj.get("mpegCenc"));
      }
      // validate the optional field `secretManagerKeySource`
      if (jsonObj.get("secretManagerKeySource") != null && !jsonObj.get("secretManagerKeySource").isJsonNull()) {
        SecretManagerSource.validateJsonElement(jsonObj.get("secretManagerKeySource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Encryption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Encryption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Encryption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Encryption.class));

       return (TypeAdapter<T>) new TypeAdapter<Encryption>() {
           @Override
           public void write(JsonWriter out, Encryption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Encryption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Encryption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Encryption
   * @throws IOException if the JSON string is invalid with respect to Encryption
   */
  public static Encryption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Encryption.class);
  }

  /**
   * Convert an instance of Encryption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

