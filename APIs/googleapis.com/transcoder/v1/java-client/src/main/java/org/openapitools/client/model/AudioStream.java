/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudioMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audio stream resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioStream {
  public static final String SERIALIZED_NAME_BITRATE_BPS = "bitrateBps";
  @SerializedName(SERIALIZED_NAME_BITRATE_BPS)
  private Integer bitrateBps;

  public static final String SERIALIZED_NAME_CHANNEL_COUNT = "channelCount";
  @SerializedName(SERIALIZED_NAME_CHANNEL_COUNT)
  private Integer channelCount;

  public static final String SERIALIZED_NAME_CHANNEL_LAYOUT = "channelLayout";
  @SerializedName(SERIALIZED_NAME_CHANNEL_LAYOUT)
  private List<String> channelLayout = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private String codec;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_MAPPING = "mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  private List<AudioMapping> mapping = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_RATE_HERTZ = "sampleRateHertz";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE_HERTZ)
  private Integer sampleRateHertz;

  public AudioStream() {
  }

  public AudioStream bitrateBps(Integer bitrateBps) {
    this.bitrateBps = bitrateBps;
    return this;
  }

  /**
   * Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.
   * @return bitrateBps
   */
  @javax.annotation.Nullable
  public Integer getBitrateBps() {
    return bitrateBps;
  }

  public void setBitrateBps(Integer bitrateBps) {
    this.bitrateBps = bitrateBps;
  }


  public AudioStream channelCount(Integer channelCount) {
    this.channelCount = channelCount;
    return this;
  }

  /**
   * Number of audio channels. Must be between 1 and 6. The default is 2.
   * @return channelCount
   */
  @javax.annotation.Nullable
  public Integer getChannelCount() {
    return channelCount;
  }

  public void setChannelCount(Integer channelCount) {
    this.channelCount = channelCount;
  }


  public AudioStream channelLayout(List<String> channelLayout) {
    this.channelLayout = channelLayout;
    return this;
  }

  public AudioStream addChannelLayoutItem(String channelLayoutItem) {
    if (this.channelLayout == null) {
      this.channelLayout = new ArrayList<>();
    }
    this.channelLayout.add(channelLayoutItem);
    return this;
  }

  /**
   * A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is &#x60;[\&quot;fl\&quot;, \&quot;fr\&quot;]&#x60;. Supported channel names: - &#x60;fl&#x60; - Front left channel - &#x60;fr&#x60; - Front right channel - &#x60;sl&#x60; - Side left channel - &#x60;sr&#x60; - Side right channel - &#x60;fc&#x60; - Front center channel - &#x60;lfe&#x60; - Low frequency
   * @return channelLayout
   */
  @javax.annotation.Nullable
  public List<String> getChannelLayout() {
    return channelLayout;
  }

  public void setChannelLayout(List<String> channelLayout) {
    this.channelLayout = channelLayout;
  }


  public AudioStream codec(String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * The codec for this audio stream. The default is &#x60;aac&#x60;. Supported audio codecs: - &#x60;aac&#x60; - &#x60;aac-he&#x60; - &#x60;aac-he-v2&#x60; - &#x60;mp3&#x60; - &#x60;ac3&#x60; - &#x60;eac3&#x60;
   * @return codec
   */
  @javax.annotation.Nullable
  public String getCodec() {
    return codec;
  }

  public void setCodec(String codec) {
    this.codec = codec;
  }


  public AudioStream displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AudioStream languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The BCP-47 language code, such as &#x60;en-US&#x60; or &#x60;sr-Latn&#x60;. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public AudioStream mapping(List<AudioMapping> mapping) {
    this.mapping = mapping;
    return this;
  }

  public AudioStream addMappingItem(AudioMapping mappingItem) {
    if (this.mapping == null) {
      this.mapping = new ArrayList<>();
    }
    this.mapping.add(mappingItem);
    return this;
  }

  /**
   * The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
   * @return mapping
   */
  @javax.annotation.Nullable
  public List<AudioMapping> getMapping() {
    return mapping;
  }

  public void setMapping(List<AudioMapping> mapping) {
    this.mapping = mapping;
  }


  public AudioStream sampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
    return this;
  }

  /**
   * The audio sample rate in Hertz. The default is 48000 Hertz.
   * @return sampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getSampleRateHertz() {
    return sampleRateHertz;
  }

  public void setSampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioStream audioStream = (AudioStream) o;
    return Objects.equals(this.bitrateBps, audioStream.bitrateBps) &&
        Objects.equals(this.channelCount, audioStream.channelCount) &&
        Objects.equals(this.channelLayout, audioStream.channelLayout) &&
        Objects.equals(this.codec, audioStream.codec) &&
        Objects.equals(this.displayName, audioStream.displayName) &&
        Objects.equals(this.languageCode, audioStream.languageCode) &&
        Objects.equals(this.mapping, audioStream.mapping) &&
        Objects.equals(this.sampleRateHertz, audioStream.sampleRateHertz);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrateBps, channelCount, channelLayout, codec, displayName, languageCode, mapping, sampleRateHertz);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioStream {\n");
    sb.append("    bitrateBps: ").append(toIndentedString(bitrateBps)).append("\n");
    sb.append("    channelCount: ").append(toIndentedString(channelCount)).append("\n");
    sb.append("    channelLayout: ").append(toIndentedString(channelLayout)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("    sampleRateHertz: ").append(toIndentedString(sampleRateHertz)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bitrateBps");
    openapiFields.add("channelCount");
    openapiFields.add("channelLayout");
    openapiFields.add("codec");
    openapiFields.add("displayName");
    openapiFields.add("languageCode");
    openapiFields.add("mapping");
    openapiFields.add("sampleRateHertz");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioStream is not found in the empty JSON string", AudioStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("channelLayout") != null && !jsonObj.get("channelLayout").isJsonNull() && !jsonObj.get("channelLayout").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelLayout` to be an array in the JSON string but got `%s`", jsonObj.get("channelLayout").toString()));
      }
      if ((jsonObj.get("codec") != null && !jsonObj.get("codec").isJsonNull()) && !jsonObj.get("codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codec").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if (jsonObj.get("mapping") != null && !jsonObj.get("mapping").isJsonNull()) {
        JsonArray jsonArraymapping = jsonObj.getAsJsonArray("mapping");
        if (jsonArraymapping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mapping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mapping` to be an array in the JSON string but got `%s`", jsonObj.get("mapping").toString()));
          }

          // validate the optional field `mapping` (array)
          for (int i = 0; i < jsonArraymapping.size(); i++) {
            AudioMapping.validateJsonElement(jsonArraymapping.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioStream.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioStream>() {
           @Override
           public void write(JsonWriter out, AudioStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioStream
   * @throws IOException if the JSON string is invalid with respect to AudioStream
   */
  public static AudioStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioStream.class);
  }

  /**
   * Convert an instance of AudioStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

