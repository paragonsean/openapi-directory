/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DashConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Manifest configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Manifest {
  public static final String SERIALIZED_NAME_DASH = "dash";
  @SerializedName(SERIALIZED_NAME_DASH)
  private DashConfig dash;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_MUX_STREAMS = "muxStreams";
  @SerializedName(SERIALIZED_NAME_MUX_STREAMS)
  private List<String> muxStreams = new ArrayList<>();

  /**
   * Required. Type of the manifest.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MANIFEST_TYPE_UNSPECIFIED("MANIFEST_TYPE_UNSPECIFIED"),
    
    HLS("HLS"),
    
    DASH("DASH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Manifest() {
  }

  public Manifest dash(DashConfig dash) {
    this.dash = dash;
    return this;
  }

  /**
   * Get dash
   * @return dash
   */
  @javax.annotation.Nullable
  public DashConfig getDash() {
    return dash;
  }

  public void setDash(DashConfig dash) {
    this.dash = dash;
  }


  public Manifest fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the generated file. The default is &#x60;manifest&#x60; with the extension suffix corresponding to the Manifest.type.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Manifest muxStreams(List<String> muxStreams) {
    this.muxStreams = muxStreams;
    return this;
  }

  public Manifest addMuxStreamsItem(String muxStreamsItem) {
    if (this.muxStreams == null) {
      this.muxStreams = new ArrayList<>();
    }
    this.muxStreams.add(muxStreamsItem);
    return this;
  }

  /**
   * Required. List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is &#x60;HLS&#x60;, a media manifest with name MuxStream.key and &#x60;.m3u8&#x60; extension is generated for each element in this list.
   * @return muxStreams
   */
  @javax.annotation.Nullable
  public List<String> getMuxStreams() {
    return muxStreams;
  }

  public void setMuxStreams(List<String> muxStreams) {
    this.muxStreams = muxStreams;
  }


  public Manifest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Type of the manifest.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Manifest manifest = (Manifest) o;
    return Objects.equals(this.dash, manifest.dash) &&
        Objects.equals(this.fileName, manifest.fileName) &&
        Objects.equals(this.muxStreams, manifest.muxStreams) &&
        Objects.equals(this.type, manifest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dash, fileName, muxStreams, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Manifest {\n");
    sb.append("    dash: ").append(toIndentedString(dash)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    muxStreams: ").append(toIndentedString(muxStreams)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dash");
    openapiFields.add("fileName");
    openapiFields.add("muxStreams");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Manifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Manifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Manifest is not found in the empty JSON string", Manifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Manifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Manifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dash`
      if (jsonObj.get("dash") != null && !jsonObj.get("dash").isJsonNull()) {
        DashConfig.validateJsonElement(jsonObj.get("dash"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("muxStreams") != null && !jsonObj.get("muxStreams").isJsonNull() && !jsonObj.get("muxStreams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muxStreams` to be an array in the JSON string but got `%s`", jsonObj.get("muxStreams").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Manifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Manifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Manifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Manifest.class));

       return (TypeAdapter<T>) new TypeAdapter<Manifest>() {
           @Override
           public void write(JsonWriter out, Manifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Manifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Manifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Manifest
   * @throws IOException if the JSON string is invalid with respect to Manifest
   */
  public static Manifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Manifest.class);
  }

  /**
   * Convert an instance of Manifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

