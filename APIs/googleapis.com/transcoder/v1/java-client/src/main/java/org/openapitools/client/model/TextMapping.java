/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:32.039-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextMapping {
  public static final String SERIALIZED_NAME_ATOM_KEY = "atomKey";
  @SerializedName(SERIALIZED_NAME_ATOM_KEY)
  private String atomKey;

  public static final String SERIALIZED_NAME_INPUT_KEY = "inputKey";
  @SerializedName(SERIALIZED_NAME_INPUT_KEY)
  private String inputKey;

  public static final String SERIALIZED_NAME_INPUT_TRACK = "inputTrack";
  @SerializedName(SERIALIZED_NAME_INPUT_TRACK)
  private Integer inputTrack;

  public TextMapping() {
  }

  public TextMapping atomKey(String atomKey) {
    this.atomKey = atomKey;
    return this;
  }

  /**
   * Required. The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
   * @return atomKey
   */
  @javax.annotation.Nullable
  public String getAtomKey() {
    return atomKey;
  }

  public void setAtomKey(String atomKey) {
    this.atomKey = atomKey;
  }


  public TextMapping inputKey(String inputKey) {
    this.inputKey = inputKey;
    return this;
  }

  /**
   * Required. The Input.key that identifies the input file.
   * @return inputKey
   */
  @javax.annotation.Nullable
  public String getInputKey() {
    return inputKey;
  }

  public void setInputKey(String inputKey) {
    this.inputKey = inputKey;
  }


  public TextMapping inputTrack(Integer inputTrack) {
    this.inputTrack = inputTrack;
    return this;
  }

  /**
   * Required. The zero-based index of the track in the input file.
   * @return inputTrack
   */
  @javax.annotation.Nullable
  public Integer getInputTrack() {
    return inputTrack;
  }

  public void setInputTrack(Integer inputTrack) {
    this.inputTrack = inputTrack;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextMapping textMapping = (TextMapping) o;
    return Objects.equals(this.atomKey, textMapping.atomKey) &&
        Objects.equals(this.inputKey, textMapping.inputKey) &&
        Objects.equals(this.inputTrack, textMapping.inputTrack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atomKey, inputKey, inputTrack);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextMapping {\n");
    sb.append("    atomKey: ").append(toIndentedString(atomKey)).append("\n");
    sb.append("    inputKey: ").append(toIndentedString(inputKey)).append("\n");
    sb.append("    inputTrack: ").append(toIndentedString(inputTrack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atomKey");
    openapiFields.add("inputKey");
    openapiFields.add("inputTrack");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextMapping is not found in the empty JSON string", TextMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("atomKey") != null && !jsonObj.get("atomKey").isJsonNull()) && !jsonObj.get("atomKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atomKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atomKey").toString()));
      }
      if ((jsonObj.get("inputKey") != null && !jsonObj.get("inputKey").isJsonNull()) && !jsonObj.get("inputKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<TextMapping>() {
           @Override
           public void write(JsonWriter out, TextMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextMapping
   * @throws IOException if the JSON string is invalid with respect to TextMapping
   */
  public static TextMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextMapping.class);
  }

  /**
   * Convert an instance of TextMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

