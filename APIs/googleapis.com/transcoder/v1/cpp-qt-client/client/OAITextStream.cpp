/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextStream::OAITextStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextStream::OAITextStream() {
    this->initializeModel();
}

OAITextStream::~OAITextStream() {}

void OAITextStream::initializeModel() {

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;
}

void OAITextStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextStream::fromJsonObject(QJsonObject json) {

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;
}

QString OAITextStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextStream::asJsonObject() const {
    QJsonObject obj;
    if (m_codec_isSet) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_mapping.size() > 0) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    return obj;
}

QString OAITextStream::getCodec() const {
    return m_codec;
}
void OAITextStream::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAITextStream::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAITextStream::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAITextStream::getDisplayName() const {
    return m_display_name;
}
void OAITextStream::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITextStream::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITextStream::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITextStream::getLanguageCode() const {
    return m_language_code;
}
void OAITextStream::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAITextStream::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAITextStream::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList<OAITextMapping> OAITextStream::getMapping() const {
    return m_mapping;
}
void OAITextStream::setMapping(const QList<OAITextMapping> &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAITextStream::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAITextStream::is_mapping_Valid() const{
    return m_mapping_isValid;
}

bool OAITextStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
