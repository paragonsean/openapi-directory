/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoStream::OAIVideoStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoStream::OAIVideoStream() {
    this->initializeModel();
}

OAIVideoStream::~OAIVideoStream() {}

void OAIVideoStream::initializeModel() {

    m_h264_isSet = false;
    m_h264_isValid = false;

    m_h265_isSet = false;
    m_h265_isValid = false;

    m_vp9_isSet = false;
    m_vp9_isValid = false;
}

void OAIVideoStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoStream::fromJsonObject(QJsonObject json) {

    m_h264_isValid = ::OpenAPI::fromJsonValue(m_h264, json[QString("h264")]);
    m_h264_isSet = !json[QString("h264")].isNull() && m_h264_isValid;

    m_h265_isValid = ::OpenAPI::fromJsonValue(m_h265, json[QString("h265")]);
    m_h265_isSet = !json[QString("h265")].isNull() && m_h265_isValid;

    m_vp9_isValid = ::OpenAPI::fromJsonValue(m_vp9, json[QString("vp9")]);
    m_vp9_isSet = !json[QString("vp9")].isNull() && m_vp9_isValid;
}

QString OAIVideoStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoStream::asJsonObject() const {
    QJsonObject obj;
    if (m_h264.isSet()) {
        obj.insert(QString("h264"), ::OpenAPI::toJsonValue(m_h264));
    }
    if (m_h265.isSet()) {
        obj.insert(QString("h265"), ::OpenAPI::toJsonValue(m_h265));
    }
    if (m_vp9.isSet()) {
        obj.insert(QString("vp9"), ::OpenAPI::toJsonValue(m_vp9));
    }
    return obj;
}

OAIH264CodecSettings OAIVideoStream::getH264() const {
    return m_h264;
}
void OAIVideoStream::setH264(const OAIH264CodecSettings &h264) {
    m_h264 = h264;
    m_h264_isSet = true;
}

bool OAIVideoStream::is_h264_Set() const{
    return m_h264_isSet;
}

bool OAIVideoStream::is_h264_Valid() const{
    return m_h264_isValid;
}

OAIH265CodecSettings OAIVideoStream::getH265() const {
    return m_h265;
}
void OAIVideoStream::setH265(const OAIH265CodecSettings &h265) {
    m_h265 = h265;
    m_h265_isSet = true;
}

bool OAIVideoStream::is_h265_Set() const{
    return m_h265_isSet;
}

bool OAIVideoStream::is_h265_Valid() const{
    return m_h265_isValid;
}

OAIVp9CodecSettings OAIVideoStream::getVp9() const {
    return m_vp9;
}
void OAIVideoStream::setVp9(const OAIVp9CodecSettings &vp9) {
    m_vp9 = vp9;
    m_vp9_isSet = true;
}

bool OAIVideoStream::is_vp9_Set() const{
    return m_vp9_isSet;
}

bool OAIVideoStream::is_vp9_Valid() const{
    return m_vp9_isValid;
}

bool OAIVideoStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_h264.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h265.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vp9.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
