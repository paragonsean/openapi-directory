/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioMapping::OAIAudioMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioMapping::OAIAudioMapping() {
    this->initializeModel();
}

OAIAudioMapping::~OAIAudioMapping() {}

void OAIAudioMapping::initializeModel() {

    m_atom_key_isSet = false;
    m_atom_key_isValid = false;

    m_gain_db_isSet = false;
    m_gain_db_isValid = false;

    m_input_channel_isSet = false;
    m_input_channel_isValid = false;

    m_input_key_isSet = false;
    m_input_key_isValid = false;

    m_input_track_isSet = false;
    m_input_track_isValid = false;

    m_output_channel_isSet = false;
    m_output_channel_isValid = false;
}

void OAIAudioMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioMapping::fromJsonObject(QJsonObject json) {

    m_atom_key_isValid = ::OpenAPI::fromJsonValue(m_atom_key, json[QString("atomKey")]);
    m_atom_key_isSet = !json[QString("atomKey")].isNull() && m_atom_key_isValid;

    m_gain_db_isValid = ::OpenAPI::fromJsonValue(m_gain_db, json[QString("gainDb")]);
    m_gain_db_isSet = !json[QString("gainDb")].isNull() && m_gain_db_isValid;

    m_input_channel_isValid = ::OpenAPI::fromJsonValue(m_input_channel, json[QString("inputChannel")]);
    m_input_channel_isSet = !json[QString("inputChannel")].isNull() && m_input_channel_isValid;

    m_input_key_isValid = ::OpenAPI::fromJsonValue(m_input_key, json[QString("inputKey")]);
    m_input_key_isSet = !json[QString("inputKey")].isNull() && m_input_key_isValid;

    m_input_track_isValid = ::OpenAPI::fromJsonValue(m_input_track, json[QString("inputTrack")]);
    m_input_track_isSet = !json[QString("inputTrack")].isNull() && m_input_track_isValid;

    m_output_channel_isValid = ::OpenAPI::fromJsonValue(m_output_channel, json[QString("outputChannel")]);
    m_output_channel_isSet = !json[QString("outputChannel")].isNull() && m_output_channel_isValid;
}

QString OAIAudioMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_atom_key_isSet) {
        obj.insert(QString("atomKey"), ::OpenAPI::toJsonValue(m_atom_key));
    }
    if (m_gain_db_isSet) {
        obj.insert(QString("gainDb"), ::OpenAPI::toJsonValue(m_gain_db));
    }
    if (m_input_channel_isSet) {
        obj.insert(QString("inputChannel"), ::OpenAPI::toJsonValue(m_input_channel));
    }
    if (m_input_key_isSet) {
        obj.insert(QString("inputKey"), ::OpenAPI::toJsonValue(m_input_key));
    }
    if (m_input_track_isSet) {
        obj.insert(QString("inputTrack"), ::OpenAPI::toJsonValue(m_input_track));
    }
    if (m_output_channel_isSet) {
        obj.insert(QString("outputChannel"), ::OpenAPI::toJsonValue(m_output_channel));
    }
    return obj;
}

QString OAIAudioMapping::getAtomKey() const {
    return m_atom_key;
}
void OAIAudioMapping::setAtomKey(const QString &atom_key) {
    m_atom_key = atom_key;
    m_atom_key_isSet = true;
}

bool OAIAudioMapping::is_atom_key_Set() const{
    return m_atom_key_isSet;
}

bool OAIAudioMapping::is_atom_key_Valid() const{
    return m_atom_key_isValid;
}

double OAIAudioMapping::getGainDb() const {
    return m_gain_db;
}
void OAIAudioMapping::setGainDb(const double &gain_db) {
    m_gain_db = gain_db;
    m_gain_db_isSet = true;
}

bool OAIAudioMapping::is_gain_db_Set() const{
    return m_gain_db_isSet;
}

bool OAIAudioMapping::is_gain_db_Valid() const{
    return m_gain_db_isValid;
}

qint32 OAIAudioMapping::getInputChannel() const {
    return m_input_channel;
}
void OAIAudioMapping::setInputChannel(const qint32 &input_channel) {
    m_input_channel = input_channel;
    m_input_channel_isSet = true;
}

bool OAIAudioMapping::is_input_channel_Set() const{
    return m_input_channel_isSet;
}

bool OAIAudioMapping::is_input_channel_Valid() const{
    return m_input_channel_isValid;
}

QString OAIAudioMapping::getInputKey() const {
    return m_input_key;
}
void OAIAudioMapping::setInputKey(const QString &input_key) {
    m_input_key = input_key;
    m_input_key_isSet = true;
}

bool OAIAudioMapping::is_input_key_Set() const{
    return m_input_key_isSet;
}

bool OAIAudioMapping::is_input_key_Valid() const{
    return m_input_key_isValid;
}

qint32 OAIAudioMapping::getInputTrack() const {
    return m_input_track;
}
void OAIAudioMapping::setInputTrack(const qint32 &input_track) {
    m_input_track = input_track;
    m_input_track_isSet = true;
}

bool OAIAudioMapping::is_input_track_Set() const{
    return m_input_track_isSet;
}

bool OAIAudioMapping::is_input_track_Valid() const{
    return m_input_track_isValid;
}

qint32 OAIAudioMapping::getOutputChannel() const {
    return m_output_channel;
}
void OAIAudioMapping::setOutputChannel(const qint32 &output_channel) {
    m_output_channel = output_channel;
    m_output_channel_isSet = true;
}

bool OAIAudioMapping::is_output_channel_Set() const{
    return m_output_channel_isSet;
}

bool OAIAudioMapping::is_output_channel_Valid() const{
    return m_output_channel_isValid;
}

bool OAIAudioMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atom_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_db_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
