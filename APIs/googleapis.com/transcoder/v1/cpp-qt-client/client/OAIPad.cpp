/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPad.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPad::OAIPad(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPad::OAIPad() {
    this->initializeModel();
}

OAIPad::~OAIPad() {}

void OAIPad::initializeModel() {

    m_bottom_pixels_isSet = false;
    m_bottom_pixels_isValid = false;

    m_left_pixels_isSet = false;
    m_left_pixels_isValid = false;

    m_right_pixels_isSet = false;
    m_right_pixels_isValid = false;

    m_top_pixels_isSet = false;
    m_top_pixels_isValid = false;
}

void OAIPad::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPad::fromJsonObject(QJsonObject json) {

    m_bottom_pixels_isValid = ::OpenAPI::fromJsonValue(m_bottom_pixels, json[QString("bottomPixels")]);
    m_bottom_pixels_isSet = !json[QString("bottomPixels")].isNull() && m_bottom_pixels_isValid;

    m_left_pixels_isValid = ::OpenAPI::fromJsonValue(m_left_pixels, json[QString("leftPixels")]);
    m_left_pixels_isSet = !json[QString("leftPixels")].isNull() && m_left_pixels_isValid;

    m_right_pixels_isValid = ::OpenAPI::fromJsonValue(m_right_pixels, json[QString("rightPixels")]);
    m_right_pixels_isSet = !json[QString("rightPixels")].isNull() && m_right_pixels_isValid;

    m_top_pixels_isValid = ::OpenAPI::fromJsonValue(m_top_pixels, json[QString("topPixels")]);
    m_top_pixels_isSet = !json[QString("topPixels")].isNull() && m_top_pixels_isValid;
}

QString OAIPad::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPad::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_pixels_isSet) {
        obj.insert(QString("bottomPixels"), ::OpenAPI::toJsonValue(m_bottom_pixels));
    }
    if (m_left_pixels_isSet) {
        obj.insert(QString("leftPixels"), ::OpenAPI::toJsonValue(m_left_pixels));
    }
    if (m_right_pixels_isSet) {
        obj.insert(QString("rightPixels"), ::OpenAPI::toJsonValue(m_right_pixels));
    }
    if (m_top_pixels_isSet) {
        obj.insert(QString("topPixels"), ::OpenAPI::toJsonValue(m_top_pixels));
    }
    return obj;
}

qint32 OAIPad::getBottomPixels() const {
    return m_bottom_pixels;
}
void OAIPad::setBottomPixels(const qint32 &bottom_pixels) {
    m_bottom_pixels = bottom_pixels;
    m_bottom_pixels_isSet = true;
}

bool OAIPad::is_bottom_pixels_Set() const{
    return m_bottom_pixels_isSet;
}

bool OAIPad::is_bottom_pixels_Valid() const{
    return m_bottom_pixels_isValid;
}

qint32 OAIPad::getLeftPixels() const {
    return m_left_pixels;
}
void OAIPad::setLeftPixels(const qint32 &left_pixels) {
    m_left_pixels = left_pixels;
    m_left_pixels_isSet = true;
}

bool OAIPad::is_left_pixels_Set() const{
    return m_left_pixels_isSet;
}

bool OAIPad::is_left_pixels_Valid() const{
    return m_left_pixels_isValid;
}

qint32 OAIPad::getRightPixels() const {
    return m_right_pixels;
}
void OAIPad::setRightPixels(const qint32 &right_pixels) {
    m_right_pixels = right_pixels;
    m_right_pixels_isSet = true;
}

bool OAIPad::is_right_pixels_Set() const{
    return m_right_pixels_isSet;
}

bool OAIPad::is_right_pixels_Valid() const{
    return m_right_pixels_isValid;
}

qint32 OAIPad::getTopPixels() const {
    return m_top_pixels;
}
void OAIPad::setTopPixels(const qint32 &top_pixels) {
    m_top_pixels = top_pixels;
    m_top_pixels_isSet = true;
}

bool OAIPad::is_top_pixels_Set() const{
    return m_top_pixels_isSet;
}

bool OAIPad::is_top_pixels_Valid() const{
    return m_top_pixels_isValid;
}

bool OAIPad::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPad::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
