/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeinterlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeinterlace::OAIDeinterlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeinterlace::OAIDeinterlace() {
    this->initializeModel();
}

OAIDeinterlace::~OAIDeinterlace() {}

void OAIDeinterlace::initializeModel() {

    m_bwdif_isSet = false;
    m_bwdif_isValid = false;

    m_yadif_isSet = false;
    m_yadif_isValid = false;
}

void OAIDeinterlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeinterlace::fromJsonObject(QJsonObject json) {

    m_bwdif_isValid = ::OpenAPI::fromJsonValue(m_bwdif, json[QString("bwdif")]);
    m_bwdif_isSet = !json[QString("bwdif")].isNull() && m_bwdif_isValid;

    m_yadif_isValid = ::OpenAPI::fromJsonValue(m_yadif, json[QString("yadif")]);
    m_yadif_isSet = !json[QString("yadif")].isNull() && m_yadif_isValid;
}

QString OAIDeinterlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeinterlace::asJsonObject() const {
    QJsonObject obj;
    if (m_bwdif.isSet()) {
        obj.insert(QString("bwdif"), ::OpenAPI::toJsonValue(m_bwdif));
    }
    if (m_yadif.isSet()) {
        obj.insert(QString("yadif"), ::OpenAPI::toJsonValue(m_yadif));
    }
    return obj;
}

OAIBwdifConfig OAIDeinterlace::getBwdif() const {
    return m_bwdif;
}
void OAIDeinterlace::setBwdif(const OAIBwdifConfig &bwdif) {
    m_bwdif = bwdif;
    m_bwdif_isSet = true;
}

bool OAIDeinterlace::is_bwdif_Set() const{
    return m_bwdif_isSet;
}

bool OAIDeinterlace::is_bwdif_Valid() const{
    return m_bwdif_isValid;
}

OAIYadifConfig OAIDeinterlace::getYadif() const {
    return m_yadif;
}
void OAIDeinterlace::setYadif(const OAIYadifConfig &yadif) {
    m_yadif = yadif;
    m_yadif_isSet = true;
}

bool OAIDeinterlace::is_yadif_Set() const{
    return m_yadif_isSet;
}

bool OAIDeinterlace::is_yadif_Valid() const{
    return m_yadif_isValid;
}

bool OAIDeinterlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bwdif.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yadif.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeinterlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
