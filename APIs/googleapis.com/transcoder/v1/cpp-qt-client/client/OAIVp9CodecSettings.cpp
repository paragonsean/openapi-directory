/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVp9CodecSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVp9CodecSettings::OAIVp9CodecSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVp9CodecSettings::OAIVp9CodecSettings() {
    this->initializeModel();
}

OAIVp9CodecSettings::~OAIVp9CodecSettings() {}

void OAIVp9CodecSettings::initializeModel() {

    m_bitrate_bps_isSet = false;
    m_bitrate_bps_isValid = false;

    m_crf_level_isSet = false;
    m_crf_level_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_frame_rate_conversion_strategy_isSet = false;
    m_frame_rate_conversion_strategy_isValid = false;

    m_gop_duration_isSet = false;
    m_gop_duration_isValid = false;

    m_gop_frame_count_isSet = false;
    m_gop_frame_count_isValid = false;

    m_height_pixels_isSet = false;
    m_height_pixels_isValid = false;

    m_hlg_isSet = false;
    m_hlg_isValid = false;

    m_pixel_format_isSet = false;
    m_pixel_format_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_rate_control_mode_isSet = false;
    m_rate_control_mode_isValid = false;

    m_sdr_isSet = false;
    m_sdr_isValid = false;

    m_width_pixels_isSet = false;
    m_width_pixels_isValid = false;
}

void OAIVp9CodecSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVp9CodecSettings::fromJsonObject(QJsonObject json) {

    m_bitrate_bps_isValid = ::OpenAPI::fromJsonValue(m_bitrate_bps, json[QString("bitrateBps")]);
    m_bitrate_bps_isSet = !json[QString("bitrateBps")].isNull() && m_bitrate_bps_isValid;

    m_crf_level_isValid = ::OpenAPI::fromJsonValue(m_crf_level, json[QString("crfLevel")]);
    m_crf_level_isSet = !json[QString("crfLevel")].isNull() && m_crf_level_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_frame_rate_conversion_strategy_isValid = ::OpenAPI::fromJsonValue(m_frame_rate_conversion_strategy, json[QString("frameRateConversionStrategy")]);
    m_frame_rate_conversion_strategy_isSet = !json[QString("frameRateConversionStrategy")].isNull() && m_frame_rate_conversion_strategy_isValid;

    m_gop_duration_isValid = ::OpenAPI::fromJsonValue(m_gop_duration, json[QString("gopDuration")]);
    m_gop_duration_isSet = !json[QString("gopDuration")].isNull() && m_gop_duration_isValid;

    m_gop_frame_count_isValid = ::OpenAPI::fromJsonValue(m_gop_frame_count, json[QString("gopFrameCount")]);
    m_gop_frame_count_isSet = !json[QString("gopFrameCount")].isNull() && m_gop_frame_count_isValid;

    m_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_height_pixels, json[QString("heightPixels")]);
    m_height_pixels_isSet = !json[QString("heightPixels")].isNull() && m_height_pixels_isValid;

    m_hlg_isValid = ::OpenAPI::fromJsonValue(m_hlg, json[QString("hlg")]);
    m_hlg_isSet = !json[QString("hlg")].isNull() && m_hlg_isValid;

    m_pixel_format_isValid = ::OpenAPI::fromJsonValue(m_pixel_format, json[QString("pixelFormat")]);
    m_pixel_format_isSet = !json[QString("pixelFormat")].isNull() && m_pixel_format_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_rate_control_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_control_mode, json[QString("rateControlMode")]);
    m_rate_control_mode_isSet = !json[QString("rateControlMode")].isNull() && m_rate_control_mode_isValid;

    m_sdr_isValid = ::OpenAPI::fromJsonValue(m_sdr, json[QString("sdr")]);
    m_sdr_isSet = !json[QString("sdr")].isNull() && m_sdr_isValid;

    m_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_width_pixels, json[QString("widthPixels")]);
    m_width_pixels_isSet = !json[QString("widthPixels")].isNull() && m_width_pixels_isValid;
}

QString OAIVp9CodecSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVp9CodecSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_bps_isSet) {
        obj.insert(QString("bitrateBps"), ::OpenAPI::toJsonValue(m_bitrate_bps));
    }
    if (m_crf_level_isSet) {
        obj.insert(QString("crfLevel"), ::OpenAPI::toJsonValue(m_crf_level));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_frame_rate_conversion_strategy_isSet) {
        obj.insert(QString("frameRateConversionStrategy"), ::OpenAPI::toJsonValue(m_frame_rate_conversion_strategy));
    }
    if (m_gop_duration_isSet) {
        obj.insert(QString("gopDuration"), ::OpenAPI::toJsonValue(m_gop_duration));
    }
    if (m_gop_frame_count_isSet) {
        obj.insert(QString("gopFrameCount"), ::OpenAPI::toJsonValue(m_gop_frame_count));
    }
    if (m_height_pixels_isSet) {
        obj.insert(QString("heightPixels"), ::OpenAPI::toJsonValue(m_height_pixels));
    }
    if (m_hlg_isSet) {
        obj.insert(QString("hlg"), ::OpenAPI::toJsonValue(m_hlg));
    }
    if (m_pixel_format_isSet) {
        obj.insert(QString("pixelFormat"), ::OpenAPI::toJsonValue(m_pixel_format));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_rate_control_mode_isSet) {
        obj.insert(QString("rateControlMode"), ::OpenAPI::toJsonValue(m_rate_control_mode));
    }
    if (m_sdr_isSet) {
        obj.insert(QString("sdr"), ::OpenAPI::toJsonValue(m_sdr));
    }
    if (m_width_pixels_isSet) {
        obj.insert(QString("widthPixels"), ::OpenAPI::toJsonValue(m_width_pixels));
    }
    return obj;
}

qint32 OAIVp9CodecSettings::getBitrateBps() const {
    return m_bitrate_bps;
}
void OAIVp9CodecSettings::setBitrateBps(const qint32 &bitrate_bps) {
    m_bitrate_bps = bitrate_bps;
    m_bitrate_bps_isSet = true;
}

bool OAIVp9CodecSettings::is_bitrate_bps_Set() const{
    return m_bitrate_bps_isSet;
}

bool OAIVp9CodecSettings::is_bitrate_bps_Valid() const{
    return m_bitrate_bps_isValid;
}

qint32 OAIVp9CodecSettings::getCrfLevel() const {
    return m_crf_level;
}
void OAIVp9CodecSettings::setCrfLevel(const qint32 &crf_level) {
    m_crf_level = crf_level;
    m_crf_level_isSet = true;
}

bool OAIVp9CodecSettings::is_crf_level_Set() const{
    return m_crf_level_isSet;
}

bool OAIVp9CodecSettings::is_crf_level_Valid() const{
    return m_crf_level_isValid;
}

double OAIVp9CodecSettings::getFrameRate() const {
    return m_frame_rate;
}
void OAIVp9CodecSettings::setFrameRate(const double &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAIVp9CodecSettings::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAIVp9CodecSettings::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

QString OAIVp9CodecSettings::getFrameRateConversionStrategy() const {
    return m_frame_rate_conversion_strategy;
}
void OAIVp9CodecSettings::setFrameRateConversionStrategy(const QString &frame_rate_conversion_strategy) {
    m_frame_rate_conversion_strategy = frame_rate_conversion_strategy;
    m_frame_rate_conversion_strategy_isSet = true;
}

bool OAIVp9CodecSettings::is_frame_rate_conversion_strategy_Set() const{
    return m_frame_rate_conversion_strategy_isSet;
}

bool OAIVp9CodecSettings::is_frame_rate_conversion_strategy_Valid() const{
    return m_frame_rate_conversion_strategy_isValid;
}

QString OAIVp9CodecSettings::getGopDuration() const {
    return m_gop_duration;
}
void OAIVp9CodecSettings::setGopDuration(const QString &gop_duration) {
    m_gop_duration = gop_duration;
    m_gop_duration_isSet = true;
}

bool OAIVp9CodecSettings::is_gop_duration_Set() const{
    return m_gop_duration_isSet;
}

bool OAIVp9CodecSettings::is_gop_duration_Valid() const{
    return m_gop_duration_isValid;
}

qint32 OAIVp9CodecSettings::getGopFrameCount() const {
    return m_gop_frame_count;
}
void OAIVp9CodecSettings::setGopFrameCount(const qint32 &gop_frame_count) {
    m_gop_frame_count = gop_frame_count;
    m_gop_frame_count_isSet = true;
}

bool OAIVp9CodecSettings::is_gop_frame_count_Set() const{
    return m_gop_frame_count_isSet;
}

bool OAIVp9CodecSettings::is_gop_frame_count_Valid() const{
    return m_gop_frame_count_isValid;
}

qint32 OAIVp9CodecSettings::getHeightPixels() const {
    return m_height_pixels;
}
void OAIVp9CodecSettings::setHeightPixels(const qint32 &height_pixels) {
    m_height_pixels = height_pixels;
    m_height_pixels_isSet = true;
}

bool OAIVp9CodecSettings::is_height_pixels_Set() const{
    return m_height_pixels_isSet;
}

bool OAIVp9CodecSettings::is_height_pixels_Valid() const{
    return m_height_pixels_isValid;
}

OAIObject OAIVp9CodecSettings::getHlg() const {
    return m_hlg;
}
void OAIVp9CodecSettings::setHlg(const OAIObject &hlg) {
    m_hlg = hlg;
    m_hlg_isSet = true;
}

bool OAIVp9CodecSettings::is_hlg_Set() const{
    return m_hlg_isSet;
}

bool OAIVp9CodecSettings::is_hlg_Valid() const{
    return m_hlg_isValid;
}

QString OAIVp9CodecSettings::getPixelFormat() const {
    return m_pixel_format;
}
void OAIVp9CodecSettings::setPixelFormat(const QString &pixel_format) {
    m_pixel_format = pixel_format;
    m_pixel_format_isSet = true;
}

bool OAIVp9CodecSettings::is_pixel_format_Set() const{
    return m_pixel_format_isSet;
}

bool OAIVp9CodecSettings::is_pixel_format_Valid() const{
    return m_pixel_format_isValid;
}

QString OAIVp9CodecSettings::getProfile() const {
    return m_profile;
}
void OAIVp9CodecSettings::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIVp9CodecSettings::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIVp9CodecSettings::is_profile_Valid() const{
    return m_profile_isValid;
}

QString OAIVp9CodecSettings::getRateControlMode() const {
    return m_rate_control_mode;
}
void OAIVp9CodecSettings::setRateControlMode(const QString &rate_control_mode) {
    m_rate_control_mode = rate_control_mode;
    m_rate_control_mode_isSet = true;
}

bool OAIVp9CodecSettings::is_rate_control_mode_Set() const{
    return m_rate_control_mode_isSet;
}

bool OAIVp9CodecSettings::is_rate_control_mode_Valid() const{
    return m_rate_control_mode_isValid;
}

OAIObject OAIVp9CodecSettings::getSdr() const {
    return m_sdr;
}
void OAIVp9CodecSettings::setSdr(const OAIObject &sdr) {
    m_sdr = sdr;
    m_sdr_isSet = true;
}

bool OAIVp9CodecSettings::is_sdr_Set() const{
    return m_sdr_isSet;
}

bool OAIVp9CodecSettings::is_sdr_Valid() const{
    return m_sdr_isValid;
}

qint32 OAIVp9CodecSettings::getWidthPixels() const {
    return m_width_pixels;
}
void OAIVp9CodecSettings::setWidthPixels(const qint32 &width_pixels) {
    m_width_pixels = width_pixels;
    m_width_pixels_isSet = true;
}

bool OAIVp9CodecSettings::is_width_pixels_Set() const{
    return m_width_pixels_isSet;
}

bool OAIVp9CodecSettings::is_width_pixels_Valid() const{
    return m_width_pixels_isValid;
}

bool OAIVp9CodecSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_bps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crf_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_conversion_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_frame_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hlg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_control_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVp9CodecSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
