/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_alpha_isSet = false;
    m_alpha_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_alpha_isValid = ::OpenAPI::fromJsonValue(m_alpha, json[QString("alpha")]);
    m_alpha_isSet = !json[QString("alpha")].isNull() && m_alpha_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_alpha_isSet) {
        obj.insert(QString("alpha"), ::OpenAPI::toJsonValue(m_alpha));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

double OAIImage::getAlpha() const {
    return m_alpha;
}
void OAIImage::setAlpha(const double &alpha) {
    m_alpha = alpha;
    m_alpha_isSet = true;
}

bool OAIImage::is_alpha_Set() const{
    return m_alpha_isSet;
}

bool OAIImage::is_alpha_Valid() const{
    return m_alpha_isValid;
}

OAINormalizedCoordinate OAIImage::getResolution() const {
    return m_resolution;
}
void OAIImage::setResolution(const OAINormalizedCoordinate &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIImage::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIImage::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIImage::getUri() const {
    return m_uri;
}
void OAIImage::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIImage::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIImage::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
