/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_batch_mode_priority_isSet = false;
    m_batch_mode_priority_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_input_uri_isSet = false;
    m_input_uri_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optimization_isSet = false;
    m_optimization_isValid = false;

    m_output_uri_isSet = false;
    m_output_uri_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_ttl_after_completion_days_isSet = false;
    m_ttl_after_completion_days_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_batch_mode_priority_isValid = ::OpenAPI::fromJsonValue(m_batch_mode_priority, json[QString("batchModePriority")]);
    m_batch_mode_priority_isSet = !json[QString("batchModePriority")].isNull() && m_batch_mode_priority_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_input_uri_isValid = ::OpenAPI::fromJsonValue(m_input_uri, json[QString("inputUri")]);
    m_input_uri_isSet = !json[QString("inputUri")].isNull() && m_input_uri_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optimization_isValid = ::OpenAPI::fromJsonValue(m_optimization, json[QString("optimization")]);
    m_optimization_isSet = !json[QString("optimization")].isNull() && m_optimization_isValid;

    m_output_uri_isValid = ::OpenAPI::fromJsonValue(m_output_uri, json[QString("outputUri")]);
    m_output_uri_isSet = !json[QString("outputUri")].isNull() && m_output_uri_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("templateId")]);
    m_template_id_isSet = !json[QString("templateId")].isNull() && m_template_id_isValid;

    m_ttl_after_completion_days_isValid = ::OpenAPI::fromJsonValue(m_ttl_after_completion_days, json[QString("ttlAfterCompletionDays")]);
    m_ttl_after_completion_days_isSet = !json[QString("ttlAfterCompletionDays")].isNull() && m_ttl_after_completion_days_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_mode_priority_isSet) {
        obj.insert(QString("batchModePriority"), ::OpenAPI::toJsonValue(m_batch_mode_priority));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_input_uri_isSet) {
        obj.insert(QString("inputUri"), ::OpenAPI::toJsonValue(m_input_uri));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optimization_isSet) {
        obj.insert(QString("optimization"), ::OpenAPI::toJsonValue(m_optimization));
    }
    if (m_output_uri_isSet) {
        obj.insert(QString("outputUri"), ::OpenAPI::toJsonValue(m_output_uri));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("templateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_ttl_after_completion_days_isSet) {
        obj.insert(QString("ttlAfterCompletionDays"), ::OpenAPI::toJsonValue(m_ttl_after_completion_days));
    }
    return obj;
}

qint32 OAIJob::getBatchModePriority() const {
    return m_batch_mode_priority;
}
void OAIJob::setBatchModePriority(const qint32 &batch_mode_priority) {
    m_batch_mode_priority = batch_mode_priority;
    m_batch_mode_priority_isSet = true;
}

bool OAIJob::is_batch_mode_priority_Set() const{
    return m_batch_mode_priority_isSet;
}

bool OAIJob::is_batch_mode_priority_Valid() const{
    return m_batch_mode_priority_isValid;
}

OAIJobConfig OAIJob::getConfig() const {
    return m_config;
}
void OAIJob::setConfig(const OAIJobConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIJob::is_config_Set() const{
    return m_config_isSet;
}

bool OAIJob::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIJob::getCreateTime() const {
    return m_create_time;
}
void OAIJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIJob::getEndTime() const {
    return m_end_time;
}
void OAIJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStatus OAIJob::getError() const {
    return m_error;
}
void OAIJob::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIJob::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIJob::getInputUri() const {
    return m_input_uri;
}
void OAIJob::setInputUri(const QString &input_uri) {
    m_input_uri = input_uri;
    m_input_uri_isSet = true;
}

bool OAIJob::is_input_uri_Set() const{
    return m_input_uri_isSet;
}

bool OAIJob::is_input_uri_Valid() const{
    return m_input_uri_isValid;
}

QMap<QString, QString> OAIJob::getLabels() const {
    return m_labels;
}
void OAIJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIJob::getMode() const {
    return m_mode;
}
void OAIJob::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIJob::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIJob::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJob::getOptimization() const {
    return m_optimization;
}
void OAIJob::setOptimization(const QString &optimization) {
    m_optimization = optimization;
    m_optimization_isSet = true;
}

bool OAIJob::is_optimization_Set() const{
    return m_optimization_isSet;
}

bool OAIJob::is_optimization_Valid() const{
    return m_optimization_isValid;
}

QString OAIJob::getOutputUri() const {
    return m_output_uri;
}
void OAIJob::setOutputUri(const QString &output_uri) {
    m_output_uri = output_uri;
    m_output_uri_isSet = true;
}

bool OAIJob::is_output_uri_Set() const{
    return m_output_uri_isSet;
}

bool OAIJob::is_output_uri_Valid() const{
    return m_output_uri_isValid;
}

QString OAIJob::getStartTime() const {
    return m_start_time;
}
void OAIJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJob::getState() const {
    return m_state;
}
void OAIJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJob::getTemplateId() const {
    return m_template_id;
}
void OAIJob::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIJob::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIJob::is_template_id_Valid() const{
    return m_template_id_isValid;
}

qint32 OAIJob::getTtlAfterCompletionDays() const {
    return m_ttl_after_completion_days;
}
void OAIJob::setTtlAfterCompletionDays(const qint32 &ttl_after_completion_days) {
    m_ttl_after_completion_days = ttl_after_completion_days;
    m_ttl_after_completion_days_isSet = true;
}

bool OAIJob::is_ttl_after_completion_days_Set() const{
    return m_ttl_after_completion_days_isSet;
}

bool OAIJob::is_ttl_after_completion_days_Valid() const{
    return m_ttl_after_completion_days_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_mode_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_after_completion_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
