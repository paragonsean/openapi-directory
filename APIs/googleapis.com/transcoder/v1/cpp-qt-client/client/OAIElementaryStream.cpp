/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementaryStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElementaryStream::OAIElementaryStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElementaryStream::OAIElementaryStream() {
    this->initializeModel();
}

OAIElementaryStream::~OAIElementaryStream() {}

void OAIElementaryStream::initializeModel() {

    m_audio_stream_isSet = false;
    m_audio_stream_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_text_stream_isSet = false;
    m_text_stream_isValid = false;

    m_video_stream_isSet = false;
    m_video_stream_isValid = false;
}

void OAIElementaryStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElementaryStream::fromJsonObject(QJsonObject json) {

    m_audio_stream_isValid = ::OpenAPI::fromJsonValue(m_audio_stream, json[QString("audioStream")]);
    m_audio_stream_isSet = !json[QString("audioStream")].isNull() && m_audio_stream_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_text_stream_isValid = ::OpenAPI::fromJsonValue(m_text_stream, json[QString("textStream")]);
    m_text_stream_isSet = !json[QString("textStream")].isNull() && m_text_stream_isValid;

    m_video_stream_isValid = ::OpenAPI::fromJsonValue(m_video_stream, json[QString("videoStream")]);
    m_video_stream_isSet = !json[QString("videoStream")].isNull() && m_video_stream_isValid;
}

QString OAIElementaryStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElementaryStream::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_stream.isSet()) {
        obj.insert(QString("audioStream"), ::OpenAPI::toJsonValue(m_audio_stream));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_text_stream.isSet()) {
        obj.insert(QString("textStream"), ::OpenAPI::toJsonValue(m_text_stream));
    }
    if (m_video_stream.isSet()) {
        obj.insert(QString("videoStream"), ::OpenAPI::toJsonValue(m_video_stream));
    }
    return obj;
}

OAIAudioStream OAIElementaryStream::getAudioStream() const {
    return m_audio_stream;
}
void OAIElementaryStream::setAudioStream(const OAIAudioStream &audio_stream) {
    m_audio_stream = audio_stream;
    m_audio_stream_isSet = true;
}

bool OAIElementaryStream::is_audio_stream_Set() const{
    return m_audio_stream_isSet;
}

bool OAIElementaryStream::is_audio_stream_Valid() const{
    return m_audio_stream_isValid;
}

QString OAIElementaryStream::getKey() const {
    return m_key;
}
void OAIElementaryStream::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIElementaryStream::is_key_Set() const{
    return m_key_isSet;
}

bool OAIElementaryStream::is_key_Valid() const{
    return m_key_isValid;
}

OAITextStream OAIElementaryStream::getTextStream() const {
    return m_text_stream;
}
void OAIElementaryStream::setTextStream(const OAITextStream &text_stream) {
    m_text_stream = text_stream;
    m_text_stream_isSet = true;
}

bool OAIElementaryStream::is_text_stream_Set() const{
    return m_text_stream_isSet;
}

bool OAIElementaryStream::is_text_stream_Valid() const{
    return m_text_stream_isValid;
}

OAIVideoStream OAIElementaryStream::getVideoStream() const {
    return m_video_stream;
}
void OAIElementaryStream::setVideoStream(const OAIVideoStream &video_stream) {
    m_video_stream = video_stream;
    m_video_stream_isSet = true;
}

bool OAIElementaryStream::is_video_stream_Set() const{
    return m_video_stream_isSet;
}

bool OAIElementaryStream::is_video_stream_Valid() const{
    return m_video_stream_isValid;
}

bool OAIElementaryStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElementaryStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
