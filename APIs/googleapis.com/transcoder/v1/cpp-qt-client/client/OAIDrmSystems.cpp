/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrmSystems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrmSystems::OAIDrmSystems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrmSystems::OAIDrmSystems() {
    this->initializeModel();
}

OAIDrmSystems::~OAIDrmSystems() {}

void OAIDrmSystems::initializeModel() {

    m_clearkey_isSet = false;
    m_clearkey_isValid = false;

    m_fairplay_isSet = false;
    m_fairplay_isValid = false;

    m_playready_isSet = false;
    m_playready_isValid = false;

    m_widevine_isSet = false;
    m_widevine_isValid = false;
}

void OAIDrmSystems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrmSystems::fromJsonObject(QJsonObject json) {

    m_clearkey_isValid = ::OpenAPI::fromJsonValue(m_clearkey, json[QString("clearkey")]);
    m_clearkey_isSet = !json[QString("clearkey")].isNull() && m_clearkey_isValid;

    m_fairplay_isValid = ::OpenAPI::fromJsonValue(m_fairplay, json[QString("fairplay")]);
    m_fairplay_isSet = !json[QString("fairplay")].isNull() && m_fairplay_isValid;

    m_playready_isValid = ::OpenAPI::fromJsonValue(m_playready, json[QString("playready")]);
    m_playready_isSet = !json[QString("playready")].isNull() && m_playready_isValid;

    m_widevine_isValid = ::OpenAPI::fromJsonValue(m_widevine, json[QString("widevine")]);
    m_widevine_isSet = !json[QString("widevine")].isNull() && m_widevine_isValid;
}

QString OAIDrmSystems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrmSystems::asJsonObject() const {
    QJsonObject obj;
    if (m_clearkey_isSet) {
        obj.insert(QString("clearkey"), ::OpenAPI::toJsonValue(m_clearkey));
    }
    if (m_fairplay_isSet) {
        obj.insert(QString("fairplay"), ::OpenAPI::toJsonValue(m_fairplay));
    }
    if (m_playready_isSet) {
        obj.insert(QString("playready"), ::OpenAPI::toJsonValue(m_playready));
    }
    if (m_widevine_isSet) {
        obj.insert(QString("widevine"), ::OpenAPI::toJsonValue(m_widevine));
    }
    return obj;
}

OAIObject OAIDrmSystems::getClearkey() const {
    return m_clearkey;
}
void OAIDrmSystems::setClearkey(const OAIObject &clearkey) {
    m_clearkey = clearkey;
    m_clearkey_isSet = true;
}

bool OAIDrmSystems::is_clearkey_Set() const{
    return m_clearkey_isSet;
}

bool OAIDrmSystems::is_clearkey_Valid() const{
    return m_clearkey_isValid;
}

OAIObject OAIDrmSystems::getFairplay() const {
    return m_fairplay;
}
void OAIDrmSystems::setFairplay(const OAIObject &fairplay) {
    m_fairplay = fairplay;
    m_fairplay_isSet = true;
}

bool OAIDrmSystems::is_fairplay_Set() const{
    return m_fairplay_isSet;
}

bool OAIDrmSystems::is_fairplay_Valid() const{
    return m_fairplay_isValid;
}

OAIObject OAIDrmSystems::getPlayready() const {
    return m_playready;
}
void OAIDrmSystems::setPlayready(const OAIObject &playready) {
    m_playready = playready;
    m_playready_isSet = true;
}

bool OAIDrmSystems::is_playready_Set() const{
    return m_playready_isSet;
}

bool OAIDrmSystems::is_playready_Valid() const{
    return m_playready_isValid;
}

OAIObject OAIDrmSystems::getWidevine() const {
    return m_widevine;
}
void OAIDrmSystems::setWidevine(const OAIObject &widevine) {
    m_widevine = widevine;
    m_widevine_isSet = true;
}

bool OAIDrmSystems::is_widevine_Set() const{
    return m_widevine_isSet;
}

bool OAIDrmSystems::is_widevine_Valid() const{
    return m_widevine_isValid;
}

bool OAIDrmSystems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clearkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fairplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_widevine_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrmSystems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
