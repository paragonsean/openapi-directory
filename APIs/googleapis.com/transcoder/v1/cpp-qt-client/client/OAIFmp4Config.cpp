/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFmp4Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFmp4Config::OAIFmp4Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFmp4Config::OAIFmp4Config() {
    this->initializeModel();
}

OAIFmp4Config::~OAIFmp4Config() {}

void OAIFmp4Config::initializeModel() {

    m_codec_tag_isSet = false;
    m_codec_tag_isValid = false;
}

void OAIFmp4Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFmp4Config::fromJsonObject(QJsonObject json) {

    m_codec_tag_isValid = ::OpenAPI::fromJsonValue(m_codec_tag, json[QString("codecTag")]);
    m_codec_tag_isSet = !json[QString("codecTag")].isNull() && m_codec_tag_isValid;
}

QString OAIFmp4Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFmp4Config::asJsonObject() const {
    QJsonObject obj;
    if (m_codec_tag_isSet) {
        obj.insert(QString("codecTag"), ::OpenAPI::toJsonValue(m_codec_tag));
    }
    return obj;
}

QString OAIFmp4Config::getCodecTag() const {
    return m_codec_tag;
}
void OAIFmp4Config::setCodecTag(const QString &codec_tag) {
    m_codec_tag = codec_tag;
    m_codec_tag_isSet = true;
}

bool OAIFmp4Config::is_codec_tag_Set() const{
    return m_codec_tag_isSet;
}

bool OAIFmp4Config::is_codec_tag_Valid() const{
    return m_codec_tag_isValid;
}

bool OAIFmp4Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFmp4Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
