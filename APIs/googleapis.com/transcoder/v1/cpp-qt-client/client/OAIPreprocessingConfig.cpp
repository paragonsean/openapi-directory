/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreprocessingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreprocessingConfig::OAIPreprocessingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreprocessingConfig::OAIPreprocessingConfig() {
    this->initializeModel();
}

OAIPreprocessingConfig::~OAIPreprocessingConfig() {}

void OAIPreprocessingConfig::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_deblock_isSet = false;
    m_deblock_isValid = false;

    m_deinterlace_isSet = false;
    m_deinterlace_isValid = false;

    m_denoise_isSet = false;
    m_denoise_isValid = false;

    m_pad_isSet = false;
    m_pad_isValid = false;
}

void OAIPreprocessingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreprocessingConfig::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_deblock_isValid = ::OpenAPI::fromJsonValue(m_deblock, json[QString("deblock")]);
    m_deblock_isSet = !json[QString("deblock")].isNull() && m_deblock_isValid;

    m_deinterlace_isValid = ::OpenAPI::fromJsonValue(m_deinterlace, json[QString("deinterlace")]);
    m_deinterlace_isSet = !json[QString("deinterlace")].isNull() && m_deinterlace_isValid;

    m_denoise_isValid = ::OpenAPI::fromJsonValue(m_denoise, json[QString("denoise")]);
    m_denoise_isSet = !json[QString("denoise")].isNull() && m_denoise_isValid;

    m_pad_isValid = ::OpenAPI::fromJsonValue(m_pad, json[QString("pad")]);
    m_pad_isSet = !json[QString("pad")].isNull() && m_pad_isValid;
}

QString OAIPreprocessingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreprocessingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_crop.isSet()) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_deblock.isSet()) {
        obj.insert(QString("deblock"), ::OpenAPI::toJsonValue(m_deblock));
    }
    if (m_deinterlace.isSet()) {
        obj.insert(QString("deinterlace"), ::OpenAPI::toJsonValue(m_deinterlace));
    }
    if (m_denoise.isSet()) {
        obj.insert(QString("denoise"), ::OpenAPI::toJsonValue(m_denoise));
    }
    if (m_pad.isSet()) {
        obj.insert(QString("pad"), ::OpenAPI::toJsonValue(m_pad));
    }
    return obj;
}

OAIAudio OAIPreprocessingConfig::getAudio() const {
    return m_audio;
}
void OAIPreprocessingConfig::setAudio(const OAIAudio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIPreprocessingConfig::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIPreprocessingConfig::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIColor OAIPreprocessingConfig::getColor() const {
    return m_color;
}
void OAIPreprocessingConfig::setColor(const OAIColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPreprocessingConfig::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPreprocessingConfig::is_color_Valid() const{
    return m_color_isValid;
}

OAICrop OAIPreprocessingConfig::getCrop() const {
    return m_crop;
}
void OAIPreprocessingConfig::setCrop(const OAICrop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIPreprocessingConfig::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIPreprocessingConfig::is_crop_Valid() const{
    return m_crop_isValid;
}

OAIDeblock OAIPreprocessingConfig::getDeblock() const {
    return m_deblock;
}
void OAIPreprocessingConfig::setDeblock(const OAIDeblock &deblock) {
    m_deblock = deblock;
    m_deblock_isSet = true;
}

bool OAIPreprocessingConfig::is_deblock_Set() const{
    return m_deblock_isSet;
}

bool OAIPreprocessingConfig::is_deblock_Valid() const{
    return m_deblock_isValid;
}

OAIDeinterlace OAIPreprocessingConfig::getDeinterlace() const {
    return m_deinterlace;
}
void OAIPreprocessingConfig::setDeinterlace(const OAIDeinterlace &deinterlace) {
    m_deinterlace = deinterlace;
    m_deinterlace_isSet = true;
}

bool OAIPreprocessingConfig::is_deinterlace_Set() const{
    return m_deinterlace_isSet;
}

bool OAIPreprocessingConfig::is_deinterlace_Valid() const{
    return m_deinterlace_isValid;
}

OAIDenoise OAIPreprocessingConfig::getDenoise() const {
    return m_denoise;
}
void OAIPreprocessingConfig::setDenoise(const OAIDenoise &denoise) {
    m_denoise = denoise;
    m_denoise_isSet = true;
}

bool OAIPreprocessingConfig::is_denoise_Set() const{
    return m_denoise_isSet;
}

bool OAIPreprocessingConfig::is_denoise_Valid() const{
    return m_denoise_isValid;
}

OAIPad OAIPreprocessingConfig::getPad() const {
    return m_pad;
}
void OAIPreprocessingConfig::setPad(const OAIPad &pad) {
    m_pad = pad;
    m_pad_isSet = true;
}

bool OAIPreprocessingConfig::is_pad_Set() const{
    return m_pad_isSet;
}

bool OAIPreprocessingConfig::is_pad_Valid() const{
    return m_pad_isValid;
}

bool OAIPreprocessingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deblock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deinterlace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_denoise.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pad.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreprocessingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
