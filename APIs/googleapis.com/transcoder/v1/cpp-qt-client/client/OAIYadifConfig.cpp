/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYadifConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYadifConfig::OAIYadifConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYadifConfig::OAIYadifConfig() {
    this->initializeModel();
}

OAIYadifConfig::~OAIYadifConfig() {}

void OAIYadifConfig::initializeModel() {

    m_deinterlace_all_frames_isSet = false;
    m_deinterlace_all_frames_isValid = false;

    m_disable_spatial_interlacing_isSet = false;
    m_disable_spatial_interlacing_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_parity_isSet = false;
    m_parity_isValid = false;
}

void OAIYadifConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYadifConfig::fromJsonObject(QJsonObject json) {

    m_deinterlace_all_frames_isValid = ::OpenAPI::fromJsonValue(m_deinterlace_all_frames, json[QString("deinterlaceAllFrames")]);
    m_deinterlace_all_frames_isSet = !json[QString("deinterlaceAllFrames")].isNull() && m_deinterlace_all_frames_isValid;

    m_disable_spatial_interlacing_isValid = ::OpenAPI::fromJsonValue(m_disable_spatial_interlacing, json[QString("disableSpatialInterlacing")]);
    m_disable_spatial_interlacing_isSet = !json[QString("disableSpatialInterlacing")].isNull() && m_disable_spatial_interlacing_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_parity_isValid = ::OpenAPI::fromJsonValue(m_parity, json[QString("parity")]);
    m_parity_isSet = !json[QString("parity")].isNull() && m_parity_isValid;
}

QString OAIYadifConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYadifConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_deinterlace_all_frames_isSet) {
        obj.insert(QString("deinterlaceAllFrames"), ::OpenAPI::toJsonValue(m_deinterlace_all_frames));
    }
    if (m_disable_spatial_interlacing_isSet) {
        obj.insert(QString("disableSpatialInterlacing"), ::OpenAPI::toJsonValue(m_disable_spatial_interlacing));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_parity_isSet) {
        obj.insert(QString("parity"), ::OpenAPI::toJsonValue(m_parity));
    }
    return obj;
}

bool OAIYadifConfig::isDeinterlaceAllFrames() const {
    return m_deinterlace_all_frames;
}
void OAIYadifConfig::setDeinterlaceAllFrames(const bool &deinterlace_all_frames) {
    m_deinterlace_all_frames = deinterlace_all_frames;
    m_deinterlace_all_frames_isSet = true;
}

bool OAIYadifConfig::is_deinterlace_all_frames_Set() const{
    return m_deinterlace_all_frames_isSet;
}

bool OAIYadifConfig::is_deinterlace_all_frames_Valid() const{
    return m_deinterlace_all_frames_isValid;
}

bool OAIYadifConfig::isDisableSpatialInterlacing() const {
    return m_disable_spatial_interlacing;
}
void OAIYadifConfig::setDisableSpatialInterlacing(const bool &disable_spatial_interlacing) {
    m_disable_spatial_interlacing = disable_spatial_interlacing;
    m_disable_spatial_interlacing_isSet = true;
}

bool OAIYadifConfig::is_disable_spatial_interlacing_Set() const{
    return m_disable_spatial_interlacing_isSet;
}

bool OAIYadifConfig::is_disable_spatial_interlacing_Valid() const{
    return m_disable_spatial_interlacing_isValid;
}

QString OAIYadifConfig::getMode() const {
    return m_mode;
}
void OAIYadifConfig::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIYadifConfig::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIYadifConfig::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIYadifConfig::getParity() const {
    return m_parity;
}
void OAIYadifConfig::setParity(const QString &parity) {
    m_parity = parity;
    m_parity_isSet = true;
}

bool OAIYadifConfig::is_parity_Set() const{
    return m_parity_isSet;
}

bool OAIYadifConfig::is_parity_Valid() const{
    return m_parity_isValid;
}

bool OAIYadifConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deinterlace_all_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_spatial_interlacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYadifConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
