/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVp9CodecSettings.h
 *
 * VP9 codec settings.
 */

#ifndef OAIVp9CodecSettings_H
#define OAIVp9CodecSettings_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVp9CodecSettings : public OAIObject {
public:
    OAIVp9CodecSettings();
    OAIVp9CodecSettings(QString json);
    ~OAIVp9CodecSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBitrateBps() const;
    void setBitrateBps(const qint32 &bitrate_bps);
    bool is_bitrate_bps_Set() const;
    bool is_bitrate_bps_Valid() const;

    qint32 getCrfLevel() const;
    void setCrfLevel(const qint32 &crf_level);
    bool is_crf_level_Set() const;
    bool is_crf_level_Valid() const;

    double getFrameRate() const;
    void setFrameRate(const double &frame_rate);
    bool is_frame_rate_Set() const;
    bool is_frame_rate_Valid() const;

    QString getFrameRateConversionStrategy() const;
    void setFrameRateConversionStrategy(const QString &frame_rate_conversion_strategy);
    bool is_frame_rate_conversion_strategy_Set() const;
    bool is_frame_rate_conversion_strategy_Valid() const;

    QString getGopDuration() const;
    void setGopDuration(const QString &gop_duration);
    bool is_gop_duration_Set() const;
    bool is_gop_duration_Valid() const;

    qint32 getGopFrameCount() const;
    void setGopFrameCount(const qint32 &gop_frame_count);
    bool is_gop_frame_count_Set() const;
    bool is_gop_frame_count_Valid() const;

    qint32 getHeightPixels() const;
    void setHeightPixels(const qint32 &height_pixels);
    bool is_height_pixels_Set() const;
    bool is_height_pixels_Valid() const;

    OAIObject getHlg() const;
    void setHlg(const OAIObject &hlg);
    bool is_hlg_Set() const;
    bool is_hlg_Valid() const;

    QString getPixelFormat() const;
    void setPixelFormat(const QString &pixel_format);
    bool is_pixel_format_Set() const;
    bool is_pixel_format_Valid() const;

    QString getProfile() const;
    void setProfile(const QString &profile);
    bool is_profile_Set() const;
    bool is_profile_Valid() const;

    QString getRateControlMode() const;
    void setRateControlMode(const QString &rate_control_mode);
    bool is_rate_control_mode_Set() const;
    bool is_rate_control_mode_Valid() const;

    OAIObject getSdr() const;
    void setSdr(const OAIObject &sdr);
    bool is_sdr_Set() const;
    bool is_sdr_Valid() const;

    qint32 getWidthPixels() const;
    void setWidthPixels(const qint32 &width_pixels);
    bool is_width_pixels_Set() const;
    bool is_width_pixels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bitrate_bps;
    bool m_bitrate_bps_isSet;
    bool m_bitrate_bps_isValid;

    qint32 m_crf_level;
    bool m_crf_level_isSet;
    bool m_crf_level_isValid;

    double m_frame_rate;
    bool m_frame_rate_isSet;
    bool m_frame_rate_isValid;

    QString m_frame_rate_conversion_strategy;
    bool m_frame_rate_conversion_strategy_isSet;
    bool m_frame_rate_conversion_strategy_isValid;

    QString m_gop_duration;
    bool m_gop_duration_isSet;
    bool m_gop_duration_isValid;

    qint32 m_gop_frame_count;
    bool m_gop_frame_count_isSet;
    bool m_gop_frame_count_isValid;

    qint32 m_height_pixels;
    bool m_height_pixels_isSet;
    bool m_height_pixels_isValid;

    OAIObject m_hlg;
    bool m_hlg_isSet;
    bool m_hlg_isValid;

    QString m_pixel_format;
    bool m_pixel_format_isSet;
    bool m_pixel_format_isValid;

    QString m_profile;
    bool m_profile_isSet;
    bool m_profile_isValid;

    QString m_rate_control_mode;
    bool m_rate_control_mode_isSet;
    bool m_rate_control_mode_isValid;

    OAIObject m_sdr;
    bool m_sdr_isSet;
    bool m_sdr_isValid;

    qint32 m_width_pixels;
    bool m_width_pixels_isSet;
    bool m_width_pixels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVp9CodecSettings)

#endif // OAIVp9CodecSettings_H
