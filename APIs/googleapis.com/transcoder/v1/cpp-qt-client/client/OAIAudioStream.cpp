/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioStream::OAIAudioStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioStream::OAIAudioStream() {
    this->initializeModel();
}

OAIAudioStream::~OAIAudioStream() {}

void OAIAudioStream::initializeModel() {

    m_bitrate_bps_isSet = false;
    m_bitrate_bps_isValid = false;

    m_channel_count_isSet = false;
    m_channel_count_isValid = false;

    m_channel_layout_isSet = false;
    m_channel_layout_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;
}

void OAIAudioStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioStream::fromJsonObject(QJsonObject json) {

    m_bitrate_bps_isValid = ::OpenAPI::fromJsonValue(m_bitrate_bps, json[QString("bitrateBps")]);
    m_bitrate_bps_isSet = !json[QString("bitrateBps")].isNull() && m_bitrate_bps_isValid;

    m_channel_count_isValid = ::OpenAPI::fromJsonValue(m_channel_count, json[QString("channelCount")]);
    m_channel_count_isSet = !json[QString("channelCount")].isNull() && m_channel_count_isValid;

    m_channel_layout_isValid = ::OpenAPI::fromJsonValue(m_channel_layout, json[QString("channelLayout")]);
    m_channel_layout_isSet = !json[QString("channelLayout")].isNull() && m_channel_layout_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;

    m_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_sample_rate_hertz, json[QString("sampleRateHertz")]);
    m_sample_rate_hertz_isSet = !json[QString("sampleRateHertz")].isNull() && m_sample_rate_hertz_isValid;
}

QString OAIAudioStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioStream::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_bps_isSet) {
        obj.insert(QString("bitrateBps"), ::OpenAPI::toJsonValue(m_bitrate_bps));
    }
    if (m_channel_count_isSet) {
        obj.insert(QString("channelCount"), ::OpenAPI::toJsonValue(m_channel_count));
    }
    if (m_channel_layout.size() > 0) {
        obj.insert(QString("channelLayout"), ::OpenAPI::toJsonValue(m_channel_layout));
    }
    if (m_codec_isSet) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_mapping.size() > 0) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_sample_rate_hertz_isSet) {
        obj.insert(QString("sampleRateHertz"), ::OpenAPI::toJsonValue(m_sample_rate_hertz));
    }
    return obj;
}

qint32 OAIAudioStream::getBitrateBps() const {
    return m_bitrate_bps;
}
void OAIAudioStream::setBitrateBps(const qint32 &bitrate_bps) {
    m_bitrate_bps = bitrate_bps;
    m_bitrate_bps_isSet = true;
}

bool OAIAudioStream::is_bitrate_bps_Set() const{
    return m_bitrate_bps_isSet;
}

bool OAIAudioStream::is_bitrate_bps_Valid() const{
    return m_bitrate_bps_isValid;
}

qint32 OAIAudioStream::getChannelCount() const {
    return m_channel_count;
}
void OAIAudioStream::setChannelCount(const qint32 &channel_count) {
    m_channel_count = channel_count;
    m_channel_count_isSet = true;
}

bool OAIAudioStream::is_channel_count_Set() const{
    return m_channel_count_isSet;
}

bool OAIAudioStream::is_channel_count_Valid() const{
    return m_channel_count_isValid;
}

QList<QString> OAIAudioStream::getChannelLayout() const {
    return m_channel_layout;
}
void OAIAudioStream::setChannelLayout(const QList<QString> &channel_layout) {
    m_channel_layout = channel_layout;
    m_channel_layout_isSet = true;
}

bool OAIAudioStream::is_channel_layout_Set() const{
    return m_channel_layout_isSet;
}

bool OAIAudioStream::is_channel_layout_Valid() const{
    return m_channel_layout_isValid;
}

QString OAIAudioStream::getCodec() const {
    return m_codec;
}
void OAIAudioStream::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIAudioStream::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIAudioStream::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAIAudioStream::getDisplayName() const {
    return m_display_name;
}
void OAIAudioStream::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAudioStream::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAudioStream::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAudioStream::getLanguageCode() const {
    return m_language_code;
}
void OAIAudioStream::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIAudioStream::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIAudioStream::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList<OAIAudioMapping> OAIAudioStream::getMapping() const {
    return m_mapping;
}
void OAIAudioStream::setMapping(const QList<OAIAudioMapping> &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIAudioStream::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIAudioStream::is_mapping_Valid() const{
    return m_mapping_isValid;
}

qint32 OAIAudioStream::getSampleRateHertz() const {
    return m_sample_rate_hertz;
}
void OAIAudioStream::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    m_sample_rate_hertz = sample_rate_hertz;
    m_sample_rate_hertz_isSet = true;
}

bool OAIAudioStream::is_sample_rate_hertz_Set() const{
    return m_sample_rate_hertz_isSet;
}

bool OAIAudioStream::is_sample_rate_hertz_Valid() const{
    return m_sample_rate_hertz_isValid;
}

bool OAIAudioStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_bps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_layout.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
