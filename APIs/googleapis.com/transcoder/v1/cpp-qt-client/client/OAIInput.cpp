/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput::OAIInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput::OAIInput() {
    this->initializeModel();
}

OAIInput::~OAIInput() {}

void OAIInput::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_preprocessing_config_isSet = false;
    m_preprocessing_config_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_preprocessing_config_isValid = ::OpenAPI::fromJsonValue(m_preprocessing_config, json[QString("preprocessingConfig")]);
    m_preprocessing_config_isSet = !json[QString("preprocessingConfig")].isNull() && m_preprocessing_config_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_preprocessing_config.isSet()) {
        obj.insert(QString("preprocessingConfig"), ::OpenAPI::toJsonValue(m_preprocessing_config));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIInput::getKey() const {
    return m_key;
}
void OAIInput::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIInput::is_key_Set() const{
    return m_key_isSet;
}

bool OAIInput::is_key_Valid() const{
    return m_key_isValid;
}

OAIPreprocessingConfig OAIInput::getPreprocessingConfig() const {
    return m_preprocessing_config;
}
void OAIInput::setPreprocessingConfig(const OAIPreprocessingConfig &preprocessing_config) {
    m_preprocessing_config = preprocessing_config;
    m_preprocessing_config_isSet = true;
}

bool OAIInput::is_preprocessing_config_Set() const{
    return m_preprocessing_config_isSet;
}

bool OAIInput::is_preprocessing_config_Valid() const{
    return m_preprocessing_config_isValid;
}

QString OAIInput::getUri() const {
    return m_uri;
}
void OAIInput::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIInput::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIInput::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprocessing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
