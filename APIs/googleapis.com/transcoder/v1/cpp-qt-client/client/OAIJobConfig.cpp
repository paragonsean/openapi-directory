/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobConfig::OAIJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobConfig::OAIJobConfig() {
    this->initializeModel();
}

OAIJobConfig::~OAIJobConfig() {}

void OAIJobConfig::initializeModel() {

    m_ad_breaks_isSet = false;
    m_ad_breaks_isValid = false;

    m_edit_list_isSet = false;
    m_edit_list_isValid = false;

    m_elementary_streams_isSet = false;
    m_elementary_streams_isValid = false;

    m_encryptions_isSet = false;
    m_encryptions_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_manifests_isSet = false;
    m_manifests_isValid = false;

    m_mux_streams_isSet = false;
    m_mux_streams_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_overlays_isSet = false;
    m_overlays_isValid = false;

    m_pubsub_destination_isSet = false;
    m_pubsub_destination_isValid = false;

    m_sprite_sheets_isSet = false;
    m_sprite_sheets_isValid = false;
}

void OAIJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobConfig::fromJsonObject(QJsonObject json) {

    m_ad_breaks_isValid = ::OpenAPI::fromJsonValue(m_ad_breaks, json[QString("adBreaks")]);
    m_ad_breaks_isSet = !json[QString("adBreaks")].isNull() && m_ad_breaks_isValid;

    m_edit_list_isValid = ::OpenAPI::fromJsonValue(m_edit_list, json[QString("editList")]);
    m_edit_list_isSet = !json[QString("editList")].isNull() && m_edit_list_isValid;

    m_elementary_streams_isValid = ::OpenAPI::fromJsonValue(m_elementary_streams, json[QString("elementaryStreams")]);
    m_elementary_streams_isSet = !json[QString("elementaryStreams")].isNull() && m_elementary_streams_isValid;

    m_encryptions_isValid = ::OpenAPI::fromJsonValue(m_encryptions, json[QString("encryptions")]);
    m_encryptions_isSet = !json[QString("encryptions")].isNull() && m_encryptions_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_manifests_isValid = ::OpenAPI::fromJsonValue(m_manifests, json[QString("manifests")]);
    m_manifests_isSet = !json[QString("manifests")].isNull() && m_manifests_isValid;

    m_mux_streams_isValid = ::OpenAPI::fromJsonValue(m_mux_streams, json[QString("muxStreams")]);
    m_mux_streams_isSet = !json[QString("muxStreams")].isNull() && m_mux_streams_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_overlays_isValid = ::OpenAPI::fromJsonValue(m_overlays, json[QString("overlays")]);
    m_overlays_isSet = !json[QString("overlays")].isNull() && m_overlays_isValid;

    m_pubsub_destination_isValid = ::OpenAPI::fromJsonValue(m_pubsub_destination, json[QString("pubsubDestination")]);
    m_pubsub_destination_isSet = !json[QString("pubsubDestination")].isNull() && m_pubsub_destination_isValid;

    m_sprite_sheets_isValid = ::OpenAPI::fromJsonValue(m_sprite_sheets, json[QString("spriteSheets")]);
    m_sprite_sheets_isSet = !json[QString("spriteSheets")].isNull() && m_sprite_sheets_isValid;
}

QString OAIJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_breaks.size() > 0) {
        obj.insert(QString("adBreaks"), ::OpenAPI::toJsonValue(m_ad_breaks));
    }
    if (m_edit_list.size() > 0) {
        obj.insert(QString("editList"), ::OpenAPI::toJsonValue(m_edit_list));
    }
    if (m_elementary_streams.size() > 0) {
        obj.insert(QString("elementaryStreams"), ::OpenAPI::toJsonValue(m_elementary_streams));
    }
    if (m_encryptions.size() > 0) {
        obj.insert(QString("encryptions"), ::OpenAPI::toJsonValue(m_encryptions));
    }
    if (m_inputs.size() > 0) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_manifests.size() > 0) {
        obj.insert(QString("manifests"), ::OpenAPI::toJsonValue(m_manifests));
    }
    if (m_mux_streams.size() > 0) {
        obj.insert(QString("muxStreams"), ::OpenAPI::toJsonValue(m_mux_streams));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_overlays.size() > 0) {
        obj.insert(QString("overlays"), ::OpenAPI::toJsonValue(m_overlays));
    }
    if (m_pubsub_destination.isSet()) {
        obj.insert(QString("pubsubDestination"), ::OpenAPI::toJsonValue(m_pubsub_destination));
    }
    if (m_sprite_sheets.size() > 0) {
        obj.insert(QString("spriteSheets"), ::OpenAPI::toJsonValue(m_sprite_sheets));
    }
    return obj;
}

QList<OAIAdBreak> OAIJobConfig::getAdBreaks() const {
    return m_ad_breaks;
}
void OAIJobConfig::setAdBreaks(const QList<OAIAdBreak> &ad_breaks) {
    m_ad_breaks = ad_breaks;
    m_ad_breaks_isSet = true;
}

bool OAIJobConfig::is_ad_breaks_Set() const{
    return m_ad_breaks_isSet;
}

bool OAIJobConfig::is_ad_breaks_Valid() const{
    return m_ad_breaks_isValid;
}

QList<OAIEditAtom> OAIJobConfig::getEditList() const {
    return m_edit_list;
}
void OAIJobConfig::setEditList(const QList<OAIEditAtom> &edit_list) {
    m_edit_list = edit_list;
    m_edit_list_isSet = true;
}

bool OAIJobConfig::is_edit_list_Set() const{
    return m_edit_list_isSet;
}

bool OAIJobConfig::is_edit_list_Valid() const{
    return m_edit_list_isValid;
}

QList<OAIElementaryStream> OAIJobConfig::getElementaryStreams() const {
    return m_elementary_streams;
}
void OAIJobConfig::setElementaryStreams(const QList<OAIElementaryStream> &elementary_streams) {
    m_elementary_streams = elementary_streams;
    m_elementary_streams_isSet = true;
}

bool OAIJobConfig::is_elementary_streams_Set() const{
    return m_elementary_streams_isSet;
}

bool OAIJobConfig::is_elementary_streams_Valid() const{
    return m_elementary_streams_isValid;
}

QList<OAIEncryption> OAIJobConfig::getEncryptions() const {
    return m_encryptions;
}
void OAIJobConfig::setEncryptions(const QList<OAIEncryption> &encryptions) {
    m_encryptions = encryptions;
    m_encryptions_isSet = true;
}

bool OAIJobConfig::is_encryptions_Set() const{
    return m_encryptions_isSet;
}

bool OAIJobConfig::is_encryptions_Valid() const{
    return m_encryptions_isValid;
}

QList<OAIInput> OAIJobConfig::getInputs() const {
    return m_inputs;
}
void OAIJobConfig::setInputs(const QList<OAIInput> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIJobConfig::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIJobConfig::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList<OAIManifest> OAIJobConfig::getManifests() const {
    return m_manifests;
}
void OAIJobConfig::setManifests(const QList<OAIManifest> &manifests) {
    m_manifests = manifests;
    m_manifests_isSet = true;
}

bool OAIJobConfig::is_manifests_Set() const{
    return m_manifests_isSet;
}

bool OAIJobConfig::is_manifests_Valid() const{
    return m_manifests_isValid;
}

QList<OAIMuxStream> OAIJobConfig::getMuxStreams() const {
    return m_mux_streams;
}
void OAIJobConfig::setMuxStreams(const QList<OAIMuxStream> &mux_streams) {
    m_mux_streams = mux_streams;
    m_mux_streams_isSet = true;
}

bool OAIJobConfig::is_mux_streams_Set() const{
    return m_mux_streams_isSet;
}

bool OAIJobConfig::is_mux_streams_Valid() const{
    return m_mux_streams_isValid;
}

OAIOutput OAIJobConfig::getOutput() const {
    return m_output;
}
void OAIJobConfig::setOutput(const OAIOutput &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIJobConfig::is_output_Set() const{
    return m_output_isSet;
}

bool OAIJobConfig::is_output_Valid() const{
    return m_output_isValid;
}

QList<OAIOverlay> OAIJobConfig::getOverlays() const {
    return m_overlays;
}
void OAIJobConfig::setOverlays(const QList<OAIOverlay> &overlays) {
    m_overlays = overlays;
    m_overlays_isSet = true;
}

bool OAIJobConfig::is_overlays_Set() const{
    return m_overlays_isSet;
}

bool OAIJobConfig::is_overlays_Valid() const{
    return m_overlays_isValid;
}

OAIPubsubDestination OAIJobConfig::getPubsubDestination() const {
    return m_pubsub_destination;
}
void OAIJobConfig::setPubsubDestination(const OAIPubsubDestination &pubsub_destination) {
    m_pubsub_destination = pubsub_destination;
    m_pubsub_destination_isSet = true;
}

bool OAIJobConfig::is_pubsub_destination_Set() const{
    return m_pubsub_destination_isSet;
}

bool OAIJobConfig::is_pubsub_destination_Valid() const{
    return m_pubsub_destination_isValid;
}

QList<OAISpriteSheet> OAIJobConfig::getSpriteSheets() const {
    return m_sprite_sheets;
}
void OAIJobConfig::setSpriteSheets(const QList<OAISpriteSheet> &sprite_sheets) {
    m_sprite_sheets = sprite_sheets;
    m_sprite_sheets_isSet = true;
}

bool OAIJobConfig::is_sprite_sheets_Set() const{
    return m_sprite_sheets_isSet;
}

bool OAIJobConfig::is_sprite_sheets_Valid() const{
    return m_sprite_sheets_isValid;
}

bool OAIJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_breaks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elementary_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sprite_sheets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
