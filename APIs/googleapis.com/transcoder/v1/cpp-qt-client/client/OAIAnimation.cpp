/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnimation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnimation::OAIAnimation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnimation::OAIAnimation() {
    this->initializeModel();
}

OAIAnimation::~OAIAnimation() {}

void OAIAnimation::initializeModel() {

    m_animation_end_isSet = false;
    m_animation_end_isValid = false;

    m_animation_fade_isSet = false;
    m_animation_fade_isValid = false;

    m_animation_static_isSet = false;
    m_animation_static_isValid = false;
}

void OAIAnimation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnimation::fromJsonObject(QJsonObject json) {

    m_animation_end_isValid = ::OpenAPI::fromJsonValue(m_animation_end, json[QString("animationEnd")]);
    m_animation_end_isSet = !json[QString("animationEnd")].isNull() && m_animation_end_isValid;

    m_animation_fade_isValid = ::OpenAPI::fromJsonValue(m_animation_fade, json[QString("animationFade")]);
    m_animation_fade_isSet = !json[QString("animationFade")].isNull() && m_animation_fade_isValid;

    m_animation_static_isValid = ::OpenAPI::fromJsonValue(m_animation_static, json[QString("animationStatic")]);
    m_animation_static_isSet = !json[QString("animationStatic")].isNull() && m_animation_static_isValid;
}

QString OAIAnimation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnimation::asJsonObject() const {
    QJsonObject obj;
    if (m_animation_end.isSet()) {
        obj.insert(QString("animationEnd"), ::OpenAPI::toJsonValue(m_animation_end));
    }
    if (m_animation_fade.isSet()) {
        obj.insert(QString("animationFade"), ::OpenAPI::toJsonValue(m_animation_fade));
    }
    if (m_animation_static.isSet()) {
        obj.insert(QString("animationStatic"), ::OpenAPI::toJsonValue(m_animation_static));
    }
    return obj;
}

OAIAnimationEnd OAIAnimation::getAnimationEnd() const {
    return m_animation_end;
}
void OAIAnimation::setAnimationEnd(const OAIAnimationEnd &animation_end) {
    m_animation_end = animation_end;
    m_animation_end_isSet = true;
}

bool OAIAnimation::is_animation_end_Set() const{
    return m_animation_end_isSet;
}

bool OAIAnimation::is_animation_end_Valid() const{
    return m_animation_end_isValid;
}

OAIAnimationFade OAIAnimation::getAnimationFade() const {
    return m_animation_fade;
}
void OAIAnimation::setAnimationFade(const OAIAnimationFade &animation_fade) {
    m_animation_fade = animation_fade;
    m_animation_fade_isSet = true;
}

bool OAIAnimation::is_animation_fade_Set() const{
    return m_animation_fade_isSet;
}

bool OAIAnimation::is_animation_fade_Valid() const{
    return m_animation_fade_isValid;
}

OAIAnimationStatic OAIAnimation::getAnimationStatic() const {
    return m_animation_static;
}
void OAIAnimation::setAnimationStatic(const OAIAnimationStatic &animation_static) {
    m_animation_static = animation_static;
    m_animation_static_isSet = true;
}

bool OAIAnimation::is_animation_static_Set() const{
    return m_animation_static_isSet;
}

bool OAIAnimation::is_animation_static_Valid() const{
    return m_animation_static_isValid;
}

bool OAIAnimation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_animation_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_animation_fade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_animation_static.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnimation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
