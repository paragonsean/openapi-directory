/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpriteSheet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpriteSheet::OAISpriteSheet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpriteSheet::OAISpriteSheet() {
    this->initializeModel();
}

OAISpriteSheet::~OAISpriteSheet() {}

void OAISpriteSheet::initializeModel() {

    m_column_count_isSet = false;
    m_column_count_isValid = false;

    m_end_time_offset_isSet = false;
    m_end_time_offset_isValid = false;

    m_file_prefix_isSet = false;
    m_file_prefix_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_sprite_height_pixels_isSet = false;
    m_sprite_height_pixels_isValid = false;

    m_sprite_width_pixels_isSet = false;
    m_sprite_width_pixels_isValid = false;

    m_start_time_offset_isSet = false;
    m_start_time_offset_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAISpriteSheet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpriteSheet::fromJsonObject(QJsonObject json) {

    m_column_count_isValid = ::OpenAPI::fromJsonValue(m_column_count, json[QString("columnCount")]);
    m_column_count_isSet = !json[QString("columnCount")].isNull() && m_column_count_isValid;

    m_end_time_offset_isValid = ::OpenAPI::fromJsonValue(m_end_time_offset, json[QString("endTimeOffset")]);
    m_end_time_offset_isSet = !json[QString("endTimeOffset")].isNull() && m_end_time_offset_isValid;

    m_file_prefix_isValid = ::OpenAPI::fromJsonValue(m_file_prefix, json[QString("filePrefix")]);
    m_file_prefix_isSet = !json[QString("filePrefix")].isNull() && m_file_prefix_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_sprite_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_sprite_height_pixels, json[QString("spriteHeightPixels")]);
    m_sprite_height_pixels_isSet = !json[QString("spriteHeightPixels")].isNull() && m_sprite_height_pixels_isValid;

    m_sprite_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_sprite_width_pixels, json[QString("spriteWidthPixels")]);
    m_sprite_width_pixels_isSet = !json[QString("spriteWidthPixels")].isNull() && m_sprite_width_pixels_isValid;

    m_start_time_offset_isValid = ::OpenAPI::fromJsonValue(m_start_time_offset, json[QString("startTimeOffset")]);
    m_start_time_offset_isSet = !json[QString("startTimeOffset")].isNull() && m_start_time_offset_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAISpriteSheet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpriteSheet::asJsonObject() const {
    QJsonObject obj;
    if (m_column_count_isSet) {
        obj.insert(QString("columnCount"), ::OpenAPI::toJsonValue(m_column_count));
    }
    if (m_end_time_offset_isSet) {
        obj.insert(QString("endTimeOffset"), ::OpenAPI::toJsonValue(m_end_time_offset));
    }
    if (m_file_prefix_isSet) {
        obj.insert(QString("filePrefix"), ::OpenAPI::toJsonValue(m_file_prefix));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_sprite_height_pixels_isSet) {
        obj.insert(QString("spriteHeightPixels"), ::OpenAPI::toJsonValue(m_sprite_height_pixels));
    }
    if (m_sprite_width_pixels_isSet) {
        obj.insert(QString("spriteWidthPixels"), ::OpenAPI::toJsonValue(m_sprite_width_pixels));
    }
    if (m_start_time_offset_isSet) {
        obj.insert(QString("startTimeOffset"), ::OpenAPI::toJsonValue(m_start_time_offset));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAISpriteSheet::getColumnCount() const {
    return m_column_count;
}
void OAISpriteSheet::setColumnCount(const qint32 &column_count) {
    m_column_count = column_count;
    m_column_count_isSet = true;
}

bool OAISpriteSheet::is_column_count_Set() const{
    return m_column_count_isSet;
}

bool OAISpriteSheet::is_column_count_Valid() const{
    return m_column_count_isValid;
}

QString OAISpriteSheet::getEndTimeOffset() const {
    return m_end_time_offset;
}
void OAISpriteSheet::setEndTimeOffset(const QString &end_time_offset) {
    m_end_time_offset = end_time_offset;
    m_end_time_offset_isSet = true;
}

bool OAISpriteSheet::is_end_time_offset_Set() const{
    return m_end_time_offset_isSet;
}

bool OAISpriteSheet::is_end_time_offset_Valid() const{
    return m_end_time_offset_isValid;
}

QString OAISpriteSheet::getFilePrefix() const {
    return m_file_prefix;
}
void OAISpriteSheet::setFilePrefix(const QString &file_prefix) {
    m_file_prefix = file_prefix;
    m_file_prefix_isSet = true;
}

bool OAISpriteSheet::is_file_prefix_Set() const{
    return m_file_prefix_isSet;
}

bool OAISpriteSheet::is_file_prefix_Valid() const{
    return m_file_prefix_isValid;
}

QString OAISpriteSheet::getFormat() const {
    return m_format;
}
void OAISpriteSheet::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISpriteSheet::is_format_Set() const{
    return m_format_isSet;
}

bool OAISpriteSheet::is_format_Valid() const{
    return m_format_isValid;
}

QString OAISpriteSheet::getInterval() const {
    return m_interval;
}
void OAISpriteSheet::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISpriteSheet::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISpriteSheet::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAISpriteSheet::getQuality() const {
    return m_quality;
}
void OAISpriteSheet::setQuality(const qint32 &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAISpriteSheet::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAISpriteSheet::is_quality_Valid() const{
    return m_quality_isValid;
}

qint32 OAISpriteSheet::getRowCount() const {
    return m_row_count;
}
void OAISpriteSheet::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAISpriteSheet::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAISpriteSheet::is_row_count_Valid() const{
    return m_row_count_isValid;
}

qint32 OAISpriteSheet::getSpriteHeightPixels() const {
    return m_sprite_height_pixels;
}
void OAISpriteSheet::setSpriteHeightPixels(const qint32 &sprite_height_pixels) {
    m_sprite_height_pixels = sprite_height_pixels;
    m_sprite_height_pixels_isSet = true;
}

bool OAISpriteSheet::is_sprite_height_pixels_Set() const{
    return m_sprite_height_pixels_isSet;
}

bool OAISpriteSheet::is_sprite_height_pixels_Valid() const{
    return m_sprite_height_pixels_isValid;
}

qint32 OAISpriteSheet::getSpriteWidthPixels() const {
    return m_sprite_width_pixels;
}
void OAISpriteSheet::setSpriteWidthPixels(const qint32 &sprite_width_pixels) {
    m_sprite_width_pixels = sprite_width_pixels;
    m_sprite_width_pixels_isSet = true;
}

bool OAISpriteSheet::is_sprite_width_pixels_Set() const{
    return m_sprite_width_pixels_isSet;
}

bool OAISpriteSheet::is_sprite_width_pixels_Valid() const{
    return m_sprite_width_pixels_isValid;
}

QString OAISpriteSheet::getStartTimeOffset() const {
    return m_start_time_offset;
}
void OAISpriteSheet::setStartTimeOffset(const QString &start_time_offset) {
    m_start_time_offset = start_time_offset;
    m_start_time_offset_isSet = true;
}

bool OAISpriteSheet::is_start_time_offset_Set() const{
    return m_start_time_offset_isSet;
}

bool OAISpriteSheet::is_start_time_offset_Valid() const{
    return m_start_time_offset_isValid;
}

qint32 OAISpriteSheet::getTotalCount() const {
    return m_total_count;
}
void OAISpriteSheet::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAISpriteSheet::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAISpriteSheet::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAISpriteSheet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sprite_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sprite_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpriteSheet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
