# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_break import AdBreak
from openapi_server.models.edit_atom import EditAtom
from openapi_server.models.elementary_stream import ElementaryStream
from openapi_server.models.encryption import Encryption
from openapi_server.models.input import Input
from openapi_server.models.manifest import Manifest
from openapi_server.models.mux_stream import MuxStream
from openapi_server.models.output import Output
from openapi_server.models.overlay import Overlay
from openapi_server.models.pubsub_destination import PubsubDestination
from openapi_server.models.sprite_sheet import SpriteSheet
from openapi_server import util


class JobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_breaks: List[AdBreak]=None, edit_list: List[EditAtom]=None, elementary_streams: List[ElementaryStream]=None, encryptions: List[Encryption]=None, inputs: List[Input]=None, manifests: List[Manifest]=None, mux_streams: List[MuxStream]=None, output: Output=None, overlays: List[Overlay]=None, pubsub_destination: PubsubDestination=None, sprite_sheets: List[SpriteSheet]=None):
        """JobConfig - a model defined in OpenAPI

        :param ad_breaks: The ad_breaks of this JobConfig.
        :param edit_list: The edit_list of this JobConfig.
        :param elementary_streams: The elementary_streams of this JobConfig.
        :param encryptions: The encryptions of this JobConfig.
        :param inputs: The inputs of this JobConfig.
        :param manifests: The manifests of this JobConfig.
        :param mux_streams: The mux_streams of this JobConfig.
        :param output: The output of this JobConfig.
        :param overlays: The overlays of this JobConfig.
        :param pubsub_destination: The pubsub_destination of this JobConfig.
        :param sprite_sheets: The sprite_sheets of this JobConfig.
        """
        self.openapi_types = {
            'ad_breaks': List[AdBreak],
            'edit_list': List[EditAtom],
            'elementary_streams': List[ElementaryStream],
            'encryptions': List[Encryption],
            'inputs': List[Input],
            'manifests': List[Manifest],
            'mux_streams': List[MuxStream],
            'output': Output,
            'overlays': List[Overlay],
            'pubsub_destination': PubsubDestination,
            'sprite_sheets': List[SpriteSheet]
        }

        self.attribute_map = {
            'ad_breaks': 'adBreaks',
            'edit_list': 'editList',
            'elementary_streams': 'elementaryStreams',
            'encryptions': 'encryptions',
            'inputs': 'inputs',
            'manifests': 'manifests',
            'mux_streams': 'muxStreams',
            'output': 'output',
            'overlays': 'overlays',
            'pubsub_destination': 'pubsubDestination',
            'sprite_sheets': 'spriteSheets'
        }

        self._ad_breaks = ad_breaks
        self._edit_list = edit_list
        self._elementary_streams = elementary_streams
        self._encryptions = encryptions
        self._inputs = inputs
        self._manifests = manifests
        self._mux_streams = mux_streams
        self._output = output
        self._overlays = overlays
        self._pubsub_destination = pubsub_destination
        self._sprite_sheets = sprite_sheets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConfig of this JobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_breaks(self):
        """Gets the ad_breaks of this JobConfig.

        List of ad breaks. Specifies where to insert ad break tags in the output manifests.

        :return: The ad_breaks of this JobConfig.
        :rtype: List[AdBreak]
        """
        return self._ad_breaks

    @ad_breaks.setter
    def ad_breaks(self, ad_breaks):
        """Sets the ad_breaks of this JobConfig.

        List of ad breaks. Specifies where to insert ad break tags in the output manifests.

        :param ad_breaks: The ad_breaks of this JobConfig.
        :type ad_breaks: List[AdBreak]
        """

        self._ad_breaks = ad_breaks

    @property
    def edit_list(self):
        """Gets the edit_list of this JobConfig.

        List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.

        :return: The edit_list of this JobConfig.
        :rtype: List[EditAtom]
        """
        return self._edit_list

    @edit_list.setter
    def edit_list(self, edit_list):
        """Sets the edit_list of this JobConfig.

        List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.

        :param edit_list: The edit_list of this JobConfig.
        :type edit_list: List[EditAtom]
        """

        self._edit_list = edit_list

    @property
    def elementary_streams(self):
        """Gets the elementary_streams of this JobConfig.

        List of elementary streams.

        :return: The elementary_streams of this JobConfig.
        :rtype: List[ElementaryStream]
        """
        return self._elementary_streams

    @elementary_streams.setter
    def elementary_streams(self, elementary_streams):
        """Sets the elementary_streams of this JobConfig.

        List of elementary streams.

        :param elementary_streams: The elementary_streams of this JobConfig.
        :type elementary_streams: List[ElementaryStream]
        """

        self._elementary_streams = elementary_streams

    @property
    def encryptions(self):
        """Gets the encryptions of this JobConfig.

        List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.

        :return: The encryptions of this JobConfig.
        :rtype: List[Encryption]
        """
        return self._encryptions

    @encryptions.setter
    def encryptions(self, encryptions):
        """Sets the encryptions of this JobConfig.

        List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.

        :param encryptions: The encryptions of this JobConfig.
        :type encryptions: List[Encryption]
        """

        self._encryptions = encryptions

    @property
    def inputs(self):
        """Gets the inputs of this JobConfig.

        List of input assets stored in Cloud Storage.

        :return: The inputs of this JobConfig.
        :rtype: List[Input]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this JobConfig.

        List of input assets stored in Cloud Storage.

        :param inputs: The inputs of this JobConfig.
        :type inputs: List[Input]
        """

        self._inputs = inputs

    @property
    def manifests(self):
        """Gets the manifests of this JobConfig.

        List of output manifests.

        :return: The manifests of this JobConfig.
        :rtype: List[Manifest]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this JobConfig.

        List of output manifests.

        :param manifests: The manifests of this JobConfig.
        :type manifests: List[Manifest]
        """

        self._manifests = manifests

    @property
    def mux_streams(self):
        """Gets the mux_streams of this JobConfig.

        List of multiplexing settings for output streams.

        :return: The mux_streams of this JobConfig.
        :rtype: List[MuxStream]
        """
        return self._mux_streams

    @mux_streams.setter
    def mux_streams(self, mux_streams):
        """Sets the mux_streams of this JobConfig.

        List of multiplexing settings for output streams.

        :param mux_streams: The mux_streams of this JobConfig.
        :type mux_streams: List[MuxStream]
        """

        self._mux_streams = mux_streams

    @property
    def output(self):
        """Gets the output of this JobConfig.


        :return: The output of this JobConfig.
        :rtype: Output
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this JobConfig.


        :param output: The output of this JobConfig.
        :type output: Output
        """

        self._output = output

    @property
    def overlays(self):
        """Gets the overlays of this JobConfig.

        List of overlays on the output video, in descending Z-order.

        :return: The overlays of this JobConfig.
        :rtype: List[Overlay]
        """
        return self._overlays

    @overlays.setter
    def overlays(self, overlays):
        """Sets the overlays of this JobConfig.

        List of overlays on the output video, in descending Z-order.

        :param overlays: The overlays of this JobConfig.
        :type overlays: List[Overlay]
        """

        self._overlays = overlays

    @property
    def pubsub_destination(self):
        """Gets the pubsub_destination of this JobConfig.


        :return: The pubsub_destination of this JobConfig.
        :rtype: PubsubDestination
        """
        return self._pubsub_destination

    @pubsub_destination.setter
    def pubsub_destination(self, pubsub_destination):
        """Sets the pubsub_destination of this JobConfig.


        :param pubsub_destination: The pubsub_destination of this JobConfig.
        :type pubsub_destination: PubsubDestination
        """

        self._pubsub_destination = pubsub_destination

    @property
    def sprite_sheets(self):
        """Gets the sprite_sheets of this JobConfig.

        List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.

        :return: The sprite_sheets of this JobConfig.
        :rtype: List[SpriteSheet]
        """
        return self._sprite_sheets

    @sprite_sheets.setter
    def sprite_sheets(self, sprite_sheets):
        """Sets the sprite_sheets of this JobConfig.

        List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.

        :param sprite_sheets: The sprite_sheets of this JobConfig.
        :type sprite_sheets: List[SpriteSheet]
        """

        self._sprite_sheets = sprite_sheets
