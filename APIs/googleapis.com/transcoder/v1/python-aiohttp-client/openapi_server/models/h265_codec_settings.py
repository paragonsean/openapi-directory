# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class H265CodecSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_open_gop: bool=None, aq_strength: float=None, b_frame_count: int=None, b_pyramid: bool=None, bitrate_bps: int=None, crf_level: int=None, enable_two_pass: bool=None, frame_rate: float=None, frame_rate_conversion_strategy: str=None, gop_duration: str=None, gop_frame_count: int=None, hdr10: object=None, height_pixels: int=None, hlg: object=None, pixel_format: str=None, preset: str=None, profile: str=None, rate_control_mode: str=None, sdr: object=None, tune: str=None, vbv_fullness_bits: int=None, vbv_size_bits: int=None, width_pixels: int=None):
        """H265CodecSettings - a model defined in OpenAPI

        :param allow_open_gop: The allow_open_gop of this H265CodecSettings.
        :param aq_strength: The aq_strength of this H265CodecSettings.
        :param b_frame_count: The b_frame_count of this H265CodecSettings.
        :param b_pyramid: The b_pyramid of this H265CodecSettings.
        :param bitrate_bps: The bitrate_bps of this H265CodecSettings.
        :param crf_level: The crf_level of this H265CodecSettings.
        :param enable_two_pass: The enable_two_pass of this H265CodecSettings.
        :param frame_rate: The frame_rate of this H265CodecSettings.
        :param frame_rate_conversion_strategy: The frame_rate_conversion_strategy of this H265CodecSettings.
        :param gop_duration: The gop_duration of this H265CodecSettings.
        :param gop_frame_count: The gop_frame_count of this H265CodecSettings.
        :param hdr10: The hdr10 of this H265CodecSettings.
        :param height_pixels: The height_pixels of this H265CodecSettings.
        :param hlg: The hlg of this H265CodecSettings.
        :param pixel_format: The pixel_format of this H265CodecSettings.
        :param preset: The preset of this H265CodecSettings.
        :param profile: The profile of this H265CodecSettings.
        :param rate_control_mode: The rate_control_mode of this H265CodecSettings.
        :param sdr: The sdr of this H265CodecSettings.
        :param tune: The tune of this H265CodecSettings.
        :param vbv_fullness_bits: The vbv_fullness_bits of this H265CodecSettings.
        :param vbv_size_bits: The vbv_size_bits of this H265CodecSettings.
        :param width_pixels: The width_pixels of this H265CodecSettings.
        """
        self.openapi_types = {
            'allow_open_gop': bool,
            'aq_strength': float,
            'b_frame_count': int,
            'b_pyramid': bool,
            'bitrate_bps': int,
            'crf_level': int,
            'enable_two_pass': bool,
            'frame_rate': float,
            'frame_rate_conversion_strategy': str,
            'gop_duration': str,
            'gop_frame_count': int,
            'hdr10': object,
            'height_pixels': int,
            'hlg': object,
            'pixel_format': str,
            'preset': str,
            'profile': str,
            'rate_control_mode': str,
            'sdr': object,
            'tune': str,
            'vbv_fullness_bits': int,
            'vbv_size_bits': int,
            'width_pixels': int
        }

        self.attribute_map = {
            'allow_open_gop': 'allowOpenGop',
            'aq_strength': 'aqStrength',
            'b_frame_count': 'bFrameCount',
            'b_pyramid': 'bPyramid',
            'bitrate_bps': 'bitrateBps',
            'crf_level': 'crfLevel',
            'enable_two_pass': 'enableTwoPass',
            'frame_rate': 'frameRate',
            'frame_rate_conversion_strategy': 'frameRateConversionStrategy',
            'gop_duration': 'gopDuration',
            'gop_frame_count': 'gopFrameCount',
            'hdr10': 'hdr10',
            'height_pixels': 'heightPixels',
            'hlg': 'hlg',
            'pixel_format': 'pixelFormat',
            'preset': 'preset',
            'profile': 'profile',
            'rate_control_mode': 'rateControlMode',
            'sdr': 'sdr',
            'tune': 'tune',
            'vbv_fullness_bits': 'vbvFullnessBits',
            'vbv_size_bits': 'vbvSizeBits',
            'width_pixels': 'widthPixels'
        }

        self._allow_open_gop = allow_open_gop
        self._aq_strength = aq_strength
        self._b_frame_count = b_frame_count
        self._b_pyramid = b_pyramid
        self._bitrate_bps = bitrate_bps
        self._crf_level = crf_level
        self._enable_two_pass = enable_two_pass
        self._frame_rate = frame_rate
        self._frame_rate_conversion_strategy = frame_rate_conversion_strategy
        self._gop_duration = gop_duration
        self._gop_frame_count = gop_frame_count
        self._hdr10 = hdr10
        self._height_pixels = height_pixels
        self._hlg = hlg
        self._pixel_format = pixel_format
        self._preset = preset
        self._profile = profile
        self._rate_control_mode = rate_control_mode
        self._sdr = sdr
        self._tune = tune
        self._vbv_fullness_bits = vbv_fullness_bits
        self._vbv_size_bits = vbv_size_bits
        self._width_pixels = width_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'H265CodecSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The H265CodecSettings of this H265CodecSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_open_gop(self):
        """Gets the allow_open_gop of this H265CodecSettings.

        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.

        :return: The allow_open_gop of this H265CodecSettings.
        :rtype: bool
        """
        return self._allow_open_gop

    @allow_open_gop.setter
    def allow_open_gop(self, allow_open_gop):
        """Sets the allow_open_gop of this H265CodecSettings.

        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.

        :param allow_open_gop: The allow_open_gop of this H265CodecSettings.
        :type allow_open_gop: bool
        """

        self._allow_open_gop = allow_open_gop

    @property
    def aq_strength(self):
        """Gets the aq_strength of this H265CodecSettings.

        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.

        :return: The aq_strength of this H265CodecSettings.
        :rtype: float
        """
        return self._aq_strength

    @aq_strength.setter
    def aq_strength(self, aq_strength):
        """Sets the aq_strength of this H265CodecSettings.

        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.

        :param aq_strength: The aq_strength of this H265CodecSettings.
        :type aq_strength: float
        """

        self._aq_strength = aq_strength

    @property
    def b_frame_count(self):
        """Gets the b_frame_count of this H265CodecSettings.

        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.

        :return: The b_frame_count of this H265CodecSettings.
        :rtype: int
        """
        return self._b_frame_count

    @b_frame_count.setter
    def b_frame_count(self, b_frame_count):
        """Sets the b_frame_count of this H265CodecSettings.

        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.

        :param b_frame_count: The b_frame_count of this H265CodecSettings.
        :type b_frame_count: int
        """

        self._b_frame_count = b_frame_count

    @property
    def b_pyramid(self):
        """Gets the b_pyramid of this H265CodecSettings.

        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.

        :return: The b_pyramid of this H265CodecSettings.
        :rtype: bool
        """
        return self._b_pyramid

    @b_pyramid.setter
    def b_pyramid(self, b_pyramid):
        """Sets the b_pyramid of this H265CodecSettings.

        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.

        :param b_pyramid: The b_pyramid of this H265CodecSettings.
        :type b_pyramid: bool
        """

        self._b_pyramid = b_pyramid

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this H265CodecSettings.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.

        :return: The bitrate_bps of this H265CodecSettings.
        :rtype: int
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this H265CodecSettings.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.

        :param bitrate_bps: The bitrate_bps of this H265CodecSettings.
        :type bitrate_bps: int
        """

        self._bitrate_bps = bitrate_bps

    @property
    def crf_level(self):
        """Gets the crf_level of this H265CodecSettings.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.

        :return: The crf_level of this H265CodecSettings.
        :rtype: int
        """
        return self._crf_level

    @crf_level.setter
    def crf_level(self, crf_level):
        """Sets the crf_level of this H265CodecSettings.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.

        :param crf_level: The crf_level of this H265CodecSettings.
        :type crf_level: int
        """

        self._crf_level = crf_level

    @property
    def enable_two_pass(self):
        """Gets the enable_two_pass of this H265CodecSettings.

        Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.

        :return: The enable_two_pass of this H265CodecSettings.
        :rtype: bool
        """
        return self._enable_two_pass

    @enable_two_pass.setter
    def enable_two_pass(self, enable_two_pass):
        """Sets the enable_two_pass of this H265CodecSettings.

        Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.

        :param enable_two_pass: The enable_two_pass of this H265CodecSettings.
        :type enable_two_pass: bool
        """

        self._enable_two_pass = enable_two_pass

    @property
    def frame_rate(self):
        """Gets the frame_rate of this H265CodecSettings.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.

        :return: The frame_rate of this H265CodecSettings.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this H265CodecSettings.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.

        :param frame_rate: The frame_rate of this H265CodecSettings.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def frame_rate_conversion_strategy(self):
        """Gets the frame_rate_conversion_strategy of this H265CodecSettings.

        Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.

        :return: The frame_rate_conversion_strategy of this H265CodecSettings.
        :rtype: str
        """
        return self._frame_rate_conversion_strategy

    @frame_rate_conversion_strategy.setter
    def frame_rate_conversion_strategy(self, frame_rate_conversion_strategy):
        """Sets the frame_rate_conversion_strategy of this H265CodecSettings.

        Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.

        :param frame_rate_conversion_strategy: The frame_rate_conversion_strategy of this H265CodecSettings.
        :type frame_rate_conversion_strategy: str
        """
        allowed_values = ["FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED", "DOWNSAMPLE", "DROP_DUPLICATE"]  # noqa: E501
        if frame_rate_conversion_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `frame_rate_conversion_strategy` ({0}), must be one of {1}"
                .format(frame_rate_conversion_strategy, allowed_values)
            )

        self._frame_rate_conversion_strategy = frame_rate_conversion_strategy

    @property
    def gop_duration(self):
        """Gets the gop_duration of this H265CodecSettings.

        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :return: The gop_duration of this H265CodecSettings.
        :rtype: str
        """
        return self._gop_duration

    @gop_duration.setter
    def gop_duration(self, gop_duration):
        """Sets the gop_duration of this H265CodecSettings.

        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :param gop_duration: The gop_duration of this H265CodecSettings.
        :type gop_duration: str
        """

        self._gop_duration = gop_duration

    @property
    def gop_frame_count(self):
        """Gets the gop_frame_count of this H265CodecSettings.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :return: The gop_frame_count of this H265CodecSettings.
        :rtype: int
        """
        return self._gop_frame_count

    @gop_frame_count.setter
    def gop_frame_count(self, gop_frame_count):
        """Sets the gop_frame_count of this H265CodecSettings.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :param gop_frame_count: The gop_frame_count of this H265CodecSettings.
        :type gop_frame_count: int
        """

        self._gop_frame_count = gop_frame_count

    @property
    def hdr10(self):
        """Gets the hdr10 of this H265CodecSettings.

        Convert the input video to a High Dynamic Range 10 (HDR10) video.

        :return: The hdr10 of this H265CodecSettings.
        :rtype: object
        """
        return self._hdr10

    @hdr10.setter
    def hdr10(self, hdr10):
        """Sets the hdr10 of this H265CodecSettings.

        Convert the input video to a High Dynamic Range 10 (HDR10) video.

        :param hdr10: The hdr10 of this H265CodecSettings.
        :type hdr10: object
        """

        self._hdr10 = hdr10

    @property
    def height_pixels(self):
        """Gets the height_pixels of this H265CodecSettings.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The height_pixels of this H265CodecSettings.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this H265CodecSettings.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param height_pixels: The height_pixels of this H265CodecSettings.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def hlg(self):
        """Gets the hlg of this H265CodecSettings.

        Convert the input video to a Hybrid Log Gamma (HLG) video.

        :return: The hlg of this H265CodecSettings.
        :rtype: object
        """
        return self._hlg

    @hlg.setter
    def hlg(self, hlg):
        """Sets the hlg of this H265CodecSettings.

        Convert the input video to a Hybrid Log Gamma (HLG) video.

        :param hlg: The hlg of this H265CodecSettings.
        :type hlg: object
        """

        self._hlg = hlg

    @property
    def pixel_format(self):
        """Gets the pixel_format of this H265CodecSettings.

        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format

        :return: The pixel_format of this H265CodecSettings.
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format):
        """Sets the pixel_format of this H265CodecSettings.

        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format

        :param pixel_format: The pixel_format of this H265CodecSettings.
        :type pixel_format: str
        """

        self._pixel_format = pixel_format

    @property
    def preset(self):
        """Gets the preset of this H265CodecSettings.

        Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :return: The preset of this H265CodecSettings.
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this H265CodecSettings.

        Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :param preset: The preset of this H265CodecSettings.
        :type preset: str
        """

        self._preset = preset

    @property
    def profile(self):
        """Gets the profile of this H265CodecSettings.

        Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :return: The profile of this H265CodecSettings.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this H265CodecSettings.

        Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :param profile: The profile of this H265CodecSettings.
        :type profile: str
        """

        self._profile = profile

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this H265CodecSettings.

        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor

        :return: The rate_control_mode of this H265CodecSettings.
        :rtype: str
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this H265CodecSettings.

        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor

        :param rate_control_mode: The rate_control_mode of this H265CodecSettings.
        :type rate_control_mode: str
        """

        self._rate_control_mode = rate_control_mode

    @property
    def sdr(self):
        """Gets the sdr of this H265CodecSettings.

        Convert the input video to a Standard Dynamic Range (SDR) video.

        :return: The sdr of this H265CodecSettings.
        :rtype: object
        """
        return self._sdr

    @sdr.setter
    def sdr(self, sdr):
        """Sets the sdr of this H265CodecSettings.

        Convert the input video to a Standard Dynamic Range (SDR) video.

        :param sdr: The sdr of this H265CodecSettings.
        :type sdr: object
        """

        self._sdr = sdr

    @property
    def tune(self):
        """Gets the tune of this H265CodecSettings.

        Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :return: The tune of this H265CodecSettings.
        :rtype: str
        """
        return self._tune

    @tune.setter
    def tune(self, tune):
        """Sets the tune of this H265CodecSettings.

        Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.

        :param tune: The tune of this H265CodecSettings.
        :type tune: str
        """

        self._tune = tune

    @property
    def vbv_fullness_bits(self):
        """Gets the vbv_fullness_bits of this H265CodecSettings.

        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.

        :return: The vbv_fullness_bits of this H265CodecSettings.
        :rtype: int
        """
        return self._vbv_fullness_bits

    @vbv_fullness_bits.setter
    def vbv_fullness_bits(self, vbv_fullness_bits):
        """Sets the vbv_fullness_bits of this H265CodecSettings.

        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.

        :param vbv_fullness_bits: The vbv_fullness_bits of this H265CodecSettings.
        :type vbv_fullness_bits: int
        """

        self._vbv_fullness_bits = vbv_fullness_bits

    @property
    def vbv_size_bits(self):
        """Gets the vbv_size_bits of this H265CodecSettings.

        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.

        :return: The vbv_size_bits of this H265CodecSettings.
        :rtype: int
        """
        return self._vbv_size_bits

    @vbv_size_bits.setter
    def vbv_size_bits(self, vbv_size_bits):
        """Sets the vbv_size_bits of this H265CodecSettings.

        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.

        :param vbv_size_bits: The vbv_size_bits of this H265CodecSettings.
        :type vbv_size_bits: int
        """

        self._vbv_size_bits = vbv_size_bits

    @property
    def width_pixels(self):
        """Gets the width_pixels of this H265CodecSettings.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The width_pixels of this H265CodecSettings.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this H265CodecSettings.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param width_pixels: The width_pixels of this H265CodecSettings.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels
