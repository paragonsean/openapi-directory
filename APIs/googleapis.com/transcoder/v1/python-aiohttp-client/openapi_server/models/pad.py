# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pad(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom_pixels: int=None, left_pixels: int=None, right_pixels: int=None, top_pixels: int=None):
        """Pad - a model defined in OpenAPI

        :param bottom_pixels: The bottom_pixels of this Pad.
        :param left_pixels: The left_pixels of this Pad.
        :param right_pixels: The right_pixels of this Pad.
        :param top_pixels: The top_pixels of this Pad.
        """
        self.openapi_types = {
            'bottom_pixels': int,
            'left_pixels': int,
            'right_pixels': int,
            'top_pixels': int
        }

        self.attribute_map = {
            'bottom_pixels': 'bottomPixels',
            'left_pixels': 'leftPixels',
            'right_pixels': 'rightPixels',
            'top_pixels': 'topPixels'
        }

        self._bottom_pixels = bottom_pixels
        self._left_pixels = left_pixels
        self._right_pixels = right_pixels
        self._top_pixels = top_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pad':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pad of this Pad.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom_pixels(self):
        """Gets the bottom_pixels of this Pad.

        The number of pixels to add to the bottom. The default is 0.

        :return: The bottom_pixels of this Pad.
        :rtype: int
        """
        return self._bottom_pixels

    @bottom_pixels.setter
    def bottom_pixels(self, bottom_pixels):
        """Sets the bottom_pixels of this Pad.

        The number of pixels to add to the bottom. The default is 0.

        :param bottom_pixels: The bottom_pixels of this Pad.
        :type bottom_pixels: int
        """

        self._bottom_pixels = bottom_pixels

    @property
    def left_pixels(self):
        """Gets the left_pixels of this Pad.

        The number of pixels to add to the left. The default is 0.

        :return: The left_pixels of this Pad.
        :rtype: int
        """
        return self._left_pixels

    @left_pixels.setter
    def left_pixels(self, left_pixels):
        """Sets the left_pixels of this Pad.

        The number of pixels to add to the left. The default is 0.

        :param left_pixels: The left_pixels of this Pad.
        :type left_pixels: int
        """

        self._left_pixels = left_pixels

    @property
    def right_pixels(self):
        """Gets the right_pixels of this Pad.

        The number of pixels to add to the right. The default is 0.

        :return: The right_pixels of this Pad.
        :rtype: int
        """
        return self._right_pixels

    @right_pixels.setter
    def right_pixels(self, right_pixels):
        """Sets the right_pixels of this Pad.

        The number of pixels to add to the right. The default is 0.

        :param right_pixels: The right_pixels of this Pad.
        :type right_pixels: int
        """

        self._right_pixels = right_pixels

    @property
    def top_pixels(self):
        """Gets the top_pixels of this Pad.

        The number of pixels to add to the top. The default is 0.

        :return: The top_pixels of this Pad.
        :rtype: int
        """
        return self._top_pixels

    @top_pixels.setter
    def top_pixels(self, top_pixels):
        """Sets the top_pixels of this Pad.

        The number of pixels to add to the top. The default is 0.

        :param top_pixels: The top_pixels of this Pad.
        :type top_pixels: int
        """

        self._top_pixels = top_pixels
