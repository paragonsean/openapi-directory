# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_mapping import AudioMapping
from openapi_server import util


class AudioStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate_bps: int=None, channel_count: int=None, channel_layout: List[str]=None, codec: str=None, display_name: str=None, language_code: str=None, mapping: List[AudioMapping]=None, sample_rate_hertz: int=None):
        """AudioStream - a model defined in OpenAPI

        :param bitrate_bps: The bitrate_bps of this AudioStream.
        :param channel_count: The channel_count of this AudioStream.
        :param channel_layout: The channel_layout of this AudioStream.
        :param codec: The codec of this AudioStream.
        :param display_name: The display_name of this AudioStream.
        :param language_code: The language_code of this AudioStream.
        :param mapping: The mapping of this AudioStream.
        :param sample_rate_hertz: The sample_rate_hertz of this AudioStream.
        """
        self.openapi_types = {
            'bitrate_bps': int,
            'channel_count': int,
            'channel_layout': List[str],
            'codec': str,
            'display_name': str,
            'language_code': str,
            'mapping': List[AudioMapping],
            'sample_rate_hertz': int
        }

        self.attribute_map = {
            'bitrate_bps': 'bitrateBps',
            'channel_count': 'channelCount',
            'channel_layout': 'channelLayout',
            'codec': 'codec',
            'display_name': 'displayName',
            'language_code': 'languageCode',
            'mapping': 'mapping',
            'sample_rate_hertz': 'sampleRateHertz'
        }

        self._bitrate_bps = bitrate_bps
        self._channel_count = channel_count
        self._channel_layout = channel_layout
        self._codec = codec
        self._display_name = display_name
        self._language_code = language_code
        self._mapping = mapping
        self._sample_rate_hertz = sample_rate_hertz

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioStream of this AudioStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this AudioStream.

        Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.

        :return: The bitrate_bps of this AudioStream.
        :rtype: int
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this AudioStream.

        Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.

        :param bitrate_bps: The bitrate_bps of this AudioStream.
        :type bitrate_bps: int
        """

        self._bitrate_bps = bitrate_bps

    @property
    def channel_count(self):
        """Gets the channel_count of this AudioStream.

        Number of audio channels. Must be between 1 and 6. The default is 2.

        :return: The channel_count of this AudioStream.
        :rtype: int
        """
        return self._channel_count

    @channel_count.setter
    def channel_count(self, channel_count):
        """Sets the channel_count of this AudioStream.

        Number of audio channels. Must be between 1 and 6. The default is 2.

        :param channel_count: The channel_count of this AudioStream.
        :type channel_count: int
        """

        self._channel_count = channel_count

    @property
    def channel_layout(self):
        """Gets the channel_layout of this AudioStream.

        A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency

        :return: The channel_layout of this AudioStream.
        :rtype: List[str]
        """
        return self._channel_layout

    @channel_layout.setter
    def channel_layout(self, channel_layout):
        """Sets the channel_layout of this AudioStream.

        A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency

        :param channel_layout: The channel_layout of this AudioStream.
        :type channel_layout: List[str]
        """

        self._channel_layout = channel_layout

    @property
    def codec(self):
        """Gets the codec of this AudioStream.

        The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`

        :return: The codec of this AudioStream.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this AudioStream.

        The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`

        :param codec: The codec of this AudioStream.
        :type codec: str
        """

        self._codec = codec

    @property
    def display_name(self):
        """Gets the display_name of this AudioStream.

        The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.

        :return: The display_name of this AudioStream.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AudioStream.

        The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.

        :param display_name: The display_name of this AudioStream.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def language_code(self):
        """Gets the language_code of this AudioStream.

        The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.

        :return: The language_code of this AudioStream.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AudioStream.

        The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.

        :param language_code: The language_code of this AudioStream.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def mapping(self):
        """Gets the mapping of this AudioStream.

        The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.

        :return: The mapping of this AudioStream.
        :rtype: List[AudioMapping]
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this AudioStream.

        The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.

        :param mapping: The mapping of this AudioStream.
        :type mapping: List[AudioMapping]
        """

        self._mapping = mapping

    @property
    def sample_rate_hertz(self):
        """Gets the sample_rate_hertz of this AudioStream.

        The audio sample rate in Hertz. The default is 48000 Hertz.

        :return: The sample_rate_hertz of this AudioStream.
        :rtype: int
        """
        return self._sample_rate_hertz

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, sample_rate_hertz):
        """Sets the sample_rate_hertz of this AudioStream.

        The audio sample rate in Hertz. The default is 48000 Hertz.

        :param sample_rate_hertz: The sample_rate_hertz of this AudioStream.
        :type sample_rate_hertz: int
        """

        self._sample_rate_hertz = sample_rate_hertz
