# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drm_systems import DrmSystems
from openapi_server.models.mpeg_common_encryption import MpegCommonEncryption
from openapi_server.models.secret_manager_source import SecretManagerSource
from openapi_server import util


class Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aes128: object=None, drm_systems: DrmSystems=None, id: str=None, mpeg_cenc: MpegCommonEncryption=None, sample_aes: object=None, secret_manager_key_source: SecretManagerSource=None):
        """Encryption - a model defined in OpenAPI

        :param aes128: The aes128 of this Encryption.
        :param drm_systems: The drm_systems of this Encryption.
        :param id: The id of this Encryption.
        :param mpeg_cenc: The mpeg_cenc of this Encryption.
        :param sample_aes: The sample_aes of this Encryption.
        :param secret_manager_key_source: The secret_manager_key_source of this Encryption.
        """
        self.openapi_types = {
            'aes128': object,
            'drm_systems': DrmSystems,
            'id': str,
            'mpeg_cenc': MpegCommonEncryption,
            'sample_aes': object,
            'secret_manager_key_source': SecretManagerSource
        }

        self.attribute_map = {
            'aes128': 'aes128',
            'drm_systems': 'drmSystems',
            'id': 'id',
            'mpeg_cenc': 'mpegCenc',
            'sample_aes': 'sampleAes',
            'secret_manager_key_source': 'secretManagerKeySource'
        }

        self._aes128 = aes128
        self._drm_systems = drm_systems
        self._id = id
        self._mpeg_cenc = mpeg_cenc
        self._sample_aes = sample_aes
        self._secret_manager_key_source = secret_manager_key_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Encryption of this Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aes128(self):
        """Gets the aes128 of this Encryption.

        Configuration for AES-128 encryption.

        :return: The aes128 of this Encryption.
        :rtype: object
        """
        return self._aes128

    @aes128.setter
    def aes128(self, aes128):
        """Sets the aes128 of this Encryption.

        Configuration for AES-128 encryption.

        :param aes128: The aes128 of this Encryption.
        :type aes128: object
        """

        self._aes128 = aes128

    @property
    def drm_systems(self):
        """Gets the drm_systems of this Encryption.


        :return: The drm_systems of this Encryption.
        :rtype: DrmSystems
        """
        return self._drm_systems

    @drm_systems.setter
    def drm_systems(self, drm_systems):
        """Sets the drm_systems of this Encryption.


        :param drm_systems: The drm_systems of this Encryption.
        :type drm_systems: DrmSystems
        """

        self._drm_systems = drm_systems

    @property
    def id(self):
        """Gets the id of this Encryption.

        Required. Identifier for this set of encryption options.

        :return: The id of this Encryption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Encryption.

        Required. Identifier for this set of encryption options.

        :param id: The id of this Encryption.
        :type id: str
        """

        self._id = id

    @property
    def mpeg_cenc(self):
        """Gets the mpeg_cenc of this Encryption.


        :return: The mpeg_cenc of this Encryption.
        :rtype: MpegCommonEncryption
        """
        return self._mpeg_cenc

    @mpeg_cenc.setter
    def mpeg_cenc(self, mpeg_cenc):
        """Sets the mpeg_cenc of this Encryption.


        :param mpeg_cenc: The mpeg_cenc of this Encryption.
        :type mpeg_cenc: MpegCommonEncryption
        """

        self._mpeg_cenc = mpeg_cenc

    @property
    def sample_aes(self):
        """Gets the sample_aes of this Encryption.

        Configuration for SAMPLE-AES encryption.

        :return: The sample_aes of this Encryption.
        :rtype: object
        """
        return self._sample_aes

    @sample_aes.setter
    def sample_aes(self, sample_aes):
        """Sets the sample_aes of this Encryption.

        Configuration for SAMPLE-AES encryption.

        :param sample_aes: The sample_aes of this Encryption.
        :type sample_aes: object
        """

        self._sample_aes = sample_aes

    @property
    def secret_manager_key_source(self):
        """Gets the secret_manager_key_source of this Encryption.


        :return: The secret_manager_key_source of this Encryption.
        :rtype: SecretManagerSource
        """
        return self._secret_manager_key_source

    @secret_manager_key_source.setter
    def secret_manager_key_source(self, secret_manager_key_source):
        """Sets the secret_manager_key_source of this Encryption.


        :param secret_manager_key_source: The secret_manager_key_source of this Encryption.
        :type secret_manager_key_source: SecretManagerSource
        """

        self._secret_manager_key_source = secret_manager_key_source
