# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dash_config import DashConfig
from openapi_server import util


class Manifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dash: DashConfig=None, file_name: str=None, mux_streams: List[str]=None, type: str=None):
        """Manifest - a model defined in OpenAPI

        :param dash: The dash of this Manifest.
        :param file_name: The file_name of this Manifest.
        :param mux_streams: The mux_streams of this Manifest.
        :param type: The type of this Manifest.
        """
        self.openapi_types = {
            'dash': DashConfig,
            'file_name': str,
            'mux_streams': List[str],
            'type': str
        }

        self.attribute_map = {
            'dash': 'dash',
            'file_name': 'fileName',
            'mux_streams': 'muxStreams',
            'type': 'type'
        }

        self._dash = dash
        self._file_name = file_name
        self._mux_streams = mux_streams
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Manifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Manifest of this Manifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dash(self):
        """Gets the dash of this Manifest.


        :return: The dash of this Manifest.
        :rtype: DashConfig
        """
        return self._dash

    @dash.setter
    def dash(self, dash):
        """Sets the dash of this Manifest.


        :param dash: The dash of this Manifest.
        :type dash: DashConfig
        """

        self._dash = dash

    @property
    def file_name(self):
        """Gets the file_name of this Manifest.

        The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.

        :return: The file_name of this Manifest.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Manifest.

        The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.

        :param file_name: The file_name of this Manifest.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def mux_streams(self):
        """Gets the mux_streams of this Manifest.

        Required. List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.

        :return: The mux_streams of this Manifest.
        :rtype: List[str]
        """
        return self._mux_streams

    @mux_streams.setter
    def mux_streams(self, mux_streams):
        """Sets the mux_streams of this Manifest.

        Required. List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.

        :param mux_streams: The mux_streams of this Manifest.
        :type mux_streams: List[str]
        """

        self._mux_streams = mux_streams

    @property
    def type(self):
        """Gets the type of this Manifest.

        Required. Type of the manifest.

        :return: The type of this Manifest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Manifest.

        Required. Type of the manifest.

        :param type: The type of this Manifest.
        :type type: str
        """
        allowed_values = ["MANIFEST_TYPE_UNSPECIFIED", "HLS", "DASH"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
