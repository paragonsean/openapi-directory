# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.animation import Animation
from openapi_server.models.image import Image
from openapi_server import util


class Overlay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, animations: List[Animation]=None, image: Image=None):
        """Overlay - a model defined in OpenAPI

        :param animations: The animations of this Overlay.
        :param image: The image of this Overlay.
        """
        self.openapi_types = {
            'animations': List[Animation],
            'image': Image
        }

        self.attribute_map = {
            'animations': 'animations',
            'image': 'image'
        }

        self._animations = animations
        self._image = image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Overlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Overlay of this Overlay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def animations(self):
        """Gets the animations of this Overlay.

        List of animations. The list should be chronological, without any time overlap.

        :return: The animations of this Overlay.
        :rtype: List[Animation]
        """
        return self._animations

    @animations.setter
    def animations(self, animations):
        """Sets the animations of this Overlay.

        List of animations. The list should be chronological, without any time overlap.

        :param animations: The animations of this Overlay.
        :type animations: List[Animation]
        """

        self._animations = animations

    @property
    def image(self):
        """Gets the image of this Overlay.


        :return: The image of this Overlay.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Overlay.


        :param image: The image of this Overlay.
        :type image: Image
        """

        self._image = image
