# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio import Audio
from openapi_server.models.color import Color
from openapi_server.models.crop import Crop
from openapi_server.models.deblock import Deblock
from openapi_server.models.deinterlace import Deinterlace
from openapi_server.models.denoise import Denoise
from openapi_server.models.pad import Pad
from openapi_server import util


class PreprocessingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: Audio=None, color: Color=None, crop: Crop=None, deblock: Deblock=None, deinterlace: Deinterlace=None, denoise: Denoise=None, pad: Pad=None):
        """PreprocessingConfig - a model defined in OpenAPI

        :param audio: The audio of this PreprocessingConfig.
        :param color: The color of this PreprocessingConfig.
        :param crop: The crop of this PreprocessingConfig.
        :param deblock: The deblock of this PreprocessingConfig.
        :param deinterlace: The deinterlace of this PreprocessingConfig.
        :param denoise: The denoise of this PreprocessingConfig.
        :param pad: The pad of this PreprocessingConfig.
        """
        self.openapi_types = {
            'audio': Audio,
            'color': Color,
            'crop': Crop,
            'deblock': Deblock,
            'deinterlace': Deinterlace,
            'denoise': Denoise,
            'pad': Pad
        }

        self.attribute_map = {
            'audio': 'audio',
            'color': 'color',
            'crop': 'crop',
            'deblock': 'deblock',
            'deinterlace': 'deinterlace',
            'denoise': 'denoise',
            'pad': 'pad'
        }

        self._audio = audio
        self._color = color
        self._crop = crop
        self._deblock = deblock
        self._deinterlace = deinterlace
        self._denoise = denoise
        self._pad = pad

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreprocessingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PreprocessingConfig of this PreprocessingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this PreprocessingConfig.


        :return: The audio of this PreprocessingConfig.
        :rtype: Audio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this PreprocessingConfig.


        :param audio: The audio of this PreprocessingConfig.
        :type audio: Audio
        """

        self._audio = audio

    @property
    def color(self):
        """Gets the color of this PreprocessingConfig.


        :return: The color of this PreprocessingConfig.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PreprocessingConfig.


        :param color: The color of this PreprocessingConfig.
        :type color: Color
        """

        self._color = color

    @property
    def crop(self):
        """Gets the crop of this PreprocessingConfig.


        :return: The crop of this PreprocessingConfig.
        :rtype: Crop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this PreprocessingConfig.


        :param crop: The crop of this PreprocessingConfig.
        :type crop: Crop
        """

        self._crop = crop

    @property
    def deblock(self):
        """Gets the deblock of this PreprocessingConfig.


        :return: The deblock of this PreprocessingConfig.
        :rtype: Deblock
        """
        return self._deblock

    @deblock.setter
    def deblock(self, deblock):
        """Sets the deblock of this PreprocessingConfig.


        :param deblock: The deblock of this PreprocessingConfig.
        :type deblock: Deblock
        """

        self._deblock = deblock

    @property
    def deinterlace(self):
        """Gets the deinterlace of this PreprocessingConfig.


        :return: The deinterlace of this PreprocessingConfig.
        :rtype: Deinterlace
        """
        return self._deinterlace

    @deinterlace.setter
    def deinterlace(self, deinterlace):
        """Sets the deinterlace of this PreprocessingConfig.


        :param deinterlace: The deinterlace of this PreprocessingConfig.
        :type deinterlace: Deinterlace
        """

        self._deinterlace = deinterlace

    @property
    def denoise(self):
        """Gets the denoise of this PreprocessingConfig.


        :return: The denoise of this PreprocessingConfig.
        :rtype: Denoise
        """
        return self._denoise

    @denoise.setter
    def denoise(self, denoise):
        """Sets the denoise of this PreprocessingConfig.


        :param denoise: The denoise of this PreprocessingConfig.
        :type denoise: Denoise
        """

        self._denoise = denoise

    @property
    def pad(self):
        """Gets the pad of this PreprocessingConfig.


        :return: The pad of this PreprocessingConfig.
        :rtype: Pad
        """
        return self._pad

    @pad.setter
    def pad(self, pad):
        """Sets the pad of this PreprocessingConfig.


        :param pad: The pad of this PreprocessingConfig.
        :type pad: Pad
        """

        self._pad = pad
