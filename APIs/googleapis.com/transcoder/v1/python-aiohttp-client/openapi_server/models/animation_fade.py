# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.normalized_coordinate import NormalizedCoordinate
from openapi_server import util


class AnimationFade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_offset: str=None, fade_type: str=None, start_time_offset: str=None, xy: NormalizedCoordinate=None):
        """AnimationFade - a model defined in OpenAPI

        :param end_time_offset: The end_time_offset of this AnimationFade.
        :param fade_type: The fade_type of this AnimationFade.
        :param start_time_offset: The start_time_offset of this AnimationFade.
        :param xy: The xy of this AnimationFade.
        """
        self.openapi_types = {
            'end_time_offset': str,
            'fade_type': str,
            'start_time_offset': str,
            'xy': NormalizedCoordinate
        }

        self.attribute_map = {
            'end_time_offset': 'endTimeOffset',
            'fade_type': 'fadeType',
            'start_time_offset': 'startTimeOffset',
            'xy': 'xy'
        }

        self._end_time_offset = end_time_offset
        self._fade_type = fade_type
        self._start_time_offset = start_time_offset
        self._xy = xy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnimationFade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnimationFade of this AnimationFade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_offset(self):
        """Gets the end_time_offset of this AnimationFade.

        The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s

        :return: The end_time_offset of this AnimationFade.
        :rtype: str
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """Sets the end_time_offset of this AnimationFade.

        The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s

        :param end_time_offset: The end_time_offset of this AnimationFade.
        :type end_time_offset: str
        """

        self._end_time_offset = end_time_offset

    @property
    def fade_type(self):
        """Gets the fade_type of this AnimationFade.

        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.

        :return: The fade_type of this AnimationFade.
        :rtype: str
        """
        return self._fade_type

    @fade_type.setter
    def fade_type(self, fade_type):
        """Sets the fade_type of this AnimationFade.

        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.

        :param fade_type: The fade_type of this AnimationFade.
        :type fade_type: str
        """
        allowed_values = ["FADE_TYPE_UNSPECIFIED", "FADE_IN", "FADE_OUT"]  # noqa: E501
        if fade_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fade_type` ({0}), must be one of {1}"
                .format(fade_type, allowed_values)
            )

        self._fade_type = fade_type

    @property
    def start_time_offset(self):
        """Gets the start_time_offset of this AnimationFade.

        The time to start the fade animation, in seconds. Default: 0

        :return: The start_time_offset of this AnimationFade.
        :rtype: str
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """Sets the start_time_offset of this AnimationFade.

        The time to start the fade animation, in seconds. Default: 0

        :param start_time_offset: The start_time_offset of this AnimationFade.
        :type start_time_offset: str
        """

        self._start_time_offset = start_time_offset

    @property
    def xy(self):
        """Gets the xy of this AnimationFade.


        :return: The xy of this AnimationFade.
        :rtype: NormalizedCoordinate
        """
        return self._xy

    @xy.setter
    def xy(self, xy):
        """Sets the xy of this AnimationFade.


        :param xy: The xy of this AnimationFade.
        :type xy: NormalizedCoordinate
        """

        self._xy = xy
