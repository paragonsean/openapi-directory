# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, individual_segments: bool=None, segment_duration: str=None):
        """SegmentSettings - a model defined in OpenAPI

        :param individual_segments: The individual_segments of this SegmentSettings.
        :param segment_duration: The segment_duration of this SegmentSettings.
        """
        self.openapi_types = {
            'individual_segments': bool,
            'segment_duration': str
        }

        self.attribute_map = {
            'individual_segments': 'individualSegments',
            'segment_duration': 'segmentDuration'
        }

        self._individual_segments = individual_segments
        self._segment_duration = segment_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentSettings of this SegmentSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def individual_segments(self):
        """Gets the individual_segments of this SegmentSettings.

        Required. Create an individual segment file. The default is `false`.

        :return: The individual_segments of this SegmentSettings.
        :rtype: bool
        """
        return self._individual_segments

    @individual_segments.setter
    def individual_segments(self, individual_segments):
        """Sets the individual_segments of this SegmentSettings.

        Required. Create an individual segment file. The default is `false`.

        :param individual_segments: The individual_segments of this SegmentSettings.
        :type individual_segments: bool
        """

        self._individual_segments = individual_segments

    @property
    def segment_duration(self):
        """Gets the segment_duration of this SegmentSettings.

        Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).

        :return: The segment_duration of this SegmentSettings.
        :rtype: str
        """
        return self._segment_duration

    @segment_duration.setter
    def segment_duration(self, segment_duration):
        """Sets the segment_duration of this SegmentSettings.

        Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).

        :param segment_duration: The segment_duration of this SegmentSettings.
        :type segment_duration: str
        """

        self._segment_duration = segment_duration
