# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preprocessing_config import PreprocessingConfig
from openapi_server import util


class Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, preprocessing_config: PreprocessingConfig=None, uri: str=None):
        """Input - a model defined in OpenAPI

        :param key: The key of this Input.
        :param preprocessing_config: The preprocessing_config of this Input.
        :param uri: The uri of this Input.
        """
        self.openapi_types = {
            'key': str,
            'preprocessing_config': PreprocessingConfig,
            'uri': str
        }

        self.attribute_map = {
            'key': 'key',
            'preprocessing_config': 'preprocessingConfig',
            'uri': 'uri'
        }

        self._key = key
        self._preprocessing_config = preprocessing_config
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Input of this Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this Input.

        A unique key for this input. Must be specified when using advanced mapping and edit lists.

        :return: The key of this Input.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Input.

        A unique key for this input. Must be specified when using advanced mapping and edit lists.

        :param key: The key of this Input.
        :type key: str
        """

        self._key = key

    @property
    def preprocessing_config(self):
        """Gets the preprocessing_config of this Input.


        :return: The preprocessing_config of this Input.
        :rtype: PreprocessingConfig
        """
        return self._preprocessing_config

    @preprocessing_config.setter
    def preprocessing_config(self, preprocessing_config):
        """Sets the preprocessing_config of this Input.


        :param preprocessing_config: The preprocessing_config of this Input.
        :type preprocessing_config: PreprocessingConfig
        """

        self._preprocessing_config = preprocessing_config

    @property
    def uri(self):
        """Gets the uri of this Input.

        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :return: The uri of this Input.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Input.

        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :param uri: The uri of this Input.
        :type uri: str
        """

        self._uri = uri
