# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fmp4Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec_tag: str=None):
        """Fmp4Config - a model defined in OpenAPI

        :param codec_tag: The codec_tag of this Fmp4Config.
        """
        self.openapi_types = {
            'codec_tag': str
        }

        self.attribute_map = {
            'codec_tag': 'codecTag'
        }

        self._codec_tag = codec_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fmp4Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fmp4Config of this Fmp4Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec_tag(self):
        """Gets the codec_tag of this Fmp4Config.

        Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`

        :return: The codec_tag of this Fmp4Config.
        :rtype: str
        """
        return self._codec_tag

    @codec_tag.setter
    def codec_tag(self, codec_tag):
        """Sets the codec_tag of this Fmp4Config.

        Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`

        :param codec_tag: The codec_tag of this Fmp4Config.
        :type codec_tag: str
        """

        self._codec_tag = codec_tag
