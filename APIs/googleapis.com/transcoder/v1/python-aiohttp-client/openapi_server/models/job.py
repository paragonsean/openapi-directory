# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_config import JobConfig
from openapi_server.models.status import Status
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_mode_priority: int=None, config: JobConfig=None, create_time: str=None, end_time: str=None, error: Status=None, input_uri: str=None, labels: Dict[str, str]=None, mode: str=None, name: str=None, optimization: str=None, output_uri: str=None, start_time: str=None, state: str=None, template_id: str=None, ttl_after_completion_days: int=None):
        """Job - a model defined in OpenAPI

        :param batch_mode_priority: The batch_mode_priority of this Job.
        :param config: The config of this Job.
        :param create_time: The create_time of this Job.
        :param end_time: The end_time of this Job.
        :param error: The error of this Job.
        :param input_uri: The input_uri of this Job.
        :param labels: The labels of this Job.
        :param mode: The mode of this Job.
        :param name: The name of this Job.
        :param optimization: The optimization of this Job.
        :param output_uri: The output_uri of this Job.
        :param start_time: The start_time of this Job.
        :param state: The state of this Job.
        :param template_id: The template_id of this Job.
        :param ttl_after_completion_days: The ttl_after_completion_days of this Job.
        """
        self.openapi_types = {
            'batch_mode_priority': int,
            'config': JobConfig,
            'create_time': str,
            'end_time': str,
            'error': Status,
            'input_uri': str,
            'labels': Dict[str, str],
            'mode': str,
            'name': str,
            'optimization': str,
            'output_uri': str,
            'start_time': str,
            'state': str,
            'template_id': str,
            'ttl_after_completion_days': int
        }

        self.attribute_map = {
            'batch_mode_priority': 'batchModePriority',
            'config': 'config',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'error': 'error',
            'input_uri': 'inputUri',
            'labels': 'labels',
            'mode': 'mode',
            'name': 'name',
            'optimization': 'optimization',
            'output_uri': 'outputUri',
            'start_time': 'startTime',
            'state': 'state',
            'template_id': 'templateId',
            'ttl_after_completion_days': 'ttlAfterCompletionDays'
        }

        self._batch_mode_priority = batch_mode_priority
        self._config = config
        self._create_time = create_time
        self._end_time = end_time
        self._error = error
        self._input_uri = input_uri
        self._labels = labels
        self._mode = mode
        self._name = name
        self._optimization = optimization
        self._output_uri = output_uri
        self._start_time = start_time
        self._state = state
        self._template_id = template_id
        self._ttl_after_completion_days = ttl_after_completion_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_mode_priority(self):
        """Gets the batch_mode_priority of this Job.

        The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.

        :return: The batch_mode_priority of this Job.
        :rtype: int
        """
        return self._batch_mode_priority

    @batch_mode_priority.setter
    def batch_mode_priority(self, batch_mode_priority):
        """Sets the batch_mode_priority of this Job.

        The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.

        :param batch_mode_priority: The batch_mode_priority of this Job.
        :type batch_mode_priority: int
        """

        self._batch_mode_priority = batch_mode_priority

    @property
    def config(self):
        """Gets the config of this Job.


        :return: The config of this Job.
        :rtype: JobConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Job.


        :param config: The config of this Job.
        :type config: JobConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Job.

        Output only. The time the job was created.

        :return: The create_time of this Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Job.

        Output only. The time the job was created.

        :param create_time: The create_time of this Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this Job.

        Output only. The time the transcoding finished.

        :return: The end_time of this Job.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Job.

        Output only. The time the transcoding finished.

        :param end_time: The end_time of this Job.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this Job.


        :return: The error of this Job.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Job.


        :param error: The error of this Job.
        :type error: Status
        """

        self._error = error

    @property
    def input_uri(self):
        """Gets the input_uri of this Job.

        Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :return: The input_uri of this Job.
        :rtype: str
        """
        return self._input_uri

    @input_uri.setter
    def input_uri(self, input_uri):
        """Sets the input_uri of this Job.

        Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :param input_uri: The input_uri of this Job.
        :type input_uri: str
        """

        self._input_uri = input_uri

    @property
    def labels(self):
        """Gets the labels of this Job.

        The labels associated with this job. You can use these to organize and group your jobs.

        :return: The labels of this Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Job.

        The labels associated with this job. You can use these to organize and group your jobs.

        :param labels: The labels of this Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mode(self):
        """Gets the mode of this Job.

        The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.

        :return: The mode of this Job.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Job.

        The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.

        :param mode: The mode of this Job.
        :type mode: str
        """
        allowed_values = ["PROCESSING_MODE_UNSPECIFIED", "PROCESSING_MODE_INTERACTIVE", "PROCESSING_MODE_BATCH"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Job.

        The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def optimization(self):
        """Gets the optimization of this Job.

        Optional. The optimization strategy of the job. The default is `AUTODETECT`.

        :return: The optimization of this Job.
        :rtype: str
        """
        return self._optimization

    @optimization.setter
    def optimization(self, optimization):
        """Sets the optimization of this Job.

        Optional. The optimization strategy of the job. The default is `AUTODETECT`.

        :param optimization: The optimization of this Job.
        :type optimization: str
        """
        allowed_values = ["OPTIMIZATION_STRATEGY_UNSPECIFIED", "AUTODETECT", "DISABLED"]  # noqa: E501
        if optimization not in allowed_values:
            raise ValueError(
                "Invalid value for `optimization` ({0}), must be one of {1}"
                .format(optimization, allowed_values)
            )

        self._optimization = optimization

    @property
    def output_uri(self):
        """Gets the output_uri of this Job.

        Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :return: The output_uri of this Job.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this Job.

        Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).

        :param output_uri: The output_uri of this Job.
        :type output_uri: str
        """

        self._output_uri = output_uri

    @property
    def start_time(self):
        """Gets the start_time of this Job.

        Output only. The time the transcoding started.

        :return: The start_time of this Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Job.

        Output only. The time the transcoding started.

        :param start_time: The start_time of this Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Job.

        Output only. The current state of the job.

        :return: The state of this Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.

        Output only. The current state of the job.

        :param state: The state of this Job.
        :type state: str
        """
        allowed_values = ["PROCESSING_STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def template_id(self):
        """Gets the template_id of this Job.

        Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`

        :return: The template_id of this Job.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Job.

        Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`

        :param template_id: The template_id of this Job.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def ttl_after_completion_days(self):
        """Gets the ttl_after_completion_days of this Job.

        Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.

        :return: The ttl_after_completion_days of this Job.
        :rtype: int
        """
        return self._ttl_after_completion_days

    @ttl_after_completion_days.setter
    def ttl_after_completion_days(self, ttl_after_completion_days):
        """Sets the ttl_after_completion_days of this Job.

        Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.

        :param ttl_after_completion_days: The ttl_after_completion_days of this Job.
        :type ttl_after_completion_days: int
        """

        self._ttl_after_completion_days = ttl_after_completion_days
