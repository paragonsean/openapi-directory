# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.normalized_coordinate import NormalizedCoordinate
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alpha: float=None, resolution: NormalizedCoordinate=None, uri: str=None):
        """Image - a model defined in OpenAPI

        :param alpha: The alpha of this Image.
        :param resolution: The resolution of this Image.
        :param uri: The uri of this Image.
        """
        self.openapi_types = {
            'alpha': float,
            'resolution': NormalizedCoordinate,
            'uri': str
        }

        self.attribute_map = {
            'alpha': 'alpha',
            'resolution': 'resolution',
            'uri': 'uri'
        }

        self._alpha = alpha
        self._resolution = resolution
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alpha(self):
        """Gets the alpha of this Image.

        Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.

        :return: The alpha of this Image.
        :rtype: float
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this Image.

        Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.

        :param alpha: The alpha of this Image.
        :type alpha: float
        """

        self._alpha = alpha

    @property
    def resolution(self):
        """Gets the resolution of this Image.


        :return: The resolution of this Image.
        :rtype: NormalizedCoordinate
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Image.


        :param resolution: The resolution of this Image.
        :type resolution: NormalizedCoordinate
        """

        self._resolution = resolution

    @property
    def uri(self):
        """Gets the uri of this Image.

        Required. URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.

        :return: The uri of this Image.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Image.

        Required. URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.

        :param uri: The uri of this Image.
        :type uri: str
        """

        self._uri = uri
