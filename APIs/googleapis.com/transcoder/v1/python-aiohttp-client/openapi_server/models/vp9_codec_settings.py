# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Vp9CodecSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate_bps: int=None, crf_level: int=None, frame_rate: float=None, frame_rate_conversion_strategy: str=None, gop_duration: str=None, gop_frame_count: int=None, height_pixels: int=None, hlg: object=None, pixel_format: str=None, profile: str=None, rate_control_mode: str=None, sdr: object=None, width_pixels: int=None):
        """Vp9CodecSettings - a model defined in OpenAPI

        :param bitrate_bps: The bitrate_bps of this Vp9CodecSettings.
        :param crf_level: The crf_level of this Vp9CodecSettings.
        :param frame_rate: The frame_rate of this Vp9CodecSettings.
        :param frame_rate_conversion_strategy: The frame_rate_conversion_strategy of this Vp9CodecSettings.
        :param gop_duration: The gop_duration of this Vp9CodecSettings.
        :param gop_frame_count: The gop_frame_count of this Vp9CodecSettings.
        :param height_pixels: The height_pixels of this Vp9CodecSettings.
        :param hlg: The hlg of this Vp9CodecSettings.
        :param pixel_format: The pixel_format of this Vp9CodecSettings.
        :param profile: The profile of this Vp9CodecSettings.
        :param rate_control_mode: The rate_control_mode of this Vp9CodecSettings.
        :param sdr: The sdr of this Vp9CodecSettings.
        :param width_pixels: The width_pixels of this Vp9CodecSettings.
        """
        self.openapi_types = {
            'bitrate_bps': int,
            'crf_level': int,
            'frame_rate': float,
            'frame_rate_conversion_strategy': str,
            'gop_duration': str,
            'gop_frame_count': int,
            'height_pixels': int,
            'hlg': object,
            'pixel_format': str,
            'profile': str,
            'rate_control_mode': str,
            'sdr': object,
            'width_pixels': int
        }

        self.attribute_map = {
            'bitrate_bps': 'bitrateBps',
            'crf_level': 'crfLevel',
            'frame_rate': 'frameRate',
            'frame_rate_conversion_strategy': 'frameRateConversionStrategy',
            'gop_duration': 'gopDuration',
            'gop_frame_count': 'gopFrameCount',
            'height_pixels': 'heightPixels',
            'hlg': 'hlg',
            'pixel_format': 'pixelFormat',
            'profile': 'profile',
            'rate_control_mode': 'rateControlMode',
            'sdr': 'sdr',
            'width_pixels': 'widthPixels'
        }

        self._bitrate_bps = bitrate_bps
        self._crf_level = crf_level
        self._frame_rate = frame_rate
        self._frame_rate_conversion_strategy = frame_rate_conversion_strategy
        self._gop_duration = gop_duration
        self._gop_frame_count = gop_frame_count
        self._height_pixels = height_pixels
        self._hlg = hlg
        self._pixel_format = pixel_format
        self._profile = profile
        self._rate_control_mode = rate_control_mode
        self._sdr = sdr
        self._width_pixels = width_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vp9CodecSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vp9CodecSettings of this Vp9CodecSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this Vp9CodecSettings.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.

        :return: The bitrate_bps of this Vp9CodecSettings.
        :rtype: int
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this Vp9CodecSettings.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.

        :param bitrate_bps: The bitrate_bps of this Vp9CodecSettings.
        :type bitrate_bps: int
        """

        self._bitrate_bps = bitrate_bps

    @property
    def crf_level(self):
        """Gets the crf_level of this Vp9CodecSettings.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.

        :return: The crf_level of this Vp9CodecSettings.
        :rtype: int
        """
        return self._crf_level

    @crf_level.setter
    def crf_level(self, crf_level):
        """Sets the crf_level of this Vp9CodecSettings.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.

        :param crf_level: The crf_level of this Vp9CodecSettings.
        :type crf_level: int
        """

        self._crf_level = crf_level

    @property
    def frame_rate(self):
        """Gets the frame_rate of this Vp9CodecSettings.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.

        :return: The frame_rate of this Vp9CodecSettings.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this Vp9CodecSettings.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.

        :param frame_rate: The frame_rate of this Vp9CodecSettings.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def frame_rate_conversion_strategy(self):
        """Gets the frame_rate_conversion_strategy of this Vp9CodecSettings.

        Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.

        :return: The frame_rate_conversion_strategy of this Vp9CodecSettings.
        :rtype: str
        """
        return self._frame_rate_conversion_strategy

    @frame_rate_conversion_strategy.setter
    def frame_rate_conversion_strategy(self, frame_rate_conversion_strategy):
        """Sets the frame_rate_conversion_strategy of this Vp9CodecSettings.

        Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.

        :param frame_rate_conversion_strategy: The frame_rate_conversion_strategy of this Vp9CodecSettings.
        :type frame_rate_conversion_strategy: str
        """
        allowed_values = ["FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED", "DOWNSAMPLE", "DROP_DUPLICATE"]  # noqa: E501
        if frame_rate_conversion_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `frame_rate_conversion_strategy` ({0}), must be one of {1}"
                .format(frame_rate_conversion_strategy, allowed_values)
            )

        self._frame_rate_conversion_strategy = frame_rate_conversion_strategy

    @property
    def gop_duration(self):
        """Gets the gop_duration of this Vp9CodecSettings.

        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :return: The gop_duration of this Vp9CodecSettings.
        :rtype: str
        """
        return self._gop_duration

    @gop_duration.setter
    def gop_duration(self, gop_duration):
        """Sets the gop_duration of this Vp9CodecSettings.

        Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :param gop_duration: The gop_duration of this Vp9CodecSettings.
        :type gop_duration: str
        """

        self._gop_duration = gop_duration

    @property
    def gop_frame_count(self):
        """Gets the gop_frame_count of this Vp9CodecSettings.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :return: The gop_frame_count of this Vp9CodecSettings.
        :rtype: int
        """
        return self._gop_frame_count

    @gop_frame_count.setter
    def gop_frame_count(self, gop_frame_count):
        """Sets the gop_frame_count of this Vp9CodecSettings.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :param gop_frame_count: The gop_frame_count of this Vp9CodecSettings.
        :type gop_frame_count: int
        """

        self._gop_frame_count = gop_frame_count

    @property
    def height_pixels(self):
        """Gets the height_pixels of this Vp9CodecSettings.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The height_pixels of this Vp9CodecSettings.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this Vp9CodecSettings.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param height_pixels: The height_pixels of this Vp9CodecSettings.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def hlg(self):
        """Gets the hlg of this Vp9CodecSettings.

        Convert the input video to a Hybrid Log Gamma (HLG) video.

        :return: The hlg of this Vp9CodecSettings.
        :rtype: object
        """
        return self._hlg

    @hlg.setter
    def hlg(self, hlg):
        """Sets the hlg of this Vp9CodecSettings.

        Convert the input video to a Hybrid Log Gamma (HLG) video.

        :param hlg: The hlg of this Vp9CodecSettings.
        :type hlg: object
        """

        self._hlg = hlg

    @property
    def pixel_format(self):
        """Gets the pixel_format of this Vp9CodecSettings.

        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format

        :return: The pixel_format of this Vp9CodecSettings.
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format):
        """Sets the pixel_format of this Vp9CodecSettings.

        Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format

        :param pixel_format: The pixel_format of this Vp9CodecSettings.
        :type pixel_format: str
        """

        self._pixel_format = pixel_format

    @property
    def profile(self):
        """Gets the profile of this Vp9CodecSettings.

        Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.

        :return: The profile of this Vp9CodecSettings.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Vp9CodecSettings.

        Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.

        :param profile: The profile of this Vp9CodecSettings.
        :type profile: str
        """

        self._profile = profile

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this Vp9CodecSettings.

        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate

        :return: The rate_control_mode of this Vp9CodecSettings.
        :rtype: str
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this Vp9CodecSettings.

        Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate

        :param rate_control_mode: The rate_control_mode of this Vp9CodecSettings.
        :type rate_control_mode: str
        """

        self._rate_control_mode = rate_control_mode

    @property
    def sdr(self):
        """Gets the sdr of this Vp9CodecSettings.

        Convert the input video to a Standard Dynamic Range (SDR) video.

        :return: The sdr of this Vp9CodecSettings.
        :rtype: object
        """
        return self._sdr

    @sdr.setter
    def sdr(self, sdr):
        """Sets the sdr of this Vp9CodecSettings.

        Convert the input video to a Standard Dynamic Range (SDR) video.

        :param sdr: The sdr of this Vp9CodecSettings.
        :type sdr: object
        """

        self._sdr = sdr

    @property
    def width_pixels(self):
        """Gets the width_pixels of this Vp9CodecSettings.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The width_pixels of this Vp9CodecSettings.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this Vp9CodecSettings.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param width_pixels: The width_pixels of this Vp9CodecSettings.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels
