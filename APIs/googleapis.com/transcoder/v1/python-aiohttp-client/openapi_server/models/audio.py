# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high_boost: bool=None, low_boost: bool=None, lufs: float=None):
        """Audio - a model defined in OpenAPI

        :param high_boost: The high_boost of this Audio.
        :param low_boost: The low_boost of this Audio.
        :param lufs: The lufs of this Audio.
        """
        self.openapi_types = {
            'high_boost': bool,
            'low_boost': bool,
            'lufs': float
        }

        self.attribute_map = {
            'high_boost': 'highBoost',
            'low_boost': 'lowBoost',
            'lufs': 'lufs'
        }

        self._high_boost = high_boost
        self._low_boost = low_boost
        self._lufs = lufs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high_boost(self):
        """Gets the high_boost of this Audio.

        Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.

        :return: The high_boost of this Audio.
        :rtype: bool
        """
        return self._high_boost

    @high_boost.setter
    def high_boost(self, high_boost):
        """Sets the high_boost of this Audio.

        Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.

        :param high_boost: The high_boost of this Audio.
        :type high_boost: bool
        """

        self._high_boost = high_boost

    @property
    def low_boost(self):
        """Gets the low_boost of this Audio.

        Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.

        :return: The low_boost of this Audio.
        :rtype: bool
        """
        return self._low_boost

    @low_boost.setter
    def low_boost(self, low_boost):
        """Sets the low_boost of this Audio.

        Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.

        :param low_boost: The low_boost of this Audio.
        :type low_boost: bool
        """

        self._low_boost = low_boost

    @property
    def lufs(self):
        """Gets the lufs of this Audio.

        Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization

        :return: The lufs of this Audio.
        :rtype: float
        """
        return self._lufs

    @lufs.setter
    def lufs(self, lufs):
        """Sets the lufs of this Audio.

        Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization

        :param lufs: The lufs of this Audio.
        :type lufs: float
        """

        self._lufs = lufs
