# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpriteSheet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_count: int=None, end_time_offset: str=None, file_prefix: str=None, format: str=None, interval: str=None, quality: int=None, row_count: int=None, sprite_height_pixels: int=None, sprite_width_pixels: int=None, start_time_offset: str=None, total_count: int=None):
        """SpriteSheet - a model defined in OpenAPI

        :param column_count: The column_count of this SpriteSheet.
        :param end_time_offset: The end_time_offset of this SpriteSheet.
        :param file_prefix: The file_prefix of this SpriteSheet.
        :param format: The format of this SpriteSheet.
        :param interval: The interval of this SpriteSheet.
        :param quality: The quality of this SpriteSheet.
        :param row_count: The row_count of this SpriteSheet.
        :param sprite_height_pixels: The sprite_height_pixels of this SpriteSheet.
        :param sprite_width_pixels: The sprite_width_pixels of this SpriteSheet.
        :param start_time_offset: The start_time_offset of this SpriteSheet.
        :param total_count: The total_count of this SpriteSheet.
        """
        self.openapi_types = {
            'column_count': int,
            'end_time_offset': str,
            'file_prefix': str,
            'format': str,
            'interval': str,
            'quality': int,
            'row_count': int,
            'sprite_height_pixels': int,
            'sprite_width_pixels': int,
            'start_time_offset': str,
            'total_count': int
        }

        self.attribute_map = {
            'column_count': 'columnCount',
            'end_time_offset': 'endTimeOffset',
            'file_prefix': 'filePrefix',
            'format': 'format',
            'interval': 'interval',
            'quality': 'quality',
            'row_count': 'rowCount',
            'sprite_height_pixels': 'spriteHeightPixels',
            'sprite_width_pixels': 'spriteWidthPixels',
            'start_time_offset': 'startTimeOffset',
            'total_count': 'totalCount'
        }

        self._column_count = column_count
        self._end_time_offset = end_time_offset
        self._file_prefix = file_prefix
        self._format = format
        self._interval = interval
        self._quality = quality
        self._row_count = row_count
        self._sprite_height_pixels = sprite_height_pixels
        self._sprite_width_pixels = sprite_width_pixels
        self._start_time_offset = start_time_offset
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpriteSheet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpriteSheet of this SpriteSheet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_count(self):
        """Gets the column_count of this SpriteSheet.

        The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.

        :return: The column_count of this SpriteSheet.
        :rtype: int
        """
        return self._column_count

    @column_count.setter
    def column_count(self, column_count):
        """Sets the column_count of this SpriteSheet.

        The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.

        :param column_count: The column_count of this SpriteSheet.
        :type column_count: int
        """

        self._column_count = column_count

    @property
    def end_time_offset(self):
        """Gets the end_time_offset of this SpriteSheet.

        End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.

        :return: The end_time_offset of this SpriteSheet.
        :rtype: str
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """Sets the end_time_offset of this SpriteSheet.

        End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.

        :param end_time_offset: The end_time_offset of this SpriteSheet.
        :type end_time_offset: str
        """

        self._end_time_offset = end_time_offset

    @property
    def file_prefix(self):
        """Gets the file_prefix of this SpriteSheet.

        Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.

        :return: The file_prefix of this SpriteSheet.
        :rtype: str
        """
        return self._file_prefix

    @file_prefix.setter
    def file_prefix(self, file_prefix):
        """Sets the file_prefix of this SpriteSheet.

        Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.

        :param file_prefix: The file_prefix of this SpriteSheet.
        :type file_prefix: str
        """

        self._file_prefix = file_prefix

    @property
    def format(self):
        """Gets the format of this SpriteSheet.

        Format type. The default is `jpeg`. Supported formats: - `jpeg`

        :return: The format of this SpriteSheet.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SpriteSheet.

        Format type. The default is `jpeg`. Supported formats: - `jpeg`

        :param format: The format of this SpriteSheet.
        :type format: str
        """

        self._format = format

    @property
    def interval(self):
        """Gets the interval of this SpriteSheet.

        Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.

        :return: The interval of this SpriteSheet.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SpriteSheet.

        Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.

        :param interval: The interval of this SpriteSheet.
        :type interval: str
        """

        self._interval = interval

    @property
    def quality(self):
        """Gets the quality of this SpriteSheet.

        The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.

        :return: The quality of this SpriteSheet.
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this SpriteSheet.

        The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.

        :param quality: The quality of this SpriteSheet.
        :type quality: int
        """

        self._quality = quality

    @property
    def row_count(self):
        """Gets the row_count of this SpriteSheet.

        The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.

        :return: The row_count of this SpriteSheet.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this SpriteSheet.

        The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.

        :param row_count: The row_count of this SpriteSheet.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def sprite_height_pixels(self):
        """Gets the sprite_height_pixels of this SpriteSheet.

        Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The sprite_height_pixels of this SpriteSheet.
        :rtype: int
        """
        return self._sprite_height_pixels

    @sprite_height_pixels.setter
    def sprite_height_pixels(self, sprite_height_pixels):
        """Sets the sprite_height_pixels of this SpriteSheet.

        Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param sprite_height_pixels: The sprite_height_pixels of this SpriteSheet.
        :type sprite_height_pixels: int
        """

        self._sprite_height_pixels = sprite_height_pixels

    @property
    def sprite_width_pixels(self):
        """Gets the sprite_width_pixels of this SpriteSheet.

        Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :return: The sprite_width_pixels of this SpriteSheet.
        :rtype: int
        """
        return self._sprite_width_pixels

    @sprite_width_pixels.setter
    def sprite_width_pixels(self, sprite_width_pixels):
        """Sets the sprite_width_pixels of this SpriteSheet.

        Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.

        :param sprite_width_pixels: The sprite_width_pixels of this SpriteSheet.
        :type sprite_width_pixels: int
        """

        self._sprite_width_pixels = sprite_width_pixels

    @property
    def start_time_offset(self):
        """Gets the start_time_offset of this SpriteSheet.

        Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.

        :return: The start_time_offset of this SpriteSheet.
        :rtype: str
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """Sets the start_time_offset of this SpriteSheet.

        Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.

        :param start_time_offset: The start_time_offset of this SpriteSheet.
        :type start_time_offset: str
        """

        self._start_time_offset = start_time_offset

    @property
    def total_count(self):
        """Gets the total_count of this SpriteSheet.

        Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.

        :return: The total_count of this SpriteSheet.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SpriteSheet.

        Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.

        :param total_count: The total_count of this SpriteSheet.
        :type total_count: int
        """

        self._total_count = total_count
