/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobConfig from './JobConfig';

/**
 * The JobTemplate model module.
 * @module model/JobTemplate
 * @version v1
 */
class JobTemplate {
    /**
     * Constructs a new <code>JobTemplate</code>.
     * Transcoding job template resource.
     * @alias module:model/JobTemplate
     */
    constructor() { 
        
        JobTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobTemplate} obj Optional instance to populate.
     * @return {module:model/JobTemplate} The populated <code>JobTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobTemplate();

            if (data.hasOwnProperty('config')) {
                obj['config'] = JobConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobTemplate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          JobConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/JobConfig} config
 */
JobTemplate.prototype['config'] = undefined;

/**
 * The labels associated with this job template. You can use these to organize and group your job templates.
 * @member {Object.<String, String>} labels
 */
JobTemplate.prototype['labels'] = undefined;

/**
 * The resource name of the job template. Format: `projects/{project_number}/locations/{location}/jobTemplates/{job_template}`
 * @member {String} name
 */
JobTemplate.prototype['name'] = undefined;






export default JobTemplate;

