/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Color model module.
 * @module model/Color
 * @version v1
 */
class Color {
    /**
     * Constructs a new <code>Color</code>.
     * Color preprocessing configuration. **Note:** This configuration is not supported.
     * @alias module:model/Color
     */
    constructor() { 
        
        Color.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Color</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Color} obj Optional instance to populate.
     * @return {module:model/Color} The populated <code>Color</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Color();

            if (data.hasOwnProperty('brightness')) {
                obj['brightness'] = ApiClient.convertToType(data['brightness'], 'Number');
            }
            if (data.hasOwnProperty('contrast')) {
                obj['contrast'] = ApiClient.convertToType(data['contrast'], 'Number');
            }
            if (data.hasOwnProperty('saturation')) {
                obj['saturation'] = ApiClient.convertToType(data['saturation'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Color</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Color</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
 * @member {Number} brightness
 */
Color.prototype['brightness'] = undefined;

/**
 * Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
 * @member {Number} contrast
 */
Color.prototype['contrast'] = undefined;

/**
 * Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
 * @member {Number} saturation
 */
Color.prototype['saturation'] = undefined;






export default Color;

