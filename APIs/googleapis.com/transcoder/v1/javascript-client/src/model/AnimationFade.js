/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NormalizedCoordinate from './NormalizedCoordinate';

/**
 * The AnimationFade model module.
 * @module model/AnimationFade
 * @version v1
 */
class AnimationFade {
    /**
     * Constructs a new <code>AnimationFade</code>.
     * Display overlay object with fade animation.
     * @alias module:model/AnimationFade
     */
    constructor() { 
        
        AnimationFade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnimationFade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnimationFade} obj Optional instance to populate.
     * @return {module:model/AnimationFade} The populated <code>AnimationFade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnimationFade();

            if (data.hasOwnProperty('endTimeOffset')) {
                obj['endTimeOffset'] = ApiClient.convertToType(data['endTimeOffset'], 'String');
            }
            if (data.hasOwnProperty('fadeType')) {
                obj['fadeType'] = ApiClient.convertToType(data['fadeType'], 'String');
            }
            if (data.hasOwnProperty('startTimeOffset')) {
                obj['startTimeOffset'] = ApiClient.convertToType(data['startTimeOffset'], 'String');
            }
            if (data.hasOwnProperty('xy')) {
                obj['xy'] = NormalizedCoordinate.constructFromObject(data['xy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnimationFade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnimationFade</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTimeOffset'] && !(typeof data['endTimeOffset'] === 'string' || data['endTimeOffset'] instanceof String)) {
            throw new Error("Expected the field `endTimeOffset` to be a primitive type in the JSON string but got " + data['endTimeOffset']);
        }
        // ensure the json data is a string
        if (data['fadeType'] && !(typeof data['fadeType'] === 'string' || data['fadeType'] instanceof String)) {
            throw new Error("Expected the field `fadeType` to be a primitive type in the JSON string but got " + data['fadeType']);
        }
        // ensure the json data is a string
        if (data['startTimeOffset'] && !(typeof data['startTimeOffset'] === 'string' || data['startTimeOffset'] instanceof String)) {
            throw new Error("Expected the field `startTimeOffset` to be a primitive type in the JSON string but got " + data['startTimeOffset']);
        }
        // validate the optional field `xy`
        if (data['xy']) { // data not null
          NormalizedCoordinate.validateJSON(data['xy']);
        }

        return true;
    }


}



/**
 * The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
 * @member {String} endTimeOffset
 */
AnimationFade.prototype['endTimeOffset'] = undefined;

/**
 * Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
 * @member {module:model/AnimationFade.FadeTypeEnum} fadeType
 */
AnimationFade.prototype['fadeType'] = undefined;

/**
 * The time to start the fade animation, in seconds. Default: 0
 * @member {String} startTimeOffset
 */
AnimationFade.prototype['startTimeOffset'] = undefined;

/**
 * @member {module:model/NormalizedCoordinate} xy
 */
AnimationFade.prototype['xy'] = undefined;





/**
 * Allowed values for the <code>fadeType</code> property.
 * @enum {String}
 * @readonly
 */
AnimationFade['FadeTypeEnum'] = {

    /**
     * value: "FADE_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "FADE_TYPE_UNSPECIFIED",

    /**
     * value: "FADE_IN"
     * @const
     */
    "IN": "FADE_IN",

    /**
     * value: "FADE_OUT"
     * @const
     */
    "OUT": "FADE_OUT"
};



export default AnimationFade;

