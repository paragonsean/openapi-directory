/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Denoise model module.
 * @module model/Denoise
 * @version v1
 */
class Denoise {
    /**
     * Constructs a new <code>Denoise</code>.
     * Denoise preprocessing configuration. **Note:** This configuration is not supported.
     * @alias module:model/Denoise
     */
    constructor() { 
        
        Denoise.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Denoise</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Denoise} obj Optional instance to populate.
     * @return {module:model/Denoise} The populated <code>Denoise</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Denoise();

            if (data.hasOwnProperty('strength')) {
                obj['strength'] = ApiClient.convertToType(data['strength'], 'Number');
            }
            if (data.hasOwnProperty('tune')) {
                obj['tune'] = ApiClient.convertToType(data['tune'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Denoise</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Denoise</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tune'] && !(typeof data['tune'] === 'string' || data['tune'] instanceof String)) {
            throw new Error("Expected the field `tune` to be a primitive type in the JSON string but got " + data['tune']);
        }

        return true;
    }


}



/**
 * Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
 * @member {Number} strength
 */
Denoise.prototype['strength'] = undefined;

/**
 * Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
 * @member {String} tune
 */
Denoise.prototype['tune'] = undefined;






export default Denoise;

