/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioStream from './AudioStream';
import TextStream from './TextStream';
import VideoStream from './VideoStream';

/**
 * The ElementaryStream model module.
 * @module model/ElementaryStream
 * @version v1
 */
class ElementaryStream {
    /**
     * Constructs a new <code>ElementaryStream</code>.
     * Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
     * @alias module:model/ElementaryStream
     */
    constructor() { 
        
        ElementaryStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElementaryStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElementaryStream} obj Optional instance to populate.
     * @return {module:model/ElementaryStream} The populated <code>ElementaryStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElementaryStream();

            if (data.hasOwnProperty('audioStream')) {
                obj['audioStream'] = AudioStream.constructFromObject(data['audioStream']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('textStream')) {
                obj['textStream'] = TextStream.constructFromObject(data['textStream']);
            }
            if (data.hasOwnProperty('videoStream')) {
                obj['videoStream'] = VideoStream.constructFromObject(data['videoStream']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElementaryStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElementaryStream</code>.
     */
    static validateJSON(data) {
        // validate the optional field `audioStream`
        if (data['audioStream']) { // data not null
          AudioStream.validateJSON(data['audioStream']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // validate the optional field `textStream`
        if (data['textStream']) { // data not null
          TextStream.validateJSON(data['textStream']);
        }
        // validate the optional field `videoStream`
        if (data['videoStream']) { // data not null
          VideoStream.validateJSON(data['videoStream']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioStream} audioStream
 */
ElementaryStream.prototype['audioStream'] = undefined;

/**
 * A unique key for this elementary stream.
 * @member {String} key
 */
ElementaryStream.prototype['key'] = undefined;

/**
 * @member {module:model/TextStream} textStream
 */
ElementaryStream.prototype['textStream'] = undefined;

/**
 * @member {module:model/VideoStream} videoStream
 */
ElementaryStream.prototype['videoStream'] = undefined;






export default ElementaryStream;

