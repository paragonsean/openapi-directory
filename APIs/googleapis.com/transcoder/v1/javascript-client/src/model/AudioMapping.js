/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AudioMapping model module.
 * @module model/AudioMapping
 * @version v1
 */
class AudioMapping {
    /**
     * Constructs a new <code>AudioMapping</code>.
     * The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
     * @alias module:model/AudioMapping
     */
    constructor() { 
        
        AudioMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioMapping} obj Optional instance to populate.
     * @return {module:model/AudioMapping} The populated <code>AudioMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioMapping();

            if (data.hasOwnProperty('atomKey')) {
                obj['atomKey'] = ApiClient.convertToType(data['atomKey'], 'String');
            }
            if (data.hasOwnProperty('gainDb')) {
                obj['gainDb'] = ApiClient.convertToType(data['gainDb'], 'Number');
            }
            if (data.hasOwnProperty('inputChannel')) {
                obj['inputChannel'] = ApiClient.convertToType(data['inputChannel'], 'Number');
            }
            if (data.hasOwnProperty('inputKey')) {
                obj['inputKey'] = ApiClient.convertToType(data['inputKey'], 'String');
            }
            if (data.hasOwnProperty('inputTrack')) {
                obj['inputTrack'] = ApiClient.convertToType(data['inputTrack'], 'Number');
            }
            if (data.hasOwnProperty('outputChannel')) {
                obj['outputChannel'] = ApiClient.convertToType(data['outputChannel'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['atomKey'] && !(typeof data['atomKey'] === 'string' || data['atomKey'] instanceof String)) {
            throw new Error("Expected the field `atomKey` to be a primitive type in the JSON string but got " + data['atomKey']);
        }
        // ensure the json data is a string
        if (data['inputKey'] && !(typeof data['inputKey'] === 'string' || data['inputKey'] instanceof String)) {
            throw new Error("Expected the field `inputKey` to be a primitive type in the JSON string but got " + data['inputKey']);
        }

        return true;
    }


}



/**
 * Required. The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
 * @member {String} atomKey
 */
AudioMapping.prototype['atomKey'] = undefined;

/**
 * Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
 * @member {Number} gainDb
 */
AudioMapping.prototype['gainDb'] = undefined;

/**
 * Required. The zero-based index of the channel in the input audio stream.
 * @member {Number} inputChannel
 */
AudioMapping.prototype['inputChannel'] = undefined;

/**
 * Required. The Input.key that identifies the input file.
 * @member {String} inputKey
 */
AudioMapping.prototype['inputKey'] = undefined;

/**
 * Required. The zero-based index of the track in the input file.
 * @member {Number} inputTrack
 */
AudioMapping.prototype['inputTrack'] = undefined;

/**
 * Required. The zero-based index of the channel in the output audio stream.
 * @member {Number} outputChannel
 */
AudioMapping.prototype['outputChannel'] = undefined;






export default AudioMapping;

