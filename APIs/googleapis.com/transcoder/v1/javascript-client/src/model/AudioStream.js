/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioMapping from './AudioMapping';

/**
 * The AudioStream model module.
 * @module model/AudioStream
 * @version v1
 */
class AudioStream {
    /**
     * Constructs a new <code>AudioStream</code>.
     * Audio stream resource.
     * @alias module:model/AudioStream
     */
    constructor() { 
        
        AudioStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioStream} obj Optional instance to populate.
     * @return {module:model/AudioStream} The populated <code>AudioStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioStream();

            if (data.hasOwnProperty('bitrateBps')) {
                obj['bitrateBps'] = ApiClient.convertToType(data['bitrateBps'], 'Number');
            }
            if (data.hasOwnProperty('channelCount')) {
                obj['channelCount'] = ApiClient.convertToType(data['channelCount'], 'Number');
            }
            if (data.hasOwnProperty('channelLayout')) {
                obj['channelLayout'] = ApiClient.convertToType(data['channelLayout'], ['String']);
            }
            if (data.hasOwnProperty('codec')) {
                obj['codec'] = ApiClient.convertToType(data['codec'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('mapping')) {
                obj['mapping'] = ApiClient.convertToType(data['mapping'], [AudioMapping]);
            }
            if (data.hasOwnProperty('sampleRateHertz')) {
                obj['sampleRateHertz'] = ApiClient.convertToType(data['sampleRateHertz'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['channelLayout'])) {
            throw new Error("Expected the field `channelLayout` to be an array in the JSON data but got " + data['channelLayout']);
        }
        // ensure the json data is a string
        if (data['codec'] && !(typeof data['codec'] === 'string' || data['codec'] instanceof String)) {
            throw new Error("Expected the field `codec` to be a primitive type in the JSON string but got " + data['codec']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        if (data['mapping']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mapping'])) {
                throw new Error("Expected the field `mapping` to be an array in the JSON data but got " + data['mapping']);
            }
            // validate the optional field `mapping` (array)
            for (const item of data['mapping']) {
                AudioMapping.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.
 * @member {Number} bitrateBps
 */
AudioStream.prototype['bitrateBps'] = undefined;

/**
 * Number of audio channels. Must be between 1 and 6. The default is 2.
 * @member {Number} channelCount
 */
AudioStream.prototype['channelCount'] = undefined;

/**
 * A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
 * @member {Array.<String>} channelLayout
 */
AudioStream.prototype['channelLayout'] = undefined;

/**
 * The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
 * @member {String} codec
 */
AudioStream.prototype['codec'] = undefined;

/**
 * The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
 * @member {String} displayName
 */
AudioStream.prototype['displayName'] = undefined;

/**
 * The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
 * @member {String} languageCode
 */
AudioStream.prototype['languageCode'] = undefined;

/**
 * The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
 * @member {Array.<module:model/AudioMapping>} mapping
 */
AudioStream.prototype['mapping'] = undefined;

/**
 * The audio sample rate in Hertz. The default is 48000 Hertz.
 * @member {Number} sampleRateHertz
 */
AudioStream.prototype['sampleRateHertz'] = undefined;






export default AudioStream;

