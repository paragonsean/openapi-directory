/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdBreak from './AdBreak';
import EditAtom from './EditAtom';
import ElementaryStream from './ElementaryStream';
import Encryption from './Encryption';
import Input from './Input';
import Manifest from './Manifest';
import MuxStream from './MuxStream';
import Output from './Output';
import Overlay from './Overlay';
import PubsubDestination from './PubsubDestination';
import SpriteSheet from './SpriteSheet';

/**
 * The JobConfig model module.
 * @module model/JobConfig
 * @version v1
 */
class JobConfig {
    /**
     * Constructs a new <code>JobConfig</code>.
     * Job configuration
     * @alias module:model/JobConfig
     */
    constructor() { 
        
        JobConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobConfig} obj Optional instance to populate.
     * @return {module:model/JobConfig} The populated <code>JobConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobConfig();

            if (data.hasOwnProperty('adBreaks')) {
                obj['adBreaks'] = ApiClient.convertToType(data['adBreaks'], [AdBreak]);
            }
            if (data.hasOwnProperty('editList')) {
                obj['editList'] = ApiClient.convertToType(data['editList'], [EditAtom]);
            }
            if (data.hasOwnProperty('elementaryStreams')) {
                obj['elementaryStreams'] = ApiClient.convertToType(data['elementaryStreams'], [ElementaryStream]);
            }
            if (data.hasOwnProperty('encryptions')) {
                obj['encryptions'] = ApiClient.convertToType(data['encryptions'], [Encryption]);
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], [Input]);
            }
            if (data.hasOwnProperty('manifests')) {
                obj['manifests'] = ApiClient.convertToType(data['manifests'], [Manifest]);
            }
            if (data.hasOwnProperty('muxStreams')) {
                obj['muxStreams'] = ApiClient.convertToType(data['muxStreams'], [MuxStream]);
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = Output.constructFromObject(data['output']);
            }
            if (data.hasOwnProperty('overlays')) {
                obj['overlays'] = ApiClient.convertToType(data['overlays'], [Overlay]);
            }
            if (data.hasOwnProperty('pubsubDestination')) {
                obj['pubsubDestination'] = PubsubDestination.constructFromObject(data['pubsubDestination']);
            }
            if (data.hasOwnProperty('spriteSheets')) {
                obj['spriteSheets'] = ApiClient.convertToType(data['spriteSheets'], [SpriteSheet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobConfig</code>.
     */
    static validateJSON(data) {
        if (data['adBreaks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adBreaks'])) {
                throw new Error("Expected the field `adBreaks` to be an array in the JSON data but got " + data['adBreaks']);
            }
            // validate the optional field `adBreaks` (array)
            for (const item of data['adBreaks']) {
                AdBreak.validateJSON(item);
            };
        }
        if (data['editList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['editList'])) {
                throw new Error("Expected the field `editList` to be an array in the JSON data but got " + data['editList']);
            }
            // validate the optional field `editList` (array)
            for (const item of data['editList']) {
                EditAtom.validateJSON(item);
            };
        }
        if (data['elementaryStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elementaryStreams'])) {
                throw new Error("Expected the field `elementaryStreams` to be an array in the JSON data but got " + data['elementaryStreams']);
            }
            // validate the optional field `elementaryStreams` (array)
            for (const item of data['elementaryStreams']) {
                ElementaryStream.validateJSON(item);
            };
        }
        if (data['encryptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['encryptions'])) {
                throw new Error("Expected the field `encryptions` to be an array in the JSON data but got " + data['encryptions']);
            }
            // validate the optional field `encryptions` (array)
            for (const item of data['encryptions']) {
                Encryption.validateJSON(item);
            };
        }
        if (data['inputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputs'])) {
                throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
            }
            // validate the optional field `inputs` (array)
            for (const item of data['inputs']) {
                Input.validateJSON(item);
            };
        }
        if (data['manifests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['manifests'])) {
                throw new Error("Expected the field `manifests` to be an array in the JSON data but got " + data['manifests']);
            }
            // validate the optional field `manifests` (array)
            for (const item of data['manifests']) {
                Manifest.validateJSON(item);
            };
        }
        if (data['muxStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['muxStreams'])) {
                throw new Error("Expected the field `muxStreams` to be an array in the JSON data but got " + data['muxStreams']);
            }
            // validate the optional field `muxStreams` (array)
            for (const item of data['muxStreams']) {
                MuxStream.validateJSON(item);
            };
        }
        // validate the optional field `output`
        if (data['output']) { // data not null
          Output.validateJSON(data['output']);
        }
        if (data['overlays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['overlays'])) {
                throw new Error("Expected the field `overlays` to be an array in the JSON data but got " + data['overlays']);
            }
            // validate the optional field `overlays` (array)
            for (const item of data['overlays']) {
                Overlay.validateJSON(item);
            };
        }
        // validate the optional field `pubsubDestination`
        if (data['pubsubDestination']) { // data not null
          PubsubDestination.validateJSON(data['pubsubDestination']);
        }
        if (data['spriteSheets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spriteSheets'])) {
                throw new Error("Expected the field `spriteSheets` to be an array in the JSON data but got " + data['spriteSheets']);
            }
            // validate the optional field `spriteSheets` (array)
            for (const item of data['spriteSheets']) {
                SpriteSheet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of ad breaks. Specifies where to insert ad break tags in the output manifests.
 * @member {Array.<module:model/AdBreak>} adBreaks
 */
JobConfig.prototype['adBreaks'] = undefined;

/**
 * List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
 * @member {Array.<module:model/EditAtom>} editList
 */
JobConfig.prototype['editList'] = undefined;

/**
 * List of elementary streams.
 * @member {Array.<module:model/ElementaryStream>} elementaryStreams
 */
JobConfig.prototype['elementaryStreams'] = undefined;

/**
 * List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
 * @member {Array.<module:model/Encryption>} encryptions
 */
JobConfig.prototype['encryptions'] = undefined;

/**
 * List of input assets stored in Cloud Storage.
 * @member {Array.<module:model/Input>} inputs
 */
JobConfig.prototype['inputs'] = undefined;

/**
 * List of output manifests.
 * @member {Array.<module:model/Manifest>} manifests
 */
JobConfig.prototype['manifests'] = undefined;

/**
 * List of multiplexing settings for output streams.
 * @member {Array.<module:model/MuxStream>} muxStreams
 */
JobConfig.prototype['muxStreams'] = undefined;

/**
 * @member {module:model/Output} output
 */
JobConfig.prototype['output'] = undefined;

/**
 * List of overlays on the output video, in descending Z-order.
 * @member {Array.<module:model/Overlay>} overlays
 */
JobConfig.prototype['overlays'] = undefined;

/**
 * @member {module:model/PubsubDestination} pubsubDestination
 */
JobConfig.prototype['pubsubDestination'] = undefined;

/**
 * List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
 * @member {Array.<module:model/SpriteSheet>} spriteSheets
 */
JobConfig.prototype['spriteSheets'] = undefined;






export default JobConfig;

