/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fmp4Config from './Fmp4Config';
import SegmentSettings from './SegmentSettings';

/**
 * The MuxStream model module.
 * @module model/MuxStream
 * @version v1
 */
class MuxStream {
    /**
     * Constructs a new <code>MuxStream</code>.
     * Multiplexing settings for output stream.
     * @alias module:model/MuxStream
     */
    constructor() { 
        
        MuxStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MuxStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MuxStream} obj Optional instance to populate.
     * @return {module:model/MuxStream} The populated <code>MuxStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MuxStream();

            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('elementaryStreams')) {
                obj['elementaryStreams'] = ApiClient.convertToType(data['elementaryStreams'], ['String']);
            }
            if (data.hasOwnProperty('encryptionId')) {
                obj['encryptionId'] = ApiClient.convertToType(data['encryptionId'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('fmp4')) {
                obj['fmp4'] = Fmp4Config.constructFromObject(data['fmp4']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('segmentSettings')) {
                obj['segmentSettings'] = SegmentSettings.constructFromObject(data['segmentSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MuxStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MuxStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['elementaryStreams'])) {
            throw new Error("Expected the field `elementaryStreams` to be an array in the JSON data but got " + data['elementaryStreams']);
        }
        // ensure the json data is a string
        if (data['encryptionId'] && !(typeof data['encryptionId'] === 'string' || data['encryptionId'] instanceof String)) {
            throw new Error("Expected the field `encryptionId` to be a primitive type in the JSON string but got " + data['encryptionId']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // validate the optional field `fmp4`
        if (data['fmp4']) { // data not null
          Fmp4Config.validateJSON(data['fmp4']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // validate the optional field `segmentSettings`
        if (data['segmentSettings']) { // data not null
          SegmentSettings.validateJSON(data['segmentSettings']);
        }

        return true;
    }


}



/**
 * The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
 * @member {String} container
 */
MuxStream.prototype['container'] = undefined;

/**
 * List of ElementaryStream.key values multiplexed in this stream.
 * @member {Array.<String>} elementaryStreams
 */
MuxStream.prototype['elementaryStreams'] = undefined;

/**
 * Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
 * @member {String} encryptionId
 */
MuxStream.prototype['encryptionId'] = undefined;

/**
 * The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
 * @member {String} fileName
 */
MuxStream.prototype['fileName'] = undefined;

/**
 * @member {module:model/Fmp4Config} fmp4
 */
MuxStream.prototype['fmp4'] = undefined;

/**
 * A unique key for this multiplexed stream.
 * @member {String} key
 */
MuxStream.prototype['key'] = undefined;

/**
 * @member {module:model/SegmentSettings} segmentSettings
 */
MuxStream.prototype['segmentSettings'] = undefined;






export default MuxStream;

