/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextMapping model module.
 * @module model/TextMapping
 * @version v1
 */
class TextMapping {
    /**
     * Constructs a new <code>TextMapping</code>.
     * The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
     * @alias module:model/TextMapping
     */
    constructor() { 
        
        TextMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextMapping} obj Optional instance to populate.
     * @return {module:model/TextMapping} The populated <code>TextMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextMapping();

            if (data.hasOwnProperty('atomKey')) {
                obj['atomKey'] = ApiClient.convertToType(data['atomKey'], 'String');
            }
            if (data.hasOwnProperty('inputKey')) {
                obj['inputKey'] = ApiClient.convertToType(data['inputKey'], 'String');
            }
            if (data.hasOwnProperty('inputTrack')) {
                obj['inputTrack'] = ApiClient.convertToType(data['inputTrack'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['atomKey'] && !(typeof data['atomKey'] === 'string' || data['atomKey'] instanceof String)) {
            throw new Error("Expected the field `atomKey` to be a primitive type in the JSON string but got " + data['atomKey']);
        }
        // ensure the json data is a string
        if (data['inputKey'] && !(typeof data['inputKey'] === 'string' || data['inputKey'] instanceof String)) {
            throw new Error("Expected the field `inputKey` to be a primitive type in the JSON string but got " + data['inputKey']);
        }

        return true;
    }


}



/**
 * Required. The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
 * @member {String} atomKey
 */
TextMapping.prototype['atomKey'] = undefined;

/**
 * Required. The Input.key that identifies the input file.
 * @member {String} inputKey
 */
TextMapping.prototype['inputKey'] = undefined;

/**
 * Required. The zero-based index of the track in the input file.
 * @member {Number} inputTrack
 */
TextMapping.prototype['inputTrack'] = undefined;






export default TextMapping;

