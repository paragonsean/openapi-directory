/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobConfig from './JobConfig';
import Status from './Status';

/**
 * The Job model module.
 * @module model/Job
 * @version v1
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * Transcoding job resource.
     * @alias module:model/Job
     */
    constructor() { 
        
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();

            if (data.hasOwnProperty('batchModePriority')) {
                obj['batchModePriority'] = ApiClient.convertToType(data['batchModePriority'], 'Number');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = JobConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Status.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('inputUri')) {
                obj['inputUri'] = ApiClient.convertToType(data['inputUri'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('optimization')) {
                obj['optimization'] = ApiClient.convertToType(data['optimization'], 'String');
            }
            if (data.hasOwnProperty('outputUri')) {
                obj['outputUri'] = ApiClient.convertToType(data['outputUri'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('ttlAfterCompletionDays')) {
                obj['ttlAfterCompletionDays'] = ApiClient.convertToType(data['ttlAfterCompletionDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          JobConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Status.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['inputUri'] && !(typeof data['inputUri'] === 'string' || data['inputUri'] instanceof String)) {
            throw new Error("Expected the field `inputUri` to be a primitive type in the JSON string but got " + data['inputUri']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['optimization'] && !(typeof data['optimization'] === 'string' || data['optimization'] instanceof String)) {
            throw new Error("Expected the field `optimization` to be a primitive type in the JSON string but got " + data['optimization']);
        }
        // ensure the json data is a string
        if (data['outputUri'] && !(typeof data['outputUri'] === 'string' || data['outputUri'] instanceof String)) {
            throw new Error("Expected the field `outputUri` to be a primitive type in the JSON string but got " + data['outputUri']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }

        return true;
    }


}



/**
 * The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.
 * @member {Number} batchModePriority
 */
Job.prototype['batchModePriority'] = undefined;

/**
 * @member {module:model/JobConfig} config
 */
Job.prototype['config'] = undefined;

/**
 * Output only. The time the job was created.
 * @member {String} createTime
 */
Job.prototype['createTime'] = undefined;

/**
 * Output only. The time the transcoding finished.
 * @member {String} endTime
 */
Job.prototype['endTime'] = undefined;

/**
 * @member {module:model/Status} error
 */
Job.prototype['error'] = undefined;

/**
 * Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
 * @member {String} inputUri
 */
Job.prototype['inputUri'] = undefined;

/**
 * The labels associated with this job. You can use these to organize and group your jobs.
 * @member {Object.<String, String>} labels
 */
Job.prototype['labels'] = undefined;

/**
 * The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.
 * @member {module:model/Job.ModeEnum} mode
 */
Job.prototype['mode'] = undefined;

/**
 * The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`
 * @member {String} name
 */
Job.prototype['name'] = undefined;

/**
 * Optional. The optimization strategy of the job. The default is `AUTODETECT`.
 * @member {module:model/Job.OptimizationEnum} optimization
 */
Job.prototype['optimization'] = undefined;

/**
 * Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
 * @member {String} outputUri
 */
Job.prototype['outputUri'] = undefined;

/**
 * Output only. The time the transcoding started.
 * @member {String} startTime
 */
Job.prototype['startTime'] = undefined;

/**
 * Output only. The current state of the job.
 * @member {module:model/Job.StateEnum} state
 */
Job.prototype['state'] = undefined;

/**
 * Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`
 * @member {String} templateId
 */
Job.prototype['templateId'] = undefined;

/**
 * Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
 * @member {Number} ttlAfterCompletionDays
 */
Job.prototype['ttlAfterCompletionDays'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
Job['ModeEnum'] = {

    /**
     * value: "PROCESSING_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PROCESSING_MODE_UNSPECIFIED",

    /**
     * value: "PROCESSING_MODE_INTERACTIVE"
     * @const
     */
    "INTERACTIVE": "PROCESSING_MODE_INTERACTIVE",

    /**
     * value: "PROCESSING_MODE_BATCH"
     * @const
     */
    "BATCH": "PROCESSING_MODE_BATCH"
};


/**
 * Allowed values for the <code>optimization</code> property.
 * @enum {String}
 * @readonly
 */
Job['OptimizationEnum'] = {

    /**
     * value: "OPTIMIZATION_STRATEGY_UNSPECIFIED"
     * @const
     */
    "OPTIMIZATION_STRATEGY_UNSPECIFIED": "OPTIMIZATION_STRATEGY_UNSPECIFIED",

    /**
     * value: "AUTODETECT"
     * @const
     */
    "AUTODETECT": "AUTODETECT",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Job['StateEnum'] = {

    /**
     * value: "PROCESSING_STATE_UNSPECIFIED"
     * @const
     */
    "PROCESSING_STATE_UNSPECIFIED": "PROCESSING_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Job;

