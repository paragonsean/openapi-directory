/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. For more information, see the Transcoder API overview. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Audio model module.
 * @module model/Audio
 * @version v1
 */
class Audio {
    /**
     * Constructs a new <code>Audio</code>.
     * Audio preprocessing configuration.
     * @alias module:model/Audio
     */
    constructor() { 
        
        Audio.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Audio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Audio} obj Optional instance to populate.
     * @return {module:model/Audio} The populated <code>Audio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Audio();

            if (data.hasOwnProperty('highBoost')) {
                obj['highBoost'] = ApiClient.convertToType(data['highBoost'], 'Boolean');
            }
            if (data.hasOwnProperty('lowBoost')) {
                obj['lowBoost'] = ApiClient.convertToType(data['lowBoost'], 'Boolean');
            }
            if (data.hasOwnProperty('lufs')) {
                obj['lufs'] = ApiClient.convertToType(data['lufs'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Audio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Audio</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
 * @member {Boolean} highBoost
 */
Audio.prototype['highBoost'] = undefined;

/**
 * Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
 * @member {Boolean} lowBoost
 */
Audio.prototype['lowBoost'] = undefined;

/**
 * Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
 * @member {Number} lufs
 */
Audio.prototype['lufs'] = undefined;






export default Audio;

