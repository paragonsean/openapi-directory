/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManifest::OAIManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManifest::OAIManifest() {
    this->initializeModel();
}

OAIManifest::~OAIManifest() {}

void OAIManifest::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_mux_streams_isSet = false;
    m_mux_streams_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManifest::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_mux_streams_isValid = ::OpenAPI::fromJsonValue(m_mux_streams, json[QString("muxStreams")]);
    m_mux_streams_isSet = !json[QString("muxStreams")].isNull() && m_mux_streams_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_mux_streams.size() > 0) {
        obj.insert(QString("muxStreams"), ::OpenAPI::toJsonValue(m_mux_streams));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIManifest::getFileName() const {
    return m_file_name;
}
void OAIManifest::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIManifest::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIManifest::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QList<QString> OAIManifest::getMuxStreams() const {
    return m_mux_streams;
}
void OAIManifest::setMuxStreams(const QList<QString> &mux_streams) {
    m_mux_streams = mux_streams;
    m_mux_streams_isSet = true;
}

bool OAIManifest::is_mux_streams_Set() const{
    return m_mux_streams_isSet;
}

bool OAIManifest::is_mux_streams_Valid() const{
    return m_mux_streams_isValid;
}

QString OAIManifest::getType() const {
    return m_type;
}
void OAIManifest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIManifest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIManifest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
