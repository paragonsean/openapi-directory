/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryption::OAIEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryption::OAIEncryption() {
    this->initializeModel();
}

OAIEncryption::~OAIEncryption() {}

void OAIEncryption::initializeModel() {

    m_aes128_isSet = false;
    m_aes128_isValid = false;

    m_iv_isSet = false;
    m_iv_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_mpeg_cenc_isSet = false;
    m_mpeg_cenc_isValid = false;

    m_sample_aes_isSet = false;
    m_sample_aes_isValid = false;
}

void OAIEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryption::fromJsonObject(QJsonObject json) {

    m_aes128_isValid = ::OpenAPI::fromJsonValue(m_aes128, json[QString("aes128")]);
    m_aes128_isSet = !json[QString("aes128")].isNull() && m_aes128_isValid;

    m_iv_isValid = ::OpenAPI::fromJsonValue(m_iv, json[QString("iv")]);
    m_iv_isSet = !json[QString("iv")].isNull() && m_iv_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_mpeg_cenc_isValid = ::OpenAPI::fromJsonValue(m_mpeg_cenc, json[QString("mpegCenc")]);
    m_mpeg_cenc_isSet = !json[QString("mpegCenc")].isNull() && m_mpeg_cenc_isValid;

    m_sample_aes_isValid = ::OpenAPI::fromJsonValue(m_sample_aes, json[QString("sampleAes")]);
    m_sample_aes_isSet = !json[QString("sampleAes")].isNull() && m_sample_aes_isValid;
}

QString OAIEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_aes128.isSet()) {
        obj.insert(QString("aes128"), ::OpenAPI::toJsonValue(m_aes128));
    }
    if (m_iv_isSet) {
        obj.insert(QString("iv"), ::OpenAPI::toJsonValue(m_iv));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_mpeg_cenc.isSet()) {
        obj.insert(QString("mpegCenc"), ::OpenAPI::toJsonValue(m_mpeg_cenc));
    }
    if (m_sample_aes.isSet()) {
        obj.insert(QString("sampleAes"), ::OpenAPI::toJsonValue(m_sample_aes));
    }
    return obj;
}

OAIAes128Encryption OAIEncryption::getAes128() const {
    return m_aes128;
}
void OAIEncryption::setAes128(const OAIAes128Encryption &aes128) {
    m_aes128 = aes128;
    m_aes128_isSet = true;
}

bool OAIEncryption::is_aes128_Set() const{
    return m_aes128_isSet;
}

bool OAIEncryption::is_aes128_Valid() const{
    return m_aes128_isValid;
}

QString OAIEncryption::getIv() const {
    return m_iv;
}
void OAIEncryption::setIv(const QString &iv) {
    m_iv = iv;
    m_iv_isSet = true;
}

bool OAIEncryption::is_iv_Set() const{
    return m_iv_isSet;
}

bool OAIEncryption::is_iv_Valid() const{
    return m_iv_isValid;
}

QString OAIEncryption::getKey() const {
    return m_key;
}
void OAIEncryption::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIEncryption::is_key_Set() const{
    return m_key_isSet;
}

bool OAIEncryption::is_key_Valid() const{
    return m_key_isValid;
}

OAIMpegCommonEncryption OAIEncryption::getMpegCenc() const {
    return m_mpeg_cenc;
}
void OAIEncryption::setMpegCenc(const OAIMpegCommonEncryption &mpeg_cenc) {
    m_mpeg_cenc = mpeg_cenc;
    m_mpeg_cenc_isSet = true;
}

bool OAIEncryption::is_mpeg_cenc_Set() const{
    return m_mpeg_cenc_isSet;
}

bool OAIEncryption::is_mpeg_cenc_Valid() const{
    return m_mpeg_cenc_isValid;
}

OAISampleAesEncryption OAIEncryption::getSampleAes() const {
    return m_sample_aes;
}
void OAIEncryption::setSampleAes(const OAISampleAesEncryption &sample_aes) {
    m_sample_aes = sample_aes;
    m_sample_aes_isSet = true;
}

bool OAIEncryption::is_sample_aes_Set() const{
    return m_sample_aes_isSet;
}

bool OAIEncryption::is_sample_aes_Valid() const{
    return m_sample_aes_isValid;
}

bool OAIEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aes128.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpeg_cenc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_aes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
