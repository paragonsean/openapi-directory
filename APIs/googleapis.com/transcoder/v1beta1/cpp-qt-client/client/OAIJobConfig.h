/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobConfig.h
 *
 * Job configuration
 */

#ifndef OAIJobConfig_H
#define OAIJobConfig_H

#include <QJsonObject>

#include "OAIAdBreak.h"
#include "OAIEditAtom.h"
#include "OAIElementaryStream.h"
#include "OAIInput.h"
#include "OAIManifest.h"
#include "OAIMuxStream.h"
#include "OAIOutput.h"
#include "OAIOverlay.h"
#include "OAIPubsubDestination.h"
#include "OAISpriteSheet.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdBreak;
class OAIEditAtom;
class OAIElementaryStream;
class OAIInput;
class OAIManifest;
class OAIMuxStream;
class OAIOutput;
class OAIOverlay;
class OAIPubsubDestination;
class OAISpriteSheet;

class OAIJobConfig : public OAIObject {
public:
    OAIJobConfig();
    OAIJobConfig(QString json);
    ~OAIJobConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAdBreak> getAdBreaks() const;
    void setAdBreaks(const QList<OAIAdBreak> &ad_breaks);
    bool is_ad_breaks_Set() const;
    bool is_ad_breaks_Valid() const;

    QList<OAIEditAtom> getEditList() const;
    void setEditList(const QList<OAIEditAtom> &edit_list);
    bool is_edit_list_Set() const;
    bool is_edit_list_Valid() const;

    QList<OAIElementaryStream> getElementaryStreams() const;
    void setElementaryStreams(const QList<OAIElementaryStream> &elementary_streams);
    bool is_elementary_streams_Set() const;
    bool is_elementary_streams_Valid() const;

    QList<OAIInput> getInputs() const;
    void setInputs(const QList<OAIInput> &inputs);
    bool is_inputs_Set() const;
    bool is_inputs_Valid() const;

    QList<OAIManifest> getManifests() const;
    void setManifests(const QList<OAIManifest> &manifests);
    bool is_manifests_Set() const;
    bool is_manifests_Valid() const;

    QList<OAIMuxStream> getMuxStreams() const;
    void setMuxStreams(const QList<OAIMuxStream> &mux_streams);
    bool is_mux_streams_Set() const;
    bool is_mux_streams_Valid() const;

    OAIOutput getOutput() const;
    void setOutput(const OAIOutput &output);
    bool is_output_Set() const;
    bool is_output_Valid() const;

    QList<OAIOverlay> getOverlays() const;
    void setOverlays(const QList<OAIOverlay> &overlays);
    bool is_overlays_Set() const;
    bool is_overlays_Valid() const;

    OAIPubsubDestination getPubsubDestination() const;
    void setPubsubDestination(const OAIPubsubDestination &pubsub_destination);
    bool is_pubsub_destination_Set() const;
    bool is_pubsub_destination_Valid() const;

    QList<OAISpriteSheet> getSpriteSheets() const;
    void setSpriteSheets(const QList<OAISpriteSheet> &sprite_sheets);
    bool is_sprite_sheets_Set() const;
    bool is_sprite_sheets_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAdBreak> m_ad_breaks;
    bool m_ad_breaks_isSet;
    bool m_ad_breaks_isValid;

    QList<OAIEditAtom> m_edit_list;
    bool m_edit_list_isSet;
    bool m_edit_list_isValid;

    QList<OAIElementaryStream> m_elementary_streams;
    bool m_elementary_streams_isSet;
    bool m_elementary_streams_isValid;

    QList<OAIInput> m_inputs;
    bool m_inputs_isSet;
    bool m_inputs_isValid;

    QList<OAIManifest> m_manifests;
    bool m_manifests_isSet;
    bool m_manifests_isValid;

    QList<OAIMuxStream> m_mux_streams;
    bool m_mux_streams_isSet;
    bool m_mux_streams_isValid;

    OAIOutput m_output;
    bool m_output_isSet;
    bool m_output_isValid;

    QList<OAIOverlay> m_overlays;
    bool m_overlays_isSet;
    bool m_overlays_isValid;

    OAIPubsubDestination m_pubsub_destination;
    bool m_pubsub_destination_isSet;
    bool m_pubsub_destination_isValid;

    QList<OAISpriteSheet> m_sprite_sheets;
    bool m_sprite_sheets_isSet;
    bool m_sprite_sheets_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobConfig)

#endif // OAIJobConfig_H
