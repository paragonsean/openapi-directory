/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor::OAIColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor::OAIColor() {
    this->initializeModel();
}

OAIColor::~OAIColor() {}

void OAIColor::initializeModel() {

    m_brightness_isSet = false;
    m_brightness_isValid = false;

    m_contrast_isSet = false;
    m_contrast_isValid = false;

    m_saturation_isSet = false;
    m_saturation_isValid = false;
}

void OAIColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor::fromJsonObject(QJsonObject json) {

    m_brightness_isValid = ::OpenAPI::fromJsonValue(m_brightness, json[QString("brightness")]);
    m_brightness_isSet = !json[QString("brightness")].isNull() && m_brightness_isValid;

    m_contrast_isValid = ::OpenAPI::fromJsonValue(m_contrast, json[QString("contrast")]);
    m_contrast_isSet = !json[QString("contrast")].isNull() && m_contrast_isValid;

    m_saturation_isValid = ::OpenAPI::fromJsonValue(m_saturation, json[QString("saturation")]);
    m_saturation_isSet = !json[QString("saturation")].isNull() && m_saturation_isValid;
}

QString OAIColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor::asJsonObject() const {
    QJsonObject obj;
    if (m_brightness_isSet) {
        obj.insert(QString("brightness"), ::OpenAPI::toJsonValue(m_brightness));
    }
    if (m_contrast_isSet) {
        obj.insert(QString("contrast"), ::OpenAPI::toJsonValue(m_contrast));
    }
    if (m_saturation_isSet) {
        obj.insert(QString("saturation"), ::OpenAPI::toJsonValue(m_saturation));
    }
    return obj;
}

double OAIColor::getBrightness() const {
    return m_brightness;
}
void OAIColor::setBrightness(const double &brightness) {
    m_brightness = brightness;
    m_brightness_isSet = true;
}

bool OAIColor::is_brightness_Set() const{
    return m_brightness_isSet;
}

bool OAIColor::is_brightness_Valid() const{
    return m_brightness_isValid;
}

double OAIColor::getContrast() const {
    return m_contrast;
}
void OAIColor::setContrast(const double &contrast) {
    m_contrast = contrast;
    m_contrast_isSet = true;
}

bool OAIColor::is_contrast_Set() const{
    return m_contrast_isSet;
}

bool OAIColor::is_contrast_Valid() const{
    return m_contrast_isValid;
}

double OAIColor::getSaturation() const {
    return m_saturation;
}
void OAIColor::setSaturation(const double &saturation) {
    m_saturation = saturation;
    m_saturation_isSet = true;
}

bool OAIColor::is_saturation_Set() const{
    return m_saturation_isSet;
}

bool OAIColor::is_saturation_Valid() const{
    return m_saturation_isValid;
}

bool OAIColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brightness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contrast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
