/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgress::OAIProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgress::OAIProgress() {
    this->initializeModel();
}

OAIProgress::~OAIProgress() {}

void OAIProgress::initializeModel() {

    m_analyzed_isSet = false;
    m_analyzed_isValid = false;

    m_encoded_isSet = false;
    m_encoded_isValid = false;

    m_notified_isSet = false;
    m_notified_isValid = false;

    m_uploaded_isSet = false;
    m_uploaded_isValid = false;
}

void OAIProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgress::fromJsonObject(QJsonObject json) {

    m_analyzed_isValid = ::OpenAPI::fromJsonValue(m_analyzed, json[QString("analyzed")]);
    m_analyzed_isSet = !json[QString("analyzed")].isNull() && m_analyzed_isValid;

    m_encoded_isValid = ::OpenAPI::fromJsonValue(m_encoded, json[QString("encoded")]);
    m_encoded_isSet = !json[QString("encoded")].isNull() && m_encoded_isValid;

    m_notified_isValid = ::OpenAPI::fromJsonValue(m_notified, json[QString("notified")]);
    m_notified_isSet = !json[QString("notified")].isNull() && m_notified_isValid;

    m_uploaded_isValid = ::OpenAPI::fromJsonValue(m_uploaded, json[QString("uploaded")]);
    m_uploaded_isSet = !json[QString("uploaded")].isNull() && m_uploaded_isValid;
}

QString OAIProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzed_isSet) {
        obj.insert(QString("analyzed"), ::OpenAPI::toJsonValue(m_analyzed));
    }
    if (m_encoded_isSet) {
        obj.insert(QString("encoded"), ::OpenAPI::toJsonValue(m_encoded));
    }
    if (m_notified_isSet) {
        obj.insert(QString("notified"), ::OpenAPI::toJsonValue(m_notified));
    }
    if (m_uploaded_isSet) {
        obj.insert(QString("uploaded"), ::OpenAPI::toJsonValue(m_uploaded));
    }
    return obj;
}

double OAIProgress::getAnalyzed() const {
    return m_analyzed;
}
void OAIProgress::setAnalyzed(const double &analyzed) {
    m_analyzed = analyzed;
    m_analyzed_isSet = true;
}

bool OAIProgress::is_analyzed_Set() const{
    return m_analyzed_isSet;
}

bool OAIProgress::is_analyzed_Valid() const{
    return m_analyzed_isValid;
}

double OAIProgress::getEncoded() const {
    return m_encoded;
}
void OAIProgress::setEncoded(const double &encoded) {
    m_encoded = encoded;
    m_encoded_isSet = true;
}

bool OAIProgress::is_encoded_Set() const{
    return m_encoded_isSet;
}

bool OAIProgress::is_encoded_Valid() const{
    return m_encoded_isValid;
}

double OAIProgress::getNotified() const {
    return m_notified;
}
void OAIProgress::setNotified(const double &notified) {
    m_notified = notified;
    m_notified_isSet = true;
}

bool OAIProgress::is_notified_Set() const{
    return m_notified_isSet;
}

bool OAIProgress::is_notified_Valid() const{
    return m_notified_isValid;
}

double OAIProgress::getUploaded() const {
    return m_uploaded;
}
void OAIProgress::setUploaded(const double &uploaded) {
    m_uploaded = uploaded;
    m_uploaded_isSet = true;
}

bool OAIProgress::is_uploaded_Set() const{
    return m_uploaded_isSet;
}

bool OAIProgress::is_uploaded_Valid() const{
    return m_uploaded_isValid;
}

bool OAIProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
