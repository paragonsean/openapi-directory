/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudio::OAIAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudio::OAIAudio() {
    this->initializeModel();
}

OAIAudio::~OAIAudio() {}

void OAIAudio::initializeModel() {

    m_high_boost_isSet = false;
    m_high_boost_isValid = false;

    m_low_boost_isSet = false;
    m_low_boost_isValid = false;

    m_lufs_isSet = false;
    m_lufs_isValid = false;
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {

    m_high_boost_isValid = ::OpenAPI::fromJsonValue(m_high_boost, json[QString("highBoost")]);
    m_high_boost_isSet = !json[QString("highBoost")].isNull() && m_high_boost_isValid;

    m_low_boost_isValid = ::OpenAPI::fromJsonValue(m_low_boost, json[QString("lowBoost")]);
    m_low_boost_isSet = !json[QString("lowBoost")].isNull() && m_low_boost_isValid;

    m_lufs_isValid = ::OpenAPI::fromJsonValue(m_lufs, json[QString("lufs")]);
    m_lufs_isSet = !json[QString("lufs")].isNull() && m_lufs_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_high_boost_isSet) {
        obj.insert(QString("highBoost"), ::OpenAPI::toJsonValue(m_high_boost));
    }
    if (m_low_boost_isSet) {
        obj.insert(QString("lowBoost"), ::OpenAPI::toJsonValue(m_low_boost));
    }
    if (m_lufs_isSet) {
        obj.insert(QString("lufs"), ::OpenAPI::toJsonValue(m_lufs));
    }
    return obj;
}

bool OAIAudio::isHighBoost() const {
    return m_high_boost;
}
void OAIAudio::setHighBoost(const bool &high_boost) {
    m_high_boost = high_boost;
    m_high_boost_isSet = true;
}

bool OAIAudio::is_high_boost_Set() const{
    return m_high_boost_isSet;
}

bool OAIAudio::is_high_boost_Valid() const{
    return m_high_boost_isValid;
}

bool OAIAudio::isLowBoost() const {
    return m_low_boost;
}
void OAIAudio::setLowBoost(const bool &low_boost) {
    m_low_boost = low_boost;
    m_low_boost_isSet = true;
}

bool OAIAudio::is_low_boost_Set() const{
    return m_low_boost_isSet;
}

bool OAIAudio::is_low_boost_Valid() const{
    return m_low_boost_isValid;
}

double OAIAudio::getLufs() const {
    return m_lufs;
}
void OAIAudio::setLufs(const double &lufs) {
    m_lufs = lufs;
    m_lufs_isSet = true;
}

bool OAIAudio::is_lufs_Set() const{
    return m_lufs_isSet;
}

bool OAIAudio::is_lufs_Valid() const{
    return m_lufs_isValid;
}

bool OAIAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_boost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lufs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
