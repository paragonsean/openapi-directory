/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverlay::OAIOverlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverlay::OAIOverlay() {
    this->initializeModel();
}

OAIOverlay::~OAIOverlay() {}

void OAIOverlay::initializeModel() {

    m_animations_isSet = false;
    m_animations_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;
}

void OAIOverlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverlay::fromJsonObject(QJsonObject json) {

    m_animations_isValid = ::OpenAPI::fromJsonValue(m_animations, json[QString("animations")]);
    m_animations_isSet = !json[QString("animations")].isNull() && m_animations_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;
}

QString OAIOverlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverlay::asJsonObject() const {
    QJsonObject obj;
    if (m_animations.size() > 0) {
        obj.insert(QString("animations"), ::OpenAPI::toJsonValue(m_animations));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    return obj;
}

QList<OAIAnimation> OAIOverlay::getAnimations() const {
    return m_animations;
}
void OAIOverlay::setAnimations(const QList<OAIAnimation> &animations) {
    m_animations = animations;
    m_animations_isSet = true;
}

bool OAIOverlay::is_animations_Set() const{
    return m_animations_isSet;
}

bool OAIOverlay::is_animations_Valid() const{
    return m_animations_isValid;
}

OAIImage OAIOverlay::getImage() const {
    return m_image;
}
void OAIOverlay::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOverlay::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOverlay::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIOverlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_animations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
