/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FailureDetail from './FailureDetail';
import JobConfig from './JobConfig';
import OriginUri from './OriginUri';
import Progress from './Progress';

/**
 * The Job model module.
 * @module model/Job
 * @version v1beta1
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * Transcoding job resource.
     * @alias module:model/Job
     */
    constructor() { 
        
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();

            if (data.hasOwnProperty('config')) {
                obj['config'] = JobConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('failureDetails')) {
                obj['failureDetails'] = ApiClient.convertToType(data['failureDetails'], [FailureDetail]);
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('inputUri')) {
                obj['inputUri'] = ApiClient.convertToType(data['inputUri'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originUri')) {
                obj['originUri'] = OriginUri.constructFromObject(data['originUri']);
            }
            if (data.hasOwnProperty('outputUri')) {
                obj['outputUri'] = ApiClient.convertToType(data['outputUri'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = Progress.constructFromObject(data['progress']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('ttlAfterCompletionDays')) {
                obj['ttlAfterCompletionDays'] = ApiClient.convertToType(data['ttlAfterCompletionDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          JobConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        if (data['failureDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['failureDetails'])) {
                throw new Error("Expected the field `failureDetails` to be an array in the JSON data but got " + data['failureDetails']);
            }
            // validate the optional field `failureDetails` (array)
            for (const item of data['failureDetails']) {
                FailureDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // ensure the json data is a string
        if (data['inputUri'] && !(typeof data['inputUri'] === 'string' || data['inputUri'] instanceof String)) {
            throw new Error("Expected the field `inputUri` to be a primitive type in the JSON string but got " + data['inputUri']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `originUri`
        if (data['originUri']) { // data not null
          OriginUri.validateJSON(data['originUri']);
        }
        // ensure the json data is a string
        if (data['outputUri'] && !(typeof data['outputUri'] === 'string' || data['outputUri'] instanceof String)) {
            throw new Error("Expected the field `outputUri` to be a primitive type in the JSON string but got " + data['outputUri']);
        }
        // validate the optional field `progress`
        if (data['progress']) { // data not null
          Progress.validateJSON(data['progress']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }

        return true;
    }


}



/**
 * @member {module:model/JobConfig} config
 */
Job.prototype['config'] = undefined;

/**
 * Output only. The time the job was created.
 * @member {String} createTime
 */
Job.prototype['createTime'] = undefined;

/**
 * Output only. The time the transcoding finished.
 * @member {String} endTime
 */
Job.prototype['endTime'] = undefined;

/**
 * Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available.
 * @member {Array.<module:model/FailureDetail>} failureDetails
 */
Job.prototype['failureDetails'] = undefined;

/**
 * Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.
 * @member {String} failureReason
 */
Job.prototype['failureReason'] = undefined;

/**
 * Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).
 * @member {String} inputUri
 */
Job.prototype['inputUri'] = undefined;

/**
 * The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`
 * @member {String} name
 */
Job.prototype['name'] = undefined;

/**
 * @member {module:model/OriginUri} originUri
 */
Job.prototype['originUri'] = undefined;

/**
 * Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`.
 * @member {String} outputUri
 */
Job.prototype['outputUri'] = undefined;

/**
 * Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.
 * @member {Number} priority
 */
Job.prototype['priority'] = undefined;

/**
 * @member {module:model/Progress} progress
 */
Job.prototype['progress'] = undefined;

/**
 * Output only. The time the transcoding started.
 * @member {String} startTime
 */
Job.prototype['startTime'] = undefined;

/**
 * Output only. The current state of the job.
 * @member {module:model/Job.StateEnum} state
 */
Job.prototype['state'] = undefined;

/**
 * Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
 * @member {String} templateId
 */
Job.prototype['templateId'] = undefined;

/**
 * Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
 * @member {Number} ttlAfterCompletionDays
 */
Job.prototype['ttlAfterCompletionDays'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Job['StateEnum'] = {

    /**
     * value: "PROCESSING_STATE_UNSPECIFIED"
     * @const
     */
    "PROCESSING_STATE_UNSPECIFIED": "PROCESSING_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Job;

