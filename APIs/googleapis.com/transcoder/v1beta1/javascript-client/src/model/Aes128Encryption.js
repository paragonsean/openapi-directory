/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Aes128Encryption model module.
 * @module model/Aes128Encryption
 * @version v1beta1
 */
class Aes128Encryption {
    /**
     * Constructs a new <code>Aes128Encryption</code>.
     * Configuration for AES-128 encryption.
     * @alias module:model/Aes128Encryption
     */
    constructor() { 
        
        Aes128Encryption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aes128Encryption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aes128Encryption} obj Optional instance to populate.
     * @return {module:model/Aes128Encryption} The populated <code>Aes128Encryption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aes128Encryption();

            if (data.hasOwnProperty('keyUri')) {
                obj['keyUri'] = ApiClient.convertToType(data['keyUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aes128Encryption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aes128Encryption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyUri'] && !(typeof data['keyUri'] === 'string' || data['keyUri'] instanceof String)) {
            throw new Error("Expected the field `keyUri` to be a primitive type in the JSON string but got " + data['keyUri']);
        }

        return true;
    }


}



/**
 * Required. URI of the key delivery service. This URI is inserted into the M3U8 header.
 * @member {String} keyUri
 */
Aes128Encryption.prototype['keyUri'] = undefined;






export default Aes128Encryption;

