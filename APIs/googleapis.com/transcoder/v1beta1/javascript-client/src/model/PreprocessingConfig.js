/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Audio from './Audio';
import Color from './Color';
import Crop from './Crop';
import Deblock from './Deblock';
import Denoise from './Denoise';
import Pad from './Pad';

/**
 * The PreprocessingConfig model module.
 * @module model/PreprocessingConfig
 * @version v1beta1
 */
class PreprocessingConfig {
    /**
     * Constructs a new <code>PreprocessingConfig</code>.
     * Preprocessing configurations.
     * @alias module:model/PreprocessingConfig
     */
    constructor() { 
        
        PreprocessingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PreprocessingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PreprocessingConfig} obj Optional instance to populate.
     * @return {module:model/PreprocessingConfig} The populated <code>PreprocessingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PreprocessingConfig();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = Audio.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('crop')) {
                obj['crop'] = Crop.constructFromObject(data['crop']);
            }
            if (data.hasOwnProperty('deblock')) {
                obj['deblock'] = Deblock.constructFromObject(data['deblock']);
            }
            if (data.hasOwnProperty('denoise')) {
                obj['denoise'] = Denoise.constructFromObject(data['denoise']);
            }
            if (data.hasOwnProperty('pad')) {
                obj['pad'] = Pad.constructFromObject(data['pad']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PreprocessingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PreprocessingConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          Audio.validateJSON(data['audio']);
        }
        // validate the optional field `color`
        if (data['color']) { // data not null
          Color.validateJSON(data['color']);
        }
        // validate the optional field `crop`
        if (data['crop']) { // data not null
          Crop.validateJSON(data['crop']);
        }
        // validate the optional field `deblock`
        if (data['deblock']) { // data not null
          Deblock.validateJSON(data['deblock']);
        }
        // validate the optional field `denoise`
        if (data['denoise']) { // data not null
          Denoise.validateJSON(data['denoise']);
        }
        // validate the optional field `pad`
        if (data['pad']) { // data not null
          Pad.validateJSON(data['pad']);
        }

        return true;
    }


}



/**
 * @member {module:model/Audio} audio
 */
PreprocessingConfig.prototype['audio'] = undefined;

/**
 * @member {module:model/Color} color
 */
PreprocessingConfig.prototype['color'] = undefined;

/**
 * @member {module:model/Crop} crop
 */
PreprocessingConfig.prototype['crop'] = undefined;

/**
 * @member {module:model/Deblock} deblock
 */
PreprocessingConfig.prototype['deblock'] = undefined;

/**
 * @member {module:model/Denoise} denoise
 */
PreprocessingConfig.prototype['denoise'] = undefined;

/**
 * @member {module:model/Pad} pad
 */
PreprocessingConfig.prototype['pad'] = undefined;






export default PreprocessingConfig;

