/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Manifest model module.
 * @module model/Manifest
 * @version v1beta1
 */
class Manifest {
    /**
     * Constructs a new <code>Manifest</code>.
     * Manifest configuration.
     * @alias module:model/Manifest
     */
    constructor() { 
        
        Manifest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Manifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Manifest} obj Optional instance to populate.
     * @return {module:model/Manifest} The populated <code>Manifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Manifest();

            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('muxStreams')) {
                obj['muxStreams'] = ApiClient.convertToType(data['muxStreams'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Manifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Manifest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['muxStreams'])) {
            throw new Error("Expected the field `muxStreams` to be an array in the JSON data but got " + data['muxStreams']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the generated file. The default is `\"manifest\"` with the extension suffix corresponding to the `Manifest.type`.
 * @member {String} fileName
 */
Manifest.prototype['fileName'] = undefined;

/**
 * Required. List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
 * @member {Array.<String>} muxStreams
 */
Manifest.prototype['muxStreams'] = undefined;

/**
 * Required. Type of the manifest, can be \"HLS\" or \"DASH\".
 * @member {module:model/Manifest.TypeEnum} type
 */
Manifest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Manifest['TypeEnum'] = {

    /**
     * value: "MANIFEST_TYPE_UNSPECIFIED"
     * @const
     */
    "MANIFEST_TYPE_UNSPECIFIED": "MANIFEST_TYPE_UNSPECIFIED",

    /**
     * value: "HLS"
     * @const
     */
    "HLS": "HLS",

    /**
     * value: "DASH"
     * @const
     */
    "DASH": "DASH"
};



export default Manifest;

