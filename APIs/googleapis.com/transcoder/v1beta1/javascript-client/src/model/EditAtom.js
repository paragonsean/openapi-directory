/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EditAtom model module.
 * @module model/EditAtom
 * @version v1beta1
 */
class EditAtom {
    /**
     * Constructs a new <code>EditAtom</code>.
     * Edit atom.
     * @alias module:model/EditAtom
     */
    constructor() { 
        
        EditAtom.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditAtom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditAtom} obj Optional instance to populate.
     * @return {module:model/EditAtom} The populated <code>EditAtom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditAtom();

            if (data.hasOwnProperty('endTimeOffset')) {
                obj['endTimeOffset'] = ApiClient.convertToType(data['endTimeOffset'], 'String');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], ['String']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('startTimeOffset')) {
                obj['startTimeOffset'] = ApiClient.convertToType(data['startTimeOffset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditAtom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditAtom</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTimeOffset'] && !(typeof data['endTimeOffset'] === 'string' || data['endTimeOffset'] instanceof String)) {
            throw new Error("Expected the field `endTimeOffset` to be a primitive type in the JSON string but got " + data['endTimeOffset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputs'])) {
            throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['startTimeOffset'] && !(typeof data['startTimeOffset'] === 'string' || data['startTimeOffset'] instanceof String)) {
            throw new Error("Expected the field `startTimeOffset` to be a primitive type in the JSON string but got " + data['startTimeOffset']);
        }

        return true;
    }


}



/**
 * End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
 * @member {String} endTimeOffset
 */
EditAtom.prototype['endTimeOffset'] = undefined;

/**
 * List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
 * @member {Array.<String>} inputs
 */
EditAtom.prototype['inputs'] = undefined;

/**
 * A unique key for this atom. Must be specified when using advanced mapping.
 * @member {String} key
 */
EditAtom.prototype['key'] = undefined;

/**
 * Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
 * @member {String} startTimeOffset
 */
EditAtom.prototype['startTimeOffset'] = undefined;






export default EditAtom;

