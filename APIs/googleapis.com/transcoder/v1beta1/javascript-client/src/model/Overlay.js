/**
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Animation from './Animation';
import Image from './Image';

/**
 * The Overlay model module.
 * @module model/Overlay
 * @version v1beta1
 */
class Overlay {
    /**
     * Constructs a new <code>Overlay</code>.
     * Overlay configuration.
     * @alias module:model/Overlay
     */
    constructor() { 
        
        Overlay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Overlay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Overlay} obj Optional instance to populate.
     * @return {module:model/Overlay} The populated <code>Overlay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Overlay();

            if (data.hasOwnProperty('animations')) {
                obj['animations'] = ApiClient.convertToType(data['animations'], [Animation]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Overlay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Overlay</code>.
     */
    static validateJSON(data) {
        if (data['animations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['animations'])) {
                throw new Error("Expected the field `animations` to be an array in the JSON data but got " + data['animations']);
            }
            // validate the optional field `animations` (array)
            for (const item of data['animations']) {
                Animation.validateJSON(item);
            };
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }

        return true;
    }


}



/**
 * List of Animations. The list should be chronological, without any time overlap.
 * @member {Array.<module:model/Animation>} animations
 */
Overlay.prototype['animations'] = undefined;

/**
 * @member {module:model/Image} image
 */
Overlay.prototype['image'] = undefined;






export default Overlay;

