# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Aes128Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_uri: str=None):
        """Aes128Encryption - a model defined in OpenAPI

        :param key_uri: The key_uri of this Aes128Encryption.
        """
        self.openapi_types = {
            'key_uri': str
        }

        self.attribute_map = {
            'key_uri': 'keyUri'
        }

        self._key_uri = key_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aes128Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Aes128Encryption of this Aes128Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_uri(self):
        """Gets the key_uri of this Aes128Encryption.

        Required. URI of the key delivery service. This URI is inserted into the M3U8 header.

        :return: The key_uri of this Aes128Encryption.
        :rtype: str
        """
        return self._key_uri

    @key_uri.setter
    def key_uri(self, key_uri):
        """Sets the key_uri of this Aes128Encryption.

        Required. URI of the key delivery service. This URI is inserted into the M3U8 header.

        :param key_uri: The key_uri of this Aes128Encryption.
        :type key_uri: str
        """

        self._key_uri = key_uri
