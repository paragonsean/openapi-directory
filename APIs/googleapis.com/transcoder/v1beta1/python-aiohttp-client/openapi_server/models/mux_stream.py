# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption import Encryption
from openapi_server.models.segment_settings import SegmentSettings
from openapi_server import util


class MuxStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, elementary_streams: List[str]=None, encryption: Encryption=None, file_name: str=None, key: str=None, segment_settings: SegmentSettings=None):
        """MuxStream - a model defined in OpenAPI

        :param container: The container of this MuxStream.
        :param elementary_streams: The elementary_streams of this MuxStream.
        :param encryption: The encryption of this MuxStream.
        :param file_name: The file_name of this MuxStream.
        :param key: The key of this MuxStream.
        :param segment_settings: The segment_settings of this MuxStream.
        """
        self.openapi_types = {
            'container': str,
            'elementary_streams': List[str],
            'encryption': Encryption,
            'file_name': str,
            'key': str,
            'segment_settings': SegmentSettings
        }

        self.attribute_map = {
            'container': 'container',
            'elementary_streams': 'elementaryStreams',
            'encryption': 'encryption',
            'file_name': 'fileName',
            'key': 'key',
            'segment_settings': 'segmentSettings'
        }

        self._container = container
        self._elementary_streams = elementary_streams
        self._encryption = encryption
        self._file_name = file_name
        self._key = key
        self._segment_settings = segment_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MuxStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MuxStream of this MuxStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this MuxStream.

        The container format. The default is `\"mp4\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\".m4s\"` - 'mp4' - 'vtt'

        :return: The container of this MuxStream.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this MuxStream.

        The container format. The default is `\"mp4\"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `\".m4s\"` - 'mp4' - 'vtt'

        :param container: The container of this MuxStream.
        :type container: str
        """

        self._container = container

    @property
    def elementary_streams(self):
        """Gets the elementary_streams of this MuxStream.

        List of `ElementaryStream.key`s multiplexed in this stream.

        :return: The elementary_streams of this MuxStream.
        :rtype: List[str]
        """
        return self._elementary_streams

    @elementary_streams.setter
    def elementary_streams(self, elementary_streams):
        """Sets the elementary_streams of this MuxStream.

        List of `ElementaryStream.key`s multiplexed in this stream.

        :param elementary_streams: The elementary_streams of this MuxStream.
        :type elementary_streams: List[str]
        """

        self._elementary_streams = elementary_streams

    @property
    def encryption(self):
        """Gets the encryption of this MuxStream.


        :return: The encryption of this MuxStream.
        :rtype: Encryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this MuxStream.


        :param encryption: The encryption of this MuxStream.
        :type encryption: Encryption
        """

        self._encryption = encryption

    @property
    def file_name(self):
        """Gets the file_name of this MuxStream.

        The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"mux_stream0000000123.ts\"`.

        :return: The file_name of this MuxStream.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this MuxStream.

        The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `\"mux_stream0000000123.ts\"`.

        :param file_name: The file_name of this MuxStream.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def key(self):
        """Gets the key of this MuxStream.

        A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\".m3u8\"` extension suffix.

        :return: The key of this MuxStream.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MuxStream.

        A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `\".m3u8\"` extension suffix.

        :param key: The key of this MuxStream.
        :type key: str
        """

        self._key = key

    @property
    def segment_settings(self):
        """Gets the segment_settings of this MuxStream.


        :return: The segment_settings of this MuxStream.
        :rtype: SegmentSettings
        """
        return self._segment_settings

    @segment_settings.setter
    def segment_settings(self, segment_settings):
        """Sets the segment_settings of this MuxStream.


        :param segment_settings: The segment_settings of this MuxStream.
        :type segment_settings: SegmentSettings
        """

        self._segment_settings = segment_settings
