# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Color(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brightness: float=None, contrast: float=None, saturation: float=None):
        """Color - a model defined in OpenAPI

        :param brightness: The brightness of this Color.
        :param contrast: The contrast of this Color.
        :param saturation: The saturation of this Color.
        """
        self.openapi_types = {
            'brightness': float,
            'contrast': float,
            'saturation': float
        }

        self.attribute_map = {
            'brightness': 'brightness',
            'contrast': 'contrast',
            'saturation': 'saturation'
        }

        self._brightness = brightness
        self._contrast = contrast
        self._saturation = saturation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Color':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Color of this Color.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brightness(self):
        """Gets the brightness of this Color.

        Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.

        :return: The brightness of this Color.
        :rtype: float
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this Color.

        Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.

        :param brightness: The brightness of this Color.
        :type brightness: float
        """

        self._brightness = brightness

    @property
    def contrast(self):
        """Gets the contrast of this Color.

        Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.

        :return: The contrast of this Color.
        :rtype: float
        """
        return self._contrast

    @contrast.setter
    def contrast(self, contrast):
        """Sets the contrast of this Color.

        Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.

        :param contrast: The contrast of this Color.
        :type contrast: float
        """

        self._contrast = contrast

    @property
    def saturation(self):
        """Gets the saturation of this Color.

        Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.

        :return: The saturation of this Color.
        :rtype: float
        """
        return self._saturation

    @saturation.setter
    def saturation(self, saturation):
        """Sets the saturation of this Color.

        Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.

        :param saturation: The saturation of this Color.
        :type saturation: float
        """

        self._saturation = saturation
