# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Progress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed: float=None, encoded: float=None, notified: float=None, uploaded: float=None):
        """Progress - a model defined in OpenAPI

        :param analyzed: The analyzed of this Progress.
        :param encoded: The encoded of this Progress.
        :param notified: The notified of this Progress.
        :param uploaded: The uploaded of this Progress.
        """
        self.openapi_types = {
            'analyzed': float,
            'encoded': float,
            'notified': float,
            'uploaded': float
        }

        self.attribute_map = {
            'analyzed': 'analyzed',
            'encoded': 'encoded',
            'notified': 'notified',
            'uploaded': 'uploaded'
        }

        self._analyzed = analyzed
        self._encoded = encoded
        self._notified = notified
        self._uploaded = uploaded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Progress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Progress of this Progress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed(self):
        """Gets the analyzed of this Progress.

        Estimated fractional progress for `analyzing` step.

        :return: The analyzed of this Progress.
        :rtype: float
        """
        return self._analyzed

    @analyzed.setter
    def analyzed(self, analyzed):
        """Sets the analyzed of this Progress.

        Estimated fractional progress for `analyzing` step.

        :param analyzed: The analyzed of this Progress.
        :type analyzed: float
        """

        self._analyzed = analyzed

    @property
    def encoded(self):
        """Gets the encoded of this Progress.

        Estimated fractional progress for `encoding` step.

        :return: The encoded of this Progress.
        :rtype: float
        """
        return self._encoded

    @encoded.setter
    def encoded(self, encoded):
        """Sets the encoded of this Progress.

        Estimated fractional progress for `encoding` step.

        :param encoded: The encoded of this Progress.
        :type encoded: float
        """

        self._encoded = encoded

    @property
    def notified(self):
        """Gets the notified of this Progress.

        Estimated fractional progress for `notifying` step.

        :return: The notified of this Progress.
        :rtype: float
        """
        return self._notified

    @notified.setter
    def notified(self, notified):
        """Sets the notified of this Progress.

        Estimated fractional progress for `notifying` step.

        :param notified: The notified of this Progress.
        :type notified: float
        """

        self._notified = notified

    @property
    def uploaded(self):
        """Gets the uploaded of this Progress.

        Estimated fractional progress for `uploading` step.

        :return: The uploaded of this Progress.
        :rtype: float
        """
        return self._uploaded

    @uploaded.setter
    def uploaded(self, uploaded):
        """Sets the uploaded of this Progress.

        Estimated fractional progress for `uploading` step.

        :param uploaded: The uploaded of this Progress.
        :type uploaded: float
        """

        self._uploaded = uploaded
