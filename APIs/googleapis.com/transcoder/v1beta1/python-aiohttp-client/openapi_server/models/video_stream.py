# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_open_gop: bool=None, aq_strength: float=None, b_frame_count: int=None, b_pyramid: bool=None, bitrate_bps: int=None, codec: str=None, crf_level: int=None, enable_two_pass: bool=None, entropy_coder: str=None, frame_rate: float=None, gop_duration: str=None, gop_frame_count: int=None, height_pixels: int=None, pixel_format: str=None, preset: str=None, profile: str=None, rate_control_mode: str=None, tune: str=None, vbv_fullness_bits: int=None, vbv_size_bits: int=None, width_pixels: int=None):
        """VideoStream - a model defined in OpenAPI

        :param allow_open_gop: The allow_open_gop of this VideoStream.
        :param aq_strength: The aq_strength of this VideoStream.
        :param b_frame_count: The b_frame_count of this VideoStream.
        :param b_pyramid: The b_pyramid of this VideoStream.
        :param bitrate_bps: The bitrate_bps of this VideoStream.
        :param codec: The codec of this VideoStream.
        :param crf_level: The crf_level of this VideoStream.
        :param enable_two_pass: The enable_two_pass of this VideoStream.
        :param entropy_coder: The entropy_coder of this VideoStream.
        :param frame_rate: The frame_rate of this VideoStream.
        :param gop_duration: The gop_duration of this VideoStream.
        :param gop_frame_count: The gop_frame_count of this VideoStream.
        :param height_pixels: The height_pixels of this VideoStream.
        :param pixel_format: The pixel_format of this VideoStream.
        :param preset: The preset of this VideoStream.
        :param profile: The profile of this VideoStream.
        :param rate_control_mode: The rate_control_mode of this VideoStream.
        :param tune: The tune of this VideoStream.
        :param vbv_fullness_bits: The vbv_fullness_bits of this VideoStream.
        :param vbv_size_bits: The vbv_size_bits of this VideoStream.
        :param width_pixels: The width_pixels of this VideoStream.
        """
        self.openapi_types = {
            'allow_open_gop': bool,
            'aq_strength': float,
            'b_frame_count': int,
            'b_pyramid': bool,
            'bitrate_bps': int,
            'codec': str,
            'crf_level': int,
            'enable_two_pass': bool,
            'entropy_coder': str,
            'frame_rate': float,
            'gop_duration': str,
            'gop_frame_count': int,
            'height_pixels': int,
            'pixel_format': str,
            'preset': str,
            'profile': str,
            'rate_control_mode': str,
            'tune': str,
            'vbv_fullness_bits': int,
            'vbv_size_bits': int,
            'width_pixels': int
        }

        self.attribute_map = {
            'allow_open_gop': 'allowOpenGop',
            'aq_strength': 'aqStrength',
            'b_frame_count': 'bFrameCount',
            'b_pyramid': 'bPyramid',
            'bitrate_bps': 'bitrateBps',
            'codec': 'codec',
            'crf_level': 'crfLevel',
            'enable_two_pass': 'enableTwoPass',
            'entropy_coder': 'entropyCoder',
            'frame_rate': 'frameRate',
            'gop_duration': 'gopDuration',
            'gop_frame_count': 'gopFrameCount',
            'height_pixels': 'heightPixels',
            'pixel_format': 'pixelFormat',
            'preset': 'preset',
            'profile': 'profile',
            'rate_control_mode': 'rateControlMode',
            'tune': 'tune',
            'vbv_fullness_bits': 'vbvFullnessBits',
            'vbv_size_bits': 'vbvSizeBits',
            'width_pixels': 'widthPixels'
        }

        self._allow_open_gop = allow_open_gop
        self._aq_strength = aq_strength
        self._b_frame_count = b_frame_count
        self._b_pyramid = b_pyramid
        self._bitrate_bps = bitrate_bps
        self._codec = codec
        self._crf_level = crf_level
        self._enable_two_pass = enable_two_pass
        self._entropy_coder = entropy_coder
        self._frame_rate = frame_rate
        self._gop_duration = gop_duration
        self._gop_frame_count = gop_frame_count
        self._height_pixels = height_pixels
        self._pixel_format = pixel_format
        self._preset = preset
        self._profile = profile
        self._rate_control_mode = rate_control_mode
        self._tune = tune
        self._vbv_fullness_bits = vbv_fullness_bits
        self._vbv_size_bits = vbv_size_bits
        self._width_pixels = width_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoStream of this VideoStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_open_gop(self):
        """Gets the allow_open_gop of this VideoStream.

        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.

        :return: The allow_open_gop of this VideoStream.
        :rtype: bool
        """
        return self._allow_open_gop

    @allow_open_gop.setter
    def allow_open_gop(self, allow_open_gop):
        """Sets the allow_open_gop of this VideoStream.

        Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.

        :param allow_open_gop: The allow_open_gop of this VideoStream.
        :type allow_open_gop: bool
        """

        self._allow_open_gop = allow_open_gop

    @property
    def aq_strength(self):
        """Gets the aq_strength of this VideoStream.

        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.

        :return: The aq_strength of this VideoStream.
        :rtype: float
        """
        return self._aq_strength

    @aq_strength.setter
    def aq_strength(self, aq_strength):
        """Sets the aq_strength of this VideoStream.

        Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.

        :param aq_strength: The aq_strength of this VideoStream.
        :type aq_strength: float
        """

        self._aq_strength = aq_strength

    @property
    def b_frame_count(self):
        """Gets the b_frame_count of this VideoStream.

        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.

        :return: The b_frame_count of this VideoStream.
        :rtype: int
        """
        return self._b_frame_count

    @b_frame_count.setter
    def b_frame_count(self, b_frame_count):
        """Sets the b_frame_count of this VideoStream.

        The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.

        :param b_frame_count: The b_frame_count of this VideoStream.
        :type b_frame_count: int
        """

        self._b_frame_count = b_frame_count

    @property
    def b_pyramid(self):
        """Gets the b_pyramid of this VideoStream.

        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.

        :return: The b_pyramid of this VideoStream.
        :rtype: bool
        """
        return self._b_pyramid

    @b_pyramid.setter
    def b_pyramid(self, b_pyramid):
        """Sets the b_pyramid of this VideoStream.

        Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.

        :param b_pyramid: The b_pyramid of this VideoStream.
        :type b_pyramid: bool
        """

        self._b_pyramid = b_pyramid

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this VideoStream.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.

        :return: The bitrate_bps of this VideoStream.
        :rtype: int
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this VideoStream.

        Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.

        :param bitrate_bps: The bitrate_bps of this VideoStream.
        :type bitrate_bps: int
        """

        self._bitrate_bps = bitrate_bps

    @property
    def codec(self):
        """Gets the codec of this VideoStream.

        Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`

        :return: The codec of this VideoStream.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this VideoStream.

        Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`

        :param codec: The codec of this VideoStream.
        :type codec: str
        """

        self._codec = codec

    @property
    def crf_level(self):
        """Gets the crf_level of this VideoStream.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.

        :return: The crf_level of this VideoStream.
        :rtype: int
        """
        return self._crf_level

    @crf_level.setter
    def crf_level(self, crf_level):
        """Sets the crf_level of this VideoStream.

        Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.

        :param crf_level: The crf_level of this VideoStream.
        :type crf_level: int
        """

        self._crf_level = crf_level

    @property
    def enable_two_pass(self):
        """Gets the enable_two_pass of this VideoStream.

        Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `\"vbr\"`. The default is `false`.

        :return: The enable_two_pass of this VideoStream.
        :rtype: bool
        """
        return self._enable_two_pass

    @enable_two_pass.setter
    def enable_two_pass(self, enable_two_pass):
        """Sets the enable_two_pass of this VideoStream.

        Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `\"vbr\"`. The default is `false`.

        :param enable_two_pass: The enable_two_pass of this VideoStream.
        :type enable_two_pass: bool
        """

        self._enable_two_pass = enable_two_pass

    @property
    def entropy_coder(self):
        """Gets the entropy_coder of this VideoStream.

        The entropy coder to use. The default is `\"cabac\"`. Supported entropy coders: - 'cavlc' - 'cabac'

        :return: The entropy_coder of this VideoStream.
        :rtype: str
        """
        return self._entropy_coder

    @entropy_coder.setter
    def entropy_coder(self, entropy_coder):
        """Sets the entropy_coder of this VideoStream.

        The entropy coder to use. The default is `\"cabac\"`. Supported entropy coders: - 'cavlc' - 'cabac'

        :param entropy_coder: The entropy_coder of this VideoStream.
        :type entropy_coder: str
        """

        self._entropy_coder = entropy_coder

    @property
    def frame_rate(self):
        """Gets the frame_rate of this VideoStream.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.

        :return: The frame_rate of this VideoStream.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this VideoStream.

        Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.

        :param frame_rate: The frame_rate of this VideoStream.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def gop_duration(self):
        """Gets the gop_duration of this VideoStream.

        Select the GOP size based on the specified duration. The default is `\"3s\"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :return: The gop_duration of this VideoStream.
        :rtype: str
        """
        return self._gop_duration

    @gop_duration.setter
    def gop_duration(self, gop_duration):
        """Sets the gop_duration of this VideoStream.

        Select the GOP size based on the specified duration. The default is `\"3s\"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.

        :param gop_duration: The gop_duration of this VideoStream.
        :type gop_duration: str
        """

        self._gop_duration = gop_duration

    @property
    def gop_frame_count(self):
        """Gets the gop_frame_count of this VideoStream.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :return: The gop_frame_count of this VideoStream.
        :rtype: int
        """
        return self._gop_frame_count

    @gop_frame_count.setter
    def gop_frame_count(self, gop_frame_count):
        """Sets the gop_frame_count of this VideoStream.

        Select the GOP size based on the specified frame count. Must be greater than zero.

        :param gop_frame_count: The gop_frame_count of this VideoStream.
        :type gop_frame_count: int
        """

        self._gop_frame_count = gop_frame_count

    @property
    def height_pixels(self):
        """Gets the height_pixels of this VideoStream.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.

        :return: The height_pixels of this VideoStream.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this VideoStream.

        The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.

        :param height_pixels: The height_pixels of this VideoStream.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def pixel_format(self):
        """Gets the pixel_format of this VideoStream.

        Pixel format to use. The default is `\"yuv420p\"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.

        :return: The pixel_format of this VideoStream.
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format):
        """Sets the pixel_format of this VideoStream.

        Pixel format to use. The default is `\"yuv420p\"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.

        :param pixel_format: The pixel_format of this VideoStream.
        :type pixel_format: str
        """

        self._pixel_format = pixel_format

    @property
    def preset(self):
        """Gets the preset of this VideoStream.

        Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :return: The preset of this VideoStream.
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this VideoStream.

        Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :param preset: The preset of this VideoStream.
        :type preset: str
        """

        self._preset = preset

    @property
    def profile(self):
        """Gets the profile of this VideoStream.

        Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :return: The profile of this VideoStream.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VideoStream.

        Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :param profile: The profile of this VideoStream.
        :type profile: str
        """

        self._profile = profile

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this VideoStream.

        Specify the `rate_control_mode`. The default is `\"vbr\"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor

        :return: The rate_control_mode of this VideoStream.
        :rtype: str
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this VideoStream.

        Specify the `rate_control_mode`. The default is `\"vbr\"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor

        :param rate_control_mode: The rate_control_mode of this VideoStream.
        :type rate_control_mode: str
        """

        self._rate_control_mode = rate_control_mode

    @property
    def tune(self):
        """Gets the tune of this VideoStream.

        Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :return: The tune of this VideoStream.
        :rtype: str
        """
        return self._tune

    @tune.setter
    def tune(self, tune):
        """Sets the tune of this VideoStream.

        Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.

        :param tune: The tune of this VideoStream.
        :type tune: str
        """

        self._tune = tune

    @property
    def vbv_fullness_bits(self):
        """Gets the vbv_fullness_bits of this VideoStream.

        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.

        :return: The vbv_fullness_bits of this VideoStream.
        :rtype: int
        """
        return self._vbv_fullness_bits

    @vbv_fullness_bits.setter
    def vbv_fullness_bits(self, vbv_fullness_bits):
        """Sets the vbv_fullness_bits of this VideoStream.

        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.

        :param vbv_fullness_bits: The vbv_fullness_bits of this VideoStream.
        :type vbv_fullness_bits: int
        """

        self._vbv_fullness_bits = vbv_fullness_bits

    @property
    def vbv_size_bits(self):
        """Gets the vbv_size_bits of this VideoStream.

        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.

        :return: The vbv_size_bits of this VideoStream.
        :rtype: int
        """
        return self._vbv_size_bits

    @vbv_size_bits.setter
    def vbv_size_bits(self, vbv_size_bits):
        """Sets the vbv_size_bits of this VideoStream.

        Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.

        :param vbv_size_bits: The vbv_size_bits of this VideoStream.
        :type vbv_size_bits: int
        """

        self._vbv_size_bits = vbv_size_bits

    @property
    def width_pixels(self):
        """Gets the width_pixels of this VideoStream.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.

        :return: The width_pixels of this VideoStream.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this VideoStream.

        The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.

        :param width_pixels: The width_pixels of this VideoStream.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels
