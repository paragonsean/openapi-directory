# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aes128_encryption import Aes128Encryption
from openapi_server.models.mpeg_common_encryption import MpegCommonEncryption
from openapi_server.models.sample_aes_encryption import SampleAesEncryption
from openapi_server import util


class Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aes128: Aes128Encryption=None, iv: str=None, key: str=None, mpeg_cenc: MpegCommonEncryption=None, sample_aes: SampleAesEncryption=None):
        """Encryption - a model defined in OpenAPI

        :param aes128: The aes128 of this Encryption.
        :param iv: The iv of this Encryption.
        :param key: The key of this Encryption.
        :param mpeg_cenc: The mpeg_cenc of this Encryption.
        :param sample_aes: The sample_aes of this Encryption.
        """
        self.openapi_types = {
            'aes128': Aes128Encryption,
            'iv': str,
            'key': str,
            'mpeg_cenc': MpegCommonEncryption,
            'sample_aes': SampleAesEncryption
        }

        self.attribute_map = {
            'aes128': 'aes128',
            'iv': 'iv',
            'key': 'key',
            'mpeg_cenc': 'mpegCenc',
            'sample_aes': 'sampleAes'
        }

        self._aes128 = aes128
        self._iv = iv
        self._key = key
        self._mpeg_cenc = mpeg_cenc
        self._sample_aes = sample_aes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Encryption of this Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aes128(self):
        """Gets the aes128 of this Encryption.


        :return: The aes128 of this Encryption.
        :rtype: Aes128Encryption
        """
        return self._aes128

    @aes128.setter
    def aes128(self, aes128):
        """Sets the aes128 of this Encryption.


        :param aes128: The aes128 of this Encryption.
        :type aes128: Aes128Encryption
        """

        self._aes128 = aes128

    @property
    def iv(self):
        """Gets the iv of this Encryption.

        Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.

        :return: The iv of this Encryption.
        :rtype: str
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this Encryption.

        Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.

        :param iv: The iv of this Encryption.
        :type iv: str
        """

        self._iv = iv

    @property
    def key(self):
        """Gets the key of this Encryption.

        Required. 128 bit encryption key represented as lowercase hexadecimal digits.

        :return: The key of this Encryption.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Encryption.

        Required. 128 bit encryption key represented as lowercase hexadecimal digits.

        :param key: The key of this Encryption.
        :type key: str
        """

        self._key = key

    @property
    def mpeg_cenc(self):
        """Gets the mpeg_cenc of this Encryption.


        :return: The mpeg_cenc of this Encryption.
        :rtype: MpegCommonEncryption
        """
        return self._mpeg_cenc

    @mpeg_cenc.setter
    def mpeg_cenc(self, mpeg_cenc):
        """Sets the mpeg_cenc of this Encryption.


        :param mpeg_cenc: The mpeg_cenc of this Encryption.
        :type mpeg_cenc: MpegCommonEncryption
        """

        self._mpeg_cenc = mpeg_cenc

    @property
    def sample_aes(self):
        """Gets the sample_aes of this Encryption.


        :return: The sample_aes of this Encryption.
        :rtype: SampleAesEncryption
        """
        return self._sample_aes

    @sample_aes.setter
    def sample_aes(self, sample_aes):
        """Sets the sample_aes of this Encryption.


        :param sample_aes: The sample_aes of this Encryption.
        :type sample_aes: SampleAesEncryption
        """

        self._sample_aes = sample_aes
