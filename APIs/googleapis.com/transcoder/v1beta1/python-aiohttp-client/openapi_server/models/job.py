# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_detail import FailureDetail
from openapi_server.models.job_config import JobConfig
from openapi_server.models.origin_uri import OriginUri
from openapi_server.models.progress import Progress
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: JobConfig=None, create_time: str=None, end_time: str=None, failure_details: List[FailureDetail]=None, failure_reason: str=None, input_uri: str=None, name: str=None, origin_uri: OriginUri=None, output_uri: str=None, priority: int=None, progress: Progress=None, start_time: str=None, state: str=None, template_id: str=None, ttl_after_completion_days: int=None):
        """Job - a model defined in OpenAPI

        :param config: The config of this Job.
        :param create_time: The create_time of this Job.
        :param end_time: The end_time of this Job.
        :param failure_details: The failure_details of this Job.
        :param failure_reason: The failure_reason of this Job.
        :param input_uri: The input_uri of this Job.
        :param name: The name of this Job.
        :param origin_uri: The origin_uri of this Job.
        :param output_uri: The output_uri of this Job.
        :param priority: The priority of this Job.
        :param progress: The progress of this Job.
        :param start_time: The start_time of this Job.
        :param state: The state of this Job.
        :param template_id: The template_id of this Job.
        :param ttl_after_completion_days: The ttl_after_completion_days of this Job.
        """
        self.openapi_types = {
            'config': JobConfig,
            'create_time': str,
            'end_time': str,
            'failure_details': List[FailureDetail],
            'failure_reason': str,
            'input_uri': str,
            'name': str,
            'origin_uri': OriginUri,
            'output_uri': str,
            'priority': int,
            'progress': Progress,
            'start_time': str,
            'state': str,
            'template_id': str,
            'ttl_after_completion_days': int
        }

        self.attribute_map = {
            'config': 'config',
            'create_time': 'createTime',
            'end_time': 'endTime',
            'failure_details': 'failureDetails',
            'failure_reason': 'failureReason',
            'input_uri': 'inputUri',
            'name': 'name',
            'origin_uri': 'originUri',
            'output_uri': 'outputUri',
            'priority': 'priority',
            'progress': 'progress',
            'start_time': 'startTime',
            'state': 'state',
            'template_id': 'templateId',
            'ttl_after_completion_days': 'ttlAfterCompletionDays'
        }

        self._config = config
        self._create_time = create_time
        self._end_time = end_time
        self._failure_details = failure_details
        self._failure_reason = failure_reason
        self._input_uri = input_uri
        self._name = name
        self._origin_uri = origin_uri
        self._output_uri = output_uri
        self._priority = priority
        self._progress = progress
        self._start_time = start_time
        self._state = state
        self._template_id = template_id
        self._ttl_after_completion_days = ttl_after_completion_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Job.


        :return: The config of this Job.
        :rtype: JobConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Job.


        :param config: The config of this Job.
        :type config: JobConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Job.

        Output only. The time the job was created.

        :return: The create_time of this Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Job.

        Output only. The time the job was created.

        :param create_time: The create_time of this Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this Job.

        Output only. The time the transcoding finished.

        :return: The end_time of this Job.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Job.

        Output only. The time the transcoding finished.

        :param end_time: The end_time of this Job.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def failure_details(self):
        """Gets the failure_details of this Job.

        Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available.

        :return: The failure_details of this Job.
        :rtype: List[FailureDetail]
        """
        return self._failure_details

    @failure_details.setter
    def failure_details(self, failure_details):
        """Sets the failure_details of this Job.

        Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available.

        :param failure_details: The failure_details of this Job.
        :type failure_details: List[FailureDetail]
        """

        self._failure_details = failure_details

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Job.

        Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.

        :return: The failure_reason of this Job.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Job.

        Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.

        :param failure_reason: The failure_reason of this Job.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def input_uri(self):
        """Gets the input_uri of this Job.

        Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).

        :return: The input_uri of this Job.
        :rtype: str
        """
        return self._input_uri

    @input_uri.setter
    def input_uri(self, input_uri):
        """Sets the input_uri of this Job.

        Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).

        :param input_uri: The input_uri of this Job.
        :type input_uri: str
        """

        self._input_uri = input_uri

    @property
    def name(self):
        """Gets the name of this Job.

        The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def origin_uri(self):
        """Gets the origin_uri of this Job.


        :return: The origin_uri of this Job.
        :rtype: OriginUri
        """
        return self._origin_uri

    @origin_uri.setter
    def origin_uri(self, origin_uri):
        """Sets the origin_uri of this Job.


        :param origin_uri: The origin_uri of this Job.
        :type origin_uri: OriginUri
        """

        self._origin_uri = origin_uri

    @property
    def output_uri(self):
        """Gets the output_uri of this Job.

        Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`.

        :return: The output_uri of this Job.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this Job.

        Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`.

        :param output_uri: The output_uri of this Job.
        :type output_uri: str
        """

        self._output_uri = output_uri

    @property
    def priority(self):
        """Gets the priority of this Job.

        Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.

        :return: The priority of this Job.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Job.

        Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.

        :param priority: The priority of this Job.
        :type priority: int
        """

        self._priority = priority

    @property
    def progress(self):
        """Gets the progress of this Job.


        :return: The progress of this Job.
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Job.


        :param progress: The progress of this Job.
        :type progress: Progress
        """

        self._progress = progress

    @property
    def start_time(self):
        """Gets the start_time of this Job.

        Output only. The time the transcoding started.

        :return: The start_time of this Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Job.

        Output only. The time the transcoding started.

        :param start_time: The start_time of this Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Job.

        Output only. The current state of the job.

        :return: The state of this Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.

        Output only. The current state of the job.

        :param state: The state of this Job.
        :type state: str
        """
        allowed_values = ["PROCESSING_STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def template_id(self):
        """Gets the template_id of this Job.

        Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`

        :return: The template_id of this Job.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Job.

        Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`

        :param template_id: The template_id of this Job.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def ttl_after_completion_days(self):
        """Gets the ttl_after_completion_days of this Job.

        Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.

        :return: The ttl_after_completion_days of this Job.
        :rtype: int
        """
        return self._ttl_after_completion_days

    @ttl_after_completion_days.setter
    def ttl_after_completion_days(self, ttl_after_completion_days):
        """Sets the ttl_after_completion_days of this Job.

        Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.

        :param ttl_after_completion_days: The ttl_after_completion_days of this Job.
        :type ttl_after_completion_days: int
        """

        self._ttl_after_completion_days = ttl_after_completion_days
