# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_atom import TextAtom
from openapi_server import util


class TextStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec: str=None, language_code: str=None, mapping: List[TextAtom]=None):
        """TextStream - a model defined in OpenAPI

        :param codec: The codec of this TextStream.
        :param language_code: The language_code of this TextStream.
        :param mapping: The mapping of this TextStream.
        """
        self.openapi_types = {
            'codec': str,
            'language_code': str,
            'mapping': List[TextAtom]
        }

        self.attribute_map = {
            'codec': 'codec',
            'language_code': 'languageCode',
            'mapping': 'mapping'
        }

        self._codec = codec
        self._language_code = language_code
        self._mapping = mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextStream of this TextStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec(self):
        """Gets the codec of this TextStream.

        The codec for this text stream. The default is `\"webvtt\"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'

        :return: The codec of this TextStream.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this TextStream.

        The codec for this text stream. The default is `\"webvtt\"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'

        :param codec: The codec of this TextStream.
        :type codec: str
        """

        self._codec = codec

    @property
    def language_code(self):
        """Gets the language_code of this TextStream.

        Required. The BCP-47 language code, such as `\"en-US\"` or `\"sr-Latn\"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.

        :return: The language_code of this TextStream.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this TextStream.

        Required. The BCP-47 language code, such as `\"en-US\"` or `\"sr-Latn\"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.

        :param language_code: The language_code of this TextStream.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def mapping(self):
        """Gets the mapping of this TextStream.

        The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.

        :return: The mapping of this TextStream.
        :rtype: List[TextAtom]
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this TextStream.

        The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.

        :param mapping: The mapping of this TextStream.
        :type mapping: List[TextAtom]
        """

        self._mapping = mapping
