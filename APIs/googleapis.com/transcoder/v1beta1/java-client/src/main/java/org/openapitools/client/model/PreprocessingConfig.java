/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Audio;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.Crop;
import org.openapitools.client.model.Deblock;
import org.openapitools.client.model.Denoise;
import org.openapitools.client.model.Pad;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Preprocessing configurations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:40.503024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PreprocessingConfig {
  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private Audio audio;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private Color color;

  public static final String SERIALIZED_NAME_CROP = "crop";
  @SerializedName(SERIALIZED_NAME_CROP)
  private Crop crop;

  public static final String SERIALIZED_NAME_DEBLOCK = "deblock";
  @SerializedName(SERIALIZED_NAME_DEBLOCK)
  private Deblock deblock;

  public static final String SERIALIZED_NAME_DENOISE = "denoise";
  @SerializedName(SERIALIZED_NAME_DENOISE)
  private Denoise denoise;

  public static final String SERIALIZED_NAME_PAD = "pad";
  @SerializedName(SERIALIZED_NAME_PAD)
  private Pad pad;

  public PreprocessingConfig() {
  }

  public PreprocessingConfig audio(Audio audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nullable
  public Audio getAudio() {
    return audio;
  }

  public void setAudio(Audio audio) {
    this.audio = audio;
  }


  public PreprocessingConfig color(Color color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public Color getColor() {
    return color;
  }

  public void setColor(Color color) {
    this.color = color;
  }


  public PreprocessingConfig crop(Crop crop) {
    this.crop = crop;
    return this;
  }

  /**
   * Get crop
   * @return crop
   */
  @javax.annotation.Nullable
  public Crop getCrop() {
    return crop;
  }

  public void setCrop(Crop crop) {
    this.crop = crop;
  }


  public PreprocessingConfig deblock(Deblock deblock) {
    this.deblock = deblock;
    return this;
  }

  /**
   * Get deblock
   * @return deblock
   */
  @javax.annotation.Nullable
  public Deblock getDeblock() {
    return deblock;
  }

  public void setDeblock(Deblock deblock) {
    this.deblock = deblock;
  }


  public PreprocessingConfig denoise(Denoise denoise) {
    this.denoise = denoise;
    return this;
  }

  /**
   * Get denoise
   * @return denoise
   */
  @javax.annotation.Nullable
  public Denoise getDenoise() {
    return denoise;
  }

  public void setDenoise(Denoise denoise) {
    this.denoise = denoise;
  }


  public PreprocessingConfig pad(Pad pad) {
    this.pad = pad;
    return this;
  }

  /**
   * Get pad
   * @return pad
   */
  @javax.annotation.Nullable
  public Pad getPad() {
    return pad;
  }

  public void setPad(Pad pad) {
    this.pad = pad;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreprocessingConfig preprocessingConfig = (PreprocessingConfig) o;
    return Objects.equals(this.audio, preprocessingConfig.audio) &&
        Objects.equals(this.color, preprocessingConfig.color) &&
        Objects.equals(this.crop, preprocessingConfig.crop) &&
        Objects.equals(this.deblock, preprocessingConfig.deblock) &&
        Objects.equals(this.denoise, preprocessingConfig.denoise) &&
        Objects.equals(this.pad, preprocessingConfig.pad);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, color, crop, deblock, denoise, pad);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreprocessingConfig {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    crop: ").append(toIndentedString(crop)).append("\n");
    sb.append("    deblock: ").append(toIndentedString(deblock)).append("\n");
    sb.append("    denoise: ").append(toIndentedString(denoise)).append("\n");
    sb.append("    pad: ").append(toIndentedString(pad)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio");
    openapiFields.add("color");
    openapiFields.add("crop");
    openapiFields.add("deblock");
    openapiFields.add("denoise");
    openapiFields.add("pad");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PreprocessingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PreprocessingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PreprocessingConfig is not found in the empty JSON string", PreprocessingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PreprocessingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PreprocessingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audio`
      if (jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) {
        Audio.validateJsonElement(jsonObj.get("audio"));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `crop`
      if (jsonObj.get("crop") != null && !jsonObj.get("crop").isJsonNull()) {
        Crop.validateJsonElement(jsonObj.get("crop"));
      }
      // validate the optional field `deblock`
      if (jsonObj.get("deblock") != null && !jsonObj.get("deblock").isJsonNull()) {
        Deblock.validateJsonElement(jsonObj.get("deblock"));
      }
      // validate the optional field `denoise`
      if (jsonObj.get("denoise") != null && !jsonObj.get("denoise").isJsonNull()) {
        Denoise.validateJsonElement(jsonObj.get("denoise"));
      }
      // validate the optional field `pad`
      if (jsonObj.get("pad") != null && !jsonObj.get("pad").isJsonNull()) {
        Pad.validateJsonElement(jsonObj.get("pad"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PreprocessingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PreprocessingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PreprocessingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PreprocessingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PreprocessingConfig>() {
           @Override
           public void write(JsonWriter out, PreprocessingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PreprocessingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PreprocessingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PreprocessingConfig
   * @throws IOException if the JSON string is invalid with respect to PreprocessingConfig
   */
  public static PreprocessingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PreprocessingConfig.class);
  }

  /**
   * Convert an instance of PreprocessingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

