/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NormalizedCoordinate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Display overlay object with fade animation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:40.503024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnimationFade {
  public static final String SERIALIZED_NAME_END_TIME_OFFSET = "endTimeOffset";
  @SerializedName(SERIALIZED_NAME_END_TIME_OFFSET)
  private String endTimeOffset;

  /**
   * Required. Type of fade animation: &#x60;FADE_IN&#x60; or &#x60;FADE_OUT&#x60;.
   */
  @JsonAdapter(FadeTypeEnum.Adapter.class)
  public enum FadeTypeEnum {
    TYPE_UNSPECIFIED("FADE_TYPE_UNSPECIFIED"),
    
    IN("FADE_IN"),
    
    OUT("FADE_OUT");

    private String value;

    FadeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FadeTypeEnum fromValue(String value) {
      for (FadeTypeEnum b : FadeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FadeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FadeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FadeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FadeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FadeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FADE_TYPE = "fadeType";
  @SerializedName(SERIALIZED_NAME_FADE_TYPE)
  private FadeTypeEnum fadeType;

  public static final String SERIALIZED_NAME_START_TIME_OFFSET = "startTimeOffset";
  @SerializedName(SERIALIZED_NAME_START_TIME_OFFSET)
  private String startTimeOffset;

  public static final String SERIALIZED_NAME_XY = "xy";
  @SerializedName(SERIALIZED_NAME_XY)
  private NormalizedCoordinate xy;

  public AnimationFade() {
  }

  public AnimationFade endTimeOffset(String endTimeOffset) {
    this.endTimeOffset = endTimeOffset;
    return this;
  }

  /**
   * The time to end the fade animation, in seconds. Default: &#x60;start_time_offset&#x60; + 1s
   * @return endTimeOffset
   */
  @javax.annotation.Nullable
  public String getEndTimeOffset() {
    return endTimeOffset;
  }

  public void setEndTimeOffset(String endTimeOffset) {
    this.endTimeOffset = endTimeOffset;
  }


  public AnimationFade fadeType(FadeTypeEnum fadeType) {
    this.fadeType = fadeType;
    return this;
  }

  /**
   * Required. Type of fade animation: &#x60;FADE_IN&#x60; or &#x60;FADE_OUT&#x60;.
   * @return fadeType
   */
  @javax.annotation.Nullable
  public FadeTypeEnum getFadeType() {
    return fadeType;
  }

  public void setFadeType(FadeTypeEnum fadeType) {
    this.fadeType = fadeType;
  }


  public AnimationFade startTimeOffset(String startTimeOffset) {
    this.startTimeOffset = startTimeOffset;
    return this;
  }

  /**
   * The time to start the fade animation, in seconds. Default: 0
   * @return startTimeOffset
   */
  @javax.annotation.Nullable
  public String getStartTimeOffset() {
    return startTimeOffset;
  }

  public void setStartTimeOffset(String startTimeOffset) {
    this.startTimeOffset = startTimeOffset;
  }


  public AnimationFade xy(NormalizedCoordinate xy) {
    this.xy = xy;
    return this;
  }

  /**
   * Get xy
   * @return xy
   */
  @javax.annotation.Nullable
  public NormalizedCoordinate getXy() {
    return xy;
  }

  public void setXy(NormalizedCoordinate xy) {
    this.xy = xy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnimationFade animationFade = (AnimationFade) o;
    return Objects.equals(this.endTimeOffset, animationFade.endTimeOffset) &&
        Objects.equals(this.fadeType, animationFade.fadeType) &&
        Objects.equals(this.startTimeOffset, animationFade.startTimeOffset) &&
        Objects.equals(this.xy, animationFade.xy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeOffset, fadeType, startTimeOffset, xy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnimationFade {\n");
    sb.append("    endTimeOffset: ").append(toIndentedString(endTimeOffset)).append("\n");
    sb.append("    fadeType: ").append(toIndentedString(fadeType)).append("\n");
    sb.append("    startTimeOffset: ").append(toIndentedString(startTimeOffset)).append("\n");
    sb.append("    xy: ").append(toIndentedString(xy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeOffset");
    openapiFields.add("fadeType");
    openapiFields.add("startTimeOffset");
    openapiFields.add("xy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnimationFade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnimationFade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnimationFade is not found in the empty JSON string", AnimationFade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnimationFade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnimationFade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTimeOffset") != null && !jsonObj.get("endTimeOffset").isJsonNull()) && !jsonObj.get("endTimeOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeOffset").toString()));
      }
      if ((jsonObj.get("fadeType") != null && !jsonObj.get("fadeType").isJsonNull()) && !jsonObj.get("fadeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fadeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fadeType").toString()));
      }
      // validate the optional field `fadeType`
      if (jsonObj.get("fadeType") != null && !jsonObj.get("fadeType").isJsonNull()) {
        FadeTypeEnum.validateJsonElement(jsonObj.get("fadeType"));
      }
      if ((jsonObj.get("startTimeOffset") != null && !jsonObj.get("startTimeOffset").isJsonNull()) && !jsonObj.get("startTimeOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeOffset").toString()));
      }
      // validate the optional field `xy`
      if (jsonObj.get("xy") != null && !jsonObj.get("xy").isJsonNull()) {
        NormalizedCoordinate.validateJsonElement(jsonObj.get("xy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnimationFade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnimationFade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnimationFade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnimationFade.class));

       return (TypeAdapter<T>) new TypeAdapter<AnimationFade>() {
           @Override
           public void write(JsonWriter out, AnimationFade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnimationFade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnimationFade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnimationFade
   * @throws IOException if the JSON string is invalid with respect to AnimationFade
   */
  public static AnimationFade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnimationFade.class);
  }

  /**
   * Convert an instance of AnimationFade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

