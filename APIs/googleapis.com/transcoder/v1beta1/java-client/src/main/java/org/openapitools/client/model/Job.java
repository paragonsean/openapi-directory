/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FailureDetail;
import org.openapitools.client.model.JobConfig;
import org.openapitools.client.model.OriginUri;
import org.openapitools.client.model.Progress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transcoding job resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:40.503024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private JobConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FAILURE_DETAILS = "failureDetails";
  @SerializedName(SERIALIZED_NAME_FAILURE_DETAILS)
  private List<FailureDetail> failureDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_INPUT_URI = "inputUri";
  @SerializedName(SERIALIZED_NAME_INPUT_URI)
  private String inputUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN_URI = "originUri";
  @SerializedName(SERIALIZED_NAME_ORIGIN_URI)
  private OriginUri originUri;

  public static final String SERIALIZED_NAME_OUTPUT_URI = "outputUri";
  @SerializedName(SERIALIZED_NAME_OUTPUT_URI)
  private String outputUri;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Progress progress;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. The current state of the job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROCESSING_STATE_UNSPECIFIED("PROCESSING_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TTL_AFTER_COMPLETION_DAYS = "ttlAfterCompletionDays";
  @SerializedName(SERIALIZED_NAME_TTL_AFTER_COMPLETION_DAYS)
  private Integer ttlAfterCompletionDays;

  public Job() {
  }

  public Job(
     String createTime, 
     String endTime, 
     List<FailureDetail> failureDetails, 
     String failureReason, 
     String startTime, 
     StateEnum state
  ) {
    this();
    this.createTime = createTime;
    this.endTime = endTime;
    this.failureDetails = failureDetails;
    this.failureReason = failureReason;
    this.startTime = startTime;
    this.state = state;
  }

  public Job config(JobConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public JobConfig getConfig() {
    return config;
  }

  public void setConfig(JobConfig config) {
    this.config = config;
  }


  /**
   * Output only. The time the job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time the transcoding finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * Output only. List of failure details. This property may contain additional information about the failure when &#x60;failure_reason&#x60; is present. *Note*: This feature is not yet available.
   * @return failureDetails
   */
  @javax.annotation.Nullable
  public List<FailureDetail> getFailureDetails() {
    return failureDetails;
  }



  /**
   * Output only. A description of the reason for the failure. This property is always present when &#x60;state&#x60; is &#x60;FAILED&#x60;.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }



  public Job inputUri(String inputUri) {
    this.inputUri = inputUri;
    return this;
  }

  /**
   * Input only. Specify the &#x60;input_uri&#x60; to populate empty &#x60;uri&#x60; fields in each element of &#x60;Job.config.inputs&#x60; or &#x60;JobTemplate.config.inputs&#x60; when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, &#x60;gs://bucket/inputs/file.mp4&#x60;).
   * @return inputUri
   */
  @javax.annotation.Nullable
  public String getInputUri() {
    return inputUri;
  }

  public void setInputUri(String inputUri) {
    this.inputUri = inputUri;
  }


  public Job name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the job. Format: &#x60;projects/{project}/locations/{location}/jobs/{job}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Job originUri(OriginUri originUri) {
    this.originUri = originUri;
    return this;
  }

  /**
   * Get originUri
   * @return originUri
   */
  @javax.annotation.Nullable
  public OriginUri getOriginUri() {
    return originUri;
  }

  public void setOriginUri(OriginUri originUri) {
    this.originUri = originUri;
  }


  public Job outputUri(String outputUri) {
    this.outputUri = outputUri;
    return this;
  }

  /**
   * Input only. Specify the &#x60;output_uri&#x60; to populate an empty &#x60;Job.config.output.uri&#x60; or &#x60;JobTemplate.config.output.uri&#x60; when using template. URI for the output file(s). For example, &#x60;gs://my-bucket/outputs/&#x60;.
   * @return outputUri
   */
  @javax.annotation.Nullable
  public String getOutputUri() {
    return outputUri;
  }

  public void setOutputUri(String outputUri) {
    this.outputUri = outputUri;
  }


  public Job priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Job progress(Progress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Progress getProgress() {
    return progress;
  }

  public void setProgress(Progress progress) {
    this.progress = progress;
  }


  /**
   * Output only. The time the transcoding started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. The current state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Job templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Input only. Specify the &#x60;template_id&#x60; to use for populating &#x60;Job.config&#x60;. The default is &#x60;preset/web-hd&#x60;. Preset Transcoder templates: - &#x60;preset/{preset_id}&#x60; - User defined JobTemplate: &#x60;{job_template_id}&#x60;
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Job ttlAfterCompletionDays(Integer ttlAfterCompletionDays) {
    this.ttlAfterCompletionDays = ttlAfterCompletionDays;
    return this;
  }

  /**
   * Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
   * @return ttlAfterCompletionDays
   */
  @javax.annotation.Nullable
  public Integer getTtlAfterCompletionDays() {
    return ttlAfterCompletionDays;
  }

  public void setTtlAfterCompletionDays(Integer ttlAfterCompletionDays) {
    this.ttlAfterCompletionDays = ttlAfterCompletionDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.config, job.config) &&
        Objects.equals(this.createTime, job.createTime) &&
        Objects.equals(this.endTime, job.endTime) &&
        Objects.equals(this.failureDetails, job.failureDetails) &&
        Objects.equals(this.failureReason, job.failureReason) &&
        Objects.equals(this.inputUri, job.inputUri) &&
        Objects.equals(this.name, job.name) &&
        Objects.equals(this.originUri, job.originUri) &&
        Objects.equals(this.outputUri, job.outputUri) &&
        Objects.equals(this.priority, job.priority) &&
        Objects.equals(this.progress, job.progress) &&
        Objects.equals(this.startTime, job.startTime) &&
        Objects.equals(this.state, job.state) &&
        Objects.equals(this.templateId, job.templateId) &&
        Objects.equals(this.ttlAfterCompletionDays, job.ttlAfterCompletionDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, createTime, endTime, failureDetails, failureReason, inputUri, name, originUri, outputUri, priority, progress, startTime, state, templateId, ttlAfterCompletionDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    failureDetails: ").append(toIndentedString(failureDetails)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    inputUri: ").append(toIndentedString(inputUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originUri: ").append(toIndentedString(originUri)).append("\n");
    sb.append("    outputUri: ").append(toIndentedString(outputUri)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    ttlAfterCompletionDays: ").append(toIndentedString(ttlAfterCompletionDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("endTime");
    openapiFields.add("failureDetails");
    openapiFields.add("failureReason");
    openapiFields.add("inputUri");
    openapiFields.add("name");
    openapiFields.add("originUri");
    openapiFields.add("outputUri");
    openapiFields.add("priority");
    openapiFields.add("progress");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("templateId");
    openapiFields.add("ttlAfterCompletionDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        JobConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("failureDetails") != null && !jsonObj.get("failureDetails").isJsonNull()) {
        JsonArray jsonArrayfailureDetails = jsonObj.getAsJsonArray("failureDetails");
        if (jsonArrayfailureDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failureDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failureDetails` to be an array in the JSON string but got `%s`", jsonObj.get("failureDetails").toString()));
          }

          // validate the optional field `failureDetails` (array)
          for (int i = 0; i < jsonArrayfailureDetails.size(); i++) {
            FailureDetail.validateJsonElement(jsonArrayfailureDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      if ((jsonObj.get("inputUri") != null && !jsonObj.get("inputUri").isJsonNull()) && !jsonObj.get("inputUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `originUri`
      if (jsonObj.get("originUri") != null && !jsonObj.get("originUri").isJsonNull()) {
        OriginUri.validateJsonElement(jsonObj.get("originUri"));
      }
      if ((jsonObj.get("outputUri") != null && !jsonObj.get("outputUri").isJsonNull()) && !jsonObj.get("outputUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputUri").toString()));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        Progress.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

