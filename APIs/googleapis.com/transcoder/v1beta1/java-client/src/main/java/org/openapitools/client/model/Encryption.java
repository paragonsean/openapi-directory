/*
 * Transcoder API
 * This API converts video files into formats suitable for consumer distribution. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Aes128Encryption;
import org.openapitools.client.model.MpegCommonEncryption;
import org.openapitools.client.model.SampleAesEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encryption settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:40.503024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Encryption {
  public static final String SERIALIZED_NAME_AES128 = "aes128";
  @SerializedName(SERIALIZED_NAME_AES128)
  private Aes128Encryption aes128;

  public static final String SERIALIZED_NAME_IV = "iv";
  @SerializedName(SERIALIZED_NAME_IV)
  private String iv;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MPEG_CENC = "mpegCenc";
  @SerializedName(SERIALIZED_NAME_MPEG_CENC)
  private MpegCommonEncryption mpegCenc;

  public static final String SERIALIZED_NAME_SAMPLE_AES = "sampleAes";
  @SerializedName(SERIALIZED_NAME_SAMPLE_AES)
  private SampleAesEncryption sampleAes;

  public Encryption() {
  }

  public Encryption aes128(Aes128Encryption aes128) {
    this.aes128 = aes128;
    return this;
  }

  /**
   * Get aes128
   * @return aes128
   */
  @javax.annotation.Nullable
  public Aes128Encryption getAes128() {
    return aes128;
  }

  public void setAes128(Aes128Encryption aes128) {
    this.aes128 = aes128;
  }


  public Encryption iv(String iv) {
    this.iv = iv;
    return this;
  }

  /**
   * Required. 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
   * @return iv
   */
  @javax.annotation.Nullable
  public String getIv() {
    return iv;
  }

  public void setIv(String iv) {
    this.iv = iv;
  }


  public Encryption key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Required. 128 bit encryption key represented as lowercase hexadecimal digits.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Encryption mpegCenc(MpegCommonEncryption mpegCenc) {
    this.mpegCenc = mpegCenc;
    return this;
  }

  /**
   * Get mpegCenc
   * @return mpegCenc
   */
  @javax.annotation.Nullable
  public MpegCommonEncryption getMpegCenc() {
    return mpegCenc;
  }

  public void setMpegCenc(MpegCommonEncryption mpegCenc) {
    this.mpegCenc = mpegCenc;
  }


  public Encryption sampleAes(SampleAesEncryption sampleAes) {
    this.sampleAes = sampleAes;
    return this;
  }

  /**
   * Get sampleAes
   * @return sampleAes
   */
  @javax.annotation.Nullable
  public SampleAesEncryption getSampleAes() {
    return sampleAes;
  }

  public void setSampleAes(SampleAesEncryption sampleAes) {
    this.sampleAes = sampleAes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Encryption encryption = (Encryption) o;
    return Objects.equals(this.aes128, encryption.aes128) &&
        Objects.equals(this.iv, encryption.iv) &&
        Objects.equals(this.key, encryption.key) &&
        Objects.equals(this.mpegCenc, encryption.mpegCenc) &&
        Objects.equals(this.sampleAes, encryption.sampleAes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aes128, iv, key, mpegCenc, sampleAes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Encryption {\n");
    sb.append("    aes128: ").append(toIndentedString(aes128)).append("\n");
    sb.append("    iv: ").append(toIndentedString(iv)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    mpegCenc: ").append(toIndentedString(mpegCenc)).append("\n");
    sb.append("    sampleAes: ").append(toIndentedString(sampleAes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aes128");
    openapiFields.add("iv");
    openapiFields.add("key");
    openapiFields.add("mpegCenc");
    openapiFields.add("sampleAes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Encryption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Encryption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Encryption is not found in the empty JSON string", Encryption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Encryption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Encryption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aes128`
      if (jsonObj.get("aes128") != null && !jsonObj.get("aes128").isJsonNull()) {
        Aes128Encryption.validateJsonElement(jsonObj.get("aes128"));
      }
      if ((jsonObj.get("iv") != null && !jsonObj.get("iv").isJsonNull()) && !jsonObj.get("iv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iv").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `mpegCenc`
      if (jsonObj.get("mpegCenc") != null && !jsonObj.get("mpegCenc").isJsonNull()) {
        MpegCommonEncryption.validateJsonElement(jsonObj.get("mpegCenc"));
      }
      // validate the optional field `sampleAes`
      if (jsonObj.get("sampleAes") != null && !jsonObj.get("sampleAes").isJsonNull()) {
        SampleAesEncryption.validateJsonElement(jsonObj.get("sampleAes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Encryption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Encryption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Encryption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Encryption.class));

       return (TypeAdapter<T>) new TypeAdapter<Encryption>() {
           @Override
           public void write(JsonWriter out, Encryption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Encryption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Encryption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Encryption
   * @throws IOException if the JSON string is invalid with respect to Encryption
   */
  public static Encryption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Encryption.class);
  }

  /**
   * Convert an instance of Encryption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

