/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2CryptoKey from './GooglePrivacyDlpV2CryptoKey';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';
import GooglePrivacyDlpV2InfoType from './GooglePrivacyDlpV2InfoType';

/**
 * The GooglePrivacyDlpV2CryptoDeterministicConfig model module.
 * @module model/GooglePrivacyDlpV2CryptoDeterministicConfig
 * @version v2
 */
class GooglePrivacyDlpV2CryptoDeterministicConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CryptoDeterministicConfig</code>.
     * Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
     * @alias module:model/GooglePrivacyDlpV2CryptoDeterministicConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2CryptoDeterministicConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CryptoDeterministicConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CryptoDeterministicConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CryptoDeterministicConfig} The populated <code>GooglePrivacyDlpV2CryptoDeterministicConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CryptoDeterministicConfig();

            if (data.hasOwnProperty('context')) {
                obj['context'] = GooglePrivacyDlpV2FieldId.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('cryptoKey')) {
                obj['cryptoKey'] = GooglePrivacyDlpV2CryptoKey.constructFromObject(data['cryptoKey']);
            }
            if (data.hasOwnProperty('surrogateInfoType')) {
                obj['surrogateInfoType'] = GooglePrivacyDlpV2InfoType.constructFromObject(data['surrogateInfoType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CryptoDeterministicConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CryptoDeterministicConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `context`
        if (data['context']) { // data not null
          GooglePrivacyDlpV2FieldId.validateJSON(data['context']);
        }
        // validate the optional field `cryptoKey`
        if (data['cryptoKey']) { // data not null
          GooglePrivacyDlpV2CryptoKey.validateJSON(data['cryptoKey']);
        }
        // validate the optional field `surrogateInfoType`
        if (data['surrogateInfoType']) { // data not null
          GooglePrivacyDlpV2InfoType.validateJSON(data['surrogateInfoType']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2FieldId} context
 */
GooglePrivacyDlpV2CryptoDeterministicConfig.prototype['context'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2CryptoKey} cryptoKey
 */
GooglePrivacyDlpV2CryptoDeterministicConfig.prototype['cryptoKey'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2InfoType} surrogateInfoType
 */
GooglePrivacyDlpV2CryptoDeterministicConfig.prototype['surrogateInfoType'] = undefined;






export default GooglePrivacyDlpV2CryptoDeterministicConfig;

