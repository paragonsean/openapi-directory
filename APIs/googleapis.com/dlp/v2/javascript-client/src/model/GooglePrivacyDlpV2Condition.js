/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';
import GooglePrivacyDlpV2Value from './GooglePrivacyDlpV2Value';

/**
 * The GooglePrivacyDlpV2Condition model module.
 * @module model/GooglePrivacyDlpV2Condition
 * @version v2
 */
class GooglePrivacyDlpV2Condition {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2Condition</code>.
     * The field type of &#x60;value&#x60; and &#x60;field&#x60; do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A &#x60;value&#x60; of type: - &#x60;string&#x60; can be compared against all other types - &#x60;boolean&#x60; can only be compared against other booleans - &#x60;integer&#x60; can be compared against doubles or a string if the string value can be parsed as an integer. - &#x60;double&#x60; can be compared against integers or a string if the string can be parsed as a double. - &#x60;Timestamp&#x60; can be compared against strings in RFC 3339 date string format. - &#x60;TimeOfDay&#x60; can be compared against timestamps and strings in the format of &#39;HH:mm:ss&#39;. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
     * @alias module:model/GooglePrivacyDlpV2Condition
     */
    constructor() { 
        
        GooglePrivacyDlpV2Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2Condition} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2Condition} The populated <code>GooglePrivacyDlpV2Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2Condition();

            if (data.hasOwnProperty('field')) {
                obj['field'] = GooglePrivacyDlpV2FieldId.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = GooglePrivacyDlpV2Value.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2Condition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `field`
        if (data['field']) { // data not null
          GooglePrivacyDlpV2FieldId.validateJSON(data['field']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          GooglePrivacyDlpV2Value.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2FieldId} field
 */
GooglePrivacyDlpV2Condition.prototype['field'] = undefined;

/**
 * Required. Operator used to compare the field or infoType to the value.
 * @member {module:model/GooglePrivacyDlpV2Condition.OperatorEnum} operator
 */
GooglePrivacyDlpV2Condition.prototype['operator'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2Value} value
 */
GooglePrivacyDlpV2Condition.prototype['value'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2Condition['OperatorEnum'] = {

    /**
     * value: "RELATIONAL_OPERATOR_UNSPECIFIED"
     * @const
     */
    "RELATIONAL_OPERATOR_UNSPECIFIED": "RELATIONAL_OPERATOR_UNSPECIFIED",

    /**
     * value: "EQUAL_TO"
     * @const
     */
    "EQUAL_TO": "EQUAL_TO",

    /**
     * value: "NOT_EQUAL_TO"
     * @const
     */
    "NOT_EQUAL_TO": "NOT_EQUAL_TO",

    /**
     * value: "GREATER_THAN"
     * @const
     */
    "GREATER_THAN": "GREATER_THAN",

    /**
     * value: "LESS_THAN"
     * @const
     */
    "LESS_THAN": "LESS_THAN",

    /**
     * value: "GREATER_THAN_OR_EQUALS"
     * @const
     */
    "GREATER_THAN_OR_EQUALS": "GREATER_THAN_OR_EQUALS",

    /**
     * value: "LESS_THAN_OR_EQUALS"
     * @const
     */
    "LESS_THAN_OR_EQUALS": "LESS_THAN_OR_EQUALS",

    /**
     * value: "EXISTS"
     * @const
     */
    "EXISTS": "EXISTS"
};



export default GooglePrivacyDlpV2Condition;

