/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GooglePrivacyDlpV2TransformationErrorHandling model module.
 * @module model/GooglePrivacyDlpV2TransformationErrorHandling
 * @version v2
 */
class GooglePrivacyDlpV2TransformationErrorHandling {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2TransformationErrorHandling</code>.
     * How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a &#x60;DateShift&#x60; transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the &#x60;TransformationOverviews&#x60;.
     * @alias module:model/GooglePrivacyDlpV2TransformationErrorHandling
     */
    constructor() { 
        
        GooglePrivacyDlpV2TransformationErrorHandling.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2TransformationErrorHandling</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2TransformationErrorHandling} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2TransformationErrorHandling} The populated <code>GooglePrivacyDlpV2TransformationErrorHandling</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2TransformationErrorHandling();

            if (data.hasOwnProperty('leaveUntransformed')) {
                obj['leaveUntransformed'] = ApiClient.convertToType(data['leaveUntransformed'], Object);
            }
            if (data.hasOwnProperty('throwError')) {
                obj['throwError'] = ApiClient.convertToType(data['throwError'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2TransformationErrorHandling</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2TransformationErrorHandling</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
 * @member {Object} leaveUntransformed
 */
GooglePrivacyDlpV2TransformationErrorHandling.prototype['leaveUntransformed'] = undefined;

/**
 * Throw an error and fail the request when a transformation error occurs.
 * @member {Object} throwError
 */
GooglePrivacyDlpV2TransformationErrorHandling.prototype['throwError'] = undefined;






export default GooglePrivacyDlpV2TransformationErrorHandling;

