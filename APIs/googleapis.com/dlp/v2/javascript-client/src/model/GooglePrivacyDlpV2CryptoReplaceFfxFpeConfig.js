/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2CryptoKey from './GooglePrivacyDlpV2CryptoKey';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';
import GooglePrivacyDlpV2InfoType from './GooglePrivacyDlpV2InfoType';

/**
 * The GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig model module.
 * @module model/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig
 * @version v2
 */
class GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig</code>.
     * Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the &#x60;ReidentifyContent&#x60; API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
     * @alias module:model/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig} The populated <code>GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig();

            if (data.hasOwnProperty('commonAlphabet')) {
                obj['commonAlphabet'] = ApiClient.convertToType(data['commonAlphabet'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = GooglePrivacyDlpV2FieldId.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('cryptoKey')) {
                obj['cryptoKey'] = GooglePrivacyDlpV2CryptoKey.constructFromObject(data['cryptoKey']);
            }
            if (data.hasOwnProperty('customAlphabet')) {
                obj['customAlphabet'] = ApiClient.convertToType(data['customAlphabet'], 'String');
            }
            if (data.hasOwnProperty('radix')) {
                obj['radix'] = ApiClient.convertToType(data['radix'], 'Number');
            }
            if (data.hasOwnProperty('surrogateInfoType')) {
                obj['surrogateInfoType'] = GooglePrivacyDlpV2InfoType.constructFromObject(data['surrogateInfoType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commonAlphabet'] && !(typeof data['commonAlphabet'] === 'string' || data['commonAlphabet'] instanceof String)) {
            throw new Error("Expected the field `commonAlphabet` to be a primitive type in the JSON string but got " + data['commonAlphabet']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          GooglePrivacyDlpV2FieldId.validateJSON(data['context']);
        }
        // validate the optional field `cryptoKey`
        if (data['cryptoKey']) { // data not null
          GooglePrivacyDlpV2CryptoKey.validateJSON(data['cryptoKey']);
        }
        // ensure the json data is a string
        if (data['customAlphabet'] && !(typeof data['customAlphabet'] === 'string' || data['customAlphabet'] instanceof String)) {
            throw new Error("Expected the field `customAlphabet` to be a primitive type in the JSON string but got " + data['customAlphabet']);
        }
        // validate the optional field `surrogateInfoType`
        if (data['surrogateInfoType']) { // data not null
          GooglePrivacyDlpV2InfoType.validateJSON(data['surrogateInfoType']);
        }

        return true;
    }


}



/**
 * Common alphabets.
 * @member {module:model/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.CommonAlphabetEnum} commonAlphabet
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['commonAlphabet'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2FieldId} context
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['context'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2CryptoKey} cryptoKey
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['cryptoKey'] = undefined;

/**
 * This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/
 * @member {String} customAlphabet
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['customAlphabet'] = undefined;

/**
 * The native way to select the alphabet. Must be in the range [2, 95].
 * @member {Number} radix
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['radix'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2InfoType} surrogateInfoType
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.prototype['surrogateInfoType'] = undefined;





/**
 * Allowed values for the <code>commonAlphabet</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig['CommonAlphabetEnum'] = {

    /**
     * value: "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED"
     * @const
     */
    "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED": "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "HEXADECIMAL"
     * @const
     */
    "HEXADECIMAL": "HEXADECIMAL",

    /**
     * value: "UPPER_CASE_ALPHA_NUMERIC"
     * @const
     */
    "UPPER_CASE_ALPHA_NUMERIC": "UPPER_CASE_ALPHA_NUMERIC",

    /**
     * value: "ALPHA_NUMERIC"
     * @const
     */
    "ALPHA_NUMERIC": "ALPHA_NUMERIC"
};



export default GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig;

