/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GooglePrivacyDlpV2CloudStorageRegexFileSet model module.
 * @module model/GooglePrivacyDlpV2CloudStorageRegexFileSet
 * @version v2
 */
class GooglePrivacyDlpV2CloudStorageRegexFileSet {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CloudStorageRegexFileSet</code>.
     * Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in &#x60;include_regex&#x60; and do not match any items in &#x60;exclude_regex&#x60;. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input &#x60;{bucket_name: \&quot;mybucket\&quot;, include_regex: [\&quot;directory1/.*\&quot;], exclude_regex: [\&quot;directory1/excluded.*\&quot;]}&#x60;: * &#x60;gs://mybucket/directory1/myfile&#x60; will be included * &#x60;gs://mybucket/directory1/directory2/myfile&#x60; will be included (&#x60;.*&#x60; matches across &#x60;/&#x60;) * &#x60;gs://mybucket/directory0/directory1/myfile&#x60; will _not_ be included (the full path doesn&#39;t match any items in &#x60;include_regex&#x60;) * &#x60;gs://mybucket/directory1/excludedfile&#x60; will _not_ be included (the path matches an item in &#x60;exclude_regex&#x60;) If &#x60;include_regex&#x60; is left empty, it will match all files by default (this is equivalent to setting &#x60;include_regex: [\&quot;.*\&quot;]&#x60;). Some other common use cases: * &#x60;{bucket_name: \&quot;mybucket\&quot;, exclude_regex: [\&quot;.*\\.pdf\&quot;]}&#x60; will include all files in &#x60;mybucket&#x60; except for .pdf files * &#x60;{bucket_name: \&quot;mybucket\&quot;, include_regex: [\&quot;directory/[^/]+\&quot;]}&#x60; will include all files directly under &#x60;gs://mybucket/directory/&#x60;, without matching across &#x60;/&#x60;
     * @alias module:model/GooglePrivacyDlpV2CloudStorageRegexFileSet
     */
    constructor() { 
        
        GooglePrivacyDlpV2CloudStorageRegexFileSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CloudStorageRegexFileSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CloudStorageRegexFileSet} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CloudStorageRegexFileSet} The populated <code>GooglePrivacyDlpV2CloudStorageRegexFileSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CloudStorageRegexFileSet();

            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('excludeRegex')) {
                obj['excludeRegex'] = ApiClient.convertToType(data['excludeRegex'], ['String']);
            }
            if (data.hasOwnProperty('includeRegex')) {
                obj['includeRegex'] = ApiClient.convertToType(data['includeRegex'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CloudStorageRegexFileSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CloudStorageRegexFileSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludeRegex'])) {
            throw new Error("Expected the field `excludeRegex` to be an array in the JSON data but got " + data['excludeRegex']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includeRegex'])) {
            throw new Error("Expected the field `includeRegex` to be an array in the JSON data but got " + data['includeRegex']);
        }

        return true;
    }


}



/**
 * The name of a Cloud Storage bucket. Required.
 * @member {String} bucketName
 */
GooglePrivacyDlpV2CloudStorageRegexFileSet.prototype['bucketName'] = undefined;

/**
 * A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
 * @member {Array.<String>} excludeRegex
 */
GooglePrivacyDlpV2CloudStorageRegexFileSet.prototype['excludeRegex'] = undefined;

/**
 * A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
 * @member {Array.<String>} includeRegex
 */
GooglePrivacyDlpV2CloudStorageRegexFileSet.prototype['includeRegex'] = undefined;






export default GooglePrivacyDlpV2CloudStorageRegexFileSet;

