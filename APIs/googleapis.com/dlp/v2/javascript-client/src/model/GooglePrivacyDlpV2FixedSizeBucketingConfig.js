/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2Value from './GooglePrivacyDlpV2Value';

/**
 * The GooglePrivacyDlpV2FixedSizeBucketingConfig model module.
 * @module model/GooglePrivacyDlpV2FixedSizeBucketingConfig
 * @version v2
 */
class GooglePrivacyDlpV2FixedSizeBucketingConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2FixedSizeBucketingConfig</code>.
     * Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound &#x3D; 10 and upper_bound &#x3D; 20, all values that are within this bucket will be replaced with \&quot;10-20\&quot;. This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to learn more.
     * @alias module:model/GooglePrivacyDlpV2FixedSizeBucketingConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2FixedSizeBucketingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2FixedSizeBucketingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2FixedSizeBucketingConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2FixedSizeBucketingConfig} The populated <code>GooglePrivacyDlpV2FixedSizeBucketingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2FixedSizeBucketingConfig();

            if (data.hasOwnProperty('bucketSize')) {
                obj['bucketSize'] = ApiClient.convertToType(data['bucketSize'], 'Number');
            }
            if (data.hasOwnProperty('lowerBound')) {
                obj['lowerBound'] = GooglePrivacyDlpV2Value.constructFromObject(data['lowerBound']);
            }
            if (data.hasOwnProperty('upperBound')) {
                obj['upperBound'] = GooglePrivacyDlpV2Value.constructFromObject(data['upperBound']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2FixedSizeBucketingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2FixedSizeBucketingConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `lowerBound`
        if (data['lowerBound']) { // data not null
          GooglePrivacyDlpV2Value.validateJSON(data['lowerBound']);
        }
        // validate the optional field `upperBound`
        if (data['upperBound']) { // data not null
          GooglePrivacyDlpV2Value.validateJSON(data['upperBound']);
        }

        return true;
    }


}



/**
 * Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
 * @member {Number} bucketSize
 */
GooglePrivacyDlpV2FixedSizeBucketingConfig.prototype['bucketSize'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2Value} lowerBound
 */
GooglePrivacyDlpV2FixedSizeBucketingConfig.prototype['lowerBound'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2Value} upperBound
 */
GooglePrivacyDlpV2FixedSizeBucketingConfig.prototype['upperBound'] = undefined;






export default GooglePrivacyDlpV2FixedSizeBucketingConfig;

