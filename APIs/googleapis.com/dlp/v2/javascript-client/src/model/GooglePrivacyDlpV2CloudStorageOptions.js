/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2FileSet from './GooglePrivacyDlpV2FileSet';

/**
 * The GooglePrivacyDlpV2CloudStorageOptions model module.
 * @module model/GooglePrivacyDlpV2CloudStorageOptions
 * @version v2
 */
class GooglePrivacyDlpV2CloudStorageOptions {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CloudStorageOptions</code>.
     * Options defining a file or a set of files within a Cloud Storage bucket.
     * @alias module:model/GooglePrivacyDlpV2CloudStorageOptions
     */
    constructor() { 
        
        GooglePrivacyDlpV2CloudStorageOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CloudStorageOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CloudStorageOptions} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CloudStorageOptions} The populated <code>GooglePrivacyDlpV2CloudStorageOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CloudStorageOptions();

            if (data.hasOwnProperty('bytesLimitPerFile')) {
                obj['bytesLimitPerFile'] = ApiClient.convertToType(data['bytesLimitPerFile'], 'String');
            }
            if (data.hasOwnProperty('bytesLimitPerFilePercent')) {
                obj['bytesLimitPerFilePercent'] = ApiClient.convertToType(data['bytesLimitPerFilePercent'], 'Number');
            }
            if (data.hasOwnProperty('fileSet')) {
                obj['fileSet'] = GooglePrivacyDlpV2FileSet.constructFromObject(data['fileSet']);
            }
            if (data.hasOwnProperty('fileTypes')) {
                obj['fileTypes'] = ApiClient.convertToType(data['fileTypes'], ['String']);
            }
            if (data.hasOwnProperty('filesLimitPercent')) {
                obj['filesLimitPercent'] = ApiClient.convertToType(data['filesLimitPercent'], 'Number');
            }
            if (data.hasOwnProperty('sampleMethod')) {
                obj['sampleMethod'] = ApiClient.convertToType(data['sampleMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CloudStorageOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CloudStorageOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bytesLimitPerFile'] && !(typeof data['bytesLimitPerFile'] === 'string' || data['bytesLimitPerFile'] instanceof String)) {
            throw new Error("Expected the field `bytesLimitPerFile` to be a primitive type in the JSON string but got " + data['bytesLimitPerFile']);
        }
        // validate the optional field `fileSet`
        if (data['fileSet']) { // data not null
          GooglePrivacyDlpV2FileSet.validateJSON(data['fileSet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fileTypes'])) {
            throw new Error("Expected the field `fileTypes` to be an array in the JSON data but got " + data['fileTypes']);
        }
        // ensure the json data is a string
        if (data['sampleMethod'] && !(typeof data['sampleMethod'] === 'string' || data['sampleMethod'] instanceof String)) {
            throw new Error("Expected the field `sampleMethod` to be a primitive type in the JSON string but got " + data['sampleMethod']);
        }

        return true;
    }


}



/**
 * Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).
 * @member {String} bytesLimitPerFile
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['bytesLimitPerFile'] = undefined;

/**
 * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).
 * @member {Number} bytesLimitPerFilePercent
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['bytesLimitPerFilePercent'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2FileSet} fileSet
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['fileSet'] = undefined;

/**
 * List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
 * @member {Array.<module:model/GooglePrivacyDlpV2CloudStorageOptions.FileTypesEnum>} fileTypes
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['fileTypes'] = undefined;

/**
 * Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
 * @member {Number} filesLimitPercent
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['filesLimitPercent'] = undefined;

/**
 * How to sample the data.
 * @member {module:model/GooglePrivacyDlpV2CloudStorageOptions.SampleMethodEnum} sampleMethod
 */
GooglePrivacyDlpV2CloudStorageOptions.prototype['sampleMethod'] = undefined;





/**
 * Allowed values for the <code>fileTypes</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2CloudStorageOptions['FileTypesEnum'] = {

    /**
     * value: "FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "FILE_TYPE_UNSPECIFIED": "FILE_TYPE_UNSPECIFIED",

    /**
     * value: "BINARY_FILE"
     * @const
     */
    "BINARY_FILE": "BINARY_FILE",

    /**
     * value: "TEXT_FILE"
     * @const
     */
    "TEXT_FILE": "TEXT_FILE",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "WORD"
     * @const
     */
    "WORD": "WORD",

    /**
     * value: "PDF"
     * @const
     */
    "PDF": "PDF",

    /**
     * value: "AVRO"
     * @const
     */
    "AVRO": "AVRO",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "TSV"
     * @const
     */
    "TSV": "TSV",

    /**
     * value: "POWERPOINT"
     * @const
     */
    "POWERPOINT": "POWERPOINT",

    /**
     * value: "EXCEL"
     * @const
     */
    "EXCEL": "EXCEL"
};


/**
 * Allowed values for the <code>sampleMethod</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2CloudStorageOptions['SampleMethodEnum'] = {

    /**
     * value: "SAMPLE_METHOD_UNSPECIFIED"
     * @const
     */
    "SAMPLE_METHOD_UNSPECIFIED": "SAMPLE_METHOD_UNSPECIFIED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "RANDOM_START"
     * @const
     */
    "RANDOM_START": "RANDOM_START"
};



export default GooglePrivacyDlpV2CloudStorageOptions;

