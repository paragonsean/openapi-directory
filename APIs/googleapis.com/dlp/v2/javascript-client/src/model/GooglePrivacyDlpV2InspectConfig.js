/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2CustomInfoType from './GooglePrivacyDlpV2CustomInfoType';
import GooglePrivacyDlpV2FindingLimits from './GooglePrivacyDlpV2FindingLimits';
import GooglePrivacyDlpV2InfoType from './GooglePrivacyDlpV2InfoType';
import GooglePrivacyDlpV2InfoTypeLikelihood from './GooglePrivacyDlpV2InfoTypeLikelihood';
import GooglePrivacyDlpV2InspectionRuleSet from './GooglePrivacyDlpV2InspectionRuleSet';

/**
 * The GooglePrivacyDlpV2InspectConfig model module.
 * @module model/GooglePrivacyDlpV2InspectConfig
 * @version v2
 */
class GooglePrivacyDlpV2InspectConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2InspectConfig</code>.
     * Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
     * @alias module:model/GooglePrivacyDlpV2InspectConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2InspectConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2InspectConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2InspectConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2InspectConfig} The populated <code>GooglePrivacyDlpV2InspectConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2InspectConfig();

            if (data.hasOwnProperty('contentOptions')) {
                obj['contentOptions'] = ApiClient.convertToType(data['contentOptions'], ['String']);
            }
            if (data.hasOwnProperty('customInfoTypes')) {
                obj['customInfoTypes'] = ApiClient.convertToType(data['customInfoTypes'], [GooglePrivacyDlpV2CustomInfoType]);
            }
            if (data.hasOwnProperty('excludeInfoTypes')) {
                obj['excludeInfoTypes'] = ApiClient.convertToType(data['excludeInfoTypes'], 'Boolean');
            }
            if (data.hasOwnProperty('includeQuote')) {
                obj['includeQuote'] = ApiClient.convertToType(data['includeQuote'], 'Boolean');
            }
            if (data.hasOwnProperty('infoTypes')) {
                obj['infoTypes'] = ApiClient.convertToType(data['infoTypes'], [GooglePrivacyDlpV2InfoType]);
            }
            if (data.hasOwnProperty('limits')) {
                obj['limits'] = GooglePrivacyDlpV2FindingLimits.constructFromObject(data['limits']);
            }
            if (data.hasOwnProperty('minLikelihood')) {
                obj['minLikelihood'] = ApiClient.convertToType(data['minLikelihood'], 'String');
            }
            if (data.hasOwnProperty('minLikelihoodPerInfoType')) {
                obj['minLikelihoodPerInfoType'] = ApiClient.convertToType(data['minLikelihoodPerInfoType'], [GooglePrivacyDlpV2InfoTypeLikelihood]);
            }
            if (data.hasOwnProperty('ruleSet')) {
                obj['ruleSet'] = ApiClient.convertToType(data['ruleSet'], [GooglePrivacyDlpV2InspectionRuleSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2InspectConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2InspectConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['contentOptions'])) {
            throw new Error("Expected the field `contentOptions` to be an array in the JSON data but got " + data['contentOptions']);
        }
        if (data['customInfoTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customInfoTypes'])) {
                throw new Error("Expected the field `customInfoTypes` to be an array in the JSON data but got " + data['customInfoTypes']);
            }
            // validate the optional field `customInfoTypes` (array)
            for (const item of data['customInfoTypes']) {
                GooglePrivacyDlpV2CustomInfoType.validateJSON(item);
            };
        }
        if (data['infoTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['infoTypes'])) {
                throw new Error("Expected the field `infoTypes` to be an array in the JSON data but got " + data['infoTypes']);
            }
            // validate the optional field `infoTypes` (array)
            for (const item of data['infoTypes']) {
                GooglePrivacyDlpV2InfoType.validateJSON(item);
            };
        }
        // validate the optional field `limits`
        if (data['limits']) { // data not null
          GooglePrivacyDlpV2FindingLimits.validateJSON(data['limits']);
        }
        // ensure the json data is a string
        if (data['minLikelihood'] && !(typeof data['minLikelihood'] === 'string' || data['minLikelihood'] instanceof String)) {
            throw new Error("Expected the field `minLikelihood` to be a primitive type in the JSON string but got " + data['minLikelihood']);
        }
        if (data['minLikelihoodPerInfoType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['minLikelihoodPerInfoType'])) {
                throw new Error("Expected the field `minLikelihoodPerInfoType` to be an array in the JSON data but got " + data['minLikelihoodPerInfoType']);
            }
            // validate the optional field `minLikelihoodPerInfoType` (array)
            for (const item of data['minLikelihoodPerInfoType']) {
                GooglePrivacyDlpV2InfoTypeLikelihood.validateJSON(item);
            };
        }
        if (data['ruleSet']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ruleSet'])) {
                throw new Error("Expected the field `ruleSet` to be an array in the JSON data but got " + data['ruleSet']);
            }
            // validate the optional field `ruleSet` (array)
            for (const item of data['ruleSet']) {
                GooglePrivacyDlpV2InspectionRuleSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Deprecated and unused.
 * @member {Array.<module:model/GooglePrivacyDlpV2InspectConfig.ContentOptionsEnum>} contentOptions
 */
GooglePrivacyDlpV2InspectConfig.prototype['contentOptions'] = undefined;

/**
 * CustomInfoTypes provided by the user. See https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes to learn more.
 * @member {Array.<module:model/GooglePrivacyDlpV2CustomInfoType>} customInfoTypes
 */
GooglePrivacyDlpV2InspectConfig.prototype['customInfoTypes'] = undefined;

/**
 * When true, excludes type information of the findings. This is not used for data profiling.
 * @member {Boolean} excludeInfoTypes
 */
GooglePrivacyDlpV2InspectConfig.prototype['excludeInfoTypes'] = undefined;

/**
 * When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
 * @member {Boolean} includeQuote
 */
GooglePrivacyDlpV2InspectConfig.prototype['includeQuote'] = undefined;

/**
 * Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
 * @member {Array.<module:model/GooglePrivacyDlpV2InfoType>} infoTypes
 */
GooglePrivacyDlpV2InspectConfig.prototype['infoTypes'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2FindingLimits} limits
 */
GooglePrivacyDlpV2InspectConfig.prototype['limits'] = undefined;

/**
 * Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/sensitive-data-protection/docs/likelihood).
 * @member {module:model/GooglePrivacyDlpV2InspectConfig.MinLikelihoodEnum} minLikelihood
 */
GooglePrivacyDlpV2InspectConfig.prototype['minLikelihood'] = undefined;

/**
 * Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
 * @member {Array.<module:model/GooglePrivacyDlpV2InfoTypeLikelihood>} minLikelihoodPerInfoType
 */
GooglePrivacyDlpV2InspectConfig.prototype['minLikelihoodPerInfoType'] = undefined;

/**
 * Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
 * @member {Array.<module:model/GooglePrivacyDlpV2InspectionRuleSet>} ruleSet
 */
GooglePrivacyDlpV2InspectConfig.prototype['ruleSet'] = undefined;





/**
 * Allowed values for the <code>contentOptions</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2InspectConfig['ContentOptionsEnum'] = {

    /**
     * value: "CONTENT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CONTENT_UNSPECIFIED",

    /**
     * value: "CONTENT_TEXT"
     * @const
     */
    "TEXT": "CONTENT_TEXT",

    /**
     * value: "CONTENT_IMAGE"
     * @const
     */
    "IMAGE": "CONTENT_IMAGE"
};


/**
 * Allowed values for the <code>minLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2InspectConfig['MinLikelihoodEnum'] = {

    /**
     * value: "LIKELIHOOD_UNSPECIFIED"
     * @const
     */
    "LIKELIHOOD_UNSPECIFIED": "LIKELIHOOD_UNSPECIFIED",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};



export default GooglePrivacyDlpV2InspectConfig;

