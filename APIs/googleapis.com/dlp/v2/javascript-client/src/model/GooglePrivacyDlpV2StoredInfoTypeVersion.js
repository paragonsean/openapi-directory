/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2Error from './GooglePrivacyDlpV2Error';
import GooglePrivacyDlpV2StoredInfoTypeConfig from './GooglePrivacyDlpV2StoredInfoTypeConfig';
import GooglePrivacyDlpV2StoredInfoTypeStats from './GooglePrivacyDlpV2StoredInfoTypeStats';

/**
 * The GooglePrivacyDlpV2StoredInfoTypeVersion model module.
 * @module model/GooglePrivacyDlpV2StoredInfoTypeVersion
 * @version v2
 */
class GooglePrivacyDlpV2StoredInfoTypeVersion {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2StoredInfoTypeVersion</code>.
     * Version of a StoredInfoType, including the configuration used to build it, create timestamp, and current state.
     * @alias module:model/GooglePrivacyDlpV2StoredInfoTypeVersion
     */
    constructor() { 
        
        GooglePrivacyDlpV2StoredInfoTypeVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2StoredInfoTypeVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2StoredInfoTypeVersion} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2StoredInfoTypeVersion} The populated <code>GooglePrivacyDlpV2StoredInfoTypeVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2StoredInfoTypeVersion();

            if (data.hasOwnProperty('config')) {
                obj['config'] = GooglePrivacyDlpV2StoredInfoTypeConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [GooglePrivacyDlpV2Error]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = GooglePrivacyDlpV2StoredInfoTypeStats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2StoredInfoTypeVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2StoredInfoTypeVersion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          GooglePrivacyDlpV2StoredInfoTypeConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                GooglePrivacyDlpV2Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          GooglePrivacyDlpV2StoredInfoTypeStats.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2StoredInfoTypeConfig} config
 */
GooglePrivacyDlpV2StoredInfoTypeVersion.prototype['config'] = undefined;

/**
 * Create timestamp of the version. Read-only, determined by the system when the version is created.
 * @member {String} createTime
 */
GooglePrivacyDlpV2StoredInfoTypeVersion.prototype['createTime'] = undefined;

/**
 * Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.
 * @member {Array.<module:model/GooglePrivacyDlpV2Error>} errors
 */
GooglePrivacyDlpV2StoredInfoTypeVersion.prototype['errors'] = undefined;

/**
 * Stored info type version state. Read-only, updated by the system during dictionary creation.
 * @member {module:model/GooglePrivacyDlpV2StoredInfoTypeVersion.StateEnum} state
 */
GooglePrivacyDlpV2StoredInfoTypeVersion.prototype['state'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2StoredInfoTypeStats} stats
 */
GooglePrivacyDlpV2StoredInfoTypeVersion.prototype['stats'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2StoredInfoTypeVersion['StateEnum'] = {

    /**
     * value: "STORED_INFO_TYPE_STATE_UNSPECIFIED"
     * @const
     */
    "STORED_INFO_TYPE_STATE_UNSPECIFIED": "STORED_INFO_TYPE_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID"
};



export default GooglePrivacyDlpV2StoredInfoTypeVersion;

