/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2CloudStoragePath from './GooglePrivacyDlpV2CloudStoragePath';
import GooglePrivacyDlpV2WordList from './GooglePrivacyDlpV2WordList';

/**
 * The GooglePrivacyDlpV2Dictionary model module.
 * @module model/GooglePrivacyDlpV2Dictionary
 * @version v2
 */
class GooglePrivacyDlpV2Dictionary {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2Dictionary</code>.
     * Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase \&quot;Sam Johnson\&quot; will match all three phrases \&quot;sam johnson\&quot;, \&quot;Sam, Johnson\&quot;, and \&quot;Sam (Johnson)\&quot;. Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word \&quot;jen\&quot; will match the first three letters of the text \&quot;jen123\&quot; but will return no matches for \&quot;jennifer\&quot;. Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/sensitive-data-protection/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using &#x60;LargeCustomDictionaryConfig&#x60; in the &#x60;StoredInfoType&#x60; API.
     * @alias module:model/GooglePrivacyDlpV2Dictionary
     */
    constructor() { 
        
        GooglePrivacyDlpV2Dictionary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2Dictionary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2Dictionary} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2Dictionary} The populated <code>GooglePrivacyDlpV2Dictionary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2Dictionary();

            if (data.hasOwnProperty('cloudStoragePath')) {
                obj['cloudStoragePath'] = GooglePrivacyDlpV2CloudStoragePath.constructFromObject(data['cloudStoragePath']);
            }
            if (data.hasOwnProperty('wordList')) {
                obj['wordList'] = GooglePrivacyDlpV2WordList.constructFromObject(data['wordList']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2Dictionary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2Dictionary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cloudStoragePath`
        if (data['cloudStoragePath']) { // data not null
          GooglePrivacyDlpV2CloudStoragePath.validateJSON(data['cloudStoragePath']);
        }
        // validate the optional field `wordList`
        if (data['wordList']) { // data not null
          GooglePrivacyDlpV2WordList.validateJSON(data['wordList']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2CloudStoragePath} cloudStoragePath
 */
GooglePrivacyDlpV2Dictionary.prototype['cloudStoragePath'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2WordList} wordList
 */
GooglePrivacyDlpV2Dictionary.prototype['wordList'] = undefined;






export default GooglePrivacyDlpV2Dictionary;

