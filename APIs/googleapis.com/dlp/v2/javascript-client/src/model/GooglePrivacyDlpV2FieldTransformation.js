/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';
import GooglePrivacyDlpV2InfoTypeTransformations from './GooglePrivacyDlpV2InfoTypeTransformations';
import GooglePrivacyDlpV2PrimitiveTransformation from './GooglePrivacyDlpV2PrimitiveTransformation';
import GooglePrivacyDlpV2RecordCondition from './GooglePrivacyDlpV2RecordCondition';

/**
 * The GooglePrivacyDlpV2FieldTransformation model module.
 * @module model/GooglePrivacyDlpV2FieldTransformation
 * @version v2
 */
class GooglePrivacyDlpV2FieldTransformation {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2FieldTransformation</code>.
     * The transformation to apply to the field.
     * @alias module:model/GooglePrivacyDlpV2FieldTransformation
     */
    constructor() { 
        
        GooglePrivacyDlpV2FieldTransformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2FieldTransformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2FieldTransformation} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2FieldTransformation} The populated <code>GooglePrivacyDlpV2FieldTransformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2FieldTransformation();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = GooglePrivacyDlpV2RecordCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [GooglePrivacyDlpV2FieldId]);
            }
            if (data.hasOwnProperty('infoTypeTransformations')) {
                obj['infoTypeTransformations'] = GooglePrivacyDlpV2InfoTypeTransformations.constructFromObject(data['infoTypeTransformations']);
            }
            if (data.hasOwnProperty('primitiveTransformation')) {
                obj['primitiveTransformation'] = GooglePrivacyDlpV2PrimitiveTransformation.constructFromObject(data['primitiveTransformation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2FieldTransformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2FieldTransformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          GooglePrivacyDlpV2RecordCondition.validateJSON(data['condition']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                GooglePrivacyDlpV2FieldId.validateJSON(item);
            };
        }
        // validate the optional field `infoTypeTransformations`
        if (data['infoTypeTransformations']) { // data not null
          GooglePrivacyDlpV2InfoTypeTransformations.validateJSON(data['infoTypeTransformations']);
        }
        // validate the optional field `primitiveTransformation`
        if (data['primitiveTransformation']) { // data not null
          GooglePrivacyDlpV2PrimitiveTransformation.validateJSON(data['primitiveTransformation']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2RecordCondition} condition
 */
GooglePrivacyDlpV2FieldTransformation.prototype['condition'] = undefined;

/**
 * Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".
 * @member {Array.<module:model/GooglePrivacyDlpV2FieldId>} fields
 */
GooglePrivacyDlpV2FieldTransformation.prototype['fields'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2InfoTypeTransformations} infoTypeTransformations
 */
GooglePrivacyDlpV2FieldTransformation.prototype['infoTypeTransformations'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2PrimitiveTransformation} primitiveTransformation
 */
GooglePrivacyDlpV2FieldTransformation.prototype['primitiveTransformation'] = undefined;






export default GooglePrivacyDlpV2FieldTransformation;

