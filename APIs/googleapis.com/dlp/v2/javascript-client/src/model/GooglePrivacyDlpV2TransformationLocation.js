/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2RecordTransformation from './GooglePrivacyDlpV2RecordTransformation';

/**
 * The GooglePrivacyDlpV2TransformationLocation model module.
 * @module model/GooglePrivacyDlpV2TransformationLocation
 * @version v2
 */
class GooglePrivacyDlpV2TransformationLocation {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2TransformationLocation</code>.
     * Specifies the location of a transformation.
     * @alias module:model/GooglePrivacyDlpV2TransformationLocation
     */
    constructor() { 
        
        GooglePrivacyDlpV2TransformationLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2TransformationLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2TransformationLocation} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2TransformationLocation} The populated <code>GooglePrivacyDlpV2TransformationLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2TransformationLocation();

            if (data.hasOwnProperty('containerType')) {
                obj['containerType'] = ApiClient.convertToType(data['containerType'], 'String');
            }
            if (data.hasOwnProperty('findingId')) {
                obj['findingId'] = ApiClient.convertToType(data['findingId'], 'String');
            }
            if (data.hasOwnProperty('recordTransformation')) {
                obj['recordTransformation'] = GooglePrivacyDlpV2RecordTransformation.constructFromObject(data['recordTransformation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2TransformationLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2TransformationLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerType'] && !(typeof data['containerType'] === 'string' || data['containerType'] instanceof String)) {
            throw new Error("Expected the field `containerType` to be a primitive type in the JSON string but got " + data['containerType']);
        }
        // ensure the json data is a string
        if (data['findingId'] && !(typeof data['findingId'] === 'string' || data['findingId'] instanceof String)) {
            throw new Error("Expected the field `findingId` to be a primitive type in the JSON string but got " + data['findingId']);
        }
        // validate the optional field `recordTransformation`
        if (data['recordTransformation']) { // data not null
          GooglePrivacyDlpV2RecordTransformation.validateJSON(data['recordTransformation']);
        }

        return true;
    }


}



/**
 * Information about the functionality of the container where this finding occurred, if available.
 * @member {module:model/GooglePrivacyDlpV2TransformationLocation.ContainerTypeEnum} containerType
 */
GooglePrivacyDlpV2TransformationLocation.prototype['containerType'] = undefined;

/**
 * For infotype transformations, link to the corresponding findings ID so that location information does not need to be duplicated. Each findings ID correlates to an entry in the findings output table, this table only gets created when users specify to save findings (add the save findings action to the request).
 * @member {String} findingId
 */
GooglePrivacyDlpV2TransformationLocation.prototype['findingId'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2RecordTransformation} recordTransformation
 */
GooglePrivacyDlpV2TransformationLocation.prototype['recordTransformation'] = undefined;





/**
 * Allowed values for the <code>containerType</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2TransformationLocation['ContainerTypeEnum'] = {

    /**
     * value: "TRANSFORM_UNKNOWN_CONTAINER"
     * @const
     */
    "UNKNOWN_CONTAINER": "TRANSFORM_UNKNOWN_CONTAINER",

    /**
     * value: "TRANSFORM_BODY"
     * @const
     */
    "BODY": "TRANSFORM_BODY",

    /**
     * value: "TRANSFORM_METADATA"
     * @const
     */
    "METADATA": "TRANSFORM_METADATA",

    /**
     * value: "TRANSFORM_TABLE"
     * @const
     */
    "TABLE": "TRANSFORM_TABLE"
};



export default GooglePrivacyDlpV2TransformationLocation;

