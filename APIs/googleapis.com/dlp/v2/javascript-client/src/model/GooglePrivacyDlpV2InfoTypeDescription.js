/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2InfoTypeCategory from './GooglePrivacyDlpV2InfoTypeCategory';
import GooglePrivacyDlpV2SensitivityScore from './GooglePrivacyDlpV2SensitivityScore';
import GooglePrivacyDlpV2VersionDescription from './GooglePrivacyDlpV2VersionDescription';

/**
 * The GooglePrivacyDlpV2InfoTypeDescription model module.
 * @module model/GooglePrivacyDlpV2InfoTypeDescription
 * @version v2
 */
class GooglePrivacyDlpV2InfoTypeDescription {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2InfoTypeDescription</code>.
     * InfoType description.
     * @alias module:model/GooglePrivacyDlpV2InfoTypeDescription
     */
    constructor() { 
        
        GooglePrivacyDlpV2InfoTypeDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2InfoTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2InfoTypeDescription} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2InfoTypeDescription} The populated <code>GooglePrivacyDlpV2InfoTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2InfoTypeDescription();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [GooglePrivacyDlpV2InfoTypeCategory]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sensitivityScore')) {
                obj['sensitivityScore'] = GooglePrivacyDlpV2SensitivityScore.constructFromObject(data['sensitivityScore']);
            }
            if (data.hasOwnProperty('supportedBy')) {
                obj['supportedBy'] = ApiClient.convertToType(data['supportedBy'], ['String']);
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [GooglePrivacyDlpV2VersionDescription]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2InfoTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2InfoTypeDescription</code>.
     */
    static validateJSON(data) {
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                GooglePrivacyDlpV2InfoTypeCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `sensitivityScore`
        if (data['sensitivityScore']) { // data not null
          GooglePrivacyDlpV2SensitivityScore.validateJSON(data['sensitivityScore']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedBy'])) {
            throw new Error("Expected the field `supportedBy` to be an array in the JSON data but got " + data['supportedBy']);
        }
        if (data['versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versions'])) {
                throw new Error("Expected the field `versions` to be an array in the JSON data but got " + data['versions']);
            }
            // validate the optional field `versions` (array)
            for (const item of data['versions']) {
                GooglePrivacyDlpV2VersionDescription.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The category of the infoType.
 * @member {Array.<module:model/GooglePrivacyDlpV2InfoTypeCategory>} categories
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['categories'] = undefined;

/**
 * Description of the infotype. Translated when language is provided in the request.
 * @member {String} description
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['description'] = undefined;

/**
 * Human readable form of the infoType name.
 * @member {String} displayName
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['displayName'] = undefined;

/**
 * Internal name of the infoType.
 * @member {String} name
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['name'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2SensitivityScore} sensitivityScore
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['sensitivityScore'] = undefined;

/**
 * Which parts of the API supports this InfoType.
 * @member {Array.<module:model/GooglePrivacyDlpV2InfoTypeDescription.SupportedByEnum>} supportedBy
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['supportedBy'] = undefined;

/**
 * A list of available versions for the infotype.
 * @member {Array.<module:model/GooglePrivacyDlpV2VersionDescription>} versions
 */
GooglePrivacyDlpV2InfoTypeDescription.prototype['versions'] = undefined;





/**
 * Allowed values for the <code>supportedBy</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2InfoTypeDescription['SupportedByEnum'] = {

    /**
     * value: "ENUM_TYPE_UNSPECIFIED"
     * @const
     */
    "ENUM_TYPE_UNSPECIFIED": "ENUM_TYPE_UNSPECIFIED",

    /**
     * value: "INSPECT"
     * @const
     */
    "INSPECT": "INSPECT",

    /**
     * value: "RISK_ANALYSIS"
     * @const
     */
    "RISK_ANALYSIS": "RISK_ANALYSIS"
};



export default GooglePrivacyDlpV2InfoTypeDescription;

