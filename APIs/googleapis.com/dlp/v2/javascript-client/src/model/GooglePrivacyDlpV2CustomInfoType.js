/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2DetectionRule from './GooglePrivacyDlpV2DetectionRule';
import GooglePrivacyDlpV2Dictionary from './GooglePrivacyDlpV2Dictionary';
import GooglePrivacyDlpV2InfoType from './GooglePrivacyDlpV2InfoType';
import GooglePrivacyDlpV2Regex from './GooglePrivacyDlpV2Regex';
import GooglePrivacyDlpV2SensitivityScore from './GooglePrivacyDlpV2SensitivityScore';
import GooglePrivacyDlpV2StoredType from './GooglePrivacyDlpV2StoredType';

/**
 * The GooglePrivacyDlpV2CustomInfoType model module.
 * @module model/GooglePrivacyDlpV2CustomInfoType
 * @version v2
 */
class GooglePrivacyDlpV2CustomInfoType {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CustomInfoType</code>.
     * Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
     * @alias module:model/GooglePrivacyDlpV2CustomInfoType
     */
    constructor() { 
        
        GooglePrivacyDlpV2CustomInfoType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CustomInfoType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CustomInfoType} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CustomInfoType} The populated <code>GooglePrivacyDlpV2CustomInfoType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CustomInfoType();

            if (data.hasOwnProperty('detectionRules')) {
                obj['detectionRules'] = ApiClient.convertToType(data['detectionRules'], [GooglePrivacyDlpV2DetectionRule]);
            }
            if (data.hasOwnProperty('dictionary')) {
                obj['dictionary'] = GooglePrivacyDlpV2Dictionary.constructFromObject(data['dictionary']);
            }
            if (data.hasOwnProperty('exclusionType')) {
                obj['exclusionType'] = ApiClient.convertToType(data['exclusionType'], 'String');
            }
            if (data.hasOwnProperty('infoType')) {
                obj['infoType'] = GooglePrivacyDlpV2InfoType.constructFromObject(data['infoType']);
            }
            if (data.hasOwnProperty('likelihood')) {
                obj['likelihood'] = ApiClient.convertToType(data['likelihood'], 'String');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = GooglePrivacyDlpV2Regex.constructFromObject(data['regex']);
            }
            if (data.hasOwnProperty('sensitivityScore')) {
                obj['sensitivityScore'] = GooglePrivacyDlpV2SensitivityScore.constructFromObject(data['sensitivityScore']);
            }
            if (data.hasOwnProperty('storedType')) {
                obj['storedType'] = GooglePrivacyDlpV2StoredType.constructFromObject(data['storedType']);
            }
            if (data.hasOwnProperty('surrogateType')) {
                obj['surrogateType'] = ApiClient.convertToType(data['surrogateType'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CustomInfoType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CustomInfoType</code>.
     */
    static validateJSON(data) {
        if (data['detectionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['detectionRules'])) {
                throw new Error("Expected the field `detectionRules` to be an array in the JSON data but got " + data['detectionRules']);
            }
            // validate the optional field `detectionRules` (array)
            for (const item of data['detectionRules']) {
                GooglePrivacyDlpV2DetectionRule.validateJSON(item);
            };
        }
        // validate the optional field `dictionary`
        if (data['dictionary']) { // data not null
          GooglePrivacyDlpV2Dictionary.validateJSON(data['dictionary']);
        }
        // ensure the json data is a string
        if (data['exclusionType'] && !(typeof data['exclusionType'] === 'string' || data['exclusionType'] instanceof String)) {
            throw new Error("Expected the field `exclusionType` to be a primitive type in the JSON string but got " + data['exclusionType']);
        }
        // validate the optional field `infoType`
        if (data['infoType']) { // data not null
          GooglePrivacyDlpV2InfoType.validateJSON(data['infoType']);
        }
        // ensure the json data is a string
        if (data['likelihood'] && !(typeof data['likelihood'] === 'string' || data['likelihood'] instanceof String)) {
            throw new Error("Expected the field `likelihood` to be a primitive type in the JSON string but got " + data['likelihood']);
        }
        // validate the optional field `regex`
        if (data['regex']) { // data not null
          GooglePrivacyDlpV2Regex.validateJSON(data['regex']);
        }
        // validate the optional field `sensitivityScore`
        if (data['sensitivityScore']) { // data not null
          GooglePrivacyDlpV2SensitivityScore.validateJSON(data['sensitivityScore']);
        }
        // validate the optional field `storedType`
        if (data['storedType']) { // data not null
          GooglePrivacyDlpV2StoredType.validateJSON(data['storedType']);
        }

        return true;
    }


}



/**
 * Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
 * @member {Array.<module:model/GooglePrivacyDlpV2DetectionRule>} detectionRules
 */
GooglePrivacyDlpV2CustomInfoType.prototype['detectionRules'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2Dictionary} dictionary
 */
GooglePrivacyDlpV2CustomInfoType.prototype['dictionary'] = undefined;

/**
 * If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
 * @member {module:model/GooglePrivacyDlpV2CustomInfoType.ExclusionTypeEnum} exclusionType
 */
GooglePrivacyDlpV2CustomInfoType.prototype['exclusionType'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2InfoType} infoType
 */
GooglePrivacyDlpV2CustomInfoType.prototype['infoType'] = undefined;

/**
 * Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
 * @member {module:model/GooglePrivacyDlpV2CustomInfoType.LikelihoodEnum} likelihood
 */
GooglePrivacyDlpV2CustomInfoType.prototype['likelihood'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2Regex} regex
 */
GooglePrivacyDlpV2CustomInfoType.prototype['regex'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2SensitivityScore} sensitivityScore
 */
GooglePrivacyDlpV2CustomInfoType.prototype['sensitivityScore'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2StoredType} storedType
 */
GooglePrivacyDlpV2CustomInfoType.prototype['storedType'] = undefined;

/**
 * Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a \"surrogate\" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
 * @member {Object} surrogateType
 */
GooglePrivacyDlpV2CustomInfoType.prototype['surrogateType'] = undefined;





/**
 * Allowed values for the <code>exclusionType</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2CustomInfoType['ExclusionTypeEnum'] = {

    /**
     * value: "EXCLUSION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "EXCLUSION_TYPE_UNSPECIFIED",

    /**
     * value: "EXCLUSION_TYPE_EXCLUDE"
     * @const
     */
    "EXCLUDE": "EXCLUSION_TYPE_EXCLUDE"
};


/**
 * Allowed values for the <code>likelihood</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2CustomInfoType['LikelihoodEnum'] = {

    /**
     * value: "LIKELIHOOD_UNSPECIFIED"
     * @const
     */
    "LIKELIHOOD_UNSPECIFIED": "LIKELIHOOD_UNSPECIFIED",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};



export default GooglePrivacyDlpV2CustomInfoType;

