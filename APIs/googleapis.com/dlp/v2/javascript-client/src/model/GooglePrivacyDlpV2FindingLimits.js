/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2InfoTypeLimit from './GooglePrivacyDlpV2InfoTypeLimit';

/**
 * The GooglePrivacyDlpV2FindingLimits model module.
 * @module model/GooglePrivacyDlpV2FindingLimits
 * @version v2
 */
class GooglePrivacyDlpV2FindingLimits {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2FindingLimits</code>.
     * Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don&#39;t apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don&#39;t include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
     * @alias module:model/GooglePrivacyDlpV2FindingLimits
     */
    constructor() { 
        
        GooglePrivacyDlpV2FindingLimits.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2FindingLimits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2FindingLimits} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2FindingLimits} The populated <code>GooglePrivacyDlpV2FindingLimits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2FindingLimits();

            if (data.hasOwnProperty('maxFindingsPerInfoType')) {
                obj['maxFindingsPerInfoType'] = ApiClient.convertToType(data['maxFindingsPerInfoType'], [GooglePrivacyDlpV2InfoTypeLimit]);
            }
            if (data.hasOwnProperty('maxFindingsPerItem')) {
                obj['maxFindingsPerItem'] = ApiClient.convertToType(data['maxFindingsPerItem'], 'Number');
            }
            if (data.hasOwnProperty('maxFindingsPerRequest')) {
                obj['maxFindingsPerRequest'] = ApiClient.convertToType(data['maxFindingsPerRequest'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2FindingLimits</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2FindingLimits</code>.
     */
    static validateJSON(data) {
        if (data['maxFindingsPerInfoType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['maxFindingsPerInfoType'])) {
                throw new Error("Expected the field `maxFindingsPerInfoType` to be an array in the JSON data but got " + data['maxFindingsPerInfoType']);
            }
            // validate the optional field `maxFindingsPerInfoType` (array)
            for (const item of data['maxFindingsPerInfoType']) {
                GooglePrivacyDlpV2InfoTypeLimit.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Configuration of findings limit given for specified infoTypes.
 * @member {Array.<module:model/GooglePrivacyDlpV2InfoTypeLimit>} maxFindingsPerInfoType
 */
GooglePrivacyDlpV2FindingLimits.prototype['maxFindingsPerInfoType'] = undefined;

/**
 * Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
 * @member {Number} maxFindingsPerItem
 */
GooglePrivacyDlpV2FindingLimits.prototype['maxFindingsPerItem'] = undefined;

/**
 * Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
 * @member {Number} maxFindingsPerRequest
 */
GooglePrivacyDlpV2FindingLimits.prototype['maxFindingsPerRequest'] = undefined;






export default GooglePrivacyDlpV2FindingLimits;

