/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';
import GooglePrivacyDlpV2FieldTransformation from './GooglePrivacyDlpV2FieldTransformation';
import GooglePrivacyDlpV2InfoType from './GooglePrivacyDlpV2InfoType';
import GooglePrivacyDlpV2PrimitiveTransformation from './GooglePrivacyDlpV2PrimitiveTransformation';
import GooglePrivacyDlpV2RecordSuppression from './GooglePrivacyDlpV2RecordSuppression';
import GooglePrivacyDlpV2SummaryResult from './GooglePrivacyDlpV2SummaryResult';

/**
 * The GooglePrivacyDlpV2TransformationSummary model module.
 * @module model/GooglePrivacyDlpV2TransformationSummary
 * @version v2
 */
class GooglePrivacyDlpV2TransformationSummary {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2TransformationSummary</code>.
     * Summary of a single transformation. Only one of &#39;transformation&#39;, &#39;field_transformation&#39;, or &#39;record_suppress&#39; will be set.
     * @alias module:model/GooglePrivacyDlpV2TransformationSummary
     */
    constructor() { 
        
        GooglePrivacyDlpV2TransformationSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2TransformationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2TransformationSummary} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2TransformationSummary} The populated <code>GooglePrivacyDlpV2TransformationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2TransformationSummary();

            if (data.hasOwnProperty('field')) {
                obj['field'] = GooglePrivacyDlpV2FieldId.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('fieldTransformations')) {
                obj['fieldTransformations'] = ApiClient.convertToType(data['fieldTransformations'], [GooglePrivacyDlpV2FieldTransformation]);
            }
            if (data.hasOwnProperty('infoType')) {
                obj['infoType'] = GooglePrivacyDlpV2InfoType.constructFromObject(data['infoType']);
            }
            if (data.hasOwnProperty('recordSuppress')) {
                obj['recordSuppress'] = GooglePrivacyDlpV2RecordSuppression.constructFromObject(data['recordSuppress']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [GooglePrivacyDlpV2SummaryResult]);
            }
            if (data.hasOwnProperty('transformation')) {
                obj['transformation'] = GooglePrivacyDlpV2PrimitiveTransformation.constructFromObject(data['transformation']);
            }
            if (data.hasOwnProperty('transformedBytes')) {
                obj['transformedBytes'] = ApiClient.convertToType(data['transformedBytes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2TransformationSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2TransformationSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `field`
        if (data['field']) { // data not null
          GooglePrivacyDlpV2FieldId.validateJSON(data['field']);
        }
        if (data['fieldTransformations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldTransformations'])) {
                throw new Error("Expected the field `fieldTransformations` to be an array in the JSON data but got " + data['fieldTransformations']);
            }
            // validate the optional field `fieldTransformations` (array)
            for (const item of data['fieldTransformations']) {
                GooglePrivacyDlpV2FieldTransformation.validateJSON(item);
            };
        }
        // validate the optional field `infoType`
        if (data['infoType']) { // data not null
          GooglePrivacyDlpV2InfoType.validateJSON(data['infoType']);
        }
        // validate the optional field `recordSuppress`
        if (data['recordSuppress']) { // data not null
          GooglePrivacyDlpV2RecordSuppression.validateJSON(data['recordSuppress']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                GooglePrivacyDlpV2SummaryResult.validateJSON(item);
            };
        }
        // validate the optional field `transformation`
        if (data['transformation']) { // data not null
          GooglePrivacyDlpV2PrimitiveTransformation.validateJSON(data['transformation']);
        }
        // ensure the json data is a string
        if (data['transformedBytes'] && !(typeof data['transformedBytes'] === 'string' || data['transformedBytes'] instanceof String)) {
            throw new Error("Expected the field `transformedBytes` to be a primitive type in the JSON string but got " + data['transformedBytes']);
        }

        return true;
    }


}



/**
 * @member {module:model/GooglePrivacyDlpV2FieldId} field
 */
GooglePrivacyDlpV2TransformationSummary.prototype['field'] = undefined;

/**
 * The field transformation that was applied. If multiple field transformations are requested for a single field, this list will contain all of them; otherwise, only one is supplied.
 * @member {Array.<module:model/GooglePrivacyDlpV2FieldTransformation>} fieldTransformations
 */
GooglePrivacyDlpV2TransformationSummary.prototype['fieldTransformations'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2InfoType} infoType
 */
GooglePrivacyDlpV2TransformationSummary.prototype['infoType'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2RecordSuppression} recordSuppress
 */
GooglePrivacyDlpV2TransformationSummary.prototype['recordSuppress'] = undefined;

/**
 * Collection of all transformations that took place or had an error.
 * @member {Array.<module:model/GooglePrivacyDlpV2SummaryResult>} results
 */
GooglePrivacyDlpV2TransformationSummary.prototype['results'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2PrimitiveTransformation} transformation
 */
GooglePrivacyDlpV2TransformationSummary.prototype['transformation'] = undefined;

/**
 * Total size in bytes that were transformed in some way.
 * @member {String} transformedBytes
 */
GooglePrivacyDlpV2TransformationSummary.prototype['transformedBytes'] = undefined;






export default GooglePrivacyDlpV2TransformationSummary;

