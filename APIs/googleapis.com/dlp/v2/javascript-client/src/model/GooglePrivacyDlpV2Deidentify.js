/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2TransformationConfig from './GooglePrivacyDlpV2TransformationConfig';
import GooglePrivacyDlpV2TransformationDetailsStorageConfig from './GooglePrivacyDlpV2TransformationDetailsStorageConfig';

/**
 * The GooglePrivacyDlpV2Deidentify model module.
 * @module model/GooglePrivacyDlpV2Deidentify
 * @version v2
 */
class GooglePrivacyDlpV2Deidentify {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2Deidentify</code>.
     * Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
     * @alias module:model/GooglePrivacyDlpV2Deidentify
     */
    constructor() { 
        
        GooglePrivacyDlpV2Deidentify.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2Deidentify</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2Deidentify} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2Deidentify} The populated <code>GooglePrivacyDlpV2Deidentify</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2Deidentify();

            if (data.hasOwnProperty('cloudStorageOutput')) {
                obj['cloudStorageOutput'] = ApiClient.convertToType(data['cloudStorageOutput'], 'String');
            }
            if (data.hasOwnProperty('fileTypesToTransform')) {
                obj['fileTypesToTransform'] = ApiClient.convertToType(data['fileTypesToTransform'], ['String']);
            }
            if (data.hasOwnProperty('transformationConfig')) {
                obj['transformationConfig'] = GooglePrivacyDlpV2TransformationConfig.constructFromObject(data['transformationConfig']);
            }
            if (data.hasOwnProperty('transformationDetailsStorageConfig')) {
                obj['transformationDetailsStorageConfig'] = GooglePrivacyDlpV2TransformationDetailsStorageConfig.constructFromObject(data['transformationDetailsStorageConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2Deidentify</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2Deidentify</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloudStorageOutput'] && !(typeof data['cloudStorageOutput'] === 'string' || data['cloudStorageOutput'] instanceof String)) {
            throw new Error("Expected the field `cloudStorageOutput` to be a primitive type in the JSON string but got " + data['cloudStorageOutput']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fileTypesToTransform'])) {
            throw new Error("Expected the field `fileTypesToTransform` to be an array in the JSON data but got " + data['fileTypesToTransform']);
        }
        // validate the optional field `transformationConfig`
        if (data['transformationConfig']) { // data not null
          GooglePrivacyDlpV2TransformationConfig.validateJSON(data['transformationConfig']);
        }
        // validate the optional field `transformationDetailsStorageConfig`
        if (data['transformationDetailsStorageConfig']) { // data not null
          GooglePrivacyDlpV2TransformationDetailsStorageConfig.validateJSON(data['transformationDetailsStorageConfig']);
        }

        return true;
    }


}



/**
 * Required. User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
 * @member {String} cloudStorageOutput
 */
GooglePrivacyDlpV2Deidentify.prototype['cloudStorageOutput'] = undefined;

/**
 * List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
 * @member {Array.<module:model/GooglePrivacyDlpV2Deidentify.FileTypesToTransformEnum>} fileTypesToTransform
 */
GooglePrivacyDlpV2Deidentify.prototype['fileTypesToTransform'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2TransformationConfig} transformationConfig
 */
GooglePrivacyDlpV2Deidentify.prototype['transformationConfig'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2TransformationDetailsStorageConfig} transformationDetailsStorageConfig
 */
GooglePrivacyDlpV2Deidentify.prototype['transformationDetailsStorageConfig'] = undefined;





/**
 * Allowed values for the <code>fileTypesToTransform</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2Deidentify['FileTypesToTransformEnum'] = {

    /**
     * value: "FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "FILE_TYPE_UNSPECIFIED": "FILE_TYPE_UNSPECIFIED",

    /**
     * value: "BINARY_FILE"
     * @const
     */
    "BINARY_FILE": "BINARY_FILE",

    /**
     * value: "TEXT_FILE"
     * @const
     */
    "TEXT_FILE": "TEXT_FILE",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "WORD"
     * @const
     */
    "WORD": "WORD",

    /**
     * value: "PDF"
     * @const
     */
    "PDF": "PDF",

    /**
     * value: "AVRO"
     * @const
     */
    "AVRO": "AVRO",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "TSV"
     * @const
     */
    "TSV": "TSV",

    /**
     * value: "POWERPOINT"
     * @const
     */
    "POWERPOINT": "POWERPOINT",

    /**
     * value: "EXCEL"
     * @const
     */
    "EXCEL": "EXCEL"
};



export default GooglePrivacyDlpV2Deidentify;

