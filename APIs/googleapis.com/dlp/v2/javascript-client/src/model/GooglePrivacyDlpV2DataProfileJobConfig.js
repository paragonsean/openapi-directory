/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2DataProfileAction from './GooglePrivacyDlpV2DataProfileAction';
import GooglePrivacyDlpV2DataProfileLocation from './GooglePrivacyDlpV2DataProfileLocation';

/**
 * The GooglePrivacyDlpV2DataProfileJobConfig model module.
 * @module model/GooglePrivacyDlpV2DataProfileJobConfig
 * @version v2
 */
class GooglePrivacyDlpV2DataProfileJobConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2DataProfileJobConfig</code>.
     * Configuration for setting up a job to scan resources for profile generation. Only one data profile configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
     * @alias module:model/GooglePrivacyDlpV2DataProfileJobConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2DataProfileJobConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2DataProfileJobConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2DataProfileJobConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2DataProfileJobConfig} The populated <code>GooglePrivacyDlpV2DataProfileJobConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2DataProfileJobConfig();

            if (data.hasOwnProperty('dataProfileActions')) {
                obj['dataProfileActions'] = ApiClient.convertToType(data['dataProfileActions'], [GooglePrivacyDlpV2DataProfileAction]);
            }
            if (data.hasOwnProperty('inspectTemplates')) {
                obj['inspectTemplates'] = ApiClient.convertToType(data['inspectTemplates'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = GooglePrivacyDlpV2DataProfileLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2DataProfileJobConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2DataProfileJobConfig</code>.
     */
    static validateJSON(data) {
        if (data['dataProfileActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataProfileActions'])) {
                throw new Error("Expected the field `dataProfileActions` to be an array in the JSON data but got " + data['dataProfileActions']);
            }
            // validate the optional field `dataProfileActions` (array)
            for (const item of data['dataProfileActions']) {
                GooglePrivacyDlpV2DataProfileAction.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inspectTemplates'])) {
            throw new Error("Expected the field `inspectTemplates` to be an array in the JSON data but got " + data['inspectTemplates']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          GooglePrivacyDlpV2DataProfileLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }

        return true;
    }


}



/**
 * Actions to execute at the completion of the job.
 * @member {Array.<module:model/GooglePrivacyDlpV2DataProfileAction>} dataProfileActions
 */
GooglePrivacyDlpV2DataProfileJobConfig.prototype['dataProfileActions'] = undefined;

/**
 * Detection logic for profile generation. Not all template features are used by profiles. FindingLimits, include_quote and exclude_info_types have no impact on data profiling. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.
 * @member {Array.<String>} inspectTemplates
 */
GooglePrivacyDlpV2DataProfileJobConfig.prototype['inspectTemplates'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2DataProfileLocation} location
 */
GooglePrivacyDlpV2DataProfileJobConfig.prototype['location'] = undefined;

/**
 * The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
 * @member {String} projectId
 */
GooglePrivacyDlpV2DataProfileJobConfig.prototype['projectId'] = undefined;






export default GooglePrivacyDlpV2DataProfileJobConfig;

