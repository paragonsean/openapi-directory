/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2CharsToIgnore from './GooglePrivacyDlpV2CharsToIgnore';

/**
 * The GooglePrivacyDlpV2CharacterMaskConfig model module.
 * @module model/GooglePrivacyDlpV2CharacterMaskConfig
 * @version v2
 */
class GooglePrivacyDlpV2CharacterMaskConfig {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2CharacterMaskConfig</code>.
     * Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we&#39;ll attempt to preserve the original data&#39;s type. (This allows you to take a long like 123 and modify it to a string like **3.
     * @alias module:model/GooglePrivacyDlpV2CharacterMaskConfig
     */
    constructor() { 
        
        GooglePrivacyDlpV2CharacterMaskConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2CharacterMaskConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2CharacterMaskConfig} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2CharacterMaskConfig} The populated <code>GooglePrivacyDlpV2CharacterMaskConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2CharacterMaskConfig();

            if (data.hasOwnProperty('charactersToIgnore')) {
                obj['charactersToIgnore'] = ApiClient.convertToType(data['charactersToIgnore'], [GooglePrivacyDlpV2CharsToIgnore]);
            }
            if (data.hasOwnProperty('maskingCharacter')) {
                obj['maskingCharacter'] = ApiClient.convertToType(data['maskingCharacter'], 'String');
            }
            if (data.hasOwnProperty('numberToMask')) {
                obj['numberToMask'] = ApiClient.convertToType(data['numberToMask'], 'Number');
            }
            if (data.hasOwnProperty('reverseOrder')) {
                obj['reverseOrder'] = ApiClient.convertToType(data['reverseOrder'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2CharacterMaskConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2CharacterMaskConfig</code>.
     */
    static validateJSON(data) {
        if (data['charactersToIgnore']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['charactersToIgnore'])) {
                throw new Error("Expected the field `charactersToIgnore` to be an array in the JSON data but got " + data['charactersToIgnore']);
            }
            // validate the optional field `charactersToIgnore` (array)
            for (const item of data['charactersToIgnore']) {
                GooglePrivacyDlpV2CharsToIgnore.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['maskingCharacter'] && !(typeof data['maskingCharacter'] === 'string' || data['maskingCharacter'] instanceof String)) {
            throw new Error("Expected the field `maskingCharacter` to be a primitive type in the JSON string but got " + data['maskingCharacter']);
        }

        return true;
    }


}



/**
 * When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
 * @member {Array.<module:model/GooglePrivacyDlpV2CharsToIgnore>} charactersToIgnore
 */
GooglePrivacyDlpV2CharacterMaskConfig.prototype['charactersToIgnore'] = undefined;

/**
 * Character to use to mask the sensitive valuesâ€”for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
 * @member {String} maskingCharacter
 */
GooglePrivacyDlpV2CharacterMaskConfig.prototype['maskingCharacter'] = undefined;

/**
 * Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
 * @member {Number} numberToMask
 */
GooglePrivacyDlpV2CharacterMaskConfig.prototype['numberToMask'] = undefined;

/**
 * Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
 * @member {Boolean} reverseOrder
 */
GooglePrivacyDlpV2CharacterMaskConfig.prototype['reverseOrder'] = undefined;






export default GooglePrivacyDlpV2CharacterMaskConfig;

