/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GooglePrivacyDlpV2Container model module.
 * @module model/GooglePrivacyDlpV2Container
 * @version v2
 */
class GooglePrivacyDlpV2Container {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2Container</code>.
     * Represents a container that may contain DLP findings. Examples of a container include a file, table, or database record.
     * @alias module:model/GooglePrivacyDlpV2Container
     */
    constructor() { 
        
        GooglePrivacyDlpV2Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2Container} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2Container} The populated <code>GooglePrivacyDlpV2Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2Container();

            if (data.hasOwnProperty('fullPath')) {
                obj['fullPath'] = ApiClient.convertToType(data['fullPath'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('relativePath')) {
                obj['relativePath'] = ApiClient.convertToType(data['relativePath'], 'String');
            }
            if (data.hasOwnProperty('rootPath')) {
                obj['rootPath'] = ApiClient.convertToType(data['rootPath'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fullPath'] && !(typeof data['fullPath'] === 'string' || data['fullPath'] instanceof String)) {
            throw new Error("Expected the field `fullPath` to be a primitive type in the JSON string but got " + data['fullPath']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['relativePath'] && !(typeof data['relativePath'] === 'string' || data['relativePath'] instanceof String)) {
            throw new Error("Expected the field `relativePath` to be a primitive type in the JSON string but got " + data['relativePath']);
        }
        // ensure the json data is a string
        if (data['rootPath'] && !(typeof data['rootPath'] === 'string' || data['rootPath'] instanceof String)) {
            throw new Error("Expected the field `rootPath` to be a primitive type in the JSON string but got " + data['rootPath']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A string representation of the full container name. Examples: - BigQuery: 'Project:DataSetId.TableId' - Cloud Storage: 'gs://Bucket/folders/filename.txt'
 * @member {String} fullPath
 */
GooglePrivacyDlpV2Container.prototype['fullPath'] = undefined;

/**
 * Project where the finding was found. Can be different from the project that owns the finding.
 * @member {String} projectId
 */
GooglePrivacyDlpV2Container.prototype['projectId'] = undefined;

/**
 * The rest of the path after the root. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the relative path is `table_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the relative path is `folder/filename.txt`
 * @member {String} relativePath
 */
GooglePrivacyDlpV2Container.prototype['relativePath'] = undefined;

/**
 * The root of the container. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the root is `dataset_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the root is `gs://bucket`
 * @member {String} rootPath
 */
GooglePrivacyDlpV2Container.prototype['rootPath'] = undefined;

/**
 * Container type, for example BigQuery or Cloud Storage.
 * @member {String} type
 */
GooglePrivacyDlpV2Container.prototype['type'] = undefined;

/**
 * Findings container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.
 * @member {String} updateTime
 */
GooglePrivacyDlpV2Container.prototype['updateTime'] = undefined;

/**
 * Findings container version, if available (\"generation\" for Cloud Storage).
 * @member {String} version
 */
GooglePrivacyDlpV2Container.prototype['version'] = undefined;






export default GooglePrivacyDlpV2Container;

