/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GooglePrivacyDlpV2BigQueryTable from './GooglePrivacyDlpV2BigQueryTable';
import GooglePrivacyDlpV2FieldId from './GooglePrivacyDlpV2FieldId';

/**
 * The GooglePrivacyDlpV2BigQueryOptions model module.
 * @module model/GooglePrivacyDlpV2BigQueryOptions
 * @version v2
 */
class GooglePrivacyDlpV2BigQueryOptions {
    /**
     * Constructs a new <code>GooglePrivacyDlpV2BigQueryOptions</code>.
     * Options defining BigQuery table and row identifiers.
     * @alias module:model/GooglePrivacyDlpV2BigQueryOptions
     */
    constructor() { 
        
        GooglePrivacyDlpV2BigQueryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePrivacyDlpV2BigQueryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePrivacyDlpV2BigQueryOptions} obj Optional instance to populate.
     * @return {module:model/GooglePrivacyDlpV2BigQueryOptions} The populated <code>GooglePrivacyDlpV2BigQueryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePrivacyDlpV2BigQueryOptions();

            if (data.hasOwnProperty('excludedFields')) {
                obj['excludedFields'] = ApiClient.convertToType(data['excludedFields'], [GooglePrivacyDlpV2FieldId]);
            }
            if (data.hasOwnProperty('identifyingFields')) {
                obj['identifyingFields'] = ApiClient.convertToType(data['identifyingFields'], [GooglePrivacyDlpV2FieldId]);
            }
            if (data.hasOwnProperty('includedFields')) {
                obj['includedFields'] = ApiClient.convertToType(data['includedFields'], [GooglePrivacyDlpV2FieldId]);
            }
            if (data.hasOwnProperty('rowsLimit')) {
                obj['rowsLimit'] = ApiClient.convertToType(data['rowsLimit'], 'String');
            }
            if (data.hasOwnProperty('rowsLimitPercent')) {
                obj['rowsLimitPercent'] = ApiClient.convertToType(data['rowsLimitPercent'], 'Number');
            }
            if (data.hasOwnProperty('sampleMethod')) {
                obj['sampleMethod'] = ApiClient.convertToType(data['sampleMethod'], 'String');
            }
            if (data.hasOwnProperty('tableReference')) {
                obj['tableReference'] = GooglePrivacyDlpV2BigQueryTable.constructFromObject(data['tableReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePrivacyDlpV2BigQueryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePrivacyDlpV2BigQueryOptions</code>.
     */
    static validateJSON(data) {
        if (data['excludedFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludedFields'])) {
                throw new Error("Expected the field `excludedFields` to be an array in the JSON data but got " + data['excludedFields']);
            }
            // validate the optional field `excludedFields` (array)
            for (const item of data['excludedFields']) {
                GooglePrivacyDlpV2FieldId.validateJSON(item);
            };
        }
        if (data['identifyingFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifyingFields'])) {
                throw new Error("Expected the field `identifyingFields` to be an array in the JSON data but got " + data['identifyingFields']);
            }
            // validate the optional field `identifyingFields` (array)
            for (const item of data['identifyingFields']) {
                GooglePrivacyDlpV2FieldId.validateJSON(item);
            };
        }
        if (data['includedFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedFields'])) {
                throw new Error("Expected the field `includedFields` to be an array in the JSON data but got " + data['includedFields']);
            }
            // validate the optional field `includedFields` (array)
            for (const item of data['includedFields']) {
                GooglePrivacyDlpV2FieldId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rowsLimit'] && !(typeof data['rowsLimit'] === 'string' || data['rowsLimit'] instanceof String)) {
            throw new Error("Expected the field `rowsLimit` to be a primitive type in the JSON string but got " + data['rowsLimit']);
        }
        // ensure the json data is a string
        if (data['sampleMethod'] && !(typeof data['sampleMethod'] === 'string' || data['sampleMethod'] instanceof String)) {
            throw new Error("Expected the field `sampleMethod` to be a primitive type in the JSON string but got " + data['sampleMethod']);
        }
        // validate the optional field `tableReference`
        if (data['tableReference']) { // data not null
          GooglePrivacyDlpV2BigQueryTable.validateJSON(data['tableReference']);
        }

        return true;
    }


}



/**
 * References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
 * @member {Array.<module:model/GooglePrivacyDlpV2FieldId>} excludedFields
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['excludedFields'] = undefined;

/**
 * Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
 * @member {Array.<module:model/GooglePrivacyDlpV2FieldId>} identifyingFields
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['identifyingFields'] = undefined;

/**
 * Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
 * @member {Array.<module:model/GooglePrivacyDlpV2FieldId>} includedFields
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['includedFields'] = undefined;

/**
 * Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
 * @member {String} rowsLimit
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['rowsLimit'] = undefined;

/**
 * Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/sensitive-data-protection/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
 * @member {Number} rowsLimitPercent
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['rowsLimitPercent'] = undefined;

/**
 * How to sample the data.
 * @member {module:model/GooglePrivacyDlpV2BigQueryOptions.SampleMethodEnum} sampleMethod
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['sampleMethod'] = undefined;

/**
 * @member {module:model/GooglePrivacyDlpV2BigQueryTable} tableReference
 */
GooglePrivacyDlpV2BigQueryOptions.prototype['tableReference'] = undefined;





/**
 * Allowed values for the <code>sampleMethod</code> property.
 * @enum {String}
 * @readonly
 */
GooglePrivacyDlpV2BigQueryOptions['SampleMethodEnum'] = {

    /**
     * value: "SAMPLE_METHOD_UNSPECIFIED"
     * @const
     */
    "SAMPLE_METHOD_UNSPECIFIED": "SAMPLE_METHOD_UNSPECIFIED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "RANDOM_START"
     * @const
     */
    "RANDOM_START": "RANDOM_START"
};



export default GooglePrivacyDlpV2BigQueryOptions;

