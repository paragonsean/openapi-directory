/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2HybridFindingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2HybridFindingDetails::OAIGooglePrivacyDlpV2HybridFindingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2HybridFindingDetails::OAIGooglePrivacyDlpV2HybridFindingDetails() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2HybridFindingDetails::~OAIGooglePrivacyDlpV2HybridFindingDetails() {}

void OAIGooglePrivacyDlpV2HybridFindingDetails::initializeModel() {

    m_container_details_isSet = false;
    m_container_details_isValid = false;

    m_file_offset_isSet = false;
    m_file_offset_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_row_offset_isSet = false;
    m_row_offset_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;
}

void OAIGooglePrivacyDlpV2HybridFindingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2HybridFindingDetails::fromJsonObject(QJsonObject json) {

    m_container_details_isValid = ::OpenAPI::fromJsonValue(m_container_details, json[QString("containerDetails")]);
    m_container_details_isSet = !json[QString("containerDetails")].isNull() && m_container_details_isValid;

    m_file_offset_isValid = ::OpenAPI::fromJsonValue(m_file_offset, json[QString("fileOffset")]);
    m_file_offset_isSet = !json[QString("fileOffset")].isNull() && m_file_offset_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_row_offset_isValid = ::OpenAPI::fromJsonValue(m_row_offset, json[QString("rowOffset")]);
    m_row_offset_isSet = !json[QString("rowOffset")].isNull() && m_row_offset_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("tableOptions")]);
    m_table_options_isSet = !json[QString("tableOptions")].isNull() && m_table_options_isValid;
}

QString OAIGooglePrivacyDlpV2HybridFindingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2HybridFindingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_container_details.isSet()) {
        obj.insert(QString("containerDetails"), ::OpenAPI::toJsonValue(m_container_details));
    }
    if (m_file_offset_isSet) {
        obj.insert(QString("fileOffset"), ::OpenAPI::toJsonValue(m_file_offset));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_row_offset_isSet) {
        obj.insert(QString("rowOffset"), ::OpenAPI::toJsonValue(m_row_offset));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("tableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Container OAIGooglePrivacyDlpV2HybridFindingDetails::getContainerDetails() const {
    return m_container_details;
}
void OAIGooglePrivacyDlpV2HybridFindingDetails::setContainerDetails(const OAIGooglePrivacyDlpV2Container &container_details) {
    m_container_details = container_details;
    m_container_details_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_container_details_Set() const{
    return m_container_details_isSet;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_container_details_Valid() const{
    return m_container_details_isValid;
}

QString OAIGooglePrivacyDlpV2HybridFindingDetails::getFileOffset() const {
    return m_file_offset;
}
void OAIGooglePrivacyDlpV2HybridFindingDetails::setFileOffset(const QString &file_offset) {
    m_file_offset = file_offset;
    m_file_offset_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_file_offset_Set() const{
    return m_file_offset_isSet;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_file_offset_Valid() const{
    return m_file_offset_isValid;
}

QMap<QString, QString> OAIGooglePrivacyDlpV2HybridFindingDetails::getLabels() const {
    return m_labels;
}
void OAIGooglePrivacyDlpV2HybridFindingDetails::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGooglePrivacyDlpV2HybridFindingDetails::getRowOffset() const {
    return m_row_offset;
}
void OAIGooglePrivacyDlpV2HybridFindingDetails::setRowOffset(const QString &row_offset) {
    m_row_offset = row_offset;
    m_row_offset_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_row_offset_Set() const{
    return m_row_offset_isSet;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_row_offset_Valid() const{
    return m_row_offset_isValid;
}

OAIGooglePrivacyDlpV2TableOptions OAIGooglePrivacyDlpV2HybridFindingDetails::getTableOptions() const {
    return m_table_options;
}
void OAIGooglePrivacyDlpV2HybridFindingDetails::setTableOptions(const OAIGooglePrivacyDlpV2TableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::is_table_options_Valid() const{
    return m_table_options_isValid;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2HybridFindingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
