/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TransformationOverview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TransformationOverview::OAIGooglePrivacyDlpV2TransformationOverview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TransformationOverview::OAIGooglePrivacyDlpV2TransformationOverview() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TransformationOverview::~OAIGooglePrivacyDlpV2TransformationOverview() {}

void OAIGooglePrivacyDlpV2TransformationOverview::initializeModel() {

    m_transformation_summaries_isSet = false;
    m_transformation_summaries_isValid = false;

    m_transformed_bytes_isSet = false;
    m_transformed_bytes_isValid = false;
}

void OAIGooglePrivacyDlpV2TransformationOverview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TransformationOverview::fromJsonObject(QJsonObject json) {

    m_transformation_summaries_isValid = ::OpenAPI::fromJsonValue(m_transformation_summaries, json[QString("transformationSummaries")]);
    m_transformation_summaries_isSet = !json[QString("transformationSummaries")].isNull() && m_transformation_summaries_isValid;

    m_transformed_bytes_isValid = ::OpenAPI::fromJsonValue(m_transformed_bytes, json[QString("transformedBytes")]);
    m_transformed_bytes_isSet = !json[QString("transformedBytes")].isNull() && m_transformed_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationOverview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TransformationOverview::asJsonObject() const {
    QJsonObject obj;
    if (m_transformation_summaries.size() > 0) {
        obj.insert(QString("transformationSummaries"), ::OpenAPI::toJsonValue(m_transformation_summaries));
    }
    if (m_transformed_bytes_isSet) {
        obj.insert(QString("transformedBytes"), ::OpenAPI::toJsonValue(m_transformed_bytes));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2TransformationSummary> OAIGooglePrivacyDlpV2TransformationOverview::getTransformationSummaries() const {
    return m_transformation_summaries;
}
void OAIGooglePrivacyDlpV2TransformationOverview::setTransformationSummaries(const QList<OAIGooglePrivacyDlpV2TransformationSummary> &transformation_summaries) {
    m_transformation_summaries = transformation_summaries;
    m_transformation_summaries_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::is_transformation_summaries_Set() const{
    return m_transformation_summaries_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::is_transformation_summaries_Valid() const{
    return m_transformation_summaries_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationOverview::getTransformedBytes() const {
    return m_transformed_bytes;
}
void OAIGooglePrivacyDlpV2TransformationOverview::setTransformedBytes(const QString &transformed_bytes) {
    m_transformed_bytes = transformed_bytes;
    m_transformed_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::is_transformed_bytes_Set() const{
    return m_transformed_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::is_transformed_bytes_Valid() const{
    return m_transformed_bytes_isValid;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transformation_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformed_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TransformationOverview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
