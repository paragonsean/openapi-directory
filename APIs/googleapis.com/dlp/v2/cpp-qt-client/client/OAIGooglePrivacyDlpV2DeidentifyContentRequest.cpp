/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DeidentifyContentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DeidentifyContentRequest::OAIGooglePrivacyDlpV2DeidentifyContentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DeidentifyContentRequest::OAIGooglePrivacyDlpV2DeidentifyContentRequest() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DeidentifyContentRequest::~OAIGooglePrivacyDlpV2DeidentifyContentRequest() {}

void OAIGooglePrivacyDlpV2DeidentifyContentRequest::initializeModel() {

    m_deidentify_config_isSet = false;
    m_deidentify_config_isValid = false;

    m_deidentify_template_name_isSet = false;
    m_deidentify_template_name_isValid = false;

    m_inspect_config_isSet = false;
    m_inspect_config_isValid = false;

    m_inspect_template_name_isSet = false;
    m_inspect_template_name_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;
}

void OAIGooglePrivacyDlpV2DeidentifyContentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DeidentifyContentRequest::fromJsonObject(QJsonObject json) {

    m_deidentify_config_isValid = ::OpenAPI::fromJsonValue(m_deidentify_config, json[QString("deidentifyConfig")]);
    m_deidentify_config_isSet = !json[QString("deidentifyConfig")].isNull() && m_deidentify_config_isValid;

    m_deidentify_template_name_isValid = ::OpenAPI::fromJsonValue(m_deidentify_template_name, json[QString("deidentifyTemplateName")]);
    m_deidentify_template_name_isSet = !json[QString("deidentifyTemplateName")].isNull() && m_deidentify_template_name_isValid;

    m_inspect_config_isValid = ::OpenAPI::fromJsonValue(m_inspect_config, json[QString("inspectConfig")]);
    m_inspect_config_isSet = !json[QString("inspectConfig")].isNull() && m_inspect_config_isValid;

    m_inspect_template_name_isValid = ::OpenAPI::fromJsonValue(m_inspect_template_name, json[QString("inspectTemplateName")]);
    m_inspect_template_name_isSet = !json[QString("inspectTemplateName")].isNull() && m_inspect_template_name_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyContentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DeidentifyContentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_deidentify_config.isSet()) {
        obj.insert(QString("deidentifyConfig"), ::OpenAPI::toJsonValue(m_deidentify_config));
    }
    if (m_deidentify_template_name_isSet) {
        obj.insert(QString("deidentifyTemplateName"), ::OpenAPI::toJsonValue(m_deidentify_template_name));
    }
    if (m_inspect_config.isSet()) {
        obj.insert(QString("inspectConfig"), ::OpenAPI::toJsonValue(m_inspect_config));
    }
    if (m_inspect_template_name_isSet) {
        obj.insert(QString("inspectTemplateName"), ::OpenAPI::toJsonValue(m_inspect_template_name));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DeidentifyConfig OAIGooglePrivacyDlpV2DeidentifyContentRequest::getDeidentifyConfig() const {
    return m_deidentify_config;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setDeidentifyConfig(const OAIGooglePrivacyDlpV2DeidentifyConfig &deidentify_config) {
    m_deidentify_config = deidentify_config;
    m_deidentify_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_deidentify_config_Set() const{
    return m_deidentify_config_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_deidentify_config_Valid() const{
    return m_deidentify_config_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyContentRequest::getDeidentifyTemplateName() const {
    return m_deidentify_template_name;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setDeidentifyTemplateName(const QString &deidentify_template_name) {
    m_deidentify_template_name = deidentify_template_name;
    m_deidentify_template_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_deidentify_template_name_Set() const{
    return m_deidentify_template_name_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_deidentify_template_name_Valid() const{
    return m_deidentify_template_name_isValid;
}

OAIGooglePrivacyDlpV2InspectConfig OAIGooglePrivacyDlpV2DeidentifyContentRequest::getInspectConfig() const {
    return m_inspect_config;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setInspectConfig(const OAIGooglePrivacyDlpV2InspectConfig &inspect_config) {
    m_inspect_config = inspect_config;
    m_inspect_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_inspect_config_Set() const{
    return m_inspect_config_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_inspect_config_Valid() const{
    return m_inspect_config_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyContentRequest::getInspectTemplateName() const {
    return m_inspect_template_name;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setInspectTemplateName(const QString &inspect_template_name) {
    m_inspect_template_name = inspect_template_name;
    m_inspect_template_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_inspect_template_name_Set() const{
    return m_inspect_template_name_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_inspect_template_name_Valid() const{
    return m_inspect_template_name_isValid;
}

OAIGooglePrivacyDlpV2ContentItem OAIGooglePrivacyDlpV2DeidentifyContentRequest::getItem() const {
    return m_item;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setItem(const OAIGooglePrivacyDlpV2ContentItem &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_item_Set() const{
    return m_item_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyContentRequest::getLocationId() const {
    return m_location_id;
}
void OAIGooglePrivacyDlpV2DeidentifyContentRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deidentify_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deidentify_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DeidentifyContentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
