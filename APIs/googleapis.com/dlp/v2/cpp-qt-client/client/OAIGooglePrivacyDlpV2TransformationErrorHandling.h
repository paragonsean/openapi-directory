/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2TransformationErrorHandling.h
 *
 * How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a &#x60;DateShift&#x60; transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the &#x60;TransformationOverviews&#x60;.
 */

#ifndef OAIGooglePrivacyDlpV2TransformationErrorHandling_H
#define OAIGooglePrivacyDlpV2TransformationErrorHandling_H

#include <QJsonObject>

#include "OAIObject.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGooglePrivacyDlpV2TransformationErrorHandling : public OAIObject {
public:
    OAIGooglePrivacyDlpV2TransformationErrorHandling();
    OAIGooglePrivacyDlpV2TransformationErrorHandling(QString json);
    ~OAIGooglePrivacyDlpV2TransformationErrorHandling() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getLeaveUntransformed() const;
    void setLeaveUntransformed(const OAIObject &leave_untransformed);
    bool is_leave_untransformed_Set() const;
    bool is_leave_untransformed_Valid() const;

    OAIObject getThrowError() const;
    void setThrowError(const OAIObject &throw_error);
    bool is_throw_error_Set() const;
    bool is_throw_error_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_leave_untransformed;
    bool m_leave_untransformed_isSet;
    bool m_leave_untransformed_isValid;

    OAIObject m_throw_error;
    bool m_throw_error_isSet;
    bool m_throw_error_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2TransformationErrorHandling)

#endif // OAIGooglePrivacyDlpV2TransformationErrorHandling_H
