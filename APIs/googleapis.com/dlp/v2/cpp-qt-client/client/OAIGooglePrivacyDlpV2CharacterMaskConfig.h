/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2CharacterMaskConfig.h
 *
 * Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we&#39;ll attempt to preserve the original data&#39;s type. (This allows you to take a long like 123 and modify it to a string like **3.
 */

#ifndef OAIGooglePrivacyDlpV2CharacterMaskConfig_H
#define OAIGooglePrivacyDlpV2CharacterMaskConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2CharsToIgnore.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2CharsToIgnore;

class OAIGooglePrivacyDlpV2CharacterMaskConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2CharacterMaskConfig();
    OAIGooglePrivacyDlpV2CharacterMaskConfig(QString json);
    ~OAIGooglePrivacyDlpV2CharacterMaskConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGooglePrivacyDlpV2CharsToIgnore> getCharactersToIgnore() const;
    void setCharactersToIgnore(const QList<OAIGooglePrivacyDlpV2CharsToIgnore> &characters_to_ignore);
    bool is_characters_to_ignore_Set() const;
    bool is_characters_to_ignore_Valid() const;

    QString getMaskingCharacter() const;
    void setMaskingCharacter(const QString &masking_character);
    bool is_masking_character_Set() const;
    bool is_masking_character_Valid() const;

    qint32 getNumberToMask() const;
    void setNumberToMask(const qint32 &number_to_mask);
    bool is_number_to_mask_Set() const;
    bool is_number_to_mask_Valid() const;

    bool isReverseOrder() const;
    void setReverseOrder(const bool &reverse_order);
    bool is_reverse_order_Set() const;
    bool is_reverse_order_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGooglePrivacyDlpV2CharsToIgnore> m_characters_to_ignore;
    bool m_characters_to_ignore_isSet;
    bool m_characters_to_ignore_isValid;

    QString m_masking_character;
    bool m_masking_character_isSet;
    bool m_masking_character_isValid;

    qint32 m_number_to_mask;
    bool m_number_to_mask_isSet;
    bool m_number_to_mask_isValid;

    bool m_reverse_order;
    bool m_reverse_order_isSet;
    bool m_reverse_order_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2CharacterMaskConfig)

#endif // OAIGooglePrivacyDlpV2CharacterMaskConfig_H
