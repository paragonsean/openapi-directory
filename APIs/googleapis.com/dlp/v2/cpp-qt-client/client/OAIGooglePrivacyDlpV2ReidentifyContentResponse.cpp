/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2ReidentifyContentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2ReidentifyContentResponse::OAIGooglePrivacyDlpV2ReidentifyContentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2ReidentifyContentResponse::OAIGooglePrivacyDlpV2ReidentifyContentResponse() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2ReidentifyContentResponse::~OAIGooglePrivacyDlpV2ReidentifyContentResponse() {}

void OAIGooglePrivacyDlpV2ReidentifyContentResponse::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;
}

void OAIGooglePrivacyDlpV2ReidentifyContentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2ReidentifyContentResponse::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;
}

QString OAIGooglePrivacyDlpV2ReidentifyContentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2ReidentifyContentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_overview.isSet()) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    return obj;
}

OAIGooglePrivacyDlpV2ContentItem OAIGooglePrivacyDlpV2ReidentifyContentResponse::getItem() const {
    return m_item;
}
void OAIGooglePrivacyDlpV2ReidentifyContentResponse::setItem(const OAIGooglePrivacyDlpV2ContentItem &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::is_item_Set() const{
    return m_item_isSet;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::is_item_Valid() const{
    return m_item_isValid;
}

OAIGooglePrivacyDlpV2TransformationOverview OAIGooglePrivacyDlpV2ReidentifyContentResponse::getOverview() const {
    return m_overview;
}
void OAIGooglePrivacyDlpV2ReidentifyContentResponse::setOverview(const OAIGooglePrivacyDlpV2TransformationOverview &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::is_overview_Valid() const{
    return m_overview_isValid;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2ReidentifyContentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
