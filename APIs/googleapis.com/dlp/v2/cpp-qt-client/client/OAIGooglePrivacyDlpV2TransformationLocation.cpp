/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TransformationLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TransformationLocation::OAIGooglePrivacyDlpV2TransformationLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TransformationLocation::OAIGooglePrivacyDlpV2TransformationLocation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TransformationLocation::~OAIGooglePrivacyDlpV2TransformationLocation() {}

void OAIGooglePrivacyDlpV2TransformationLocation::initializeModel() {

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_finding_id_isSet = false;
    m_finding_id_isValid = false;

    m_record_transformation_isSet = false;
    m_record_transformation_isValid = false;
}

void OAIGooglePrivacyDlpV2TransformationLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TransformationLocation::fromJsonObject(QJsonObject json) {

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_finding_id_isValid = ::OpenAPI::fromJsonValue(m_finding_id, json[QString("findingId")]);
    m_finding_id_isSet = !json[QString("findingId")].isNull() && m_finding_id_isValid;

    m_record_transformation_isValid = ::OpenAPI::fromJsonValue(m_record_transformation, json[QString("recordTransformation")]);
    m_record_transformation_isSet = !json[QString("recordTransformation")].isNull() && m_record_transformation_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TransformationLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_finding_id_isSet) {
        obj.insert(QString("findingId"), ::OpenAPI::toJsonValue(m_finding_id));
    }
    if (m_record_transformation.isSet()) {
        obj.insert(QString("recordTransformation"), ::OpenAPI::toJsonValue(m_record_transformation));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2TransformationLocation::getContainerType() const {
    return m_container_type;
}
void OAIGooglePrivacyDlpV2TransformationLocation::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_container_type_Valid() const{
    return m_container_type_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationLocation::getFindingId() const {
    return m_finding_id;
}
void OAIGooglePrivacyDlpV2TransformationLocation::setFindingId(const QString &finding_id) {
    m_finding_id = finding_id;
    m_finding_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_finding_id_Set() const{
    return m_finding_id_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_finding_id_Valid() const{
    return m_finding_id_isValid;
}

OAIGooglePrivacyDlpV2RecordTransformation OAIGooglePrivacyDlpV2TransformationLocation::getRecordTransformation() const {
    return m_record_transformation;
}
void OAIGooglePrivacyDlpV2TransformationLocation::setRecordTransformation(const OAIGooglePrivacyDlpV2RecordTransformation &record_transformation) {
    m_record_transformation = record_transformation;
    m_record_transformation_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_record_transformation_Set() const{
    return m_record_transformation_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::is_record_transformation_Valid() const{
    return m_record_transformation_isValid;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TransformationLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
