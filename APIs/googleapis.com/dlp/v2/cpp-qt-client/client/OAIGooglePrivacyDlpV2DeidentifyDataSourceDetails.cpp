/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::~OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails() {}

void OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::initializeModel() {

    m_deidentify_stats_isSet = false;
    m_deidentify_stats_isValid = false;

    m_requested_options_isSet = false;
    m_requested_options_isValid = false;
}

void OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::fromJsonObject(QJsonObject json) {

    m_deidentify_stats_isValid = ::OpenAPI::fromJsonValue(m_deidentify_stats, json[QString("deidentifyStats")]);
    m_deidentify_stats_isSet = !json[QString("deidentifyStats")].isNull() && m_deidentify_stats_isValid;

    m_requested_options_isValid = ::OpenAPI::fromJsonValue(m_requested_options, json[QString("requestedOptions")]);
    m_requested_options_isSet = !json[QString("requestedOptions")].isNull() && m_requested_options_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_deidentify_stats.isSet()) {
        obj.insert(QString("deidentifyStats"), ::OpenAPI::toJsonValue(m_deidentify_stats));
    }
    if (m_requested_options.isSet()) {
        obj.insert(QString("requestedOptions"), ::OpenAPI::toJsonValue(m_requested_options));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DeidentifyDataSourceStats OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::getDeidentifyStats() const {
    return m_deidentify_stats;
}
void OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::setDeidentifyStats(const OAIGooglePrivacyDlpV2DeidentifyDataSourceStats &deidentify_stats) {
    m_deidentify_stats = deidentify_stats;
    m_deidentify_stats_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::is_deidentify_stats_Set() const{
    return m_deidentify_stats_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::is_deidentify_stats_Valid() const{
    return m_deidentify_stats_isValid;
}

OAIGooglePrivacyDlpV2RequestedDeidentifyOptions OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::getRequestedOptions() const {
    return m_requested_options;
}
void OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::setRequestedOptions(const OAIGooglePrivacyDlpV2RequestedDeidentifyOptions &requested_options) {
    m_requested_options = requested_options;
    m_requested_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::is_requested_options_Set() const{
    return m_requested_options_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::is_requested_options_Valid() const{
    return m_requested_options_isValid;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deidentify_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DeidentifyDataSourceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
