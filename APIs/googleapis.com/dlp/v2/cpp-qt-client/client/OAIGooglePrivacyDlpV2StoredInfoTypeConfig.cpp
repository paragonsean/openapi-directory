/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2StoredInfoTypeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2StoredInfoTypeConfig::OAIGooglePrivacyDlpV2StoredInfoTypeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2StoredInfoTypeConfig::OAIGooglePrivacyDlpV2StoredInfoTypeConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2StoredInfoTypeConfig::~OAIGooglePrivacyDlpV2StoredInfoTypeConfig() {}

void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_dictionary_isSet = false;
    m_dictionary_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_large_custom_dictionary_isSet = false;
    m_large_custom_dictionary_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;
}

void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dictionary_isValid = ::OpenAPI::fromJsonValue(m_dictionary, json[QString("dictionary")]);
    m_dictionary_isSet = !json[QString("dictionary")].isNull() && m_dictionary_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_large_custom_dictionary_isValid = ::OpenAPI::fromJsonValue(m_large_custom_dictionary, json[QString("largeCustomDictionary")]);
    m_large_custom_dictionary_isSet = !json[QString("largeCustomDictionary")].isNull() && m_large_custom_dictionary_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2StoredInfoTypeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dictionary.isSet()) {
        obj.insert(QString("dictionary"), ::OpenAPI::toJsonValue(m_dictionary));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_large_custom_dictionary.isSet()) {
        obj.insert(QString("largeCustomDictionary"), ::OpenAPI::toJsonValue(m_large_custom_dictionary));
    }
    if (m_regex.isSet()) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeConfig::getDescription() const {
    return m_description;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_description_Valid() const{
    return m_description_isValid;
}

OAIGooglePrivacyDlpV2Dictionary OAIGooglePrivacyDlpV2StoredInfoTypeConfig::getDictionary() const {
    return m_dictionary;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::setDictionary(const OAIGooglePrivacyDlpV2Dictionary &dictionary) {
    m_dictionary = dictionary;
    m_dictionary_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_dictionary_Set() const{
    return m_dictionary_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_dictionary_Valid() const{
    return m_dictionary_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeConfig::getDisplayName() const {
    return m_display_name;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGooglePrivacyDlpV2LargeCustomDictionaryConfig OAIGooglePrivacyDlpV2StoredInfoTypeConfig::getLargeCustomDictionary() const {
    return m_large_custom_dictionary;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::setLargeCustomDictionary(const OAIGooglePrivacyDlpV2LargeCustomDictionaryConfig &large_custom_dictionary) {
    m_large_custom_dictionary = large_custom_dictionary;
    m_large_custom_dictionary_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_large_custom_dictionary_Set() const{
    return m_large_custom_dictionary_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_large_custom_dictionary_Valid() const{
    return m_large_custom_dictionary_isValid;
}

OAIGooglePrivacyDlpV2Regex OAIGooglePrivacyDlpV2StoredInfoTypeConfig::getRegex() const {
    return m_regex;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeConfig::setRegex(const OAIGooglePrivacyDlpV2Regex &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dictionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_custom_dictionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
