/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Bucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Bucket::OAIGooglePrivacyDlpV2Bucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Bucket::OAIGooglePrivacyDlpV2Bucket() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Bucket::~OAIGooglePrivacyDlpV2Bucket() {}

void OAIGooglePrivacyDlpV2Bucket::initializeModel() {

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_replacement_value_isSet = false;
    m_replacement_value_isValid = false;
}

void OAIGooglePrivacyDlpV2Bucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Bucket::fromJsonObject(QJsonObject json) {

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_replacement_value_isValid = ::OpenAPI::fromJsonValue(m_replacement_value, json[QString("replacementValue")]);
    m_replacement_value_isSet = !json[QString("replacementValue")].isNull() && m_replacement_value_isValid;
}

QString OAIGooglePrivacyDlpV2Bucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Bucket::asJsonObject() const {
    QJsonObject obj;
    if (m_max.isSet()) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min.isSet()) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_replacement_value.isSet()) {
        obj.insert(QString("replacementValue"), ::OpenAPI::toJsonValue(m_replacement_value));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Value OAIGooglePrivacyDlpV2Bucket::getMax() const {
    return m_max;
}
void OAIGooglePrivacyDlpV2Bucket::setMax(const OAIGooglePrivacyDlpV2Value &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIGooglePrivacyDlpV2Bucket::is_max_Set() const{
    return m_max_isSet;
}

bool OAIGooglePrivacyDlpV2Bucket::is_max_Valid() const{
    return m_max_isValid;
}

OAIGooglePrivacyDlpV2Value OAIGooglePrivacyDlpV2Bucket::getMin() const {
    return m_min;
}
void OAIGooglePrivacyDlpV2Bucket::setMin(const OAIGooglePrivacyDlpV2Value &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIGooglePrivacyDlpV2Bucket::is_min_Set() const{
    return m_min_isSet;
}

bool OAIGooglePrivacyDlpV2Bucket::is_min_Valid() const{
    return m_min_isValid;
}

OAIGooglePrivacyDlpV2Value OAIGooglePrivacyDlpV2Bucket::getReplacementValue() const {
    return m_replacement_value;
}
void OAIGooglePrivacyDlpV2Bucket::setReplacementValue(const OAIGooglePrivacyDlpV2Value &replacement_value) {
    m_replacement_value = replacement_value;
    m_replacement_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Bucket::is_replacement_value_Set() const{
    return m_replacement_value_isSet;
}

bool OAIGooglePrivacyDlpV2Bucket::is_replacement_value_Valid() const{
    return m_replacement_value_isValid;
}

bool OAIGooglePrivacyDlpV2Bucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Bucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
