/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CloudStorageOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CloudStorageOptions::OAIGooglePrivacyDlpV2CloudStorageOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CloudStorageOptions::OAIGooglePrivacyDlpV2CloudStorageOptions() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CloudStorageOptions::~OAIGooglePrivacyDlpV2CloudStorageOptions() {}

void OAIGooglePrivacyDlpV2CloudStorageOptions::initializeModel() {

    m_bytes_limit_per_file_isSet = false;
    m_bytes_limit_per_file_isValid = false;

    m_bytes_limit_per_file_percent_isSet = false;
    m_bytes_limit_per_file_percent_isValid = false;

    m_file_set_isSet = false;
    m_file_set_isValid = false;

    m_file_types_isSet = false;
    m_file_types_isValid = false;

    m_files_limit_percent_isSet = false;
    m_files_limit_percent_isValid = false;

    m_sample_method_isSet = false;
    m_sample_method_isValid = false;
}

void OAIGooglePrivacyDlpV2CloudStorageOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CloudStorageOptions::fromJsonObject(QJsonObject json) {

    m_bytes_limit_per_file_isValid = ::OpenAPI::fromJsonValue(m_bytes_limit_per_file, json[QString("bytesLimitPerFile")]);
    m_bytes_limit_per_file_isSet = !json[QString("bytesLimitPerFile")].isNull() && m_bytes_limit_per_file_isValid;

    m_bytes_limit_per_file_percent_isValid = ::OpenAPI::fromJsonValue(m_bytes_limit_per_file_percent, json[QString("bytesLimitPerFilePercent")]);
    m_bytes_limit_per_file_percent_isSet = !json[QString("bytesLimitPerFilePercent")].isNull() && m_bytes_limit_per_file_percent_isValid;

    m_file_set_isValid = ::OpenAPI::fromJsonValue(m_file_set, json[QString("fileSet")]);
    m_file_set_isSet = !json[QString("fileSet")].isNull() && m_file_set_isValid;

    m_file_types_isValid = ::OpenAPI::fromJsonValue(m_file_types, json[QString("fileTypes")]);
    m_file_types_isSet = !json[QString("fileTypes")].isNull() && m_file_types_isValid;

    m_files_limit_percent_isValid = ::OpenAPI::fromJsonValue(m_files_limit_percent, json[QString("filesLimitPercent")]);
    m_files_limit_percent_isSet = !json[QString("filesLimitPercent")].isNull() && m_files_limit_percent_isValid;

    m_sample_method_isValid = ::OpenAPI::fromJsonValue(m_sample_method, json[QString("sampleMethod")]);
    m_sample_method_isSet = !json[QString("sampleMethod")].isNull() && m_sample_method_isValid;
}

QString OAIGooglePrivacyDlpV2CloudStorageOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CloudStorageOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_limit_per_file_isSet) {
        obj.insert(QString("bytesLimitPerFile"), ::OpenAPI::toJsonValue(m_bytes_limit_per_file));
    }
    if (m_bytes_limit_per_file_percent_isSet) {
        obj.insert(QString("bytesLimitPerFilePercent"), ::OpenAPI::toJsonValue(m_bytes_limit_per_file_percent));
    }
    if (m_file_set.isSet()) {
        obj.insert(QString("fileSet"), ::OpenAPI::toJsonValue(m_file_set));
    }
    if (m_file_types.size() > 0) {
        obj.insert(QString("fileTypes"), ::OpenAPI::toJsonValue(m_file_types));
    }
    if (m_files_limit_percent_isSet) {
        obj.insert(QString("filesLimitPercent"), ::OpenAPI::toJsonValue(m_files_limit_percent));
    }
    if (m_sample_method_isSet) {
        obj.insert(QString("sampleMethod"), ::OpenAPI::toJsonValue(m_sample_method));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2CloudStorageOptions::getBytesLimitPerFile() const {
    return m_bytes_limit_per_file;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setBytesLimitPerFile(const QString &bytes_limit_per_file) {
    m_bytes_limit_per_file = bytes_limit_per_file;
    m_bytes_limit_per_file_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_bytes_limit_per_file_Set() const{
    return m_bytes_limit_per_file_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_bytes_limit_per_file_Valid() const{
    return m_bytes_limit_per_file_isValid;
}

qint32 OAIGooglePrivacyDlpV2CloudStorageOptions::getBytesLimitPerFilePercent() const {
    return m_bytes_limit_per_file_percent;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setBytesLimitPerFilePercent(const qint32 &bytes_limit_per_file_percent) {
    m_bytes_limit_per_file_percent = bytes_limit_per_file_percent;
    m_bytes_limit_per_file_percent_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_bytes_limit_per_file_percent_Set() const{
    return m_bytes_limit_per_file_percent_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_bytes_limit_per_file_percent_Valid() const{
    return m_bytes_limit_per_file_percent_isValid;
}

OAIGooglePrivacyDlpV2FileSet OAIGooglePrivacyDlpV2CloudStorageOptions::getFileSet() const {
    return m_file_set;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setFileSet(const OAIGooglePrivacyDlpV2FileSet &file_set) {
    m_file_set = file_set;
    m_file_set_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_file_set_Set() const{
    return m_file_set_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_file_set_Valid() const{
    return m_file_set_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2CloudStorageOptions::getFileTypes() const {
    return m_file_types;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setFileTypes(const QList<QString> &file_types) {
    m_file_types = file_types;
    m_file_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_file_types_Set() const{
    return m_file_types_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_file_types_Valid() const{
    return m_file_types_isValid;
}

qint32 OAIGooglePrivacyDlpV2CloudStorageOptions::getFilesLimitPercent() const {
    return m_files_limit_percent;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setFilesLimitPercent(const qint32 &files_limit_percent) {
    m_files_limit_percent = files_limit_percent;
    m_files_limit_percent_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_files_limit_percent_Set() const{
    return m_files_limit_percent_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_files_limit_percent_Valid() const{
    return m_files_limit_percent_isValid;
}

QString OAIGooglePrivacyDlpV2CloudStorageOptions::getSampleMethod() const {
    return m_sample_method;
}
void OAIGooglePrivacyDlpV2CloudStorageOptions::setSampleMethod(const QString &sample_method) {
    m_sample_method = sample_method;
    m_sample_method_isSet = true;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_sample_method_Set() const{
    return m_sample_method_isSet;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::is_sample_method_Valid() const{
    return m_sample_method_isValid;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_limit_per_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_limit_per_file_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_limit_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CloudStorageOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
