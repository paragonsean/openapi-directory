/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2Condition.h
 *
 * The field type of &#x60;value&#x60; and &#x60;field&#x60; do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A &#x60;value&#x60; of type: - &#x60;string&#x60; can be compared against all other types - &#x60;boolean&#x60; can only be compared against other booleans - &#x60;integer&#x60; can be compared against doubles or a string if the string value can be parsed as an integer. - &#x60;double&#x60; can be compared against integers or a string if the string can be parsed as a double. - &#x60;Timestamp&#x60; can be compared against strings in RFC 3339 date string format. - &#x60;TimeOfDay&#x60; can be compared against timestamps and strings in the format of &#39;HH:mm:ss&#39;. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
 */

#ifndef OAIGooglePrivacyDlpV2Condition_H
#define OAIGooglePrivacyDlpV2Condition_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2FieldId.h"
#include "OAIGooglePrivacyDlpV2Value.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2FieldId;
class OAIGooglePrivacyDlpV2Value;

class OAIGooglePrivacyDlpV2Condition : public OAIObject {
public:
    OAIGooglePrivacyDlpV2Condition();
    OAIGooglePrivacyDlpV2Condition(QString json);
    ~OAIGooglePrivacyDlpV2Condition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2FieldId getField() const;
    void setField(const OAIGooglePrivacyDlpV2FieldId &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    OAIGooglePrivacyDlpV2Value getValue() const;
    void setValue(const OAIGooglePrivacyDlpV2Value &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2FieldId m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    OAIGooglePrivacyDlpV2Value m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2Condition)

#endif // OAIGooglePrivacyDlpV2Condition_H
