/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2FixedSizeBucketingConfig.h
 *
 * Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound &#x3D; 10 and upper_bound &#x3D; 20, all values that are within this bucket will be replaced with \&quot;10-20\&quot;. This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to learn more.
 */

#ifndef OAIGooglePrivacyDlpV2FixedSizeBucketingConfig_H
#define OAIGooglePrivacyDlpV2FixedSizeBucketingConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2Value.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2Value;

class OAIGooglePrivacyDlpV2FixedSizeBucketingConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2FixedSizeBucketingConfig();
    OAIGooglePrivacyDlpV2FixedSizeBucketingConfig(QString json);
    ~OAIGooglePrivacyDlpV2FixedSizeBucketingConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBucketSize() const;
    void setBucketSize(const double &bucket_size);
    bool is_bucket_size_Set() const;
    bool is_bucket_size_Valid() const;

    OAIGooglePrivacyDlpV2Value getLowerBound() const;
    void setLowerBound(const OAIGooglePrivacyDlpV2Value &lower_bound);
    bool is_lower_bound_Set() const;
    bool is_lower_bound_Valid() const;

    OAIGooglePrivacyDlpV2Value getUpperBound() const;
    void setUpperBound(const OAIGooglePrivacyDlpV2Value &upper_bound);
    bool is_upper_bound_Set() const;
    bool is_upper_bound_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bucket_size;
    bool m_bucket_size_isSet;
    bool m_bucket_size_isValid;

    OAIGooglePrivacyDlpV2Value m_lower_bound;
    bool m_lower_bound_isSet;
    bool m_lower_bound_isValid;

    OAIGooglePrivacyDlpV2Value m_upper_bound;
    bool m_upper_bound_isSet;
    bool m_upper_bound_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2FixedSizeBucketingConfig)

#endif // OAIGooglePrivacyDlpV2FixedSizeBucketingConfig_H
