/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::~OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig() {}

void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::initializeModel() {

    m_common_alphabet_isSet = false;
    m_common_alphabet_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_crypto_key_isSet = false;
    m_crypto_key_isValid = false;

    m_custom_alphabet_isSet = false;
    m_custom_alphabet_isValid = false;

    m_radix_isSet = false;
    m_radix_isValid = false;

    m_surrogate_info_type_isSet = false;
    m_surrogate_info_type_isValid = false;
}

void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::fromJsonObject(QJsonObject json) {

    m_common_alphabet_isValid = ::OpenAPI::fromJsonValue(m_common_alphabet, json[QString("commonAlphabet")]);
    m_common_alphabet_isSet = !json[QString("commonAlphabet")].isNull() && m_common_alphabet_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_crypto_key_isValid = ::OpenAPI::fromJsonValue(m_crypto_key, json[QString("cryptoKey")]);
    m_crypto_key_isSet = !json[QString("cryptoKey")].isNull() && m_crypto_key_isValid;

    m_custom_alphabet_isValid = ::OpenAPI::fromJsonValue(m_custom_alphabet, json[QString("customAlphabet")]);
    m_custom_alphabet_isSet = !json[QString("customAlphabet")].isNull() && m_custom_alphabet_isValid;

    m_radix_isValid = ::OpenAPI::fromJsonValue(m_radix, json[QString("radix")]);
    m_radix_isSet = !json[QString("radix")].isNull() && m_radix_isValid;

    m_surrogate_info_type_isValid = ::OpenAPI::fromJsonValue(m_surrogate_info_type, json[QString("surrogateInfoType")]);
    m_surrogate_info_type_isSet = !json[QString("surrogateInfoType")].isNull() && m_surrogate_info_type_isValid;
}

QString OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_common_alphabet_isSet) {
        obj.insert(QString("commonAlphabet"), ::OpenAPI::toJsonValue(m_common_alphabet));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_crypto_key.isSet()) {
        obj.insert(QString("cryptoKey"), ::OpenAPI::toJsonValue(m_crypto_key));
    }
    if (m_custom_alphabet_isSet) {
        obj.insert(QString("customAlphabet"), ::OpenAPI::toJsonValue(m_custom_alphabet));
    }
    if (m_radix_isSet) {
        obj.insert(QString("radix"), ::OpenAPI::toJsonValue(m_radix));
    }
    if (m_surrogate_info_type.isSet()) {
        obj.insert(QString("surrogateInfoType"), ::OpenAPI::toJsonValue(m_surrogate_info_type));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getCommonAlphabet() const {
    return m_common_alphabet;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setCommonAlphabet(const QString &common_alphabet) {
    m_common_alphabet = common_alphabet;
    m_common_alphabet_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_common_alphabet_Set() const{
    return m_common_alphabet_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_common_alphabet_Valid() const{
    return m_common_alphabet_isValid;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getContext() const {
    return m_context;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setContext(const OAIGooglePrivacyDlpV2FieldId &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_context_Valid() const{
    return m_context_isValid;
}

OAIGooglePrivacyDlpV2CryptoKey OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getCryptoKey() const {
    return m_crypto_key;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setCryptoKey(const OAIGooglePrivacyDlpV2CryptoKey &crypto_key) {
    m_crypto_key = crypto_key;
    m_crypto_key_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_crypto_key_Set() const{
    return m_crypto_key_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_crypto_key_Valid() const{
    return m_crypto_key_isValid;
}

QString OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getCustomAlphabet() const {
    return m_custom_alphabet;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setCustomAlphabet(const QString &custom_alphabet) {
    m_custom_alphabet = custom_alphabet;
    m_custom_alphabet_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_custom_alphabet_Set() const{
    return m_custom_alphabet_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_custom_alphabet_Valid() const{
    return m_custom_alphabet_isValid;
}

qint32 OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getRadix() const {
    return m_radix;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setRadix(const qint32 &radix) {
    m_radix = radix;
    m_radix_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_radix_Set() const{
    return m_radix_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_radix_Valid() const{
    return m_radix_isValid;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::getSurrogateInfoType() const {
    return m_surrogate_info_type;
}
void OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::setSurrogateInfoType(const OAIGooglePrivacyDlpV2InfoType &surrogate_info_type) {
    m_surrogate_info_type = surrogate_info_type;
    m_surrogate_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_surrogate_info_type_Set() const{
    return m_surrogate_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::is_surrogate_info_type_Valid() const{
    return m_surrogate_info_type_isValid;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_alphabet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_alphabet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surrogate_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
