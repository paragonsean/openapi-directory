/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TransformationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TransformationSummary::OAIGooglePrivacyDlpV2TransformationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TransformationSummary::OAIGooglePrivacyDlpV2TransformationSummary() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TransformationSummary::~OAIGooglePrivacyDlpV2TransformationSummary() {}

void OAIGooglePrivacyDlpV2TransformationSummary::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_field_transformations_isSet = false;
    m_field_transformations_isValid = false;

    m_info_type_isSet = false;
    m_info_type_isValid = false;

    m_record_suppress_isSet = false;
    m_record_suppress_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_transformation_isSet = false;
    m_transformation_isValid = false;

    m_transformed_bytes_isSet = false;
    m_transformed_bytes_isValid = false;
}

void OAIGooglePrivacyDlpV2TransformationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TransformationSummary::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_field_transformations_isValid = ::OpenAPI::fromJsonValue(m_field_transformations, json[QString("fieldTransformations")]);
    m_field_transformations_isSet = !json[QString("fieldTransformations")].isNull() && m_field_transformations_isValid;

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("infoType")]);
    m_info_type_isSet = !json[QString("infoType")].isNull() && m_info_type_isValid;

    m_record_suppress_isValid = ::OpenAPI::fromJsonValue(m_record_suppress, json[QString("recordSuppress")]);
    m_record_suppress_isSet = !json[QString("recordSuppress")].isNull() && m_record_suppress_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_transformation_isValid = ::OpenAPI::fromJsonValue(m_transformation, json[QString("transformation")]);
    m_transformation_isSet = !json[QString("transformation")].isNull() && m_transformation_isValid;

    m_transformed_bytes_isValid = ::OpenAPI::fromJsonValue(m_transformed_bytes, json[QString("transformedBytes")]);
    m_transformed_bytes_isSet = !json[QString("transformedBytes")].isNull() && m_transformed_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TransformationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_field.isSet()) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_field_transformations.size() > 0) {
        obj.insert(QString("fieldTransformations"), ::OpenAPI::toJsonValue(m_field_transformations));
    }
    if (m_info_type.isSet()) {
        obj.insert(QString("infoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    if (m_record_suppress.isSet()) {
        obj.insert(QString("recordSuppress"), ::OpenAPI::toJsonValue(m_record_suppress));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_transformation.isSet()) {
        obj.insert(QString("transformation"), ::OpenAPI::toJsonValue(m_transformation));
    }
    if (m_transformed_bytes_isSet) {
        obj.insert(QString("transformedBytes"), ::OpenAPI::toJsonValue(m_transformed_bytes));
    }
    return obj;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2TransformationSummary::getField() const {
    return m_field;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setField(const OAIGooglePrivacyDlpV2FieldId &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_field_Set() const{
    return m_field_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_field_Valid() const{
    return m_field_isValid;
}

QList<OAIGooglePrivacyDlpV2FieldTransformation> OAIGooglePrivacyDlpV2TransformationSummary::getFieldTransformations() const {
    return m_field_transformations;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setFieldTransformations(const QList<OAIGooglePrivacyDlpV2FieldTransformation> &field_transformations) {
    m_field_transformations = field_transformations;
    m_field_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_field_transformations_Set() const{
    return m_field_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_field_transformations_Valid() const{
    return m_field_transformations_isValid;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2TransformationSummary::getInfoType() const {
    return m_info_type;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setInfoType(const OAIGooglePrivacyDlpV2InfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_info_type_Valid() const{
    return m_info_type_isValid;
}

OAIGooglePrivacyDlpV2RecordSuppression OAIGooglePrivacyDlpV2TransformationSummary::getRecordSuppress() const {
    return m_record_suppress;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setRecordSuppress(const OAIGooglePrivacyDlpV2RecordSuppression &record_suppress) {
    m_record_suppress = record_suppress;
    m_record_suppress_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_record_suppress_Set() const{
    return m_record_suppress_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_record_suppress_Valid() const{
    return m_record_suppress_isValid;
}

QList<OAIGooglePrivacyDlpV2SummaryResult> OAIGooglePrivacyDlpV2TransformationSummary::getResults() const {
    return m_results;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setResults(const QList<OAIGooglePrivacyDlpV2SummaryResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_results_Valid() const{
    return m_results_isValid;
}

OAIGooglePrivacyDlpV2PrimitiveTransformation OAIGooglePrivacyDlpV2TransformationSummary::getTransformation() const {
    return m_transformation;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setTransformation(const OAIGooglePrivacyDlpV2PrimitiveTransformation &transformation) {
    m_transformation = transformation;
    m_transformation_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_transformation_Set() const{
    return m_transformation_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_transformation_Valid() const{
    return m_transformation_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationSummary::getTransformedBytes() const {
    return m_transformed_bytes;
}
void OAIGooglePrivacyDlpV2TransformationSummary::setTransformedBytes(const QString &transformed_bytes) {
    m_transformed_bytes = transformed_bytes;
    m_transformed_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_transformed_bytes_Set() const{
    return m_transformed_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::is_transformed_bytes_Valid() const{
    return m_transformed_bytes_isValid;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_transformations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_suppress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformed_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TransformationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
