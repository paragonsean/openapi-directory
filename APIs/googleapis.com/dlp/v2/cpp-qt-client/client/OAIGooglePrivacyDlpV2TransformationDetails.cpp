/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TransformationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TransformationDetails::OAIGooglePrivacyDlpV2TransformationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TransformationDetails::OAIGooglePrivacyDlpV2TransformationDetails() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TransformationDetails::~OAIGooglePrivacyDlpV2TransformationDetails() {}

void OAIGooglePrivacyDlpV2TransformationDetails::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_transformation_isSet = false;
    m_transformation_isValid = false;

    m_transformation_location_isSet = false;
    m_transformation_location_isValid = false;

    m_transformed_bytes_isSet = false;
    m_transformed_bytes_isValid = false;
}

void OAIGooglePrivacyDlpV2TransformationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TransformationDetails::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_transformation_isValid = ::OpenAPI::fromJsonValue(m_transformation, json[QString("transformation")]);
    m_transformation_isSet = !json[QString("transformation")].isNull() && m_transformation_isValid;

    m_transformation_location_isValid = ::OpenAPI::fromJsonValue(m_transformation_location, json[QString("transformationLocation")]);
    m_transformation_location_isSet = !json[QString("transformationLocation")].isNull() && m_transformation_location_isValid;

    m_transformed_bytes_isValid = ::OpenAPI::fromJsonValue(m_transformed_bytes, json[QString("transformedBytes")]);
    m_transformed_bytes_isSet = !json[QString("transformedBytes")].isNull() && m_transformed_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TransformationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_transformation.size() > 0) {
        obj.insert(QString("transformation"), ::OpenAPI::toJsonValue(m_transformation));
    }
    if (m_transformation_location.isSet()) {
        obj.insert(QString("transformationLocation"), ::OpenAPI::toJsonValue(m_transformation_location));
    }
    if (m_transformed_bytes_isSet) {
        obj.insert(QString("transformedBytes"), ::OpenAPI::toJsonValue(m_transformed_bytes));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2TransformationDetails::getContainerName() const {
    return m_container_name;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationDetails::getResourceName() const {
    return m_resource_name;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

OAIGooglePrivacyDlpV2TransformationResultStatus OAIGooglePrivacyDlpV2TransformationDetails::getStatusDetails() const {
    return m_status_details;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setStatusDetails(const OAIGooglePrivacyDlpV2TransformationResultStatus &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QList<OAIGooglePrivacyDlpV2TransformationDescription> OAIGooglePrivacyDlpV2TransformationDetails::getTransformation() const {
    return m_transformation;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setTransformation(const QList<OAIGooglePrivacyDlpV2TransformationDescription> &transformation) {
    m_transformation = transformation;
    m_transformation_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformation_Set() const{
    return m_transformation_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformation_Valid() const{
    return m_transformation_isValid;
}

OAIGooglePrivacyDlpV2TransformationLocation OAIGooglePrivacyDlpV2TransformationDetails::getTransformationLocation() const {
    return m_transformation_location;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setTransformationLocation(const OAIGooglePrivacyDlpV2TransformationLocation &transformation_location) {
    m_transformation_location = transformation_location;
    m_transformation_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformation_location_Set() const{
    return m_transformation_location_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformation_location_Valid() const{
    return m_transformation_location_isValid;
}

QString OAIGooglePrivacyDlpV2TransformationDetails::getTransformedBytes() const {
    return m_transformed_bytes;
}
void OAIGooglePrivacyDlpV2TransformationDetails::setTransformedBytes(const QString &transformed_bytes) {
    m_transformed_bytes = transformed_bytes;
    m_transformed_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformed_bytes_Set() const{
    return m_transformed_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::is_transformed_bytes_Valid() const{
    return m_transformed_bytes_isValid;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformed_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TransformationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
