/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2HybridOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2HybridOptions::OAIGooglePrivacyDlpV2HybridOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2HybridOptions::OAIGooglePrivacyDlpV2HybridOptions() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2HybridOptions::~OAIGooglePrivacyDlpV2HybridOptions() {}

void OAIGooglePrivacyDlpV2HybridOptions::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_required_finding_label_keys_isSet = false;
    m_required_finding_label_keys_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;
}

void OAIGooglePrivacyDlpV2HybridOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2HybridOptions::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_required_finding_label_keys_isValid = ::OpenAPI::fromJsonValue(m_required_finding_label_keys, json[QString("requiredFindingLabelKeys")]);
    m_required_finding_label_keys_isSet = !json[QString("requiredFindingLabelKeys")].isNull() && m_required_finding_label_keys_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("tableOptions")]);
    m_table_options_isSet = !json[QString("tableOptions")].isNull() && m_table_options_isValid;
}

QString OAIGooglePrivacyDlpV2HybridOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2HybridOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_required_finding_label_keys.size() > 0) {
        obj.insert(QString("requiredFindingLabelKeys"), ::OpenAPI::toJsonValue(m_required_finding_label_keys));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("tableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2HybridOptions::getDescription() const {
    return m_description;
}
void OAIGooglePrivacyDlpV2HybridOptions::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIGooglePrivacyDlpV2HybridOptions::getLabels() const {
    return m_labels;
}
void OAIGooglePrivacyDlpV2HybridOptions::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2HybridOptions::getRequiredFindingLabelKeys() const {
    return m_required_finding_label_keys;
}
void OAIGooglePrivacyDlpV2HybridOptions::setRequiredFindingLabelKeys(const QList<QString> &required_finding_label_keys) {
    m_required_finding_label_keys = required_finding_label_keys;
    m_required_finding_label_keys_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_required_finding_label_keys_Set() const{
    return m_required_finding_label_keys_isSet;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_required_finding_label_keys_Valid() const{
    return m_required_finding_label_keys_isValid;
}

OAIGooglePrivacyDlpV2TableOptions OAIGooglePrivacyDlpV2HybridOptions::getTableOptions() const {
    return m_table_options;
}
void OAIGooglePrivacyDlpV2HybridOptions::setTableOptions(const OAIGooglePrivacyDlpV2TableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAIGooglePrivacyDlpV2HybridOptions::is_table_options_Valid() const{
    return m_table_options_isValid;
}

bool OAIGooglePrivacyDlpV2HybridOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_finding_label_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2HybridOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
