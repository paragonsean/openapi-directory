/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2PubSubNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2PubSubNotification::OAIGooglePrivacyDlpV2PubSubNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2PubSubNotification::OAIGooglePrivacyDlpV2PubSubNotification() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2PubSubNotification::~OAIGooglePrivacyDlpV2PubSubNotification() {}

void OAIGooglePrivacyDlpV2PubSubNotification::initializeModel() {

    m_detail_of_message_isSet = false;
    m_detail_of_message_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_pubsub_condition_isSet = false;
    m_pubsub_condition_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIGooglePrivacyDlpV2PubSubNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2PubSubNotification::fromJsonObject(QJsonObject json) {

    m_detail_of_message_isValid = ::OpenAPI::fromJsonValue(m_detail_of_message, json[QString("detailOfMessage")]);
    m_detail_of_message_isSet = !json[QString("detailOfMessage")].isNull() && m_detail_of_message_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_pubsub_condition_isValid = ::OpenAPI::fromJsonValue(m_pubsub_condition, json[QString("pubsubCondition")]);
    m_pubsub_condition_isSet = !json[QString("pubsubCondition")].isNull() && m_pubsub_condition_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIGooglePrivacyDlpV2PubSubNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2PubSubNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_of_message_isSet) {
        obj.insert(QString("detailOfMessage"), ::OpenAPI::toJsonValue(m_detail_of_message));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_pubsub_condition.isSet()) {
        obj.insert(QString("pubsubCondition"), ::OpenAPI::toJsonValue(m_pubsub_condition));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2PubSubNotification::getDetailOfMessage() const {
    return m_detail_of_message;
}
void OAIGooglePrivacyDlpV2PubSubNotification::setDetailOfMessage(const QString &detail_of_message) {
    m_detail_of_message = detail_of_message;
    m_detail_of_message_isSet = true;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_detail_of_message_Set() const{
    return m_detail_of_message_isSet;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_detail_of_message_Valid() const{
    return m_detail_of_message_isValid;
}

QString OAIGooglePrivacyDlpV2PubSubNotification::getEvent() const {
    return m_event;
}
void OAIGooglePrivacyDlpV2PubSubNotification::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_event_Set() const{
    return m_event_isSet;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_event_Valid() const{
    return m_event_isValid;
}

OAIGooglePrivacyDlpV2DataProfilePubSubCondition OAIGooglePrivacyDlpV2PubSubNotification::getPubsubCondition() const {
    return m_pubsub_condition;
}
void OAIGooglePrivacyDlpV2PubSubNotification::setPubsubCondition(const OAIGooglePrivacyDlpV2DataProfilePubSubCondition &pubsub_condition) {
    m_pubsub_condition = pubsub_condition;
    m_pubsub_condition_isSet = true;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_pubsub_condition_Set() const{
    return m_pubsub_condition_isSet;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_pubsub_condition_Valid() const{
    return m_pubsub_condition_isValid;
}

QString OAIGooglePrivacyDlpV2PubSubNotification::getTopic() const {
    return m_topic;
}
void OAIGooglePrivacyDlpV2PubSubNotification::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_of_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2PubSubNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
