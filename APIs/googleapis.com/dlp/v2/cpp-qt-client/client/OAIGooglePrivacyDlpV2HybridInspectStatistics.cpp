/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2HybridInspectStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2HybridInspectStatistics::OAIGooglePrivacyDlpV2HybridInspectStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2HybridInspectStatistics::OAIGooglePrivacyDlpV2HybridInspectStatistics() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2HybridInspectStatistics::~OAIGooglePrivacyDlpV2HybridInspectStatistics() {}

void OAIGooglePrivacyDlpV2HybridInspectStatistics::initializeModel() {

    m_aborted_count_isSet = false;
    m_aborted_count_isValid = false;

    m_pending_count_isSet = false;
    m_pending_count_isValid = false;

    m_processed_count_isSet = false;
    m_processed_count_isValid = false;
}

void OAIGooglePrivacyDlpV2HybridInspectStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2HybridInspectStatistics::fromJsonObject(QJsonObject json) {

    m_aborted_count_isValid = ::OpenAPI::fromJsonValue(m_aborted_count, json[QString("abortedCount")]);
    m_aborted_count_isSet = !json[QString("abortedCount")].isNull() && m_aborted_count_isValid;

    m_pending_count_isValid = ::OpenAPI::fromJsonValue(m_pending_count, json[QString("pendingCount")]);
    m_pending_count_isSet = !json[QString("pendingCount")].isNull() && m_pending_count_isValid;

    m_processed_count_isValid = ::OpenAPI::fromJsonValue(m_processed_count, json[QString("processedCount")]);
    m_processed_count_isSet = !json[QString("processedCount")].isNull() && m_processed_count_isValid;
}

QString OAIGooglePrivacyDlpV2HybridInspectStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2HybridInspectStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_aborted_count_isSet) {
        obj.insert(QString("abortedCount"), ::OpenAPI::toJsonValue(m_aborted_count));
    }
    if (m_pending_count_isSet) {
        obj.insert(QString("pendingCount"), ::OpenAPI::toJsonValue(m_pending_count));
    }
    if (m_processed_count_isSet) {
        obj.insert(QString("processedCount"), ::OpenAPI::toJsonValue(m_processed_count));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2HybridInspectStatistics::getAbortedCount() const {
    return m_aborted_count;
}
void OAIGooglePrivacyDlpV2HybridInspectStatistics::setAbortedCount(const QString &aborted_count) {
    m_aborted_count = aborted_count;
    m_aborted_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_aborted_count_Set() const{
    return m_aborted_count_isSet;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_aborted_count_Valid() const{
    return m_aborted_count_isValid;
}

QString OAIGooglePrivacyDlpV2HybridInspectStatistics::getPendingCount() const {
    return m_pending_count;
}
void OAIGooglePrivacyDlpV2HybridInspectStatistics::setPendingCount(const QString &pending_count) {
    m_pending_count = pending_count;
    m_pending_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_pending_count_Set() const{
    return m_pending_count_isSet;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_pending_count_Valid() const{
    return m_pending_count_isValid;
}

QString OAIGooglePrivacyDlpV2HybridInspectStatistics::getProcessedCount() const {
    return m_processed_count;
}
void OAIGooglePrivacyDlpV2HybridInspectStatistics::setProcessedCount(const QString &processed_count) {
    m_processed_count = processed_count;
    m_processed_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_processed_count_Set() const{
    return m_processed_count_isSet;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::is_processed_count_Valid() const{
    return m_processed_count_isValid;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aborted_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2HybridInspectStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
