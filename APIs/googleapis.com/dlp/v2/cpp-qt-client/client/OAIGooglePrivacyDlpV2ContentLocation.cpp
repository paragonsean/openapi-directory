/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2ContentLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2ContentLocation::OAIGooglePrivacyDlpV2ContentLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2ContentLocation::OAIGooglePrivacyDlpV2ContentLocation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2ContentLocation::~OAIGooglePrivacyDlpV2ContentLocation() {}

void OAIGooglePrivacyDlpV2ContentLocation::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_container_timestamp_isSet = false;
    m_container_timestamp_isValid = false;

    m_container_version_isSet = false;
    m_container_version_isValid = false;

    m_document_location_isSet = false;
    m_document_location_isValid = false;

    m_image_location_isSet = false;
    m_image_location_isValid = false;

    m_metadata_location_isSet = false;
    m_metadata_location_isValid = false;

    m_record_location_isSet = false;
    m_record_location_isValid = false;
}

void OAIGooglePrivacyDlpV2ContentLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2ContentLocation::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_container_timestamp_isValid = ::OpenAPI::fromJsonValue(m_container_timestamp, json[QString("containerTimestamp")]);
    m_container_timestamp_isSet = !json[QString("containerTimestamp")].isNull() && m_container_timestamp_isValid;

    m_container_version_isValid = ::OpenAPI::fromJsonValue(m_container_version, json[QString("containerVersion")]);
    m_container_version_isSet = !json[QString("containerVersion")].isNull() && m_container_version_isValid;

    m_document_location_isValid = ::OpenAPI::fromJsonValue(m_document_location, json[QString("documentLocation")]);
    m_document_location_isSet = !json[QString("documentLocation")].isNull() && m_document_location_isValid;

    m_image_location_isValid = ::OpenAPI::fromJsonValue(m_image_location, json[QString("imageLocation")]);
    m_image_location_isSet = !json[QString("imageLocation")].isNull() && m_image_location_isValid;

    m_metadata_location_isValid = ::OpenAPI::fromJsonValue(m_metadata_location, json[QString("metadataLocation")]);
    m_metadata_location_isSet = !json[QString("metadataLocation")].isNull() && m_metadata_location_isValid;

    m_record_location_isValid = ::OpenAPI::fromJsonValue(m_record_location, json[QString("recordLocation")]);
    m_record_location_isSet = !json[QString("recordLocation")].isNull() && m_record_location_isValid;
}

QString OAIGooglePrivacyDlpV2ContentLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2ContentLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_container_timestamp_isSet) {
        obj.insert(QString("containerTimestamp"), ::OpenAPI::toJsonValue(m_container_timestamp));
    }
    if (m_container_version_isSet) {
        obj.insert(QString("containerVersion"), ::OpenAPI::toJsonValue(m_container_version));
    }
    if (m_document_location.isSet()) {
        obj.insert(QString("documentLocation"), ::OpenAPI::toJsonValue(m_document_location));
    }
    if (m_image_location.isSet()) {
        obj.insert(QString("imageLocation"), ::OpenAPI::toJsonValue(m_image_location));
    }
    if (m_metadata_location.isSet()) {
        obj.insert(QString("metadataLocation"), ::OpenAPI::toJsonValue(m_metadata_location));
    }
    if (m_record_location.isSet()) {
        obj.insert(QString("recordLocation"), ::OpenAPI::toJsonValue(m_record_location));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2ContentLocation::getContainerName() const {
    return m_container_name;
}
void OAIGooglePrivacyDlpV2ContentLocation::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIGooglePrivacyDlpV2ContentLocation::getContainerTimestamp() const {
    return m_container_timestamp;
}
void OAIGooglePrivacyDlpV2ContentLocation::setContainerTimestamp(const QString &container_timestamp) {
    m_container_timestamp = container_timestamp;
    m_container_timestamp_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_timestamp_Set() const{
    return m_container_timestamp_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_timestamp_Valid() const{
    return m_container_timestamp_isValid;
}

QString OAIGooglePrivacyDlpV2ContentLocation::getContainerVersion() const {
    return m_container_version;
}
void OAIGooglePrivacyDlpV2ContentLocation::setContainerVersion(const QString &container_version) {
    m_container_version = container_version;
    m_container_version_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_version_Set() const{
    return m_container_version_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_container_version_Valid() const{
    return m_container_version_isValid;
}

OAIGooglePrivacyDlpV2DocumentLocation OAIGooglePrivacyDlpV2ContentLocation::getDocumentLocation() const {
    return m_document_location;
}
void OAIGooglePrivacyDlpV2ContentLocation::setDocumentLocation(const OAIGooglePrivacyDlpV2DocumentLocation &document_location) {
    m_document_location = document_location;
    m_document_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_document_location_Set() const{
    return m_document_location_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_document_location_Valid() const{
    return m_document_location_isValid;
}

OAIGooglePrivacyDlpV2ImageLocation OAIGooglePrivacyDlpV2ContentLocation::getImageLocation() const {
    return m_image_location;
}
void OAIGooglePrivacyDlpV2ContentLocation::setImageLocation(const OAIGooglePrivacyDlpV2ImageLocation &image_location) {
    m_image_location = image_location;
    m_image_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_image_location_Set() const{
    return m_image_location_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_image_location_Valid() const{
    return m_image_location_isValid;
}

OAIGooglePrivacyDlpV2MetadataLocation OAIGooglePrivacyDlpV2ContentLocation::getMetadataLocation() const {
    return m_metadata_location;
}
void OAIGooglePrivacyDlpV2ContentLocation::setMetadataLocation(const OAIGooglePrivacyDlpV2MetadataLocation &metadata_location) {
    m_metadata_location = metadata_location;
    m_metadata_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_metadata_location_Set() const{
    return m_metadata_location_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_metadata_location_Valid() const{
    return m_metadata_location_isValid;
}

OAIGooglePrivacyDlpV2RecordLocation OAIGooglePrivacyDlpV2ContentLocation::getRecordLocation() const {
    return m_record_location;
}
void OAIGooglePrivacyDlpV2ContentLocation::setRecordLocation(const OAIGooglePrivacyDlpV2RecordLocation &record_location) {
    m_record_location = record_location;
    m_record_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_record_location_Set() const{
    return m_record_location_isSet;
}

bool OAIGooglePrivacyDlpV2ContentLocation::is_record_location_Valid() const{
    return m_record_location_isValid;
}

bool OAIGooglePrivacyDlpV2ContentLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2ContentLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
