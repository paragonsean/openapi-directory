/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Action::OAIGooglePrivacyDlpV2Action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Action::OAIGooglePrivacyDlpV2Action() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Action::~OAIGooglePrivacyDlpV2Action() {}

void OAIGooglePrivacyDlpV2Action::initializeModel() {

    m_deidentify_isSet = false;
    m_deidentify_isValid = false;

    m_job_notification_emails_isSet = false;
    m_job_notification_emails_isValid = false;

    m_pub_sub_isSet = false;
    m_pub_sub_isValid = false;

    m_publish_findings_to_cloud_data_catalog_isSet = false;
    m_publish_findings_to_cloud_data_catalog_isValid = false;

    m_publish_summary_to_cscc_isSet = false;
    m_publish_summary_to_cscc_isValid = false;

    m_publish_to_stackdriver_isSet = false;
    m_publish_to_stackdriver_isValid = false;

    m_save_findings_isSet = false;
    m_save_findings_isValid = false;
}

void OAIGooglePrivacyDlpV2Action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Action::fromJsonObject(QJsonObject json) {

    m_deidentify_isValid = ::OpenAPI::fromJsonValue(m_deidentify, json[QString("deidentify")]);
    m_deidentify_isSet = !json[QString("deidentify")].isNull() && m_deidentify_isValid;

    m_job_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_job_notification_emails, json[QString("jobNotificationEmails")]);
    m_job_notification_emails_isSet = !json[QString("jobNotificationEmails")].isNull() && m_job_notification_emails_isValid;

    m_pub_sub_isValid = ::OpenAPI::fromJsonValue(m_pub_sub, json[QString("pubSub")]);
    m_pub_sub_isSet = !json[QString("pubSub")].isNull() && m_pub_sub_isValid;

    m_publish_findings_to_cloud_data_catalog_isValid = ::OpenAPI::fromJsonValue(m_publish_findings_to_cloud_data_catalog, json[QString("publishFindingsToCloudDataCatalog")]);
    m_publish_findings_to_cloud_data_catalog_isSet = !json[QString("publishFindingsToCloudDataCatalog")].isNull() && m_publish_findings_to_cloud_data_catalog_isValid;

    m_publish_summary_to_cscc_isValid = ::OpenAPI::fromJsonValue(m_publish_summary_to_cscc, json[QString("publishSummaryToCscc")]);
    m_publish_summary_to_cscc_isSet = !json[QString("publishSummaryToCscc")].isNull() && m_publish_summary_to_cscc_isValid;

    m_publish_to_stackdriver_isValid = ::OpenAPI::fromJsonValue(m_publish_to_stackdriver, json[QString("publishToStackdriver")]);
    m_publish_to_stackdriver_isSet = !json[QString("publishToStackdriver")].isNull() && m_publish_to_stackdriver_isValid;

    m_save_findings_isValid = ::OpenAPI::fromJsonValue(m_save_findings, json[QString("saveFindings")]);
    m_save_findings_isSet = !json[QString("saveFindings")].isNull() && m_save_findings_isValid;
}

QString OAIGooglePrivacyDlpV2Action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Action::asJsonObject() const {
    QJsonObject obj;
    if (m_deidentify.isSet()) {
        obj.insert(QString("deidentify"), ::OpenAPI::toJsonValue(m_deidentify));
    }
    if (m_job_notification_emails_isSet) {
        obj.insert(QString("jobNotificationEmails"), ::OpenAPI::toJsonValue(m_job_notification_emails));
    }
    if (m_pub_sub.isSet()) {
        obj.insert(QString("pubSub"), ::OpenAPI::toJsonValue(m_pub_sub));
    }
    if (m_publish_findings_to_cloud_data_catalog_isSet) {
        obj.insert(QString("publishFindingsToCloudDataCatalog"), ::OpenAPI::toJsonValue(m_publish_findings_to_cloud_data_catalog));
    }
    if (m_publish_summary_to_cscc_isSet) {
        obj.insert(QString("publishSummaryToCscc"), ::OpenAPI::toJsonValue(m_publish_summary_to_cscc));
    }
    if (m_publish_to_stackdriver_isSet) {
        obj.insert(QString("publishToStackdriver"), ::OpenAPI::toJsonValue(m_publish_to_stackdriver));
    }
    if (m_save_findings.isSet()) {
        obj.insert(QString("saveFindings"), ::OpenAPI::toJsonValue(m_save_findings));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Deidentify OAIGooglePrivacyDlpV2Action::getDeidentify() const {
    return m_deidentify;
}
void OAIGooglePrivacyDlpV2Action::setDeidentify(const OAIGooglePrivacyDlpV2Deidentify &deidentify) {
    m_deidentify = deidentify;
    m_deidentify_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_deidentify_Set() const{
    return m_deidentify_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_deidentify_Valid() const{
    return m_deidentify_isValid;
}

OAIObject OAIGooglePrivacyDlpV2Action::getJobNotificationEmails() const {
    return m_job_notification_emails;
}
void OAIGooglePrivacyDlpV2Action::setJobNotificationEmails(const OAIObject &job_notification_emails) {
    m_job_notification_emails = job_notification_emails;
    m_job_notification_emails_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_job_notification_emails_Set() const{
    return m_job_notification_emails_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_job_notification_emails_Valid() const{
    return m_job_notification_emails_isValid;
}

OAIGooglePrivacyDlpV2PublishToPubSub OAIGooglePrivacyDlpV2Action::getPubSub() const {
    return m_pub_sub;
}
void OAIGooglePrivacyDlpV2Action::setPubSub(const OAIGooglePrivacyDlpV2PublishToPubSub &pub_sub) {
    m_pub_sub = pub_sub;
    m_pub_sub_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_pub_sub_Set() const{
    return m_pub_sub_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_pub_sub_Valid() const{
    return m_pub_sub_isValid;
}

OAIObject OAIGooglePrivacyDlpV2Action::getPublishFindingsToCloudDataCatalog() const {
    return m_publish_findings_to_cloud_data_catalog;
}
void OAIGooglePrivacyDlpV2Action::setPublishFindingsToCloudDataCatalog(const OAIObject &publish_findings_to_cloud_data_catalog) {
    m_publish_findings_to_cloud_data_catalog = publish_findings_to_cloud_data_catalog;
    m_publish_findings_to_cloud_data_catalog_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_findings_to_cloud_data_catalog_Set() const{
    return m_publish_findings_to_cloud_data_catalog_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_findings_to_cloud_data_catalog_Valid() const{
    return m_publish_findings_to_cloud_data_catalog_isValid;
}

OAIObject OAIGooglePrivacyDlpV2Action::getPublishSummaryToCscc() const {
    return m_publish_summary_to_cscc;
}
void OAIGooglePrivacyDlpV2Action::setPublishSummaryToCscc(const OAIObject &publish_summary_to_cscc) {
    m_publish_summary_to_cscc = publish_summary_to_cscc;
    m_publish_summary_to_cscc_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_summary_to_cscc_Set() const{
    return m_publish_summary_to_cscc_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_summary_to_cscc_Valid() const{
    return m_publish_summary_to_cscc_isValid;
}

OAIObject OAIGooglePrivacyDlpV2Action::getPublishToStackdriver() const {
    return m_publish_to_stackdriver;
}
void OAIGooglePrivacyDlpV2Action::setPublishToStackdriver(const OAIObject &publish_to_stackdriver) {
    m_publish_to_stackdriver = publish_to_stackdriver;
    m_publish_to_stackdriver_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_to_stackdriver_Set() const{
    return m_publish_to_stackdriver_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_publish_to_stackdriver_Valid() const{
    return m_publish_to_stackdriver_isValid;
}

OAIGooglePrivacyDlpV2SaveFindings OAIGooglePrivacyDlpV2Action::getSaveFindings() const {
    return m_save_findings;
}
void OAIGooglePrivacyDlpV2Action::setSaveFindings(const OAIGooglePrivacyDlpV2SaveFindings &save_findings) {
    m_save_findings = save_findings;
    m_save_findings_isSet = true;
}

bool OAIGooglePrivacyDlpV2Action::is_save_findings_Set() const{
    return m_save_findings_isSet;
}

bool OAIGooglePrivacyDlpV2Action::is_save_findings_Valid() const{
    return m_save_findings_isValid;
}

bool OAIGooglePrivacyDlpV2Action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deidentify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_notification_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_findings_to_cloud_data_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_summary_to_cscc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_to_stackdriver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Action::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
