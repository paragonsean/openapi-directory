/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TableDataProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TableDataProfile::OAIGooglePrivacyDlpV2TableDataProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TableDataProfile::OAIGooglePrivacyDlpV2TableDataProfile() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TableDataProfile::~OAIGooglePrivacyDlpV2TableDataProfile() {}

void OAIGooglePrivacyDlpV2TableDataProfile::initializeModel() {

    m_config_snapshot_isSet = false;
    m_config_snapshot_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_data_risk_level_isSet = false;
    m_data_risk_level_isValid = false;

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_dataset_location_isSet = false;
    m_dataset_location_isValid = false;

    m_dataset_project_id_isSet = false;
    m_dataset_project_id_isValid = false;

    m_encryption_status_isSet = false;
    m_encryption_status_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_failed_column_count_isSet = false;
    m_failed_column_count_isValid = false;

    m_full_resource_isSet = false;
    m_full_resource_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_other_info_types_isSet = false;
    m_other_info_types_isValid = false;

    m_predicted_info_types_isSet = false;
    m_predicted_info_types_isValid = false;

    m_profile_last_generated_isSet = false;
    m_profile_last_generated_isValid = false;

    m_profile_status_isSet = false;
    m_profile_status_isValid = false;

    m_project_data_profile_isSet = false;
    m_project_data_profile_isValid = false;

    m_resource_labels_isSet = false;
    m_resource_labels_isValid = false;

    m_resource_visibility_isSet = false;
    m_resource_visibility_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_scanned_column_count_isSet = false;
    m_scanned_column_count_isValid = false;

    m_sensitivity_score_isSet = false;
    m_sensitivity_score_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_table_size_bytes_isSet = false;
    m_table_size_bytes_isValid = false;
}

void OAIGooglePrivacyDlpV2TableDataProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TableDataProfile::fromJsonObject(QJsonObject json) {

    m_config_snapshot_isValid = ::OpenAPI::fromJsonValue(m_config_snapshot, json[QString("configSnapshot")]);
    m_config_snapshot_isSet = !json[QString("configSnapshot")].isNull() && m_config_snapshot_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_data_risk_level_isValid = ::OpenAPI::fromJsonValue(m_data_risk_level, json[QString("dataRiskLevel")]);
    m_data_risk_level_isSet = !json[QString("dataRiskLevel")].isNull() && m_data_risk_level_isValid;

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_dataset_location_isValid = ::OpenAPI::fromJsonValue(m_dataset_location, json[QString("datasetLocation")]);
    m_dataset_location_isSet = !json[QString("datasetLocation")].isNull() && m_dataset_location_isValid;

    m_dataset_project_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_project_id, json[QString("datasetProjectId")]);
    m_dataset_project_id_isSet = !json[QString("datasetProjectId")].isNull() && m_dataset_project_id_isValid;

    m_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_encryption_status, json[QString("encryptionStatus")]);
    m_encryption_status_isSet = !json[QString("encryptionStatus")].isNull() && m_encryption_status_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_failed_column_count_isValid = ::OpenAPI::fromJsonValue(m_failed_column_count, json[QString("failedColumnCount")]);
    m_failed_column_count_isSet = !json[QString("failedColumnCount")].isNull() && m_failed_column_count_isValid;

    m_full_resource_isValid = ::OpenAPI::fromJsonValue(m_full_resource, json[QString("fullResource")]);
    m_full_resource_isSet = !json[QString("fullResource")].isNull() && m_full_resource_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_other_info_types_isValid = ::OpenAPI::fromJsonValue(m_other_info_types, json[QString("otherInfoTypes")]);
    m_other_info_types_isSet = !json[QString("otherInfoTypes")].isNull() && m_other_info_types_isValid;

    m_predicted_info_types_isValid = ::OpenAPI::fromJsonValue(m_predicted_info_types, json[QString("predictedInfoTypes")]);
    m_predicted_info_types_isSet = !json[QString("predictedInfoTypes")].isNull() && m_predicted_info_types_isValid;

    m_profile_last_generated_isValid = ::OpenAPI::fromJsonValue(m_profile_last_generated, json[QString("profileLastGenerated")]);
    m_profile_last_generated_isSet = !json[QString("profileLastGenerated")].isNull() && m_profile_last_generated_isValid;

    m_profile_status_isValid = ::OpenAPI::fromJsonValue(m_profile_status, json[QString("profileStatus")]);
    m_profile_status_isSet = !json[QString("profileStatus")].isNull() && m_profile_status_isValid;

    m_project_data_profile_isValid = ::OpenAPI::fromJsonValue(m_project_data_profile, json[QString("projectDataProfile")]);
    m_project_data_profile_isSet = !json[QString("projectDataProfile")].isNull() && m_project_data_profile_isValid;

    m_resource_labels_isValid = ::OpenAPI::fromJsonValue(m_resource_labels, json[QString("resourceLabels")]);
    m_resource_labels_isSet = !json[QString("resourceLabels")].isNull() && m_resource_labels_isValid;

    m_resource_visibility_isValid = ::OpenAPI::fromJsonValue(m_resource_visibility, json[QString("resourceVisibility")]);
    m_resource_visibility_isSet = !json[QString("resourceVisibility")].isNull() && m_resource_visibility_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_scanned_column_count_isValid = ::OpenAPI::fromJsonValue(m_scanned_column_count, json[QString("scannedColumnCount")]);
    m_scanned_column_count_isSet = !json[QString("scannedColumnCount")].isNull() && m_scanned_column_count_isValid;

    m_sensitivity_score_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_score, json[QString("sensitivityScore")]);
    m_sensitivity_score_isSet = !json[QString("sensitivityScore")].isNull() && m_sensitivity_score_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("tableId")]);
    m_table_id_isSet = !json[QString("tableId")].isNull() && m_table_id_isValid;

    m_table_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_table_size_bytes, json[QString("tableSizeBytes")]);
    m_table_size_bytes_isSet = !json[QString("tableSizeBytes")].isNull() && m_table_size_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TableDataProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_config_snapshot.isSet()) {
        obj.insert(QString("configSnapshot"), ::OpenAPI::toJsonValue(m_config_snapshot));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_data_risk_level.isSet()) {
        obj.insert(QString("dataRiskLevel"), ::OpenAPI::toJsonValue(m_data_risk_level));
    }
    if (m_data_source_type.isSet()) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_dataset_location_isSet) {
        obj.insert(QString("datasetLocation"), ::OpenAPI::toJsonValue(m_dataset_location));
    }
    if (m_dataset_project_id_isSet) {
        obj.insert(QString("datasetProjectId"), ::OpenAPI::toJsonValue(m_dataset_project_id));
    }
    if (m_encryption_status_isSet) {
        obj.insert(QString("encryptionStatus"), ::OpenAPI::toJsonValue(m_encryption_status));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_failed_column_count_isSet) {
        obj.insert(QString("failedColumnCount"), ::OpenAPI::toJsonValue(m_failed_column_count));
    }
    if (m_full_resource_isSet) {
        obj.insert(QString("fullResource"), ::OpenAPI::toJsonValue(m_full_resource));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_other_info_types.size() > 0) {
        obj.insert(QString("otherInfoTypes"), ::OpenAPI::toJsonValue(m_other_info_types));
    }
    if (m_predicted_info_types.size() > 0) {
        obj.insert(QString("predictedInfoTypes"), ::OpenAPI::toJsonValue(m_predicted_info_types));
    }
    if (m_profile_last_generated_isSet) {
        obj.insert(QString("profileLastGenerated"), ::OpenAPI::toJsonValue(m_profile_last_generated));
    }
    if (m_profile_status.isSet()) {
        obj.insert(QString("profileStatus"), ::OpenAPI::toJsonValue(m_profile_status));
    }
    if (m_project_data_profile_isSet) {
        obj.insert(QString("projectDataProfile"), ::OpenAPI::toJsonValue(m_project_data_profile));
    }
    if (m_resource_labels.size() > 0) {
        obj.insert(QString("resourceLabels"), ::OpenAPI::toJsonValue(m_resource_labels));
    }
    if (m_resource_visibility_isSet) {
        obj.insert(QString("resourceVisibility"), ::OpenAPI::toJsonValue(m_resource_visibility));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_scanned_column_count_isSet) {
        obj.insert(QString("scannedColumnCount"), ::OpenAPI::toJsonValue(m_scanned_column_count));
    }
    if (m_sensitivity_score.isSet()) {
        obj.insert(QString("sensitivityScore"), ::OpenAPI::toJsonValue(m_sensitivity_score));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("tableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_table_size_bytes_isSet) {
        obj.insert(QString("tableSizeBytes"), ::OpenAPI::toJsonValue(m_table_size_bytes));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DataProfileConfigSnapshot OAIGooglePrivacyDlpV2TableDataProfile::getConfigSnapshot() const {
    return m_config_snapshot;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setConfigSnapshot(const OAIGooglePrivacyDlpV2DataProfileConfigSnapshot &config_snapshot) {
    m_config_snapshot = config_snapshot;
    m_config_snapshot_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_config_snapshot_Set() const{
    return m_config_snapshot_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_config_snapshot_Valid() const{
    return m_config_snapshot_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getCreateTime() const {
    return m_create_time;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGooglePrivacyDlpV2DataRiskLevel OAIGooglePrivacyDlpV2TableDataProfile::getDataRiskLevel() const {
    return m_data_risk_level;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setDataRiskLevel(const OAIGooglePrivacyDlpV2DataRiskLevel &data_risk_level) {
    m_data_risk_level = data_risk_level;
    m_data_risk_level_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_data_risk_level_Set() const{
    return m_data_risk_level_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_data_risk_level_Valid() const{
    return m_data_risk_level_isValid;
}

OAIGooglePrivacyDlpV2DataSourceType OAIGooglePrivacyDlpV2TableDataProfile::getDataSourceType() const {
    return m_data_source_type;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setDataSourceType(const OAIGooglePrivacyDlpV2DataSourceType &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getDatasetId() const {
    return m_dataset_id;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getDatasetLocation() const {
    return m_dataset_location;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setDatasetLocation(const QString &dataset_location) {
    m_dataset_location = dataset_location;
    m_dataset_location_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_location_Set() const{
    return m_dataset_location_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_location_Valid() const{
    return m_dataset_location_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getDatasetProjectId() const {
    return m_dataset_project_id;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setDatasetProjectId(const QString &dataset_project_id) {
    m_dataset_project_id = dataset_project_id;
    m_dataset_project_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_project_id_Set() const{
    return m_dataset_project_id_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_dataset_project_id_Valid() const{
    return m_dataset_project_id_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getEncryptionStatus() const {
    return m_encryption_status;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setEncryptionStatus(const QString &encryption_status) {
    m_encryption_status = encryption_status;
    m_encryption_status_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_encryption_status_Set() const{
    return m_encryption_status_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_encryption_status_Valid() const{
    return m_encryption_status_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getExpirationTime() const {
    return m_expiration_time;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getFailedColumnCount() const {
    return m_failed_column_count;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setFailedColumnCount(const QString &failed_column_count) {
    m_failed_column_count = failed_column_count;
    m_failed_column_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_failed_column_count_Set() const{
    return m_failed_column_count_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_failed_column_count_Valid() const{
    return m_failed_column_count_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getFullResource() const {
    return m_full_resource;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setFullResource(const QString &full_resource) {
    m_full_resource = full_resource;
    m_full_resource_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_full_resource_Set() const{
    return m_full_resource_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_full_resource_Valid() const{
    return m_full_resource_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getName() const {
    return m_name;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGooglePrivacyDlpV2OtherInfoTypeSummary> OAIGooglePrivacyDlpV2TableDataProfile::getOtherInfoTypes() const {
    return m_other_info_types;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setOtherInfoTypes(const QList<OAIGooglePrivacyDlpV2OtherInfoTypeSummary> &other_info_types) {
    m_other_info_types = other_info_types;
    m_other_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_other_info_types_Set() const{
    return m_other_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_other_info_types_Valid() const{
    return m_other_info_types_isValid;
}

QList<OAIGooglePrivacyDlpV2InfoTypeSummary> OAIGooglePrivacyDlpV2TableDataProfile::getPredictedInfoTypes() const {
    return m_predicted_info_types;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setPredictedInfoTypes(const QList<OAIGooglePrivacyDlpV2InfoTypeSummary> &predicted_info_types) {
    m_predicted_info_types = predicted_info_types;
    m_predicted_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_predicted_info_types_Set() const{
    return m_predicted_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_predicted_info_types_Valid() const{
    return m_predicted_info_types_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getProfileLastGenerated() const {
    return m_profile_last_generated;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setProfileLastGenerated(const QString &profile_last_generated) {
    m_profile_last_generated = profile_last_generated;
    m_profile_last_generated_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_profile_last_generated_Set() const{
    return m_profile_last_generated_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_profile_last_generated_Valid() const{
    return m_profile_last_generated_isValid;
}

OAIGooglePrivacyDlpV2ProfileStatus OAIGooglePrivacyDlpV2TableDataProfile::getProfileStatus() const {
    return m_profile_status;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setProfileStatus(const OAIGooglePrivacyDlpV2ProfileStatus &profile_status) {
    m_profile_status = profile_status;
    m_profile_status_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_profile_status_Set() const{
    return m_profile_status_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_profile_status_Valid() const{
    return m_profile_status_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getProjectDataProfile() const {
    return m_project_data_profile;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setProjectDataProfile(const QString &project_data_profile) {
    m_project_data_profile = project_data_profile;
    m_project_data_profile_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_project_data_profile_Set() const{
    return m_project_data_profile_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_project_data_profile_Valid() const{
    return m_project_data_profile_isValid;
}

QMap<QString, QString> OAIGooglePrivacyDlpV2TableDataProfile::getResourceLabels() const {
    return m_resource_labels;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setResourceLabels(const QMap<QString, QString> &resource_labels) {
    m_resource_labels = resource_labels;
    m_resource_labels_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_resource_labels_Set() const{
    return m_resource_labels_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_resource_labels_Valid() const{
    return m_resource_labels_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getResourceVisibility() const {
    return m_resource_visibility;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setResourceVisibility(const QString &resource_visibility) {
    m_resource_visibility = resource_visibility;
    m_resource_visibility_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_resource_visibility_Set() const{
    return m_resource_visibility_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_resource_visibility_Valid() const{
    return m_resource_visibility_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getRowCount() const {
    return m_row_count;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setRowCount(const QString &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getScannedColumnCount() const {
    return m_scanned_column_count;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setScannedColumnCount(const QString &scanned_column_count) {
    m_scanned_column_count = scanned_column_count;
    m_scanned_column_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_scanned_column_count_Set() const{
    return m_scanned_column_count_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_scanned_column_count_Valid() const{
    return m_scanned_column_count_isValid;
}

OAIGooglePrivacyDlpV2SensitivityScore OAIGooglePrivacyDlpV2TableDataProfile::getSensitivityScore() const {
    return m_sensitivity_score;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setSensitivityScore(const OAIGooglePrivacyDlpV2SensitivityScore &sensitivity_score) {
    m_sensitivity_score = sensitivity_score;
    m_sensitivity_score_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_sensitivity_score_Set() const{
    return m_sensitivity_score_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_sensitivity_score_Valid() const{
    return m_sensitivity_score_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getState() const {
    return m_state;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getTableId() const {
    return m_table_id;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QString OAIGooglePrivacyDlpV2TableDataProfile::getTableSizeBytes() const {
    return m_table_size_bytes;
}
void OAIGooglePrivacyDlpV2TableDataProfile::setTableSizeBytes(const QString &table_size_bytes) {
    m_table_size_bytes = table_size_bytes;
    m_table_size_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_table_size_bytes_Set() const{
    return m_table_size_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::is_table_size_bytes_Valid() const{
    return m_table_size_bytes_isValid;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_risk_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_last_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_data_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TableDataProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
