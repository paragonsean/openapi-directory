/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.h
 *
 * Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the &#x60;ReidentifyContent&#x60; API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
 */

#ifndef OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_H
#define OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2CryptoKey.h"
#include "OAIGooglePrivacyDlpV2FieldId.h"
#include "OAIGooglePrivacyDlpV2InfoType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2FieldId;
class OAIGooglePrivacyDlpV2CryptoKey;
class OAIGooglePrivacyDlpV2InfoType;

class OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig();
    OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(QString json);
    ~OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommonAlphabet() const;
    void setCommonAlphabet(const QString &common_alphabet);
    bool is_common_alphabet_Set() const;
    bool is_common_alphabet_Valid() const;

    OAIGooglePrivacyDlpV2FieldId getContext() const;
    void setContext(const OAIGooglePrivacyDlpV2FieldId &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    OAIGooglePrivacyDlpV2CryptoKey getCryptoKey() const;
    void setCryptoKey(const OAIGooglePrivacyDlpV2CryptoKey &crypto_key);
    bool is_crypto_key_Set() const;
    bool is_crypto_key_Valid() const;

    QString getCustomAlphabet() const;
    void setCustomAlphabet(const QString &custom_alphabet);
    bool is_custom_alphabet_Set() const;
    bool is_custom_alphabet_Valid() const;

    qint32 getRadix() const;
    void setRadix(const qint32 &radix);
    bool is_radix_Set() const;
    bool is_radix_Valid() const;

    OAIGooglePrivacyDlpV2InfoType getSurrogateInfoType() const;
    void setSurrogateInfoType(const OAIGooglePrivacyDlpV2InfoType &surrogate_info_type);
    bool is_surrogate_info_type_Set() const;
    bool is_surrogate_info_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_common_alphabet;
    bool m_common_alphabet_isSet;
    bool m_common_alphabet_isValid;

    OAIGooglePrivacyDlpV2FieldId m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    OAIGooglePrivacyDlpV2CryptoKey m_crypto_key;
    bool m_crypto_key_isSet;
    bool m_crypto_key_isValid;

    QString m_custom_alphabet;
    bool m_custom_alphabet_isSet;
    bool m_custom_alphabet_isValid;

    qint32 m_radix;
    bool m_radix_isSet;
    bool m_radix_isValid;

    OAIGooglePrivacyDlpV2InfoType m_surrogate_info_type;
    bool m_surrogate_info_type_isSet;
    bool m_surrogate_info_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig)

#endif // OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_H
