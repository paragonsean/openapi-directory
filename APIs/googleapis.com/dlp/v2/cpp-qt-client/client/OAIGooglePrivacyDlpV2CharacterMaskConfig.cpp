/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CharacterMaskConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CharacterMaskConfig::OAIGooglePrivacyDlpV2CharacterMaskConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CharacterMaskConfig::OAIGooglePrivacyDlpV2CharacterMaskConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CharacterMaskConfig::~OAIGooglePrivacyDlpV2CharacterMaskConfig() {}

void OAIGooglePrivacyDlpV2CharacterMaskConfig::initializeModel() {

    m_characters_to_ignore_isSet = false;
    m_characters_to_ignore_isValid = false;

    m_masking_character_isSet = false;
    m_masking_character_isValid = false;

    m_number_to_mask_isSet = false;
    m_number_to_mask_isValid = false;

    m_reverse_order_isSet = false;
    m_reverse_order_isValid = false;
}

void OAIGooglePrivacyDlpV2CharacterMaskConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CharacterMaskConfig::fromJsonObject(QJsonObject json) {

    m_characters_to_ignore_isValid = ::OpenAPI::fromJsonValue(m_characters_to_ignore, json[QString("charactersToIgnore")]);
    m_characters_to_ignore_isSet = !json[QString("charactersToIgnore")].isNull() && m_characters_to_ignore_isValid;

    m_masking_character_isValid = ::OpenAPI::fromJsonValue(m_masking_character, json[QString("maskingCharacter")]);
    m_masking_character_isSet = !json[QString("maskingCharacter")].isNull() && m_masking_character_isValid;

    m_number_to_mask_isValid = ::OpenAPI::fromJsonValue(m_number_to_mask, json[QString("numberToMask")]);
    m_number_to_mask_isSet = !json[QString("numberToMask")].isNull() && m_number_to_mask_isValid;

    m_reverse_order_isValid = ::OpenAPI::fromJsonValue(m_reverse_order, json[QString("reverseOrder")]);
    m_reverse_order_isSet = !json[QString("reverseOrder")].isNull() && m_reverse_order_isValid;
}

QString OAIGooglePrivacyDlpV2CharacterMaskConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CharacterMaskConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_characters_to_ignore.size() > 0) {
        obj.insert(QString("charactersToIgnore"), ::OpenAPI::toJsonValue(m_characters_to_ignore));
    }
    if (m_masking_character_isSet) {
        obj.insert(QString("maskingCharacter"), ::OpenAPI::toJsonValue(m_masking_character));
    }
    if (m_number_to_mask_isSet) {
        obj.insert(QString("numberToMask"), ::OpenAPI::toJsonValue(m_number_to_mask));
    }
    if (m_reverse_order_isSet) {
        obj.insert(QString("reverseOrder"), ::OpenAPI::toJsonValue(m_reverse_order));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2CharsToIgnore> OAIGooglePrivacyDlpV2CharacterMaskConfig::getCharactersToIgnore() const {
    return m_characters_to_ignore;
}
void OAIGooglePrivacyDlpV2CharacterMaskConfig::setCharactersToIgnore(const QList<OAIGooglePrivacyDlpV2CharsToIgnore> &characters_to_ignore) {
    m_characters_to_ignore = characters_to_ignore;
    m_characters_to_ignore_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_characters_to_ignore_Set() const{
    return m_characters_to_ignore_isSet;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_characters_to_ignore_Valid() const{
    return m_characters_to_ignore_isValid;
}

QString OAIGooglePrivacyDlpV2CharacterMaskConfig::getMaskingCharacter() const {
    return m_masking_character;
}
void OAIGooglePrivacyDlpV2CharacterMaskConfig::setMaskingCharacter(const QString &masking_character) {
    m_masking_character = masking_character;
    m_masking_character_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_masking_character_Set() const{
    return m_masking_character_isSet;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_masking_character_Valid() const{
    return m_masking_character_isValid;
}

qint32 OAIGooglePrivacyDlpV2CharacterMaskConfig::getNumberToMask() const {
    return m_number_to_mask;
}
void OAIGooglePrivacyDlpV2CharacterMaskConfig::setNumberToMask(const qint32 &number_to_mask) {
    m_number_to_mask = number_to_mask;
    m_number_to_mask_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_number_to_mask_Set() const{
    return m_number_to_mask_isSet;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_number_to_mask_Valid() const{
    return m_number_to_mask_isValid;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::isReverseOrder() const {
    return m_reverse_order;
}
void OAIGooglePrivacyDlpV2CharacterMaskConfig::setReverseOrder(const bool &reverse_order) {
    m_reverse_order = reverse_order;
    m_reverse_order_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_reverse_order_Set() const{
    return m_reverse_order_isSet;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::is_reverse_order_Valid() const{
    return m_reverse_order_isValid;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_characters_to_ignore.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_masking_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CharacterMaskConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
