/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::~OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest() {}

void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::initializeModel() {

    m_deidentify_template_isSet = false;
    m_deidentify_template_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;
}

void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::fromJsonObject(QJsonObject json) {

    m_deidentify_template_isValid = ::OpenAPI::fromJsonValue(m_deidentify_template, json[QString("deidentifyTemplate")]);
    m_deidentify_template_isSet = !json[QString("deidentifyTemplate")].isNull() && m_deidentify_template_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("templateId")]);
    m_template_id_isSet = !json[QString("templateId")].isNull() && m_template_id_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_deidentify_template.isSet()) {
        obj.insert(QString("deidentifyTemplate"), ::OpenAPI::toJsonValue(m_deidentify_template));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("templateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DeidentifyTemplate OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::getDeidentifyTemplate() const {
    return m_deidentify_template;
}
void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::setDeidentifyTemplate(const OAIGooglePrivacyDlpV2DeidentifyTemplate &deidentify_template) {
    m_deidentify_template = deidentify_template;
    m_deidentify_template_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_deidentify_template_Set() const{
    return m_deidentify_template_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_deidentify_template_Valid() const{
    return m_deidentify_template_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::getLocationId() const {
    return m_location_id;
}
void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::getTemplateId() const {
    return m_template_id;
}
void OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::is_template_id_Valid() const{
    return m_template_id_isValid;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deidentify_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
