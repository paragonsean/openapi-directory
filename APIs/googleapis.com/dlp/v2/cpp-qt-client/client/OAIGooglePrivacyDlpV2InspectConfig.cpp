/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InspectConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InspectConfig::OAIGooglePrivacyDlpV2InspectConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InspectConfig::OAIGooglePrivacyDlpV2InspectConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InspectConfig::~OAIGooglePrivacyDlpV2InspectConfig() {}

void OAIGooglePrivacyDlpV2InspectConfig::initializeModel() {

    m_content_options_isSet = false;
    m_content_options_isValid = false;

    m_custom_info_types_isSet = false;
    m_custom_info_types_isValid = false;

    m_exclude_info_types_isSet = false;
    m_exclude_info_types_isValid = false;

    m_include_quote_isSet = false;
    m_include_quote_isValid = false;

    m_info_types_isSet = false;
    m_info_types_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_min_likelihood_isSet = false;
    m_min_likelihood_isValid = false;

    m_min_likelihood_per_info_type_isSet = false;
    m_min_likelihood_per_info_type_isValid = false;

    m_rule_set_isSet = false;
    m_rule_set_isValid = false;
}

void OAIGooglePrivacyDlpV2InspectConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InspectConfig::fromJsonObject(QJsonObject json) {

    m_content_options_isValid = ::OpenAPI::fromJsonValue(m_content_options, json[QString("contentOptions")]);
    m_content_options_isSet = !json[QString("contentOptions")].isNull() && m_content_options_isValid;

    m_custom_info_types_isValid = ::OpenAPI::fromJsonValue(m_custom_info_types, json[QString("customInfoTypes")]);
    m_custom_info_types_isSet = !json[QString("customInfoTypes")].isNull() && m_custom_info_types_isValid;

    m_exclude_info_types_isValid = ::OpenAPI::fromJsonValue(m_exclude_info_types, json[QString("excludeInfoTypes")]);
    m_exclude_info_types_isSet = !json[QString("excludeInfoTypes")].isNull() && m_exclude_info_types_isValid;

    m_include_quote_isValid = ::OpenAPI::fromJsonValue(m_include_quote, json[QString("includeQuote")]);
    m_include_quote_isSet = !json[QString("includeQuote")].isNull() && m_include_quote_isValid;

    m_info_types_isValid = ::OpenAPI::fromJsonValue(m_info_types, json[QString("infoTypes")]);
    m_info_types_isSet = !json[QString("infoTypes")].isNull() && m_info_types_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_min_likelihood_isValid = ::OpenAPI::fromJsonValue(m_min_likelihood, json[QString("minLikelihood")]);
    m_min_likelihood_isSet = !json[QString("minLikelihood")].isNull() && m_min_likelihood_isValid;

    m_min_likelihood_per_info_type_isValid = ::OpenAPI::fromJsonValue(m_min_likelihood_per_info_type, json[QString("minLikelihoodPerInfoType")]);
    m_min_likelihood_per_info_type_isSet = !json[QString("minLikelihoodPerInfoType")].isNull() && m_min_likelihood_per_info_type_isValid;

    m_rule_set_isValid = ::OpenAPI::fromJsonValue(m_rule_set, json[QString("ruleSet")]);
    m_rule_set_isSet = !json[QString("ruleSet")].isNull() && m_rule_set_isValid;
}

QString OAIGooglePrivacyDlpV2InspectConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InspectConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_content_options.size() > 0) {
        obj.insert(QString("contentOptions"), ::OpenAPI::toJsonValue(m_content_options));
    }
    if (m_custom_info_types.size() > 0) {
        obj.insert(QString("customInfoTypes"), ::OpenAPI::toJsonValue(m_custom_info_types));
    }
    if (m_exclude_info_types_isSet) {
        obj.insert(QString("excludeInfoTypes"), ::OpenAPI::toJsonValue(m_exclude_info_types));
    }
    if (m_include_quote_isSet) {
        obj.insert(QString("includeQuote"), ::OpenAPI::toJsonValue(m_include_quote));
    }
    if (m_info_types.size() > 0) {
        obj.insert(QString("infoTypes"), ::OpenAPI::toJsonValue(m_info_types));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_min_likelihood_isSet) {
        obj.insert(QString("minLikelihood"), ::OpenAPI::toJsonValue(m_min_likelihood));
    }
    if (m_min_likelihood_per_info_type.size() > 0) {
        obj.insert(QString("minLikelihoodPerInfoType"), ::OpenAPI::toJsonValue(m_min_likelihood_per_info_type));
    }
    if (m_rule_set.size() > 0) {
        obj.insert(QString("ruleSet"), ::OpenAPI::toJsonValue(m_rule_set));
    }
    return obj;
}

QList<QString> OAIGooglePrivacyDlpV2InspectConfig::getContentOptions() const {
    return m_content_options;
}
void OAIGooglePrivacyDlpV2InspectConfig::setContentOptions(const QList<QString> &content_options) {
    m_content_options = content_options;
    m_content_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_content_options_Set() const{
    return m_content_options_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_content_options_Valid() const{
    return m_content_options_isValid;
}

QList<OAIGooglePrivacyDlpV2CustomInfoType> OAIGooglePrivacyDlpV2InspectConfig::getCustomInfoTypes() const {
    return m_custom_info_types;
}
void OAIGooglePrivacyDlpV2InspectConfig::setCustomInfoTypes(const QList<OAIGooglePrivacyDlpV2CustomInfoType> &custom_info_types) {
    m_custom_info_types = custom_info_types;
    m_custom_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_custom_info_types_Set() const{
    return m_custom_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_custom_info_types_Valid() const{
    return m_custom_info_types_isValid;
}

bool OAIGooglePrivacyDlpV2InspectConfig::isExcludeInfoTypes() const {
    return m_exclude_info_types;
}
void OAIGooglePrivacyDlpV2InspectConfig::setExcludeInfoTypes(const bool &exclude_info_types) {
    m_exclude_info_types = exclude_info_types;
    m_exclude_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_exclude_info_types_Set() const{
    return m_exclude_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_exclude_info_types_Valid() const{
    return m_exclude_info_types_isValid;
}

bool OAIGooglePrivacyDlpV2InspectConfig::isIncludeQuote() const {
    return m_include_quote;
}
void OAIGooglePrivacyDlpV2InspectConfig::setIncludeQuote(const bool &include_quote) {
    m_include_quote = include_quote;
    m_include_quote_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_include_quote_Set() const{
    return m_include_quote_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_include_quote_Valid() const{
    return m_include_quote_isValid;
}

QList<OAIGooglePrivacyDlpV2InfoType> OAIGooglePrivacyDlpV2InspectConfig::getInfoTypes() const {
    return m_info_types;
}
void OAIGooglePrivacyDlpV2InspectConfig::setInfoTypes(const QList<OAIGooglePrivacyDlpV2InfoType> &info_types) {
    m_info_types = info_types;
    m_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_info_types_Set() const{
    return m_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_info_types_Valid() const{
    return m_info_types_isValid;
}

OAIGooglePrivacyDlpV2FindingLimits OAIGooglePrivacyDlpV2InspectConfig::getLimits() const {
    return m_limits;
}
void OAIGooglePrivacyDlpV2InspectConfig::setLimits(const OAIGooglePrivacyDlpV2FindingLimits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_limits_Valid() const{
    return m_limits_isValid;
}

QString OAIGooglePrivacyDlpV2InspectConfig::getMinLikelihood() const {
    return m_min_likelihood;
}
void OAIGooglePrivacyDlpV2InspectConfig::setMinLikelihood(const QString &min_likelihood) {
    m_min_likelihood = min_likelihood;
    m_min_likelihood_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_min_likelihood_Set() const{
    return m_min_likelihood_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_min_likelihood_Valid() const{
    return m_min_likelihood_isValid;
}

QList<OAIGooglePrivacyDlpV2InfoTypeLikelihood> OAIGooglePrivacyDlpV2InspectConfig::getMinLikelihoodPerInfoType() const {
    return m_min_likelihood_per_info_type;
}
void OAIGooglePrivacyDlpV2InspectConfig::setMinLikelihoodPerInfoType(const QList<OAIGooglePrivacyDlpV2InfoTypeLikelihood> &min_likelihood_per_info_type) {
    m_min_likelihood_per_info_type = min_likelihood_per_info_type;
    m_min_likelihood_per_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_min_likelihood_per_info_type_Set() const{
    return m_min_likelihood_per_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_min_likelihood_per_info_type_Valid() const{
    return m_min_likelihood_per_info_type_isValid;
}

QList<OAIGooglePrivacyDlpV2InspectionRuleSet> OAIGooglePrivacyDlpV2InspectConfig::getRuleSet() const {
    return m_rule_set;
}
void OAIGooglePrivacyDlpV2InspectConfig::setRuleSet(const QList<OAIGooglePrivacyDlpV2InspectionRuleSet> &rule_set) {
    m_rule_set = rule_set;
    m_rule_set_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_rule_set_Set() const{
    return m_rule_set_isSet;
}

bool OAIGooglePrivacyDlpV2InspectConfig::is_rule_set_Valid() const{
    return m_rule_set_isValid;
}

bool OAIGooglePrivacyDlpV2InspectConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_info_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likelihood_per_info_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InspectConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
