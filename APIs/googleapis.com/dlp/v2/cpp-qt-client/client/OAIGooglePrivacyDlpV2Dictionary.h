/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2Dictionary.h
 *
 * Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase \&quot;Sam Johnson\&quot; will match all three phrases \&quot;sam johnson\&quot;, \&quot;Sam, Johnson\&quot;, and \&quot;Sam (Johnson)\&quot;. Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word \&quot;jen\&quot; will match the first three letters of the text \&quot;jen123\&quot; but will return no matches for \&quot;jennifer\&quot;. Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/sensitive-data-protection/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using &#x60;LargeCustomDictionaryConfig&#x60; in the &#x60;StoredInfoType&#x60; API.
 */

#ifndef OAIGooglePrivacyDlpV2Dictionary_H
#define OAIGooglePrivacyDlpV2Dictionary_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2CloudStoragePath.h"
#include "OAIGooglePrivacyDlpV2WordList.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2CloudStoragePath;
class OAIGooglePrivacyDlpV2WordList;

class OAIGooglePrivacyDlpV2Dictionary : public OAIObject {
public:
    OAIGooglePrivacyDlpV2Dictionary();
    OAIGooglePrivacyDlpV2Dictionary(QString json);
    ~OAIGooglePrivacyDlpV2Dictionary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2CloudStoragePath getCloudStoragePath() const;
    void setCloudStoragePath(const OAIGooglePrivacyDlpV2CloudStoragePath &cloud_storage_path);
    bool is_cloud_storage_path_Set() const;
    bool is_cloud_storage_path_Valid() const;

    OAIGooglePrivacyDlpV2WordList getWordList() const;
    void setWordList(const OAIGooglePrivacyDlpV2WordList &word_list);
    bool is_word_list_Set() const;
    bool is_word_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2CloudStoragePath m_cloud_storage_path;
    bool m_cloud_storage_path_isSet;
    bool m_cloud_storage_path_isValid;

    OAIGooglePrivacyDlpV2WordList m_word_list;
    bool m_word_list_isSet;
    bool m_word_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2Dictionary)

#endif // OAIGooglePrivacyDlpV2Dictionary_H
