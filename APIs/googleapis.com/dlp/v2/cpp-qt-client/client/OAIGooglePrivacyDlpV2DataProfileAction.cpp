/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DataProfileAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DataProfileAction::OAIGooglePrivacyDlpV2DataProfileAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DataProfileAction::OAIGooglePrivacyDlpV2DataProfileAction() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DataProfileAction::~OAIGooglePrivacyDlpV2DataProfileAction() {}

void OAIGooglePrivacyDlpV2DataProfileAction::initializeModel() {

    m_export_data_isSet = false;
    m_export_data_isValid = false;

    m_pub_sub_notification_isSet = false;
    m_pub_sub_notification_isValid = false;
}

void OAIGooglePrivacyDlpV2DataProfileAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DataProfileAction::fromJsonObject(QJsonObject json) {

    m_export_data_isValid = ::OpenAPI::fromJsonValue(m_export_data, json[QString("exportData")]);
    m_export_data_isSet = !json[QString("exportData")].isNull() && m_export_data_isValid;

    m_pub_sub_notification_isValid = ::OpenAPI::fromJsonValue(m_pub_sub_notification, json[QString("pubSubNotification")]);
    m_pub_sub_notification_isSet = !json[QString("pubSubNotification")].isNull() && m_pub_sub_notification_isValid;
}

QString OAIGooglePrivacyDlpV2DataProfileAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DataProfileAction::asJsonObject() const {
    QJsonObject obj;
    if (m_export_data.isSet()) {
        obj.insert(QString("exportData"), ::OpenAPI::toJsonValue(m_export_data));
    }
    if (m_pub_sub_notification.isSet()) {
        obj.insert(QString("pubSubNotification"), ::OpenAPI::toJsonValue(m_pub_sub_notification));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Export OAIGooglePrivacyDlpV2DataProfileAction::getExportData() const {
    return m_export_data;
}
void OAIGooglePrivacyDlpV2DataProfileAction::setExportData(const OAIGooglePrivacyDlpV2Export &export_data) {
    m_export_data = export_data;
    m_export_data_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::is_export_data_Set() const{
    return m_export_data_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::is_export_data_Valid() const{
    return m_export_data_isValid;
}

OAIGooglePrivacyDlpV2PubSubNotification OAIGooglePrivacyDlpV2DataProfileAction::getPubSubNotification() const {
    return m_pub_sub_notification;
}
void OAIGooglePrivacyDlpV2DataProfileAction::setPubSubNotification(const OAIGooglePrivacyDlpV2PubSubNotification &pub_sub_notification) {
    m_pub_sub_notification = pub_sub_notification;
    m_pub_sub_notification_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::is_pub_sub_notification_Set() const{
    return m_pub_sub_notification_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::is_pub_sub_notification_Valid() const{
    return m_pub_sub_notification_isValid;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_sub_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DataProfileAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
