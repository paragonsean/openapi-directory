/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2LikelihoodAdjustment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2LikelihoodAdjustment::OAIGooglePrivacyDlpV2LikelihoodAdjustment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2LikelihoodAdjustment::OAIGooglePrivacyDlpV2LikelihoodAdjustment() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2LikelihoodAdjustment::~OAIGooglePrivacyDlpV2LikelihoodAdjustment() {}

void OAIGooglePrivacyDlpV2LikelihoodAdjustment::initializeModel() {

    m_fixed_likelihood_isSet = false;
    m_fixed_likelihood_isValid = false;

    m_relative_likelihood_isSet = false;
    m_relative_likelihood_isValid = false;
}

void OAIGooglePrivacyDlpV2LikelihoodAdjustment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2LikelihoodAdjustment::fromJsonObject(QJsonObject json) {

    m_fixed_likelihood_isValid = ::OpenAPI::fromJsonValue(m_fixed_likelihood, json[QString("fixedLikelihood")]);
    m_fixed_likelihood_isSet = !json[QString("fixedLikelihood")].isNull() && m_fixed_likelihood_isValid;

    m_relative_likelihood_isValid = ::OpenAPI::fromJsonValue(m_relative_likelihood, json[QString("relativeLikelihood")]);
    m_relative_likelihood_isSet = !json[QString("relativeLikelihood")].isNull() && m_relative_likelihood_isValid;
}

QString OAIGooglePrivacyDlpV2LikelihoodAdjustment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2LikelihoodAdjustment::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_likelihood_isSet) {
        obj.insert(QString("fixedLikelihood"), ::OpenAPI::toJsonValue(m_fixed_likelihood));
    }
    if (m_relative_likelihood_isSet) {
        obj.insert(QString("relativeLikelihood"), ::OpenAPI::toJsonValue(m_relative_likelihood));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2LikelihoodAdjustment::getFixedLikelihood() const {
    return m_fixed_likelihood;
}
void OAIGooglePrivacyDlpV2LikelihoodAdjustment::setFixedLikelihood(const QString &fixed_likelihood) {
    m_fixed_likelihood = fixed_likelihood;
    m_fixed_likelihood_isSet = true;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::is_fixed_likelihood_Set() const{
    return m_fixed_likelihood_isSet;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::is_fixed_likelihood_Valid() const{
    return m_fixed_likelihood_isValid;
}

qint32 OAIGooglePrivacyDlpV2LikelihoodAdjustment::getRelativeLikelihood() const {
    return m_relative_likelihood;
}
void OAIGooglePrivacyDlpV2LikelihoodAdjustment::setRelativeLikelihood(const qint32 &relative_likelihood) {
    m_relative_likelihood = relative_likelihood;
    m_relative_likelihood_isSet = true;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::is_relative_likelihood_Set() const{
    return m_relative_likelihood_isSet;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::is_relative_likelihood_Valid() const{
    return m_relative_likelihood_isValid;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2LikelihoodAdjustment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
