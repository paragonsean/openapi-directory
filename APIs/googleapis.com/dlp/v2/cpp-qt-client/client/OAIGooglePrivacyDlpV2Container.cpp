/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Container.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Container::OAIGooglePrivacyDlpV2Container(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Container::OAIGooglePrivacyDlpV2Container() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Container::~OAIGooglePrivacyDlpV2Container() {}

void OAIGooglePrivacyDlpV2Container::initializeModel() {

    m_full_path_isSet = false;
    m_full_path_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;

    m_root_path_isSet = false;
    m_root_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGooglePrivacyDlpV2Container::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Container::fromJsonObject(QJsonObject json) {

    m_full_path_isValid = ::OpenAPI::fromJsonValue(m_full_path, json[QString("fullPath")]);
    m_full_path_isSet = !json[QString("fullPath")].isNull() && m_full_path_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;

    m_root_path_isValid = ::OpenAPI::fromJsonValue(m_root_path, json[QString("rootPath")]);
    m_root_path_isSet = !json[QString("rootPath")].isNull() && m_root_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGooglePrivacyDlpV2Container::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Container::asJsonObject() const {
    QJsonObject obj;
    if (m_full_path_isSet) {
        obj.insert(QString("fullPath"), ::OpenAPI::toJsonValue(m_full_path));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    if (m_root_path_isSet) {
        obj.insert(QString("rootPath"), ::OpenAPI::toJsonValue(m_root_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2Container::getFullPath() const {
    return m_full_path;
}
void OAIGooglePrivacyDlpV2Container::setFullPath(const QString &full_path) {
    m_full_path = full_path;
    m_full_path_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_full_path_Set() const{
    return m_full_path_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_full_path_Valid() const{
    return m_full_path_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getProjectId() const {
    return m_project_id;
}
void OAIGooglePrivacyDlpV2Container::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getRelativePath() const {
    return m_relative_path;
}
void OAIGooglePrivacyDlpV2Container::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getRootPath() const {
    return m_root_path;
}
void OAIGooglePrivacyDlpV2Container::setRootPath(const QString &root_path) {
    m_root_path = root_path;
    m_root_path_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_root_path_Set() const{
    return m_root_path_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_root_path_Valid() const{
    return m_root_path_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getType() const {
    return m_type;
}
void OAIGooglePrivacyDlpV2Container::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getUpdateTime() const {
    return m_update_time;
}
void OAIGooglePrivacyDlpV2Container::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIGooglePrivacyDlpV2Container::getVersion() const {
    return m_version;
}
void OAIGooglePrivacyDlpV2Container::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGooglePrivacyDlpV2Container::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGooglePrivacyDlpV2Container::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGooglePrivacyDlpV2Container::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Container::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
