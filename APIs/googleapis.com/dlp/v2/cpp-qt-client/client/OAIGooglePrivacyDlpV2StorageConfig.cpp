/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2StorageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2StorageConfig::OAIGooglePrivacyDlpV2StorageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2StorageConfig::OAIGooglePrivacyDlpV2StorageConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2StorageConfig::~OAIGooglePrivacyDlpV2StorageConfig() {}

void OAIGooglePrivacyDlpV2StorageConfig::initializeModel() {

    m_big_query_options_isSet = false;
    m_big_query_options_isValid = false;

    m_cloud_storage_options_isSet = false;
    m_cloud_storage_options_isValid = false;

    m_datastore_options_isSet = false;
    m_datastore_options_isValid = false;

    m_hybrid_options_isSet = false;
    m_hybrid_options_isValid = false;

    m_timespan_config_isSet = false;
    m_timespan_config_isValid = false;
}

void OAIGooglePrivacyDlpV2StorageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2StorageConfig::fromJsonObject(QJsonObject json) {

    m_big_query_options_isValid = ::OpenAPI::fromJsonValue(m_big_query_options, json[QString("bigQueryOptions")]);
    m_big_query_options_isSet = !json[QString("bigQueryOptions")].isNull() && m_big_query_options_isValid;

    m_cloud_storage_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_storage_options, json[QString("cloudStorageOptions")]);
    m_cloud_storage_options_isSet = !json[QString("cloudStorageOptions")].isNull() && m_cloud_storage_options_isValid;

    m_datastore_options_isValid = ::OpenAPI::fromJsonValue(m_datastore_options, json[QString("datastoreOptions")]);
    m_datastore_options_isSet = !json[QString("datastoreOptions")].isNull() && m_datastore_options_isValid;

    m_hybrid_options_isValid = ::OpenAPI::fromJsonValue(m_hybrid_options, json[QString("hybridOptions")]);
    m_hybrid_options_isSet = !json[QString("hybridOptions")].isNull() && m_hybrid_options_isValid;

    m_timespan_config_isValid = ::OpenAPI::fromJsonValue(m_timespan_config, json[QString("timespanConfig")]);
    m_timespan_config_isSet = !json[QString("timespanConfig")].isNull() && m_timespan_config_isValid;
}

QString OAIGooglePrivacyDlpV2StorageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2StorageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_options.isSet()) {
        obj.insert(QString("bigQueryOptions"), ::OpenAPI::toJsonValue(m_big_query_options));
    }
    if (m_cloud_storage_options.isSet()) {
        obj.insert(QString("cloudStorageOptions"), ::OpenAPI::toJsonValue(m_cloud_storage_options));
    }
    if (m_datastore_options.isSet()) {
        obj.insert(QString("datastoreOptions"), ::OpenAPI::toJsonValue(m_datastore_options));
    }
    if (m_hybrid_options.isSet()) {
        obj.insert(QString("hybridOptions"), ::OpenAPI::toJsonValue(m_hybrid_options));
    }
    if (m_timespan_config.isSet()) {
        obj.insert(QString("timespanConfig"), ::OpenAPI::toJsonValue(m_timespan_config));
    }
    return obj;
}

OAIGooglePrivacyDlpV2BigQueryOptions OAIGooglePrivacyDlpV2StorageConfig::getBigQueryOptions() const {
    return m_big_query_options;
}
void OAIGooglePrivacyDlpV2StorageConfig::setBigQueryOptions(const OAIGooglePrivacyDlpV2BigQueryOptions &big_query_options) {
    m_big_query_options = big_query_options;
    m_big_query_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_big_query_options_Set() const{
    return m_big_query_options_isSet;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_big_query_options_Valid() const{
    return m_big_query_options_isValid;
}

OAIGooglePrivacyDlpV2CloudStorageOptions OAIGooglePrivacyDlpV2StorageConfig::getCloudStorageOptions() const {
    return m_cloud_storage_options;
}
void OAIGooglePrivacyDlpV2StorageConfig::setCloudStorageOptions(const OAIGooglePrivacyDlpV2CloudStorageOptions &cloud_storage_options) {
    m_cloud_storage_options = cloud_storage_options;
    m_cloud_storage_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_cloud_storage_options_Set() const{
    return m_cloud_storage_options_isSet;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_cloud_storage_options_Valid() const{
    return m_cloud_storage_options_isValid;
}

OAIGooglePrivacyDlpV2DatastoreOptions OAIGooglePrivacyDlpV2StorageConfig::getDatastoreOptions() const {
    return m_datastore_options;
}
void OAIGooglePrivacyDlpV2StorageConfig::setDatastoreOptions(const OAIGooglePrivacyDlpV2DatastoreOptions &datastore_options) {
    m_datastore_options = datastore_options;
    m_datastore_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_datastore_options_Set() const{
    return m_datastore_options_isSet;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_datastore_options_Valid() const{
    return m_datastore_options_isValid;
}

OAIGooglePrivacyDlpV2HybridOptions OAIGooglePrivacyDlpV2StorageConfig::getHybridOptions() const {
    return m_hybrid_options;
}
void OAIGooglePrivacyDlpV2StorageConfig::setHybridOptions(const OAIGooglePrivacyDlpV2HybridOptions &hybrid_options) {
    m_hybrid_options = hybrid_options;
    m_hybrid_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_hybrid_options_Set() const{
    return m_hybrid_options_isSet;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_hybrid_options_Valid() const{
    return m_hybrid_options_isValid;
}

OAIGooglePrivacyDlpV2TimespanConfig OAIGooglePrivacyDlpV2StorageConfig::getTimespanConfig() const {
    return m_timespan_config;
}
void OAIGooglePrivacyDlpV2StorageConfig::setTimespanConfig(const OAIGooglePrivacyDlpV2TimespanConfig &timespan_config) {
    m_timespan_config = timespan_config;
    m_timespan_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_timespan_config_Set() const{
    return m_timespan_config_isSet;
}

bool OAIGooglePrivacyDlpV2StorageConfig::is_timespan_config_Valid() const{
    return m_timespan_config_isValid;
}

bool OAIGooglePrivacyDlpV2StorageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_storage_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hybrid_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespan_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2StorageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
