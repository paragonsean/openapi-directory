/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Result::OAIGooglePrivacyDlpV2Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Result::OAIGooglePrivacyDlpV2Result() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Result::~OAIGooglePrivacyDlpV2Result() {}

void OAIGooglePrivacyDlpV2Result::initializeModel() {

    m_hybrid_stats_isSet = false;
    m_hybrid_stats_isValid = false;

    m_info_type_stats_isSet = false;
    m_info_type_stats_isValid = false;

    m_processed_bytes_isSet = false;
    m_processed_bytes_isValid = false;

    m_total_estimated_bytes_isSet = false;
    m_total_estimated_bytes_isValid = false;
}

void OAIGooglePrivacyDlpV2Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Result::fromJsonObject(QJsonObject json) {

    m_hybrid_stats_isValid = ::OpenAPI::fromJsonValue(m_hybrid_stats, json[QString("hybridStats")]);
    m_hybrid_stats_isSet = !json[QString("hybridStats")].isNull() && m_hybrid_stats_isValid;

    m_info_type_stats_isValid = ::OpenAPI::fromJsonValue(m_info_type_stats, json[QString("infoTypeStats")]);
    m_info_type_stats_isSet = !json[QString("infoTypeStats")].isNull() && m_info_type_stats_isValid;

    m_processed_bytes_isValid = ::OpenAPI::fromJsonValue(m_processed_bytes, json[QString("processedBytes")]);
    m_processed_bytes_isSet = !json[QString("processedBytes")].isNull() && m_processed_bytes_isValid;

    m_total_estimated_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_bytes, json[QString("totalEstimatedBytes")]);
    m_total_estimated_bytes_isSet = !json[QString("totalEstimatedBytes")].isNull() && m_total_estimated_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Result::asJsonObject() const {
    QJsonObject obj;
    if (m_hybrid_stats.isSet()) {
        obj.insert(QString("hybridStats"), ::OpenAPI::toJsonValue(m_hybrid_stats));
    }
    if (m_info_type_stats.size() > 0) {
        obj.insert(QString("infoTypeStats"), ::OpenAPI::toJsonValue(m_info_type_stats));
    }
    if (m_processed_bytes_isSet) {
        obj.insert(QString("processedBytes"), ::OpenAPI::toJsonValue(m_processed_bytes));
    }
    if (m_total_estimated_bytes_isSet) {
        obj.insert(QString("totalEstimatedBytes"), ::OpenAPI::toJsonValue(m_total_estimated_bytes));
    }
    return obj;
}

OAIGooglePrivacyDlpV2HybridInspectStatistics OAIGooglePrivacyDlpV2Result::getHybridStats() const {
    return m_hybrid_stats;
}
void OAIGooglePrivacyDlpV2Result::setHybridStats(const OAIGooglePrivacyDlpV2HybridInspectStatistics &hybrid_stats) {
    m_hybrid_stats = hybrid_stats;
    m_hybrid_stats_isSet = true;
}

bool OAIGooglePrivacyDlpV2Result::is_hybrid_stats_Set() const{
    return m_hybrid_stats_isSet;
}

bool OAIGooglePrivacyDlpV2Result::is_hybrid_stats_Valid() const{
    return m_hybrid_stats_isValid;
}

QList<OAIGooglePrivacyDlpV2InfoTypeStats> OAIGooglePrivacyDlpV2Result::getInfoTypeStats() const {
    return m_info_type_stats;
}
void OAIGooglePrivacyDlpV2Result::setInfoTypeStats(const QList<OAIGooglePrivacyDlpV2InfoTypeStats> &info_type_stats) {
    m_info_type_stats = info_type_stats;
    m_info_type_stats_isSet = true;
}

bool OAIGooglePrivacyDlpV2Result::is_info_type_stats_Set() const{
    return m_info_type_stats_isSet;
}

bool OAIGooglePrivacyDlpV2Result::is_info_type_stats_Valid() const{
    return m_info_type_stats_isValid;
}

QString OAIGooglePrivacyDlpV2Result::getProcessedBytes() const {
    return m_processed_bytes;
}
void OAIGooglePrivacyDlpV2Result::setProcessedBytes(const QString &processed_bytes) {
    m_processed_bytes = processed_bytes;
    m_processed_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2Result::is_processed_bytes_Set() const{
    return m_processed_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2Result::is_processed_bytes_Valid() const{
    return m_processed_bytes_isValid;
}

QString OAIGooglePrivacyDlpV2Result::getTotalEstimatedBytes() const {
    return m_total_estimated_bytes;
}
void OAIGooglePrivacyDlpV2Result::setTotalEstimatedBytes(const QString &total_estimated_bytes) {
    m_total_estimated_bytes = total_estimated_bytes;
    m_total_estimated_bytes_isSet = true;
}

bool OAIGooglePrivacyDlpV2Result::is_total_estimated_bytes_Set() const{
    return m_total_estimated_bytes_isSet;
}

bool OAIGooglePrivacyDlpV2Result::is_total_estimated_bytes_Valid() const{
    return m_total_estimated_bytes_isValid;
}

bool OAIGooglePrivacyDlpV2Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hybrid_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
