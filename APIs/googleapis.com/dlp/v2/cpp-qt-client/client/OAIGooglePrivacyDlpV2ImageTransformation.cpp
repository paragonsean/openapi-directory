/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2ImageTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2ImageTransformation::OAIGooglePrivacyDlpV2ImageTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2ImageTransformation::OAIGooglePrivacyDlpV2ImageTransformation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2ImageTransformation::~OAIGooglePrivacyDlpV2ImageTransformation() {}

void OAIGooglePrivacyDlpV2ImageTransformation::initializeModel() {

    m_all_info_types_isSet = false;
    m_all_info_types_isValid = false;

    m_all_text_isSet = false;
    m_all_text_isValid = false;

    m_redaction_color_isSet = false;
    m_redaction_color_isValid = false;

    m_selected_info_types_isSet = false;
    m_selected_info_types_isValid = false;
}

void OAIGooglePrivacyDlpV2ImageTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2ImageTransformation::fromJsonObject(QJsonObject json) {

    m_all_info_types_isValid = ::OpenAPI::fromJsonValue(m_all_info_types, json[QString("allInfoTypes")]);
    m_all_info_types_isSet = !json[QString("allInfoTypes")].isNull() && m_all_info_types_isValid;

    m_all_text_isValid = ::OpenAPI::fromJsonValue(m_all_text, json[QString("allText")]);
    m_all_text_isSet = !json[QString("allText")].isNull() && m_all_text_isValid;

    m_redaction_color_isValid = ::OpenAPI::fromJsonValue(m_redaction_color, json[QString("redactionColor")]);
    m_redaction_color_isSet = !json[QString("redactionColor")].isNull() && m_redaction_color_isValid;

    m_selected_info_types_isValid = ::OpenAPI::fromJsonValue(m_selected_info_types, json[QString("selectedInfoTypes")]);
    m_selected_info_types_isSet = !json[QString("selectedInfoTypes")].isNull() && m_selected_info_types_isValid;
}

QString OAIGooglePrivacyDlpV2ImageTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2ImageTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_all_info_types_isSet) {
        obj.insert(QString("allInfoTypes"), ::OpenAPI::toJsonValue(m_all_info_types));
    }
    if (m_all_text_isSet) {
        obj.insert(QString("allText"), ::OpenAPI::toJsonValue(m_all_text));
    }
    if (m_redaction_color.isSet()) {
        obj.insert(QString("redactionColor"), ::OpenAPI::toJsonValue(m_redaction_color));
    }
    if (m_selected_info_types.isSet()) {
        obj.insert(QString("selectedInfoTypes"), ::OpenAPI::toJsonValue(m_selected_info_types));
    }
    return obj;
}

OAIObject OAIGooglePrivacyDlpV2ImageTransformation::getAllInfoTypes() const {
    return m_all_info_types;
}
void OAIGooglePrivacyDlpV2ImageTransformation::setAllInfoTypes(const OAIObject &all_info_types) {
    m_all_info_types = all_info_types;
    m_all_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_all_info_types_Set() const{
    return m_all_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_all_info_types_Valid() const{
    return m_all_info_types_isValid;
}

OAIObject OAIGooglePrivacyDlpV2ImageTransformation::getAllText() const {
    return m_all_text;
}
void OAIGooglePrivacyDlpV2ImageTransformation::setAllText(const OAIObject &all_text) {
    m_all_text = all_text;
    m_all_text_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_all_text_Set() const{
    return m_all_text_isSet;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_all_text_Valid() const{
    return m_all_text_isValid;
}

OAIGooglePrivacyDlpV2Color OAIGooglePrivacyDlpV2ImageTransformation::getRedactionColor() const {
    return m_redaction_color;
}
void OAIGooglePrivacyDlpV2ImageTransformation::setRedactionColor(const OAIGooglePrivacyDlpV2Color &redaction_color) {
    m_redaction_color = redaction_color;
    m_redaction_color_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_redaction_color_Set() const{
    return m_redaction_color_isSet;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_redaction_color_Valid() const{
    return m_redaction_color_isValid;
}

OAIGooglePrivacyDlpV2SelectedInfoTypes OAIGooglePrivacyDlpV2ImageTransformation::getSelectedInfoTypes() const {
    return m_selected_info_types;
}
void OAIGooglePrivacyDlpV2ImageTransformation::setSelectedInfoTypes(const OAIGooglePrivacyDlpV2SelectedInfoTypes &selected_info_types) {
    m_selected_info_types = selected_info_types;
    m_selected_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_selected_info_types_Set() const{
    return m_selected_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::is_selected_info_types_Valid() const{
    return m_selected_info_types_isValid;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_info_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redaction_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_info_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2ImageTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
