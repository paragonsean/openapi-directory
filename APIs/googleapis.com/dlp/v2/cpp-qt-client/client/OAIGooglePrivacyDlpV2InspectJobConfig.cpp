/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InspectJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InspectJobConfig::OAIGooglePrivacyDlpV2InspectJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InspectJobConfig::OAIGooglePrivacyDlpV2InspectJobConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InspectJobConfig::~OAIGooglePrivacyDlpV2InspectJobConfig() {}

void OAIGooglePrivacyDlpV2InspectJobConfig::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_inspect_config_isSet = false;
    m_inspect_config_isValid = false;

    m_inspect_template_name_isSet = false;
    m_inspect_template_name_isValid = false;

    m_storage_config_isSet = false;
    m_storage_config_isValid = false;
}

void OAIGooglePrivacyDlpV2InspectJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InspectJobConfig::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_inspect_config_isValid = ::OpenAPI::fromJsonValue(m_inspect_config, json[QString("inspectConfig")]);
    m_inspect_config_isSet = !json[QString("inspectConfig")].isNull() && m_inspect_config_isValid;

    m_inspect_template_name_isValid = ::OpenAPI::fromJsonValue(m_inspect_template_name, json[QString("inspectTemplateName")]);
    m_inspect_template_name_isSet = !json[QString("inspectTemplateName")].isNull() && m_inspect_template_name_isValid;

    m_storage_config_isValid = ::OpenAPI::fromJsonValue(m_storage_config, json[QString("storageConfig")]);
    m_storage_config_isSet = !json[QString("storageConfig")].isNull() && m_storage_config_isValid;
}

QString OAIGooglePrivacyDlpV2InspectJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InspectJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_inspect_config.isSet()) {
        obj.insert(QString("inspectConfig"), ::OpenAPI::toJsonValue(m_inspect_config));
    }
    if (m_inspect_template_name_isSet) {
        obj.insert(QString("inspectTemplateName"), ::OpenAPI::toJsonValue(m_inspect_template_name));
    }
    if (m_storage_config.isSet()) {
        obj.insert(QString("storageConfig"), ::OpenAPI::toJsonValue(m_storage_config));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2Action> OAIGooglePrivacyDlpV2InspectJobConfig::getActions() const {
    return m_actions;
}
void OAIGooglePrivacyDlpV2InspectJobConfig::setActions(const QList<OAIGooglePrivacyDlpV2Action> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIGooglePrivacyDlpV2InspectConfig OAIGooglePrivacyDlpV2InspectJobConfig::getInspectConfig() const {
    return m_inspect_config;
}
void OAIGooglePrivacyDlpV2InspectJobConfig::setInspectConfig(const OAIGooglePrivacyDlpV2InspectConfig &inspect_config) {
    m_inspect_config = inspect_config;
    m_inspect_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_inspect_config_Set() const{
    return m_inspect_config_isSet;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_inspect_config_Valid() const{
    return m_inspect_config_isValid;
}

QString OAIGooglePrivacyDlpV2InspectJobConfig::getInspectTemplateName() const {
    return m_inspect_template_name;
}
void OAIGooglePrivacyDlpV2InspectJobConfig::setInspectTemplateName(const QString &inspect_template_name) {
    m_inspect_template_name = inspect_template_name;
    m_inspect_template_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_inspect_template_name_Set() const{
    return m_inspect_template_name_isSet;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_inspect_template_name_Valid() const{
    return m_inspect_template_name_isValid;
}

OAIGooglePrivacyDlpV2StorageConfig OAIGooglePrivacyDlpV2InspectJobConfig::getStorageConfig() const {
    return m_storage_config;
}
void OAIGooglePrivacyDlpV2InspectJobConfig::setStorageConfig(const OAIGooglePrivacyDlpV2StorageConfig &storage_config) {
    m_storage_config = storage_config;
    m_storage_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_storage_config_Set() const{
    return m_storage_config_isSet;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::is_storage_config_Valid() const{
    return m_storage_config_isValid;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InspectJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
