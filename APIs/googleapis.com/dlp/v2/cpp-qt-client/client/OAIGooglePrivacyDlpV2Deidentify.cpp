/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Deidentify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Deidentify::OAIGooglePrivacyDlpV2Deidentify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Deidentify::OAIGooglePrivacyDlpV2Deidentify() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Deidentify::~OAIGooglePrivacyDlpV2Deidentify() {}

void OAIGooglePrivacyDlpV2Deidentify::initializeModel() {

    m_cloud_storage_output_isSet = false;
    m_cloud_storage_output_isValid = false;

    m_file_types_to_transform_isSet = false;
    m_file_types_to_transform_isValid = false;

    m_transformation_config_isSet = false;
    m_transformation_config_isValid = false;

    m_transformation_details_storage_config_isSet = false;
    m_transformation_details_storage_config_isValid = false;
}

void OAIGooglePrivacyDlpV2Deidentify::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Deidentify::fromJsonObject(QJsonObject json) {

    m_cloud_storage_output_isValid = ::OpenAPI::fromJsonValue(m_cloud_storage_output, json[QString("cloudStorageOutput")]);
    m_cloud_storage_output_isSet = !json[QString("cloudStorageOutput")].isNull() && m_cloud_storage_output_isValid;

    m_file_types_to_transform_isValid = ::OpenAPI::fromJsonValue(m_file_types_to_transform, json[QString("fileTypesToTransform")]);
    m_file_types_to_transform_isSet = !json[QString("fileTypesToTransform")].isNull() && m_file_types_to_transform_isValid;

    m_transformation_config_isValid = ::OpenAPI::fromJsonValue(m_transformation_config, json[QString("transformationConfig")]);
    m_transformation_config_isSet = !json[QString("transformationConfig")].isNull() && m_transformation_config_isValid;

    m_transformation_details_storage_config_isValid = ::OpenAPI::fromJsonValue(m_transformation_details_storage_config, json[QString("transformationDetailsStorageConfig")]);
    m_transformation_details_storage_config_isSet = !json[QString("transformationDetailsStorageConfig")].isNull() && m_transformation_details_storage_config_isValid;
}

QString OAIGooglePrivacyDlpV2Deidentify::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Deidentify::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_storage_output_isSet) {
        obj.insert(QString("cloudStorageOutput"), ::OpenAPI::toJsonValue(m_cloud_storage_output));
    }
    if (m_file_types_to_transform.size() > 0) {
        obj.insert(QString("fileTypesToTransform"), ::OpenAPI::toJsonValue(m_file_types_to_transform));
    }
    if (m_transformation_config.isSet()) {
        obj.insert(QString("transformationConfig"), ::OpenAPI::toJsonValue(m_transformation_config));
    }
    if (m_transformation_details_storage_config.isSet()) {
        obj.insert(QString("transformationDetailsStorageConfig"), ::OpenAPI::toJsonValue(m_transformation_details_storage_config));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2Deidentify::getCloudStorageOutput() const {
    return m_cloud_storage_output;
}
void OAIGooglePrivacyDlpV2Deidentify::setCloudStorageOutput(const QString &cloud_storage_output) {
    m_cloud_storage_output = cloud_storage_output;
    m_cloud_storage_output_isSet = true;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_cloud_storage_output_Set() const{
    return m_cloud_storage_output_isSet;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_cloud_storage_output_Valid() const{
    return m_cloud_storage_output_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2Deidentify::getFileTypesToTransform() const {
    return m_file_types_to_transform;
}
void OAIGooglePrivacyDlpV2Deidentify::setFileTypesToTransform(const QList<QString> &file_types_to_transform) {
    m_file_types_to_transform = file_types_to_transform;
    m_file_types_to_transform_isSet = true;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_file_types_to_transform_Set() const{
    return m_file_types_to_transform_isSet;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_file_types_to_transform_Valid() const{
    return m_file_types_to_transform_isValid;
}

OAIGooglePrivacyDlpV2TransformationConfig OAIGooglePrivacyDlpV2Deidentify::getTransformationConfig() const {
    return m_transformation_config;
}
void OAIGooglePrivacyDlpV2Deidentify::setTransformationConfig(const OAIGooglePrivacyDlpV2TransformationConfig &transformation_config) {
    m_transformation_config = transformation_config;
    m_transformation_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_transformation_config_Set() const{
    return m_transformation_config_isSet;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_transformation_config_Valid() const{
    return m_transformation_config_isValid;
}

OAIGooglePrivacyDlpV2TransformationDetailsStorageConfig OAIGooglePrivacyDlpV2Deidentify::getTransformationDetailsStorageConfig() const {
    return m_transformation_details_storage_config;
}
void OAIGooglePrivacyDlpV2Deidentify::setTransformationDetailsStorageConfig(const OAIGooglePrivacyDlpV2TransformationDetailsStorageConfig &transformation_details_storage_config) {
    m_transformation_details_storage_config = transformation_details_storage_config;
    m_transformation_details_storage_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_transformation_details_storage_config_Set() const{
    return m_transformation_details_storage_config_isSet;
}

bool OAIGooglePrivacyDlpV2Deidentify::is_transformation_details_storage_config_Valid() const{
    return m_transformation_details_storage_config_isValid;
}

bool OAIGooglePrivacyDlpV2Deidentify::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_storage_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_types_to_transform.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_details_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Deidentify::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
