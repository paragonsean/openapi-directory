/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2ExclusionRule.h
 *
 * The rule that specifies conditions when findings of infoTypes specified in &#x60;InspectionRuleSet&#x60; are removed from results.
 */

#ifndef OAIGooglePrivacyDlpV2ExclusionRule_H
#define OAIGooglePrivacyDlpV2ExclusionRule_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2Dictionary.h"
#include "OAIGooglePrivacyDlpV2ExcludeByHotword.h"
#include "OAIGooglePrivacyDlpV2ExcludeInfoTypes.h"
#include "OAIGooglePrivacyDlpV2Regex.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2Dictionary;
class OAIGooglePrivacyDlpV2ExcludeByHotword;
class OAIGooglePrivacyDlpV2ExcludeInfoTypes;
class OAIGooglePrivacyDlpV2Regex;

class OAIGooglePrivacyDlpV2ExclusionRule : public OAIObject {
public:
    OAIGooglePrivacyDlpV2ExclusionRule();
    OAIGooglePrivacyDlpV2ExclusionRule(QString json);
    ~OAIGooglePrivacyDlpV2ExclusionRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2Dictionary getDictionary() const;
    void setDictionary(const OAIGooglePrivacyDlpV2Dictionary &dictionary);
    bool is_dictionary_Set() const;
    bool is_dictionary_Valid() const;

    OAIGooglePrivacyDlpV2ExcludeByHotword getExcludeByHotword() const;
    void setExcludeByHotword(const OAIGooglePrivacyDlpV2ExcludeByHotword &exclude_by_hotword);
    bool is_exclude_by_hotword_Set() const;
    bool is_exclude_by_hotword_Valid() const;

    OAIGooglePrivacyDlpV2ExcludeInfoTypes getExcludeInfoTypes() const;
    void setExcludeInfoTypes(const OAIGooglePrivacyDlpV2ExcludeInfoTypes &exclude_info_types);
    bool is_exclude_info_types_Set() const;
    bool is_exclude_info_types_Valid() const;

    QString getMatchingType() const;
    void setMatchingType(const QString &matching_type);
    bool is_matching_type_Set() const;
    bool is_matching_type_Valid() const;

    OAIGooglePrivacyDlpV2Regex getRegex() const;
    void setRegex(const OAIGooglePrivacyDlpV2Regex &regex);
    bool is_regex_Set() const;
    bool is_regex_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2Dictionary m_dictionary;
    bool m_dictionary_isSet;
    bool m_dictionary_isValid;

    OAIGooglePrivacyDlpV2ExcludeByHotword m_exclude_by_hotword;
    bool m_exclude_by_hotword_isSet;
    bool m_exclude_by_hotword_isValid;

    OAIGooglePrivacyDlpV2ExcludeInfoTypes m_exclude_info_types;
    bool m_exclude_info_types_isSet;
    bool m_exclude_info_types_isValid;

    QString m_matching_type;
    bool m_matching_type_isSet;
    bool m_matching_type_isValid;

    OAIGooglePrivacyDlpV2Regex m_regex;
    bool m_regex_isSet;
    bool m_regex_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2ExclusionRule)

#endif // OAIGooglePrivacyDlpV2ExclusionRule_H
