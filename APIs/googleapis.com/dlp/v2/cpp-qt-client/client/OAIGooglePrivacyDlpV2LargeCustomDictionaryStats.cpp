/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2LargeCustomDictionaryStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::OAIGooglePrivacyDlpV2LargeCustomDictionaryStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::OAIGooglePrivacyDlpV2LargeCustomDictionaryStats() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::~OAIGooglePrivacyDlpV2LargeCustomDictionaryStats() {}

void OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::initializeModel() {

    m_approx_num_phrases_isSet = false;
    m_approx_num_phrases_isValid = false;
}

void OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::fromJsonObject(QJsonObject json) {

    m_approx_num_phrases_isValid = ::OpenAPI::fromJsonValue(m_approx_num_phrases, json[QString("approxNumPhrases")]);
    m_approx_num_phrases_isSet = !json[QString("approxNumPhrases")].isNull() && m_approx_num_phrases_isValid;
}

QString OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::asJsonObject() const {
    QJsonObject obj;
    if (m_approx_num_phrases_isSet) {
        obj.insert(QString("approxNumPhrases"), ::OpenAPI::toJsonValue(m_approx_num_phrases));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::getApproxNumPhrases() const {
    return m_approx_num_phrases;
}
void OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::setApproxNumPhrases(const QString &approx_num_phrases) {
    m_approx_num_phrases = approx_num_phrases;
    m_approx_num_phrases_isSet = true;
}

bool OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::is_approx_num_phrases_Set() const{
    return m_approx_num_phrases_isSet;
}

bool OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::is_approx_num_phrases_Valid() const{
    return m_approx_num_phrases_isValid;
}

bool OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approx_num_phrases_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2LargeCustomDictionaryStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
