/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RiskAnalysisJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::OAIGooglePrivacyDlpV2RiskAnalysisJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::OAIGooglePrivacyDlpV2RiskAnalysisJobConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::~OAIGooglePrivacyDlpV2RiskAnalysisJobConfig() {}

void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_privacy_metric_isSet = false;
    m_privacy_metric_isValid = false;

    m_source_table_isSet = false;
    m_source_table_isValid = false;
}

void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_privacy_metric_isValid = ::OpenAPI::fromJsonValue(m_privacy_metric, json[QString("privacyMetric")]);
    m_privacy_metric_isSet = !json[QString("privacyMetric")].isNull() && m_privacy_metric_isValid;

    m_source_table_isValid = ::OpenAPI::fromJsonValue(m_source_table, json[QString("sourceTable")]);
    m_source_table_isSet = !json[QString("sourceTable")].isNull() && m_source_table_isValid;
}

QString OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_privacy_metric.isSet()) {
        obj.insert(QString("privacyMetric"), ::OpenAPI::toJsonValue(m_privacy_metric));
    }
    if (m_source_table.isSet()) {
        obj.insert(QString("sourceTable"), ::OpenAPI::toJsonValue(m_source_table));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2Action> OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::getActions() const {
    return m_actions;
}
void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::setActions(const QList<OAIGooglePrivacyDlpV2Action> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIGooglePrivacyDlpV2PrivacyMetric OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::getPrivacyMetric() const {
    return m_privacy_metric;
}
void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::setPrivacyMetric(const OAIGooglePrivacyDlpV2PrivacyMetric &privacy_metric) {
    m_privacy_metric = privacy_metric;
    m_privacy_metric_isSet = true;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_privacy_metric_Set() const{
    return m_privacy_metric_isSet;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_privacy_metric_Valid() const{
    return m_privacy_metric_isValid;
}

OAIGooglePrivacyDlpV2BigQueryTable OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::getSourceTable() const {
    return m_source_table;
}
void OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::setSourceTable(const OAIGooglePrivacyDlpV2BigQueryTable &source_table) {
    m_source_table = source_table;
    m_source_table_isSet = true;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_source_table_Set() const{
    return m_source_table_isSet;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::is_source_table_Valid() const{
    return m_source_table_isValid;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RiskAnalysisJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
