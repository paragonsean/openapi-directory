/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Location::OAIGooglePrivacyDlpV2Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Location::OAIGooglePrivacyDlpV2Location() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Location::~OAIGooglePrivacyDlpV2Location() {}

void OAIGooglePrivacyDlpV2Location::initializeModel() {

    m_byte_range_isSet = false;
    m_byte_range_isValid = false;

    m_codepoint_range_isSet = false;
    m_codepoint_range_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_content_locations_isSet = false;
    m_content_locations_isValid = false;
}

void OAIGooglePrivacyDlpV2Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Location::fromJsonObject(QJsonObject json) {

    m_byte_range_isValid = ::OpenAPI::fromJsonValue(m_byte_range, json[QString("byteRange")]);
    m_byte_range_isSet = !json[QString("byteRange")].isNull() && m_byte_range_isValid;

    m_codepoint_range_isValid = ::OpenAPI::fromJsonValue(m_codepoint_range, json[QString("codepointRange")]);
    m_codepoint_range_isSet = !json[QString("codepointRange")].isNull() && m_codepoint_range_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_content_locations_isValid = ::OpenAPI::fromJsonValue(m_content_locations, json[QString("contentLocations")]);
    m_content_locations_isSet = !json[QString("contentLocations")].isNull() && m_content_locations_isValid;
}

QString OAIGooglePrivacyDlpV2Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Location::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_range.isSet()) {
        obj.insert(QString("byteRange"), ::OpenAPI::toJsonValue(m_byte_range));
    }
    if (m_codepoint_range.isSet()) {
        obj.insert(QString("codepointRange"), ::OpenAPI::toJsonValue(m_codepoint_range));
    }
    if (m_container.isSet()) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_content_locations.size() > 0) {
        obj.insert(QString("contentLocations"), ::OpenAPI::toJsonValue(m_content_locations));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Range OAIGooglePrivacyDlpV2Location::getByteRange() const {
    return m_byte_range;
}
void OAIGooglePrivacyDlpV2Location::setByteRange(const OAIGooglePrivacyDlpV2Range &byte_range) {
    m_byte_range = byte_range;
    m_byte_range_isSet = true;
}

bool OAIGooglePrivacyDlpV2Location::is_byte_range_Set() const{
    return m_byte_range_isSet;
}

bool OAIGooglePrivacyDlpV2Location::is_byte_range_Valid() const{
    return m_byte_range_isValid;
}

OAIGooglePrivacyDlpV2Range OAIGooglePrivacyDlpV2Location::getCodepointRange() const {
    return m_codepoint_range;
}
void OAIGooglePrivacyDlpV2Location::setCodepointRange(const OAIGooglePrivacyDlpV2Range &codepoint_range) {
    m_codepoint_range = codepoint_range;
    m_codepoint_range_isSet = true;
}

bool OAIGooglePrivacyDlpV2Location::is_codepoint_range_Set() const{
    return m_codepoint_range_isSet;
}

bool OAIGooglePrivacyDlpV2Location::is_codepoint_range_Valid() const{
    return m_codepoint_range_isValid;
}

OAIGooglePrivacyDlpV2Container OAIGooglePrivacyDlpV2Location::getContainer() const {
    return m_container;
}
void OAIGooglePrivacyDlpV2Location::setContainer(const OAIGooglePrivacyDlpV2Container &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIGooglePrivacyDlpV2Location::is_container_Set() const{
    return m_container_isSet;
}

bool OAIGooglePrivacyDlpV2Location::is_container_Valid() const{
    return m_container_isValid;
}

QList<OAIGooglePrivacyDlpV2ContentLocation> OAIGooglePrivacyDlpV2Location::getContentLocations() const {
    return m_content_locations;
}
void OAIGooglePrivacyDlpV2Location::setContentLocations(const QList<OAIGooglePrivacyDlpV2ContentLocation> &content_locations) {
    m_content_locations = content_locations;
    m_content_locations_isSet = true;
}

bool OAIGooglePrivacyDlpV2Location::is_content_locations_Set() const{
    return m_content_locations_isSet;
}

bool OAIGooglePrivacyDlpV2Location::is_content_locations_Valid() const{
    return m_content_locations_isValid;
}

bool OAIGooglePrivacyDlpV2Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codepoint_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
