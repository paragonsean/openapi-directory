/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2ExclusionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2ExclusionRule::OAIGooglePrivacyDlpV2ExclusionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2ExclusionRule::OAIGooglePrivacyDlpV2ExclusionRule() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2ExclusionRule::~OAIGooglePrivacyDlpV2ExclusionRule() {}

void OAIGooglePrivacyDlpV2ExclusionRule::initializeModel() {

    m_dictionary_isSet = false;
    m_dictionary_isValid = false;

    m_exclude_by_hotword_isSet = false;
    m_exclude_by_hotword_isValid = false;

    m_exclude_info_types_isSet = false;
    m_exclude_info_types_isValid = false;

    m_matching_type_isSet = false;
    m_matching_type_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;
}

void OAIGooglePrivacyDlpV2ExclusionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2ExclusionRule::fromJsonObject(QJsonObject json) {

    m_dictionary_isValid = ::OpenAPI::fromJsonValue(m_dictionary, json[QString("dictionary")]);
    m_dictionary_isSet = !json[QString("dictionary")].isNull() && m_dictionary_isValid;

    m_exclude_by_hotword_isValid = ::OpenAPI::fromJsonValue(m_exclude_by_hotword, json[QString("excludeByHotword")]);
    m_exclude_by_hotword_isSet = !json[QString("excludeByHotword")].isNull() && m_exclude_by_hotword_isValid;

    m_exclude_info_types_isValid = ::OpenAPI::fromJsonValue(m_exclude_info_types, json[QString("excludeInfoTypes")]);
    m_exclude_info_types_isSet = !json[QString("excludeInfoTypes")].isNull() && m_exclude_info_types_isValid;

    m_matching_type_isValid = ::OpenAPI::fromJsonValue(m_matching_type, json[QString("matchingType")]);
    m_matching_type_isSet = !json[QString("matchingType")].isNull() && m_matching_type_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;
}

QString OAIGooglePrivacyDlpV2ExclusionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2ExclusionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_dictionary.isSet()) {
        obj.insert(QString("dictionary"), ::OpenAPI::toJsonValue(m_dictionary));
    }
    if (m_exclude_by_hotword.isSet()) {
        obj.insert(QString("excludeByHotword"), ::OpenAPI::toJsonValue(m_exclude_by_hotword));
    }
    if (m_exclude_info_types.isSet()) {
        obj.insert(QString("excludeInfoTypes"), ::OpenAPI::toJsonValue(m_exclude_info_types));
    }
    if (m_matching_type_isSet) {
        obj.insert(QString("matchingType"), ::OpenAPI::toJsonValue(m_matching_type));
    }
    if (m_regex.isSet()) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Dictionary OAIGooglePrivacyDlpV2ExclusionRule::getDictionary() const {
    return m_dictionary;
}
void OAIGooglePrivacyDlpV2ExclusionRule::setDictionary(const OAIGooglePrivacyDlpV2Dictionary &dictionary) {
    m_dictionary = dictionary;
    m_dictionary_isSet = true;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_dictionary_Set() const{
    return m_dictionary_isSet;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_dictionary_Valid() const{
    return m_dictionary_isValid;
}

OAIGooglePrivacyDlpV2ExcludeByHotword OAIGooglePrivacyDlpV2ExclusionRule::getExcludeByHotword() const {
    return m_exclude_by_hotword;
}
void OAIGooglePrivacyDlpV2ExclusionRule::setExcludeByHotword(const OAIGooglePrivacyDlpV2ExcludeByHotword &exclude_by_hotword) {
    m_exclude_by_hotword = exclude_by_hotword;
    m_exclude_by_hotword_isSet = true;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_exclude_by_hotword_Set() const{
    return m_exclude_by_hotword_isSet;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_exclude_by_hotword_Valid() const{
    return m_exclude_by_hotword_isValid;
}

OAIGooglePrivacyDlpV2ExcludeInfoTypes OAIGooglePrivacyDlpV2ExclusionRule::getExcludeInfoTypes() const {
    return m_exclude_info_types;
}
void OAIGooglePrivacyDlpV2ExclusionRule::setExcludeInfoTypes(const OAIGooglePrivacyDlpV2ExcludeInfoTypes &exclude_info_types) {
    m_exclude_info_types = exclude_info_types;
    m_exclude_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_exclude_info_types_Set() const{
    return m_exclude_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_exclude_info_types_Valid() const{
    return m_exclude_info_types_isValid;
}

QString OAIGooglePrivacyDlpV2ExclusionRule::getMatchingType() const {
    return m_matching_type;
}
void OAIGooglePrivacyDlpV2ExclusionRule::setMatchingType(const QString &matching_type) {
    m_matching_type = matching_type;
    m_matching_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_matching_type_Set() const{
    return m_matching_type_isSet;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_matching_type_Valid() const{
    return m_matching_type_isValid;
}

OAIGooglePrivacyDlpV2Regex OAIGooglePrivacyDlpV2ExclusionRule::getRegex() const {
    return m_regex;
}
void OAIGooglePrivacyDlpV2ExclusionRule::setRegex(const OAIGooglePrivacyDlpV2Regex &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dictionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_by_hotword.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_info_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2ExclusionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
