/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::~OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket() {}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::initializeModel() {

    m_bucket_size_isSet = false;
    m_bucket_size_isValid = false;

    m_bucket_value_count_isSet = false;
    m_bucket_value_count_isValid = false;

    m_bucket_values_isSet = false;
    m_bucket_values_isValid = false;

    m_max_probability_isSet = false;
    m_max_probability_isValid = false;

    m_min_probability_isSet = false;
    m_min_probability_isValid = false;
}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::fromJsonObject(QJsonObject json) {

    m_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_bucket_size, json[QString("bucketSize")]);
    m_bucket_size_isSet = !json[QString("bucketSize")].isNull() && m_bucket_size_isValid;

    m_bucket_value_count_isValid = ::OpenAPI::fromJsonValue(m_bucket_value_count, json[QString("bucketValueCount")]);
    m_bucket_value_count_isSet = !json[QString("bucketValueCount")].isNull() && m_bucket_value_count_isValid;

    m_bucket_values_isValid = ::OpenAPI::fromJsonValue(m_bucket_values, json[QString("bucketValues")]);
    m_bucket_values_isSet = !json[QString("bucketValues")].isNull() && m_bucket_values_isValid;

    m_max_probability_isValid = ::OpenAPI::fromJsonValue(m_max_probability, json[QString("maxProbability")]);
    m_max_probability_isSet = !json[QString("maxProbability")].isNull() && m_max_probability_isValid;

    m_min_probability_isValid = ::OpenAPI::fromJsonValue(m_min_probability, json[QString("minProbability")]);
    m_min_probability_isSet = !json[QString("minProbability")].isNull() && m_min_probability_isValid;
}

QString OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_size_isSet) {
        obj.insert(QString("bucketSize"), ::OpenAPI::toJsonValue(m_bucket_size));
    }
    if (m_bucket_value_count_isSet) {
        obj.insert(QString("bucketValueCount"), ::OpenAPI::toJsonValue(m_bucket_value_count));
    }
    if (m_bucket_values.size() > 0) {
        obj.insert(QString("bucketValues"), ::OpenAPI::toJsonValue(m_bucket_values));
    }
    if (m_max_probability_isSet) {
        obj.insert(QString("maxProbability"), ::OpenAPI::toJsonValue(m_max_probability));
    }
    if (m_min_probability_isSet) {
        obj.insert(QString("minProbability"), ::OpenAPI::toJsonValue(m_min_probability));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::getBucketSize() const {
    return m_bucket_size;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::setBucketSize(const QString &bucket_size) {
    m_bucket_size = bucket_size;
    m_bucket_size_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_size_Set() const{
    return m_bucket_size_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_size_Valid() const{
    return m_bucket_size_isValid;
}

QString OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::getBucketValueCount() const {
    return m_bucket_value_count;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::setBucketValueCount(const QString &bucket_value_count) {
    m_bucket_value_count = bucket_value_count;
    m_bucket_value_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_value_count_Set() const{
    return m_bucket_value_count_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_value_count_Valid() const{
    return m_bucket_value_count_isValid;
}

QList<OAIGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues> OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::getBucketValues() const {
    return m_bucket_values;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::setBucketValues(const QList<OAIGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues> &bucket_values) {
    m_bucket_values = bucket_values;
    m_bucket_values_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_values_Set() const{
    return m_bucket_values_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_bucket_values_Valid() const{
    return m_bucket_values_isValid;
}

double OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::getMaxProbability() const {
    return m_max_probability;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::setMaxProbability(const double &max_probability) {
    m_max_probability = max_probability;
    m_max_probability_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_max_probability_Set() const{
    return m_max_probability_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_max_probability_Valid() const{
    return m_max_probability_isValid;
}

double OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::getMinProbability() const {
    return m_min_probability;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::setMinProbability(const double &min_probability) {
    m_min_probability = min_probability;
    m_min_probability_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_min_probability_Set() const{
    return m_min_probability_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::is_min_probability_Valid() const{
    return m_min_probability_isValid;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
