/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CreateDlpJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CreateDlpJobRequest::OAIGooglePrivacyDlpV2CreateDlpJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CreateDlpJobRequest::OAIGooglePrivacyDlpV2CreateDlpJobRequest() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CreateDlpJobRequest::~OAIGooglePrivacyDlpV2CreateDlpJobRequest() {}

void OAIGooglePrivacyDlpV2CreateDlpJobRequest::initializeModel() {

    m_inspect_job_isSet = false;
    m_inspect_job_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_risk_job_isSet = false;
    m_risk_job_isValid = false;
}

void OAIGooglePrivacyDlpV2CreateDlpJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CreateDlpJobRequest::fromJsonObject(QJsonObject json) {

    m_inspect_job_isValid = ::OpenAPI::fromJsonValue(m_inspect_job, json[QString("inspectJob")]);
    m_inspect_job_isSet = !json[QString("inspectJob")].isNull() && m_inspect_job_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_risk_job_isValid = ::OpenAPI::fromJsonValue(m_risk_job, json[QString("riskJob")]);
    m_risk_job_isSet = !json[QString("riskJob")].isNull() && m_risk_job_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDlpJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CreateDlpJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_inspect_job.isSet()) {
        obj.insert(QString("inspectJob"), ::OpenAPI::toJsonValue(m_inspect_job));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_risk_job.isSet()) {
        obj.insert(QString("riskJob"), ::OpenAPI::toJsonValue(m_risk_job));
    }
    return obj;
}

OAIGooglePrivacyDlpV2InspectJobConfig OAIGooglePrivacyDlpV2CreateDlpJobRequest::getInspectJob() const {
    return m_inspect_job;
}
void OAIGooglePrivacyDlpV2CreateDlpJobRequest::setInspectJob(const OAIGooglePrivacyDlpV2InspectJobConfig &inspect_job) {
    m_inspect_job = inspect_job;
    m_inspect_job_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_inspect_job_Set() const{
    return m_inspect_job_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_inspect_job_Valid() const{
    return m_inspect_job_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDlpJobRequest::getJobId() const {
    return m_job_id;
}
void OAIGooglePrivacyDlpV2CreateDlpJobRequest::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIGooglePrivacyDlpV2CreateDlpJobRequest::getLocationId() const {
    return m_location_id;
}
void OAIGooglePrivacyDlpV2CreateDlpJobRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIGooglePrivacyDlpV2RiskAnalysisJobConfig OAIGooglePrivacyDlpV2CreateDlpJobRequest::getRiskJob() const {
    return m_risk_job;
}
void OAIGooglePrivacyDlpV2CreateDlpJobRequest::setRiskJob(const OAIGooglePrivacyDlpV2RiskAnalysisJobConfig &risk_job) {
    m_risk_job = risk_job;
    m_risk_job_isSet = true;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_risk_job_Set() const{
    return m_risk_job_isSet;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::is_risk_job_Valid() const{
    return m_risk_job_isValid;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inspect_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_job.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CreateDlpJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
