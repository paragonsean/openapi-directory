/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::~OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence() {}

void OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::getFrequency() const {
    return m_frequency;
}
void OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::getTypes() const {
    return m_types;
}
void OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DiscoverySchemaModifiedCadence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
