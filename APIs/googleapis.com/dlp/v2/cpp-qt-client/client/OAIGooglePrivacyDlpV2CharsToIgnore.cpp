/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CharsToIgnore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CharsToIgnore::OAIGooglePrivacyDlpV2CharsToIgnore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CharsToIgnore::OAIGooglePrivacyDlpV2CharsToIgnore() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CharsToIgnore::~OAIGooglePrivacyDlpV2CharsToIgnore() {}

void OAIGooglePrivacyDlpV2CharsToIgnore::initializeModel() {

    m_characters_to_skip_isSet = false;
    m_characters_to_skip_isValid = false;

    m_common_characters_to_ignore_isSet = false;
    m_common_characters_to_ignore_isValid = false;
}

void OAIGooglePrivacyDlpV2CharsToIgnore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CharsToIgnore::fromJsonObject(QJsonObject json) {

    m_characters_to_skip_isValid = ::OpenAPI::fromJsonValue(m_characters_to_skip, json[QString("charactersToSkip")]);
    m_characters_to_skip_isSet = !json[QString("charactersToSkip")].isNull() && m_characters_to_skip_isValid;

    m_common_characters_to_ignore_isValid = ::OpenAPI::fromJsonValue(m_common_characters_to_ignore, json[QString("commonCharactersToIgnore")]);
    m_common_characters_to_ignore_isSet = !json[QString("commonCharactersToIgnore")].isNull() && m_common_characters_to_ignore_isValid;
}

QString OAIGooglePrivacyDlpV2CharsToIgnore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CharsToIgnore::asJsonObject() const {
    QJsonObject obj;
    if (m_characters_to_skip_isSet) {
        obj.insert(QString("charactersToSkip"), ::OpenAPI::toJsonValue(m_characters_to_skip));
    }
    if (m_common_characters_to_ignore_isSet) {
        obj.insert(QString("commonCharactersToIgnore"), ::OpenAPI::toJsonValue(m_common_characters_to_ignore));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2CharsToIgnore::getCharactersToSkip() const {
    return m_characters_to_skip;
}
void OAIGooglePrivacyDlpV2CharsToIgnore::setCharactersToSkip(const QString &characters_to_skip) {
    m_characters_to_skip = characters_to_skip;
    m_characters_to_skip_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::is_characters_to_skip_Set() const{
    return m_characters_to_skip_isSet;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::is_characters_to_skip_Valid() const{
    return m_characters_to_skip_isValid;
}

QString OAIGooglePrivacyDlpV2CharsToIgnore::getCommonCharactersToIgnore() const {
    return m_common_characters_to_ignore;
}
void OAIGooglePrivacyDlpV2CharsToIgnore::setCommonCharactersToIgnore(const QString &common_characters_to_ignore) {
    m_common_characters_to_ignore = common_characters_to_ignore;
    m_common_characters_to_ignore_isSet = true;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::is_common_characters_to_ignore_Set() const{
    return m_common_characters_to_ignore_isSet;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::is_common_characters_to_ignore_Valid() const{
    return m_common_characters_to_ignore_isValid;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_characters_to_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_characters_to_ignore_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CharsToIgnore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
