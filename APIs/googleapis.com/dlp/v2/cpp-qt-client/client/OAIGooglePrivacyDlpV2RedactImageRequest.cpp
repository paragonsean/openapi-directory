/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RedactImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RedactImageRequest::OAIGooglePrivacyDlpV2RedactImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RedactImageRequest::OAIGooglePrivacyDlpV2RedactImageRequest() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RedactImageRequest::~OAIGooglePrivacyDlpV2RedactImageRequest() {}

void OAIGooglePrivacyDlpV2RedactImageRequest::initializeModel() {

    m_byte_item_isSet = false;
    m_byte_item_isValid = false;

    m_image_redaction_configs_isSet = false;
    m_image_redaction_configs_isValid = false;

    m_include_findings_isSet = false;
    m_include_findings_isValid = false;

    m_inspect_config_isSet = false;
    m_inspect_config_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;
}

void OAIGooglePrivacyDlpV2RedactImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RedactImageRequest::fromJsonObject(QJsonObject json) {

    m_byte_item_isValid = ::OpenAPI::fromJsonValue(m_byte_item, json[QString("byteItem")]);
    m_byte_item_isSet = !json[QString("byteItem")].isNull() && m_byte_item_isValid;

    m_image_redaction_configs_isValid = ::OpenAPI::fromJsonValue(m_image_redaction_configs, json[QString("imageRedactionConfigs")]);
    m_image_redaction_configs_isSet = !json[QString("imageRedactionConfigs")].isNull() && m_image_redaction_configs_isValid;

    m_include_findings_isValid = ::OpenAPI::fromJsonValue(m_include_findings, json[QString("includeFindings")]);
    m_include_findings_isSet = !json[QString("includeFindings")].isNull() && m_include_findings_isValid;

    m_inspect_config_isValid = ::OpenAPI::fromJsonValue(m_inspect_config, json[QString("inspectConfig")]);
    m_inspect_config_isSet = !json[QString("inspectConfig")].isNull() && m_inspect_config_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;
}

QString OAIGooglePrivacyDlpV2RedactImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RedactImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_item.isSet()) {
        obj.insert(QString("byteItem"), ::OpenAPI::toJsonValue(m_byte_item));
    }
    if (m_image_redaction_configs.size() > 0) {
        obj.insert(QString("imageRedactionConfigs"), ::OpenAPI::toJsonValue(m_image_redaction_configs));
    }
    if (m_include_findings_isSet) {
        obj.insert(QString("includeFindings"), ::OpenAPI::toJsonValue(m_include_findings));
    }
    if (m_inspect_config.isSet()) {
        obj.insert(QString("inspectConfig"), ::OpenAPI::toJsonValue(m_inspect_config));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    return obj;
}

OAIGooglePrivacyDlpV2ByteContentItem OAIGooglePrivacyDlpV2RedactImageRequest::getByteItem() const {
    return m_byte_item;
}
void OAIGooglePrivacyDlpV2RedactImageRequest::setByteItem(const OAIGooglePrivacyDlpV2ByteContentItem &byte_item) {
    m_byte_item = byte_item;
    m_byte_item_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_byte_item_Set() const{
    return m_byte_item_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_byte_item_Valid() const{
    return m_byte_item_isValid;
}

QList<OAIGooglePrivacyDlpV2ImageRedactionConfig> OAIGooglePrivacyDlpV2RedactImageRequest::getImageRedactionConfigs() const {
    return m_image_redaction_configs;
}
void OAIGooglePrivacyDlpV2RedactImageRequest::setImageRedactionConfigs(const QList<OAIGooglePrivacyDlpV2ImageRedactionConfig> &image_redaction_configs) {
    m_image_redaction_configs = image_redaction_configs;
    m_image_redaction_configs_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_image_redaction_configs_Set() const{
    return m_image_redaction_configs_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_image_redaction_configs_Valid() const{
    return m_image_redaction_configs_isValid;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::isIncludeFindings() const {
    return m_include_findings;
}
void OAIGooglePrivacyDlpV2RedactImageRequest::setIncludeFindings(const bool &include_findings) {
    m_include_findings = include_findings;
    m_include_findings_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_include_findings_Set() const{
    return m_include_findings_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_include_findings_Valid() const{
    return m_include_findings_isValid;
}

OAIGooglePrivacyDlpV2InspectConfig OAIGooglePrivacyDlpV2RedactImageRequest::getInspectConfig() const {
    return m_inspect_config;
}
void OAIGooglePrivacyDlpV2RedactImageRequest::setInspectConfig(const OAIGooglePrivacyDlpV2InspectConfig &inspect_config) {
    m_inspect_config = inspect_config;
    m_inspect_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_inspect_config_Set() const{
    return m_inspect_config_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_inspect_config_Valid() const{
    return m_inspect_config_isValid;
}

QString OAIGooglePrivacyDlpV2RedactImageRequest::getLocationId() const {
    return m_location_id;
}
void OAIGooglePrivacyDlpV2RedactImageRequest::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::is_location_id_Valid() const{
    return m_location_id_isValid;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_redaction_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_findings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RedactImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
