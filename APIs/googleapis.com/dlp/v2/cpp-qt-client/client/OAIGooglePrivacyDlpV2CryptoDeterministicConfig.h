/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2CryptoDeterministicConfig.h
 *
 * Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
 */

#ifndef OAIGooglePrivacyDlpV2CryptoDeterministicConfig_H
#define OAIGooglePrivacyDlpV2CryptoDeterministicConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2CryptoKey.h"
#include "OAIGooglePrivacyDlpV2FieldId.h"
#include "OAIGooglePrivacyDlpV2InfoType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2FieldId;
class OAIGooglePrivacyDlpV2CryptoKey;
class OAIGooglePrivacyDlpV2InfoType;

class OAIGooglePrivacyDlpV2CryptoDeterministicConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2CryptoDeterministicConfig();
    OAIGooglePrivacyDlpV2CryptoDeterministicConfig(QString json);
    ~OAIGooglePrivacyDlpV2CryptoDeterministicConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2FieldId getContext() const;
    void setContext(const OAIGooglePrivacyDlpV2FieldId &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    OAIGooglePrivacyDlpV2CryptoKey getCryptoKey() const;
    void setCryptoKey(const OAIGooglePrivacyDlpV2CryptoKey &crypto_key);
    bool is_crypto_key_Set() const;
    bool is_crypto_key_Valid() const;

    OAIGooglePrivacyDlpV2InfoType getSurrogateInfoType() const;
    void setSurrogateInfoType(const OAIGooglePrivacyDlpV2InfoType &surrogate_info_type);
    bool is_surrogate_info_type_Set() const;
    bool is_surrogate_info_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2FieldId m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    OAIGooglePrivacyDlpV2CryptoKey m_crypto_key;
    bool m_crypto_key_isSet;
    bool m_crypto_key_isValid;

    OAIGooglePrivacyDlpV2InfoType m_surrogate_info_type;
    bool m_surrogate_info_type_isSet;
    bool m_surrogate_info_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2CryptoDeterministicConfig)

#endif // OAIGooglePrivacyDlpV2CryptoDeterministicConfig_H
