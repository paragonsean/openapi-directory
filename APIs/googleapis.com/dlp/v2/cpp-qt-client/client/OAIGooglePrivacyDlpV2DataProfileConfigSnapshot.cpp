/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DataProfileConfigSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::OAIGooglePrivacyDlpV2DataProfileConfigSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::OAIGooglePrivacyDlpV2DataProfileConfigSnapshot() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::~OAIGooglePrivacyDlpV2DataProfileConfigSnapshot() {}

void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::initializeModel() {

    m_data_profile_job_isSet = false;
    m_data_profile_job_isValid = false;

    m_discovery_config_isSet = false;
    m_discovery_config_isValid = false;

    m_inspect_config_isSet = false;
    m_inspect_config_isValid = false;

    m_inspect_template_modified_time_isSet = false;
    m_inspect_template_modified_time_isValid = false;

    m_inspect_template_name_isSet = false;
    m_inspect_template_name_isValid = false;
}

void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::fromJsonObject(QJsonObject json) {

    m_data_profile_job_isValid = ::OpenAPI::fromJsonValue(m_data_profile_job, json[QString("dataProfileJob")]);
    m_data_profile_job_isSet = !json[QString("dataProfileJob")].isNull() && m_data_profile_job_isValid;

    m_discovery_config_isValid = ::OpenAPI::fromJsonValue(m_discovery_config, json[QString("discoveryConfig")]);
    m_discovery_config_isSet = !json[QString("discoveryConfig")].isNull() && m_discovery_config_isValid;

    m_inspect_config_isValid = ::OpenAPI::fromJsonValue(m_inspect_config, json[QString("inspectConfig")]);
    m_inspect_config_isSet = !json[QString("inspectConfig")].isNull() && m_inspect_config_isValid;

    m_inspect_template_modified_time_isValid = ::OpenAPI::fromJsonValue(m_inspect_template_modified_time, json[QString("inspectTemplateModifiedTime")]);
    m_inspect_template_modified_time_isSet = !json[QString("inspectTemplateModifiedTime")].isNull() && m_inspect_template_modified_time_isValid;

    m_inspect_template_name_isValid = ::OpenAPI::fromJsonValue(m_inspect_template_name, json[QString("inspectTemplateName")]);
    m_inspect_template_name_isSet = !json[QString("inspectTemplateName")].isNull() && m_inspect_template_name_isValid;
}

QString OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_data_profile_job.isSet()) {
        obj.insert(QString("dataProfileJob"), ::OpenAPI::toJsonValue(m_data_profile_job));
    }
    if (m_discovery_config.isSet()) {
        obj.insert(QString("discoveryConfig"), ::OpenAPI::toJsonValue(m_discovery_config));
    }
    if (m_inspect_config.isSet()) {
        obj.insert(QString("inspectConfig"), ::OpenAPI::toJsonValue(m_inspect_config));
    }
    if (m_inspect_template_modified_time_isSet) {
        obj.insert(QString("inspectTemplateModifiedTime"), ::OpenAPI::toJsonValue(m_inspect_template_modified_time));
    }
    if (m_inspect_template_name_isSet) {
        obj.insert(QString("inspectTemplateName"), ::OpenAPI::toJsonValue(m_inspect_template_name));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DataProfileJobConfig OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::getDataProfileJob() const {
    return m_data_profile_job;
}
void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::setDataProfileJob(const OAIGooglePrivacyDlpV2DataProfileJobConfig &data_profile_job) {
    m_data_profile_job = data_profile_job;
    m_data_profile_job_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_data_profile_job_Set() const{
    return m_data_profile_job_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_data_profile_job_Valid() const{
    return m_data_profile_job_isValid;
}

OAIGooglePrivacyDlpV2DiscoveryConfig OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::getDiscoveryConfig() const {
    return m_discovery_config;
}
void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::setDiscoveryConfig(const OAIGooglePrivacyDlpV2DiscoveryConfig &discovery_config) {
    m_discovery_config = discovery_config;
    m_discovery_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_discovery_config_Set() const{
    return m_discovery_config_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_discovery_config_Valid() const{
    return m_discovery_config_isValid;
}

OAIGooglePrivacyDlpV2InspectConfig OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::getInspectConfig() const {
    return m_inspect_config;
}
void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::setInspectConfig(const OAIGooglePrivacyDlpV2InspectConfig &inspect_config) {
    m_inspect_config = inspect_config;
    m_inspect_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_config_Set() const{
    return m_inspect_config_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_config_Valid() const{
    return m_inspect_config_isValid;
}

QString OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::getInspectTemplateModifiedTime() const {
    return m_inspect_template_modified_time;
}
void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::setInspectTemplateModifiedTime(const QString &inspect_template_modified_time) {
    m_inspect_template_modified_time = inspect_template_modified_time;
    m_inspect_template_modified_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_template_modified_time_Set() const{
    return m_inspect_template_modified_time_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_template_modified_time_Valid() const{
    return m_inspect_template_modified_time_isValid;
}

QString OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::getInspectTemplateName() const {
    return m_inspect_template_name;
}
void OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::setInspectTemplateName(const QString &inspect_template_name) {
    m_inspect_template_name = inspect_template_name;
    m_inspect_template_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_template_name_Set() const{
    return m_inspect_template_name_isSet;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::is_inspect_template_name_Valid() const{
    return m_inspect_template_name_isValid;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_profile_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_template_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DataProfileConfigSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
