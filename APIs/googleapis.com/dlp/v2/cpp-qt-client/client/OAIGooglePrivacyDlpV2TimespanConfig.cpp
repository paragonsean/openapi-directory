/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TimespanConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TimespanConfig::OAIGooglePrivacyDlpV2TimespanConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TimespanConfig::OAIGooglePrivacyDlpV2TimespanConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TimespanConfig::~OAIGooglePrivacyDlpV2TimespanConfig() {}

void OAIGooglePrivacyDlpV2TimespanConfig::initializeModel() {

    m_enable_auto_population_of_timespan_config_isSet = false;
    m_enable_auto_population_of_timespan_config_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_timestamp_field_isSet = false;
    m_timestamp_field_isValid = false;
}

void OAIGooglePrivacyDlpV2TimespanConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TimespanConfig::fromJsonObject(QJsonObject json) {

    m_enable_auto_population_of_timespan_config_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_population_of_timespan_config, json[QString("enableAutoPopulationOfTimespanConfig")]);
    m_enable_auto_population_of_timespan_config_isSet = !json[QString("enableAutoPopulationOfTimespanConfig")].isNull() && m_enable_auto_population_of_timespan_config_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_timestamp_field_isValid = ::OpenAPI::fromJsonValue(m_timestamp_field, json[QString("timestampField")]);
    m_timestamp_field_isSet = !json[QString("timestampField")].isNull() && m_timestamp_field_isValid;
}

QString OAIGooglePrivacyDlpV2TimespanConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TimespanConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_auto_population_of_timespan_config_isSet) {
        obj.insert(QString("enableAutoPopulationOfTimespanConfig"), ::OpenAPI::toJsonValue(m_enable_auto_population_of_timespan_config));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_timestamp_field.isSet()) {
        obj.insert(QString("timestampField"), ::OpenAPI::toJsonValue(m_timestamp_field));
    }
    return obj;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::isEnableAutoPopulationOfTimespanConfig() const {
    return m_enable_auto_population_of_timespan_config;
}
void OAIGooglePrivacyDlpV2TimespanConfig::setEnableAutoPopulationOfTimespanConfig(const bool &enable_auto_population_of_timespan_config) {
    m_enable_auto_population_of_timespan_config = enable_auto_population_of_timespan_config;
    m_enable_auto_population_of_timespan_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_enable_auto_population_of_timespan_config_Set() const{
    return m_enable_auto_population_of_timespan_config_isSet;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_enable_auto_population_of_timespan_config_Valid() const{
    return m_enable_auto_population_of_timespan_config_isValid;
}

QString OAIGooglePrivacyDlpV2TimespanConfig::getEndTime() const {
    return m_end_time;
}
void OAIGooglePrivacyDlpV2TimespanConfig::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGooglePrivacyDlpV2TimespanConfig::getStartTime() const {
    return m_start_time;
}
void OAIGooglePrivacyDlpV2TimespanConfig::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2TimespanConfig::getTimestampField() const {
    return m_timestamp_field;
}
void OAIGooglePrivacyDlpV2TimespanConfig::setTimestampField(const OAIGooglePrivacyDlpV2FieldId &timestamp_field) {
    m_timestamp_field = timestamp_field;
    m_timestamp_field_isSet = true;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_timestamp_field_Set() const{
    return m_timestamp_field_isSet;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::is_timestamp_field_Valid() const{
    return m_timestamp_field_isValid;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_auto_population_of_timespan_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_field.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TimespanConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
