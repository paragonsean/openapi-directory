/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Dictionary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Dictionary::OAIGooglePrivacyDlpV2Dictionary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Dictionary::OAIGooglePrivacyDlpV2Dictionary() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Dictionary::~OAIGooglePrivacyDlpV2Dictionary() {}

void OAIGooglePrivacyDlpV2Dictionary::initializeModel() {

    m_cloud_storage_path_isSet = false;
    m_cloud_storage_path_isValid = false;

    m_word_list_isSet = false;
    m_word_list_isValid = false;
}

void OAIGooglePrivacyDlpV2Dictionary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Dictionary::fromJsonObject(QJsonObject json) {

    m_cloud_storage_path_isValid = ::OpenAPI::fromJsonValue(m_cloud_storage_path, json[QString("cloudStoragePath")]);
    m_cloud_storage_path_isSet = !json[QString("cloudStoragePath")].isNull() && m_cloud_storage_path_isValid;

    m_word_list_isValid = ::OpenAPI::fromJsonValue(m_word_list, json[QString("wordList")]);
    m_word_list_isSet = !json[QString("wordList")].isNull() && m_word_list_isValid;
}

QString OAIGooglePrivacyDlpV2Dictionary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Dictionary::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_storage_path.isSet()) {
        obj.insert(QString("cloudStoragePath"), ::OpenAPI::toJsonValue(m_cloud_storage_path));
    }
    if (m_word_list.isSet()) {
        obj.insert(QString("wordList"), ::OpenAPI::toJsonValue(m_word_list));
    }
    return obj;
}

OAIGooglePrivacyDlpV2CloudStoragePath OAIGooglePrivacyDlpV2Dictionary::getCloudStoragePath() const {
    return m_cloud_storage_path;
}
void OAIGooglePrivacyDlpV2Dictionary::setCloudStoragePath(const OAIGooglePrivacyDlpV2CloudStoragePath &cloud_storage_path) {
    m_cloud_storage_path = cloud_storage_path;
    m_cloud_storage_path_isSet = true;
}

bool OAIGooglePrivacyDlpV2Dictionary::is_cloud_storage_path_Set() const{
    return m_cloud_storage_path_isSet;
}

bool OAIGooglePrivacyDlpV2Dictionary::is_cloud_storage_path_Valid() const{
    return m_cloud_storage_path_isValid;
}

OAIGooglePrivacyDlpV2WordList OAIGooglePrivacyDlpV2Dictionary::getWordList() const {
    return m_word_list;
}
void OAIGooglePrivacyDlpV2Dictionary::setWordList(const OAIGooglePrivacyDlpV2WordList &word_list) {
    m_word_list = word_list;
    m_word_list_isSet = true;
}

bool OAIGooglePrivacyDlpV2Dictionary::is_word_list_Set() const{
    return m_word_list_isSet;
}

bool OAIGooglePrivacyDlpV2Dictionary::is_word_list_Valid() const{
    return m_word_list_isValid;
}

bool OAIGooglePrivacyDlpV2Dictionary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_storage_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Dictionary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
