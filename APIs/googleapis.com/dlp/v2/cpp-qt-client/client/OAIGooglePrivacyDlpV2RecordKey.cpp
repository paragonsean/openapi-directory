/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RecordKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RecordKey::OAIGooglePrivacyDlpV2RecordKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RecordKey::OAIGooglePrivacyDlpV2RecordKey() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RecordKey::~OAIGooglePrivacyDlpV2RecordKey() {}

void OAIGooglePrivacyDlpV2RecordKey::initializeModel() {

    m_big_query_key_isSet = false;
    m_big_query_key_isValid = false;

    m_datastore_key_isSet = false;
    m_datastore_key_isValid = false;

    m_id_values_isSet = false;
    m_id_values_isValid = false;
}

void OAIGooglePrivacyDlpV2RecordKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RecordKey::fromJsonObject(QJsonObject json) {

    m_big_query_key_isValid = ::OpenAPI::fromJsonValue(m_big_query_key, json[QString("bigQueryKey")]);
    m_big_query_key_isSet = !json[QString("bigQueryKey")].isNull() && m_big_query_key_isValid;

    m_datastore_key_isValid = ::OpenAPI::fromJsonValue(m_datastore_key, json[QString("datastoreKey")]);
    m_datastore_key_isSet = !json[QString("datastoreKey")].isNull() && m_datastore_key_isValid;

    m_id_values_isValid = ::OpenAPI::fromJsonValue(m_id_values, json[QString("idValues")]);
    m_id_values_isSet = !json[QString("idValues")].isNull() && m_id_values_isValid;
}

QString OAIGooglePrivacyDlpV2RecordKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RecordKey::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_key.isSet()) {
        obj.insert(QString("bigQueryKey"), ::OpenAPI::toJsonValue(m_big_query_key));
    }
    if (m_datastore_key.isSet()) {
        obj.insert(QString("datastoreKey"), ::OpenAPI::toJsonValue(m_datastore_key));
    }
    if (m_id_values.size() > 0) {
        obj.insert(QString("idValues"), ::OpenAPI::toJsonValue(m_id_values));
    }
    return obj;
}

OAIGooglePrivacyDlpV2BigQueryKey OAIGooglePrivacyDlpV2RecordKey::getBigQueryKey() const {
    return m_big_query_key;
}
void OAIGooglePrivacyDlpV2RecordKey::setBigQueryKey(const OAIGooglePrivacyDlpV2BigQueryKey &big_query_key) {
    m_big_query_key = big_query_key;
    m_big_query_key_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_big_query_key_Set() const{
    return m_big_query_key_isSet;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_big_query_key_Valid() const{
    return m_big_query_key_isValid;
}

OAIGooglePrivacyDlpV2DatastoreKey OAIGooglePrivacyDlpV2RecordKey::getDatastoreKey() const {
    return m_datastore_key;
}
void OAIGooglePrivacyDlpV2RecordKey::setDatastoreKey(const OAIGooglePrivacyDlpV2DatastoreKey &datastore_key) {
    m_datastore_key = datastore_key;
    m_datastore_key_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_datastore_key_Set() const{
    return m_datastore_key_isSet;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_datastore_key_Valid() const{
    return m_datastore_key_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2RecordKey::getIdValues() const {
    return m_id_values;
}
void OAIGooglePrivacyDlpV2RecordKey::setIdValues(const QList<QString> &id_values) {
    m_id_values = id_values;
    m_id_values_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_id_values_Set() const{
    return m_id_values_isSet;
}

bool OAIGooglePrivacyDlpV2RecordKey::is_id_values_Valid() const{
    return m_id_values_isValid;
}

bool OAIGooglePrivacyDlpV2RecordKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RecordKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
