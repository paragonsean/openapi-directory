/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2TaggedField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2TaggedField::OAIGooglePrivacyDlpV2TaggedField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2TaggedField::OAIGooglePrivacyDlpV2TaggedField() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2TaggedField::~OAIGooglePrivacyDlpV2TaggedField() {}

void OAIGooglePrivacyDlpV2TaggedField::initializeModel() {

    m_custom_tag_isSet = false;
    m_custom_tag_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_inferred_isSet = false;
    m_inferred_isValid = false;

    m_info_type_isSet = false;
    m_info_type_isValid = false;
}

void OAIGooglePrivacyDlpV2TaggedField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2TaggedField::fromJsonObject(QJsonObject json) {

    m_custom_tag_isValid = ::OpenAPI::fromJsonValue(m_custom_tag, json[QString("customTag")]);
    m_custom_tag_isSet = !json[QString("customTag")].isNull() && m_custom_tag_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_inferred_isValid = ::OpenAPI::fromJsonValue(m_inferred, json[QString("inferred")]);
    m_inferred_isSet = !json[QString("inferred")].isNull() && m_inferred_isValid;

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("infoType")]);
    m_info_type_isSet = !json[QString("infoType")].isNull() && m_info_type_isValid;
}

QString OAIGooglePrivacyDlpV2TaggedField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2TaggedField::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_tag_isSet) {
        obj.insert(QString("customTag"), ::OpenAPI::toJsonValue(m_custom_tag));
    }
    if (m_field.isSet()) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_inferred_isSet) {
        obj.insert(QString("inferred"), ::OpenAPI::toJsonValue(m_inferred));
    }
    if (m_info_type.isSet()) {
        obj.insert(QString("infoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2TaggedField::getCustomTag() const {
    return m_custom_tag;
}
void OAIGooglePrivacyDlpV2TaggedField::setCustomTag(const QString &custom_tag) {
    m_custom_tag = custom_tag;
    m_custom_tag_isSet = true;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_custom_tag_Set() const{
    return m_custom_tag_isSet;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_custom_tag_Valid() const{
    return m_custom_tag_isValid;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2TaggedField::getField() const {
    return m_field;
}
void OAIGooglePrivacyDlpV2TaggedField::setField(const OAIGooglePrivacyDlpV2FieldId &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_field_Set() const{
    return m_field_isSet;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_field_Valid() const{
    return m_field_isValid;
}

OAIObject OAIGooglePrivacyDlpV2TaggedField::getInferred() const {
    return m_inferred;
}
void OAIGooglePrivacyDlpV2TaggedField::setInferred(const OAIObject &inferred) {
    m_inferred = inferred;
    m_inferred_isSet = true;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_inferred_Set() const{
    return m_inferred_isSet;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_inferred_Valid() const{
    return m_inferred_isValid;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2TaggedField::getInfoType() const {
    return m_info_type;
}
void OAIGooglePrivacyDlpV2TaggedField::setInfoType(const OAIGooglePrivacyDlpV2InfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2TaggedField::is_info_type_Valid() const{
    return m_info_type_isValid;
}

bool OAIGooglePrivacyDlpV2TaggedField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2TaggedField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
