/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2FieldTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2FieldTransformation::OAIGooglePrivacyDlpV2FieldTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2FieldTransformation::OAIGooglePrivacyDlpV2FieldTransformation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2FieldTransformation::~OAIGooglePrivacyDlpV2FieldTransformation() {}

void OAIGooglePrivacyDlpV2FieldTransformation::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_info_type_transformations_isSet = false;
    m_info_type_transformations_isValid = false;

    m_primitive_transformation_isSet = false;
    m_primitive_transformation_isValid = false;
}

void OAIGooglePrivacyDlpV2FieldTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2FieldTransformation::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_info_type_transformations_isValid = ::OpenAPI::fromJsonValue(m_info_type_transformations, json[QString("infoTypeTransformations")]);
    m_info_type_transformations_isSet = !json[QString("infoTypeTransformations")].isNull() && m_info_type_transformations_isValid;

    m_primitive_transformation_isValid = ::OpenAPI::fromJsonValue(m_primitive_transformation, json[QString("primitiveTransformation")]);
    m_primitive_transformation_isSet = !json[QString("primitiveTransformation")].isNull() && m_primitive_transformation_isValid;
}

QString OAIGooglePrivacyDlpV2FieldTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2FieldTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_info_type_transformations.isSet()) {
        obj.insert(QString("infoTypeTransformations"), ::OpenAPI::toJsonValue(m_info_type_transformations));
    }
    if (m_primitive_transformation.isSet()) {
        obj.insert(QString("primitiveTransformation"), ::OpenAPI::toJsonValue(m_primitive_transformation));
    }
    return obj;
}

OAIGooglePrivacyDlpV2RecordCondition OAIGooglePrivacyDlpV2FieldTransformation::getCondition() const {
    return m_condition;
}
void OAIGooglePrivacyDlpV2FieldTransformation::setCondition(const OAIGooglePrivacyDlpV2RecordCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_condition_Valid() const{
    return m_condition_isValid;
}

QList<OAIGooglePrivacyDlpV2FieldId> OAIGooglePrivacyDlpV2FieldTransformation::getFields() const {
    return m_fields;
}
void OAIGooglePrivacyDlpV2FieldTransformation::setFields(const QList<OAIGooglePrivacyDlpV2FieldId> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIGooglePrivacyDlpV2InfoTypeTransformations OAIGooglePrivacyDlpV2FieldTransformation::getInfoTypeTransformations() const {
    return m_info_type_transformations;
}
void OAIGooglePrivacyDlpV2FieldTransformation::setInfoTypeTransformations(const OAIGooglePrivacyDlpV2InfoTypeTransformations &info_type_transformations) {
    m_info_type_transformations = info_type_transformations;
    m_info_type_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_info_type_transformations_Set() const{
    return m_info_type_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_info_type_transformations_Valid() const{
    return m_info_type_transformations_isValid;
}

OAIGooglePrivacyDlpV2PrimitiveTransformation OAIGooglePrivacyDlpV2FieldTransformation::getPrimitiveTransformation() const {
    return m_primitive_transformation;
}
void OAIGooglePrivacyDlpV2FieldTransformation::setPrimitiveTransformation(const OAIGooglePrivacyDlpV2PrimitiveTransformation &primitive_transformation) {
    m_primitive_transformation = primitive_transformation;
    m_primitive_transformation_isSet = true;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_primitive_transformation_Set() const{
    return m_primitive_transformation_isSet;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::is_primitive_transformation_Valid() const{
    return m_primitive_transformation_isValid;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primitive_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2FieldTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
