/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2KmsWrappedCryptoKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::OAIGooglePrivacyDlpV2KmsWrappedCryptoKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::OAIGooglePrivacyDlpV2KmsWrappedCryptoKey() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::~OAIGooglePrivacyDlpV2KmsWrappedCryptoKey() {}

void OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::initializeModel() {

    m_crypto_key_name_isSet = false;
    m_crypto_key_name_isValid = false;

    m_wrapped_key_isSet = false;
    m_wrapped_key_isValid = false;
}

void OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::fromJsonObject(QJsonObject json) {

    m_crypto_key_name_isValid = ::OpenAPI::fromJsonValue(m_crypto_key_name, json[QString("cryptoKeyName")]);
    m_crypto_key_name_isSet = !json[QString("cryptoKeyName")].isNull() && m_crypto_key_name_isValid;

    m_wrapped_key_isValid = ::OpenAPI::fromJsonValue(m_wrapped_key, json[QString("wrappedKey")]);
    m_wrapped_key_isSet = !json[QString("wrappedKey")].isNull() && m_wrapped_key_isValid;
}

QString OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::asJsonObject() const {
    QJsonObject obj;
    if (m_crypto_key_name_isSet) {
        obj.insert(QString("cryptoKeyName"), ::OpenAPI::toJsonValue(m_crypto_key_name));
    }
    if (m_wrapped_key_isSet) {
        obj.insert(QString("wrappedKey"), ::OpenAPI::toJsonValue(m_wrapped_key));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::getCryptoKeyName() const {
    return m_crypto_key_name;
}
void OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::setCryptoKeyName(const QString &crypto_key_name) {
    m_crypto_key_name = crypto_key_name;
    m_crypto_key_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::is_crypto_key_name_Set() const{
    return m_crypto_key_name_isSet;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::is_crypto_key_name_Valid() const{
    return m_crypto_key_name_isValid;
}

QByteArray OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::getWrappedKey() const {
    return m_wrapped_key;
}
void OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::setWrappedKey(const QByteArray &wrapped_key) {
    m_wrapped_key = wrapped_key;
    m_wrapped_key_isSet = true;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::is_wrapped_key_Set() const{
    return m_wrapped_key_isSet;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::is_wrapped_key_Valid() const{
    return m_wrapped_key_isValid;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crypto_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapped_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2KmsWrappedCryptoKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
