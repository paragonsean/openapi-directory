/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2HybridOptions.h
 *
 * Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
 */

#ifndef OAIGooglePrivacyDlpV2HybridOptions_H
#define OAIGooglePrivacyDlpV2HybridOptions_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2TableOptions.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2TableOptions;

class OAIGooglePrivacyDlpV2HybridOptions : public OAIObject {
public:
    OAIGooglePrivacyDlpV2HybridOptions();
    OAIGooglePrivacyDlpV2HybridOptions(QString json);
    ~OAIGooglePrivacyDlpV2HybridOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QString> getRequiredFindingLabelKeys() const;
    void setRequiredFindingLabelKeys(const QList<QString> &required_finding_label_keys);
    bool is_required_finding_label_keys_Set() const;
    bool is_required_finding_label_keys_Valid() const;

    OAIGooglePrivacyDlpV2TableOptions getTableOptions() const;
    void setTableOptions(const OAIGooglePrivacyDlpV2TableOptions &table_options);
    bool is_table_options_Set() const;
    bool is_table_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QString> m_required_finding_label_keys;
    bool m_required_finding_label_keys_isSet;
    bool m_required_finding_label_keys_isValid;

    OAIGooglePrivacyDlpV2TableOptions m_table_options;
    bool m_table_options_isSet;
    bool m_table_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2HybridOptions)

#endif // OAIGooglePrivacyDlpV2HybridOptions_H
