/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2KAnonymityHistogramBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::OAIGooglePrivacyDlpV2KAnonymityHistogramBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::OAIGooglePrivacyDlpV2KAnonymityHistogramBucket() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::~OAIGooglePrivacyDlpV2KAnonymityHistogramBucket() {}

void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::initializeModel() {

    m_bucket_size_isSet = false;
    m_bucket_size_isValid = false;

    m_bucket_value_count_isSet = false;
    m_bucket_value_count_isValid = false;

    m_bucket_values_isSet = false;
    m_bucket_values_isValid = false;

    m_equivalence_class_size_lower_bound_isSet = false;
    m_equivalence_class_size_lower_bound_isValid = false;

    m_equivalence_class_size_upper_bound_isSet = false;
    m_equivalence_class_size_upper_bound_isValid = false;
}

void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::fromJsonObject(QJsonObject json) {

    m_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_bucket_size, json[QString("bucketSize")]);
    m_bucket_size_isSet = !json[QString("bucketSize")].isNull() && m_bucket_size_isValid;

    m_bucket_value_count_isValid = ::OpenAPI::fromJsonValue(m_bucket_value_count, json[QString("bucketValueCount")]);
    m_bucket_value_count_isSet = !json[QString("bucketValueCount")].isNull() && m_bucket_value_count_isValid;

    m_bucket_values_isValid = ::OpenAPI::fromJsonValue(m_bucket_values, json[QString("bucketValues")]);
    m_bucket_values_isSet = !json[QString("bucketValues")].isNull() && m_bucket_values_isValid;

    m_equivalence_class_size_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_equivalence_class_size_lower_bound, json[QString("equivalenceClassSizeLowerBound")]);
    m_equivalence_class_size_lower_bound_isSet = !json[QString("equivalenceClassSizeLowerBound")].isNull() && m_equivalence_class_size_lower_bound_isValid;

    m_equivalence_class_size_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_equivalence_class_size_upper_bound, json[QString("equivalenceClassSizeUpperBound")]);
    m_equivalence_class_size_upper_bound_isSet = !json[QString("equivalenceClassSizeUpperBound")].isNull() && m_equivalence_class_size_upper_bound_isValid;
}

QString OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_size_isSet) {
        obj.insert(QString("bucketSize"), ::OpenAPI::toJsonValue(m_bucket_size));
    }
    if (m_bucket_value_count_isSet) {
        obj.insert(QString("bucketValueCount"), ::OpenAPI::toJsonValue(m_bucket_value_count));
    }
    if (m_bucket_values.size() > 0) {
        obj.insert(QString("bucketValues"), ::OpenAPI::toJsonValue(m_bucket_values));
    }
    if (m_equivalence_class_size_lower_bound_isSet) {
        obj.insert(QString("equivalenceClassSizeLowerBound"), ::OpenAPI::toJsonValue(m_equivalence_class_size_lower_bound));
    }
    if (m_equivalence_class_size_upper_bound_isSet) {
        obj.insert(QString("equivalenceClassSizeUpperBound"), ::OpenAPI::toJsonValue(m_equivalence_class_size_upper_bound));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::getBucketSize() const {
    return m_bucket_size;
}
void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::setBucketSize(const QString &bucket_size) {
    m_bucket_size = bucket_size;
    m_bucket_size_isSet = true;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_size_Set() const{
    return m_bucket_size_isSet;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_size_Valid() const{
    return m_bucket_size_isValid;
}

QString OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::getBucketValueCount() const {
    return m_bucket_value_count;
}
void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::setBucketValueCount(const QString &bucket_value_count) {
    m_bucket_value_count = bucket_value_count;
    m_bucket_value_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_value_count_Set() const{
    return m_bucket_value_count_isSet;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_value_count_Valid() const{
    return m_bucket_value_count_isValid;
}

QList<OAIGooglePrivacyDlpV2KAnonymityEquivalenceClass> OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::getBucketValues() const {
    return m_bucket_values;
}
void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::setBucketValues(const QList<OAIGooglePrivacyDlpV2KAnonymityEquivalenceClass> &bucket_values) {
    m_bucket_values = bucket_values;
    m_bucket_values_isSet = true;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_values_Set() const{
    return m_bucket_values_isSet;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_bucket_values_Valid() const{
    return m_bucket_values_isValid;
}

QString OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::getEquivalenceClassSizeLowerBound() const {
    return m_equivalence_class_size_lower_bound;
}
void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::setEquivalenceClassSizeLowerBound(const QString &equivalence_class_size_lower_bound) {
    m_equivalence_class_size_lower_bound = equivalence_class_size_lower_bound;
    m_equivalence_class_size_lower_bound_isSet = true;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_equivalence_class_size_lower_bound_Set() const{
    return m_equivalence_class_size_lower_bound_isSet;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_equivalence_class_size_lower_bound_Valid() const{
    return m_equivalence_class_size_lower_bound_isValid;
}

QString OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::getEquivalenceClassSizeUpperBound() const {
    return m_equivalence_class_size_upper_bound;
}
void OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::setEquivalenceClassSizeUpperBound(const QString &equivalence_class_size_upper_bound) {
    m_equivalence_class_size_upper_bound = equivalence_class_size_upper_bound;
    m_equivalence_class_size_upper_bound_isSet = true;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_equivalence_class_size_upper_bound_Set() const{
    return m_equivalence_class_size_upper_bound_isSet;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::is_equivalence_class_size_upper_bound_Valid() const{
    return m_equivalence_class_size_upper_bound_isValid;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_equivalence_class_size_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equivalence_class_size_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2KAnonymityHistogramBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
