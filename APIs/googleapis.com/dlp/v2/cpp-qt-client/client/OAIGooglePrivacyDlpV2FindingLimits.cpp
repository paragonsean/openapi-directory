/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2FindingLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2FindingLimits::OAIGooglePrivacyDlpV2FindingLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2FindingLimits::OAIGooglePrivacyDlpV2FindingLimits() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2FindingLimits::~OAIGooglePrivacyDlpV2FindingLimits() {}

void OAIGooglePrivacyDlpV2FindingLimits::initializeModel() {

    m_max_findings_per_info_type_isSet = false;
    m_max_findings_per_info_type_isValid = false;

    m_max_findings_per_item_isSet = false;
    m_max_findings_per_item_isValid = false;

    m_max_findings_per_request_isSet = false;
    m_max_findings_per_request_isValid = false;
}

void OAIGooglePrivacyDlpV2FindingLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2FindingLimits::fromJsonObject(QJsonObject json) {

    m_max_findings_per_info_type_isValid = ::OpenAPI::fromJsonValue(m_max_findings_per_info_type, json[QString("maxFindingsPerInfoType")]);
    m_max_findings_per_info_type_isSet = !json[QString("maxFindingsPerInfoType")].isNull() && m_max_findings_per_info_type_isValid;

    m_max_findings_per_item_isValid = ::OpenAPI::fromJsonValue(m_max_findings_per_item, json[QString("maxFindingsPerItem")]);
    m_max_findings_per_item_isSet = !json[QString("maxFindingsPerItem")].isNull() && m_max_findings_per_item_isValid;

    m_max_findings_per_request_isValid = ::OpenAPI::fromJsonValue(m_max_findings_per_request, json[QString("maxFindingsPerRequest")]);
    m_max_findings_per_request_isSet = !json[QString("maxFindingsPerRequest")].isNull() && m_max_findings_per_request_isValid;
}

QString OAIGooglePrivacyDlpV2FindingLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2FindingLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_max_findings_per_info_type.size() > 0) {
        obj.insert(QString("maxFindingsPerInfoType"), ::OpenAPI::toJsonValue(m_max_findings_per_info_type));
    }
    if (m_max_findings_per_item_isSet) {
        obj.insert(QString("maxFindingsPerItem"), ::OpenAPI::toJsonValue(m_max_findings_per_item));
    }
    if (m_max_findings_per_request_isSet) {
        obj.insert(QString("maxFindingsPerRequest"), ::OpenAPI::toJsonValue(m_max_findings_per_request));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2InfoTypeLimit> OAIGooglePrivacyDlpV2FindingLimits::getMaxFindingsPerInfoType() const {
    return m_max_findings_per_info_type;
}
void OAIGooglePrivacyDlpV2FindingLimits::setMaxFindingsPerInfoType(const QList<OAIGooglePrivacyDlpV2InfoTypeLimit> &max_findings_per_info_type) {
    m_max_findings_per_info_type = max_findings_per_info_type;
    m_max_findings_per_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_info_type_Set() const{
    return m_max_findings_per_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_info_type_Valid() const{
    return m_max_findings_per_info_type_isValid;
}

qint32 OAIGooglePrivacyDlpV2FindingLimits::getMaxFindingsPerItem() const {
    return m_max_findings_per_item;
}
void OAIGooglePrivacyDlpV2FindingLimits::setMaxFindingsPerItem(const qint32 &max_findings_per_item) {
    m_max_findings_per_item = max_findings_per_item;
    m_max_findings_per_item_isSet = true;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_item_Set() const{
    return m_max_findings_per_item_isSet;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_item_Valid() const{
    return m_max_findings_per_item_isValid;
}

qint32 OAIGooglePrivacyDlpV2FindingLimits::getMaxFindingsPerRequest() const {
    return m_max_findings_per_request;
}
void OAIGooglePrivacyDlpV2FindingLimits::setMaxFindingsPerRequest(const qint32 &max_findings_per_request) {
    m_max_findings_per_request = max_findings_per_request;
    m_max_findings_per_request_isSet = true;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_request_Set() const{
    return m_max_findings_per_request_isSet;
}

bool OAIGooglePrivacyDlpV2FindingLimits::is_max_findings_per_request_Valid() const{
    return m_max_findings_per_request_isValid;
}

bool OAIGooglePrivacyDlpV2FindingLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_findings_per_info_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_findings_per_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_findings_per_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2FindingLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
