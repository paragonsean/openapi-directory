/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2OrConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2OrConditions::OAIGooglePrivacyDlpV2OrConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2OrConditions::OAIGooglePrivacyDlpV2OrConditions() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2OrConditions::~OAIGooglePrivacyDlpV2OrConditions() {}

void OAIGooglePrivacyDlpV2OrConditions::initializeModel() {

    m_min_age_isSet = false;
    m_min_age_isValid = false;

    m_min_row_count_isSet = false;
    m_min_row_count_isValid = false;
}

void OAIGooglePrivacyDlpV2OrConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2OrConditions::fromJsonObject(QJsonObject json) {

    m_min_age_isValid = ::OpenAPI::fromJsonValue(m_min_age, json[QString("minAge")]);
    m_min_age_isSet = !json[QString("minAge")].isNull() && m_min_age_isValid;

    m_min_row_count_isValid = ::OpenAPI::fromJsonValue(m_min_row_count, json[QString("minRowCount")]);
    m_min_row_count_isSet = !json[QString("minRowCount")].isNull() && m_min_row_count_isValid;
}

QString OAIGooglePrivacyDlpV2OrConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2OrConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_min_age_isSet) {
        obj.insert(QString("minAge"), ::OpenAPI::toJsonValue(m_min_age));
    }
    if (m_min_row_count_isSet) {
        obj.insert(QString("minRowCount"), ::OpenAPI::toJsonValue(m_min_row_count));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2OrConditions::getMinAge() const {
    return m_min_age;
}
void OAIGooglePrivacyDlpV2OrConditions::setMinAge(const QString &min_age) {
    m_min_age = min_age;
    m_min_age_isSet = true;
}

bool OAIGooglePrivacyDlpV2OrConditions::is_min_age_Set() const{
    return m_min_age_isSet;
}

bool OAIGooglePrivacyDlpV2OrConditions::is_min_age_Valid() const{
    return m_min_age_isValid;
}

qint32 OAIGooglePrivacyDlpV2OrConditions::getMinRowCount() const {
    return m_min_row_count;
}
void OAIGooglePrivacyDlpV2OrConditions::setMinRowCount(const qint32 &min_row_count) {
    m_min_row_count = min_row_count;
    m_min_row_count_isSet = true;
}

bool OAIGooglePrivacyDlpV2OrConditions::is_min_row_count_Set() const{
    return m_min_row_count_isSet;
}

bool OAIGooglePrivacyDlpV2OrConditions::is_min_row_count_Valid() const{
    return m_min_row_count_isValid;
}

bool OAIGooglePrivacyDlpV2OrConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2OrConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
