/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2ImageRedactionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2ImageRedactionConfig::OAIGooglePrivacyDlpV2ImageRedactionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2ImageRedactionConfig::OAIGooglePrivacyDlpV2ImageRedactionConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2ImageRedactionConfig::~OAIGooglePrivacyDlpV2ImageRedactionConfig() {}

void OAIGooglePrivacyDlpV2ImageRedactionConfig::initializeModel() {

    m_info_type_isSet = false;
    m_info_type_isValid = false;

    m_redact_all_text_isSet = false;
    m_redact_all_text_isValid = false;

    m_redaction_color_isSet = false;
    m_redaction_color_isValid = false;
}

void OAIGooglePrivacyDlpV2ImageRedactionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2ImageRedactionConfig::fromJsonObject(QJsonObject json) {

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("infoType")]);
    m_info_type_isSet = !json[QString("infoType")].isNull() && m_info_type_isValid;

    m_redact_all_text_isValid = ::OpenAPI::fromJsonValue(m_redact_all_text, json[QString("redactAllText")]);
    m_redact_all_text_isSet = !json[QString("redactAllText")].isNull() && m_redact_all_text_isValid;

    m_redaction_color_isValid = ::OpenAPI::fromJsonValue(m_redaction_color, json[QString("redactionColor")]);
    m_redaction_color_isSet = !json[QString("redactionColor")].isNull() && m_redaction_color_isValid;
}

QString OAIGooglePrivacyDlpV2ImageRedactionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2ImageRedactionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_info_type.isSet()) {
        obj.insert(QString("infoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    if (m_redact_all_text_isSet) {
        obj.insert(QString("redactAllText"), ::OpenAPI::toJsonValue(m_redact_all_text));
    }
    if (m_redaction_color.isSet()) {
        obj.insert(QString("redactionColor"), ::OpenAPI::toJsonValue(m_redaction_color));
    }
    return obj;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2ImageRedactionConfig::getInfoType() const {
    return m_info_type;
}
void OAIGooglePrivacyDlpV2ImageRedactionConfig::setInfoType(const OAIGooglePrivacyDlpV2InfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_info_type_Valid() const{
    return m_info_type_isValid;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::isRedactAllText() const {
    return m_redact_all_text;
}
void OAIGooglePrivacyDlpV2ImageRedactionConfig::setRedactAllText(const bool &redact_all_text) {
    m_redact_all_text = redact_all_text;
    m_redact_all_text_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_redact_all_text_Set() const{
    return m_redact_all_text_isSet;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_redact_all_text_Valid() const{
    return m_redact_all_text_isValid;
}

OAIGooglePrivacyDlpV2Color OAIGooglePrivacyDlpV2ImageRedactionConfig::getRedactionColor() const {
    return m_redaction_color;
}
void OAIGooglePrivacyDlpV2ImageRedactionConfig::setRedactionColor(const OAIGooglePrivacyDlpV2Color &redaction_color) {
    m_redaction_color = redaction_color;
    m_redaction_color_isSet = true;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_redaction_color_Set() const{
    return m_redaction_color_isSet;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::is_redaction_color_Valid() const{
    return m_redaction_color_isValid;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redact_all_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redaction_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2ImageRedactionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
