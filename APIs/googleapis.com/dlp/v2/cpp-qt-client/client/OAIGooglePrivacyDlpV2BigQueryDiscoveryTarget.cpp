/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::~OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget() {}

void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::initializeModel() {

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::fromJsonObject(QJsonObject json) {

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

OAIGooglePrivacyDlpV2DiscoveryGenerationCadence OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::getCadence() const {
    return m_cadence;
}
void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::setCadence(const OAIGooglePrivacyDlpV2DiscoveryGenerationCadence &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_cadence_Valid() const{
    return m_cadence_isValid;
}

OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::getConditions() const {
    return m_conditions;
}
void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::setConditions(const OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIObject OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::getDisabled() const {
    return m_disabled;
}
void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::setDisabled(const OAIObject &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAIGooglePrivacyDlpV2DiscoveryBigQueryFilter OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::getFilter() const {
    return m_filter;
}
void OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::setFilter(const OAIGooglePrivacyDlpV2DiscoveryBigQueryFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2BigQueryDiscoveryTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
