/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2CloudStorageOptions.h
 *
 * Options defining a file or a set of files within a Cloud Storage bucket.
 */

#ifndef OAIGooglePrivacyDlpV2CloudStorageOptions_H
#define OAIGooglePrivacyDlpV2CloudStorageOptions_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2FileSet.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2FileSet;

class OAIGooglePrivacyDlpV2CloudStorageOptions : public OAIObject {
public:
    OAIGooglePrivacyDlpV2CloudStorageOptions();
    OAIGooglePrivacyDlpV2CloudStorageOptions(QString json);
    ~OAIGooglePrivacyDlpV2CloudStorageOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBytesLimitPerFile() const;
    void setBytesLimitPerFile(const QString &bytes_limit_per_file);
    bool is_bytes_limit_per_file_Set() const;
    bool is_bytes_limit_per_file_Valid() const;

    qint32 getBytesLimitPerFilePercent() const;
    void setBytesLimitPerFilePercent(const qint32 &bytes_limit_per_file_percent);
    bool is_bytes_limit_per_file_percent_Set() const;
    bool is_bytes_limit_per_file_percent_Valid() const;

    OAIGooglePrivacyDlpV2FileSet getFileSet() const;
    void setFileSet(const OAIGooglePrivacyDlpV2FileSet &file_set);
    bool is_file_set_Set() const;
    bool is_file_set_Valid() const;

    QList<QString> getFileTypes() const;
    void setFileTypes(const QList<QString> &file_types);
    bool is_file_types_Set() const;
    bool is_file_types_Valid() const;

    qint32 getFilesLimitPercent() const;
    void setFilesLimitPercent(const qint32 &files_limit_percent);
    bool is_files_limit_percent_Set() const;
    bool is_files_limit_percent_Valid() const;

    QString getSampleMethod() const;
    void setSampleMethod(const QString &sample_method);
    bool is_sample_method_Set() const;
    bool is_sample_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bytes_limit_per_file;
    bool m_bytes_limit_per_file_isSet;
    bool m_bytes_limit_per_file_isValid;

    qint32 m_bytes_limit_per_file_percent;
    bool m_bytes_limit_per_file_percent_isSet;
    bool m_bytes_limit_per_file_percent_isValid;

    OAIGooglePrivacyDlpV2FileSet m_file_set;
    bool m_file_set_isSet;
    bool m_file_set_isValid;

    QList<QString> m_file_types;
    bool m_file_types_isSet;
    bool m_file_types_isValid;

    qint32 m_files_limit_percent;
    bool m_files_limit_percent_isSet;
    bool m_files_limit_percent_isValid;

    QString m_sample_method;
    bool m_sample_method_isSet;
    bool m_sample_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2CloudStorageOptions)

#endif // OAIGooglePrivacyDlpV2CloudStorageOptions_H
