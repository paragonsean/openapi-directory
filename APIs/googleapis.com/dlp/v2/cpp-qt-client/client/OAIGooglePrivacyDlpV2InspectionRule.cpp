/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InspectionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InspectionRule::OAIGooglePrivacyDlpV2InspectionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InspectionRule::OAIGooglePrivacyDlpV2InspectionRule() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InspectionRule::~OAIGooglePrivacyDlpV2InspectionRule() {}

void OAIGooglePrivacyDlpV2InspectionRule::initializeModel() {

    m_exclusion_rule_isSet = false;
    m_exclusion_rule_isValid = false;

    m_hotword_rule_isSet = false;
    m_hotword_rule_isValid = false;
}

void OAIGooglePrivacyDlpV2InspectionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InspectionRule::fromJsonObject(QJsonObject json) {

    m_exclusion_rule_isValid = ::OpenAPI::fromJsonValue(m_exclusion_rule, json[QString("exclusionRule")]);
    m_exclusion_rule_isSet = !json[QString("exclusionRule")].isNull() && m_exclusion_rule_isValid;

    m_hotword_rule_isValid = ::OpenAPI::fromJsonValue(m_hotword_rule, json[QString("hotwordRule")]);
    m_hotword_rule_isSet = !json[QString("hotwordRule")].isNull() && m_hotword_rule_isValid;
}

QString OAIGooglePrivacyDlpV2InspectionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InspectionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusion_rule.isSet()) {
        obj.insert(QString("exclusionRule"), ::OpenAPI::toJsonValue(m_exclusion_rule));
    }
    if (m_hotword_rule.isSet()) {
        obj.insert(QString("hotwordRule"), ::OpenAPI::toJsonValue(m_hotword_rule));
    }
    return obj;
}

OAIGooglePrivacyDlpV2ExclusionRule OAIGooglePrivacyDlpV2InspectionRule::getExclusionRule() const {
    return m_exclusion_rule;
}
void OAIGooglePrivacyDlpV2InspectionRule::setExclusionRule(const OAIGooglePrivacyDlpV2ExclusionRule &exclusion_rule) {
    m_exclusion_rule = exclusion_rule;
    m_exclusion_rule_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectionRule::is_exclusion_rule_Set() const{
    return m_exclusion_rule_isSet;
}

bool OAIGooglePrivacyDlpV2InspectionRule::is_exclusion_rule_Valid() const{
    return m_exclusion_rule_isValid;
}

OAIGooglePrivacyDlpV2HotwordRule OAIGooglePrivacyDlpV2InspectionRule::getHotwordRule() const {
    return m_hotword_rule;
}
void OAIGooglePrivacyDlpV2InspectionRule::setHotwordRule(const OAIGooglePrivacyDlpV2HotwordRule &hotword_rule) {
    m_hotword_rule = hotword_rule;
    m_hotword_rule_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectionRule::is_hotword_rule_Set() const{
    return m_hotword_rule_isSet;
}

bool OAIGooglePrivacyDlpV2InspectionRule::is_hotword_rule_Valid() const{
    return m_hotword_rule_isValid;
}

bool OAIGooglePrivacyDlpV2InspectionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusion_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotword_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InspectionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
