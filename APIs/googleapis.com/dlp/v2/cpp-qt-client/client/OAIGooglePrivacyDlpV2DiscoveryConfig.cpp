/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DiscoveryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DiscoveryConfig::OAIGooglePrivacyDlpV2DiscoveryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DiscoveryConfig::OAIGooglePrivacyDlpV2DiscoveryConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DiscoveryConfig::~OAIGooglePrivacyDlpV2DiscoveryConfig() {}

void OAIGooglePrivacyDlpV2DiscoveryConfig::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_inspect_templates_isSet = false;
    m_inspect_templates_isValid = false;

    m_last_run_time_isSet = false;
    m_last_run_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_config_isSet = false;
    m_org_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGooglePrivacyDlpV2DiscoveryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DiscoveryConfig::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_inspect_templates_isValid = ::OpenAPI::fromJsonValue(m_inspect_templates, json[QString("inspectTemplates")]);
    m_inspect_templates_isSet = !json[QString("inspectTemplates")].isNull() && m_inspect_templates_isValid;

    m_last_run_time_isValid = ::OpenAPI::fromJsonValue(m_last_run_time, json[QString("lastRunTime")]);
    m_last_run_time_isSet = !json[QString("lastRunTime")].isNull() && m_last_run_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_config_isValid = ::OpenAPI::fromJsonValue(m_org_config, json[QString("orgConfig")]);
    m_org_config_isSet = !json[QString("orgConfig")].isNull() && m_org_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DiscoveryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_inspect_templates.size() > 0) {
        obj.insert(QString("inspectTemplates"), ::OpenAPI::toJsonValue(m_inspect_templates));
    }
    if (m_last_run_time_isSet) {
        obj.insert(QString("lastRunTime"), ::OpenAPI::toJsonValue(m_last_run_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_config.isSet()) {
        obj.insert(QString("orgConfig"), ::OpenAPI::toJsonValue(m_org_config));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2DataProfileAction> OAIGooglePrivacyDlpV2DiscoveryConfig::getActions() const {
    return m_actions;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setActions(const QList<OAIGooglePrivacyDlpV2DataProfileAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getCreateTime() const {
    return m_create_time;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getDisplayName() const {
    return m_display_name;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIGooglePrivacyDlpV2Error> OAIGooglePrivacyDlpV2DiscoveryConfig::getErrors() const {
    return m_errors;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setErrors(const QList<OAIGooglePrivacyDlpV2Error> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2DiscoveryConfig::getInspectTemplates() const {
    return m_inspect_templates;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setInspectTemplates(const QList<QString> &inspect_templates) {
    m_inspect_templates = inspect_templates;
    m_inspect_templates_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_inspect_templates_Set() const{
    return m_inspect_templates_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_inspect_templates_Valid() const{
    return m_inspect_templates_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getLastRunTime() const {
    return m_last_run_time;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setLastRunTime(const QString &last_run_time) {
    m_last_run_time = last_run_time;
    m_last_run_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_last_run_time_Set() const{
    return m_last_run_time_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_last_run_time_Valid() const{
    return m_last_run_time_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getName() const {
    return m_name;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_name_Valid() const{
    return m_name_isValid;
}

OAIGooglePrivacyDlpV2OrgConfig OAIGooglePrivacyDlpV2DiscoveryConfig::getOrgConfig() const {
    return m_org_config;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setOrgConfig(const OAIGooglePrivacyDlpV2OrgConfig &org_config) {
    m_org_config = org_config;
    m_org_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_org_config_Set() const{
    return m_org_config_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_org_config_Valid() const{
    return m_org_config_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getStatus() const {
    return m_status;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIGooglePrivacyDlpV2DiscoveryTarget> OAIGooglePrivacyDlpV2DiscoveryConfig::getTargets() const {
    return m_targets;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setTargets(const QList<OAIGooglePrivacyDlpV2DiscoveryTarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_targets_Valid() const{
    return m_targets_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryConfig::getUpdateTime() const {
    return m_update_time;
}
void OAIGooglePrivacyDlpV2DiscoveryConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DiscoveryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
