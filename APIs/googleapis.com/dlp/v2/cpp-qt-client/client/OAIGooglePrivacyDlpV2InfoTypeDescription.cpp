/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InfoTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InfoTypeDescription::OAIGooglePrivacyDlpV2InfoTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InfoTypeDescription::OAIGooglePrivacyDlpV2InfoTypeDescription() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InfoTypeDescription::~OAIGooglePrivacyDlpV2InfoTypeDescription() {}

void OAIGooglePrivacyDlpV2InfoTypeDescription::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sensitivity_score_isSet = false;
    m_sensitivity_score_isValid = false;

    m_supported_by_isSet = false;
    m_supported_by_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIGooglePrivacyDlpV2InfoTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InfoTypeDescription::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sensitivity_score_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_score, json[QString("sensitivityScore")]);
    m_sensitivity_score_isSet = !json[QString("sensitivityScore")].isNull() && m_sensitivity_score_isValid;

    m_supported_by_isValid = ::OpenAPI::fromJsonValue(m_supported_by, json[QString("supportedBy")]);
    m_supported_by_isSet = !json[QString("supportedBy")].isNull() && m_supported_by_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InfoTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sensitivity_score.isSet()) {
        obj.insert(QString("sensitivityScore"), ::OpenAPI::toJsonValue(m_sensitivity_score));
    }
    if (m_supported_by.size() > 0) {
        obj.insert(QString("supportedBy"), ::OpenAPI::toJsonValue(m_supported_by));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2InfoTypeCategory> OAIGooglePrivacyDlpV2InfoTypeDescription::getCategories() const {
    return m_categories;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setCategories(const QList<OAIGooglePrivacyDlpV2InfoTypeCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeDescription::getDescription() const {
    return m_description;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeDescription::getDisplayName() const {
    return m_display_name;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeDescription::getName() const {
    return m_name;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIGooglePrivacyDlpV2SensitivityScore OAIGooglePrivacyDlpV2InfoTypeDescription::getSensitivityScore() const {
    return m_sensitivity_score;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setSensitivityScore(const OAIGooglePrivacyDlpV2SensitivityScore &sensitivity_score) {
    m_sensitivity_score = sensitivity_score;
    m_sensitivity_score_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_sensitivity_score_Set() const{
    return m_sensitivity_score_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_sensitivity_score_Valid() const{
    return m_sensitivity_score_isValid;
}

QList<QString> OAIGooglePrivacyDlpV2InfoTypeDescription::getSupportedBy() const {
    return m_supported_by;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setSupportedBy(const QList<QString> &supported_by) {
    m_supported_by = supported_by;
    m_supported_by_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_supported_by_Set() const{
    return m_supported_by_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_supported_by_Valid() const{
    return m_supported_by_isValid;
}

QList<OAIGooglePrivacyDlpV2VersionDescription> OAIGooglePrivacyDlpV2InfoTypeDescription::getVersions() const {
    return m_versions;
}
void OAIGooglePrivacyDlpV2InfoTypeDescription::setVersions(const QList<OAIGooglePrivacyDlpV2VersionDescription> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InfoTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
