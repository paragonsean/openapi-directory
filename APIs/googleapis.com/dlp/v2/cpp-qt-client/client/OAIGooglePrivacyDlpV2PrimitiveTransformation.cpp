/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2PrimitiveTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2PrimitiveTransformation::OAIGooglePrivacyDlpV2PrimitiveTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2PrimitiveTransformation::OAIGooglePrivacyDlpV2PrimitiveTransformation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2PrimitiveTransformation::~OAIGooglePrivacyDlpV2PrimitiveTransformation() {}

void OAIGooglePrivacyDlpV2PrimitiveTransformation::initializeModel() {

    m_bucketing_config_isSet = false;
    m_bucketing_config_isValid = false;

    m_character_mask_config_isSet = false;
    m_character_mask_config_isValid = false;

    m_crypto_deterministic_config_isSet = false;
    m_crypto_deterministic_config_isValid = false;

    m_crypto_hash_config_isSet = false;
    m_crypto_hash_config_isValid = false;

    m_crypto_replace_ffx_fpe_config_isSet = false;
    m_crypto_replace_ffx_fpe_config_isValid = false;

    m_date_shift_config_isSet = false;
    m_date_shift_config_isValid = false;

    m_fixed_size_bucketing_config_isSet = false;
    m_fixed_size_bucketing_config_isValid = false;

    m_redact_config_isSet = false;
    m_redact_config_isValid = false;

    m_replace_config_isSet = false;
    m_replace_config_isValid = false;

    m_replace_dictionary_config_isSet = false;
    m_replace_dictionary_config_isValid = false;

    m_replace_with_info_type_config_isSet = false;
    m_replace_with_info_type_config_isValid = false;

    m_time_part_config_isSet = false;
    m_time_part_config_isValid = false;
}

void OAIGooglePrivacyDlpV2PrimitiveTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2PrimitiveTransformation::fromJsonObject(QJsonObject json) {

    m_bucketing_config_isValid = ::OpenAPI::fromJsonValue(m_bucketing_config, json[QString("bucketingConfig")]);
    m_bucketing_config_isSet = !json[QString("bucketingConfig")].isNull() && m_bucketing_config_isValid;

    m_character_mask_config_isValid = ::OpenAPI::fromJsonValue(m_character_mask_config, json[QString("characterMaskConfig")]);
    m_character_mask_config_isSet = !json[QString("characterMaskConfig")].isNull() && m_character_mask_config_isValid;

    m_crypto_deterministic_config_isValid = ::OpenAPI::fromJsonValue(m_crypto_deterministic_config, json[QString("cryptoDeterministicConfig")]);
    m_crypto_deterministic_config_isSet = !json[QString("cryptoDeterministicConfig")].isNull() && m_crypto_deterministic_config_isValid;

    m_crypto_hash_config_isValid = ::OpenAPI::fromJsonValue(m_crypto_hash_config, json[QString("cryptoHashConfig")]);
    m_crypto_hash_config_isSet = !json[QString("cryptoHashConfig")].isNull() && m_crypto_hash_config_isValid;

    m_crypto_replace_ffx_fpe_config_isValid = ::OpenAPI::fromJsonValue(m_crypto_replace_ffx_fpe_config, json[QString("cryptoReplaceFfxFpeConfig")]);
    m_crypto_replace_ffx_fpe_config_isSet = !json[QString("cryptoReplaceFfxFpeConfig")].isNull() && m_crypto_replace_ffx_fpe_config_isValid;

    m_date_shift_config_isValid = ::OpenAPI::fromJsonValue(m_date_shift_config, json[QString("dateShiftConfig")]);
    m_date_shift_config_isSet = !json[QString("dateShiftConfig")].isNull() && m_date_shift_config_isValid;

    m_fixed_size_bucketing_config_isValid = ::OpenAPI::fromJsonValue(m_fixed_size_bucketing_config, json[QString("fixedSizeBucketingConfig")]);
    m_fixed_size_bucketing_config_isSet = !json[QString("fixedSizeBucketingConfig")].isNull() && m_fixed_size_bucketing_config_isValid;

    m_redact_config_isValid = ::OpenAPI::fromJsonValue(m_redact_config, json[QString("redactConfig")]);
    m_redact_config_isSet = !json[QString("redactConfig")].isNull() && m_redact_config_isValid;

    m_replace_config_isValid = ::OpenAPI::fromJsonValue(m_replace_config, json[QString("replaceConfig")]);
    m_replace_config_isSet = !json[QString("replaceConfig")].isNull() && m_replace_config_isValid;

    m_replace_dictionary_config_isValid = ::OpenAPI::fromJsonValue(m_replace_dictionary_config, json[QString("replaceDictionaryConfig")]);
    m_replace_dictionary_config_isSet = !json[QString("replaceDictionaryConfig")].isNull() && m_replace_dictionary_config_isValid;

    m_replace_with_info_type_config_isValid = ::OpenAPI::fromJsonValue(m_replace_with_info_type_config, json[QString("replaceWithInfoTypeConfig")]);
    m_replace_with_info_type_config_isSet = !json[QString("replaceWithInfoTypeConfig")].isNull() && m_replace_with_info_type_config_isValid;

    m_time_part_config_isValid = ::OpenAPI::fromJsonValue(m_time_part_config, json[QString("timePartConfig")]);
    m_time_part_config_isSet = !json[QString("timePartConfig")].isNull() && m_time_part_config_isValid;
}

QString OAIGooglePrivacyDlpV2PrimitiveTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2PrimitiveTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucketing_config.isSet()) {
        obj.insert(QString("bucketingConfig"), ::OpenAPI::toJsonValue(m_bucketing_config));
    }
    if (m_character_mask_config.isSet()) {
        obj.insert(QString("characterMaskConfig"), ::OpenAPI::toJsonValue(m_character_mask_config));
    }
    if (m_crypto_deterministic_config.isSet()) {
        obj.insert(QString("cryptoDeterministicConfig"), ::OpenAPI::toJsonValue(m_crypto_deterministic_config));
    }
    if (m_crypto_hash_config.isSet()) {
        obj.insert(QString("cryptoHashConfig"), ::OpenAPI::toJsonValue(m_crypto_hash_config));
    }
    if (m_crypto_replace_ffx_fpe_config.isSet()) {
        obj.insert(QString("cryptoReplaceFfxFpeConfig"), ::OpenAPI::toJsonValue(m_crypto_replace_ffx_fpe_config));
    }
    if (m_date_shift_config.isSet()) {
        obj.insert(QString("dateShiftConfig"), ::OpenAPI::toJsonValue(m_date_shift_config));
    }
    if (m_fixed_size_bucketing_config.isSet()) {
        obj.insert(QString("fixedSizeBucketingConfig"), ::OpenAPI::toJsonValue(m_fixed_size_bucketing_config));
    }
    if (m_redact_config_isSet) {
        obj.insert(QString("redactConfig"), ::OpenAPI::toJsonValue(m_redact_config));
    }
    if (m_replace_config.isSet()) {
        obj.insert(QString("replaceConfig"), ::OpenAPI::toJsonValue(m_replace_config));
    }
    if (m_replace_dictionary_config.isSet()) {
        obj.insert(QString("replaceDictionaryConfig"), ::OpenAPI::toJsonValue(m_replace_dictionary_config));
    }
    if (m_replace_with_info_type_config_isSet) {
        obj.insert(QString("replaceWithInfoTypeConfig"), ::OpenAPI::toJsonValue(m_replace_with_info_type_config));
    }
    if (m_time_part_config.isSet()) {
        obj.insert(QString("timePartConfig"), ::OpenAPI::toJsonValue(m_time_part_config));
    }
    return obj;
}

OAIGooglePrivacyDlpV2BucketingConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getBucketingConfig() const {
    return m_bucketing_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setBucketingConfig(const OAIGooglePrivacyDlpV2BucketingConfig &bucketing_config) {
    m_bucketing_config = bucketing_config;
    m_bucketing_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_bucketing_config_Set() const{
    return m_bucketing_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_bucketing_config_Valid() const{
    return m_bucketing_config_isValid;
}

OAIGooglePrivacyDlpV2CharacterMaskConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getCharacterMaskConfig() const {
    return m_character_mask_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setCharacterMaskConfig(const OAIGooglePrivacyDlpV2CharacterMaskConfig &character_mask_config) {
    m_character_mask_config = character_mask_config;
    m_character_mask_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_character_mask_config_Set() const{
    return m_character_mask_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_character_mask_config_Valid() const{
    return m_character_mask_config_isValid;
}

OAIGooglePrivacyDlpV2CryptoDeterministicConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getCryptoDeterministicConfig() const {
    return m_crypto_deterministic_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setCryptoDeterministicConfig(const OAIGooglePrivacyDlpV2CryptoDeterministicConfig &crypto_deterministic_config) {
    m_crypto_deterministic_config = crypto_deterministic_config;
    m_crypto_deterministic_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_deterministic_config_Set() const{
    return m_crypto_deterministic_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_deterministic_config_Valid() const{
    return m_crypto_deterministic_config_isValid;
}

OAIGooglePrivacyDlpV2CryptoHashConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getCryptoHashConfig() const {
    return m_crypto_hash_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setCryptoHashConfig(const OAIGooglePrivacyDlpV2CryptoHashConfig &crypto_hash_config) {
    m_crypto_hash_config = crypto_hash_config;
    m_crypto_hash_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_hash_config_Set() const{
    return m_crypto_hash_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_hash_config_Valid() const{
    return m_crypto_hash_config_isValid;
}

OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getCryptoReplaceFfxFpeConfig() const {
    return m_crypto_replace_ffx_fpe_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setCryptoReplaceFfxFpeConfig(const OAIGooglePrivacyDlpV2CryptoReplaceFfxFpeConfig &crypto_replace_ffx_fpe_config) {
    m_crypto_replace_ffx_fpe_config = crypto_replace_ffx_fpe_config;
    m_crypto_replace_ffx_fpe_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_replace_ffx_fpe_config_Set() const{
    return m_crypto_replace_ffx_fpe_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_crypto_replace_ffx_fpe_config_Valid() const{
    return m_crypto_replace_ffx_fpe_config_isValid;
}

OAIGooglePrivacyDlpV2DateShiftConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getDateShiftConfig() const {
    return m_date_shift_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setDateShiftConfig(const OAIGooglePrivacyDlpV2DateShiftConfig &date_shift_config) {
    m_date_shift_config = date_shift_config;
    m_date_shift_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_date_shift_config_Set() const{
    return m_date_shift_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_date_shift_config_Valid() const{
    return m_date_shift_config_isValid;
}

OAIGooglePrivacyDlpV2FixedSizeBucketingConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getFixedSizeBucketingConfig() const {
    return m_fixed_size_bucketing_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setFixedSizeBucketingConfig(const OAIGooglePrivacyDlpV2FixedSizeBucketingConfig &fixed_size_bucketing_config) {
    m_fixed_size_bucketing_config = fixed_size_bucketing_config;
    m_fixed_size_bucketing_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_fixed_size_bucketing_config_Set() const{
    return m_fixed_size_bucketing_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_fixed_size_bucketing_config_Valid() const{
    return m_fixed_size_bucketing_config_isValid;
}

OAIObject OAIGooglePrivacyDlpV2PrimitiveTransformation::getRedactConfig() const {
    return m_redact_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setRedactConfig(const OAIObject &redact_config) {
    m_redact_config = redact_config;
    m_redact_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_redact_config_Set() const{
    return m_redact_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_redact_config_Valid() const{
    return m_redact_config_isValid;
}

OAIGooglePrivacyDlpV2ReplaceValueConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getReplaceConfig() const {
    return m_replace_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setReplaceConfig(const OAIGooglePrivacyDlpV2ReplaceValueConfig &replace_config) {
    m_replace_config = replace_config;
    m_replace_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_config_Set() const{
    return m_replace_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_config_Valid() const{
    return m_replace_config_isValid;
}

OAIGooglePrivacyDlpV2ReplaceDictionaryConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getReplaceDictionaryConfig() const {
    return m_replace_dictionary_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setReplaceDictionaryConfig(const OAIGooglePrivacyDlpV2ReplaceDictionaryConfig &replace_dictionary_config) {
    m_replace_dictionary_config = replace_dictionary_config;
    m_replace_dictionary_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_dictionary_config_Set() const{
    return m_replace_dictionary_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_dictionary_config_Valid() const{
    return m_replace_dictionary_config_isValid;
}

OAIObject OAIGooglePrivacyDlpV2PrimitiveTransformation::getReplaceWithInfoTypeConfig() const {
    return m_replace_with_info_type_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setReplaceWithInfoTypeConfig(const OAIObject &replace_with_info_type_config) {
    m_replace_with_info_type_config = replace_with_info_type_config;
    m_replace_with_info_type_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_with_info_type_config_Set() const{
    return m_replace_with_info_type_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_replace_with_info_type_config_Valid() const{
    return m_replace_with_info_type_config_isValid;
}

OAIGooglePrivacyDlpV2TimePartConfig OAIGooglePrivacyDlpV2PrimitiveTransformation::getTimePartConfig() const {
    return m_time_part_config;
}
void OAIGooglePrivacyDlpV2PrimitiveTransformation::setTimePartConfig(const OAIGooglePrivacyDlpV2TimePartConfig &time_part_config) {
    m_time_part_config = time_part_config;
    m_time_part_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_time_part_config_Set() const{
    return m_time_part_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::is_time_part_config_Valid() const{
    return m_time_part_config_isValid;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucketing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_mask_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_deterministic_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_hash_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_replace_ffx_fpe_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_shift_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_size_bucketing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redact_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_dictionary_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_with_info_type_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_part_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2PrimitiveTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
