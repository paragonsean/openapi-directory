/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::~OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest() {}

void OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIGooglePrivacyDlpV2StoredInfoTypeConfig OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::getConfig() const {
    return m_config;
}
void OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::setConfig(const OAIGooglePrivacyDlpV2StoredInfoTypeConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
