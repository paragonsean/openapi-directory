/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DlpJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DlpJob::OAIGooglePrivacyDlpV2DlpJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DlpJob::OAIGooglePrivacyDlpV2DlpJob() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DlpJob::~OAIGooglePrivacyDlpV2DlpJob() {}

void OAIGooglePrivacyDlpV2DlpJob::initializeModel() {

    m_action_details_isSet = false;
    m_action_details_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_inspect_details_isSet = false;
    m_inspect_details_isValid = false;

    m_job_trigger_name_isSet = false;
    m_job_trigger_name_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_risk_details_isSet = false;
    m_risk_details_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGooglePrivacyDlpV2DlpJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DlpJob::fromJsonObject(QJsonObject json) {

    m_action_details_isValid = ::OpenAPI::fromJsonValue(m_action_details, json[QString("actionDetails")]);
    m_action_details_isSet = !json[QString("actionDetails")].isNull() && m_action_details_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_inspect_details_isValid = ::OpenAPI::fromJsonValue(m_inspect_details, json[QString("inspectDetails")]);
    m_inspect_details_isSet = !json[QString("inspectDetails")].isNull() && m_inspect_details_isValid;

    m_job_trigger_name_isValid = ::OpenAPI::fromJsonValue(m_job_trigger_name, json[QString("jobTriggerName")]);
    m_job_trigger_name_isSet = !json[QString("jobTriggerName")].isNull() && m_job_trigger_name_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_risk_details_isValid = ::OpenAPI::fromJsonValue(m_risk_details, json[QString("riskDetails")]);
    m_risk_details_isSet = !json[QString("riskDetails")].isNull() && m_risk_details_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DlpJob::asJsonObject() const {
    QJsonObject obj;
    if (m_action_details.size() > 0) {
        obj.insert(QString("actionDetails"), ::OpenAPI::toJsonValue(m_action_details));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_inspect_details.isSet()) {
        obj.insert(QString("inspectDetails"), ::OpenAPI::toJsonValue(m_inspect_details));
    }
    if (m_job_trigger_name_isSet) {
        obj.insert(QString("jobTriggerName"), ::OpenAPI::toJsonValue(m_job_trigger_name));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_risk_details.isSet()) {
        obj.insert(QString("riskDetails"), ::OpenAPI::toJsonValue(m_risk_details));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2ActionDetails> OAIGooglePrivacyDlpV2DlpJob::getActionDetails() const {
    return m_action_details;
}
void OAIGooglePrivacyDlpV2DlpJob::setActionDetails(const QList<OAIGooglePrivacyDlpV2ActionDetails> &action_details) {
    m_action_details = action_details;
    m_action_details_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_action_details_Set() const{
    return m_action_details_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_action_details_Valid() const{
    return m_action_details_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getCreateTime() const {
    return m_create_time;
}
void OAIGooglePrivacyDlpV2DlpJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getEndTime() const {
    return m_end_time;
}
void OAIGooglePrivacyDlpV2DlpJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIGooglePrivacyDlpV2Error> OAIGooglePrivacyDlpV2DlpJob::getErrors() const {
    return m_errors;
}
void OAIGooglePrivacyDlpV2DlpJob::setErrors(const QList<OAIGooglePrivacyDlpV2Error> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIGooglePrivacyDlpV2InspectDataSourceDetails OAIGooglePrivacyDlpV2DlpJob::getInspectDetails() const {
    return m_inspect_details;
}
void OAIGooglePrivacyDlpV2DlpJob::setInspectDetails(const OAIGooglePrivacyDlpV2InspectDataSourceDetails &inspect_details) {
    m_inspect_details = inspect_details;
    m_inspect_details_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_inspect_details_Set() const{
    return m_inspect_details_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_inspect_details_Valid() const{
    return m_inspect_details_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getJobTriggerName() const {
    return m_job_trigger_name;
}
void OAIGooglePrivacyDlpV2DlpJob::setJobTriggerName(const QString &job_trigger_name) {
    m_job_trigger_name = job_trigger_name;
    m_job_trigger_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_job_trigger_name_Set() const{
    return m_job_trigger_name_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_job_trigger_name_Valid() const{
    return m_job_trigger_name_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getLastModified() const {
    return m_last_modified;
}
void OAIGooglePrivacyDlpV2DlpJob::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getName() const {
    return m_name;
}
void OAIGooglePrivacyDlpV2DlpJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_name_Valid() const{
    return m_name_isValid;
}

OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails OAIGooglePrivacyDlpV2DlpJob::getRiskDetails() const {
    return m_risk_details;
}
void OAIGooglePrivacyDlpV2DlpJob::setRiskDetails(const OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails &risk_details) {
    m_risk_details = risk_details;
    m_risk_details_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_risk_details_Set() const{
    return m_risk_details_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_risk_details_Valid() const{
    return m_risk_details_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getStartTime() const {
    return m_start_time;
}
void OAIGooglePrivacyDlpV2DlpJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getState() const {
    return m_state;
}
void OAIGooglePrivacyDlpV2DlpJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGooglePrivacyDlpV2DlpJob::getType() const {
    return m_type;
}
void OAIGooglePrivacyDlpV2DlpJob::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGooglePrivacyDlpV2DlpJob::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGooglePrivacyDlpV2DlpJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_trigger_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DlpJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
