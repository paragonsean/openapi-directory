/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InspectionRuleSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InspectionRuleSet::OAIGooglePrivacyDlpV2InspectionRuleSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InspectionRuleSet::OAIGooglePrivacyDlpV2InspectionRuleSet() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InspectionRuleSet::~OAIGooglePrivacyDlpV2InspectionRuleSet() {}

void OAIGooglePrivacyDlpV2InspectionRuleSet::initializeModel() {

    m_info_types_isSet = false;
    m_info_types_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIGooglePrivacyDlpV2InspectionRuleSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InspectionRuleSet::fromJsonObject(QJsonObject json) {

    m_info_types_isValid = ::OpenAPI::fromJsonValue(m_info_types, json[QString("infoTypes")]);
    m_info_types_isSet = !json[QString("infoTypes")].isNull() && m_info_types_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIGooglePrivacyDlpV2InspectionRuleSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InspectionRuleSet::asJsonObject() const {
    QJsonObject obj;
    if (m_info_types.size() > 0) {
        obj.insert(QString("infoTypes"), ::OpenAPI::toJsonValue(m_info_types));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2InfoType> OAIGooglePrivacyDlpV2InspectionRuleSet::getInfoTypes() const {
    return m_info_types;
}
void OAIGooglePrivacyDlpV2InspectionRuleSet::setInfoTypes(const QList<OAIGooglePrivacyDlpV2InfoType> &info_types) {
    m_info_types = info_types;
    m_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::is_info_types_Set() const{
    return m_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::is_info_types_Valid() const{
    return m_info_types_isValid;
}

QList<OAIGooglePrivacyDlpV2InspectionRule> OAIGooglePrivacyDlpV2InspectionRuleSet::getRules() const {
    return m_rules;
}
void OAIGooglePrivacyDlpV2InspectionRuleSet::setRules(const QList<OAIGooglePrivacyDlpV2InspectionRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InspectionRuleSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
