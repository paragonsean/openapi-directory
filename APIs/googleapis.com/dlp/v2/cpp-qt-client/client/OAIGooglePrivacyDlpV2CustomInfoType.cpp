/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CustomInfoType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CustomInfoType::OAIGooglePrivacyDlpV2CustomInfoType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CustomInfoType::OAIGooglePrivacyDlpV2CustomInfoType() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CustomInfoType::~OAIGooglePrivacyDlpV2CustomInfoType() {}

void OAIGooglePrivacyDlpV2CustomInfoType::initializeModel() {

    m_detection_rules_isSet = false;
    m_detection_rules_isValid = false;

    m_dictionary_isSet = false;
    m_dictionary_isValid = false;

    m_exclusion_type_isSet = false;
    m_exclusion_type_isValid = false;

    m_info_type_isSet = false;
    m_info_type_isValid = false;

    m_likelihood_isSet = false;
    m_likelihood_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_sensitivity_score_isSet = false;
    m_sensitivity_score_isValid = false;

    m_stored_type_isSet = false;
    m_stored_type_isValid = false;

    m_surrogate_type_isSet = false;
    m_surrogate_type_isValid = false;
}

void OAIGooglePrivacyDlpV2CustomInfoType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CustomInfoType::fromJsonObject(QJsonObject json) {

    m_detection_rules_isValid = ::OpenAPI::fromJsonValue(m_detection_rules, json[QString("detectionRules")]);
    m_detection_rules_isSet = !json[QString("detectionRules")].isNull() && m_detection_rules_isValid;

    m_dictionary_isValid = ::OpenAPI::fromJsonValue(m_dictionary, json[QString("dictionary")]);
    m_dictionary_isSet = !json[QString("dictionary")].isNull() && m_dictionary_isValid;

    m_exclusion_type_isValid = ::OpenAPI::fromJsonValue(m_exclusion_type, json[QString("exclusionType")]);
    m_exclusion_type_isSet = !json[QString("exclusionType")].isNull() && m_exclusion_type_isValid;

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("infoType")]);
    m_info_type_isSet = !json[QString("infoType")].isNull() && m_info_type_isValid;

    m_likelihood_isValid = ::OpenAPI::fromJsonValue(m_likelihood, json[QString("likelihood")]);
    m_likelihood_isSet = !json[QString("likelihood")].isNull() && m_likelihood_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_sensitivity_score_isValid = ::OpenAPI::fromJsonValue(m_sensitivity_score, json[QString("sensitivityScore")]);
    m_sensitivity_score_isSet = !json[QString("sensitivityScore")].isNull() && m_sensitivity_score_isValid;

    m_stored_type_isValid = ::OpenAPI::fromJsonValue(m_stored_type, json[QString("storedType")]);
    m_stored_type_isSet = !json[QString("storedType")].isNull() && m_stored_type_isValid;

    m_surrogate_type_isValid = ::OpenAPI::fromJsonValue(m_surrogate_type, json[QString("surrogateType")]);
    m_surrogate_type_isSet = !json[QString("surrogateType")].isNull() && m_surrogate_type_isValid;
}

QString OAIGooglePrivacyDlpV2CustomInfoType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CustomInfoType::asJsonObject() const {
    QJsonObject obj;
    if (m_detection_rules.size() > 0) {
        obj.insert(QString("detectionRules"), ::OpenAPI::toJsonValue(m_detection_rules));
    }
    if (m_dictionary.isSet()) {
        obj.insert(QString("dictionary"), ::OpenAPI::toJsonValue(m_dictionary));
    }
    if (m_exclusion_type_isSet) {
        obj.insert(QString("exclusionType"), ::OpenAPI::toJsonValue(m_exclusion_type));
    }
    if (m_info_type.isSet()) {
        obj.insert(QString("infoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    if (m_likelihood_isSet) {
        obj.insert(QString("likelihood"), ::OpenAPI::toJsonValue(m_likelihood));
    }
    if (m_regex.isSet()) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_sensitivity_score.isSet()) {
        obj.insert(QString("sensitivityScore"), ::OpenAPI::toJsonValue(m_sensitivity_score));
    }
    if (m_stored_type.isSet()) {
        obj.insert(QString("storedType"), ::OpenAPI::toJsonValue(m_stored_type));
    }
    if (m_surrogate_type_isSet) {
        obj.insert(QString("surrogateType"), ::OpenAPI::toJsonValue(m_surrogate_type));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2DetectionRule> OAIGooglePrivacyDlpV2CustomInfoType::getDetectionRules() const {
    return m_detection_rules;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setDetectionRules(const QList<OAIGooglePrivacyDlpV2DetectionRule> &detection_rules) {
    m_detection_rules = detection_rules;
    m_detection_rules_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_detection_rules_Set() const{
    return m_detection_rules_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_detection_rules_Valid() const{
    return m_detection_rules_isValid;
}

OAIGooglePrivacyDlpV2Dictionary OAIGooglePrivacyDlpV2CustomInfoType::getDictionary() const {
    return m_dictionary;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setDictionary(const OAIGooglePrivacyDlpV2Dictionary &dictionary) {
    m_dictionary = dictionary;
    m_dictionary_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_dictionary_Set() const{
    return m_dictionary_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_dictionary_Valid() const{
    return m_dictionary_isValid;
}

QString OAIGooglePrivacyDlpV2CustomInfoType::getExclusionType() const {
    return m_exclusion_type;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setExclusionType(const QString &exclusion_type) {
    m_exclusion_type = exclusion_type;
    m_exclusion_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_exclusion_type_Set() const{
    return m_exclusion_type_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_exclusion_type_Valid() const{
    return m_exclusion_type_isValid;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2CustomInfoType::getInfoType() const {
    return m_info_type;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setInfoType(const OAIGooglePrivacyDlpV2InfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_info_type_Valid() const{
    return m_info_type_isValid;
}

QString OAIGooglePrivacyDlpV2CustomInfoType::getLikelihood() const {
    return m_likelihood;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setLikelihood(const QString &likelihood) {
    m_likelihood = likelihood;
    m_likelihood_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_likelihood_Set() const{
    return m_likelihood_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_likelihood_Valid() const{
    return m_likelihood_isValid;
}

OAIGooglePrivacyDlpV2Regex OAIGooglePrivacyDlpV2CustomInfoType::getRegex() const {
    return m_regex;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setRegex(const OAIGooglePrivacyDlpV2Regex &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_regex_Valid() const{
    return m_regex_isValid;
}

OAIGooglePrivacyDlpV2SensitivityScore OAIGooglePrivacyDlpV2CustomInfoType::getSensitivityScore() const {
    return m_sensitivity_score;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setSensitivityScore(const OAIGooglePrivacyDlpV2SensitivityScore &sensitivity_score) {
    m_sensitivity_score = sensitivity_score;
    m_sensitivity_score_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_sensitivity_score_Set() const{
    return m_sensitivity_score_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_sensitivity_score_Valid() const{
    return m_sensitivity_score_isValid;
}

OAIGooglePrivacyDlpV2StoredType OAIGooglePrivacyDlpV2CustomInfoType::getStoredType() const {
    return m_stored_type;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setStoredType(const OAIGooglePrivacyDlpV2StoredType &stored_type) {
    m_stored_type = stored_type;
    m_stored_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_stored_type_Set() const{
    return m_stored_type_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_stored_type_Valid() const{
    return m_stored_type_isValid;
}

OAIObject OAIGooglePrivacyDlpV2CustomInfoType::getSurrogateType() const {
    return m_surrogate_type;
}
void OAIGooglePrivacyDlpV2CustomInfoType::setSurrogateType(const OAIObject &surrogate_type) {
    m_surrogate_type = surrogate_type;
    m_surrogate_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_surrogate_type_Set() const{
    return m_surrogate_type_isSet;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::is_surrogate_type_Valid() const{
    return m_surrogate_type_isValid;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detection_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dictionary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surrogate_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CustomInfoType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
