/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DateShiftConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DateShiftConfig::OAIGooglePrivacyDlpV2DateShiftConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DateShiftConfig::OAIGooglePrivacyDlpV2DateShiftConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DateShiftConfig::~OAIGooglePrivacyDlpV2DateShiftConfig() {}

void OAIGooglePrivacyDlpV2DateShiftConfig::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_crypto_key_isSet = false;
    m_crypto_key_isValid = false;

    m_lower_bound_days_isSet = false;
    m_lower_bound_days_isValid = false;

    m_upper_bound_days_isSet = false;
    m_upper_bound_days_isValid = false;
}

void OAIGooglePrivacyDlpV2DateShiftConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DateShiftConfig::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_crypto_key_isValid = ::OpenAPI::fromJsonValue(m_crypto_key, json[QString("cryptoKey")]);
    m_crypto_key_isSet = !json[QString("cryptoKey")].isNull() && m_crypto_key_isValid;

    m_lower_bound_days_isValid = ::OpenAPI::fromJsonValue(m_lower_bound_days, json[QString("lowerBoundDays")]);
    m_lower_bound_days_isSet = !json[QString("lowerBoundDays")].isNull() && m_lower_bound_days_isValid;

    m_upper_bound_days_isValid = ::OpenAPI::fromJsonValue(m_upper_bound_days, json[QString("upperBoundDays")]);
    m_upper_bound_days_isSet = !json[QString("upperBoundDays")].isNull() && m_upper_bound_days_isValid;
}

QString OAIGooglePrivacyDlpV2DateShiftConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DateShiftConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_crypto_key.isSet()) {
        obj.insert(QString("cryptoKey"), ::OpenAPI::toJsonValue(m_crypto_key));
    }
    if (m_lower_bound_days_isSet) {
        obj.insert(QString("lowerBoundDays"), ::OpenAPI::toJsonValue(m_lower_bound_days));
    }
    if (m_upper_bound_days_isSet) {
        obj.insert(QString("upperBoundDays"), ::OpenAPI::toJsonValue(m_upper_bound_days));
    }
    return obj;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2DateShiftConfig::getContext() const {
    return m_context;
}
void OAIGooglePrivacyDlpV2DateShiftConfig::setContext(const OAIGooglePrivacyDlpV2FieldId &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_context_Valid() const{
    return m_context_isValid;
}

OAIGooglePrivacyDlpV2CryptoKey OAIGooglePrivacyDlpV2DateShiftConfig::getCryptoKey() const {
    return m_crypto_key;
}
void OAIGooglePrivacyDlpV2DateShiftConfig::setCryptoKey(const OAIGooglePrivacyDlpV2CryptoKey &crypto_key) {
    m_crypto_key = crypto_key;
    m_crypto_key_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_crypto_key_Set() const{
    return m_crypto_key_isSet;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_crypto_key_Valid() const{
    return m_crypto_key_isValid;
}

qint32 OAIGooglePrivacyDlpV2DateShiftConfig::getLowerBoundDays() const {
    return m_lower_bound_days;
}
void OAIGooglePrivacyDlpV2DateShiftConfig::setLowerBoundDays(const qint32 &lower_bound_days) {
    m_lower_bound_days = lower_bound_days;
    m_lower_bound_days_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_lower_bound_days_Set() const{
    return m_lower_bound_days_isSet;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_lower_bound_days_Valid() const{
    return m_lower_bound_days_isValid;
}

qint32 OAIGooglePrivacyDlpV2DateShiftConfig::getUpperBoundDays() const {
    return m_upper_bound_days;
}
void OAIGooglePrivacyDlpV2DateShiftConfig::setUpperBoundDays(const qint32 &upper_bound_days) {
    m_upper_bound_days = upper_bound_days;
    m_upper_bound_days_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_upper_bound_days_Set() const{
    return m_upper_bound_days_isSet;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::is_upper_bound_days_Valid() const{
    return m_upper_bound_days_isValid;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_bound_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_bound_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DateShiftConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
