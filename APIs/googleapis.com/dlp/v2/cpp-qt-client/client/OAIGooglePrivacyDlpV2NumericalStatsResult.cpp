/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2NumericalStatsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2NumericalStatsResult::OAIGooglePrivacyDlpV2NumericalStatsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2NumericalStatsResult::OAIGooglePrivacyDlpV2NumericalStatsResult() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2NumericalStatsResult::~OAIGooglePrivacyDlpV2NumericalStatsResult() {}

void OAIGooglePrivacyDlpV2NumericalStatsResult::initializeModel() {

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_quantile_values_isSet = false;
    m_quantile_values_isValid = false;
}

void OAIGooglePrivacyDlpV2NumericalStatsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2NumericalStatsResult::fromJsonObject(QJsonObject json) {

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_quantile_values_isValid = ::OpenAPI::fromJsonValue(m_quantile_values, json[QString("quantileValues")]);
    m_quantile_values_isSet = !json[QString("quantileValues")].isNull() && m_quantile_values_isValid;
}

QString OAIGooglePrivacyDlpV2NumericalStatsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2NumericalStatsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_max_value.isSet()) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value.isSet()) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_quantile_values.size() > 0) {
        obj.insert(QString("quantileValues"), ::OpenAPI::toJsonValue(m_quantile_values));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Value OAIGooglePrivacyDlpV2NumericalStatsResult::getMaxValue() const {
    return m_max_value;
}
void OAIGooglePrivacyDlpV2NumericalStatsResult::setMaxValue(const OAIGooglePrivacyDlpV2Value &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_max_value_Valid() const{
    return m_max_value_isValid;
}

OAIGooglePrivacyDlpV2Value OAIGooglePrivacyDlpV2NumericalStatsResult::getMinValue() const {
    return m_min_value;
}
void OAIGooglePrivacyDlpV2NumericalStatsResult::setMinValue(const OAIGooglePrivacyDlpV2Value &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QList<OAIGooglePrivacyDlpV2Value> OAIGooglePrivacyDlpV2NumericalStatsResult::getQuantileValues() const {
    return m_quantile_values;
}
void OAIGooglePrivacyDlpV2NumericalStatsResult::setQuantileValues(const QList<OAIGooglePrivacyDlpV2Value> &quantile_values) {
    m_quantile_values = quantile_values;
    m_quantile_values_isSet = true;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_quantile_values_Set() const{
    return m_quantile_values_isSet;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::is_quantile_values_Valid() const{
    return m_quantile_values_isValid;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantile_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2NumericalStatsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
