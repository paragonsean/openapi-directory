/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2StoredInfoType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2StoredInfoType::OAIGooglePrivacyDlpV2StoredInfoType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2StoredInfoType::OAIGooglePrivacyDlpV2StoredInfoType() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2StoredInfoType::~OAIGooglePrivacyDlpV2StoredInfoType() {}

void OAIGooglePrivacyDlpV2StoredInfoType::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_versions_isSet = false;
    m_pending_versions_isValid = false;
}

void OAIGooglePrivacyDlpV2StoredInfoType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2StoredInfoType::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_versions_isValid = ::OpenAPI::fromJsonValue(m_pending_versions, json[QString("pendingVersions")]);
    m_pending_versions_isSet = !json[QString("pendingVersions")].isNull() && m_pending_versions_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2StoredInfoType::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version.isSet()) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_versions.size() > 0) {
        obj.insert(QString("pendingVersions"), ::OpenAPI::toJsonValue(m_pending_versions));
    }
    return obj;
}

OAIGooglePrivacyDlpV2StoredInfoTypeVersion OAIGooglePrivacyDlpV2StoredInfoType::getCurrentVersion() const {
    return m_current_version;
}
void OAIGooglePrivacyDlpV2StoredInfoType::setCurrentVersion(const OAIGooglePrivacyDlpV2StoredInfoTypeVersion &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoType::getName() const {
    return m_name;
}
void OAIGooglePrivacyDlpV2StoredInfoType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGooglePrivacyDlpV2StoredInfoTypeVersion> OAIGooglePrivacyDlpV2StoredInfoType::getPendingVersions() const {
    return m_pending_versions;
}
void OAIGooglePrivacyDlpV2StoredInfoType::setPendingVersions(const QList<OAIGooglePrivacyDlpV2StoredInfoTypeVersion> &pending_versions) {
    m_pending_versions = pending_versions;
    m_pending_versions_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_pending_versions_Set() const{
    return m_pending_versions_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::is_pending_versions_Valid() const{
    return m_pending_versions_isValid;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2StoredInfoType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
