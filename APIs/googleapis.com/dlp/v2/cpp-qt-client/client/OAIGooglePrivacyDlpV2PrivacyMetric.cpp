/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2PrivacyMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2PrivacyMetric::OAIGooglePrivacyDlpV2PrivacyMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2PrivacyMetric::OAIGooglePrivacyDlpV2PrivacyMetric() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2PrivacyMetric::~OAIGooglePrivacyDlpV2PrivacyMetric() {}

void OAIGooglePrivacyDlpV2PrivacyMetric::initializeModel() {

    m_categorical_stats_config_isSet = false;
    m_categorical_stats_config_isValid = false;

    m_delta_presence_estimation_config_isSet = false;
    m_delta_presence_estimation_config_isValid = false;

    m_k_anonymity_config_isSet = false;
    m_k_anonymity_config_isValid = false;

    m_k_map_estimation_config_isSet = false;
    m_k_map_estimation_config_isValid = false;

    m_l_diversity_config_isSet = false;
    m_l_diversity_config_isValid = false;

    m_numerical_stats_config_isSet = false;
    m_numerical_stats_config_isValid = false;
}

void OAIGooglePrivacyDlpV2PrivacyMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2PrivacyMetric::fromJsonObject(QJsonObject json) {

    m_categorical_stats_config_isValid = ::OpenAPI::fromJsonValue(m_categorical_stats_config, json[QString("categoricalStatsConfig")]);
    m_categorical_stats_config_isSet = !json[QString("categoricalStatsConfig")].isNull() && m_categorical_stats_config_isValid;

    m_delta_presence_estimation_config_isValid = ::OpenAPI::fromJsonValue(m_delta_presence_estimation_config, json[QString("deltaPresenceEstimationConfig")]);
    m_delta_presence_estimation_config_isSet = !json[QString("deltaPresenceEstimationConfig")].isNull() && m_delta_presence_estimation_config_isValid;

    m_k_anonymity_config_isValid = ::OpenAPI::fromJsonValue(m_k_anonymity_config, json[QString("kAnonymityConfig")]);
    m_k_anonymity_config_isSet = !json[QString("kAnonymityConfig")].isNull() && m_k_anonymity_config_isValid;

    m_k_map_estimation_config_isValid = ::OpenAPI::fromJsonValue(m_k_map_estimation_config, json[QString("kMapEstimationConfig")]);
    m_k_map_estimation_config_isSet = !json[QString("kMapEstimationConfig")].isNull() && m_k_map_estimation_config_isValid;

    m_l_diversity_config_isValid = ::OpenAPI::fromJsonValue(m_l_diversity_config, json[QString("lDiversityConfig")]);
    m_l_diversity_config_isSet = !json[QString("lDiversityConfig")].isNull() && m_l_diversity_config_isValid;

    m_numerical_stats_config_isValid = ::OpenAPI::fromJsonValue(m_numerical_stats_config, json[QString("numericalStatsConfig")]);
    m_numerical_stats_config_isSet = !json[QString("numericalStatsConfig")].isNull() && m_numerical_stats_config_isValid;
}

QString OAIGooglePrivacyDlpV2PrivacyMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2PrivacyMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_stats_config.isSet()) {
        obj.insert(QString("categoricalStatsConfig"), ::OpenAPI::toJsonValue(m_categorical_stats_config));
    }
    if (m_delta_presence_estimation_config.isSet()) {
        obj.insert(QString("deltaPresenceEstimationConfig"), ::OpenAPI::toJsonValue(m_delta_presence_estimation_config));
    }
    if (m_k_anonymity_config.isSet()) {
        obj.insert(QString("kAnonymityConfig"), ::OpenAPI::toJsonValue(m_k_anonymity_config));
    }
    if (m_k_map_estimation_config.isSet()) {
        obj.insert(QString("kMapEstimationConfig"), ::OpenAPI::toJsonValue(m_k_map_estimation_config));
    }
    if (m_l_diversity_config.isSet()) {
        obj.insert(QString("lDiversityConfig"), ::OpenAPI::toJsonValue(m_l_diversity_config));
    }
    if (m_numerical_stats_config.isSet()) {
        obj.insert(QString("numericalStatsConfig"), ::OpenAPI::toJsonValue(m_numerical_stats_config));
    }
    return obj;
}

OAIGooglePrivacyDlpV2CategoricalStatsConfig OAIGooglePrivacyDlpV2PrivacyMetric::getCategoricalStatsConfig() const {
    return m_categorical_stats_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setCategoricalStatsConfig(const OAIGooglePrivacyDlpV2CategoricalStatsConfig &categorical_stats_config) {
    m_categorical_stats_config = categorical_stats_config;
    m_categorical_stats_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_categorical_stats_config_Set() const{
    return m_categorical_stats_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_categorical_stats_config_Valid() const{
    return m_categorical_stats_config_isValid;
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig OAIGooglePrivacyDlpV2PrivacyMetric::getDeltaPresenceEstimationConfig() const {
    return m_delta_presence_estimation_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setDeltaPresenceEstimationConfig(const OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig &delta_presence_estimation_config) {
    m_delta_presence_estimation_config = delta_presence_estimation_config;
    m_delta_presence_estimation_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_delta_presence_estimation_config_Set() const{
    return m_delta_presence_estimation_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_delta_presence_estimation_config_Valid() const{
    return m_delta_presence_estimation_config_isValid;
}

OAIGooglePrivacyDlpV2KAnonymityConfig OAIGooglePrivacyDlpV2PrivacyMetric::getKAnonymityConfig() const {
    return m_k_anonymity_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setKAnonymityConfig(const OAIGooglePrivacyDlpV2KAnonymityConfig &k_anonymity_config) {
    m_k_anonymity_config = k_anonymity_config;
    m_k_anonymity_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_k_anonymity_config_Set() const{
    return m_k_anonymity_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_k_anonymity_config_Valid() const{
    return m_k_anonymity_config_isValid;
}

OAIGooglePrivacyDlpV2KMapEstimationConfig OAIGooglePrivacyDlpV2PrivacyMetric::getKMapEstimationConfig() const {
    return m_k_map_estimation_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setKMapEstimationConfig(const OAIGooglePrivacyDlpV2KMapEstimationConfig &k_map_estimation_config) {
    m_k_map_estimation_config = k_map_estimation_config;
    m_k_map_estimation_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_k_map_estimation_config_Set() const{
    return m_k_map_estimation_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_k_map_estimation_config_Valid() const{
    return m_k_map_estimation_config_isValid;
}

OAIGooglePrivacyDlpV2LDiversityConfig OAIGooglePrivacyDlpV2PrivacyMetric::getLDiversityConfig() const {
    return m_l_diversity_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setLDiversityConfig(const OAIGooglePrivacyDlpV2LDiversityConfig &l_diversity_config) {
    m_l_diversity_config = l_diversity_config;
    m_l_diversity_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_l_diversity_config_Set() const{
    return m_l_diversity_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_l_diversity_config_Valid() const{
    return m_l_diversity_config_isValid;
}

OAIGooglePrivacyDlpV2NumericalStatsConfig OAIGooglePrivacyDlpV2PrivacyMetric::getNumericalStatsConfig() const {
    return m_numerical_stats_config;
}
void OAIGooglePrivacyDlpV2PrivacyMetric::setNumericalStatsConfig(const OAIGooglePrivacyDlpV2NumericalStatsConfig &numerical_stats_config) {
    m_numerical_stats_config = numerical_stats_config;
    m_numerical_stats_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_numerical_stats_config_Set() const{
    return m_numerical_stats_config_isSet;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::is_numerical_stats_config_Valid() const{
    return m_numerical_stats_config_isValid;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_stats_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_presence_estimation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_anonymity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_map_estimation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_diversity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerical_stats_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2PrivacyMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
