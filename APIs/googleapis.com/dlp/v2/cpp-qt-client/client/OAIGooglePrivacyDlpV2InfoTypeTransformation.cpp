/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InfoTypeTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InfoTypeTransformation::OAIGooglePrivacyDlpV2InfoTypeTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InfoTypeTransformation::OAIGooglePrivacyDlpV2InfoTypeTransformation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InfoTypeTransformation::~OAIGooglePrivacyDlpV2InfoTypeTransformation() {}

void OAIGooglePrivacyDlpV2InfoTypeTransformation::initializeModel() {

    m_info_types_isSet = false;
    m_info_types_isValid = false;

    m_primitive_transformation_isSet = false;
    m_primitive_transformation_isValid = false;
}

void OAIGooglePrivacyDlpV2InfoTypeTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InfoTypeTransformation::fromJsonObject(QJsonObject json) {

    m_info_types_isValid = ::OpenAPI::fromJsonValue(m_info_types, json[QString("infoTypes")]);
    m_info_types_isSet = !json[QString("infoTypes")].isNull() && m_info_types_isValid;

    m_primitive_transformation_isValid = ::OpenAPI::fromJsonValue(m_primitive_transformation, json[QString("primitiveTransformation")]);
    m_primitive_transformation_isSet = !json[QString("primitiveTransformation")].isNull() && m_primitive_transformation_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InfoTypeTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_info_types.size() > 0) {
        obj.insert(QString("infoTypes"), ::OpenAPI::toJsonValue(m_info_types));
    }
    if (m_primitive_transformation.isSet()) {
        obj.insert(QString("primitiveTransformation"), ::OpenAPI::toJsonValue(m_primitive_transformation));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2InfoType> OAIGooglePrivacyDlpV2InfoTypeTransformation::getInfoTypes() const {
    return m_info_types;
}
void OAIGooglePrivacyDlpV2InfoTypeTransformation::setInfoTypes(const QList<OAIGooglePrivacyDlpV2InfoType> &info_types) {
    m_info_types = info_types;
    m_info_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::is_info_types_Set() const{
    return m_info_types_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::is_info_types_Valid() const{
    return m_info_types_isValid;
}

OAIGooglePrivacyDlpV2PrimitiveTransformation OAIGooglePrivacyDlpV2InfoTypeTransformation::getPrimitiveTransformation() const {
    return m_primitive_transformation;
}
void OAIGooglePrivacyDlpV2InfoTypeTransformation::setPrimitiveTransformation(const OAIGooglePrivacyDlpV2PrimitiveTransformation &primitive_transformation) {
    m_primitive_transformation = primitive_transformation;
    m_primitive_transformation_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::is_primitive_transformation_Set() const{
    return m_primitive_transformation_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::is_primitive_transformation_Valid() const{
    return m_primitive_transformation_isValid;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primitive_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InfoTypeTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
