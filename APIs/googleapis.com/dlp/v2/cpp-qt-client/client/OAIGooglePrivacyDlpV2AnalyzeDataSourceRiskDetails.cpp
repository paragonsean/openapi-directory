/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::~OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails() {}

void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::initializeModel() {

    m_categorical_stats_result_isSet = false;
    m_categorical_stats_result_isValid = false;

    m_delta_presence_estimation_result_isSet = false;
    m_delta_presence_estimation_result_isValid = false;

    m_k_anonymity_result_isSet = false;
    m_k_anonymity_result_isValid = false;

    m_k_map_estimation_result_isSet = false;
    m_k_map_estimation_result_isValid = false;

    m_l_diversity_result_isSet = false;
    m_l_diversity_result_isValid = false;

    m_numerical_stats_result_isSet = false;
    m_numerical_stats_result_isValid = false;

    m_requested_options_isSet = false;
    m_requested_options_isValid = false;

    m_requested_privacy_metric_isSet = false;
    m_requested_privacy_metric_isValid = false;

    m_requested_source_table_isSet = false;
    m_requested_source_table_isValid = false;
}

void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::fromJsonObject(QJsonObject json) {

    m_categorical_stats_result_isValid = ::OpenAPI::fromJsonValue(m_categorical_stats_result, json[QString("categoricalStatsResult")]);
    m_categorical_stats_result_isSet = !json[QString("categoricalStatsResult")].isNull() && m_categorical_stats_result_isValid;

    m_delta_presence_estimation_result_isValid = ::OpenAPI::fromJsonValue(m_delta_presence_estimation_result, json[QString("deltaPresenceEstimationResult")]);
    m_delta_presence_estimation_result_isSet = !json[QString("deltaPresenceEstimationResult")].isNull() && m_delta_presence_estimation_result_isValid;

    m_k_anonymity_result_isValid = ::OpenAPI::fromJsonValue(m_k_anonymity_result, json[QString("kAnonymityResult")]);
    m_k_anonymity_result_isSet = !json[QString("kAnonymityResult")].isNull() && m_k_anonymity_result_isValid;

    m_k_map_estimation_result_isValid = ::OpenAPI::fromJsonValue(m_k_map_estimation_result, json[QString("kMapEstimationResult")]);
    m_k_map_estimation_result_isSet = !json[QString("kMapEstimationResult")].isNull() && m_k_map_estimation_result_isValid;

    m_l_diversity_result_isValid = ::OpenAPI::fromJsonValue(m_l_diversity_result, json[QString("lDiversityResult")]);
    m_l_diversity_result_isSet = !json[QString("lDiversityResult")].isNull() && m_l_diversity_result_isValid;

    m_numerical_stats_result_isValid = ::OpenAPI::fromJsonValue(m_numerical_stats_result, json[QString("numericalStatsResult")]);
    m_numerical_stats_result_isSet = !json[QString("numericalStatsResult")].isNull() && m_numerical_stats_result_isValid;

    m_requested_options_isValid = ::OpenAPI::fromJsonValue(m_requested_options, json[QString("requestedOptions")]);
    m_requested_options_isSet = !json[QString("requestedOptions")].isNull() && m_requested_options_isValid;

    m_requested_privacy_metric_isValid = ::OpenAPI::fromJsonValue(m_requested_privacy_metric, json[QString("requestedPrivacyMetric")]);
    m_requested_privacy_metric_isSet = !json[QString("requestedPrivacyMetric")].isNull() && m_requested_privacy_metric_isValid;

    m_requested_source_table_isValid = ::OpenAPI::fromJsonValue(m_requested_source_table, json[QString("requestedSourceTable")]);
    m_requested_source_table_isSet = !json[QString("requestedSourceTable")].isNull() && m_requested_source_table_isValid;
}

QString OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_stats_result.isSet()) {
        obj.insert(QString("categoricalStatsResult"), ::OpenAPI::toJsonValue(m_categorical_stats_result));
    }
    if (m_delta_presence_estimation_result.isSet()) {
        obj.insert(QString("deltaPresenceEstimationResult"), ::OpenAPI::toJsonValue(m_delta_presence_estimation_result));
    }
    if (m_k_anonymity_result.isSet()) {
        obj.insert(QString("kAnonymityResult"), ::OpenAPI::toJsonValue(m_k_anonymity_result));
    }
    if (m_k_map_estimation_result.isSet()) {
        obj.insert(QString("kMapEstimationResult"), ::OpenAPI::toJsonValue(m_k_map_estimation_result));
    }
    if (m_l_diversity_result.isSet()) {
        obj.insert(QString("lDiversityResult"), ::OpenAPI::toJsonValue(m_l_diversity_result));
    }
    if (m_numerical_stats_result.isSet()) {
        obj.insert(QString("numericalStatsResult"), ::OpenAPI::toJsonValue(m_numerical_stats_result));
    }
    if (m_requested_options.isSet()) {
        obj.insert(QString("requestedOptions"), ::OpenAPI::toJsonValue(m_requested_options));
    }
    if (m_requested_privacy_metric.isSet()) {
        obj.insert(QString("requestedPrivacyMetric"), ::OpenAPI::toJsonValue(m_requested_privacy_metric));
    }
    if (m_requested_source_table.isSet()) {
        obj.insert(QString("requestedSourceTable"), ::OpenAPI::toJsonValue(m_requested_source_table));
    }
    return obj;
}

OAIGooglePrivacyDlpV2CategoricalStatsResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getCategoricalStatsResult() const {
    return m_categorical_stats_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setCategoricalStatsResult(const OAIGooglePrivacyDlpV2CategoricalStatsResult &categorical_stats_result) {
    m_categorical_stats_result = categorical_stats_result;
    m_categorical_stats_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_categorical_stats_result_Set() const{
    return m_categorical_stats_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_categorical_stats_result_Valid() const{
    return m_categorical_stats_result_isValid;
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getDeltaPresenceEstimationResult() const {
    return m_delta_presence_estimation_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setDeltaPresenceEstimationResult(const OAIGooglePrivacyDlpV2DeltaPresenceEstimationResult &delta_presence_estimation_result) {
    m_delta_presence_estimation_result = delta_presence_estimation_result;
    m_delta_presence_estimation_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_delta_presence_estimation_result_Set() const{
    return m_delta_presence_estimation_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_delta_presence_estimation_result_Valid() const{
    return m_delta_presence_estimation_result_isValid;
}

OAIGooglePrivacyDlpV2KAnonymityResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getKAnonymityResult() const {
    return m_k_anonymity_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setKAnonymityResult(const OAIGooglePrivacyDlpV2KAnonymityResult &k_anonymity_result) {
    m_k_anonymity_result = k_anonymity_result;
    m_k_anonymity_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_k_anonymity_result_Set() const{
    return m_k_anonymity_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_k_anonymity_result_Valid() const{
    return m_k_anonymity_result_isValid;
}

OAIGooglePrivacyDlpV2KMapEstimationResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getKMapEstimationResult() const {
    return m_k_map_estimation_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setKMapEstimationResult(const OAIGooglePrivacyDlpV2KMapEstimationResult &k_map_estimation_result) {
    m_k_map_estimation_result = k_map_estimation_result;
    m_k_map_estimation_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_k_map_estimation_result_Set() const{
    return m_k_map_estimation_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_k_map_estimation_result_Valid() const{
    return m_k_map_estimation_result_isValid;
}

OAIGooglePrivacyDlpV2LDiversityResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getLDiversityResult() const {
    return m_l_diversity_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setLDiversityResult(const OAIGooglePrivacyDlpV2LDiversityResult &l_diversity_result) {
    m_l_diversity_result = l_diversity_result;
    m_l_diversity_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_l_diversity_result_Set() const{
    return m_l_diversity_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_l_diversity_result_Valid() const{
    return m_l_diversity_result_isValid;
}

OAIGooglePrivacyDlpV2NumericalStatsResult OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getNumericalStatsResult() const {
    return m_numerical_stats_result;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setNumericalStatsResult(const OAIGooglePrivacyDlpV2NumericalStatsResult &numerical_stats_result) {
    m_numerical_stats_result = numerical_stats_result;
    m_numerical_stats_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_numerical_stats_result_Set() const{
    return m_numerical_stats_result_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_numerical_stats_result_Valid() const{
    return m_numerical_stats_result_isValid;
}

OAIGooglePrivacyDlpV2RequestedRiskAnalysisOptions OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getRequestedOptions() const {
    return m_requested_options;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setRequestedOptions(const OAIGooglePrivacyDlpV2RequestedRiskAnalysisOptions &requested_options) {
    m_requested_options = requested_options;
    m_requested_options_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_options_Set() const{
    return m_requested_options_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_options_Valid() const{
    return m_requested_options_isValid;
}

OAIGooglePrivacyDlpV2PrivacyMetric OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getRequestedPrivacyMetric() const {
    return m_requested_privacy_metric;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setRequestedPrivacyMetric(const OAIGooglePrivacyDlpV2PrivacyMetric &requested_privacy_metric) {
    m_requested_privacy_metric = requested_privacy_metric;
    m_requested_privacy_metric_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_privacy_metric_Set() const{
    return m_requested_privacy_metric_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_privacy_metric_Valid() const{
    return m_requested_privacy_metric_isValid;
}

OAIGooglePrivacyDlpV2BigQueryTable OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::getRequestedSourceTable() const {
    return m_requested_source_table;
}
void OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::setRequestedSourceTable(const OAIGooglePrivacyDlpV2BigQueryTable &requested_source_table) {
    m_requested_source_table = requested_source_table;
    m_requested_source_table_isSet = true;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_source_table_Set() const{
    return m_requested_source_table_isSet;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::is_requested_source_table_Valid() const{
    return m_requested_source_table_isValid;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_stats_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_presence_estimation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_anonymity_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_map_estimation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_diversity_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerical_stats_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_privacy_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_source_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2AnalyzeDataSourceRiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
