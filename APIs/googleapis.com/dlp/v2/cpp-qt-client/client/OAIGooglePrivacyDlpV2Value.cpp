/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Value::OAIGooglePrivacyDlpV2Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Value::OAIGooglePrivacyDlpV2Value() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Value::~OAIGooglePrivacyDlpV2Value() {}

void OAIGooglePrivacyDlpV2Value::initializeModel() {

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_date_value_isSet = false;
    m_date_value_isValid = false;

    m_day_of_week_value_isSet = false;
    m_day_of_week_value_isValid = false;

    m_float_value_isSet = false;
    m_float_value_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_time_value_isSet = false;
    m_time_value_isValid = false;

    m_timestamp_value_isSet = false;
    m_timestamp_value_isValid = false;
}

void OAIGooglePrivacyDlpV2Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Value::fromJsonObject(QJsonObject json) {

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;

    m_date_value_isValid = ::OpenAPI::fromJsonValue(m_date_value, json[QString("dateValue")]);
    m_date_value_isSet = !json[QString("dateValue")].isNull() && m_date_value_isValid;

    m_day_of_week_value_isValid = ::OpenAPI::fromJsonValue(m_day_of_week_value, json[QString("dayOfWeekValue")]);
    m_day_of_week_value_isSet = !json[QString("dayOfWeekValue")].isNull() && m_day_of_week_value_isValid;

    m_float_value_isValid = ::OpenAPI::fromJsonValue(m_float_value, json[QString("floatValue")]);
    m_float_value_isSet = !json[QString("floatValue")].isNull() && m_float_value_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("integerValue")]);
    m_integer_value_isSet = !json[QString("integerValue")].isNull() && m_integer_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_time_value_isValid = ::OpenAPI::fromJsonValue(m_time_value, json[QString("timeValue")]);
    m_time_value_isSet = !json[QString("timeValue")].isNull() && m_time_value_isValid;

    m_timestamp_value_isValid = ::OpenAPI::fromJsonValue(m_timestamp_value, json[QString("timestampValue")]);
    m_timestamp_value_isSet = !json[QString("timestampValue")].isNull() && m_timestamp_value_isValid;
}

QString OAIGooglePrivacyDlpV2Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Value::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_date_value.isSet()) {
        obj.insert(QString("dateValue"), ::OpenAPI::toJsonValue(m_date_value));
    }
    if (m_day_of_week_value_isSet) {
        obj.insert(QString("dayOfWeekValue"), ::OpenAPI::toJsonValue(m_day_of_week_value));
    }
    if (m_float_value_isSet) {
        obj.insert(QString("floatValue"), ::OpenAPI::toJsonValue(m_float_value));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("integerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_time_value.isSet()) {
        obj.insert(QString("timeValue"), ::OpenAPI::toJsonValue(m_time_value));
    }
    if (m_timestamp_value_isSet) {
        obj.insert(QString("timestampValue"), ::OpenAPI::toJsonValue(m_timestamp_value));
    }
    return obj;
}

bool OAIGooglePrivacyDlpV2Value::isBooleanValue() const {
    return m_boolean_value;
}
void OAIGooglePrivacyDlpV2Value::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

OAIGoogleTypeDate OAIGooglePrivacyDlpV2Value::getDateValue() const {
    return m_date_value;
}
void OAIGooglePrivacyDlpV2Value::setDateValue(const OAIGoogleTypeDate &date_value) {
    m_date_value = date_value;
    m_date_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_date_value_Set() const{
    return m_date_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_date_value_Valid() const{
    return m_date_value_isValid;
}

QString OAIGooglePrivacyDlpV2Value::getDayOfWeekValue() const {
    return m_day_of_week_value;
}
void OAIGooglePrivacyDlpV2Value::setDayOfWeekValue(const QString &day_of_week_value) {
    m_day_of_week_value = day_of_week_value;
    m_day_of_week_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_day_of_week_value_Set() const{
    return m_day_of_week_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_day_of_week_value_Valid() const{
    return m_day_of_week_value_isValid;
}

double OAIGooglePrivacyDlpV2Value::getFloatValue() const {
    return m_float_value;
}
void OAIGooglePrivacyDlpV2Value::setFloatValue(const double &float_value) {
    m_float_value = float_value;
    m_float_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_float_value_Set() const{
    return m_float_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_float_value_Valid() const{
    return m_float_value_isValid;
}

QString OAIGooglePrivacyDlpV2Value::getIntegerValue() const {
    return m_integer_value;
}
void OAIGooglePrivacyDlpV2Value::setIntegerValue(const QString &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

QString OAIGooglePrivacyDlpV2Value::getStringValue() const {
    return m_string_value;
}
void OAIGooglePrivacyDlpV2Value::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_string_value_Valid() const{
    return m_string_value_isValid;
}

OAIGoogleTypeTimeOfDay OAIGooglePrivacyDlpV2Value::getTimeValue() const {
    return m_time_value;
}
void OAIGooglePrivacyDlpV2Value::setTimeValue(const OAIGoogleTypeTimeOfDay &time_value) {
    m_time_value = time_value;
    m_time_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_time_value_Set() const{
    return m_time_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_time_value_Valid() const{
    return m_time_value_isValid;
}

QString OAIGooglePrivacyDlpV2Value::getTimestampValue() const {
    return m_timestamp_value;
}
void OAIGooglePrivacyDlpV2Value::setTimestampValue(const QString &timestamp_value) {
    m_timestamp_value = timestamp_value;
    m_timestamp_value_isSet = true;
}

bool OAIGooglePrivacyDlpV2Value::is_timestamp_value_Set() const{
    return m_timestamp_value_isSet;
}

bool OAIGooglePrivacyDlpV2Value::is_timestamp_value_Valid() const{
    return m_timestamp_value_isValid;
}

bool OAIGooglePrivacyDlpV2Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
