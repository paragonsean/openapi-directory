/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InfoTypeLikelihood.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InfoTypeLikelihood::OAIGooglePrivacyDlpV2InfoTypeLikelihood(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InfoTypeLikelihood::OAIGooglePrivacyDlpV2InfoTypeLikelihood() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InfoTypeLikelihood::~OAIGooglePrivacyDlpV2InfoTypeLikelihood() {}

void OAIGooglePrivacyDlpV2InfoTypeLikelihood::initializeModel() {

    m_info_type_isSet = false;
    m_info_type_isValid = false;

    m_min_likelihood_isSet = false;
    m_min_likelihood_isValid = false;
}

void OAIGooglePrivacyDlpV2InfoTypeLikelihood::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InfoTypeLikelihood::fromJsonObject(QJsonObject json) {

    m_info_type_isValid = ::OpenAPI::fromJsonValue(m_info_type, json[QString("infoType")]);
    m_info_type_isSet = !json[QString("infoType")].isNull() && m_info_type_isValid;

    m_min_likelihood_isValid = ::OpenAPI::fromJsonValue(m_min_likelihood, json[QString("minLikelihood")]);
    m_min_likelihood_isSet = !json[QString("minLikelihood")].isNull() && m_min_likelihood_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeLikelihood::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InfoTypeLikelihood::asJsonObject() const {
    QJsonObject obj;
    if (m_info_type.isSet()) {
        obj.insert(QString("infoType"), ::OpenAPI::toJsonValue(m_info_type));
    }
    if (m_min_likelihood_isSet) {
        obj.insert(QString("minLikelihood"), ::OpenAPI::toJsonValue(m_min_likelihood));
    }
    return obj;
}

OAIGooglePrivacyDlpV2InfoType OAIGooglePrivacyDlpV2InfoTypeLikelihood::getInfoType() const {
    return m_info_type;
}
void OAIGooglePrivacyDlpV2InfoTypeLikelihood::setInfoType(const OAIGooglePrivacyDlpV2InfoType &info_type) {
    m_info_type = info_type;
    m_info_type_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::is_info_type_Set() const{
    return m_info_type_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::is_info_type_Valid() const{
    return m_info_type_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeLikelihood::getMinLikelihood() const {
    return m_min_likelihood;
}
void OAIGooglePrivacyDlpV2InfoTypeLikelihood::setMinLikelihood(const QString &min_likelihood) {
    m_min_likelihood = min_likelihood;
    m_min_likelihood_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::is_min_likelihood_Set() const{
    return m_min_likelihood_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::is_min_likelihood_Valid() const{
    return m_min_likelihood_isValid;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InfoTypeLikelihood::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
