/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RecordTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RecordTransformation::OAIGooglePrivacyDlpV2RecordTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RecordTransformation::OAIGooglePrivacyDlpV2RecordTransformation() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RecordTransformation::~OAIGooglePrivacyDlpV2RecordTransformation() {}

void OAIGooglePrivacyDlpV2RecordTransformation::initializeModel() {

    m_container_timestamp_isSet = false;
    m_container_timestamp_isValid = false;

    m_container_version_isSet = false;
    m_container_version_isValid = false;

    m_field_id_isSet = false;
    m_field_id_isValid = false;
}

void OAIGooglePrivacyDlpV2RecordTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RecordTransformation::fromJsonObject(QJsonObject json) {

    m_container_timestamp_isValid = ::OpenAPI::fromJsonValue(m_container_timestamp, json[QString("containerTimestamp")]);
    m_container_timestamp_isSet = !json[QString("containerTimestamp")].isNull() && m_container_timestamp_isValid;

    m_container_version_isValid = ::OpenAPI::fromJsonValue(m_container_version, json[QString("containerVersion")]);
    m_container_version_isSet = !json[QString("containerVersion")].isNull() && m_container_version_isValid;

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("fieldId")]);
    m_field_id_isSet = !json[QString("fieldId")].isNull() && m_field_id_isValid;
}

QString OAIGooglePrivacyDlpV2RecordTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RecordTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_container_timestamp_isSet) {
        obj.insert(QString("containerTimestamp"), ::OpenAPI::toJsonValue(m_container_timestamp));
    }
    if (m_container_version_isSet) {
        obj.insert(QString("containerVersion"), ::OpenAPI::toJsonValue(m_container_version));
    }
    if (m_field_id.isSet()) {
        obj.insert(QString("fieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2RecordTransformation::getContainerTimestamp() const {
    return m_container_timestamp;
}
void OAIGooglePrivacyDlpV2RecordTransformation::setContainerTimestamp(const QString &container_timestamp) {
    m_container_timestamp = container_timestamp;
    m_container_timestamp_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_container_timestamp_Set() const{
    return m_container_timestamp_isSet;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_container_timestamp_Valid() const{
    return m_container_timestamp_isValid;
}

QString OAIGooglePrivacyDlpV2RecordTransformation::getContainerVersion() const {
    return m_container_version;
}
void OAIGooglePrivacyDlpV2RecordTransformation::setContainerVersion(const QString &container_version) {
    m_container_version = container_version;
    m_container_version_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_container_version_Set() const{
    return m_container_version_isSet;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_container_version_Valid() const{
    return m_container_version_isValid;
}

OAIGooglePrivacyDlpV2FieldId OAIGooglePrivacyDlpV2RecordTransformation::getFieldId() const {
    return m_field_id;
}
void OAIGooglePrivacyDlpV2RecordTransformation::setFieldId(const OAIGooglePrivacyDlpV2FieldId &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::is_field_id_Valid() const{
    return m_field_id_isValid;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RecordTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
