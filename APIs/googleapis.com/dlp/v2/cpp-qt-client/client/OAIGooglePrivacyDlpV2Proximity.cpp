/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2Proximity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2Proximity::OAIGooglePrivacyDlpV2Proximity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2Proximity::OAIGooglePrivacyDlpV2Proximity() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2Proximity::~OAIGooglePrivacyDlpV2Proximity() {}

void OAIGooglePrivacyDlpV2Proximity::initializeModel() {

    m_window_after_isSet = false;
    m_window_after_isValid = false;

    m_window_before_isSet = false;
    m_window_before_isValid = false;
}

void OAIGooglePrivacyDlpV2Proximity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2Proximity::fromJsonObject(QJsonObject json) {

    m_window_after_isValid = ::OpenAPI::fromJsonValue(m_window_after, json[QString("windowAfter")]);
    m_window_after_isSet = !json[QString("windowAfter")].isNull() && m_window_after_isValid;

    m_window_before_isValid = ::OpenAPI::fromJsonValue(m_window_before, json[QString("windowBefore")]);
    m_window_before_isSet = !json[QString("windowBefore")].isNull() && m_window_before_isValid;
}

QString OAIGooglePrivacyDlpV2Proximity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2Proximity::asJsonObject() const {
    QJsonObject obj;
    if (m_window_after_isSet) {
        obj.insert(QString("windowAfter"), ::OpenAPI::toJsonValue(m_window_after));
    }
    if (m_window_before_isSet) {
        obj.insert(QString("windowBefore"), ::OpenAPI::toJsonValue(m_window_before));
    }
    return obj;
}

qint32 OAIGooglePrivacyDlpV2Proximity::getWindowAfter() const {
    return m_window_after;
}
void OAIGooglePrivacyDlpV2Proximity::setWindowAfter(const qint32 &window_after) {
    m_window_after = window_after;
    m_window_after_isSet = true;
}

bool OAIGooglePrivacyDlpV2Proximity::is_window_after_Set() const{
    return m_window_after_isSet;
}

bool OAIGooglePrivacyDlpV2Proximity::is_window_after_Valid() const{
    return m_window_after_isValid;
}

qint32 OAIGooglePrivacyDlpV2Proximity::getWindowBefore() const {
    return m_window_before;
}
void OAIGooglePrivacyDlpV2Proximity::setWindowBefore(const qint32 &window_before) {
    m_window_before = window_before;
    m_window_before_isSet = true;
}

bool OAIGooglePrivacyDlpV2Proximity::is_window_before_Set() const{
    return m_window_before_isSet;
}

bool OAIGooglePrivacyDlpV2Proximity::is_window_before_Valid() const{
    return m_window_before_isValid;
}

bool OAIGooglePrivacyDlpV2Proximity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_window_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2Proximity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
