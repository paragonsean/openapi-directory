/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig.h
 *
 * δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
 */

#ifndef OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig_H
#define OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2QuasiId.h"
#include "OAIGooglePrivacyDlpV2StatisticalTable.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2StatisticalTable;
class OAIGooglePrivacyDlpV2QuasiId;

class OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig();
    OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig(QString json);
    ~OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGooglePrivacyDlpV2StatisticalTable> getAuxiliaryTables() const;
    void setAuxiliaryTables(const QList<OAIGooglePrivacyDlpV2StatisticalTable> &auxiliary_tables);
    bool is_auxiliary_tables_Set() const;
    bool is_auxiliary_tables_Valid() const;

    QList<OAIGooglePrivacyDlpV2QuasiId> getQuasiIds() const;
    void setQuasiIds(const QList<OAIGooglePrivacyDlpV2QuasiId> &quasi_ids);
    bool is_quasi_ids_Set() const;
    bool is_quasi_ids_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGooglePrivacyDlpV2StatisticalTable> m_auxiliary_tables;
    bool m_auxiliary_tables_isSet;
    bool m_auxiliary_tables_isValid;

    QList<OAIGooglePrivacyDlpV2QuasiId> m_quasi_ids;
    bool m_quasi_ids_isSet;
    bool m_quasi_ids_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig)

#endif // OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig_H
