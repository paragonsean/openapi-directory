/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2DateShiftConfig.h
 *
 * Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/sensitive-data-protection/docs/concepts-date-shifting to learn more.
 */

#ifndef OAIGooglePrivacyDlpV2DateShiftConfig_H
#define OAIGooglePrivacyDlpV2DateShiftConfig_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2CryptoKey.h"
#include "OAIGooglePrivacyDlpV2FieldId.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2FieldId;
class OAIGooglePrivacyDlpV2CryptoKey;

class OAIGooglePrivacyDlpV2DateShiftConfig : public OAIObject {
public:
    OAIGooglePrivacyDlpV2DateShiftConfig();
    OAIGooglePrivacyDlpV2DateShiftConfig(QString json);
    ~OAIGooglePrivacyDlpV2DateShiftConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2FieldId getContext() const;
    void setContext(const OAIGooglePrivacyDlpV2FieldId &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    OAIGooglePrivacyDlpV2CryptoKey getCryptoKey() const;
    void setCryptoKey(const OAIGooglePrivacyDlpV2CryptoKey &crypto_key);
    bool is_crypto_key_Set() const;
    bool is_crypto_key_Valid() const;

    qint32 getLowerBoundDays() const;
    void setLowerBoundDays(const qint32 &lower_bound_days);
    bool is_lower_bound_days_Set() const;
    bool is_lower_bound_days_Valid() const;

    qint32 getUpperBoundDays() const;
    void setUpperBoundDays(const qint32 &upper_bound_days);
    bool is_upper_bound_days_Set() const;
    bool is_upper_bound_days_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2FieldId m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    OAIGooglePrivacyDlpV2CryptoKey m_crypto_key;
    bool m_crypto_key_isSet;
    bool m_crypto_key_isValid;

    qint32 m_lower_bound_days;
    bool m_lower_bound_days_isSet;
    bool m_lower_bound_days_isValid;

    qint32 m_upper_bound_days;
    bool m_upper_bound_days_isSet;
    bool m_upper_bound_days_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2DateShiftConfig)

#endif // OAIGooglePrivacyDlpV2DateShiftConfig_H
