/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::~OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig() {}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::initializeModel() {

    m_auxiliary_tables_isSet = false;
    m_auxiliary_tables_isValid = false;

    m_quasi_ids_isSet = false;
    m_quasi_ids_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;
}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::fromJsonObject(QJsonObject json) {

    m_auxiliary_tables_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_tables, json[QString("auxiliaryTables")]);
    m_auxiliary_tables_isSet = !json[QString("auxiliaryTables")].isNull() && m_auxiliary_tables_isValid;

    m_quasi_ids_isValid = ::OpenAPI::fromJsonValue(m_quasi_ids, json[QString("quasiIds")]);
    m_quasi_ids_isSet = !json[QString("quasiIds")].isNull() && m_quasi_ids_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;
}

QString OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auxiliary_tables.size() > 0) {
        obj.insert(QString("auxiliaryTables"), ::OpenAPI::toJsonValue(m_auxiliary_tables));
    }
    if (m_quasi_ids.size() > 0) {
        obj.insert(QString("quasiIds"), ::OpenAPI::toJsonValue(m_quasi_ids));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2StatisticalTable> OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::getAuxiliaryTables() const {
    return m_auxiliary_tables;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::setAuxiliaryTables(const QList<OAIGooglePrivacyDlpV2StatisticalTable> &auxiliary_tables) {
    m_auxiliary_tables = auxiliary_tables;
    m_auxiliary_tables_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_auxiliary_tables_Set() const{
    return m_auxiliary_tables_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_auxiliary_tables_Valid() const{
    return m_auxiliary_tables_isValid;
}

QList<OAIGooglePrivacyDlpV2QuasiId> OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::getQuasiIds() const {
    return m_quasi_ids;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::setQuasiIds(const QList<OAIGooglePrivacyDlpV2QuasiId> &quasi_ids) {
    m_quasi_ids = quasi_ids;
    m_quasi_ids_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_quasi_ids_Set() const{
    return m_quasi_ids_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_quasi_ids_Valid() const{
    return m_quasi_ids_isValid;
}

QString OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::getRegionCode() const {
    return m_region_code;
}
void OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auxiliary_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quasi_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DeltaPresenceEstimationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
