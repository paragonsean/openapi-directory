/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2KmsWrappedCryptoKey.h
 *
 * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/sensitive-data-protection/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
 */

#ifndef OAIGooglePrivacyDlpV2KmsWrappedCryptoKey_H
#define OAIGooglePrivacyDlpV2KmsWrappedCryptoKey_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGooglePrivacyDlpV2KmsWrappedCryptoKey : public OAIObject {
public:
    OAIGooglePrivacyDlpV2KmsWrappedCryptoKey();
    OAIGooglePrivacyDlpV2KmsWrappedCryptoKey(QString json);
    ~OAIGooglePrivacyDlpV2KmsWrappedCryptoKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCryptoKeyName() const;
    void setCryptoKeyName(const QString &crypto_key_name);
    bool is_crypto_key_name_Set() const;
    bool is_crypto_key_name_Valid() const;

    QByteArray getWrappedKey() const;
    void setWrappedKey(const QByteArray &wrapped_key);
    bool is_wrapped_key_Set() const;
    bool is_wrapped_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_crypto_key_name;
    bool m_crypto_key_name_isSet;
    bool m_crypto_key_name_isValid;

    QByteArray m_wrapped_key;
    bool m_wrapped_key_isSet;
    bool m_wrapped_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2KmsWrappedCryptoKey)

#endif // OAIGooglePrivacyDlpV2KmsWrappedCryptoKey_H
