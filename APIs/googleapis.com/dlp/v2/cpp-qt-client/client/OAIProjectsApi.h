/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest.h"
#include "OAIGooglePrivacyDlpV2CreateDiscoveryConfigRequest.h"
#include "OAIGooglePrivacyDlpV2CreateDlpJobRequest.h"
#include "OAIGooglePrivacyDlpV2CreateInspectTemplateRequest.h"
#include "OAIGooglePrivacyDlpV2CreateJobTriggerRequest.h"
#include "OAIGooglePrivacyDlpV2CreateStoredInfoTypeRequest.h"
#include "OAIGooglePrivacyDlpV2DeidentifyContentRequest.h"
#include "OAIGooglePrivacyDlpV2DeidentifyContentResponse.h"
#include "OAIGooglePrivacyDlpV2DeidentifyTemplate.h"
#include "OAIGooglePrivacyDlpV2DiscoveryConfig.h"
#include "OAIGooglePrivacyDlpV2DlpJob.h"
#include "OAIGooglePrivacyDlpV2HybridInspectJobTriggerRequest.h"
#include "OAIGooglePrivacyDlpV2InspectContentRequest.h"
#include "OAIGooglePrivacyDlpV2InspectContentResponse.h"
#include "OAIGooglePrivacyDlpV2InspectTemplate.h"
#include "OAIGooglePrivacyDlpV2JobTrigger.h"
#include "OAIGooglePrivacyDlpV2ListColumnDataProfilesResponse.h"
#include "OAIGooglePrivacyDlpV2ListDeidentifyTemplatesResponse.h"
#include "OAIGooglePrivacyDlpV2ListDiscoveryConfigsResponse.h"
#include "OAIGooglePrivacyDlpV2ListDlpJobsResponse.h"
#include "OAIGooglePrivacyDlpV2ListInspectTemplatesResponse.h"
#include "OAIGooglePrivacyDlpV2ListJobTriggersResponse.h"
#include "OAIGooglePrivacyDlpV2ListProjectDataProfilesResponse.h"
#include "OAIGooglePrivacyDlpV2ListStoredInfoTypesResponse.h"
#include "OAIGooglePrivacyDlpV2ListTableDataProfilesResponse.h"
#include "OAIGooglePrivacyDlpV2RedactImageRequest.h"
#include "OAIGooglePrivacyDlpV2RedactImageResponse.h"
#include "OAIGooglePrivacyDlpV2ReidentifyContentRequest.h"
#include "OAIGooglePrivacyDlpV2ReidentifyContentResponse.h"
#include "OAIGooglePrivacyDlpV2StoredInfoType.h"
#include "OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_columnDataProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_deidentify_content_request OAIGooglePrivacyDlpV2DeidentifyContentRequest [optional]
    */
    virtual void dlp_projects_locations_content_deidentify(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2DeidentifyContentRequest> &oai_google_privacy_dlp_v2_deidentify_content_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2DeidentifyContentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_inspect_content_request OAIGooglePrivacyDlpV2InspectContentRequest [optional]
    */
    virtual void dlp_projects_locations_content_inspect(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2InspectContentRequest> &oai_google_privacy_dlp_v2_inspect_content_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2InspectContentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_reidentify_content_request OAIGooglePrivacyDlpV2ReidentifyContentRequest [optional]
    */
    virtual void dlp_projects_locations_content_reidentify(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2ReidentifyContentRequest> &oai_google_privacy_dlp_v2_reidentify_content_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2ReidentifyContentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_deidentify_template_request OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest [optional]
    */
    virtual void dlp_projects_locations_deidentifyTemplates_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest> &oai_google_privacy_dlp_v2_create_deidentify_template_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDeidentifyTemplateRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_deidentifyTemplates_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_discovery_config_request OAIGooglePrivacyDlpV2CreateDiscoveryConfigRequest [optional]
    */
    virtual void dlp_projects_locations_discoveryConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDiscoveryConfigRequest> &oai_google_privacy_dlp_v2_create_discovery_config_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDiscoveryConfigRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_discoveryConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dlp_projects_locations_dlpJobs_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_dlp_job_request OAIGooglePrivacyDlpV2CreateDlpJobRequest [optional]
    */
    virtual void dlp_projects_locations_dlpJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDlpJobRequest> &oai_google_privacy_dlp_v2_create_dlp_job_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateDlpJobRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dlp_projects_locations_dlpJobs_finish(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void dlp_projects_locations_dlpJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_redact_image_request OAIGooglePrivacyDlpV2RedactImageRequest [optional]
    */
    virtual void dlp_projects_locations_image_redact(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2RedactImageRequest> &oai_google_privacy_dlp_v2_redact_image_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2RedactImageRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_inspect_template_request OAIGooglePrivacyDlpV2CreateInspectTemplateRequest [optional]
    */
    virtual void dlp_projects_locations_inspectTemplates_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateInspectTemplateRequest> &oai_google_privacy_dlp_v2_create_inspect_template_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateInspectTemplateRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_inspectTemplates_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dlp_projects_locations_jobTriggers_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_job_trigger_request OAIGooglePrivacyDlpV2CreateJobTriggerRequest [optional]
    */
    virtual void dlp_projects_locations_jobTriggers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateJobTriggerRequest> &oai_google_privacy_dlp_v2_create_job_trigger_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateJobTriggerRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_hybrid_inspect_job_trigger_request OAIGooglePrivacyDlpV2HybridInspectJobTriggerRequest [optional]
    */
    virtual void dlp_projects_locations_jobTriggers_hybridInspect(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2HybridInspectJobTriggerRequest> &oai_google_privacy_dlp_v2_hybrid_inspect_job_trigger_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2HybridInspectJobTriggerRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void dlp_projects_locations_jobTriggers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_projectDataProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_locations_tableDataProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_create_stored_info_type_request OAIGooglePrivacyDlpV2CreateStoredInfoTypeRequest [optional]
    */
    virtual void dlp_projects_storedInfoTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateStoredInfoTypeRequest> &oai_google_privacy_dlp_v2_create_stored_info_type_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2CreateStoredInfoTypeRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dlp_projects_storedInfoTypes_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dlp_projects_storedInfoTypes_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dlp_projects_storedInfoTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_privacy_dlp_v2_update_stored_info_type_request OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest [optional]
    */
    virtual void dlp_projects_storedInfoTypes_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest> &oai_google_privacy_dlp_v2_update_stored_info_type_request = ::OpenAPI::OptionalParam<OAIGooglePrivacyDlpV2UpdateStoredInfoTypeRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dlp_projects_locations_columnDataProfiles_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_content_deidentifyCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_content_inspectCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_content_reidentifyCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_deidentifyTemplates_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_deidentifyTemplates_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_discoveryConfigs_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_discoveryConfigs_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_dlpJobs_cancelCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_dlpJobs_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_dlpJobs_finishCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_dlpJobs_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_image_redactCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_inspectTemplates_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_inspectTemplates_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_jobTriggers_activateCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_jobTriggers_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_jobTriggers_hybridInspectCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_jobTriggers_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_projectDataProfiles_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_locations_tableDataProfiles_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_storedInfoTypes_createCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_storedInfoTypes_deleteCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_storedInfoTypes_getCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_storedInfoTypes_listCallback(OAIHttpRequestWorker *worker);
    void dlp_projects_storedInfoTypes_patchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dlp_projects_locations_columnDataProfiles_listSignal(OAIGooglePrivacyDlpV2ListColumnDataProfilesResponse summary);
    void dlp_projects_locations_content_deidentifySignal(OAIGooglePrivacyDlpV2DeidentifyContentResponse summary);
    void dlp_projects_locations_content_inspectSignal(OAIGooglePrivacyDlpV2InspectContentResponse summary);
    void dlp_projects_locations_content_reidentifySignal(OAIGooglePrivacyDlpV2ReidentifyContentResponse summary);
    void dlp_projects_locations_deidentifyTemplates_createSignal(OAIGooglePrivacyDlpV2DeidentifyTemplate summary);
    void dlp_projects_locations_deidentifyTemplates_listSignal(OAIGooglePrivacyDlpV2ListDeidentifyTemplatesResponse summary);
    void dlp_projects_locations_discoveryConfigs_createSignal(OAIGooglePrivacyDlpV2DiscoveryConfig summary);
    void dlp_projects_locations_discoveryConfigs_listSignal(OAIGooglePrivacyDlpV2ListDiscoveryConfigsResponse summary);
    void dlp_projects_locations_dlpJobs_cancelSignal(OAIObject summary);
    void dlp_projects_locations_dlpJobs_createSignal(OAIGooglePrivacyDlpV2DlpJob summary);
    void dlp_projects_locations_dlpJobs_finishSignal(OAIObject summary);
    void dlp_projects_locations_dlpJobs_listSignal(OAIGooglePrivacyDlpV2ListDlpJobsResponse summary);
    void dlp_projects_locations_image_redactSignal(OAIGooglePrivacyDlpV2RedactImageResponse summary);
    void dlp_projects_locations_inspectTemplates_createSignal(OAIGooglePrivacyDlpV2InspectTemplate summary);
    void dlp_projects_locations_inspectTemplates_listSignal(OAIGooglePrivacyDlpV2ListInspectTemplatesResponse summary);
    void dlp_projects_locations_jobTriggers_activateSignal(OAIGooglePrivacyDlpV2DlpJob summary);
    void dlp_projects_locations_jobTriggers_createSignal(OAIGooglePrivacyDlpV2JobTrigger summary);
    void dlp_projects_locations_jobTriggers_hybridInspectSignal(OAIObject summary);
    void dlp_projects_locations_jobTriggers_listSignal(OAIGooglePrivacyDlpV2ListJobTriggersResponse summary);
    void dlp_projects_locations_projectDataProfiles_listSignal(OAIGooglePrivacyDlpV2ListProjectDataProfilesResponse summary);
    void dlp_projects_locations_tableDataProfiles_listSignal(OAIGooglePrivacyDlpV2ListTableDataProfilesResponse summary);
    void dlp_projects_storedInfoTypes_createSignal(OAIGooglePrivacyDlpV2StoredInfoType summary);
    void dlp_projects_storedInfoTypes_deleteSignal(OAIObject summary);
    void dlp_projects_storedInfoTypes_getSignal(OAIGooglePrivacyDlpV2StoredInfoType summary);
    void dlp_projects_storedInfoTypes_listSignal(OAIGooglePrivacyDlpV2ListStoredInfoTypesResponse summary);
    void dlp_projects_storedInfoTypes_patchSignal(OAIGooglePrivacyDlpV2StoredInfoType summary);


    void dlp_projects_locations_columnDataProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListColumnDataProfilesResponse summary);
    void dlp_projects_locations_content_deidentifySignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2DeidentifyContentResponse summary);
    void dlp_projects_locations_content_inspectSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2InspectContentResponse summary);
    void dlp_projects_locations_content_reidentifySignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ReidentifyContentResponse summary);
    void dlp_projects_locations_deidentifyTemplates_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2DeidentifyTemplate summary);
    void dlp_projects_locations_deidentifyTemplates_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListDeidentifyTemplatesResponse summary);
    void dlp_projects_locations_discoveryConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2DiscoveryConfig summary);
    void dlp_projects_locations_discoveryConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListDiscoveryConfigsResponse summary);
    void dlp_projects_locations_dlpJobs_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dlp_projects_locations_dlpJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2DlpJob summary);
    void dlp_projects_locations_dlpJobs_finishSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dlp_projects_locations_dlpJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListDlpJobsResponse summary);
    void dlp_projects_locations_image_redactSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2RedactImageResponse summary);
    void dlp_projects_locations_inspectTemplates_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2InspectTemplate summary);
    void dlp_projects_locations_inspectTemplates_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListInspectTemplatesResponse summary);
    void dlp_projects_locations_jobTriggers_activateSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2DlpJob summary);
    void dlp_projects_locations_jobTriggers_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2JobTrigger summary);
    void dlp_projects_locations_jobTriggers_hybridInspectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dlp_projects_locations_jobTriggers_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListJobTriggersResponse summary);
    void dlp_projects_locations_projectDataProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListProjectDataProfilesResponse summary);
    void dlp_projects_locations_tableDataProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListTableDataProfilesResponse summary);
    void dlp_projects_storedInfoTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2StoredInfoType summary);
    void dlp_projects_storedInfoTypes_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dlp_projects_storedInfoTypes_getSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2StoredInfoType summary);
    void dlp_projects_storedInfoTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2ListStoredInfoTypesResponse summary);
    void dlp_projects_storedInfoTypes_patchSignalFull(OAIHttpRequestWorker *worker, OAIGooglePrivacyDlpV2StoredInfoType summary);

    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_columnDataProfiles_listSignalError() instead")
    void dlp_projects_locations_columnDataProfiles_listSignalE(OAIGooglePrivacyDlpV2ListColumnDataProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_columnDataProfiles_listSignalError(OAIGooglePrivacyDlpV2ListColumnDataProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_deidentifySignalError() instead")
    void dlp_projects_locations_content_deidentifySignalE(OAIGooglePrivacyDlpV2DeidentifyContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_deidentifySignalError(OAIGooglePrivacyDlpV2DeidentifyContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_inspectSignalError() instead")
    void dlp_projects_locations_content_inspectSignalE(OAIGooglePrivacyDlpV2InspectContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_inspectSignalError(OAIGooglePrivacyDlpV2InspectContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_reidentifySignalError() instead")
    void dlp_projects_locations_content_reidentifySignalE(OAIGooglePrivacyDlpV2ReidentifyContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_reidentifySignalError(OAIGooglePrivacyDlpV2ReidentifyContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_deidentifyTemplates_createSignalError() instead")
    void dlp_projects_locations_deidentifyTemplates_createSignalE(OAIGooglePrivacyDlpV2DeidentifyTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_deidentifyTemplates_createSignalError(OAIGooglePrivacyDlpV2DeidentifyTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_deidentifyTemplates_listSignalError() instead")
    void dlp_projects_locations_deidentifyTemplates_listSignalE(OAIGooglePrivacyDlpV2ListDeidentifyTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_deidentifyTemplates_listSignalError(OAIGooglePrivacyDlpV2ListDeidentifyTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_discoveryConfigs_createSignalError() instead")
    void dlp_projects_locations_discoveryConfigs_createSignalE(OAIGooglePrivacyDlpV2DiscoveryConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_discoveryConfigs_createSignalError(OAIGooglePrivacyDlpV2DiscoveryConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_discoveryConfigs_listSignalError() instead")
    void dlp_projects_locations_discoveryConfigs_listSignalE(OAIGooglePrivacyDlpV2ListDiscoveryConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_discoveryConfigs_listSignalError(OAIGooglePrivacyDlpV2ListDiscoveryConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_cancelSignalError() instead")
    void dlp_projects_locations_dlpJobs_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_createSignalError() instead")
    void dlp_projects_locations_dlpJobs_createSignalE(OAIGooglePrivacyDlpV2DlpJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_createSignalError(OAIGooglePrivacyDlpV2DlpJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_finishSignalError() instead")
    void dlp_projects_locations_dlpJobs_finishSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_finishSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_listSignalError() instead")
    void dlp_projects_locations_dlpJobs_listSignalE(OAIGooglePrivacyDlpV2ListDlpJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_listSignalError(OAIGooglePrivacyDlpV2ListDlpJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_image_redactSignalError() instead")
    void dlp_projects_locations_image_redactSignalE(OAIGooglePrivacyDlpV2RedactImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_image_redactSignalError(OAIGooglePrivacyDlpV2RedactImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_inspectTemplates_createSignalError() instead")
    void dlp_projects_locations_inspectTemplates_createSignalE(OAIGooglePrivacyDlpV2InspectTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_inspectTemplates_createSignalError(OAIGooglePrivacyDlpV2InspectTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_inspectTemplates_listSignalError() instead")
    void dlp_projects_locations_inspectTemplates_listSignalE(OAIGooglePrivacyDlpV2ListInspectTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_inspectTemplates_listSignalError(OAIGooglePrivacyDlpV2ListInspectTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_activateSignalError() instead")
    void dlp_projects_locations_jobTriggers_activateSignalE(OAIGooglePrivacyDlpV2DlpJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_activateSignalError(OAIGooglePrivacyDlpV2DlpJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_createSignalError() instead")
    void dlp_projects_locations_jobTriggers_createSignalE(OAIGooglePrivacyDlpV2JobTrigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_createSignalError(OAIGooglePrivacyDlpV2JobTrigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_hybridInspectSignalError() instead")
    void dlp_projects_locations_jobTriggers_hybridInspectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_hybridInspectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_listSignalError() instead")
    void dlp_projects_locations_jobTriggers_listSignalE(OAIGooglePrivacyDlpV2ListJobTriggersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_listSignalError(OAIGooglePrivacyDlpV2ListJobTriggersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_projectDataProfiles_listSignalError() instead")
    void dlp_projects_locations_projectDataProfiles_listSignalE(OAIGooglePrivacyDlpV2ListProjectDataProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_projectDataProfiles_listSignalError(OAIGooglePrivacyDlpV2ListProjectDataProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_tableDataProfiles_listSignalError() instead")
    void dlp_projects_locations_tableDataProfiles_listSignalE(OAIGooglePrivacyDlpV2ListTableDataProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_tableDataProfiles_listSignalError(OAIGooglePrivacyDlpV2ListTableDataProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_createSignalError() instead")
    void dlp_projects_storedInfoTypes_createSignalE(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_createSignalError(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_deleteSignalError() instead")
    void dlp_projects_storedInfoTypes_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_getSignalError() instead")
    void dlp_projects_storedInfoTypes_getSignalE(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_getSignalError(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_listSignalError() instead")
    void dlp_projects_storedInfoTypes_listSignalE(OAIGooglePrivacyDlpV2ListStoredInfoTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_listSignalError(OAIGooglePrivacyDlpV2ListStoredInfoTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_patchSignalError() instead")
    void dlp_projects_storedInfoTypes_patchSignalE(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_patchSignalError(OAIGooglePrivacyDlpV2StoredInfoType summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_columnDataProfiles_listSignalErrorFull() instead")
    void dlp_projects_locations_columnDataProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_columnDataProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_deidentifySignalErrorFull() instead")
    void dlp_projects_locations_content_deidentifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_deidentifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_inspectSignalErrorFull() instead")
    void dlp_projects_locations_content_inspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_inspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_content_reidentifySignalErrorFull() instead")
    void dlp_projects_locations_content_reidentifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_content_reidentifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_deidentifyTemplates_createSignalErrorFull() instead")
    void dlp_projects_locations_deidentifyTemplates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_deidentifyTemplates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_deidentifyTemplates_listSignalErrorFull() instead")
    void dlp_projects_locations_deidentifyTemplates_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_deidentifyTemplates_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_discoveryConfigs_createSignalErrorFull() instead")
    void dlp_projects_locations_discoveryConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_discoveryConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_discoveryConfigs_listSignalErrorFull() instead")
    void dlp_projects_locations_discoveryConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_discoveryConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_cancelSignalErrorFull() instead")
    void dlp_projects_locations_dlpJobs_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_createSignalErrorFull() instead")
    void dlp_projects_locations_dlpJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_finishSignalErrorFull() instead")
    void dlp_projects_locations_dlpJobs_finishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_finishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_dlpJobs_listSignalErrorFull() instead")
    void dlp_projects_locations_dlpJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_dlpJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_image_redactSignalErrorFull() instead")
    void dlp_projects_locations_image_redactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_image_redactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_inspectTemplates_createSignalErrorFull() instead")
    void dlp_projects_locations_inspectTemplates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_inspectTemplates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_inspectTemplates_listSignalErrorFull() instead")
    void dlp_projects_locations_inspectTemplates_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_inspectTemplates_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_activateSignalErrorFull() instead")
    void dlp_projects_locations_jobTriggers_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_createSignalErrorFull() instead")
    void dlp_projects_locations_jobTriggers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_hybridInspectSignalErrorFull() instead")
    void dlp_projects_locations_jobTriggers_hybridInspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_hybridInspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_jobTriggers_listSignalErrorFull() instead")
    void dlp_projects_locations_jobTriggers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_jobTriggers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_projectDataProfiles_listSignalErrorFull() instead")
    void dlp_projects_locations_projectDataProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_projectDataProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_locations_tableDataProfiles_listSignalErrorFull() instead")
    void dlp_projects_locations_tableDataProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_locations_tableDataProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_createSignalErrorFull() instead")
    void dlp_projects_storedInfoTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_deleteSignalErrorFull() instead")
    void dlp_projects_storedInfoTypes_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_getSignalErrorFull() instead")
    void dlp_projects_storedInfoTypes_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_listSignalErrorFull() instead")
    void dlp_projects_storedInfoTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dlp_projects_storedInfoTypes_patchSignalErrorFull() instead")
    void dlp_projects_storedInfoTypes_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dlp_projects_storedInfoTypes_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
