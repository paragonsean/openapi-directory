/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2ImageTransformation.h
 *
 * Configuration for determining how redaction of images should occur.
 */

#ifndef OAIGooglePrivacyDlpV2ImageTransformation_H
#define OAIGooglePrivacyDlpV2ImageTransformation_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2Color.h"
#include "OAIGooglePrivacyDlpV2SelectedInfoTypes.h"
#include "OAIObject.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2Color;
class OAIGooglePrivacyDlpV2SelectedInfoTypes;

class OAIGooglePrivacyDlpV2ImageTransformation : public OAIObject {
public:
    OAIGooglePrivacyDlpV2ImageTransformation();
    OAIGooglePrivacyDlpV2ImageTransformation(QString json);
    ~OAIGooglePrivacyDlpV2ImageTransformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getAllInfoTypes() const;
    void setAllInfoTypes(const OAIObject &all_info_types);
    bool is_all_info_types_Set() const;
    bool is_all_info_types_Valid() const;

    OAIObject getAllText() const;
    void setAllText(const OAIObject &all_text);
    bool is_all_text_Set() const;
    bool is_all_text_Valid() const;

    OAIGooglePrivacyDlpV2Color getRedactionColor() const;
    void setRedactionColor(const OAIGooglePrivacyDlpV2Color &redaction_color);
    bool is_redaction_color_Set() const;
    bool is_redaction_color_Valid() const;

    OAIGooglePrivacyDlpV2SelectedInfoTypes getSelectedInfoTypes() const;
    void setSelectedInfoTypes(const OAIGooglePrivacyDlpV2SelectedInfoTypes &selected_info_types);
    bool is_selected_info_types_Set() const;
    bool is_selected_info_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_all_info_types;
    bool m_all_info_types_isSet;
    bool m_all_info_types_isValid;

    OAIObject m_all_text;
    bool m_all_text_isSet;
    bool m_all_text_isValid;

    OAIGooglePrivacyDlpV2Color m_redaction_color;
    bool m_redaction_color_isSet;
    bool m_redaction_color_isValid;

    OAIGooglePrivacyDlpV2SelectedInfoTypes m_selected_info_types;
    bool m_selected_info_types_isSet;
    bool m_selected_info_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2ImageTransformation)

#endif // OAIGooglePrivacyDlpV2ImageTransformation_H
