/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2HotwordRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2HotwordRule::OAIGooglePrivacyDlpV2HotwordRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2HotwordRule::OAIGooglePrivacyDlpV2HotwordRule() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2HotwordRule::~OAIGooglePrivacyDlpV2HotwordRule() {}

void OAIGooglePrivacyDlpV2HotwordRule::initializeModel() {

    m_hotword_regex_isSet = false;
    m_hotword_regex_isValid = false;

    m_likelihood_adjustment_isSet = false;
    m_likelihood_adjustment_isValid = false;

    m_proximity_isSet = false;
    m_proximity_isValid = false;
}

void OAIGooglePrivacyDlpV2HotwordRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2HotwordRule::fromJsonObject(QJsonObject json) {

    m_hotword_regex_isValid = ::OpenAPI::fromJsonValue(m_hotword_regex, json[QString("hotwordRegex")]);
    m_hotword_regex_isSet = !json[QString("hotwordRegex")].isNull() && m_hotword_regex_isValid;

    m_likelihood_adjustment_isValid = ::OpenAPI::fromJsonValue(m_likelihood_adjustment, json[QString("likelihoodAdjustment")]);
    m_likelihood_adjustment_isSet = !json[QString("likelihoodAdjustment")].isNull() && m_likelihood_adjustment_isValid;

    m_proximity_isValid = ::OpenAPI::fromJsonValue(m_proximity, json[QString("proximity")]);
    m_proximity_isSet = !json[QString("proximity")].isNull() && m_proximity_isValid;
}

QString OAIGooglePrivacyDlpV2HotwordRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2HotwordRule::asJsonObject() const {
    QJsonObject obj;
    if (m_hotword_regex.isSet()) {
        obj.insert(QString("hotwordRegex"), ::OpenAPI::toJsonValue(m_hotword_regex));
    }
    if (m_likelihood_adjustment.isSet()) {
        obj.insert(QString("likelihoodAdjustment"), ::OpenAPI::toJsonValue(m_likelihood_adjustment));
    }
    if (m_proximity.isSet()) {
        obj.insert(QString("proximity"), ::OpenAPI::toJsonValue(m_proximity));
    }
    return obj;
}

OAIGooglePrivacyDlpV2Regex OAIGooglePrivacyDlpV2HotwordRule::getHotwordRegex() const {
    return m_hotword_regex;
}
void OAIGooglePrivacyDlpV2HotwordRule::setHotwordRegex(const OAIGooglePrivacyDlpV2Regex &hotword_regex) {
    m_hotword_regex = hotword_regex;
    m_hotword_regex_isSet = true;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_hotword_regex_Set() const{
    return m_hotword_regex_isSet;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_hotword_regex_Valid() const{
    return m_hotword_regex_isValid;
}

OAIGooglePrivacyDlpV2LikelihoodAdjustment OAIGooglePrivacyDlpV2HotwordRule::getLikelihoodAdjustment() const {
    return m_likelihood_adjustment;
}
void OAIGooglePrivacyDlpV2HotwordRule::setLikelihoodAdjustment(const OAIGooglePrivacyDlpV2LikelihoodAdjustment &likelihood_adjustment) {
    m_likelihood_adjustment = likelihood_adjustment;
    m_likelihood_adjustment_isSet = true;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_likelihood_adjustment_Set() const{
    return m_likelihood_adjustment_isSet;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_likelihood_adjustment_Valid() const{
    return m_likelihood_adjustment_isValid;
}

OAIGooglePrivacyDlpV2Proximity OAIGooglePrivacyDlpV2HotwordRule::getProximity() const {
    return m_proximity;
}
void OAIGooglePrivacyDlpV2HotwordRule::setProximity(const OAIGooglePrivacyDlpV2Proximity &proximity) {
    m_proximity = proximity;
    m_proximity_isSet = true;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_proximity_Set() const{
    return m_proximity_isSet;
}

bool OAIGooglePrivacyDlpV2HotwordRule::is_proximity_Valid() const{
    return m_proximity_isValid;
}

bool OAIGooglePrivacyDlpV2HotwordRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hotword_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likelihood_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2HotwordRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
