/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2CryptoKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2CryptoKey::OAIGooglePrivacyDlpV2CryptoKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2CryptoKey::OAIGooglePrivacyDlpV2CryptoKey() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2CryptoKey::~OAIGooglePrivacyDlpV2CryptoKey() {}

void OAIGooglePrivacyDlpV2CryptoKey::initializeModel() {

    m_kms_wrapped_isSet = false;
    m_kms_wrapped_isValid = false;

    m_transient_isSet = false;
    m_transient_isValid = false;

    m_unwrapped_isSet = false;
    m_unwrapped_isValid = false;
}

void OAIGooglePrivacyDlpV2CryptoKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2CryptoKey::fromJsonObject(QJsonObject json) {

    m_kms_wrapped_isValid = ::OpenAPI::fromJsonValue(m_kms_wrapped, json[QString("kmsWrapped")]);
    m_kms_wrapped_isSet = !json[QString("kmsWrapped")].isNull() && m_kms_wrapped_isValid;

    m_transient_isValid = ::OpenAPI::fromJsonValue(m_transient, json[QString("transient")]);
    m_transient_isSet = !json[QString("transient")].isNull() && m_transient_isValid;

    m_unwrapped_isValid = ::OpenAPI::fromJsonValue(m_unwrapped, json[QString("unwrapped")]);
    m_unwrapped_isSet = !json[QString("unwrapped")].isNull() && m_unwrapped_isValid;
}

QString OAIGooglePrivacyDlpV2CryptoKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2CryptoKey::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_wrapped.isSet()) {
        obj.insert(QString("kmsWrapped"), ::OpenAPI::toJsonValue(m_kms_wrapped));
    }
    if (m_transient.isSet()) {
        obj.insert(QString("transient"), ::OpenAPI::toJsonValue(m_transient));
    }
    if (m_unwrapped.isSet()) {
        obj.insert(QString("unwrapped"), ::OpenAPI::toJsonValue(m_unwrapped));
    }
    return obj;
}

OAIGooglePrivacyDlpV2KmsWrappedCryptoKey OAIGooglePrivacyDlpV2CryptoKey::getKmsWrapped() const {
    return m_kms_wrapped;
}
void OAIGooglePrivacyDlpV2CryptoKey::setKmsWrapped(const OAIGooglePrivacyDlpV2KmsWrappedCryptoKey &kms_wrapped) {
    m_kms_wrapped = kms_wrapped;
    m_kms_wrapped_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_kms_wrapped_Set() const{
    return m_kms_wrapped_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_kms_wrapped_Valid() const{
    return m_kms_wrapped_isValid;
}

OAIGooglePrivacyDlpV2TransientCryptoKey OAIGooglePrivacyDlpV2CryptoKey::getTransient() const {
    return m_transient;
}
void OAIGooglePrivacyDlpV2CryptoKey::setTransient(const OAIGooglePrivacyDlpV2TransientCryptoKey &transient) {
    m_transient = transient;
    m_transient_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_transient_Set() const{
    return m_transient_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_transient_Valid() const{
    return m_transient_isValid;
}

OAIGooglePrivacyDlpV2UnwrappedCryptoKey OAIGooglePrivacyDlpV2CryptoKey::getUnwrapped() const {
    return m_unwrapped;
}
void OAIGooglePrivacyDlpV2CryptoKey::setUnwrapped(const OAIGooglePrivacyDlpV2UnwrappedCryptoKey &unwrapped) {
    m_unwrapped = unwrapped;
    m_unwrapped_isSet = true;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_unwrapped_Set() const{
    return m_unwrapped_isSet;
}

bool OAIGooglePrivacyDlpV2CryptoKey::is_unwrapped_Valid() const{
    return m_unwrapped_isValid;
}

bool OAIGooglePrivacyDlpV2CryptoKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_wrapped.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unwrapped.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2CryptoKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
