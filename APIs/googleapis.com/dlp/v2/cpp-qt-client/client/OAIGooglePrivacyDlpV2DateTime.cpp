/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DateTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DateTime::OAIGooglePrivacyDlpV2DateTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DateTime::OAIGooglePrivacyDlpV2DateTime() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DateTime::~OAIGooglePrivacyDlpV2DateTime() {}

void OAIGooglePrivacyDlpV2DateTime::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIGooglePrivacyDlpV2DateTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DateTime::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIGooglePrivacyDlpV2DateTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DateTime::asJsonObject() const {
    QJsonObject obj;
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_time.isSet()) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIGoogleTypeDate OAIGooglePrivacyDlpV2DateTime::getDate() const {
    return m_date;
}
void OAIGooglePrivacyDlpV2DateTime::setDate(const OAIGoogleTypeDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateTime::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGooglePrivacyDlpV2DateTime::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGooglePrivacyDlpV2DateTime::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIGooglePrivacyDlpV2DateTime::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateTime::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIGooglePrivacyDlpV2DateTime::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

OAIGoogleTypeTimeOfDay OAIGooglePrivacyDlpV2DateTime::getTime() const {
    return m_time;
}
void OAIGooglePrivacyDlpV2DateTime::setTime(const OAIGoogleTypeTimeOfDay &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateTime::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGooglePrivacyDlpV2DateTime::is_time_Valid() const{
    return m_time_isValid;
}

OAIGooglePrivacyDlpV2TimeZone OAIGooglePrivacyDlpV2DateTime::getTimeZone() const {
    return m_time_zone;
}
void OAIGooglePrivacyDlpV2DateTime::setTimeZone(const OAIGooglePrivacyDlpV2TimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGooglePrivacyDlpV2DateTime::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGooglePrivacyDlpV2DateTime::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIGooglePrivacyDlpV2DateTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DateTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
