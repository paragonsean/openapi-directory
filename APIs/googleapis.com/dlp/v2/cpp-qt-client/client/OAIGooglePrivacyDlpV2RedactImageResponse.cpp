/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RedactImageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RedactImageResponse::OAIGooglePrivacyDlpV2RedactImageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RedactImageResponse::OAIGooglePrivacyDlpV2RedactImageResponse() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RedactImageResponse::~OAIGooglePrivacyDlpV2RedactImageResponse() {}

void OAIGooglePrivacyDlpV2RedactImageResponse::initializeModel() {

    m_extracted_text_isSet = false;
    m_extracted_text_isValid = false;

    m_inspect_result_isSet = false;
    m_inspect_result_isValid = false;

    m_redacted_image_isSet = false;
    m_redacted_image_isValid = false;
}

void OAIGooglePrivacyDlpV2RedactImageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RedactImageResponse::fromJsonObject(QJsonObject json) {

    m_extracted_text_isValid = ::OpenAPI::fromJsonValue(m_extracted_text, json[QString("extractedText")]);
    m_extracted_text_isSet = !json[QString("extractedText")].isNull() && m_extracted_text_isValid;

    m_inspect_result_isValid = ::OpenAPI::fromJsonValue(m_inspect_result, json[QString("inspectResult")]);
    m_inspect_result_isSet = !json[QString("inspectResult")].isNull() && m_inspect_result_isValid;

    m_redacted_image_isValid = ::OpenAPI::fromJsonValue(m_redacted_image, json[QString("redactedImage")]);
    m_redacted_image_isSet = !json[QString("redactedImage")].isNull() && m_redacted_image_isValid;
}

QString OAIGooglePrivacyDlpV2RedactImageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RedactImageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_extracted_text_isSet) {
        obj.insert(QString("extractedText"), ::OpenAPI::toJsonValue(m_extracted_text));
    }
    if (m_inspect_result.isSet()) {
        obj.insert(QString("inspectResult"), ::OpenAPI::toJsonValue(m_inspect_result));
    }
    if (m_redacted_image_isSet) {
        obj.insert(QString("redactedImage"), ::OpenAPI::toJsonValue(m_redacted_image));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2RedactImageResponse::getExtractedText() const {
    return m_extracted_text;
}
void OAIGooglePrivacyDlpV2RedactImageResponse::setExtractedText(const QString &extracted_text) {
    m_extracted_text = extracted_text;
    m_extracted_text_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_extracted_text_Set() const{
    return m_extracted_text_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_extracted_text_Valid() const{
    return m_extracted_text_isValid;
}

OAIGooglePrivacyDlpV2InspectResult OAIGooglePrivacyDlpV2RedactImageResponse::getInspectResult() const {
    return m_inspect_result;
}
void OAIGooglePrivacyDlpV2RedactImageResponse::setInspectResult(const OAIGooglePrivacyDlpV2InspectResult &inspect_result) {
    m_inspect_result = inspect_result;
    m_inspect_result_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_inspect_result_Set() const{
    return m_inspect_result_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_inspect_result_Valid() const{
    return m_inspect_result_isValid;
}

QByteArray OAIGooglePrivacyDlpV2RedactImageResponse::getRedactedImage() const {
    return m_redacted_image;
}
void OAIGooglePrivacyDlpV2RedactImageResponse::setRedactedImage(const QByteArray &redacted_image) {
    m_redacted_image = redacted_image;
    m_redacted_image_isSet = true;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_redacted_image_Set() const{
    return m_redacted_image_isSet;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::is_redacted_image_Valid() const{
    return m_redacted_image_isValid;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extracted_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspect_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RedactImageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
