/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2FindingLimits.h
 *
 * Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don&#39;t apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don&#39;t include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
 */

#ifndef OAIGooglePrivacyDlpV2FindingLimits_H
#define OAIGooglePrivacyDlpV2FindingLimits_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2InfoTypeLimit.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2InfoTypeLimit;

class OAIGooglePrivacyDlpV2FindingLimits : public OAIObject {
public:
    OAIGooglePrivacyDlpV2FindingLimits();
    OAIGooglePrivacyDlpV2FindingLimits(QString json);
    ~OAIGooglePrivacyDlpV2FindingLimits() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGooglePrivacyDlpV2InfoTypeLimit> getMaxFindingsPerInfoType() const;
    void setMaxFindingsPerInfoType(const QList<OAIGooglePrivacyDlpV2InfoTypeLimit> &max_findings_per_info_type);
    bool is_max_findings_per_info_type_Set() const;
    bool is_max_findings_per_info_type_Valid() const;

    qint32 getMaxFindingsPerItem() const;
    void setMaxFindingsPerItem(const qint32 &max_findings_per_item);
    bool is_max_findings_per_item_Set() const;
    bool is_max_findings_per_item_Valid() const;

    qint32 getMaxFindingsPerRequest() const;
    void setMaxFindingsPerRequest(const qint32 &max_findings_per_request);
    bool is_max_findings_per_request_Set() const;
    bool is_max_findings_per_request_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGooglePrivacyDlpV2InfoTypeLimit> m_max_findings_per_info_type;
    bool m_max_findings_per_info_type_isSet;
    bool m_max_findings_per_info_type_isValid;

    qint32 m_max_findings_per_item;
    bool m_max_findings_per_item_isSet;
    bool m_max_findings_per_item_isValid;

    qint32 m_max_findings_per_request;
    bool m_max_findings_per_request_isSet;
    bool m_max_findings_per_request_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2FindingLimits)

#endif // OAIGooglePrivacyDlpV2FindingLimits_H
