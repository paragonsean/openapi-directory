/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2RecordTransformations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2RecordTransformations::OAIGooglePrivacyDlpV2RecordTransformations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2RecordTransformations::OAIGooglePrivacyDlpV2RecordTransformations() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2RecordTransformations::~OAIGooglePrivacyDlpV2RecordTransformations() {}

void OAIGooglePrivacyDlpV2RecordTransformations::initializeModel() {

    m_field_transformations_isSet = false;
    m_field_transformations_isValid = false;

    m_record_suppressions_isSet = false;
    m_record_suppressions_isValid = false;
}

void OAIGooglePrivacyDlpV2RecordTransformations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2RecordTransformations::fromJsonObject(QJsonObject json) {

    m_field_transformations_isValid = ::OpenAPI::fromJsonValue(m_field_transformations, json[QString("fieldTransformations")]);
    m_field_transformations_isSet = !json[QString("fieldTransformations")].isNull() && m_field_transformations_isValid;

    m_record_suppressions_isValid = ::OpenAPI::fromJsonValue(m_record_suppressions, json[QString("recordSuppressions")]);
    m_record_suppressions_isSet = !json[QString("recordSuppressions")].isNull() && m_record_suppressions_isValid;
}

QString OAIGooglePrivacyDlpV2RecordTransformations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2RecordTransformations::asJsonObject() const {
    QJsonObject obj;
    if (m_field_transformations.size() > 0) {
        obj.insert(QString("fieldTransformations"), ::OpenAPI::toJsonValue(m_field_transformations));
    }
    if (m_record_suppressions.size() > 0) {
        obj.insert(QString("recordSuppressions"), ::OpenAPI::toJsonValue(m_record_suppressions));
    }
    return obj;
}

QList<OAIGooglePrivacyDlpV2FieldTransformation> OAIGooglePrivacyDlpV2RecordTransformations::getFieldTransformations() const {
    return m_field_transformations;
}
void OAIGooglePrivacyDlpV2RecordTransformations::setFieldTransformations(const QList<OAIGooglePrivacyDlpV2FieldTransformation> &field_transformations) {
    m_field_transformations = field_transformations;
    m_field_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::is_field_transformations_Set() const{
    return m_field_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::is_field_transformations_Valid() const{
    return m_field_transformations_isValid;
}

QList<OAIGooglePrivacyDlpV2RecordSuppression> OAIGooglePrivacyDlpV2RecordTransformations::getRecordSuppressions() const {
    return m_record_suppressions;
}
void OAIGooglePrivacyDlpV2RecordTransformations::setRecordSuppressions(const QList<OAIGooglePrivacyDlpV2RecordSuppression> &record_suppressions) {
    m_record_suppressions = record_suppressions;
    m_record_suppressions_isSet = true;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::is_record_suppressions_Set() const{
    return m_record_suppressions_isSet;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::is_record_suppressions_Valid() const{
    return m_record_suppressions_isValid;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_transformations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_suppressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2RecordTransformations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
