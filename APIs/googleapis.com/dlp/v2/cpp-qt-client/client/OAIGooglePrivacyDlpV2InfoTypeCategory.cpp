/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2InfoTypeCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2InfoTypeCategory::OAIGooglePrivacyDlpV2InfoTypeCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2InfoTypeCategory::OAIGooglePrivacyDlpV2InfoTypeCategory() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2InfoTypeCategory::~OAIGooglePrivacyDlpV2InfoTypeCategory() {}

void OAIGooglePrivacyDlpV2InfoTypeCategory::initializeModel() {

    m_industry_category_isSet = false;
    m_industry_category_isValid = false;

    m_location_category_isSet = false;
    m_location_category_isValid = false;

    m_type_category_isSet = false;
    m_type_category_isValid = false;
}

void OAIGooglePrivacyDlpV2InfoTypeCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2InfoTypeCategory::fromJsonObject(QJsonObject json) {

    m_industry_category_isValid = ::OpenAPI::fromJsonValue(m_industry_category, json[QString("industryCategory")]);
    m_industry_category_isSet = !json[QString("industryCategory")].isNull() && m_industry_category_isValid;

    m_location_category_isValid = ::OpenAPI::fromJsonValue(m_location_category, json[QString("locationCategory")]);
    m_location_category_isSet = !json[QString("locationCategory")].isNull() && m_location_category_isValid;

    m_type_category_isValid = ::OpenAPI::fromJsonValue(m_type_category, json[QString("typeCategory")]);
    m_type_category_isSet = !json[QString("typeCategory")].isNull() && m_type_category_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2InfoTypeCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_industry_category_isSet) {
        obj.insert(QString("industryCategory"), ::OpenAPI::toJsonValue(m_industry_category));
    }
    if (m_location_category_isSet) {
        obj.insert(QString("locationCategory"), ::OpenAPI::toJsonValue(m_location_category));
    }
    if (m_type_category_isSet) {
        obj.insert(QString("typeCategory"), ::OpenAPI::toJsonValue(m_type_category));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2InfoTypeCategory::getIndustryCategory() const {
    return m_industry_category;
}
void OAIGooglePrivacyDlpV2InfoTypeCategory::setIndustryCategory(const QString &industry_category) {
    m_industry_category = industry_category;
    m_industry_category_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_industry_category_Set() const{
    return m_industry_category_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_industry_category_Valid() const{
    return m_industry_category_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeCategory::getLocationCategory() const {
    return m_location_category;
}
void OAIGooglePrivacyDlpV2InfoTypeCategory::setLocationCategory(const QString &location_category) {
    m_location_category = location_category;
    m_location_category_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_location_category_Set() const{
    return m_location_category_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_location_category_Valid() const{
    return m_location_category_isValid;
}

QString OAIGooglePrivacyDlpV2InfoTypeCategory::getTypeCategory() const {
    return m_type_category;
}
void OAIGooglePrivacyDlpV2InfoTypeCategory::setTypeCategory(const QString &type_category) {
    m_type_category = type_category;
    m_type_category_isSet = true;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_type_category_Set() const{
    return m_type_category_isSet;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::is_type_category_Valid() const{
    return m_type_category_isValid;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_industry_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_category_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2InfoTypeCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
