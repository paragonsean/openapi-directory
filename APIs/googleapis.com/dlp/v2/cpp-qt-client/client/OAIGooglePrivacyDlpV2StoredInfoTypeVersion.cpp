/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2StoredInfoTypeVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2StoredInfoTypeVersion::OAIGooglePrivacyDlpV2StoredInfoTypeVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2StoredInfoTypeVersion::OAIGooglePrivacyDlpV2StoredInfoTypeVersion() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2StoredInfoTypeVersion::~OAIGooglePrivacyDlpV2StoredInfoTypeVersion() {}

void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2StoredInfoTypeVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

OAIGooglePrivacyDlpV2StoredInfoTypeConfig OAIGooglePrivacyDlpV2StoredInfoTypeVersion::getConfig() const {
    return m_config;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::setConfig(const OAIGooglePrivacyDlpV2StoredInfoTypeConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeVersion::getCreateTime() const {
    return m_create_time;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIGooglePrivacyDlpV2Error> OAIGooglePrivacyDlpV2StoredInfoTypeVersion::getErrors() const {
    return m_errors;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::setErrors(const QList<OAIGooglePrivacyDlpV2Error> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIGooglePrivacyDlpV2StoredInfoTypeVersion::getState() const {
    return m_state;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_state_Valid() const{
    return m_state_isValid;
}

OAIGooglePrivacyDlpV2StoredInfoTypeStats OAIGooglePrivacyDlpV2StoredInfoTypeVersion::getStats() const {
    return m_stats;
}
void OAIGooglePrivacyDlpV2StoredInfoTypeVersion::setStats(const OAIGooglePrivacyDlpV2StoredInfoTypeStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2StoredInfoTypeVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
