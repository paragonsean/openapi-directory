/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::~OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions() {}

void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::initializeModel() {

    m_created_after_isSet = false;
    m_created_after_isValid = false;

    m_or_conditions_isSet = false;
    m_or_conditions_isValid = false;

    m_type_collection_isSet = false;
    m_type_collection_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::fromJsonObject(QJsonObject json) {

    m_created_after_isValid = ::OpenAPI::fromJsonValue(m_created_after, json[QString("createdAfter")]);
    m_created_after_isSet = !json[QString("createdAfter")].isNull() && m_created_after_isValid;

    m_or_conditions_isValid = ::OpenAPI::fromJsonValue(m_or_conditions, json[QString("orConditions")]);
    m_or_conditions_isSet = !json[QString("orConditions")].isNull() && m_or_conditions_isValid;

    m_type_collection_isValid = ::OpenAPI::fromJsonValue(m_type_collection, json[QString("typeCollection")]);
    m_type_collection_isSet = !json[QString("typeCollection")].isNull() && m_type_collection_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_created_after_isSet) {
        obj.insert(QString("createdAfter"), ::OpenAPI::toJsonValue(m_created_after));
    }
    if (m_or_conditions.isSet()) {
        obj.insert(QString("orConditions"), ::OpenAPI::toJsonValue(m_or_conditions));
    }
    if (m_type_collection_isSet) {
        obj.insert(QString("typeCollection"), ::OpenAPI::toJsonValue(m_type_collection));
    }
    if (m_types.isSet()) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::getCreatedAfter() const {
    return m_created_after;
}
void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::setCreatedAfter(const QString &created_after) {
    m_created_after = created_after;
    m_created_after_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_created_after_Set() const{
    return m_created_after_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_created_after_Valid() const{
    return m_created_after_isValid;
}

OAIGooglePrivacyDlpV2OrConditions OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::getOrConditions() const {
    return m_or_conditions;
}
void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::setOrConditions(const OAIGooglePrivacyDlpV2OrConditions &or_conditions) {
    m_or_conditions = or_conditions;
    m_or_conditions_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_or_conditions_Set() const{
    return m_or_conditions_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_or_conditions_Valid() const{
    return m_or_conditions_isValid;
}

QString OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::getTypeCollection() const {
    return m_type_collection;
}
void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::setTypeCollection(const QString &type_collection) {
    m_type_collection = type_collection;
    m_type_collection_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_type_collection_Set() const{
    return m_type_collection_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_type_collection_Valid() const{
    return m_type_collection_isValid;
}

OAIGooglePrivacyDlpV2BigQueryTableTypes OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::getTypes() const {
    return m_types;
}
void OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::setTypes(const OAIGooglePrivacyDlpV2BigQueryTableTypes &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DiscoveryBigQueryConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
