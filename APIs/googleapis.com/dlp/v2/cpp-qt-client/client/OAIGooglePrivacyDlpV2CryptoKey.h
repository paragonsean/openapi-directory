/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGooglePrivacyDlpV2CryptoKey.h
 *
 * This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
 */

#ifndef OAIGooglePrivacyDlpV2CryptoKey_H
#define OAIGooglePrivacyDlpV2CryptoKey_H

#include <QJsonObject>

#include "OAIGooglePrivacyDlpV2KmsWrappedCryptoKey.h"
#include "OAIGooglePrivacyDlpV2TransientCryptoKey.h"
#include "OAIGooglePrivacyDlpV2UnwrappedCryptoKey.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGooglePrivacyDlpV2KmsWrappedCryptoKey;
class OAIGooglePrivacyDlpV2TransientCryptoKey;
class OAIGooglePrivacyDlpV2UnwrappedCryptoKey;

class OAIGooglePrivacyDlpV2CryptoKey : public OAIObject {
public:
    OAIGooglePrivacyDlpV2CryptoKey();
    OAIGooglePrivacyDlpV2CryptoKey(QString json);
    ~OAIGooglePrivacyDlpV2CryptoKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGooglePrivacyDlpV2KmsWrappedCryptoKey getKmsWrapped() const;
    void setKmsWrapped(const OAIGooglePrivacyDlpV2KmsWrappedCryptoKey &kms_wrapped);
    bool is_kms_wrapped_Set() const;
    bool is_kms_wrapped_Valid() const;

    OAIGooglePrivacyDlpV2TransientCryptoKey getTransient() const;
    void setTransient(const OAIGooglePrivacyDlpV2TransientCryptoKey &transient);
    bool is_transient_Set() const;
    bool is_transient_Valid() const;

    OAIGooglePrivacyDlpV2UnwrappedCryptoKey getUnwrapped() const;
    void setUnwrapped(const OAIGooglePrivacyDlpV2UnwrappedCryptoKey &unwrapped);
    bool is_unwrapped_Set() const;
    bool is_unwrapped_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGooglePrivacyDlpV2KmsWrappedCryptoKey m_kms_wrapped;
    bool m_kms_wrapped_isSet;
    bool m_kms_wrapped_isValid;

    OAIGooglePrivacyDlpV2TransientCryptoKey m_transient;
    bool m_transient_isSet;
    bool m_transient_isValid;

    OAIGooglePrivacyDlpV2UnwrappedCryptoKey m_unwrapped;
    bool m_unwrapped_isSet;
    bool m_unwrapped_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGooglePrivacyDlpV2CryptoKey)

#endif // OAIGooglePrivacyDlpV2CryptoKey_H
