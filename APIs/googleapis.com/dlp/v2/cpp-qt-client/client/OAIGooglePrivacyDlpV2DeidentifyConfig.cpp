/**
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePrivacyDlpV2DeidentifyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePrivacyDlpV2DeidentifyConfig::OAIGooglePrivacyDlpV2DeidentifyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePrivacyDlpV2DeidentifyConfig::OAIGooglePrivacyDlpV2DeidentifyConfig() {
    this->initializeModel();
}

OAIGooglePrivacyDlpV2DeidentifyConfig::~OAIGooglePrivacyDlpV2DeidentifyConfig() {}

void OAIGooglePrivacyDlpV2DeidentifyConfig::initializeModel() {

    m_image_transformations_isSet = false;
    m_image_transformations_isValid = false;

    m_info_type_transformations_isSet = false;
    m_info_type_transformations_isValid = false;

    m_record_transformations_isSet = false;
    m_record_transformations_isValid = false;

    m_transformation_error_handling_isSet = false;
    m_transformation_error_handling_isValid = false;
}

void OAIGooglePrivacyDlpV2DeidentifyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePrivacyDlpV2DeidentifyConfig::fromJsonObject(QJsonObject json) {

    m_image_transformations_isValid = ::OpenAPI::fromJsonValue(m_image_transformations, json[QString("imageTransformations")]);
    m_image_transformations_isSet = !json[QString("imageTransformations")].isNull() && m_image_transformations_isValid;

    m_info_type_transformations_isValid = ::OpenAPI::fromJsonValue(m_info_type_transformations, json[QString("infoTypeTransformations")]);
    m_info_type_transformations_isSet = !json[QString("infoTypeTransformations")].isNull() && m_info_type_transformations_isValid;

    m_record_transformations_isValid = ::OpenAPI::fromJsonValue(m_record_transformations, json[QString("recordTransformations")]);
    m_record_transformations_isSet = !json[QString("recordTransformations")].isNull() && m_record_transformations_isValid;

    m_transformation_error_handling_isValid = ::OpenAPI::fromJsonValue(m_transformation_error_handling, json[QString("transformationErrorHandling")]);
    m_transformation_error_handling_isSet = !json[QString("transformationErrorHandling")].isNull() && m_transformation_error_handling_isValid;
}

QString OAIGooglePrivacyDlpV2DeidentifyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePrivacyDlpV2DeidentifyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_image_transformations.isSet()) {
        obj.insert(QString("imageTransformations"), ::OpenAPI::toJsonValue(m_image_transformations));
    }
    if (m_info_type_transformations.isSet()) {
        obj.insert(QString("infoTypeTransformations"), ::OpenAPI::toJsonValue(m_info_type_transformations));
    }
    if (m_record_transformations.isSet()) {
        obj.insert(QString("recordTransformations"), ::OpenAPI::toJsonValue(m_record_transformations));
    }
    if (m_transformation_error_handling.isSet()) {
        obj.insert(QString("transformationErrorHandling"), ::OpenAPI::toJsonValue(m_transformation_error_handling));
    }
    return obj;
}

OAIGooglePrivacyDlpV2ImageTransformations OAIGooglePrivacyDlpV2DeidentifyConfig::getImageTransformations() const {
    return m_image_transformations;
}
void OAIGooglePrivacyDlpV2DeidentifyConfig::setImageTransformations(const OAIGooglePrivacyDlpV2ImageTransformations &image_transformations) {
    m_image_transformations = image_transformations;
    m_image_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_image_transformations_Set() const{
    return m_image_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_image_transformations_Valid() const{
    return m_image_transformations_isValid;
}

OAIGooglePrivacyDlpV2InfoTypeTransformations OAIGooglePrivacyDlpV2DeidentifyConfig::getInfoTypeTransformations() const {
    return m_info_type_transformations;
}
void OAIGooglePrivacyDlpV2DeidentifyConfig::setInfoTypeTransformations(const OAIGooglePrivacyDlpV2InfoTypeTransformations &info_type_transformations) {
    m_info_type_transformations = info_type_transformations;
    m_info_type_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_info_type_transformations_Set() const{
    return m_info_type_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_info_type_transformations_Valid() const{
    return m_info_type_transformations_isValid;
}

OAIGooglePrivacyDlpV2RecordTransformations OAIGooglePrivacyDlpV2DeidentifyConfig::getRecordTransformations() const {
    return m_record_transformations;
}
void OAIGooglePrivacyDlpV2DeidentifyConfig::setRecordTransformations(const OAIGooglePrivacyDlpV2RecordTransformations &record_transformations) {
    m_record_transformations = record_transformations;
    m_record_transformations_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_record_transformations_Set() const{
    return m_record_transformations_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_record_transformations_Valid() const{
    return m_record_transformations_isValid;
}

OAIGooglePrivacyDlpV2TransformationErrorHandling OAIGooglePrivacyDlpV2DeidentifyConfig::getTransformationErrorHandling() const {
    return m_transformation_error_handling;
}
void OAIGooglePrivacyDlpV2DeidentifyConfig::setTransformationErrorHandling(const OAIGooglePrivacyDlpV2TransformationErrorHandling &transformation_error_handling) {
    m_transformation_error_handling = transformation_error_handling;
    m_transformation_error_handling_isSet = true;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_transformation_error_handling_Set() const{
    return m_transformation_error_handling_isSet;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::is_transformation_error_handling_Valid() const{
    return m_transformation_error_handling_isValid;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_type_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_error_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePrivacyDlpV2DeidentifyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
