# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2DiscoveryTableModifiedCadence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: str=None, types: List[str]=None):
        """GooglePrivacyDlpV2DiscoveryTableModifiedCadence - a model defined in OpenAPI

        :param frequency: The frequency of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        :param types: The types of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        """
        self.openapi_types = {
            'frequency': str,
            'types': List[str]
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'types': 'types'
        }

        self._frequency = frequency
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DiscoveryTableModifiedCadence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DiscoveryTableModifiedCadence of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.

        How frequently data profiles can be updated when tables are modified. Defaults to never.

        :return: The frequency of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.

        How frequently data profiles can be updated when tables are modified. Defaults to never.

        :param frequency: The frequency of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        :type frequency: str
        """
        allowed_values = ["UPDATE_FREQUENCY_UNSPECIFIED", "UPDATE_FREQUENCY_NEVER", "UPDATE_FREQUENCY_DAILY", "UPDATE_FREQUENCY_MONTHLY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def types(self):
        """Gets the types of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.

        The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.

        :return: The types of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.

        The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.

        :param types: The types of this GooglePrivacyDlpV2DiscoveryTableModifiedCadence.
        :type types: List[str]
        """
        allowed_values = ["TABLE_MODIFICATION_UNSPECIFIED", "TABLE_MODIFIED_TIMESTAMP"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types
