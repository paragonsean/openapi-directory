# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2TransformationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deidentify_template: str=None, image_redact_template: str=None, structured_deidentify_template: str=None):
        """GooglePrivacyDlpV2TransformationConfig - a model defined in OpenAPI

        :param deidentify_template: The deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        :param image_redact_template: The image_redact_template of this GooglePrivacyDlpV2TransformationConfig.
        :param structured_deidentify_template: The structured_deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        """
        self.openapi_types = {
            'deidentify_template': str,
            'image_redact_template': str,
            'structured_deidentify_template': str
        }

        self.attribute_map = {
            'deidentify_template': 'deidentifyTemplate',
            'image_redact_template': 'imageRedactTemplate',
            'structured_deidentify_template': 'structuredDeidentifyTemplate'
        }

        self._deidentify_template = deidentify_template
        self._image_redact_template = image_redact_template
        self._structured_deidentify_template = structured_deidentify_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2TransformationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2TransformationConfig of this GooglePrivacyDlpV2TransformationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deidentify_template(self):
        """Gets the deidentify_template of this GooglePrivacyDlpV2TransformationConfig.

        De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.

        :return: The deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        :rtype: str
        """
        return self._deidentify_template

    @deidentify_template.setter
    def deidentify_template(self, deidentify_template):
        """Sets the deidentify_template of this GooglePrivacyDlpV2TransformationConfig.

        De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.

        :param deidentify_template: The deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        :type deidentify_template: str
        """

        self._deidentify_template = deidentify_template

    @property
    def image_redact_template(self):
        """Gets the image_redact_template of this GooglePrivacyDlpV2TransformationConfig.

        Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.

        :return: The image_redact_template of this GooglePrivacyDlpV2TransformationConfig.
        :rtype: str
        """
        return self._image_redact_template

    @image_redact_template.setter
    def image_redact_template(self, image_redact_template):
        """Sets the image_redact_template of this GooglePrivacyDlpV2TransformationConfig.

        Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.

        :param image_redact_template: The image_redact_template of this GooglePrivacyDlpV2TransformationConfig.
        :type image_redact_template: str
        """

        self._image_redact_template = image_redact_template

    @property
    def structured_deidentify_template(self):
        """Gets the structured_deidentify_template of this GooglePrivacyDlpV2TransformationConfig.

        Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.

        :return: The structured_deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        :rtype: str
        """
        return self._structured_deidentify_template

    @structured_deidentify_template.setter
    def structured_deidentify_template(self, structured_deidentify_template):
        """Sets the structured_deidentify_template of this GooglePrivacyDlpV2TransformationConfig.

        Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.

        :param structured_deidentify_template: The structured_deidentify_template of this GooglePrivacyDlpV2TransformationConfig.
        :type structured_deidentify_template: str
        """

        self._structured_deidentify_template = structured_deidentify_template
