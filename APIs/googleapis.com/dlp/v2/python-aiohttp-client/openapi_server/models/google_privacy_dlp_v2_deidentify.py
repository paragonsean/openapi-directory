# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_transformation_config import GooglePrivacyDlpV2TransformationConfig
from openapi_server.models.google_privacy_dlp_v2_transformation_details_storage_config import GooglePrivacyDlpV2TransformationDetailsStorageConfig
from openapi_server import util


class GooglePrivacyDlpV2Deidentify(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_storage_output: str=None, file_types_to_transform: List[str]=None, transformation_config: GooglePrivacyDlpV2TransformationConfig=None, transformation_details_storage_config: GooglePrivacyDlpV2TransformationDetailsStorageConfig=None):
        """GooglePrivacyDlpV2Deidentify - a model defined in OpenAPI

        :param cloud_storage_output: The cloud_storage_output of this GooglePrivacyDlpV2Deidentify.
        :param file_types_to_transform: The file_types_to_transform of this GooglePrivacyDlpV2Deidentify.
        :param transformation_config: The transformation_config of this GooglePrivacyDlpV2Deidentify.
        :param transformation_details_storage_config: The transformation_details_storage_config of this GooglePrivacyDlpV2Deidentify.
        """
        self.openapi_types = {
            'cloud_storage_output': str,
            'file_types_to_transform': List[str],
            'transformation_config': GooglePrivacyDlpV2TransformationConfig,
            'transformation_details_storage_config': GooglePrivacyDlpV2TransformationDetailsStorageConfig
        }

        self.attribute_map = {
            'cloud_storage_output': 'cloudStorageOutput',
            'file_types_to_transform': 'fileTypesToTransform',
            'transformation_config': 'transformationConfig',
            'transformation_details_storage_config': 'transformationDetailsStorageConfig'
        }

        self._cloud_storage_output = cloud_storage_output
        self._file_types_to_transform = file_types_to_transform
        self._transformation_config = transformation_config
        self._transformation_details_storage_config = transformation_details_storage_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Deidentify':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Deidentify of this GooglePrivacyDlpV2Deidentify.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_storage_output(self):
        """Gets the cloud_storage_output of this GooglePrivacyDlpV2Deidentify.

        Required. User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket

        :return: The cloud_storage_output of this GooglePrivacyDlpV2Deidentify.
        :rtype: str
        """
        return self._cloud_storage_output

    @cloud_storage_output.setter
    def cloud_storage_output(self, cloud_storage_output):
        """Sets the cloud_storage_output of this GooglePrivacyDlpV2Deidentify.

        Required. User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket

        :param cloud_storage_output: The cloud_storage_output of this GooglePrivacyDlpV2Deidentify.
        :type cloud_storage_output: str
        """

        self._cloud_storage_output = cloud_storage_output

    @property
    def file_types_to_transform(self):
        """Gets the file_types_to_transform of this GooglePrivacyDlpV2Deidentify.

        List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.

        :return: The file_types_to_transform of this GooglePrivacyDlpV2Deidentify.
        :rtype: List[str]
        """
        return self._file_types_to_transform

    @file_types_to_transform.setter
    def file_types_to_transform(self, file_types_to_transform):
        """Sets the file_types_to_transform of this GooglePrivacyDlpV2Deidentify.

        List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.

        :param file_types_to_transform: The file_types_to_transform of this GooglePrivacyDlpV2Deidentify.
        :type file_types_to_transform: List[str]
        """
        allowed_values = ["FILE_TYPE_UNSPECIFIED", "BINARY_FILE", "TEXT_FILE", "IMAGE", "WORD", "PDF", "AVRO", "CSV", "TSV", "POWERPOINT", "EXCEL"]  # noqa: E501
        if not set(file_types_to_transform).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `file_types_to_transform` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(file_types_to_transform) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._file_types_to_transform = file_types_to_transform

    @property
    def transformation_config(self):
        """Gets the transformation_config of this GooglePrivacyDlpV2Deidentify.


        :return: The transformation_config of this GooglePrivacyDlpV2Deidentify.
        :rtype: GooglePrivacyDlpV2TransformationConfig
        """
        return self._transformation_config

    @transformation_config.setter
    def transformation_config(self, transformation_config):
        """Sets the transformation_config of this GooglePrivacyDlpV2Deidentify.


        :param transformation_config: The transformation_config of this GooglePrivacyDlpV2Deidentify.
        :type transformation_config: GooglePrivacyDlpV2TransformationConfig
        """

        self._transformation_config = transformation_config

    @property
    def transformation_details_storage_config(self):
        """Gets the transformation_details_storage_config of this GooglePrivacyDlpV2Deidentify.


        :return: The transformation_details_storage_config of this GooglePrivacyDlpV2Deidentify.
        :rtype: GooglePrivacyDlpV2TransformationDetailsStorageConfig
        """
        return self._transformation_details_storage_config

    @transformation_details_storage_config.setter
    def transformation_details_storage_config(self, transformation_details_storage_config):
        """Sets the transformation_details_storage_config of this GooglePrivacyDlpV2Deidentify.


        :param transformation_details_storage_config: The transformation_details_storage_config of this GooglePrivacyDlpV2Deidentify.
        :type transformation_details_storage_config: GooglePrivacyDlpV2TransformationDetailsStorageConfig
        """

        self._transformation_details_storage_config = transformation_details_storage_config
