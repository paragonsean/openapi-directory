# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_table_data_profile import GooglePrivacyDlpV2TableDataProfile
from openapi_server import util


class GooglePrivacyDlpV2DataProfilePubSubMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, profile: GooglePrivacyDlpV2TableDataProfile=None):
        """GooglePrivacyDlpV2DataProfilePubSubMessage - a model defined in OpenAPI

        :param event: The event of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        :param profile: The profile of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        """
        self.openapi_types = {
            'event': str,
            'profile': GooglePrivacyDlpV2TableDataProfile
        }

        self.attribute_map = {
            'event': 'event',
            'profile': 'profile'
        }

        self._event = event
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DataProfilePubSubMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DataProfilePubSubMessage of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this GooglePrivacyDlpV2DataProfilePubSubMessage.

        The event that caused the Pub/Sub message to be sent.

        :return: The event of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GooglePrivacyDlpV2DataProfilePubSubMessage.

        The event that caused the Pub/Sub message to be sent.

        :param event: The event of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        :type event: str
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "NEW_PROFILE", "CHANGED_PROFILE", "SCORE_INCREASED", "ERROR_CHANGED"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def profile(self):
        """Gets the profile of this GooglePrivacyDlpV2DataProfilePubSubMessage.


        :return: The profile of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        :rtype: GooglePrivacyDlpV2TableDataProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this GooglePrivacyDlpV2DataProfilePubSubMessage.


        :param profile: The profile of this GooglePrivacyDlpV2DataProfilePubSubMessage.
        :type profile: GooglePrivacyDlpV2TableDataProfile
        """

        self._profile = profile
