# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server.models.google_privacy_dlp_v2_primitive_transformation import GooglePrivacyDlpV2PrimitiveTransformation
from openapi_server import util


class GooglePrivacyDlpV2InfoTypeTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info_types: List[GooglePrivacyDlpV2InfoType]=None, primitive_transformation: GooglePrivacyDlpV2PrimitiveTransformation=None):
        """GooglePrivacyDlpV2InfoTypeTransformation - a model defined in OpenAPI

        :param info_types: The info_types of this GooglePrivacyDlpV2InfoTypeTransformation.
        :param primitive_transformation: The primitive_transformation of this GooglePrivacyDlpV2InfoTypeTransformation.
        """
        self.openapi_types = {
            'info_types': List[GooglePrivacyDlpV2InfoType],
            'primitive_transformation': GooglePrivacyDlpV2PrimitiveTransformation
        }

        self.attribute_map = {
            'info_types': 'infoTypes',
            'primitive_transformation': 'primitiveTransformation'
        }

        self._info_types = info_types
        self._primitive_transformation = primitive_transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2InfoTypeTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2InfoTypeTransformation of this GooglePrivacyDlpV2InfoTypeTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info_types(self):
        """Gets the info_types of this GooglePrivacyDlpV2InfoTypeTransformation.

        InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.

        :return: The info_types of this GooglePrivacyDlpV2InfoTypeTransformation.
        :rtype: List[GooglePrivacyDlpV2InfoType]
        """
        return self._info_types

    @info_types.setter
    def info_types(self, info_types):
        """Sets the info_types of this GooglePrivacyDlpV2InfoTypeTransformation.

        InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.

        :param info_types: The info_types of this GooglePrivacyDlpV2InfoTypeTransformation.
        :type info_types: List[GooglePrivacyDlpV2InfoType]
        """

        self._info_types = info_types

    @property
    def primitive_transformation(self):
        """Gets the primitive_transformation of this GooglePrivacyDlpV2InfoTypeTransformation.


        :return: The primitive_transformation of this GooglePrivacyDlpV2InfoTypeTransformation.
        :rtype: GooglePrivacyDlpV2PrimitiveTransformation
        """
        return self._primitive_transformation

    @primitive_transformation.setter
    def primitive_transformation(self, primitive_transformation):
        """Sets the primitive_transformation of this GooglePrivacyDlpV2InfoTypeTransformation.


        :param primitive_transformation: The primitive_transformation of this GooglePrivacyDlpV2InfoTypeTransformation.
        :type primitive_transformation: GooglePrivacyDlpV2PrimitiveTransformation
        """

        self._primitive_transformation = primitive_transformation
