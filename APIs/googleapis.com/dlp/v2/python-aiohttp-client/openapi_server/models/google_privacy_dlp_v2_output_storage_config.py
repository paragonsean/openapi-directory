# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_big_query_table import GooglePrivacyDlpV2BigQueryTable
from openapi_server import util


class GooglePrivacyDlpV2OutputStorageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output_schema: str=None, table: GooglePrivacyDlpV2BigQueryTable=None):
        """GooglePrivacyDlpV2OutputStorageConfig - a model defined in OpenAPI

        :param output_schema: The output_schema of this GooglePrivacyDlpV2OutputStorageConfig.
        :param table: The table of this GooglePrivacyDlpV2OutputStorageConfig.
        """
        self.openapi_types = {
            'output_schema': str,
            'table': GooglePrivacyDlpV2BigQueryTable
        }

        self.attribute_map = {
            'output_schema': 'outputSchema',
            'table': 'table'
        }

        self._output_schema = output_schema
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2OutputStorageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2OutputStorageConfig of this GooglePrivacyDlpV2OutputStorageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_schema(self):
        """Gets the output_schema of this GooglePrivacyDlpV2OutputStorageConfig.

        Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.

        :return: The output_schema of this GooglePrivacyDlpV2OutputStorageConfig.
        :rtype: str
        """
        return self._output_schema

    @output_schema.setter
    def output_schema(self, output_schema):
        """Sets the output_schema of this GooglePrivacyDlpV2OutputStorageConfig.

        Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.

        :param output_schema: The output_schema of this GooglePrivacyDlpV2OutputStorageConfig.
        :type output_schema: str
        """
        allowed_values = ["OUTPUT_SCHEMA_UNSPECIFIED", "BASIC_COLUMNS", "GCS_COLUMNS", "DATASTORE_COLUMNS", "BIG_QUERY_COLUMNS", "ALL_COLUMNS"]  # noqa: E501
        if output_schema not in allowed_values:
            raise ValueError(
                "Invalid value for `output_schema` ({0}), must be one of {1}"
                .format(output_schema, allowed_values)
            )

        self._output_schema = output_schema

    @property
    def table(self):
        """Gets the table of this GooglePrivacyDlpV2OutputStorageConfig.


        :return: The table of this GooglePrivacyDlpV2OutputStorageConfig.
        :rtype: GooglePrivacyDlpV2BigQueryTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this GooglePrivacyDlpV2OutputStorageConfig.


        :param table: The table of this GooglePrivacyDlpV2OutputStorageConfig.
        :type table: GooglePrivacyDlpV2BigQueryTable
        """

        self._table = table
