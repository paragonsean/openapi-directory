# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_dictionary import GooglePrivacyDlpV2Dictionary
from openapi_server.models.google_privacy_dlp_v2_exclude_by_hotword import GooglePrivacyDlpV2ExcludeByHotword
from openapi_server.models.google_privacy_dlp_v2_exclude_info_types import GooglePrivacyDlpV2ExcludeInfoTypes
from openapi_server.models.google_privacy_dlp_v2_regex import GooglePrivacyDlpV2Regex
from openapi_server import util


class GooglePrivacyDlpV2ExclusionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dictionary: GooglePrivacyDlpV2Dictionary=None, exclude_by_hotword: GooglePrivacyDlpV2ExcludeByHotword=None, exclude_info_types: GooglePrivacyDlpV2ExcludeInfoTypes=None, matching_type: str=None, regex: GooglePrivacyDlpV2Regex=None):
        """GooglePrivacyDlpV2ExclusionRule - a model defined in OpenAPI

        :param dictionary: The dictionary of this GooglePrivacyDlpV2ExclusionRule.
        :param exclude_by_hotword: The exclude_by_hotword of this GooglePrivacyDlpV2ExclusionRule.
        :param exclude_info_types: The exclude_info_types of this GooglePrivacyDlpV2ExclusionRule.
        :param matching_type: The matching_type of this GooglePrivacyDlpV2ExclusionRule.
        :param regex: The regex of this GooglePrivacyDlpV2ExclusionRule.
        """
        self.openapi_types = {
            'dictionary': GooglePrivacyDlpV2Dictionary,
            'exclude_by_hotword': GooglePrivacyDlpV2ExcludeByHotword,
            'exclude_info_types': GooglePrivacyDlpV2ExcludeInfoTypes,
            'matching_type': str,
            'regex': GooglePrivacyDlpV2Regex
        }

        self.attribute_map = {
            'dictionary': 'dictionary',
            'exclude_by_hotword': 'excludeByHotword',
            'exclude_info_types': 'excludeInfoTypes',
            'matching_type': 'matchingType',
            'regex': 'regex'
        }

        self._dictionary = dictionary
        self._exclude_by_hotword = exclude_by_hotword
        self._exclude_info_types = exclude_info_types
        self._matching_type = matching_type
        self._regex = regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2ExclusionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2ExclusionRule of this GooglePrivacyDlpV2ExclusionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dictionary(self):
        """Gets the dictionary of this GooglePrivacyDlpV2ExclusionRule.


        :return: The dictionary of this GooglePrivacyDlpV2ExclusionRule.
        :rtype: GooglePrivacyDlpV2Dictionary
        """
        return self._dictionary

    @dictionary.setter
    def dictionary(self, dictionary):
        """Sets the dictionary of this GooglePrivacyDlpV2ExclusionRule.


        :param dictionary: The dictionary of this GooglePrivacyDlpV2ExclusionRule.
        :type dictionary: GooglePrivacyDlpV2Dictionary
        """

        self._dictionary = dictionary

    @property
    def exclude_by_hotword(self):
        """Gets the exclude_by_hotword of this GooglePrivacyDlpV2ExclusionRule.


        :return: The exclude_by_hotword of this GooglePrivacyDlpV2ExclusionRule.
        :rtype: GooglePrivacyDlpV2ExcludeByHotword
        """
        return self._exclude_by_hotword

    @exclude_by_hotword.setter
    def exclude_by_hotword(self, exclude_by_hotword):
        """Sets the exclude_by_hotword of this GooglePrivacyDlpV2ExclusionRule.


        :param exclude_by_hotword: The exclude_by_hotword of this GooglePrivacyDlpV2ExclusionRule.
        :type exclude_by_hotword: GooglePrivacyDlpV2ExcludeByHotword
        """

        self._exclude_by_hotword = exclude_by_hotword

    @property
    def exclude_info_types(self):
        """Gets the exclude_info_types of this GooglePrivacyDlpV2ExclusionRule.


        :return: The exclude_info_types of this GooglePrivacyDlpV2ExclusionRule.
        :rtype: GooglePrivacyDlpV2ExcludeInfoTypes
        """
        return self._exclude_info_types

    @exclude_info_types.setter
    def exclude_info_types(self, exclude_info_types):
        """Sets the exclude_info_types of this GooglePrivacyDlpV2ExclusionRule.


        :param exclude_info_types: The exclude_info_types of this GooglePrivacyDlpV2ExclusionRule.
        :type exclude_info_types: GooglePrivacyDlpV2ExcludeInfoTypes
        """

        self._exclude_info_types = exclude_info_types

    @property
    def matching_type(self):
        """Gets the matching_type of this GooglePrivacyDlpV2ExclusionRule.

        How the rule is applied, see MatchingType documentation for details.

        :return: The matching_type of this GooglePrivacyDlpV2ExclusionRule.
        :rtype: str
        """
        return self._matching_type

    @matching_type.setter
    def matching_type(self, matching_type):
        """Sets the matching_type of this GooglePrivacyDlpV2ExclusionRule.

        How the rule is applied, see MatchingType documentation for details.

        :param matching_type: The matching_type of this GooglePrivacyDlpV2ExclusionRule.
        :type matching_type: str
        """
        allowed_values = ["MATCHING_TYPE_UNSPECIFIED", "MATCHING_TYPE_FULL_MATCH", "MATCHING_TYPE_PARTIAL_MATCH", "MATCHING_TYPE_INVERSE_MATCH"]  # noqa: E501
        if matching_type not in allowed_values:
            raise ValueError(
                "Invalid value for `matching_type` ({0}), must be one of {1}"
                .format(matching_type, allowed_values)
            )

        self._matching_type = matching_type

    @property
    def regex(self):
        """Gets the regex of this GooglePrivacyDlpV2ExclusionRule.


        :return: The regex of this GooglePrivacyDlpV2ExclusionRule.
        :rtype: GooglePrivacyDlpV2Regex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this GooglePrivacyDlpV2ExclusionRule.


        :param regex: The regex of this GooglePrivacyDlpV2ExclusionRule.
        :type regex: GooglePrivacyDlpV2Regex
        """

        self._regex = regex
